{"url":"https://api.github.com/repos/apache/bookkeeper/compare/release-4.2.4...release-4.3.0","html_url":"https://github.com/apache/bookkeeper/compare/release-4.2.4...release-4.3.0","permalink_url":"https://github.com/apache/bookkeeper/compare/apache:21f4a4c...apache:9474696","diff_url":"https://github.com/apache/bookkeeper/compare/release-4.2.4...release-4.3.0.diff","patch_url":"https://github.com/apache/bookkeeper/compare/release-4.2.4...release-4.3.0.patch","base_commit":{"sha":"21f4a4cffefaa9391b79d79a7849da9c539af834","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyMWY0YTRjZmZlZmFhOTM5MWI3OWQ3OWE3ODQ5ZGE5YzUzOWFmODM0","commit":{"author":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2014-12-19T19:07:54Z"},"committer":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2014-12-19T19:07:54Z"},"message":"Update versions for 4.2.4 release","tree":{"sha":"9a245417ac5f1a2f761fbffb2f0dbf0c47416a48","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9a245417ac5f1a2f761fbffb2f0dbf0c47416a48"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/21f4a4cffefaa9391b79d79a7849da9c539af834","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/21f4a4cffefaa9391b79d79a7849da9c539af834","html_url":"https://github.com/apache/bookkeeper/commit/21f4a4cffefaa9391b79d79a7849da9c539af834","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/21f4a4cffefaa9391b79d79a7849da9c539af834/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2bc2297cbafae7accb76b00d9801958a42d2ce09","url":"https://api.github.com/repos/apache/bookkeeper/commits/2bc2297cbafae7accb76b00d9801958a42d2ce09","html_url":"https://github.com/apache/bookkeeper/commit/2bc2297cbafae7accb76b00d9801958a42d2ce09"}]},"merge_base_commit":{"sha":"17de3dbe64450bfab7505d7cf51e082eb5672bc8","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxN2RlM2RiZTY0NDUwYmZhYjc1MDVkN2NmNTFlMDgyZWI1NjcyYmM4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:48:28Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:48:28Z"},"message":"Updating version in CHANGES.txt before branching for 4.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1432916 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60604a0da14db36e218fee4997f3d724d25366c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/60604a0da14db36e218fee4997f3d724d25366c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/17de3dbe64450bfab7505d7cf51e082eb5672bc8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/17de3dbe64450bfab7505d7cf51e082eb5672bc8","html_url":"https://github.com/apache/bookkeeper/commit/17de3dbe64450bfab7505d7cf51e082eb5672bc8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/17de3dbe64450bfab7505d7cf51e082eb5672bc8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7d8079c446110872d8f6d50eff86268a3cb4e989","url":"https://api.github.com/repos/apache/bookkeeper/commits/7d8079c446110872d8f6d50eff86268a3cb4e989","html_url":"https://github.com/apache/bookkeeper/commit/7d8079c446110872d8f6d50eff86268a3cb4e989"}]},"status":"diverged","ahead_by":180,"behind_by":100,"total_commits":180,"commits":[{"sha":"582370359c8e0e399b30df5a7e60a569b0d5aadf","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1ODIzNzAzNTljOGUwZTM5OWIzMGRmNWE3ZTYwYTU2OWIwZDVhYWRm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:52:21Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:52:21Z"},"message":"Updating version in CHANGES.txt & pom.xml after branching for 4.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1432921 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"befb3995e59f3332fb9e0d9e97ca74a34cc505b9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/befb3995e59f3332fb9e0d9e97ca74a34cc505b9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/582370359c8e0e399b30df5a7e60a569b0d5aadf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/582370359c8e0e399b30df5a7e60a569b0d5aadf","html_url":"https://github.com/apache/bookkeeper/commit/582370359c8e0e399b30df5a7e60a569b0d5aadf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/582370359c8e0e399b30df5a7e60a569b0d5aadf/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"17de3dbe64450bfab7505d7cf51e082eb5672bc8","url":"https://api.github.com/repos/apache/bookkeeper/commits/17de3dbe64450bfab7505d7cf51e082eb5672bc8","html_url":"https://github.com/apache/bookkeeper/commit/17de3dbe64450bfab7505d7cf51e082eb5672bc8"}]},{"sha":"087e490270c6e006b9e4b47035f20fea843149be","node_id":"MDY6Q29tbWl0MTU3NTk1NjowODdlNDkwMjcwYzZlMDA2YjllNGI0NzAzNWYyMGZlYTg0MzE0OWJl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T15:59:07Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T15:59:07Z"},"message":"BOOKKEEPER-472: Provide an option to start Autorecovery along with Bookie Servers (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1432964 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"15ffe9bc0bda28ac0489ca89b85ecf44e910e5dc","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/15ffe9bc0bda28ac0489ca89b85ecf44e910e5dc"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/087e490270c6e006b9e4b47035f20fea843149be","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/087e490270c6e006b9e4b47035f20fea843149be","html_url":"https://github.com/apache/bookkeeper/commit/087e490270c6e006b9e4b47035f20fea843149be","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/087e490270c6e006b9e4b47035f20fea843149be/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"582370359c8e0e399b30df5a7e60a569b0d5aadf","url":"https://api.github.com/repos/apache/bookkeeper/commits/582370359c8e0e399b30df5a7e60a569b0d5aadf","html_url":"https://github.com/apache/bookkeeper/commit/582370359c8e0e399b30df5a7e60a569b0d5aadf"}]},{"sha":"ec430abc550d8d1d66e9dd8dc3c096f44e666eeb","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYzQzMGFiYzU1MGQ4ZDFkNjZlOWRkOGRjM2MwOTZmNDRlNjY2ZWVi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T16:29:28Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T16:29:28Z"},"message":"Fixup for CHANGES.txt (some issues were missing or wrongly placed, also removed tabs)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1432977 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8edbf14619373af0fde2ed44d78240e84398739e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8edbf14619373af0fde2ed44d78240e84398739e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ec430abc550d8d1d66e9dd8dc3c096f44e666eeb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ec430abc550d8d1d66e9dd8dc3c096f44e666eeb","html_url":"https://github.com/apache/bookkeeper/commit/ec430abc550d8d1d66e9dd8dc3c096f44e666eeb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ec430abc550d8d1d66e9dd8dc3c096f44e666eeb/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"087e490270c6e006b9e4b47035f20fea843149be","url":"https://api.github.com/repos/apache/bookkeeper/commits/087e490270c6e006b9e4b47035f20fea843149be","html_url":"https://github.com/apache/bookkeeper/commit/087e490270c6e006b9e4b47035f20fea843149be"}]},{"sha":"7bed2a74a98f49b31c1653a513944f60a359776c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YmVkMmE3NGE5OGY0OWIzMWMxNjUzYTUxMzk0NGY2MGEzNTk3NzZj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-24T18:35:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-24T18:35:47Z"},"message":"BOOKKEEPER-544: Modify hedwig server tests to allow client testcases to start/stop them as part of their tests (mridul via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1438120 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d20bb39bd66b4ee7125b184b3344a94b1731215","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0d20bb39bd66b4ee7125b184b3344a94b1731215"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7bed2a74a98f49b31c1653a513944f60a359776c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7bed2a74a98f49b31c1653a513944f60a359776c","html_url":"https://github.com/apache/bookkeeper/commit/7bed2a74a98f49b31c1653a513944f60a359776c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7bed2a74a98f49b31c1653a513944f60a359776c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ec430abc550d8d1d66e9dd8dc3c096f44e666eeb","url":"https://api.github.com/repos/apache/bookkeeper/commits/ec430abc550d8d1d66e9dd8dc3c096f44e666eeb","html_url":"https://github.com/apache/bookkeeper/commit/ec430abc550d8d1d66e9dd8dc3c096f44e666eeb"}]},{"sha":"e95b9392d4ba38c68617dff16de53e523d8ea51b","node_id":"MDY6Q29tbWl0MTU3NTk1NjplOTViOTM5MmQ0YmEzOGM2ODYxN2RmZjE2ZGU1M2U1MjNkOGVhNTFi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-31T18:32:57Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-31T18:32:57Z"},"message":"BOOKKEEPER-312: Implementation of JMS provider (mridul via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1441108 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94a9d345c735e8f1583c80cd617eff4ca3a42240","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/94a9d345c735e8f1583c80cd617eff4ca3a42240"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e95b9392d4ba38c68617dff16de53e523d8ea51b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e95b9392d4ba38c68617dff16de53e523d8ea51b","html_url":"https://github.com/apache/bookkeeper/commit/e95b9392d4ba38c68617dff16de53e523d8ea51b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e95b9392d4ba38c68617dff16de53e523d8ea51b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7bed2a74a98f49b31c1653a513944f60a359776c","url":"https://api.github.com/repos/apache/bookkeeper/commits/7bed2a74a98f49b31c1653a513944f60a359776c","html_url":"https://github.com/apache/bookkeeper/commit/7bed2a74a98f49b31c1653a513944f60a359776c"}]},{"sha":"b4bac04a8141fa116223de8028471facbe343555","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiNGJhYzA0YTgxNDFmYTExNjIyM2RlODAyODQ3MWZhY2JlMzQzNTU1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-06T15:28:24Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-06T15:28:24Z"},"message":"BOOKKEEPER-526: multiple threads for delivery manager (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1443017 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9815e4056235eb0a7894d60902a8822ea66f6d6b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9815e4056235eb0a7894d60902a8822ea66f6d6b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b4bac04a8141fa116223de8028471facbe343555","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b4bac04a8141fa116223de8028471facbe343555","html_url":"https://github.com/apache/bookkeeper/commit/b4bac04a8141fa116223de8028471facbe343555","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b4bac04a8141fa116223de8028471facbe343555/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e95b9392d4ba38c68617dff16de53e523d8ea51b","url":"https://api.github.com/repos/apache/bookkeeper/commits/e95b9392d4ba38c68617dff16de53e523d8ea51b","html_url":"https://github.com/apache/bookkeeper/commit/e95b9392d4ba38c68617dff16de53e523d8ea51b"}]},{"sha":"f060c0d2745b47314562bc94ecb5f525e2addb07","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMDYwYzBkMjc0NWI0NzMxNDU2MmJjOTRlY2I1ZjUyNWUyYWRkYjA3","commit":{"author":{"name":"Uma Maheswara Rao G","email":"umamahesh@apache.org","date":"2013-02-08T18:08:49Z"},"committer":{"name":"Uma Maheswara Rao G","email":"umamahesh@apache.org","date":"2013-02-08T18:08:49Z"},"message":"BOOKKEEPER-561 Findbugs report errors with openjdk. Contributed by Ivan Kelly.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1444174 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b613411e60727f962c5e628e354811ac1b44f8c8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b613411e60727f962c5e628e354811ac1b44f8c8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f060c0d2745b47314562bc94ecb5f525e2addb07","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f060c0d2745b47314562bc94ecb5f525e2addb07","html_url":"https://github.com/apache/bookkeeper/commit/f060c0d2745b47314562bc94ecb5f525e2addb07","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f060c0d2745b47314562bc94ecb5f525e2addb07/comments","author":{"login":"umamaheswararao","id":1719507,"node_id":"MDQ6VXNlcjE3MTk1MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1719507?v=4","gravatar_id":"","url":"https://api.github.com/users/umamaheswararao","html_url":"https://github.com/umamaheswararao","followers_url":"https://api.github.com/users/umamaheswararao/followers","following_url":"https://api.github.com/users/umamaheswararao/following{/other_user}","gists_url":"https://api.github.com/users/umamaheswararao/gists{/gist_id}","starred_url":"https://api.github.com/users/umamaheswararao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umamaheswararao/subscriptions","organizations_url":"https://api.github.com/users/umamaheswararao/orgs","repos_url":"https://api.github.com/users/umamaheswararao/repos","events_url":"https://api.github.com/users/umamaheswararao/events{/privacy}","received_events_url":"https://api.github.com/users/umamaheswararao/received_events","type":"User","site_admin":false},"committer":{"login":"umamaheswararao","id":1719507,"node_id":"MDQ6VXNlcjE3MTk1MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1719507?v=4","gravatar_id":"","url":"https://api.github.com/users/umamaheswararao","html_url":"https://github.com/umamaheswararao","followers_url":"https://api.github.com/users/umamaheswararao/followers","following_url":"https://api.github.com/users/umamaheswararao/following{/other_user}","gists_url":"https://api.github.com/users/umamaheswararao/gists{/gist_id}","starred_url":"https://api.github.com/users/umamaheswararao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umamaheswararao/subscriptions","organizations_url":"https://api.github.com/users/umamaheswararao/orgs","repos_url":"https://api.github.com/users/umamaheswararao/repos","events_url":"https://api.github.com/users/umamaheswararao/events{/privacy}","received_events_url":"https://api.github.com/users/umamaheswararao/received_events","type":"User","site_admin":false},"parents":[{"sha":"b4bac04a8141fa116223de8028471facbe343555","url":"https://api.github.com/repos/apache/bookkeeper/commits/b4bac04a8141fa116223de8028471facbe343555","html_url":"https://github.com/apache/bookkeeper/commit/b4bac04a8141fa116223de8028471facbe343555"}]},{"sha":"3902ae5a6056ba6348f71c873d23f74ac32cebef","node_id":"MDY6Q29tbWl0MTU3NTk1NjozOTAyYWU1YTYwNTZiYTYzNDhmNzFjODczZDIzZjc0YWMzMmNlYmVm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-02-09T07:59:47Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-02-09T07:59:47Z"},"message":"BOOKKEEPER-556: BookieServerMXBean#getServerState makes no sense (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1444340 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e5af0c627e633535f2cf20a0e596644714d10f0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5e5af0c627e633535f2cf20a0e596644714d10f0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3902ae5a6056ba6348f71c873d23f74ac32cebef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3902ae5a6056ba6348f71c873d23f74ac32cebef","html_url":"https://github.com/apache/bookkeeper/commit/3902ae5a6056ba6348f71c873d23f74ac32cebef","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3902ae5a6056ba6348f71c873d23f74ac32cebef/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"f060c0d2745b47314562bc94ecb5f525e2addb07","url":"https://api.github.com/repos/apache/bookkeeper/commits/f060c0d2745b47314562bc94ecb5f525e2addb07","html_url":"https://github.com/apache/bookkeeper/commit/f060c0d2745b47314562bc94ecb5f525e2addb07"}]},{"sha":"3bcabc5adb48e75dd041384ebcbb0017d56c3299","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYmNhYmM1YWRiNDhlNzVkZDA0MTM4NGViY2JiMDAxN2Q1NmMzMjk5","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-02-12T05:00:18Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-02-12T05:00:18Z"},"message":"BOOKKEEPER-554: fd leaking when move ledger index file (sijie, ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1445033 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61751de438afd9d9c7fbb476e2959745450c41c4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/61751de438afd9d9c7fbb476e2959745450c41c4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3bcabc5adb48e75dd041384ebcbb0017d56c3299","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3bcabc5adb48e75dd041384ebcbb0017d56c3299","html_url":"https://github.com/apache/bookkeeper/commit/3bcabc5adb48e75dd041384ebcbb0017d56c3299","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3bcabc5adb48e75dd041384ebcbb0017d56c3299/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"3902ae5a6056ba6348f71c873d23f74ac32cebef","url":"https://api.github.com/repos/apache/bookkeeper/commits/3902ae5a6056ba6348f71c873d23f74ac32cebef","html_url":"https://github.com/apache/bookkeeper/commit/3902ae5a6056ba6348f71c873d23f74ac32cebef"}]},{"sha":"26731c770bf8e3cb54ec0466c027b6e313983bba","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNjczMWM3NzBiZjhlM2NiNTRlYzA0NjZjMDI3YjZlMzEzOTgzYmJh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-12T10:16:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-12T10:16:44Z"},"message":"BOOKKEEPER-555: Make BookieServer use Netty rather than a custom IO server (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1445085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d067c3782fe429defb831b3060d86104e081bdd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2d067c3782fe429defb831b3060d86104e081bdd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/26731c770bf8e3cb54ec0466c027b6e313983bba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/26731c770bf8e3cb54ec0466c027b6e313983bba","html_url":"https://github.com/apache/bookkeeper/commit/26731c770bf8e3cb54ec0466c027b6e313983bba","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/26731c770bf8e3cb54ec0466c027b6e313983bba/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"3bcabc5adb48e75dd041384ebcbb0017d56c3299","url":"https://api.github.com/repos/apache/bookkeeper/commits/3bcabc5adb48e75dd041384ebcbb0017d56c3299","html_url":"https://github.com/apache/bookkeeper/commit/3bcabc5adb48e75dd041384ebcbb0017d56c3299"}]},{"sha":"5b7b6835c74a11162164e90e66bb05a84411a8c2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1YjdiNjgzNWM3NGExMTE2MjE2NGU5MGU2NmJiMDVhODQ0MTFhOGMy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-02-15T04:31:08Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-02-15T04:31:08Z"},"message":"BOOKKEEPER-568: NPE during GC with HierarchicalLedgerManager (Matteo via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1446444 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6e6c8d9803f9c64e3a99d4f4de7ceb07526d64ed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6e6c8d9803f9c64e3a99d4f4de7ceb07526d64ed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5b7b6835c74a11162164e90e66bb05a84411a8c2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5b7b6835c74a11162164e90e66bb05a84411a8c2","html_url":"https://github.com/apache/bookkeeper/commit/5b7b6835c74a11162164e90e66bb05a84411a8c2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5b7b6835c74a11162164e90e66bb05a84411a8c2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"26731c770bf8e3cb54ec0466c027b6e313983bba","url":"https://api.github.com/repos/apache/bookkeeper/commits/26731c770bf8e3cb54ec0466c027b6e313983bba","html_url":"https://github.com/apache/bookkeeper/commit/26731c770bf8e3cb54ec0466c027b6e313983bba"}]},{"sha":"cda181255f0bb2ebc1a69f75b2b6f84b50c4fba0","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZGExODEyNTVmMGJiMmViYzFhNjlmNzViMmI2Zjg0YjUwYzRmYmEw","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-02-16T15:02:32Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-02-16T15:02:32Z"},"message":"BOOKKEEPER-569: Critical performance bug in InterleavedLedgerStorage (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1446902 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fe54a5e19f8fc5507d726c3368776efd6b8c4acf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fe54a5e19f8fc5507d726c3368776efd6b8c4acf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cda181255f0bb2ebc1a69f75b2b6f84b50c4fba0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cda181255f0bb2ebc1a69f75b2b6f84b50c4fba0","html_url":"https://github.com/apache/bookkeeper/commit/cda181255f0bb2ebc1a69f75b2b6f84b50c4fba0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cda181255f0bb2ebc1a69f75b2b6f84b50c4fba0/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"5b7b6835c74a11162164e90e66bb05a84411a8c2","url":"https://api.github.com/repos/apache/bookkeeper/commits/5b7b6835c74a11162164e90e66bb05a84411a8c2","html_url":"https://github.com/apache/bookkeeper/commit/5b7b6835c74a11162164e90e66bb05a84411a8c2"}]},{"sha":"040a442bef5b93143a9e07c0b601fddea88c5712","node_id":"MDY6Q29tbWl0MTU3NTk1NjowNDBhNDQyYmVmNWI5MzE0M2E5ZTA3YzBiNjAxZmRkZWE4OGM1NzEy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T15:15:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T15:15:47Z"},"message":"BOOKKEEPER-548: Document about periodic ledger checker configuration (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1447756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3ce3940cef1a613c462ba8734b15317ff62d46b3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3ce3940cef1a613c462ba8734b15317ff62d46b3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/040a442bef5b93143a9e07c0b601fddea88c5712","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/040a442bef5b93143a9e07c0b601fddea88c5712","html_url":"https://github.com/apache/bookkeeper/commit/040a442bef5b93143a9e07c0b601fddea88c5712","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/040a442bef5b93143a9e07c0b601fddea88c5712/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"cda181255f0bb2ebc1a69f75b2b6f84b50c4fba0","url":"https://api.github.com/repos/apache/bookkeeper/commits/cda181255f0bb2ebc1a69f75b2b6f84b50c4fba0","html_url":"https://github.com/apache/bookkeeper/commit/cda181255f0bb2ebc1a69f75b2b6f84b50c4fba0"}]},{"sha":"f4d189431ee77d1133b617dba9e939756cb9d721","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNGQxODk0MzFlZTc3ZDExMzNiNjE3ZGJhOWU5Mzk3NTZjYjlkNzIx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T15:19:22Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T15:19:22Z"},"message":"BOOKKEEPER-549: Documentation missed for readOnlyMode support (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1447759 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d868052e5c8766e983d42bea91b60f8dfa9f180","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9d868052e5c8766e983d42bea91b60f8dfa9f180"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f4d189431ee77d1133b617dba9e939756cb9d721","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f4d189431ee77d1133b617dba9e939756cb9d721","html_url":"https://github.com/apache/bookkeeper/commit/f4d189431ee77d1133b617dba9e939756cb9d721","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f4d189431ee77d1133b617dba9e939756cb9d721/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"040a442bef5b93143a9e07c0b601fddea88c5712","url":"https://api.github.com/repos/apache/bookkeeper/commits/040a442bef5b93143a9e07c0b601fddea88c5712","html_url":"https://github.com/apache/bookkeeper/commit/040a442bef5b93143a9e07c0b601fddea88c5712"}]},{"sha":"d40d380363f7ab608231e91b84dd94e3478f3773","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNDBkMzgwMzYzZjdhYjYwODIzMWU5MWI4NGRkOTRlMzQ3OGYzNzcz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T15:52:35Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T15:52:35Z"},"message":"BOOKKEEPER-567: ReadOnlyBookieTest hangs on shutdown (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1447772 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57a72800548639dc41a1b225c48c0c2baaf4762f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/57a72800548639dc41a1b225c48c0c2baaf4762f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d40d380363f7ab608231e91b84dd94e3478f3773","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d40d380363f7ab608231e91b84dd94e3478f3773","html_url":"https://github.com/apache/bookkeeper/commit/d40d380363f7ab608231e91b84dd94e3478f3773","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d40d380363f7ab608231e91b84dd94e3478f3773/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f4d189431ee77d1133b617dba9e939756cb9d721","url":"https://api.github.com/repos/apache/bookkeeper/commits/f4d189431ee77d1133b617dba9e939756cb9d721","html_url":"https://github.com/apache/bookkeeper/commit/f4d189431ee77d1133b617dba9e939756cb9d721"}]},{"sha":"f31a366fa581b5561bc51d6dd06ce2ebfe3c9f03","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMzFhMzY2ZmE1ODFiNTU2MWJjNTFkNmRkMDZjZTJlYmZlM2M5ZjAz","commit":{"author":{"name":"Uma Maheswara Rao G","email":"umamahesh@apache.org","date":"2013-02-26T03:12:24Z"},"committer":{"name":"Uma Maheswara Rao G","email":"umamahesh@apache.org","date":"2013-02-26T03:12:24Z"},"message":"BOOKKEEPER-574: Extend the bookkeeper shell to get a list of available bookies. Contributed by Ivan Kelly\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1450005 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd73882558c1e37996c34173b74e93ee8843440c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cd73882558c1e37996c34173b74e93ee8843440c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f31a366fa581b5561bc51d6dd06ce2ebfe3c9f03","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f31a366fa581b5561bc51d6dd06ce2ebfe3c9f03","html_url":"https://github.com/apache/bookkeeper/commit/f31a366fa581b5561bc51d6dd06ce2ebfe3c9f03","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f31a366fa581b5561bc51d6dd06ce2ebfe3c9f03/comments","author":{"login":"umamaheswararao","id":1719507,"node_id":"MDQ6VXNlcjE3MTk1MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1719507?v=4","gravatar_id":"","url":"https://api.github.com/users/umamaheswararao","html_url":"https://github.com/umamaheswararao","followers_url":"https://api.github.com/users/umamaheswararao/followers","following_url":"https://api.github.com/users/umamaheswararao/following{/other_user}","gists_url":"https://api.github.com/users/umamaheswararao/gists{/gist_id}","starred_url":"https://api.github.com/users/umamaheswararao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umamaheswararao/subscriptions","organizations_url":"https://api.github.com/users/umamaheswararao/orgs","repos_url":"https://api.github.com/users/umamaheswararao/repos","events_url":"https://api.github.com/users/umamaheswararao/events{/privacy}","received_events_url":"https://api.github.com/users/umamaheswararao/received_events","type":"User","site_admin":false},"committer":{"login":"umamaheswararao","id":1719507,"node_id":"MDQ6VXNlcjE3MTk1MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1719507?v=4","gravatar_id":"","url":"https://api.github.com/users/umamaheswararao","html_url":"https://github.com/umamaheswararao","followers_url":"https://api.github.com/users/umamaheswararao/followers","following_url":"https://api.github.com/users/umamaheswararao/following{/other_user}","gists_url":"https://api.github.com/users/umamaheswararao/gists{/gist_id}","starred_url":"https://api.github.com/users/umamaheswararao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umamaheswararao/subscriptions","organizations_url":"https://api.github.com/users/umamaheswararao/orgs","repos_url":"https://api.github.com/users/umamaheswararao/repos","events_url":"https://api.github.com/users/umamaheswararao/events{/privacy}","received_events_url":"https://api.github.com/users/umamaheswararao/received_events","type":"User","site_admin":false},"parents":[{"sha":"d40d380363f7ab608231e91b84dd94e3478f3773","url":"https://api.github.com/repos/apache/bookkeeper/commits/d40d380363f7ab608231e91b84dd94e3478f3773","html_url":"https://github.com/apache/bookkeeper/commit/d40d380363f7ab608231e91b84dd94e3478f3773"}]},{"sha":"ea5a13d748918f495ad1cb1e37c0f995e3d53072","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYTVhMTNkNzQ4OTE4ZjQ5NWFkMWNiMWUzN2MwZjk5NWUzZDUzMDcy","commit":{"author":{"name":"Uma Maheswara Rao G","email":"umamahesh@apache.org","date":"2013-03-05T17:45:58Z"},"committer":{"name":"Uma Maheswara Rao G","email":"umamahesh@apache.org","date":"2013-03-05T17:45:58Z"},"message":"BOOKKEEPER-559: Fix occasional failure in AuditorBookieTest. Contributed by Ivan Kelly.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1452915 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"32298c55acbb52ed73ae728951af29c91ffac025","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/32298c55acbb52ed73ae728951af29c91ffac025"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ea5a13d748918f495ad1cb1e37c0f995e3d53072","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ea5a13d748918f495ad1cb1e37c0f995e3d53072","html_url":"https://github.com/apache/bookkeeper/commit/ea5a13d748918f495ad1cb1e37c0f995e3d53072","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ea5a13d748918f495ad1cb1e37c0f995e3d53072/comments","author":{"login":"umamaheswararao","id":1719507,"node_id":"MDQ6VXNlcjE3MTk1MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1719507?v=4","gravatar_id":"","url":"https://api.github.com/users/umamaheswararao","html_url":"https://github.com/umamaheswararao","followers_url":"https://api.github.com/users/umamaheswararao/followers","following_url":"https://api.github.com/users/umamaheswararao/following{/other_user}","gists_url":"https://api.github.com/users/umamaheswararao/gists{/gist_id}","starred_url":"https://api.github.com/users/umamaheswararao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umamaheswararao/subscriptions","organizations_url":"https://api.github.com/users/umamaheswararao/orgs","repos_url":"https://api.github.com/users/umamaheswararao/repos","events_url":"https://api.github.com/users/umamaheswararao/events{/privacy}","received_events_url":"https://api.github.com/users/umamaheswararao/received_events","type":"User","site_admin":false},"committer":{"login":"umamaheswararao","id":1719507,"node_id":"MDQ6VXNlcjE3MTk1MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1719507?v=4","gravatar_id":"","url":"https://api.github.com/users/umamaheswararao","html_url":"https://github.com/umamaheswararao","followers_url":"https://api.github.com/users/umamaheswararao/followers","following_url":"https://api.github.com/users/umamaheswararao/following{/other_user}","gists_url":"https://api.github.com/users/umamaheswararao/gists{/gist_id}","starred_url":"https://api.github.com/users/umamaheswararao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umamaheswararao/subscriptions","organizations_url":"https://api.github.com/users/umamaheswararao/orgs","repos_url":"https://api.github.com/users/umamaheswararao/repos","events_url":"https://api.github.com/users/umamaheswararao/events{/privacy}","received_events_url":"https://api.github.com/users/umamaheswararao/received_events","type":"User","site_admin":false},"parents":[{"sha":"f31a366fa581b5561bc51d6dd06ce2ebfe3c9f03","url":"https://api.github.com/repos/apache/bookkeeper/commits/f31a366fa581b5561bc51d6dd06ce2ebfe3c9f03","html_url":"https://github.com/apache/bookkeeper/commit/f31a366fa581b5561bc51d6dd06ce2ebfe3c9f03"}]},{"sha":"94ea9a8629ce404566d875895208dabe82c99fbe","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NGVhOWE4NjI5Y2U0MDQ1NjZkODc1ODk1MjA4ZGFiZTgyYzk5ZmJl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-08T23:42:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-08T23:42:44Z"},"message":"BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1454625 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f2e85f47f10d0ca242a9ab1bfb838747c386f223","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f2e85f47f10d0ca242a9ab1bfb838747c386f223"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/94ea9a8629ce404566d875895208dabe82c99fbe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/94ea9a8629ce404566d875895208dabe82c99fbe","html_url":"https://github.com/apache/bookkeeper/commit/94ea9a8629ce404566d875895208dabe82c99fbe","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/94ea9a8629ce404566d875895208dabe82c99fbe/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea5a13d748918f495ad1cb1e37c0f995e3d53072","url":"https://api.github.com/repos/apache/bookkeeper/commits/ea5a13d748918f495ad1cb1e37c0f995e3d53072","html_url":"https://github.com/apache/bookkeeper/commit/ea5a13d748918f495ad1cb1e37c0f995e3d53072"}]},{"sha":"1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxYjdjYjZmYTk3MDRkMTBhM2E2MTM0ZWRmZDBiMTJkODViZjAwMTJj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-17T23:31:20Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-17T23:31:20Z"},"message":"BOOKKEEPER-576: Bookie client should use netty Decoder/Encoder (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1457592 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7b2b5b24272412c8f67e6ae6d9243b5517e4a888","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7b2b5b24272412c8f67e6ae6d9243b5517e4a888"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c","html_url":"https://github.com/apache/bookkeeper/commit/1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"94ea9a8629ce404566d875895208dabe82c99fbe","url":"https://api.github.com/repos/apache/bookkeeper/commits/94ea9a8629ce404566d875895208dabe82c99fbe","html_url":"https://github.com/apache/bookkeeper/commit/94ea9a8629ce404566d875895208dabe82c99fbe"}]},{"sha":"9f0d2a3e2f4279921f8fa1df8aad708773124cd5","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZjBkMmEzZTJmNDI3OTkyMWY4ZmExZGY4YWFkNzA4NzczMTI0Y2Q1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-17T23:33:57Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-17T23:33:57Z"},"message":" BOOKKEEPER-585: Auditor logs noisily when a ledger has been deleted (ivank via sijie) \n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1457596 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d0c1c374282495eddb9ee53af66c9719316e5df4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d0c1c374282495eddb9ee53af66c9719316e5df4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9f0d2a3e2f4279921f8fa1df8aad708773124cd5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9f0d2a3e2f4279921f8fa1df8aad708773124cd5","html_url":"https://github.com/apache/bookkeeper/commit/9f0d2a3e2f4279921f8fa1df8aad708773124cd5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c","url":"https://api.github.com/repos/apache/bookkeeper/commits/1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c","html_url":"https://github.com/apache/bookkeeper/commit/1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c"}]},{"sha":"9868081b708b27f272e2a92cf04163996caf9544","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ODY4MDgxYjcwOGIyN2YyNzJlMmE5MmNmMDQxNjM5OTZjYWY5NTQ0","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-17T23:40:07Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-17T23:40:07Z"},"message":"BOOKKEEPER-573: Script to start a bookkeeper cluster (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1457598 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8aa28eb5a709cf1d3d7a361d415bcaff73aaa529","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8aa28eb5a709cf1d3d7a361d415bcaff73aaa529"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9868081b708b27f272e2a92cf04163996caf9544","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9868081b708b27f272e2a92cf04163996caf9544","html_url":"https://github.com/apache/bookkeeper/commit/9868081b708b27f272e2a92cf04163996caf9544","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9868081b708b27f272e2a92cf04163996caf9544/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"9f0d2a3e2f4279921f8fa1df8aad708773124cd5","url":"https://api.github.com/repos/apache/bookkeeper/commits/9f0d2a3e2f4279921f8fa1df8aad708773124cd5","html_url":"https://github.com/apache/bookkeeper/commit/9f0d2a3e2f4279921f8fa1df8aad708773124cd5"}]},{"sha":"f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMmJiNTYwM2ZmMzNiOGFjNTRiY2RmMmRhZGRiNjFjZjNlNjVkZTgw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-25T05:27:23Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-25T05:27:23Z"},"message":"BOOKKEEPER-557: Compiler error showing up badly with jdk 7 (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1460523 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dccd0e497b52719d0aa5743174c4d4f3a151b312","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dccd0e497b52719d0aa5743174c4d4f3a151b312"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","html_url":"https://github.com/apache/bookkeeper/commit/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"9868081b708b27f272e2a92cf04163996caf9544","url":"https://api.github.com/repos/apache/bookkeeper/commits/9868081b708b27f272e2a92cf04163996caf9544","html_url":"https://github.com/apache/bookkeeper/commit/9868081b708b27f272e2a92cf04163996caf9544"}]},{"sha":"d1bb8ec0e7c65e241f55c8b700395570e0ee5daf","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMWJiOGVjMGU3YzY1ZTI0MWY1NWM4YjcwMDM5NTU3MGUwZWU1ZGFm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-25T05:48:01Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-25T05:48:01Z"},"message":"BOOKKEEPER-583: Read from a ReadOnlyBookie fails if index fileinfo is not in ledger cache (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1460524 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"effa3e92e565b3460aa3987b8a3c1ea805f3ba1c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/effa3e92e565b3460aa3987b8a3c1ea805f3ba1c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d1bb8ec0e7c65e241f55c8b700395570e0ee5daf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d1bb8ec0e7c65e241f55c8b700395570e0ee5daf","html_url":"https://github.com/apache/bookkeeper/commit/d1bb8ec0e7c65e241f55c8b700395570e0ee5daf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d1bb8ec0e7c65e241f55c8b700395570e0ee5daf/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","url":"https://api.github.com/repos/apache/bookkeeper/commits/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","html_url":"https://github.com/apache/bookkeeper/commit/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80"}]},{"sha":"6268be59c7d8cf411860a6807a2cb45bc1c891f4","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2MjY4YmU1OWM3ZDhjZjQxMTg2MGE2ODA3YTJjYjQ1YmMxYzg5MWY0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-25T15:10:21Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-25T15:10:21Z"},"message":"BOOKKEEPER-586: Remove recursive call in delivery manager (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1460709 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"286d0011d6c961268271e52380c733e2f8c265ce","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/286d0011d6c961268271e52380c733e2f8c265ce"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6268be59c7d8cf411860a6807a2cb45bc1c891f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6268be59c7d8cf411860a6807a2cb45bc1c891f4","html_url":"https://github.com/apache/bookkeeper/commit/6268be59c7d8cf411860a6807a2cb45bc1c891f4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6268be59c7d8cf411860a6807a2cb45bc1c891f4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d1bb8ec0e7c65e241f55c8b700395570e0ee5daf","url":"https://api.github.com/repos/apache/bookkeeper/commits/d1bb8ec0e7c65e241f55c8b700395570e0ee5daf","html_url":"https://github.com/apache/bookkeeper/commit/d1bb8ec0e7c65e241f55c8b700395570e0ee5daf"}]},{"sha":"e14cbe41b5db846a5d819fcae6e82bc489ebeb73","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMTRjYmU0MWI1ZGI4NDZhNWQ4MTlmY2FlNmU4MmJjNDg5ZWJlYjcz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-25T16:26:48Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-25T16:26:48Z"},"message":"BOOKKEEPER-506: Provide better topic release algorithm (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1460751 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f746dafa6f186e8eb21170ca031fd1f8e6fb527d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f746dafa6f186e8eb21170ca031fd1f8e6fb527d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e14cbe41b5db846a5d819fcae6e82bc489ebeb73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e14cbe41b5db846a5d819fcae6e82bc489ebeb73","html_url":"https://github.com/apache/bookkeeper/commit/e14cbe41b5db846a5d819fcae6e82bc489ebeb73","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6268be59c7d8cf411860a6807a2cb45bc1c891f4","url":"https://api.github.com/repos/apache/bookkeeper/commits/6268be59c7d8cf411860a6807a2cb45bc1c891f4","html_url":"https://github.com/apache/bookkeeper/commit/6268be59c7d8cf411860a6807a2cb45bc1c891f4"}]},{"sha":"455aabfd3b6ffd4247f6df63cb29d0694b359cdd","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NTVhYWJmZDNiNmZmZDQyNDdmNmRmNjNjYjI5ZDA2OTRiMzU5Y2Rk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-25T17:02:41Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-25T17:02:41Z"},"message":"BOOKKEEPER-581: Ledger recovery doesn't work correctly when recovery adds force changing ensembles. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1460765 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89cdb320a68c06718625de98def4850ca57f8af6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/89cdb320a68c06718625de98def4850ca57f8af6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/455aabfd3b6ffd4247f6df63cb29d0694b359cdd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/455aabfd3b6ffd4247f6df63cb29d0694b359cdd","html_url":"https://github.com/apache/bookkeeper/commit/455aabfd3b6ffd4247f6df63cb29d0694b359cdd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/455aabfd3b6ffd4247f6df63cb29d0694b359cdd/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e14cbe41b5db846a5d819fcae6e82bc489ebeb73","url":"https://api.github.com/repos/apache/bookkeeper/commits/e14cbe41b5db846a5d819fcae6e82bc489ebeb73","html_url":"https://github.com/apache/bookkeeper/commit/e14cbe41b5db846a5d819fcae6e82bc489ebeb73"}]},{"sha":"feb077afa2e5064f24f011067fd626c81ede8491","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmZWIwNzdhZmEyZTUwNjRmMjRmMDExMDY3ZmQ2MjZjODFlZGU4NDkx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-02T14:14:45Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-02T14:14:45Z"},"message":"BOOKKEEPER-597: Add flag to output test logs to stdout (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1463555 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4019f0314fe91cab7376334e390ae5bc42051508","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4019f0314fe91cab7376334e390ae5bc42051508"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/feb077afa2e5064f24f011067fd626c81ede8491","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/feb077afa2e5064f24f011067fd626c81ede8491","html_url":"https://github.com/apache/bookkeeper/commit/feb077afa2e5064f24f011067fd626c81ede8491","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/feb077afa2e5064f24f011067fd626c81ede8491/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"455aabfd3b6ffd4247f6df63cb29d0694b359cdd","url":"https://api.github.com/repos/apache/bookkeeper/commits/455aabfd3b6ffd4247f6df63cb29d0694b359cdd","html_url":"https://github.com/apache/bookkeeper/commit/455aabfd3b6ffd4247f6df63cb29d0694b359cdd"}]},{"sha":"c8f9135e7d3147a2a474df31b430b8c403e2792a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjOGY5MTM1ZTdkMzE0N2EyYTQ3NGRmMzFiNDMwYjhjNDAzZTI3OTJh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-02T15:38:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-02T15:38:49Z"},"message":"BOOKKEEPER-595: Crash of inprocess autorecovery daemon should not take down the bookie (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1463599 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"159dbf08540ccfb8778bb922c8869c0ceff700d4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/159dbf08540ccfb8778bb922c8869c0ceff700d4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c8f9135e7d3147a2a474df31b430b8c403e2792a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c8f9135e7d3147a2a474df31b430b8c403e2792a","html_url":"https://github.com/apache/bookkeeper/commit/c8f9135e7d3147a2a474df31b430b8c403e2792a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c8f9135e7d3147a2a474df31b430b8c403e2792a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"feb077afa2e5064f24f011067fd626c81ede8491","url":"https://api.github.com/repos/apache/bookkeeper/commits/feb077afa2e5064f24f011067fd626c81ede8491","html_url":"https://github.com/apache/bookkeeper/commit/feb077afa2e5064f24f011067fd626c81ede8491"}]},{"sha":"b118823702e946ccdeb14843e2691fdd760a59e4","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiMTE4ODIzNzAyZTk0NmNjZGViMTQ4NDNlMjY5MWZkZDc2MGE1OWU0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-04T09:21:26Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-04T09:21:26Z"},"message":"BOOKKEEPER-596: Ledgers are gc'ed by mistake in MSLedgerManagerFactory. (sijie & ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1464385 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"268f594f124ad00f1f62fb3162cfa8d5b40ff1ed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/268f594f124ad00f1f62fb3162cfa8d5b40ff1ed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b118823702e946ccdeb14843e2691fdd760a59e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b118823702e946ccdeb14843e2691fdd760a59e4","html_url":"https://github.com/apache/bookkeeper/commit/b118823702e946ccdeb14843e2691fdd760a59e4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b118823702e946ccdeb14843e2691fdd760a59e4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c8f9135e7d3147a2a474df31b430b8c403e2792a","url":"https://api.github.com/repos/apache/bookkeeper/commits/c8f9135e7d3147a2a474df31b430b8c403e2792a","html_url":"https://github.com/apache/bookkeeper/commit/c8f9135e7d3147a2a474df31b430b8c403e2792a"}]},{"sha":"cdf138e24b76f934721eb1e82a226d0be296b838","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZGYxMzhlMjRiNzZmOTM0NzIxZWIxZTgyYTIyNmQwYmUyOTZiODM4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-04-07T18:07:06Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-04-07T18:07:06Z"},"message":"BOOKKEEPER-599: NPE in PerChannelBookieClient (jiannan via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1465437 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6db6919e4cd35c3ad62cbe61cc36d34e7afe31eb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6db6919e4cd35c3ad62cbe61cc36d34e7afe31eb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cdf138e24b76f934721eb1e82a226d0be296b838","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cdf138e24b76f934721eb1e82a226d0be296b838","html_url":"https://github.com/apache/bookkeeper/commit/cdf138e24b76f934721eb1e82a226d0be296b838","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cdf138e24b76f934721eb1e82a226d0be296b838/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"b118823702e946ccdeb14843e2691fdd760a59e4","url":"https://api.github.com/repos/apache/bookkeeper/commits/b118823702e946ccdeb14843e2691fdd760a59e4","html_url":"https://github.com/apache/bookkeeper/commit/b118823702e946ccdeb14843e2691fdd760a59e4"}]},{"sha":"09ec928ee0218caeef5661ba60978fd18b2e553b","node_id":"MDY6Q29tbWl0MTU3NTk1NjowOWVjOTI4ZWUwMjE4Y2FlZWY1NjYxYmE2MDk3OGZkMThiMmU1NTNi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-04-07T18:11:21Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-04-07T18:11:21Z"},"message":"BOOKKEEPER-598: Fails to compile - RESUBSCRIBE_EXCEPTION conflict (Matthew Farrellee via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1465438 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4208ba73769586eb8d70b60a55b2a7f43def54bf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4208ba73769586eb8d70b60a55b2a7f43def54bf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/09ec928ee0218caeef5661ba60978fd18b2e553b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/09ec928ee0218caeef5661ba60978fd18b2e553b","html_url":"https://github.com/apache/bookkeeper/commit/09ec928ee0218caeef5661ba60978fd18b2e553b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/09ec928ee0218caeef5661ba60978fd18b2e553b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"cdf138e24b76f934721eb1e82a226d0be296b838","url":"https://api.github.com/repos/apache/bookkeeper/commits/cdf138e24b76f934721eb1e82a226d0be296b838","html_url":"https://github.com/apache/bookkeeper/commit/cdf138e24b76f934721eb1e82a226d0be296b838"}]},{"sha":"685ca079690f8be2cbcfacb615fc0eb5a798b8da","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ODVjYTA3OTY5MGY4YmUyY2JjZmFjYjYxNWZjMGViNWE3OThiOGRh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-26T16:38:02Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-26T16:38:02Z"},"message":"BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1476283 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dc772396ef45aebe17d1624a66f4c65e7de285c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dc772396ef45aebe17d1624a66f4c65e7de285c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/685ca079690f8be2cbcfacb615fc0eb5a798b8da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/685ca079690f8be2cbcfacb615fc0eb5a798b8da","html_url":"https://github.com/apache/bookkeeper/commit/685ca079690f8be2cbcfacb615fc0eb5a798b8da","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/685ca079690f8be2cbcfacb615fc0eb5a798b8da/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"09ec928ee0218caeef5661ba60978fd18b2e553b","url":"https://api.github.com/repos/apache/bookkeeper/commits/09ec928ee0218caeef5661ba60978fd18b2e553b","html_url":"https://github.com/apache/bookkeeper/commit/09ec928ee0218caeef5661ba60978fd18b2e553b"}]},{"sha":"d175ada58dcaf78f0a70b0ebebf489255ae67b5f","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMTc1YWRhNThkY2FmNzhmMGE3MGIwZWJlYmY0ODkyNTVhZTY3YjVm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-04T12:22:10Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-04T12:22:10Z"},"message":"BOOKKEEPER-564: Better checkpoint mechanism (sijie & ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1479085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dba5fecdf9563f22ec400d2761aff7ec27f6cb01","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dba5fecdf9563f22ec400d2761aff7ec27f6cb01"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d175ada58dcaf78f0a70b0ebebf489255ae67b5f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d175ada58dcaf78f0a70b0ebebf489255ae67b5f","html_url":"https://github.com/apache/bookkeeper/commit/d175ada58dcaf78f0a70b0ebebf489255ae67b5f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d175ada58dcaf78f0a70b0ebebf489255ae67b5f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"685ca079690f8be2cbcfacb615fc0eb5a798b8da","url":"https://api.github.com/repos/apache/bookkeeper/commits/685ca079690f8be2cbcfacb615fc0eb5a798b8da","html_url":"https://github.com/apache/bookkeeper/commit/685ca079690f8be2cbcfacb615fc0eb5a798b8da"}]},{"sha":"3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYTRmODkyMGJhNTAxN2VmMzdkNzY0MWQzZDVmMGVlYjBiYmM1OTBi","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-05-06T17:32:45Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-05-06T17:32:45Z"},"message":"BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1479649 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06ff7c097a7eb69d4412a040758036c62ab5d5b6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/06ff7c097a7eb69d4412a040758036c62ab5d5b6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","html_url":"https://github.com/apache/bookkeeper/commit/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"d175ada58dcaf78f0a70b0ebebf489255ae67b5f","url":"https://api.github.com/repos/apache/bookkeeper/commits/d175ada58dcaf78f0a70b0ebebf489255ae67b5f","html_url":"https://github.com/apache/bookkeeper/commit/d175ada58dcaf78f0a70b0ebebf489255ae67b5f"}]},{"sha":"f86e4929ef9c0ddfa7d26d230caefa369a2a0dde","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmODZlNDkyOWVmOWMwZGRmYTdkMjZkMjMwY2FlZmEzNjlhMmEwZGRl","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-05-07T19:49:19Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-05-07T19:49:19Z"},"message":"BOOKkEEPER-577: BookieFailureTest uses sync/wait()/notify() incorrectly (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1480051 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d9f6220a22bfd227bee0b7e53a9401ea83284a9c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d9f6220a22bfd227bee0b7e53a9401ea83284a9c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f86e4929ef9c0ddfa7d26d230caefa369a2a0dde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f86e4929ef9c0ddfa7d26d230caefa369a2a0dde","html_url":"https://github.com/apache/bookkeeper/commit/f86e4929ef9c0ddfa7d26d230caefa369a2a0dde","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f86e4929ef9c0ddfa7d26d230caefa369a2a0dde/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","url":"https://api.github.com/repos/apache/bookkeeper/commits/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","html_url":"https://github.com/apache/bookkeeper/commit/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b"}]},{"sha":"c2bb7ffb366d5c1942ee2e040516af749a705115","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMmJiN2ZmYjM2NmQ1YzE5NDJlZTJlMDQwNTE2YWY3NDlhNzA1MTE1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-09T09:41:35Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-09T09:41:35Z"},"message":"BOOKKEEPER-608: Make SyncThread a reusable component (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1480580 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"458851943da6950179fec0204eb72ea588e365c8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/458851943da6950179fec0204eb72ea588e365c8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c2bb7ffb366d5c1942ee2e040516af749a705115","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c2bb7ffb366d5c1942ee2e040516af749a705115","html_url":"https://github.com/apache/bookkeeper/commit/c2bb7ffb366d5c1942ee2e040516af749a705115","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c2bb7ffb366d5c1942ee2e040516af749a705115/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f86e4929ef9c0ddfa7d26d230caefa369a2a0dde","url":"https://api.github.com/repos/apache/bookkeeper/commits/f86e4929ef9c0ddfa7d26d230caefa369a2a0dde","html_url":"https://github.com/apache/bookkeeper/commit/f86e4929ef9c0ddfa7d26d230caefa369a2a0dde"}]},{"sha":"4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0Yzg5MzEwZjhiOGUwOWYyYWQzOTRhN2U3ZmQ1ZmZmYzhmNTFlNzAx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-10T10:45:58Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-10T10:45:58Z"},"message":"BOOKKEEPER-257: Ability to list all ledgers (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1480978 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"23f5d69d8cf6ba71501036b5ef3c5de3295d3270","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/23f5d69d8cf6ba71501036b5ef3c5de3295d3270"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","html_url":"https://github.com/apache/bookkeeper/commit/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c2bb7ffb366d5c1942ee2e040516af749a705115","url":"https://api.github.com/repos/apache/bookkeeper/commits/c2bb7ffb366d5c1942ee2e040516af749a705115","html_url":"https://github.com/apache/bookkeeper/commit/c2bb7ffb366d5c1942ee2e040516af749a705115"}]},{"sha":"ccc9545c4565c337ef6ea06004149de75b4dd3af","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjY2M5NTQ1YzQ1NjVjMzM3ZWY2ZWEwNjAwNDE0OWRlNzViNGRkM2Fm","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-05-31T10:02:59Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-05-31T10:02:59Z"},"message":"BOOKKEEPER-611: Speed up bookkeeper tests (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1488138 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a0e8e61e70c6490381760787dcbca2111e4827f7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a0e8e61e70c6490381760787dcbca2111e4827f7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ccc9545c4565c337ef6ea06004149de75b4dd3af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ccc9545c4565c337ef6ea06004149de75b4dd3af","html_url":"https://github.com/apache/bookkeeper/commit/ccc9545c4565c337ef6ea06004149de75b4dd3af","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ccc9545c4565c337ef6ea06004149de75b4dd3af/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","url":"https://api.github.com/repos/apache/bookkeeper/commits/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","html_url":"https://github.com/apache/bookkeeper/commit/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701"}]},{"sha":"cf2a858bb7bc669e12058e2dda1a996a67d3d37a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZjJhODU4YmI3YmM2NjllMTIwNThlMmRkYTFhOTk2YTY3ZDNkMzdh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-03T11:03:30Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-03T11:03:30Z"},"message":"BOOKKEEPER-603: Support Boost 1.53 for Hedwig Cpp Client (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1488954 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"780b14672954fd2762e0c05cafdeb7f5178dba74","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/780b14672954fd2762e0c05cafdeb7f5178dba74"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cf2a858bb7bc669e12058e2dda1a996a67d3d37a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cf2a858bb7bc669e12058e2dda1a996a67d3d37a","html_url":"https://github.com/apache/bookkeeper/commit/cf2a858bb7bc669e12058e2dda1a996a67d3d37a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cf2a858bb7bc669e12058e2dda1a996a67d3d37a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ccc9545c4565c337ef6ea06004149de75b4dd3af","url":"https://api.github.com/repos/apache/bookkeeper/commits/ccc9545c4565c337ef6ea06004149de75b4dd3af","html_url":"https://github.com/apache/bookkeeper/commit/ccc9545c4565c337ef6ea06004149de75b4dd3af"}]},{"sha":"faf2ed87762fabe4f6cb5f629cf5a7132869ca60","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYWYyZWQ4Nzc2MmZhYmU0ZjZjYjVmNjI5Y2Y1YTcxMzI4NjljYTYw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-05T09:49:01Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-05T09:49:01Z"},"message":"BOOKKEEPER-617: BOOKKEEPER-544 breaks hedwig-server/bin/hedwig script (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1489775 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d748cf5ea5f789e912a32240bb1e2e550dc4ef5b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d748cf5ea5f789e912a32240bb1e2e550dc4ef5b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/faf2ed87762fabe4f6cb5f629cf5a7132869ca60","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/faf2ed87762fabe4f6cb5f629cf5a7132869ca60","html_url":"https://github.com/apache/bookkeeper/commit/faf2ed87762fabe4f6cb5f629cf5a7132869ca60","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/faf2ed87762fabe4f6cb5f629cf5a7132869ca60/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"cf2a858bb7bc669e12058e2dda1a996a67d3d37a","url":"https://api.github.com/repos/apache/bookkeeper/commits/cf2a858bb7bc669e12058e2dda1a996a67d3d37a","html_url":"https://github.com/apache/bookkeeper/commit/cf2a858bb7bc669e12058e2dda1a996a67d3d37a"}]},{"sha":"1c04906c0077d228076c3d157d815e5c7219bb0c","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxYzA0OTA2YzAwNzdkMjI4MDc2YzNkMTU3ZDgxNWU1YzcyMTliYjBj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-12T16:41:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-12T16:41:47Z"},"message":"BOOKKEEPER-592: allow application to recommend ledger data locality (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1492274 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8669f4bd48d495972be15c430a9f2df6479fe9ac","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8669f4bd48d495972be15c430a9f2df6479fe9ac"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1c04906c0077d228076c3d157d815e5c7219bb0c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1c04906c0077d228076c3d157d815e5c7219bb0c","html_url":"https://github.com/apache/bookkeeper/commit/1c04906c0077d228076c3d157d815e5c7219bb0c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1c04906c0077d228076c3d157d815e5c7219bb0c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"faf2ed87762fabe4f6cb5f629cf5a7132869ca60","url":"https://api.github.com/repos/apache/bookkeeper/commits/faf2ed87762fabe4f6cb5f629cf5a7132869ca60","html_url":"https://github.com/apache/bookkeeper/commit/faf2ed87762fabe4f6cb5f629cf5a7132869ca60"}]},{"sha":"0a208e10117f8c5201e0414ce3d644d2367b5abc","node_id":"MDY6Q29tbWl0MTU3NTk1NjowYTIwOGUxMDExN2Y4YzUyMDFlMDQxNGNlM2Q2NDRkMjM2N2I1YWJj","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-06-15T14:53:44Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-06-15T14:53:44Z"},"message":"BOOKKEEPER-626: BOOKIE_EXTRA_OPTS are added twice (vinay via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1493373 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c1c22f93e3e5febc41436a94e4d9d7d9ed83af0b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c1c22f93e3e5febc41436a94e4d9d7d9ed83af0b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0a208e10117f8c5201e0414ce3d644d2367b5abc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0a208e10117f8c5201e0414ce3d644d2367b5abc","html_url":"https://github.com/apache/bookkeeper/commit/0a208e10117f8c5201e0414ce3d644d2367b5abc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0a208e10117f8c5201e0414ce3d644d2367b5abc/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"1c04906c0077d228076c3d157d815e5c7219bb0c","url":"https://api.github.com/repos/apache/bookkeeper/commits/1c04906c0077d228076c3d157d815e5c7219bb0c","html_url":"https://github.com/apache/bookkeeper/commit/1c04906c0077d228076c3d157d815e5c7219bb0c"}]},{"sha":"5ef7f760d8ccf2bc765e77891447ed050926f4a3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1ZWY3Zjc2MGQ4Y2NmMmJjNzY1ZTc3ODkxNDQ3ZWQwNTA5MjZmNGEz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-06-15T15:08:18Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-06-15T15:08:18Z"},"message":"BOOKKEEPER-627: LedgerDirsMonitor is missing thread name (rakesh via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1493377 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f0726198430f5b7e79ec145712ea6b92d5834f7b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f0726198430f5b7e79ec145712ea6b92d5834f7b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5ef7f760d8ccf2bc765e77891447ed050926f4a3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5ef7f760d8ccf2bc765e77891447ed050926f4a3","html_url":"https://github.com/apache/bookkeeper/commit/5ef7f760d8ccf2bc765e77891447ed050926f4a3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5ef7f760d8ccf2bc765e77891447ed050926f4a3/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"0a208e10117f8c5201e0414ce3d644d2367b5abc","url":"https://api.github.com/repos/apache/bookkeeper/commits/0a208e10117f8c5201e0414ce3d644d2367b5abc","html_url":"https://github.com/apache/bookkeeper/commit/0a208e10117f8c5201e0414ce3d644d2367b5abc"}]},{"sha":"fce6d459242361e2363b9b92f8c764b04c7ddfd7","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmY2U2ZDQ1OTI0MjM2MWUyMzYzYjliOTJmOGM3NjRiMDRjN2RkZmQ3","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-06-15T17:05:45Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-06-15T17:05:45Z"},"message":"BOOKKEEPER-618: Better resolution of bookie address (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1493400 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5fcc31ee0fd2641043e244371bbb90feffb6339","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b5fcc31ee0fd2641043e244371bbb90feffb6339"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fce6d459242361e2363b9b92f8c764b04c7ddfd7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fce6d459242361e2363b9b92f8c764b04c7ddfd7","html_url":"https://github.com/apache/bookkeeper/commit/fce6d459242361e2363b9b92f8c764b04c7ddfd7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fce6d459242361e2363b9b92f8c764b04c7ddfd7/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"5ef7f760d8ccf2bc765e77891447ed050926f4a3","url":"https://api.github.com/repos/apache/bookkeeper/commits/5ef7f760d8ccf2bc765e77891447ed050926f4a3","html_url":"https://github.com/apache/bookkeeper/commit/5ef7f760d8ccf2bc765e77891447ed050926f4a3"}]},{"sha":"a3de791cb79873c4f9b99e7ac1b9ade75ea225ac","node_id":"MDY6Q29tbWl0MTU3NTk1NjphM2RlNzkxY2I3OTg3M2M0ZjliOTllN2FjMWI5YWRlNzVlYTIyNWFj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T16:51:00Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T16:51:00Z"},"message":"BOOKKEEPER-619: Bookie should not create local cookie files if zookeeper is uninitialized (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1495508 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cfdf97e58fa188d30c11c6830a8f08fcb3618087","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cfdf97e58fa188d30c11c6830a8f08fcb3618087"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a3de791cb79873c4f9b99e7ac1b9ade75ea225ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a3de791cb79873c4f9b99e7ac1b9ade75ea225ac","html_url":"https://github.com/apache/bookkeeper/commit/a3de791cb79873c4f9b99e7ac1b9ade75ea225ac","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a3de791cb79873c4f9b99e7ac1b9ade75ea225ac/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"fce6d459242361e2363b9b92f8c764b04c7ddfd7","url":"https://api.github.com/repos/apache/bookkeeper/commits/fce6d459242361e2363b9b92f8c764b04c7ddfd7","html_url":"https://github.com/apache/bookkeeper/commit/fce6d459242361e2363b9b92f8c764b04c7ddfd7"}]},{"sha":"01cccee0298f3e0f9d32acc550ed94a7c9fafdfd","node_id":"MDY6Q29tbWl0MTU3NTk1NjowMWNjY2VlMDI5OGYzZTBmOWQzMmFjYzU1MGVkOTRhN2M5ZmFmZGZk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:26:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:26:37Z"},"message":"BOOKKEEPER-313: Bookkeeper shutdown call from Bookie thread is not shutting down server (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1495513 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be3055f2a9cc4969c0e94ec5479d6adf00eec492","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/be3055f2a9cc4969c0e94ec5479d6adf00eec492"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/01cccee0298f3e0f9d32acc550ed94a7c9fafdfd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/01cccee0298f3e0f9d32acc550ed94a7c9fafdfd","html_url":"https://github.com/apache/bookkeeper/commit/01cccee0298f3e0f9d32acc550ed94a7c9fafdfd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/01cccee0298f3e0f9d32acc550ed94a7c9fafdfd/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"a3de791cb79873c4f9b99e7ac1b9ade75ea225ac","url":"https://api.github.com/repos/apache/bookkeeper/commits/a3de791cb79873c4f9b99e7ac1b9ade75ea225ac","html_url":"https://github.com/apache/bookkeeper/commit/a3de791cb79873c4f9b99e7ac1b9ade75ea225ac"}]},{"sha":"119e2034303b45478123a0fa62c1c48925b201c1","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMTllMjAzNDMwM2I0NTQ3ODEyM2EwZmE2MmMxYzQ4OTI1YjIwMWMx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:27:04Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:27:04Z"},"message":"BOOKKEEPER-623: LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry. (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1496705 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"086c6c3ce462566657f9e10a94ead731c50cc569","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/086c6c3ce462566657f9e10a94ead731c50cc569"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/119e2034303b45478123a0fa62c1c48925b201c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/119e2034303b45478123a0fa62c1c48925b201c1","html_url":"https://github.com/apache/bookkeeper/commit/119e2034303b45478123a0fa62c1c48925b201c1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/119e2034303b45478123a0fa62c1c48925b201c1/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"01cccee0298f3e0f9d32acc550ed94a7c9fafdfd","url":"https://api.github.com/repos/apache/bookkeeper/commits/01cccee0298f3e0f9d32acc550ed94a7c9fafdfd","html_url":"https://github.com/apache/bookkeeper/commit/01cccee0298f3e0f9d32acc550ed94a7c9fafdfd"}]},{"sha":"0cd4be8fde5206d956addd29cbad0391ceca1716","node_id":"MDY6Q29tbWl0MTU3NTk1NjowY2Q0YmU4ZmRlNTIwNmQ5NTZhZGRkMjljYmFkMDM5MWNlY2ExNzE2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:35:18Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:35:18Z"},"message":"BOOKKEEPER-633: ConcurrentModificationException in RackawareEnsemblePlacementPolicy when a bookie is removed from available list (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1496706 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c0782473dae9508d9737ce86db8b61d5079614d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4c0782473dae9508d9737ce86db8b61d5079614d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0cd4be8fde5206d956addd29cbad0391ceca1716","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0cd4be8fde5206d956addd29cbad0391ceca1716","html_url":"https://github.com/apache/bookkeeper/commit/0cd4be8fde5206d956addd29cbad0391ceca1716","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0cd4be8fde5206d956addd29cbad0391ceca1716/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"119e2034303b45478123a0fa62c1c48925b201c1","url":"https://api.github.com/repos/apache/bookkeeper/commits/119e2034303b45478123a0fa62c1c48925b201c1","html_url":"https://github.com/apache/bookkeeper/commit/119e2034303b45478123a0fa62c1c48925b201c1"}]},{"sha":"bf3224adf56b74e7d8c2792eec9dcdab9c49e3d3","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZjMyMjRhZGY1NmI3NGU3ZDhjMjc5MmVlYzlkY2RhYjljNDllM2Qz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-28T15:27:08Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-28T15:27:08Z"},"message":"BOOKKEEPER-620: PerChannelBookieClient race during channel disconnect (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1497814 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f2c37c797923056f70b47848546c7ebf18fbd184","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f2c37c797923056f70b47848546c7ebf18fbd184"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bf3224adf56b74e7d8c2792eec9dcdab9c49e3d3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bf3224adf56b74e7d8c2792eec9dcdab9c49e3d3","html_url":"https://github.com/apache/bookkeeper/commit/bf3224adf56b74e7d8c2792eec9dcdab9c49e3d3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bf3224adf56b74e7d8c2792eec9dcdab9c49e3d3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0cd4be8fde5206d956addd29cbad0391ceca1716","url":"https://api.github.com/repos/apache/bookkeeper/commits/0cd4be8fde5206d956addd29cbad0391ceca1716","html_url":"https://github.com/apache/bookkeeper/commit/0cd4be8fde5206d956addd29cbad0391ceca1716"}]},{"sha":"ad11d4144dbf024fcdfd22a2a043c7790f940dc3","node_id":"MDY6Q29tbWl0MTU3NTk1NjphZDExZDQxNDRkYmYwMjRmY2RmZDIyYTJhMDQzYzc3OTBmOTQwZGMz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-02T17:41:39Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-02T17:41:39Z"},"message":"BOOKKEEPER-637: NoSuchEntry exception when reading an entry from a bookie should not print ERROR level message (mmerli via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1499032 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09ff75fd0e69613d56e5fb6b70eb5c63fbf2467e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/09ff75fd0e69613d56e5fb6b70eb5c63fbf2467e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ad11d4144dbf024fcdfd22a2a043c7790f940dc3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ad11d4144dbf024fcdfd22a2a043c7790f940dc3","html_url":"https://github.com/apache/bookkeeper/commit/ad11d4144dbf024fcdfd22a2a043c7790f940dc3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ad11d4144dbf024fcdfd22a2a043c7790f940dc3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf3224adf56b74e7d8c2792eec9dcdab9c49e3d3","url":"https://api.github.com/repos/apache/bookkeeper/commits/bf3224adf56b74e7d8c2792eec9dcdab9c49e3d3","html_url":"https://github.com/apache/bookkeeper/commit/bf3224adf56b74e7d8c2792eec9dcdab9c49e3d3"}]},{"sha":"0d9708c65998f48ba9b692ff5532251a0e1b8bc9","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZDk3MDhjNjU5OThmNDhiYTliNjkyZmY1NTMyMjUxYTBlMWI4YmM5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-03T15:39:01Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-03T15:39:01Z"},"message":"BOOKKEEPER-641: DeathWatcher thread is unnecessarily running even after bookie shutdown (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1499445 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b11dd61231791fe65d0bbd88bd7657ac04407a09","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b11dd61231791fe65d0bbd88bd7657ac04407a09"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0d9708c65998f48ba9b692ff5532251a0e1b8bc9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0d9708c65998f48ba9b692ff5532251a0e1b8bc9","html_url":"https://github.com/apache/bookkeeper/commit/0d9708c65998f48ba9b692ff5532251a0e1b8bc9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0d9708c65998f48ba9b692ff5532251a0e1b8bc9/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ad11d4144dbf024fcdfd22a2a043c7790f940dc3","url":"https://api.github.com/repos/apache/bookkeeper/commits/ad11d4144dbf024fcdfd22a2a043c7790f940dc3","html_url":"https://github.com/apache/bookkeeper/commit/ad11d4144dbf024fcdfd22a2a043c7790f940dc3"}]},{"sha":"ed3bb58f5cc5cd4176573cb696bb7277c628b26a","node_id":"MDY6Q29tbWl0MTU3NTk1NjplZDNiYjU4ZjVjYzVjZDQxNzY1NzNjYjY5NmJiNzI3N2M2MjhiMjZh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-04T12:01:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-04T12:01:37Z"},"message":"BOOKKEEPER-636: Latest txn logs might be deleted in a race condition which is not recoverable if BK goes down before next txn log created. (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1499731 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e79ff2eb54f0e4bee6f86cdf3f7d904b871c2ad9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e79ff2eb54f0e4bee6f86cdf3f7d904b871c2ad9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ed3bb58f5cc5cd4176573cb696bb7277c628b26a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ed3bb58f5cc5cd4176573cb696bb7277c628b26a","html_url":"https://github.com/apache/bookkeeper/commit/ed3bb58f5cc5cd4176573cb696bb7277c628b26a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0d9708c65998f48ba9b692ff5532251a0e1b8bc9","url":"https://api.github.com/repos/apache/bookkeeper/commits/0d9708c65998f48ba9b692ff5532251a0e1b8bc9","html_url":"https://github.com/apache/bookkeeper/commit/0d9708c65998f48ba9b692ff5532251a0e1b8bc9"}]},{"sha":"0ce12e55edb179fc55bc9c5749a589a52bb36b3a","node_id":"MDY6Q29tbWl0MTU3NTk1NjowY2UxMmU1NWVkYjE3OWZjNTViYzljNTc0OWE1ODlhNTJiYjM2YjNh","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-13T15:23:25Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-13T15:23:25Z"},"message":"BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1502803 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"356561c904ba64a767d779398fa9e20ce4f41fff","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/356561c904ba64a767d779398fa9e20ce4f41fff"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0ce12e55edb179fc55bc9c5749a589a52bb36b3a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0ce12e55edb179fc55bc9c5749a589a52bb36b3a","html_url":"https://github.com/apache/bookkeeper/commit/0ce12e55edb179fc55bc9c5749a589a52bb36b3a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0ce12e55edb179fc55bc9c5749a589a52bb36b3a/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"ed3bb58f5cc5cd4176573cb696bb7277c628b26a","url":"https://api.github.com/repos/apache/bookkeeper/commits/ed3bb58f5cc5cd4176573cb696bb7277c628b26a","html_url":"https://github.com/apache/bookkeeper/commit/ed3bb58f5cc5cd4176573cb696bb7277c628b26a"}]},{"sha":"53c208b09483c90207aecf0e27e669ee810619c2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1M2MyMDhiMDk0ODNjOTAyMDdhZWNmMGUyN2U2NjllZTgxMDYxOWMy","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-14T22:55:35Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-14T22:55:35Z"},"message":"BOOKKEEPER-600: shouldClaim flag isn't cleared for hedwig multiplex java client (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1503075 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"203dfd257a6f5c953f398e0a1dba1c673e9fe55a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/203dfd257a6f5c953f398e0a1dba1c673e9fe55a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/53c208b09483c90207aecf0e27e669ee810619c2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/53c208b09483c90207aecf0e27e669ee810619c2","html_url":"https://github.com/apache/bookkeeper/commit/53c208b09483c90207aecf0e27e669ee810619c2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/53c208b09483c90207aecf0e27e669ee810619c2/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ce12e55edb179fc55bc9c5749a589a52bb36b3a","url":"https://api.github.com/repos/apache/bookkeeper/commits/0ce12e55edb179fc55bc9c5749a589a52bb36b3a","html_url":"https://github.com/apache/bookkeeper/commit/0ce12e55edb179fc55bc9c5749a589a52bb36b3a"}]},{"sha":"4d66c36cf8825ab3f9f4a389bddfb924a0df9107","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZDY2YzM2Y2Y4ODI1YWIzZjlmNGEzODliZGRmYjkyNGEwZGY5MTA3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T17:59:39Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T17:59:39Z"},"message":"BOOKKEEPER-563: Avoid Journal polluting page cache (Robin Dhamankar via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1505174 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"25e8185a75491308ea636679f60b88448f1c2987","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/25e8185a75491308ea636679f60b88448f1c2987"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4d66c36cf8825ab3f9f4a389bddfb924a0df9107","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4d66c36cf8825ab3f9f4a389bddfb924a0df9107","html_url":"https://github.com/apache/bookkeeper/commit/4d66c36cf8825ab3f9f4a389bddfb924a0df9107","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"53c208b09483c90207aecf0e27e669ee810619c2","url":"https://api.github.com/repos/apache/bookkeeper/commits/53c208b09483c90207aecf0e27e669ee810619c2","html_url":"https://github.com/apache/bookkeeper/commit/53c208b09483c90207aecf0e27e669ee810619c2"}]},{"sha":"f3731732ce984f41b8530939254706f9e597583d","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMzczMTczMmNlOTg0ZjQxYjg1MzA5MzkyNTQ3MDZmOWU1OTc1ODNk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:06:30Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:06:30Z"},"message":"BOOKKEEPER-610: Make SyncThread use an executor (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1505175 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5380345e4065d4650eb4856a47f355f82a9554b1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5380345e4065d4650eb4856a47f355f82a9554b1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f3731732ce984f41b8530939254706f9e597583d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f3731732ce984f41b8530939254706f9e597583d","html_url":"https://github.com/apache/bookkeeper/commit/f3731732ce984f41b8530939254706f9e597583d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f3731732ce984f41b8530939254706f9e597583d/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4d66c36cf8825ab3f9f4a389bddfb924a0df9107","url":"https://api.github.com/repos/apache/bookkeeper/commits/4d66c36cf8825ab3f9f4a389bddfb924a0df9107","html_url":"https://github.com/apache/bookkeeper/commit/4d66c36cf8825ab3f9f4a389bddfb924a0df9107"}]},{"sha":"d9682edfc57911ccb9d70ae41c6627112a96a355","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkOTY4MmVkZmM1NzkxMWNjYjlkNzBhZTQxYzY2MjcxMTJhOTZhMzU1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:16:37Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:16:37Z"},"message":"BOOKKEEPER-635: jenkins build should highlight which lines of the patch cause raw analysis errors (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1505179 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"76928dea111afd057810db4906ef95b268e33f31","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/76928dea111afd057810db4906ef95b268e33f31"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d9682edfc57911ccb9d70ae41c6627112a96a355","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d9682edfc57911ccb9d70ae41c6627112a96a355","html_url":"https://github.com/apache/bookkeeper/commit/d9682edfc57911ccb9d70ae41c6627112a96a355","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d9682edfc57911ccb9d70ae41c6627112a96a355/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"f3731732ce984f41b8530939254706f9e597583d","url":"https://api.github.com/repos/apache/bookkeeper/commits/f3731732ce984f41b8530939254706f9e597583d","html_url":"https://github.com/apache/bookkeeper/commit/f3731732ce984f41b8530939254706f9e597583d"}]},{"sha":"4a2c740129d506f620dcfbdb5e1e852258a726d2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YTJjNzQwMTI5ZDUwNmY2MjBkY2ZiZGI1ZTFlODUyMjU4YTcyNmQy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:24:54Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:24:54Z"},"message":"BOOKKEEPER-646: BookieShell readjournal command is throwing BufferUnderflowException (Rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1505181 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c63e4f90bd08e04752fc9c6b633b56636325888","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8c63e4f90bd08e04752fc9c6b633b56636325888"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4a2c740129d506f620dcfbdb5e1e852258a726d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4a2c740129d506f620dcfbdb5e1e852258a726d2","html_url":"https://github.com/apache/bookkeeper/commit/4a2c740129d506f620dcfbdb5e1e852258a726d2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4a2c740129d506f620dcfbdb5e1e852258a726d2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d9682edfc57911ccb9d70ae41c6627112a96a355","url":"https://api.github.com/repos/apache/bookkeeper/commits/d9682edfc57911ccb9d70ae41c6627112a96a355","html_url":"https://github.com/apache/bookkeeper/commit/d9682edfc57911ccb9d70ae41c6627112a96a355"}]},{"sha":"61e619c2b2215fca05df3498256e3f0966a668ff","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2MWU2MTljMmIyMjE1ZmNhMDVkZjM0OTgyNTZlM2YwOTY2YTY2OGZm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:30:04Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:30:04Z"},"message":"BOOKKEEPER-652: Logger class name is wrong in LedgerCacheImpl.java (Rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1505185 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0683da9f672c940a018fe430d5b25f5eaff53dd0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0683da9f672c940a018fe430d5b25f5eaff53dd0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/61e619c2b2215fca05df3498256e3f0966a668ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/61e619c2b2215fca05df3498256e3f0966a668ff","html_url":"https://github.com/apache/bookkeeper/commit/61e619c2b2215fca05df3498256e3f0966a668ff","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/61e619c2b2215fca05df3498256e3f0966a668ff/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4a2c740129d506f620dcfbdb5e1e852258a726d2","url":"https://api.github.com/repos/apache/bookkeeper/commits/4a2c740129d506f620dcfbdb5e1e852258a726d2","html_url":"https://github.com/apache/bookkeeper/commit/4a2c740129d506f620dcfbdb5e1e852258a726d2"}]},{"sha":"a889f63d1041a84d6b894874b31681ed35312781","node_id":"MDY6Q29tbWl0MTU3NTk1NjphODg5ZjYzZDEwNDFhODRkNmI4OTQ4NzRiMzE2ODFlZDM1MzEyNzgx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-22T16:03:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-22T16:03:38Z"},"message":"BOOKKEEPER-607: Filtered Messages Require ACK from Client Causes User Being Throttled Incorrectly Forever (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1505726 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"15e9b2f72abe87489654354a7b3ee64e16112735","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/15e9b2f72abe87489654354a7b3ee64e16112735"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a889f63d1041a84d6b894874b31681ed35312781","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a889f63d1041a84d6b894874b31681ed35312781","html_url":"https://github.com/apache/bookkeeper/commit/a889f63d1041a84d6b894874b31681ed35312781","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a889f63d1041a84d6b894874b31681ed35312781/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"61e619c2b2215fca05df3498256e3f0966a668ff","url":"https://api.github.com/repos/apache/bookkeeper/commits/61e619c2b2215fca05df3498256e3f0966a668ff","html_url":"https://github.com/apache/bookkeeper/commit/61e619c2b2215fca05df3498256e3f0966a668ff"}]},{"sha":"67ffec189fc77e53a8dcbe666b1695a3b790e8da","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2N2ZmZWMxODlmYzc3ZTUzYThkY2JlNjY2YjE2OTVhM2I3OTBlOGRh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-24T14:14:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-24T14:14:38Z"},"message":"BOOKKEEPER-653: Timeout option is missing in few testcases (Rakesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1506569 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa1bfc59e2834112ab372f6baa359c077078233b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/aa1bfc59e2834112ab372f6baa359c077078233b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/67ffec189fc77e53a8dcbe666b1695a3b790e8da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/67ffec189fc77e53a8dcbe666b1695a3b790e8da","html_url":"https://github.com/apache/bookkeeper/commit/67ffec189fc77e53a8dcbe666b1695a3b790e8da","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/67ffec189fc77e53a8dcbe666b1695a3b790e8da/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"a889f63d1041a84d6b894874b31681ed35312781","url":"https://api.github.com/repos/apache/bookkeeper/commits/a889f63d1041a84d6b894874b31681ed35312781","html_url":"https://github.com/apache/bookkeeper/commit/a889f63d1041a84d6b894874b31681ed35312781"}]},{"sha":"d3328c5a78137de5416f3d8bc1f269f2ac648e6b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMzMyOGM1YTc4MTM3ZGU1NDE2ZjNkOGJjMWYyNjlmMmFjNjQ4ZTZi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-24T14:55:31Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-24T14:55:31Z"},"message":"BOOKKEEPER-642: Bookie returns incorrect exitcode, ExitCode.ZK_REG_FAIL is getting overridden (Rakesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1506582 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a805d6376b6995a806c22dfa7ee862e0d6a8c8b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7a805d6376b6995a806c22dfa7ee862e0d6a8c8b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d3328c5a78137de5416f3d8bc1f269f2ac648e6b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d3328c5a78137de5416f3d8bc1f269f2ac648e6b","html_url":"https://github.com/apache/bookkeeper/commit/d3328c5a78137de5416f3d8bc1f269f2ac648e6b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d3328c5a78137de5416f3d8bc1f269f2ac648e6b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"67ffec189fc77e53a8dcbe666b1695a3b790e8da","url":"https://api.github.com/repos/apache/bookkeeper/commits/67ffec189fc77e53a8dcbe666b1695a3b790e8da","html_url":"https://github.com/apache/bookkeeper/commit/67ffec189fc77e53a8dcbe666b1695a3b790e8da"}]},{"sha":"22509a7a2c8acbd5cce182529169fc0057e55b0d","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyMjUwOWE3YTJjOGFjYmQ1Y2NlMTgyNTI5MTY5ZmMwMDU3ZTU1YjBk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-29T10:30:32Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-29T10:30:32Z"},"message":"BOOKKEEPER-663: HierarchicalLedgerManager iterator is missing some ranges and the last ledger in the range (mmerli via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1507997 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"821c7d41d5b45bdb665e8cc08665776be4179e03","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/821c7d41d5b45bdb665e8cc08665776be4179e03"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/22509a7a2c8acbd5cce182529169fc0057e55b0d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/22509a7a2c8acbd5cce182529169fc0057e55b0d","html_url":"https://github.com/apache/bookkeeper/commit/22509a7a2c8acbd5cce182529169fc0057e55b0d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/22509a7a2c8acbd5cce182529169fc0057e55b0d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d3328c5a78137de5416f3d8bc1f269f2ac648e6b","url":"https://api.github.com/repos/apache/bookkeeper/commits/d3328c5a78137de5416f3d8bc1f269f2ac648e6b","html_url":"https://github.com/apache/bookkeeper/commit/d3328c5a78137de5416f3d8bc1f269f2ac648e6b"}]},{"sha":"d1ad860f8e83530e0d8f1498a35da2e9fbb85962","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMWFkODYwZjhlODM1MzBlMGQ4ZjE0OThhMzVkYTJlOWZiYjg1OTYy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-12T17:01:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-12T17:01:05Z"},"message":"BOOKKEEPER-604: Ledger storage can log an exception if GC happens concurrently. (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1513198 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c983a2b4a504685ce434be4e348f65c5b5a6f2b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7c983a2b4a504685ce434be4e348f65c5b5a6f2b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d1ad860f8e83530e0d8f1498a35da2e9fbb85962","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d1ad860f8e83530e0d8f1498a35da2e9fbb85962","html_url":"https://github.com/apache/bookkeeper/commit/d1ad860f8e83530e0d8f1498a35da2e9fbb85962","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d1ad860f8e83530e0d8f1498a35da2e9fbb85962/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"22509a7a2c8acbd5cce182529169fc0057e55b0d","url":"https://api.github.com/repos/apache/bookkeeper/commits/22509a7a2c8acbd5cce182529169fc0057e55b0d","html_url":"https://github.com/apache/bookkeeper/commit/22509a7a2c8acbd5cce182529169fc0057e55b0d"}]},{"sha":"94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NGQ2NWQ4ZDJlMzIzOWFkMDY5NGQzYzIyNTJmY2EwZTNkYmVhOGIz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-13T12:32:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-13T12:32:37Z"},"message":"BOOKKEEPER-667: Client write will fail with BadMetadataVersion in case of multiple Bookie failures with AutoRecovery enabled (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1513459 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa865c5567f6c52d7ef685c7ff2ebcc705bf56cf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fa865c5567f6c52d7ef685c7ff2ebcc705bf56cf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","html_url":"https://github.com/apache/bookkeeper/commit/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d1ad860f8e83530e0d8f1498a35da2e9fbb85962","url":"https://api.github.com/repos/apache/bookkeeper/commits/d1ad860f8e83530e0d8f1498a35da2e9fbb85962","html_url":"https://github.com/apache/bookkeeper/commit/d1ad860f8e83530e0d8f1498a35da2e9fbb85962"}]},{"sha":"2179f1bf6d656d7c5f7e89f2eeaaa0732f0b9608","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyMTc5ZjFiZjZkNjU2ZDdjNWY3ZTg5ZjJlZWFhYTA3MzJmMGI5NjA4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T10:51:50Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T10:51:50Z"},"message":"BOOKKEEPER-668: Race between PerChannelBookieClient#channelDisconnected() and disconnect() calls can make clients hang while add/reading entries in case of multiple bookie failures (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1515769 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d3c9546d399234aaaa92abd6bab59f8c20efc64","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3d3c9546d399234aaaa92abd6bab59f8c20efc64"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2179f1bf6d656d7c5f7e89f2eeaaa0732f0b9608","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2179f1bf6d656d7c5f7e89f2eeaaa0732f0b9608","html_url":"https://github.com/apache/bookkeeper/commit/2179f1bf6d656d7c5f7e89f2eeaaa0732f0b9608","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2179f1bf6d656d7c5f7e89f2eeaaa0732f0b9608/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","url":"https://api.github.com/repos/apache/bookkeeper/commits/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","html_url":"https://github.com/apache/bookkeeper/commit/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3"}]},{"sha":"f41bb6f8b521e26a0a746530e648a9ca2120af51","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNDFiYjZmOGI1MjFlMjZhMGE3NDY1MzBlNjQ4YTljYTIxMjBhZjUx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T11:02:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T11:02:59Z"},"message":"BOOKKEEPER-624: Reduce logs generated by ReplicationWorker (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1515774 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9b357a921d6cfbaeac490259af80fde9edce0000","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9b357a921d6cfbaeac490259af80fde9edce0000"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f41bb6f8b521e26a0a746530e648a9ca2120af51","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f41bb6f8b521e26a0a746530e648a9ca2120af51","html_url":"https://github.com/apache/bookkeeper/commit/f41bb6f8b521e26a0a746530e648a9ca2120af51","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f41bb6f8b521e26a0a746530e648a9ca2120af51/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2179f1bf6d656d7c5f7e89f2eeaaa0732f0b9608","url":"https://api.github.com/repos/apache/bookkeeper/commits/2179f1bf6d656d7c5f7e89f2eeaaa0732f0b9608","html_url":"https://github.com/apache/bookkeeper/commit/2179f1bf6d656d7c5f7e89f2eeaaa0732f0b9608"}]},{"sha":"c4fd34f0f13a044c0261732ff2dd454acc4b73de","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjNGZkMzRmMGYxM2EwNDRjMDI2MTczMmZmMmRkNDU0YWNjNGI3M2Rl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-21T11:19:21Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-21T11:19:21Z"},"message":"BOOKKEEPER-632: AutoRecovery should consider read only bookies (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1516139 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"560d294720e17e27908b65b6c4fb3b43274e881e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/560d294720e17e27908b65b6c4fb3b43274e881e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c4fd34f0f13a044c0261732ff2dd454acc4b73de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c4fd34f0f13a044c0261732ff2dd454acc4b73de","html_url":"https://github.com/apache/bookkeeper/commit/c4fd34f0f13a044c0261732ff2dd454acc4b73de","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c4fd34f0f13a044c0261732ff2dd454acc4b73de/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f41bb6f8b521e26a0a746530e648a9ca2120af51","url":"https://api.github.com/repos/apache/bookkeeper/commits/f41bb6f8b521e26a0a746530e648a9ca2120af51","html_url":"https://github.com/apache/bookkeeper/commit/f41bb6f8b521e26a0a746530e648a9ca2120af51"}]},{"sha":"d8e6972385e6662ddcf398fc2de47622a9bef22d","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkOGU2OTcyMzg1ZTY2NjJkZGNmMzk4ZmMyZGU0NzYyMmE5YmVmMjJk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-22T14:40:10Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-22T14:40:10Z"},"message":"BOOKKEEPER-649: Race condition in sync ZKUtils.createFullPathOptimistic() (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1516465 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10d6358499dbbd11b7a55f7fdc8187b14628138c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/10d6358499dbbd11b7a55f7fdc8187b14628138c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d8e6972385e6662ddcf398fc2de47622a9bef22d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d8e6972385e6662ddcf398fc2de47622a9bef22d","html_url":"https://github.com/apache/bookkeeper/commit/d8e6972385e6662ddcf398fc2de47622a9bef22d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d8e6972385e6662ddcf398fc2de47622a9bef22d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c4fd34f0f13a044c0261732ff2dd454acc4b73de","url":"https://api.github.com/repos/apache/bookkeeper/commits/c4fd34f0f13a044c0261732ff2dd454acc4b73de","html_url":"https://github.com/apache/bookkeeper/commit/c4fd34f0f13a044c0261732ff2dd454acc4b73de"}]},{"sha":"98d6dcec7403c523cfd07cf48ed878e1ab13eae0","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5OGQ2ZGNlYzc0MDNjNTIzY2ZkMDdjZjQ4ZWQ4NzhlMWFiMTNlYWUw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-23T16:48:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-23T16:48:37Z"},"message":"BOOKKEEPER-580: improve close logic (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1516929 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"366186621270df810631d6dae621afd211646e9e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/366186621270df810631d6dae621afd211646e9e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/98d6dcec7403c523cfd07cf48ed878e1ab13eae0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/98d6dcec7403c523cfd07cf48ed878e1ab13eae0","html_url":"https://github.com/apache/bookkeeper/commit/98d6dcec7403c523cfd07cf48ed878e1ab13eae0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/98d6dcec7403c523cfd07cf48ed878e1ab13eae0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d8e6972385e6662ddcf398fc2de47622a9bef22d","url":"https://api.github.com/repos/apache/bookkeeper/commits/d8e6972385e6662ddcf398fc2de47622a9bef22d","html_url":"https://github.com/apache/bookkeeper/commit/d8e6972385e6662ddcf398fc2de47622a9bef22d"}]},{"sha":"aadaae443e1bc70505150a3218a54ff66ebfb921","node_id":"MDY6Q29tbWl0MTU3NTk1NjphYWRhYWU0NDNlMWJjNzA1MDUxNTBhMzIxOGE1NGZmNjZlYmZiOTIx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T13:14:40Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T13:14:40Z"},"message":"BOOKKEEPER-446: BookKeeper.createLedger(..) should not mask the error with ZKException (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1521474 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"767838f3a63010b61a246903d44ab2a5c7b95cdd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/767838f3a63010b61a246903d44ab2a5c7b95cdd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/aadaae443e1bc70505150a3218a54ff66ebfb921","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/aadaae443e1bc70505150a3218a54ff66ebfb921","html_url":"https://github.com/apache/bookkeeper/commit/aadaae443e1bc70505150a3218a54ff66ebfb921","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/aadaae443e1bc70505150a3218a54ff66ebfb921/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"98d6dcec7403c523cfd07cf48ed878e1ab13eae0","url":"https://api.github.com/repos/apache/bookkeeper/commits/98d6dcec7403c523cfd07cf48ed878e1ab13eae0","html_url":"https://github.com/apache/bookkeeper/commit/98d6dcec7403c523cfd07cf48ed878e1ab13eae0"}]},{"sha":"bc0eb8b14278999a5c6550fbca6531b862beb12b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYzBlYjhiMTQyNzg5OTlhNWM2NTUwZmJjYTY1MzFiODYyYmViMTJi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T22:34:06Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T22:34:06Z"},"message":"BOOKKEEPER-675: Log noise fixup before cutting 4.2.2 (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1521667 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"68d3938f83ff50a377bdf2e7bde951b27a2f5802","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/68d3938f83ff50a377bdf2e7bde951b27a2f5802"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bc0eb8b14278999a5c6550fbca6531b862beb12b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bc0eb8b14278999a5c6550fbca6531b862beb12b","html_url":"https://github.com/apache/bookkeeper/commit/bc0eb8b14278999a5c6550fbca6531b862beb12b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bc0eb8b14278999a5c6550fbca6531b862beb12b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"aadaae443e1bc70505150a3218a54ff66ebfb921","url":"https://api.github.com/repos/apache/bookkeeper/commits/aadaae443e1bc70505150a3218a54ff66ebfb921","html_url":"https://github.com/apache/bookkeeper/commit/aadaae443e1bc70505150a3218a54ff66ebfb921"}]},{"sha":"441891b2d76b3b0244d00480e0ab70f2d2121d57","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NDE4OTFiMmQ3NmIzYjAyNDRkMDA0ODBlMGFiNzBmMmQyMTIxZDU3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-27T09:37:07Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-27T09:37:07Z"},"message":"BOOKKEEPER-683: TestSubAfterCloseSub fails on 4.2 (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1526841 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d9d149d6afbdbb6bba348d8d46325628c9fffa75","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d9d149d6afbdbb6bba348d8d46325628c9fffa75"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/441891b2d76b3b0244d00480e0ab70f2d2121d57","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/441891b2d76b3b0244d00480e0ab70f2d2121d57","html_url":"https://github.com/apache/bookkeeper/commit/441891b2d76b3b0244d00480e0ab70f2d2121d57","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/441891b2d76b3b0244d00480e0ab70f2d2121d57/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"bc0eb8b14278999a5c6550fbca6531b862beb12b","url":"https://api.github.com/repos/apache/bookkeeper/commits/bc0eb8b14278999a5c6550fbca6531b862beb12b","html_url":"https://github.com/apache/bookkeeper/commit/bc0eb8b14278999a5c6550fbca6531b862beb12b"}]},{"sha":"dea488afbf4615e4416079f5517a6e3ae1000c17","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkZWE0ODhhZmJmNDYxNWU0NDE2MDc5ZjU1MTdhNmUzYWUxMDAwYzE3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T04:23:33Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T04:23:33Z"},"message":"BOOKKEEPER-640: Log improvement - add shutdown/exit log message for the bookie services (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1528304 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a61fed8538543c9b037e680042d3e10a705ccdce","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a61fed8538543c9b037e680042d3e10a705ccdce"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/dea488afbf4615e4416079f5517a6e3ae1000c17","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/dea488afbf4615e4416079f5517a6e3ae1000c17","html_url":"https://github.com/apache/bookkeeper/commit/dea488afbf4615e4416079f5517a6e3ae1000c17","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/dea488afbf4615e4416079f5517a6e3ae1000c17/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"441891b2d76b3b0244d00480e0ab70f2d2121d57","url":"https://api.github.com/repos/apache/bookkeeper/commits/441891b2d76b3b0244d00480e0ab70f2d2121d57","html_url":"https://github.com/apache/bookkeeper/commit/441891b2d76b3b0244d00480e0ab70f2d2121d57"}]},{"sha":"e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMjAxM2UzZjJiMmUzZTEwY2U1ZDE5NzdhZGFjOGUwNzNmZDA0MDRk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T04:40:39Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T04:40:39Z"},"message":"BOOKKEEPER-666: Naming threads of ExecutorService (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1528305 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f2029bf086d12f39d05f54262b427a189c7dd9c6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f2029bf086d12f39d05f54262b427a189c7dd9c6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","html_url":"https://github.com/apache/bookkeeper/commit/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"dea488afbf4615e4416079f5517a6e3ae1000c17","url":"https://api.github.com/repos/apache/bookkeeper/commits/dea488afbf4615e4416079f5517a6e3ae1000c17","html_url":"https://github.com/apache/bookkeeper/commit/dea488afbf4615e4416079f5517a6e3ae1000c17"}]},{"sha":"3d9bb20a7f7e510bce7c16be392c0ac82c3a3496","node_id":"MDY6Q29tbWl0MTU3NTk1NjozZDliYjIwYTdmN2U1MTBiY2U3YzE2YmUzOTJjMGFjODJjM2EzNDk2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T04:54:35Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T04:54:35Z"},"message":"BOOKKEEPER-645: Bookkeeper shell command to get a list of readonly bookies (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1528306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a1cf823f5e7eac140e13e12e07c01312080cc58c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a1cf823f5e7eac140e13e12e07c01312080cc58c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3d9bb20a7f7e510bce7c16be392c0ac82c3a3496","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3d9bb20a7f7e510bce7c16be392c0ac82c3a3496","html_url":"https://github.com/apache/bookkeeper/commit/3d9bb20a7f7e510bce7c16be392c0ac82c3a3496","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3d9bb20a7f7e510bce7c16be392c0ac82c3a3496/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","url":"https://api.github.com/repos/apache/bookkeeper/commits/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","html_url":"https://github.com/apache/bookkeeper/commit/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d"}]},{"sha":"8dafa943a1d5a1cf562d94cc6d2f656e0c0be17e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4ZGFmYTk0M2ExZDVhMWNmNTYyZDk0Y2M2ZDJmNjU2ZTBjMGJlMTdl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T05:01:52Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T05:01:52Z"},"message":"BOOKKEEPER-686: Bookie startup will fail if one of the configured ledgerDir is full and the same is used for replaying the journal (Rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1528307 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdd19148d01e2d526b102178891f2dbde9b6b095","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bdd19148d01e2d526b102178891f2dbde9b6b095"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8dafa943a1d5a1cf562d94cc6d2f656e0c0be17e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8dafa943a1d5a1cf562d94cc6d2f656e0c0be17e","html_url":"https://github.com/apache/bookkeeper/commit/8dafa943a1d5a1cf562d94cc6d2f656e0c0be17e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8dafa943a1d5a1cf562d94cc6d2f656e0c0be17e/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d9bb20a7f7e510bce7c16be392c0ac82c3a3496","url":"https://api.github.com/repos/apache/bookkeeper/commits/3d9bb20a7f7e510bce7c16be392c0ac82c3a3496","html_url":"https://github.com/apache/bookkeeper/commit/3d9bb20a7f7e510bce7c16be392c0ac82c3a3496"}]},{"sha":"0f853a49d7e6899151f63ae9b1912ed936e5a5fb","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZjg1M2E0OWQ3ZTY4OTkxNTFmNjNhZTliMTkxMmVkOTM2ZTVhNWZi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-11T06:36:27Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-11T06:36:27Z"},"message":"BOOKKEEPER-658: ledger cache refactor (Robin Dhamankar via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531203 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c6e629b9b46c5b466892dfcac1d802b5477fc3a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8c6e629b9b46c5b466892dfcac1d802b5477fc3a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0f853a49d7e6899151f63ae9b1912ed936e5a5fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0f853a49d7e6899151f63ae9b1912ed936e5a5fb","html_url":"https://github.com/apache/bookkeeper/commit/0f853a49d7e6899151f63ae9b1912ed936e5a5fb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0f853a49d7e6899151f63ae9b1912ed936e5a5fb/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8dafa943a1d5a1cf562d94cc6d2f656e0c0be17e","url":"https://api.github.com/repos/apache/bookkeeper/commits/8dafa943a1d5a1cf562d94cc6d2f656e0c0be17e","html_url":"https://github.com/apache/bookkeeper/commit/8dafa943a1d5a1cf562d94cc6d2f656e0c0be17e"}]},{"sha":"d9f4e60c850291d17e12ed44776b88cf02335701","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkOWY0ZTYwYzg1MDI5MWQxN2UxMmVkNDQ3NzZiODhjZjAyMzM1NzAx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-11T14:18:40Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-11T14:18:40Z"},"message":"BOOKKEEPER-638: Two bookies could start at the same time to access bookie data. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531302 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52d711b92305da2107157e4b1f02081c0cc8190f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/52d711b92305da2107157e4b1f02081c0cc8190f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d9f4e60c850291d17e12ed44776b88cf02335701","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d9f4e60c850291d17e12ed44776b88cf02335701","html_url":"https://github.com/apache/bookkeeper/commit/d9f4e60c850291d17e12ed44776b88cf02335701","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d9f4e60c850291d17e12ed44776b88cf02335701/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f853a49d7e6899151f63ae9b1912ed936e5a5fb","url":"https://api.github.com/repos/apache/bookkeeper/commits/0f853a49d7e6899151f63ae9b1912ed936e5a5fb","html_url":"https://github.com/apache/bookkeeper/commit/0f853a49d7e6899151f63ae9b1912ed936e5a5fb"}]},{"sha":"bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZWRmZWJmOTNmOGM5ZjkzZmFjMTliZDU4MDA1ZGNlNmUwZmZiZDE3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-12T03:42:21Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-12T03:42:21Z"},"message":"BOOKKEEPER-657: Journal Improvement (Robin Dhamankar via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531494 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e8f913c6b740b2e679ef53d140fcc34081a0d3b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2e8f913c6b740b2e679ef53d140fcc34081a0d3b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","html_url":"https://github.com/apache/bookkeeper/commit/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d9f4e60c850291d17e12ed44776b88cf02335701","url":"https://api.github.com/repos/apache/bookkeeper/commits/d9f4e60c850291d17e12ed44776b88cf02335701","html_url":"https://github.com/apache/bookkeeper/commit/d9f4e60c850291d17e12ed44776b88cf02335701"}]},{"sha":"dc1f36e982f3fc2955141c8e0de5e04c6ac06053","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkYzFmMzZlOTgyZjNmYzI5NTUxNDFjOGUwZGU1ZTA0YzZhYzA2MDUz","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-12T03:43:30Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-12T03:43:30Z"},"message":"BOOKKEEPER-657: Journal Improvement (Robin Dhamankar via sijie) (add missing file)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531495 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ee1a1a6cea863f811382c0086ac9c6578483d30","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7ee1a1a6cea863f811382c0086ac9c6578483d30"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/dc1f36e982f3fc2955141c8e0de5e04c6ac06053","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/dc1f36e982f3fc2955141c8e0de5e04c6ac06053","html_url":"https://github.com/apache/bookkeeper/commit/dc1f36e982f3fc2955141c8e0de5e04c6ac06053","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/dc1f36e982f3fc2955141c8e0de5e04c6ac06053/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","url":"https://api.github.com/repos/apache/bookkeeper/commits/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","html_url":"https://github.com/apache/bookkeeper/commit/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17"}]},{"sha":"16978d671b8d6d9e563edb3a6119a4be574245af","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxNjk3OGQ2NzFiOGQ2ZDllNTYzZWRiM2E2MTE5YTRiZTU3NDI0NWFm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T14:43:24Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T14:43:24Z"},"message":"BOOKKEEPER-605: Use static Logger objects everywhere for bookkeeper (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531920 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d1d906c398d6f70adb141ed4941583146a7bfbd2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d1d906c398d6f70adb141ed4941583146a7bfbd2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/16978d671b8d6d9e563edb3a6119a4be574245af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/16978d671b8d6d9e563edb3a6119a4be574245af","html_url":"https://github.com/apache/bookkeeper/commit/16978d671b8d6d9e563edb3a6119a4be574245af","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/16978d671b8d6d9e563edb3a6119a4be574245af/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"dc1f36e982f3fc2955141c8e0de5e04c6ac06053","url":"https://api.github.com/repos/apache/bookkeeper/commits/dc1f36e982f3fc2955141c8e0de5e04c6ac06053","html_url":"https://github.com/apache/bookkeeper/commit/dc1f36e982f3fc2955141c8e0de5e04c6ac06053"}]},{"sha":"a3575c3ebcb323a53d7a193488453aa44557c97a","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMzU3NWMzZWJjYjMyM2E1M2Q3YTE5MzQ4ODQ1M2FhNDQ1NTdjOTdh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T15:38:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T15:38:44Z"},"message":"BOOKKEEPER-676: Make add asynchrounous in ledger recovery (aniruddha via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531944 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31159222716de7454c6d40d162f071d7538ca956","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/31159222716de7454c6d40d162f071d7538ca956"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a3575c3ebcb323a53d7a193488453aa44557c97a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a3575c3ebcb323a53d7a193488453aa44557c97a","html_url":"https://github.com/apache/bookkeeper/commit/a3575c3ebcb323a53d7a193488453aa44557c97a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a3575c3ebcb323a53d7a193488453aa44557c97a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"16978d671b8d6d9e563edb3a6119a4be574245af","url":"https://api.github.com/repos/apache/bookkeeper/commits/16978d671b8d6d9e563edb3a6119a4be574245af","html_url":"https://github.com/apache/bookkeeper/commit/16978d671b8d6d9e563edb3a6119a4be574245af"}]},{"sha":"33ea58027b0a3ba160f7ac19d20568709f453f4d","node_id":"MDY6Q29tbWl0MTU3NTk1NjozM2VhNTgwMjdiMGEzYmExNjBmN2FjMTlkMjA1Njg3MDlmNDUzZjRk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T16:32:27Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T16:32:27Z"},"message":"BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531970 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"43f82fad414259c4ccb0ccb90a4696475c8b6f23","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/43f82fad414259c4ccb0ccb90a4696475c8b6f23"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/33ea58027b0a3ba160f7ac19d20568709f453f4d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/33ea58027b0a3ba160f7ac19d20568709f453f4d","html_url":"https://github.com/apache/bookkeeper/commit/33ea58027b0a3ba160f7ac19d20568709f453f4d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/33ea58027b0a3ba160f7ac19d20568709f453f4d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"a3575c3ebcb323a53d7a193488453aa44557c97a","url":"https://api.github.com/repos/apache/bookkeeper/commits/a3575c3ebcb323a53d7a193488453aa44557c97a","html_url":"https://github.com/apache/bookkeeper/commit/a3575c3ebcb323a53d7a193488453aa44557c97a"}]},{"sha":"24dc8ac30c97620cf4dbef48deff2bb957932eb8","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNGRjOGFjMzBjOTc2MjBjZjRkYmVmNDhkZWZmMmJiOTU3OTMyZWI4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-22T05:35:46Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-22T05:35:46Z"},"message":"BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1534498 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6108a2b0546199dbdae765c9d6f03ef47a294ddc","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6108a2b0546199dbdae765c9d6f03ef47a294ddc"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/24dc8ac30c97620cf4dbef48deff2bb957932eb8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/24dc8ac30c97620cf4dbef48deff2bb957932eb8","html_url":"https://github.com/apache/bookkeeper/commit/24dc8ac30c97620cf4dbef48deff2bb957932eb8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/24dc8ac30c97620cf4dbef48deff2bb957932eb8/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"33ea58027b0a3ba160f7ac19d20568709f453f4d","url":"https://api.github.com/repos/apache/bookkeeper/commits/33ea58027b0a3ba160f7ac19d20568709f453f4d","html_url":"https://github.com/apache/bookkeeper/commit/33ea58027b0a3ba160f7ac19d20568709f453f4d"}]},{"sha":"9602c32f16184e10873d53c269e270e3cd0ebeed","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NjAyYzMyZjE2MTg0ZTEwODczZDUzYzI2OWUyNzBlM2NkMGViZWVk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-22T05:44:13Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-22T05:44:13Z"},"message":"BOOKKEEPER-664: Compaction increases latency on journal writes (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1534503 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"92133aaccbff38a5ec7c5d53a0dc11027494a654","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/92133aaccbff38a5ec7c5d53a0dc11027494a654"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9602c32f16184e10873d53c269e270e3cd0ebeed","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9602c32f16184e10873d53c269e270e3cd0ebeed","html_url":"https://github.com/apache/bookkeeper/commit/9602c32f16184e10873d53c269e270e3cd0ebeed","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9602c32f16184e10873d53c269e270e3cd0ebeed/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"24dc8ac30c97620cf4dbef48deff2bb957932eb8","url":"https://api.github.com/repos/apache/bookkeeper/commits/24dc8ac30c97620cf4dbef48deff2bb957932eb8","html_url":"https://github.com/apache/bookkeeper/commit/24dc8ac30c97620cf4dbef48deff2bb957932eb8"}]},{"sha":"bf5c1838b4b0d764aa9f24842643fd9339610b9c","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZjVjMTgzOGI0YjBkNzY0YWE5ZjI0ODQyNjQzZmQ5MzM5NjEwYjlj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-22T14:21:28Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-22T14:21:28Z"},"message":"BOOKKEEPER-659: LRU page management in ledger cache. (Aniruddha, Robin Dhamankar & sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1534640 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0fdd91807a28bf458a476a4e83cb884d6a36989d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0fdd91807a28bf458a476a4e83cb884d6a36989d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bf5c1838b4b0d764aa9f24842643fd9339610b9c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bf5c1838b4b0d764aa9f24842643fd9339610b9c","html_url":"https://github.com/apache/bookkeeper/commit/bf5c1838b4b0d764aa9f24842643fd9339610b9c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bf5c1838b4b0d764aa9f24842643fd9339610b9c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9602c32f16184e10873d53c269e270e3cd0ebeed","url":"https://api.github.com/repos/apache/bookkeeper/commits/9602c32f16184e10873d53c269e270e3cd0ebeed","html_url":"https://github.com/apache/bookkeeper/commit/9602c32f16184e10873d53c269e270e3cd0ebeed"}]},{"sha":"2d0cd0d1b9d41f3b600f6dac308c6d34317ae676","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZDBjZDBkMWI5ZDQxZjNiNjAwZjZkYWMzMDhjNmQzNDMxN2FlNjc2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-29T04:14:18Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-29T04:14:18Z"},"message":"BOOKKEEPER-602: we should have request timeouts rather than channel timeout in PerChannelBookieClient (Aniruddha, ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1536584 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dbad826dbd34a3e9be25c2efdb4d51c4754f4d88","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dbad826dbd34a3e9be25c2efdb4d51c4754f4d88"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2d0cd0d1b9d41f3b600f6dac308c6d34317ae676","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2d0cd0d1b9d41f3b600f6dac308c6d34317ae676","html_url":"https://github.com/apache/bookkeeper/commit/2d0cd0d1b9d41f3b600f6dac308c6d34317ae676","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2d0cd0d1b9d41f3b600f6dac308c6d34317ae676/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf5c1838b4b0d764aa9f24842643fd9339610b9c","url":"https://api.github.com/repos/apache/bookkeeper/commits/bf5c1838b4b0d764aa9f24842643fd9339610b9c","html_url":"https://github.com/apache/bookkeeper/commit/bf5c1838b4b0d764aa9f24842643fd9339610b9c"}]},{"sha":"cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZDA1MTk0ZDhiYmIwM2EwOGQ4ZDlmYmViMDk3MzhiZDhhMmUwOWE4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-29T09:08:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-29T09:08:54Z"},"message":"BOOKKEEPER-614: Generic stats interface, which multiple providers can be plugged into (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1536616 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4937ab50d9fb238a0c92ce8b1f1e603177c50cf1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4937ab50d9fb238a0c92ce8b1f1e603177c50cf1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","html_url":"https://github.com/apache/bookkeeper/commit/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2d0cd0d1b9d41f3b600f6dac308c6d34317ae676","url":"https://api.github.com/repos/apache/bookkeeper/commits/2d0cd0d1b9d41f3b600f6dac308c6d34317ae676","html_url":"https://github.com/apache/bookkeeper/commit/2d0cd0d1b9d41f3b600f6dac308c6d34317ae676"}]},{"sha":"6c6ec2b2f9cb1aff37001f3d9f002cc820096404","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2YzZlYzJiMmY5Y2IxYWZmMzcwMDFmM2Q5ZjAwMmNjODIwMDk2NDA0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-29T09:58:02Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-29T09:58:02Z"},"message":"BOOKKEEPER-615: Twitter stats implementation of stats interface (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1536635 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c7cc1a3407d5c57f0ba9b25c95669aa318c11060","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c7cc1a3407d5c57f0ba9b25c95669aa318c11060"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6c6ec2b2f9cb1aff37001f3d9f002cc820096404","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6c6ec2b2f9cb1aff37001f3d9f002cc820096404","html_url":"https://github.com/apache/bookkeeper/commit/6c6ec2b2f9cb1aff37001f3d9f002cc820096404","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","url":"https://api.github.com/repos/apache/bookkeeper/commits/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","html_url":"https://github.com/apache/bookkeeper/commit/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8"}]},{"sha":"f345cb9472250eca2b724fa14b8d2c08425b6a2f","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMzQ1Y2I5NDcyMjUwZWNhMmI3MjRmYTE0YjhkMmMwODQyNWI2YTJm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-30T04:59:47Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-30T04:59:47Z"},"message":"BOOKKEEPER-698: Bookie client closure is not considering timeoutExecutor (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1536965 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a32584dbef82eff62f3193985abc1a12faed3af5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a32584dbef82eff62f3193985abc1a12faed3af5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f345cb9472250eca2b724fa14b8d2c08425b6a2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f345cb9472250eca2b724fa14b8d2c08425b6a2f","html_url":"https://github.com/apache/bookkeeper/commit/f345cb9472250eca2b724fa14b8d2c08425b6a2f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f345cb9472250eca2b724fa14b8d2c08425b6a2f/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"6c6ec2b2f9cb1aff37001f3d9f002cc820096404","url":"https://api.github.com/repos/apache/bookkeeper/commits/6c6ec2b2f9cb1aff37001f3d9f002cc820096404","html_url":"https://github.com/apache/bookkeeper/commit/6c6ec2b2f9cb1aff37001f3d9f002cc820096404"}]},{"sha":"ea4a13a45d8d2102f5f0098e404d3de66777a39b","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYTRhMTNhNDVkOGQyMTAyZjVmMDA5OGU0MDRkM2RlNjY3NzdhMzli","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-30T15:23:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-30T15:23:54Z"},"message":"BOOKKEEPER-700: GarbageCollectorThread exsiting with ArrayIndexOutOfBoundsException (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1537130 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"407b088fe8cc67e6360f8a56228a72349a331b3d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/407b088fe8cc67e6360f8a56228a72349a331b3d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ea4a13a45d8d2102f5f0098e404d3de66777a39b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ea4a13a45d8d2102f5f0098e404d3de66777a39b","html_url":"https://github.com/apache/bookkeeper/commit/ea4a13a45d8d2102f5f0098e404d3de66777a39b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ea4a13a45d8d2102f5f0098e404d3de66777a39b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f345cb9472250eca2b724fa14b8d2c08425b6a2f","url":"https://api.github.com/repos/apache/bookkeeper/commits/f345cb9472250eca2b724fa14b8d2c08425b6a2f","html_url":"https://github.com/apache/bookkeeper/commit/f345cb9472250eca2b724fa14b8d2c08425b6a2f"}]},{"sha":"eb7066a02a50e2b15e66dfd4e99706ecf79454e6","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYjcwNjZhMDJhNTBlMmIxNWU2NmRmZDRlOTk3MDZlY2Y3OTQ1NGU2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-11-09T18:49:55Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-11-09T18:49:55Z"},"message":"BOOKKEEPER-699: Codahale metrics implementation of stats API (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1540366 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6197d9308d96c8f4dfdfd38ac387a5d0454fee6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e6197d9308d96c8f4dfdfd38ac387a5d0454fee6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/eb7066a02a50e2b15e66dfd4e99706ecf79454e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/eb7066a02a50e2b15e66dfd4e99706ecf79454e6","html_url":"https://github.com/apache/bookkeeper/commit/eb7066a02a50e2b15e66dfd4e99706ecf79454e6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea4a13a45d8d2102f5f0098e404d3de66777a39b","url":"https://api.github.com/repos/apache/bookkeeper/commits/ea4a13a45d8d2102f5f0098e404d3de66777a39b","html_url":"https://github.com/apache/bookkeeper/commit/ea4a13a45d8d2102f5f0098e404d3de66777a39b"}]},{"sha":"67dccebdbee27476657898a370c4f1808231fc4b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2N2RjY2ViZGJlZTI3NDc2NjU3ODk4YTM3MGM0ZjE4MDgyMzFmYzRi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-11-22T09:40:15Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-11-22T09:40:15Z"},"message":"BOOKKEEPER-678: BookieServer shutdown hangs indefinitely at NioServerSocketChannelFactory.releaseExternalResources (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1544452 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"265fcb6292be46acdb6aac0a8cd919fded8017c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/265fcb6292be46acdb6aac0a8cd919fded8017c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/67dccebdbee27476657898a370c4f1808231fc4b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/67dccebdbee27476657898a370c4f1808231fc4b","html_url":"https://github.com/apache/bookkeeper/commit/67dccebdbee27476657898a370c4f1808231fc4b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/67dccebdbee27476657898a370c4f1808231fc4b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"eb7066a02a50e2b15e66dfd4e99706ecf79454e6","url":"https://api.github.com/repos/apache/bookkeeper/commits/eb7066a02a50e2b15e66dfd4e99706ecf79454e6","html_url":"https://github.com/apache/bookkeeper/commit/eb7066a02a50e2b15e66dfd4e99706ecf79454e6"}]},{"sha":"7c7e009691bc24642018e4f5c81123a0667d4e8b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YzdlMDA5NjkxYmMyNDY0MjAxOGU0ZjVjODExMjNhMDY2N2Q0ZThi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-12-02T17:45:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-12-02T17:45:13Z"},"message":"BOOKKEEPER-565: Make an option to separate storing entry log files from index files. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1547123 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7239e3019c48d73e0a15078affeca281e82da06f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7239e3019c48d73e0a15078affeca281e82da06f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7c7e009691bc24642018e4f5c81123a0667d4e8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7c7e009691bc24642018e4f5c81123a0667d4e8b","html_url":"https://github.com/apache/bookkeeper/commit/7c7e009691bc24642018e4f5c81123a0667d4e8b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7c7e009691bc24642018e4f5c81123a0667d4e8b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"67dccebdbee27476657898a370c4f1808231fc4b","url":"https://api.github.com/repos/apache/bookkeeper/commits/67dccebdbee27476657898a370c4f1808231fc4b","html_url":"https://github.com/apache/bookkeeper/commit/67dccebdbee27476657898a370c4f1808231fc4b"}]},{"sha":"810f10e9c628604a7697172df79478d9186be637","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MTBmMTBlOWM2Mjg2MDRhNzY5NzE3MmRmNzk0NzhkOTE4NmJlNjM3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-05T06:33:31Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-05T06:33:31Z"},"message":"BOOKKEEPER-711: bookkeeper-daemon.sh will not remove the pid file one successful stop (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1548023 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba776ffc342a66a94fed70e7bcceee1444a3c53d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ba776ffc342a66a94fed70e7bcceee1444a3c53d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/810f10e9c628604a7697172df79478d9186be637","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/810f10e9c628604a7697172df79478d9186be637","html_url":"https://github.com/apache/bookkeeper/commit/810f10e9c628604a7697172df79478d9186be637","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/810f10e9c628604a7697172df79478d9186be637/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"7c7e009691bc24642018e4f5c81123a0667d4e8b","url":"https://api.github.com/repos/apache/bookkeeper/commits/7c7e009691bc24642018e4f5c81123a0667d4e8b","html_url":"https://github.com/apache/bookkeeper/commit/7c7e009691bc24642018e4f5c81123a0667d4e8b"}]},{"sha":"42185c2e3d9e6d85b095842ac051f3a3c4a4d22f","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MjE4NWMyZTNkOWU2ZDg1YjA5NTg0MmFjMDUxZjNhM2M0YTRkMjJm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-05T06:35:56Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-05T06:35:56Z"},"message":"BOOKKEEPER-712: bookkeeper script should use java from JAVA_HOME (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1548024 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"155af3b650c356bc32e587aa52720520e67c50e4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/155af3b650c356bc32e587aa52720520e67c50e4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/42185c2e3d9e6d85b095842ac051f3a3c4a4d22f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/42185c2e3d9e6d85b095842ac051f3a3c4a4d22f","html_url":"https://github.com/apache/bookkeeper/commit/42185c2e3d9e6d85b095842ac051f3a3c4a4d22f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/42185c2e3d9e6d85b095842ac051f3a3c4a4d22f/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"810f10e9c628604a7697172df79478d9186be637","url":"https://api.github.com/repos/apache/bookkeeper/commits/810f10e9c628604a7697172df79478d9186be637","html_url":"https://github.com/apache/bookkeeper/commit/810f10e9c628604a7697172df79478d9186be637"}]},{"sha":"34c260bfc7db379351fa8807897603b9a9b9012b","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNGMyNjBiZmM3ZGIzNzkzNTFmYTg4MDc4OTc2MDNiOWE5YjkwMTJi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-06T06:39:36Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-06T06:39:36Z"},"message":"BOOKKEEPER-701: Improve exception handling of Bookkeeper threads (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1548385 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"956efc2d5d517e160feaab3b2d2ff95f3c474229","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/956efc2d5d517e160feaab3b2d2ff95f3c474229"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/34c260bfc7db379351fa8807897603b9a9b9012b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/34c260bfc7db379351fa8807897603b9a9b9012b","html_url":"https://github.com/apache/bookkeeper/commit/34c260bfc7db379351fa8807897603b9a9b9012b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/34c260bfc7db379351fa8807897603b9a9b9012b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"42185c2e3d9e6d85b095842ac051f3a3c4a4d22f","url":"https://api.github.com/repos/apache/bookkeeper/commits/42185c2e3d9e6d85b095842ac051f3a3c4a4d22f","html_url":"https://github.com/apache/bookkeeper/commit/42185c2e3d9e6d85b095842ac051f3a3c4a4d22f"}]},{"sha":"5c3a30f8e423da51b1ee03173a336400335de3b8","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1YzNhMzBmOGU0MjNkYTUxYjFlZTAzMTczYTMzNjQwMDMzNWRlM2I4","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-01-03T17:12:42Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-01-03T17:12:42Z"},"message":"BOOKKEEPER-709: SlowBookieTest#testSlowBookie fails intermittently (Rakesh R via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1555158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"374efa0912694ca04f745e844031d4a6a498d7d4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/374efa0912694ca04f745e844031d4a6a498d7d4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5c3a30f8e423da51b1ee03173a336400335de3b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5c3a30f8e423da51b1ee03173a336400335de3b8","html_url":"https://github.com/apache/bookkeeper/commit/5c3a30f8e423da51b1ee03173a336400335de3b8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5c3a30f8e423da51b1ee03173a336400335de3b8/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"34c260bfc7db379351fa8807897603b9a9b9012b","url":"https://api.github.com/repos/apache/bookkeeper/commits/34c260bfc7db379351fa8807897603b9a9b9012b","html_url":"https://github.com/apache/bookkeeper/commit/34c260bfc7db379351fa8807897603b9a9b9012b"}]},{"sha":"79a73f0f71be5701b44ab47c14f92945989b1417","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3OWE3M2YwZjcxYmU1NzAxYjQ0YWI0N2MxNGY5Mjk0NTk4OWIxNDE3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-09T06:30:11Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-09T06:30:11Z"},"message":"BOOKKEEPER-714: Logging channel exceptions in PerChannelBookieClient (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1556732 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f27922d9b0e252e514700192c3b3f2e0cf33cac","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6f27922d9b0e252e514700192c3b3f2e0cf33cac"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/79a73f0f71be5701b44ab47c14f92945989b1417","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/79a73f0f71be5701b44ab47c14f92945989b1417","html_url":"https://github.com/apache/bookkeeper/commit/79a73f0f71be5701b44ab47c14f92945989b1417","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/79a73f0f71be5701b44ab47c14f92945989b1417/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"5c3a30f8e423da51b1ee03173a336400335de3b8","url":"https://api.github.com/repos/apache/bookkeeper/commits/5c3a30f8e423da51b1ee03173a336400335de3b8","html_url":"https://github.com/apache/bookkeeper/commit/5c3a30f8e423da51b1ee03173a336400335de3b8"}]},{"sha":"da8864ad7cd53d302eb27ab31f942bdbae160a98","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkYTg4NjRhZDdjZDUzZDMwMmViMjdhYjMxZjk0MmJkYmFlMTYwYTk4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-15T14:58:00Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-15T14:58:00Z"},"message":"BOOKKEEPER-662: Major GC should kick in immediately if remaining space reaches a warning threshold (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1558410 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fcfa206229217b0ca6183731b8090307c3123845","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fcfa206229217b0ca6183731b8090307c3123845"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/da8864ad7cd53d302eb27ab31f942bdbae160a98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/da8864ad7cd53d302eb27ab31f942bdbae160a98","html_url":"https://github.com/apache/bookkeeper/commit/da8864ad7cd53d302eb27ab31f942bdbae160a98","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/da8864ad7cd53d302eb27ab31f942bdbae160a98/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"79a73f0f71be5701b44ab47c14f92945989b1417","url":"https://api.github.com/repos/apache/bookkeeper/commits/79a73f0f71be5701b44ab47c14f92945989b1417","html_url":"https://github.com/apache/bookkeeper/commit/79a73f0f71be5701b44ab47c14f92945989b1417"}]},{"sha":"78c0d2515f2e381b2c690bdbf2bf9bad03d1250c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3OGMwZDI1MTVmMmUzODFiMmM2OTBiZGJmMmJmOWJhZDAzZDEyNTBj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-17T17:13:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-17T17:13:43Z"},"message":"BOOKKEEPER-710: OpenLedgerNoRecovery should watch ensemble change. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1559192 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d2a940492746fdab9bde11cc33a9f88df9159e7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3d2a940492746fdab9bde11cc33a9f88df9159e7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/78c0d2515f2e381b2c690bdbf2bf9bad03d1250c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/78c0d2515f2e381b2c690bdbf2bf9bad03d1250c","html_url":"https://github.com/apache/bookkeeper/commit/78c0d2515f2e381b2c690bdbf2bf9bad03d1250c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/78c0d2515f2e381b2c690bdbf2bf9bad03d1250c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"da8864ad7cd53d302eb27ab31f942bdbae160a98","url":"https://api.github.com/repos/apache/bookkeeper/commits/da8864ad7cd53d302eb27ab31f942bdbae160a98","html_url":"https://github.com/apache/bookkeeper/commit/da8864ad7cd53d302eb27ab31f942bdbae160a98"}]},{"sha":"96cc0e11ca2166a5e5326be4ead0dab595b7e4bc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NmNjMGUxMWNhMjE2NmE1ZTUzMjZiZTRlYWQwZGFiNTk1YjdlNGJj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-21T04:05:00Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-21T04:05:00Z"},"message":"BOOKKEEPER-429: Provide separate read and write threads in the bookkeeper server (Aniruddha via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1559917 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71934c18ea057ace4ff08fcf22be27c0102dd78b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/71934c18ea057ace4ff08fcf22be27c0102dd78b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/96cc0e11ca2166a5e5326be4ead0dab595b7e4bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/96cc0e11ca2166a5e5326be4ead0dab595b7e4bc","html_url":"https://github.com/apache/bookkeeper/commit/96cc0e11ca2166a5e5326be4ead0dab595b7e4bc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/96cc0e11ca2166a5e5326be4ead0dab595b7e4bc/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"78c0d2515f2e381b2c690bdbf2bf9bad03d1250c","url":"https://api.github.com/repos/apache/bookkeeper/commits/78c0d2515f2e381b2c690bdbf2bf9bad03d1250c","html_url":"https://github.com/apache/bookkeeper/commit/78c0d2515f2e381b2c690bdbf2bf9bad03d1250c"}]},{"sha":"75f103d9d6694ae0116fe741a2dfbf60e3c63ce1","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3NWYxMDNkOWQ2Njk0YWUwMTE2ZmU3NDFhMmRmYmY2MGUzYzYzY2Ux","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-21T04:19:09Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-21T04:19:09Z"},"message":"BOOKKEEPER-696: stats collection on bookkeeper client (Aniruddha, ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1559918 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a24158365e07fe9910cbcadc530dabc6b0e307da","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a24158365e07fe9910cbcadc530dabc6b0e307da"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/75f103d9d6694ae0116fe741a2dfbf60e3c63ce1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/75f103d9d6694ae0116fe741a2dfbf60e3c63ce1","html_url":"https://github.com/apache/bookkeeper/commit/75f103d9d6694ae0116fe741a2dfbf60e3c63ce1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/75f103d9d6694ae0116fe741a2dfbf60e3c63ce1/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"96cc0e11ca2166a5e5326be4ead0dab595b7e4bc","url":"https://api.github.com/repos/apache/bookkeeper/commits/96cc0e11ca2166a5e5326be4ead0dab595b7e4bc","html_url":"https://github.com/apache/bookkeeper/commit/96cc0e11ca2166a5e5326be4ead0dab595b7e4bc"}]},{"sha":"23f3760dd5d79e6894616834aa41d59089c9548a","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyM2YzNzYwZGQ1ZDc5ZTY4OTQ2MTY4MzRhYTQxZDU5MDg5Yzk1NDhh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-21T15:41:29Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-21T15:41:29Z"},"message":"BOOKKEEPER-719: Inconsistent synchronization of org.apache.bookkeeper.stats.CodahaleMetricsProvider.metrics (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1560045 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3da582cefc1fca4e283c94a17c39f217eb38843c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3da582cefc1fca4e283c94a17c39f217eb38843c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/23f3760dd5d79e6894616834aa41d59089c9548a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/23f3760dd5d79e6894616834aa41d59089c9548a","html_url":"https://github.com/apache/bookkeeper/commit/23f3760dd5d79e6894616834aa41d59089c9548a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/23f3760dd5d79e6894616834aa41d59089c9548a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"75f103d9d6694ae0116fe741a2dfbf60e3c63ce1","url":"https://api.github.com/repos/apache/bookkeeper/commits/75f103d9d6694ae0116fe741a2dfbf60e3c63ce1","html_url":"https://github.com/apache/bookkeeper/commit/75f103d9d6694ae0116fe741a2dfbf60e3c63ce1"}]},{"sha":"9b1e561cb5e4f081f40bf8b751bcc2c16226092e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5YjFlNTYxY2I1ZTRmMDgxZjQwYmY4Yjc1MWJjYzJjMTYyMjYwOTJl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-21T16:26:23Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-21T16:26:23Z"},"message":"BOOKKEEPER-661: Turn readonly back to writable if spaces are reclaimed. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1560066 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"32c648d0b6dde3685792d19e27aaf0c35a39c2e5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/32c648d0b6dde3685792d19e27aaf0c35a39c2e5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9b1e561cb5e4f081f40bf8b751bcc2c16226092e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9b1e561cb5e4f081f40bf8b751bcc2c16226092e","html_url":"https://github.com/apache/bookkeeper/commit/9b1e561cb5e4f081f40bf8b751bcc2c16226092e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9b1e561cb5e4f081f40bf8b751bcc2c16226092e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"23f3760dd5d79e6894616834aa41d59089c9548a","url":"https://api.github.com/repos/apache/bookkeeper/commits/23f3760dd5d79e6894616834aa41d59089c9548a","html_url":"https://github.com/apache/bookkeeper/commit/23f3760dd5d79e6894616834aa41d59089c9548a"}]},{"sha":"7b44d9552d8b854160278582db3f5ca07882358a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YjQ0ZDk1NTJkOGI4NTQxNjAyNzg1ODJkYjNmNWNhMDc4ODIzNThh","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-22T06:37:35Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-22T06:37:35Z"},"message":"BOOKKEEPER-720: CheckpointSource.MIN#compareTo does exactly the opposite of what it should (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1560263 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0f30405e791916799e4512fa6cc367da9192eb02","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0f30405e791916799e4512fa6cc367da9192eb02"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7b44d9552d8b854160278582db3f5ca07882358a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7b44d9552d8b854160278582db3f5ca07882358a","html_url":"https://github.com/apache/bookkeeper/commit/7b44d9552d8b854160278582db3f5ca07882358a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7b44d9552d8b854160278582db3f5ca07882358a/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"9b1e561cb5e4f081f40bf8b751bcc2c16226092e","url":"https://api.github.com/repos/apache/bookkeeper/commits/9b1e561cb5e4f081f40bf8b751bcc2c16226092e","html_url":"https://github.com/apache/bookkeeper/commit/9b1e561cb5e4f081f40bf8b751bcc2c16226092e"}]},{"sha":"694568b0ff0d048c284c8d5db0c9455d30dfa3ce","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2OTQ1NjhiMGZmMGQwNDhjMjg0YzhkNWRiMGM5NDU1ZDMwZGZhM2Nl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-22T13:35:03Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-22T13:35:03Z"},"message":"BOOKKEEPER-643: Improve concurrency of entry logger (sijie & Aniruddha via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1560348 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"66fb4b29882c7294e181f79fd3bd92fb2eac2ff2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/66fb4b29882c7294e181f79fd3bd92fb2eac2ff2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/694568b0ff0d048c284c8d5db0c9455d30dfa3ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/694568b0ff0d048c284c8d5db0c9455d30dfa3ce","html_url":"https://github.com/apache/bookkeeper/commit/694568b0ff0d048c284c8d5db0c9455d30dfa3ce","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/694568b0ff0d048c284c8d5db0c9455d30dfa3ce/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7b44d9552d8b854160278582db3f5ca07882358a","url":"https://api.github.com/repos/apache/bookkeeper/commits/7b44d9552d8b854160278582db3f5ca07882358a","html_url":"https://github.com/apache/bookkeeper/commit/7b44d9552d8b854160278582db3f5ca07882358a"}]},{"sha":"8bb0cde556cf1dc07d62cd74ca6739b392242cf0","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4YmIwY2RlNTU2Y2YxZGMwN2Q2MmNkNzRjYTY3MzliMzkyMjQyY2Yw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-24T08:26:14Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-01-24T08:26:14Z"},"message":"BOOKKEEPER-703: Document all the settings added in BOOKKEEPER-656 (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1560917 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cabaf160983765e348e05f21dcb84e998ac8b602","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cabaf160983765e348e05f21dcb84e998ac8b602"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8bb0cde556cf1dc07d62cd74ca6739b392242cf0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8bb0cde556cf1dc07d62cd74ca6739b392242cf0","html_url":"https://github.com/apache/bookkeeper/commit/8bb0cde556cf1dc07d62cd74ca6739b392242cf0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8bb0cde556cf1dc07d62cd74ca6739b392242cf0/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"694568b0ff0d048c284c8d5db0c9455d30dfa3ce","url":"https://api.github.com/repos/apache/bookkeeper/commits/694568b0ff0d048c284c8d5db0c9455d30dfa3ce","html_url":"https://github.com/apache/bookkeeper/commit/694568b0ff0d048c284c8d5db0c9455d30dfa3ce"}]},{"sha":"0345c8095ee47aefd7d40a07e2a621079c94f4fd","node_id":"MDY6Q29tbWl0MTU3NTk1NjowMzQ1YzgwOTVlZTQ3YWVmZDdkNDBhMDdlMmE2MjEwNzljOTRmNGZk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-02T05:33:45Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-02T05:33:45Z"},"message":"BOOKKEEPER-708: Shade protobuf library to avoid incompatible versions (rakesh, ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1563566 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2f141a039ba2c62f034b102bef211ba7c7cfd95f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2f141a039ba2c62f034b102bef211ba7c7cfd95f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0345c8095ee47aefd7d40a07e2a621079c94f4fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0345c8095ee47aefd7d40a07e2a621079c94f4fd","html_url":"https://github.com/apache/bookkeeper/commit/0345c8095ee47aefd7d40a07e2a621079c94f4fd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0345c8095ee47aefd7d40a07e2a621079c94f4fd/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8bb0cde556cf1dc07d62cd74ca6739b392242cf0","url":"https://api.github.com/repos/apache/bookkeeper/commits/8bb0cde556cf1dc07d62cd74ca6739b392242cf0","html_url":"https://github.com/apache/bookkeeper/commit/8bb0cde556cf1dc07d62cd74ca6739b392242cf0"}]},{"sha":"92a62781682721e7c6bb47a95c72029fb91d2e2f","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5MmE2Mjc4MTY4MjcyMWU3YzZiYjQ3YTk1YzcyMDI5ZmI5MWQyZTJm","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-02-05T21:43:39Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-02-05T21:43:39Z"},"message":"BOOKKEEPER-644: Provide a bookie address wrapper (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1564946 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"223e727d17c627b8503f75e322450364cc081bbc","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/223e727d17c627b8503f75e322450364cc081bbc"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/92a62781682721e7c6bb47a95c72029fb91d2e2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/92a62781682721e7c6bb47a95c72029fb91d2e2f","html_url":"https://github.com/apache/bookkeeper/commit/92a62781682721e7c6bb47a95c72029fb91d2e2f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/92a62781682721e7c6bb47a95c72029fb91d2e2f/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"0345c8095ee47aefd7d40a07e2a621079c94f4fd","url":"https://api.github.com/repos/apache/bookkeeper/commits/0345c8095ee47aefd7d40a07e2a621079c94f4fd","html_url":"https://github.com/apache/bookkeeper/commit/0345c8095ee47aefd7d40a07e2a621079c94f4fd"}]},{"sha":"94ebe62b8c6ddcd2b52e8bc4eac4e102ff4cf720","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NGViZTYyYjhjNmRkY2QyYjUyZThiYzRlYWM0ZTEwMmZmNGNmNzIw","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-02-05T21:52:05Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-02-05T21:52:05Z"},"message":"BOOKKEEPER-727: Names of bookie write/read threads are backwards (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1564949 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"545db74db578bdc3404942c3e190ed8573867609","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/545db74db578bdc3404942c3e190ed8573867609"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/94ebe62b8c6ddcd2b52e8bc4eac4e102ff4cf720","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/94ebe62b8c6ddcd2b52e8bc4eac4e102ff4cf720","html_url":"https://github.com/apache/bookkeeper/commit/94ebe62b8c6ddcd2b52e8bc4eac4e102ff4cf720","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/94ebe62b8c6ddcd2b52e8bc4eac4e102ff4cf720/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"92a62781682721e7c6bb47a95c72029fb91d2e2f","url":"https://api.github.com/repos/apache/bookkeeper/commits/92a62781682721e7c6bb47a95c72029fb91d2e2f","html_url":"https://github.com/apache/bookkeeper/commit/92a62781682721e7c6bb47a95c72029fb91d2e2f"}]},{"sha":"63232dec02952e3404beeafd0c73fc61c2c7cd17","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2MzIzMmRlYzAyOTUyZTM0MDRiZWVhZmQwYzczZmM2MWMyYzdjZDE3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-06T08:21:08Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-06T08:21:08Z"},"message":"BOOKKEEPER-728: Bookkeeper#Builder is not public, so can't be used outside of client package (ivank via fpj)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1565105 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd30efde2586f21da0f7cbc36ef5e5c0e1b4b4b6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fd30efde2586f21da0f7cbc36ef5e5c0e1b4b4b6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/63232dec02952e3404beeafd0c73fc61c2c7cd17","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/63232dec02952e3404beeafd0c73fc61c2c7cd17","html_url":"https://github.com/apache/bookkeeper/commit/63232dec02952e3404beeafd0c73fc61c2c7cd17","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/63232dec02952e3404beeafd0c73fc61c2c7cd17/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"94ebe62b8c6ddcd2b52e8bc4eac4e102ff4cf720","url":"https://api.github.com/repos/apache/bookkeeper/commits/94ebe62b8c6ddcd2b52e8bc4eac4e102ff4cf720","html_url":"https://github.com/apache/bookkeeper/commit/94ebe62b8c6ddcd2b52e8bc4eac4e102ff4cf720"}]},{"sha":"b62a67b1b11a10fe378a0bef25b846887cd104b1","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiNjJhNjdiMWIxMWExMGZlMzc4YTBiZWYyNWI4NDY4ODdjZDEwNGIx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-06T08:25:45Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-06T08:25:45Z"},"message":"BOOKKEEPER-729: Bookie shouldn't exit with 0, if exiting from deathwatcher and thread death was caused by OOM (ivank via fpj)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1565109 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61d48e7d6a6f7e0cd53617279a26d28d0db02332","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/61d48e7d6a6f7e0cd53617279a26d28d0db02332"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b62a67b1b11a10fe378a0bef25b846887cd104b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b62a67b1b11a10fe378a0bef25b846887cd104b1","html_url":"https://github.com/apache/bookkeeper/commit/b62a67b1b11a10fe378a0bef25b846887cd104b1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b62a67b1b11a10fe378a0bef25b846887cd104b1/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"63232dec02952e3404beeafd0c73fc61c2c7cd17","url":"https://api.github.com/repos/apache/bookkeeper/commits/63232dec02952e3404beeafd0c73fc61c2c7cd17","html_url":"https://github.com/apache/bookkeeper/commit/63232dec02952e3404beeafd0c73fc61c2c7cd17"}]},{"sha":"3870ff300c64dc41828fdc8c9627e76450cff077","node_id":"MDY6Q29tbWl0MTU3NTk1NjozODcwZmYzMDBjNjRkYzQxODI4ZmRjOGM5NjI3ZTc2NDUwY2ZmMDc3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-06T08:31:11Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-06T08:31:11Z"},"message":"BOOKKEEPER-725: AutoRecoveryMain should exit with error code if deathwatcher finds dead thread (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1565112 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c2464b187d02bfefdbb6b84ae518442db3e8cfa","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9c2464b187d02bfefdbb6b84ae518442db3e8cfa"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3870ff300c64dc41828fdc8c9627e76450cff077","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3870ff300c64dc41828fdc8c9627e76450cff077","html_url":"https://github.com/apache/bookkeeper/commit/3870ff300c64dc41828fdc8c9627e76450cff077","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3870ff300c64dc41828fdc8c9627e76450cff077/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"b62a67b1b11a10fe378a0bef25b846887cd104b1","url":"https://api.github.com/repos/apache/bookkeeper/commits/b62a67b1b11a10fe378a0bef25b846887cd104b1","html_url":"https://github.com/apache/bookkeeper/commit/b62a67b1b11a10fe378a0bef25b846887cd104b1"}]},{"sha":"7e0b69cac5d406c777765bc1fa879520ea9176ec","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZTBiNjljYWM1ZDQwNmM3Nzc3NjViYzFmYTg3OTUyMGVhOTE3NmVj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-06T08:34:15Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-06T08:34:15Z"},"message":"BOOKKEEPER-726: PerChannelBookieClient should print address that it failed to connect to when it fails to correct (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1565115 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bbea7388b2e9980feb48f8a38c4fdf48148160a3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bbea7388b2e9980feb48f8a38c4fdf48148160a3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7e0b69cac5d406c777765bc1fa879520ea9176ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7e0b69cac5d406c777765bc1fa879520ea9176ec","html_url":"https://github.com/apache/bookkeeper/commit/7e0b69cac5d406c777765bc1fa879520ea9176ec","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7e0b69cac5d406c777765bc1fa879520ea9176ec/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"3870ff300c64dc41828fdc8c9627e76450cff077","url":"https://api.github.com/repos/apache/bookkeeper/commits/3870ff300c64dc41828fdc8c9627e76450cff077","html_url":"https://github.com/apache/bookkeeper/commit/3870ff300c64dc41828fdc8c9627e76450cff077"}]},{"sha":"8aafd10f6634f039e33b0576d4b61121b494e93a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4YWFmZDEwZjY2MzRmMDM5ZTMzYjA1NzZkNGI2MTEyMWI0OTRlOTNh","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-02-06T11:32:14Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-02-06T11:32:14Z"},"message":"BOOKKEEPER-724: Shade introduces RAT error (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1565180 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4bc6cf52b4280feb9fc352a4511451355850d3ec","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4bc6cf52b4280feb9fc352a4511451355850d3ec"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8aafd10f6634f039e33b0576d4b61121b494e93a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8aafd10f6634f039e33b0576d4b61121b494e93a","html_url":"https://github.com/apache/bookkeeper/commit/8aafd10f6634f039e33b0576d4b61121b494e93a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8aafd10f6634f039e33b0576d4b61121b494e93a/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"7e0b69cac5d406c777765bc1fa879520ea9176ec","url":"https://api.github.com/repos/apache/bookkeeper/commits/7e0b69cac5d406c777765bc1fa879520ea9176ec","html_url":"https://github.com/apache/bookkeeper/commit/7e0b69cac5d406c777765bc1fa879520ea9176ec"}]},{"sha":"68ffb83d69e6e9be3da94e78d5f76bd6c57b2316","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2OGZmYjgzZDY5ZTZlOWJlM2RhOTRlNzhkNWY3NmJkNmM1N2IyMzE2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-10T05:52:20Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-10T05:52:20Z"},"message":"BOOKKEEPER-732: Add env variable ENTRY_FORMATTER_CLASS to the bkenv.sh (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1566510 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e3a5830301cafccf07237d08d0f0397c9e5cafa7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e3a5830301cafccf07237d08d0f0397c9e5cafa7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/68ffb83d69e6e9be3da94e78d5f76bd6c57b2316","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/68ffb83d69e6e9be3da94e78d5f76bd6c57b2316","html_url":"https://github.com/apache/bookkeeper/commit/68ffb83d69e6e9be3da94e78d5f76bd6c57b2316","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/68ffb83d69e6e9be3da94e78d5f76bd6c57b2316/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8aafd10f6634f039e33b0576d4b61121b494e93a","url":"https://api.github.com/repos/apache/bookkeeper/commits/8aafd10f6634f039e33b0576d4b61121b494e93a","html_url":"https://github.com/apache/bookkeeper/commit/8aafd10f6634f039e33b0576d4b61121b494e93a"}]},{"sha":"f19744d30ed879022a66de885cb1236d54582d2b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMTk3NDRkMzBlZDg3OTAyMmE2NmRlODg1Y2IxMjM2ZDU0NTgyZDJi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-10T05:53:57Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-02-10T05:53:57Z"},"message":"BOOKKEEPER-731: Missing BOOKIE_PID_DIR and BOOKIE_STOP_TIMEOUT in env variables list (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1566512 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a22db273fb8b82e4d6c788b2e8c96fa21470422","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1a22db273fb8b82e4d6c788b2e8c96fa21470422"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f19744d30ed879022a66de885cb1236d54582d2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f19744d30ed879022a66de885cb1236d54582d2b","html_url":"https://github.com/apache/bookkeeper/commit/f19744d30ed879022a66de885cb1236d54582d2b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f19744d30ed879022a66de885cb1236d54582d2b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"68ffb83d69e6e9be3da94e78d5f76bd6c57b2316","url":"https://api.github.com/repos/apache/bookkeeper/commits/68ffb83d69e6e9be3da94e78d5f76bd6c57b2316","html_url":"https://github.com/apache/bookkeeper/commit/68ffb83d69e6e9be3da94e78d5f76bd6c57b2316"}]},{"sha":"653dd6d733e9022a6189a2c8546bb8e3afa22715","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NTNkZDZkNzMzZTkwMjJhNjE4OWEyYzg1NDZiYjhlM2FmYTIyNzE1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-02-21T18:01:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-02-21T18:01:17Z"},"message":"BOOKKEEPER-654: Bookkeeper client operations are allowed even after its closure, bk#close() (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1570647 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4cdc5225d81aafa5d3ccceffb1d14590b5a873c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4cdc5225d81aafa5d3ccceffb1d14590b5a873c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/653dd6d733e9022a6189a2c8546bb8e3afa22715","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/653dd6d733e9022a6189a2c8546bb8e3afa22715","html_url":"https://github.com/apache/bookkeeper/commit/653dd6d733e9022a6189a2c8546bb8e3afa22715","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/653dd6d733e9022a6189a2c8546bb8e3afa22715/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f19744d30ed879022a66de885cb1236d54582d2b","url":"https://api.github.com/repos/apache/bookkeeper/commits/f19744d30ed879022a66de885cb1236d54582d2b","html_url":"https://github.com/apache/bookkeeper/commit/f19744d30ed879022a66de885cb1236d54582d2b"}]},{"sha":"261bb8f671dc233d3b604b3355bb20d82edac539","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNjFiYjhmNjcxZGMyMzNkM2I2MDRiMzM1NWJiMjBkODJlZGFjNTM5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T12:14:45Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T12:14:45Z"},"message":"BOOKKEEPER-717: journal should look forward to group time-out entries (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1575243 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3ea36a4addb1af729b6f0ac2e4ebe87bf7f1197f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3ea36a4addb1af729b6f0ac2e4ebe87bf7f1197f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/261bb8f671dc233d3b604b3355bb20d82edac539","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/261bb8f671dc233d3b604b3355bb20d82edac539","html_url":"https://github.com/apache/bookkeeper/commit/261bb8f671dc233d3b604b3355bb20d82edac539","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/261bb8f671dc233d3b604b3355bb20d82edac539/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"653dd6d733e9022a6189a2c8546bb8e3afa22715","url":"https://api.github.com/repos/apache/bookkeeper/commits/653dd6d733e9022a6189a2c8546bb8e3afa22715","html_url":"https://github.com/apache/bookkeeper/commit/653dd6d733e9022a6189a2c8546bb8e3afa22715"}]},{"sha":"12daded8c22edc11363ec4eddfbba670e66ee9ad","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMmRhZGVkOGMyMmVkYzExMzYzZWM0ZWRkZmJiYTY3MGU2NmVlOWFk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T12:30:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T12:30:54Z"},"message":"BOOKKEEPER-715: bookie: delay dropping journal cached pages (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1575246 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"174d506138d4b8ba0545c595e09c6f02ea954eab","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/174d506138d4b8ba0545c595e09c6f02ea954eab"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/12daded8c22edc11363ec4eddfbba670e66ee9ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/12daded8c22edc11363ec4eddfbba670e66ee9ad","html_url":"https://github.com/apache/bookkeeper/commit/12daded8c22edc11363ec4eddfbba670e66ee9ad","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/12daded8c22edc11363ec4eddfbba670e66ee9ad/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"261bb8f671dc233d3b604b3355bb20d82edac539","url":"https://api.github.com/repos/apache/bookkeeper/commits/261bb8f671dc233d3b604b3355bb20d82edac539","html_url":"https://github.com/apache/bookkeeper/commit/261bb8f671dc233d3b604b3355bb20d82edac539"}]},{"sha":"9d4ce1671cd6731b9b9652399c24a91c34e0bc65","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZDRjZTE2NzFjZDY3MzFiOWI5NjUyMzk5YzI0YTkxYzM0ZTBiYzY1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T12:34:19Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T12:34:19Z"},"message":"BOOKKEEPER-730: Shade pom file missing apache license header (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1575247 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"11bc13257b10ca7a536837e2a9484a6da1b73b9b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/11bc13257b10ca7a536837e2a9484a6da1b73b9b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9d4ce1671cd6731b9b9652399c24a91c34e0bc65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9d4ce1671cd6731b9b9652399c24a91c34e0bc65","html_url":"https://github.com/apache/bookkeeper/commit/9d4ce1671cd6731b9b9652399c24a91c34e0bc65","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9d4ce1671cd6731b9b9652399c24a91c34e0bc65/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"12daded8c22edc11363ec4eddfbba670e66ee9ad","url":"https://api.github.com/repos/apache/bookkeeper/commits/12daded8c22edc11363ec4eddfbba670e66ee9ad","html_url":"https://github.com/apache/bookkeeper/commit/12daded8c22edc11363ec4eddfbba670e66ee9ad"}]},{"sha":"2d427e8d4b2c1d889ab5586e28e198c140a10489","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZDQyN2U4ZDRiMmMxZDg4OWFiNTU4NmUyOGUxOThjMTQwYTEwNDg5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T17:39:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T17:39:37Z"},"message":"BOOKKEEPER-363: Re-distributing topics among newly added hubs. (aniruddha via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1575338 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7a8aa33d120d8ab80e2fe3543d8fb11a105783d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e7a8aa33d120d8ab80e2fe3543d8fb11a105783d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2d427e8d4b2c1d889ab5586e28e198c140a10489","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2d427e8d4b2c1d889ab5586e28e198c140a10489","html_url":"https://github.com/apache/bookkeeper/commit/2d427e8d4b2c1d889ab5586e28e198c140a10489","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2d427e8d4b2c1d889ab5586e28e198c140a10489/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9d4ce1671cd6731b9b9652399c24a91c34e0bc65","url":"https://api.github.com/repos/apache/bookkeeper/commits/9d4ce1671cd6731b9b9652399c24a91c34e0bc65","html_url":"https://github.com/apache/bookkeeper/commit/9d4ce1671cd6731b9b9652399c24a91c34e0bc65"}]},{"sha":"1ac25ebe98dd3038f68fe80e79570b9beceb0be8","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxYWMyNWViZTk4ZGQzMDM4ZjY4ZmU4MGU3OTU3MGI5YmVjZWIwYmU4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-10T02:14:35Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-10T02:14:35Z"},"message":"BOOKKEEPER-740: AutoRecoveryMainTest#testAutoRecoverySessionLoss is failing (Rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1575795 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"25eae68d6a3efe4bed6cf066ae5ce6192abdbfde","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/25eae68d6a3efe4bed6cf066ae5ce6192abdbfde"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1ac25ebe98dd3038f68fe80e79570b9beceb0be8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1ac25ebe98dd3038f68fe80e79570b9beceb0be8","html_url":"https://github.com/apache/bookkeeper/commit/1ac25ebe98dd3038f68fe80e79570b9beceb0be8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1ac25ebe98dd3038f68fe80e79570b9beceb0be8/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"2d427e8d4b2c1d889ab5586e28e198c140a10489","url":"https://api.github.com/repos/apache/bookkeeper/commits/2d427e8d4b2c1d889ab5586e28e198c140a10489","html_url":"https://github.com/apache/bookkeeper/commit/2d427e8d4b2c1d889ab5586e28e198c140a10489"}]},{"sha":"88533163987f328be1d36c9f6fc208667f2144a0","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4ODUzMzE2Mzk4N2YzMjhiZTFkMzZjOWY2ZmMyMDg2NjdmMjE0NGEw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-12T20:26:58Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-12T20:26:58Z"},"message":"BOOKKEEPER-432: Improve performance of entry log range read per ledger entries (yixue, sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1576883 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8e7167794c9e510931d198e245caf85db8bba10f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8e7167794c9e510931d198e245caf85db8bba10f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/88533163987f328be1d36c9f6fc208667f2144a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/88533163987f328be1d36c9f6fc208667f2144a0","html_url":"https://github.com/apache/bookkeeper/commit/88533163987f328be1d36c9f6fc208667f2144a0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/88533163987f328be1d36c9f6fc208667f2144a0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"1ac25ebe98dd3038f68fe80e79570b9beceb0be8","url":"https://api.github.com/repos/apache/bookkeeper/commits/1ac25ebe98dd3038f68fe80e79570b9beceb0be8","html_url":"https://github.com/apache/bookkeeper/commit/1ac25ebe98dd3038f68fe80e79570b9beceb0be8"}]},{"sha":"e1838f47800120252a3b5db77b7d1169e1daf801","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMTgzOGY0NzgwMDEyMDI1MmEzYjVkYjc3YjdkMTE2OWUxZGFmODAx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T08:43:56Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T08:43:56Z"},"message":"BOOKKEEPER-742: Fix for empty ledgers losing quorum. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1589636 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a3388554156e41450cafa0b8694a4fd9608b06c5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a3388554156e41450cafa0b8694a4fd9608b06c5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e1838f47800120252a3b5db77b7d1169e1daf801","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e1838f47800120252a3b5db77b7d1169e1daf801","html_url":"https://github.com/apache/bookkeeper/commit/e1838f47800120252a3b5db77b7d1169e1daf801","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e1838f47800120252a3b5db77b7d1169e1daf801/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"88533163987f328be1d36c9f6fc208667f2144a0","url":"https://api.github.com/repos/apache/bookkeeper/commits/88533163987f328be1d36c9f6fc208667f2144a0","html_url":"https://github.com/apache/bookkeeper/commit/88533163987f328be1d36c9f6fc208667f2144a0"}]},{"sha":"54c54f71a5fad10838c66c6a6b28ef13d9388931","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NGM1NGY3MWE1ZmFkMTA4MzhjNjZjNmE2YjI4ZWYxM2Q5Mzg4OTMx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T12:44:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T12:44:34Z"},"message":"BOOKKEEPER-743: Periodic ledger check running too often as doc doesn't match implementation. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1589694 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b3f0980d2994d822c4b6ae706c2e38c60c2e04db","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b3f0980d2994d822c4b6ae706c2e38c60c2e04db"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/54c54f71a5fad10838c66c6a6b28ef13d9388931","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/54c54f71a5fad10838c66c6a6b28ef13d9388931","html_url":"https://github.com/apache/bookkeeper/commit/54c54f71a5fad10838c66c6a6b28ef13d9388931","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/54c54f71a5fad10838c66c6a6b28ef13d9388931/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e1838f47800120252a3b5db77b7d1169e1daf801","url":"https://api.github.com/repos/apache/bookkeeper/commits/e1838f47800120252a3b5db77b7d1169e1daf801","html_url":"https://github.com/apache/bookkeeper/commit/e1838f47800120252a3b5db77b7d1169e1daf801"}]},{"sha":"5c18886657c88f48672554c0f814cf6418ad1e18","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1YzE4ODg2NjU3Yzg4ZjQ4NjcyNTU0YzBmODE0Y2Y2NDE4YWQxZTE4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-29T20:07:12Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-29T20:07:12Z"},"message":"BOOKKEEPER-716: padding writes for bookie journal (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1591079 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"16d9381f583def0d10809b7f56feafe103be85b3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/16d9381f583def0d10809b7f56feafe103be85b3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5c18886657c88f48672554c0f814cf6418ad1e18","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5c18886657c88f48672554c0f814cf6418ad1e18","html_url":"https://github.com/apache/bookkeeper/commit/5c18886657c88f48672554c0f814cf6418ad1e18","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5c18886657c88f48672554c0f814cf6418ad1e18/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"54c54f71a5fad10838c66c6a6b28ef13d9388931","url":"https://api.github.com/repos/apache/bookkeeper/commits/54c54f71a5fad10838c66c6a6b28ef13d9388931","html_url":"https://github.com/apache/bookkeeper/commit/54c54f71a5fad10838c66c6a6b28ef13d9388931"}]},{"sha":"4c27506835dd0a58ee0a37c4422c44237a344b30","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YzI3NTA2ODM1ZGQwYTU4ZWUwYTM3YzQ0MjJjNDQyMzdhMzQ0YjMw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-06T10:30:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-06T10:30:54Z"},"message":"BOOKKEEPER-744: Run the auditor bookie check periodically (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1592705 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d259c1be237ff2b7ec2ad0d884708f0654427c9f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d259c1be237ff2b7ec2ad0d884708f0654427c9f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4c27506835dd0a58ee0a37c4422c44237a344b30","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4c27506835dd0a58ee0a37c4422c44237a344b30","html_url":"https://github.com/apache/bookkeeper/commit/4c27506835dd0a58ee0a37c4422c44237a344b30","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4c27506835dd0a58ee0a37c4422c44237a344b30/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"5c18886657c88f48672554c0f814cf6418ad1e18","url":"https://api.github.com/repos/apache/bookkeeper/commits/5c18886657c88f48672554c0f814cf6418ad1e18","html_url":"https://github.com/apache/bookkeeper/commit/5c18886657c88f48672554c0f814cf6418ad1e18"}]},{"sha":"e824ac2691f4e86ac5ced675cd3ffb66f00e059a","node_id":"MDY6Q29tbWl0MTU3NTk1NjplODI0YWMyNjkxZjRlODZhYzVjZWQ2NzVjZDNmZmI2NmYwMGUwNTlh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-06T10:40:02Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-06T10:40:02Z"},"message":"BOOKKEEPER-744: Run the auditor bookie check periodically (ivank) [missing files]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1592706 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e24bb024196859f12f61bb4cf7f13b1414566896","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e24bb024196859f12f61bb4cf7f13b1414566896"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e824ac2691f4e86ac5ced675cd3ffb66f00e059a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e824ac2691f4e86ac5ced675cd3ffb66f00e059a","html_url":"https://github.com/apache/bookkeeper/commit/e824ac2691f4e86ac5ced675cd3ffb66f00e059a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e824ac2691f4e86ac5ced675cd3ffb66f00e059a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4c27506835dd0a58ee0a37c4422c44237a344b30","url":"https://api.github.com/repos/apache/bookkeeper/commits/4c27506835dd0a58ee0a37c4422c44237a344b30","html_url":"https://github.com/apache/bookkeeper/commit/4c27506835dd0a58ee0a37c4422c44237a344b30"}]},{"sha":"19b821c63b91293960041bca7b031614a109a7b8","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxOWI4MjFjNjNiOTEyOTM5NjAwNDFiY2E3YjAzMTYxNGExMDlhN2I4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-09T12:04:45Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-09T12:04:45Z"},"message":"BOOKKEEPER-629: Support hostname based ledger metadata to help users to change IP with existing installation (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1593518 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8bba00d437cf64434f54ebea8b1508c6da8176f3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8bba00d437cf64434f54ebea8b1508c6da8176f3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/19b821c63b91293960041bca7b031614a109a7b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/19b821c63b91293960041bca7b031614a109a7b8","html_url":"https://github.com/apache/bookkeeper/commit/19b821c63b91293960041bca7b031614a109a7b8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/19b821c63b91293960041bca7b031614a109a7b8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e824ac2691f4e86ac5ced675cd3ffb66f00e059a","url":"https://api.github.com/repos/apache/bookkeeper/commits/e824ac2691f4e86ac5ced675cd3ffb66f00e059a","html_url":"https://github.com/apache/bookkeeper/commit/e824ac2691f4e86ac5ced675cd3ffb66f00e059a"}]},{"sha":"3ed06c0e9246a3ac21e1340d01f1ee7be612194f","node_id":"MDY6Q29tbWl0MTU3NTk1NjozZWQwNmMwZTkyNDZhM2FjMjFlMTM0MGQwMWYxZWU3YmU2MTIxOTRm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-05-12T06:10:00Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-05-12T06:10:00Z"},"message":"BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1593889 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c5ce9abc6c00cc9bab42dd1425301273f68fbd2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6c5ce9abc6c00cc9bab42dd1425301273f68fbd2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3ed06c0e9246a3ac21e1340d01f1ee7be612194f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3ed06c0e9246a3ac21e1340d01f1ee7be612194f","html_url":"https://github.com/apache/bookkeeper/commit/3ed06c0e9246a3ac21e1340d01f1ee7be612194f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"19b821c63b91293960041bca7b031614a109a7b8","url":"https://api.github.com/repos/apache/bookkeeper/commits/19b821c63b91293960041bca7b031614a109a7b8","html_url":"https://github.com/apache/bookkeeper/commit/19b821c63b91293960041bca7b031614a109a7b8"}]},{"sha":"e3594b50f93b881f8ded9fe26c9ae2f875e054ea","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMzU5NGI1MGY5M2I4ODFmOGRlZDlmZTI2YzlhZTJmODc1ZTA1NGVh","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-14T22:41:03Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-14T22:41:03Z"},"message":"BOOKKEEPER-755: Incorrect number of seconds specified in a day (Joseph Redfern via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1594744 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bfc21b2660ebaa224caf0e953309976295f7068","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5bfc21b2660ebaa224caf0e953309976295f7068"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e3594b50f93b881f8ded9fe26c9ae2f875e054ea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e3594b50f93b881f8ded9fe26c9ae2f875e054ea","html_url":"https://github.com/apache/bookkeeper/commit/e3594b50f93b881f8ded9fe26c9ae2f875e054ea","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e3594b50f93b881f8ded9fe26c9ae2f875e054ea/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"3ed06c0e9246a3ac21e1340d01f1ee7be612194f","url":"https://api.github.com/repos/apache/bookkeeper/commits/3ed06c0e9246a3ac21e1340d01f1ee7be612194f","html_url":"https://github.com/apache/bookkeeper/commit/3ed06c0e9246a3ac21e1340d01f1ee7be612194f"}]},{"sha":"151c50dbe992efcaf0fa831dbf829b792b8bb925","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxNTFjNTBkYmU5OTJlZmNhZjBmYTgzMWRiZjgyOWI3OTJiOGJiOTI1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-23T16:46:05Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-23T16:46:05Z"},"message":"BOOKKEEPER-750. Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1597124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8bb61438abab86d0884383c865f5ae451490aa0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c8bb61438abab86d0884383c865f5ae451490aa0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/151c50dbe992efcaf0fa831dbf829b792b8bb925","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/151c50dbe992efcaf0fa831dbf829b792b8bb925","html_url":"https://github.com/apache/bookkeeper/commit/151c50dbe992efcaf0fa831dbf829b792b8bb925","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/151c50dbe992efcaf0fa831dbf829b792b8bb925/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"e3594b50f93b881f8ded9fe26c9ae2f875e054ea","url":"https://api.github.com/repos/apache/bookkeeper/commits/e3594b50f93b881f8ded9fe26c9ae2f875e054ea","html_url":"https://github.com/apache/bookkeeper/commit/e3594b50f93b881f8ded9fe26c9ae2f875e054ea"}]},{"sha":"d67f3a752d291b1f55e5b9597eca6b135d3626ee","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNjdmM2E3NTJkMjkxYjFmNTVlNWI5NTk3ZWNhNmIxMzVkMzYyNmVl","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-23T16:48:11Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-23T16:48:11Z"},"message":"BOOKKEEPER-750. Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank via fpj)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1597125 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"959bdd5a32ad5ef9034b5243afe49fb3eef4328b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/959bdd5a32ad5ef9034b5243afe49fb3eef4328b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d67f3a752d291b1f55e5b9597eca6b135d3626ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d67f3a752d291b1f55e5b9597eca6b135d3626ee","html_url":"https://github.com/apache/bookkeeper/commit/d67f3a752d291b1f55e5b9597eca6b135d3626ee","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d67f3a752d291b1f55e5b9597eca6b135d3626ee/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"151c50dbe992efcaf0fa831dbf829b792b8bb925","url":"https://api.github.com/repos/apache/bookkeeper/commits/151c50dbe992efcaf0fa831dbf829b792b8bb925","html_url":"https://github.com/apache/bookkeeper/commit/151c50dbe992efcaf0fa831dbf829b792b8bb925"}]},{"sha":"ce3abc6e03216563613db23bd8dd11cf58645982","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZTNhYmM2ZTAzMjE2NTYzNjEzZGIyM2JkOGRkMTFjZjU4NjQ1OTgy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-27T11:56:01Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-27T11:56:01Z"},"message":"BOOKKEEPER-756: Use HashedwheelTimer for request timeouts for PCBC (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1597752 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"54478650ccc7acd747f50d16d198ac1e5242dfe3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/54478650ccc7acd747f50d16d198ac1e5242dfe3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ce3abc6e03216563613db23bd8dd11cf58645982","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ce3abc6e03216563613db23bd8dd11cf58645982","html_url":"https://github.com/apache/bookkeeper/commit/ce3abc6e03216563613db23bd8dd11cf58645982","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ce3abc6e03216563613db23bd8dd11cf58645982/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d67f3a752d291b1f55e5b9597eca6b135d3626ee","url":"https://api.github.com/repos/apache/bookkeeper/commits/d67f3a752d291b1f55e5b9597eca6b135d3626ee","html_url":"https://github.com/apache/bookkeeper/commit/d67f3a752d291b1f55e5b9597eca6b135d3626ee"}]},{"sha":"209dbf4982eb997c9691c4331dcaea3b7e4af6d6","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyMDlkYmY0OTgyZWI5OTdjOTY5MWM0MzMxZGNhZWEzYjdlNGFmNmQ2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T10:41:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T10:41:47Z"},"message":"BOOKKEEPER-763: findbugs fails to run on jenkins (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1598541 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7f0c3cdd67ad7b1c18825b35a471fa968ce038e6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7f0c3cdd67ad7b1c18825b35a471fa968ce038e6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/209dbf4982eb997c9691c4331dcaea3b7e4af6d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/209dbf4982eb997c9691c4331dcaea3b7e4af6d6","html_url":"https://github.com/apache/bookkeeper/commit/209dbf4982eb997c9691c4331dcaea3b7e4af6d6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/209dbf4982eb997c9691c4331dcaea3b7e4af6d6/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ce3abc6e03216563613db23bd8dd11cf58645982","url":"https://api.github.com/repos/apache/bookkeeper/commits/ce3abc6e03216563613db23bd8dd11cf58645982","html_url":"https://github.com/apache/bookkeeper/commit/ce3abc6e03216563613db23bd8dd11cf58645982"}]},{"sha":"64d0170510849e29de9762957a7107d1a7f07284","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NGQwMTcwNTEwODQ5ZTI5ZGU5NzYyOTU3YTcxMDdkMWE3ZjA3Mjg0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T12:01:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T12:01:34Z"},"message":"BOOKKEEPER-758: Add TryReadLastAddConfirmed API (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1598565 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f1386f7530cb4c522aa18146e5680575df066096","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f1386f7530cb4c522aa18146e5680575df066096"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/64d0170510849e29de9762957a7107d1a7f07284","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/64d0170510849e29de9762957a7107d1a7f07284","html_url":"https://github.com/apache/bookkeeper/commit/64d0170510849e29de9762957a7107d1a7f07284","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/64d0170510849e29de9762957a7107d1a7f07284/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"209dbf4982eb997c9691c4331dcaea3b7e4af6d6","url":"https://api.github.com/repos/apache/bookkeeper/commits/209dbf4982eb997c9691c4331dcaea3b7e4af6d6","html_url":"https://github.com/apache/bookkeeper/commit/209dbf4982eb997c9691c4331dcaea3b7e4af6d6"}]},{"sha":"d11665de31b5ee6969128062569f2081b5d9cf79","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMTE2NjVkZTMxYjVlZTY5NjkxMjgwNjI1NjlmMjA4MWI1ZDljZjc5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T13:07:14Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T13:07:14Z"},"message":"BOOKKEEPER-751: Ensure all the bookkeeper callbacks not run under ledger handle lock (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1598585 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1af0ee3ef25c2d438f11c88b629e903cdeafdde5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1af0ee3ef25c2d438f11c88b629e903cdeafdde5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d11665de31b5ee6969128062569f2081b5d9cf79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d11665de31b5ee6969128062569f2081b5d9cf79","html_url":"https://github.com/apache/bookkeeper/commit/d11665de31b5ee6969128062569f2081b5d9cf79","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d11665de31b5ee6969128062569f2081b5d9cf79/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"64d0170510849e29de9762957a7107d1a7f07284","url":"https://api.github.com/repos/apache/bookkeeper/commits/64d0170510849e29de9762957a7107d1a7f07284","html_url":"https://github.com/apache/bookkeeper/commit/64d0170510849e29de9762957a7107d1a7f07284"}]},{"sha":"d86917af98c2a7442619f1b71aa6d4d1da5945f4","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkODY5MTdhZjk4YzJhNzQ0MjYxOWYxYjcxYWE2ZDRkMWRhNTk0NWY0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-02T09:54:03Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-02T09:54:03Z"},"message":"BOOKKEEPER-745: Fix for false reports of ledger unreplication during rolling restarts. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1599145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f53e37605d2c0ea391eeb3e5bb9976710a2328f7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f53e37605d2c0ea391eeb3e5bb9976710a2328f7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d86917af98c2a7442619f1b71aa6d4d1da5945f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d86917af98c2a7442619f1b71aa6d4d1da5945f4","html_url":"https://github.com/apache/bookkeeper/commit/d86917af98c2a7442619f1b71aa6d4d1da5945f4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d86917af98c2a7442619f1b71aa6d4d1da5945f4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d11665de31b5ee6969128062569f2081b5d9cf79","url":"https://api.github.com/repos/apache/bookkeeper/commits/d11665de31b5ee6969128062569f2081b5d9cf79","html_url":"https://github.com/apache/bookkeeper/commit/d11665de31b5ee6969128062569f2081b5d9cf79"}]},{"sha":"404b83abafb94b62c0ced2ba7cf6878762643746","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MDRiODNhYmFmYjk0YjYyYzBjZWQyYmE3Y2Y2ODc4NzYyNjQzNzQ2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T10:35:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T10:35:13Z"},"message":"BOOKKEEPER-746: 5 new shell commands. List ledgers, list metadata, list underreplicated, show auditor and simpletest (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1599470 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f724534511c12a86b1847d552c964ec711f3f83f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f724534511c12a86b1847d552c964ec711f3f83f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/404b83abafb94b62c0ced2ba7cf6878762643746","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/404b83abafb94b62c0ced2ba7cf6878762643746","html_url":"https://github.com/apache/bookkeeper/commit/404b83abafb94b62c0ced2ba7cf6878762643746","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/404b83abafb94b62c0ced2ba7cf6878762643746/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d86917af98c2a7442619f1b71aa6d4d1da5945f4","url":"https://api.github.com/repos/apache/bookkeeper/commits/d86917af98c2a7442619f1b71aa6d4d1da5945f4","html_url":"https://github.com/apache/bookkeeper/commit/d86917af98c2a7442619f1b71aa6d4d1da5945f4"}]},{"sha":"68deb96d2d1de45eea0c358c0eab39847d51e1f8","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2OGRlYjk2ZDJkMWRlNDVlZWEwYzM1OGMwZWFiMzk4NDdkNTFlMWY4","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-05T10:56:29Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-05T10:56:29Z"},"message":"BOOKKEEPER-766: Update notice.txt files to include 2014 (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1600594 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e966490e3ddf371d9009412026d2c0be971d2027","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e966490e3ddf371d9009412026d2c0be971d2027"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/68deb96d2d1de45eea0c358c0eab39847d51e1f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/68deb96d2d1de45eea0c358c0eab39847d51e1f8","html_url":"https://github.com/apache/bookkeeper/commit/68deb96d2d1de45eea0c358c0eab39847d51e1f8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/68deb96d2d1de45eea0c358c0eab39847d51e1f8/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"404b83abafb94b62c0ced2ba7cf6878762643746","url":"https://api.github.com/repos/apache/bookkeeper/commits/404b83abafb94b62c0ced2ba7cf6878762643746","html_url":"https://github.com/apache/bookkeeper/commit/404b83abafb94b62c0ced2ba7cf6878762643746"}]},{"sha":"80c6e5526c63409e4f359905d0fd319ac7d2b129","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MGM2ZTU1MjZjNjM0MDllNGYzNTk5MDVkMGZkMzE5YWM3ZDJiMTI5","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-06T13:29:47Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-06T13:29:47Z"},"message":"BOOKKEEPER-767: Allow loopback in tests (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1600881 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3a2c7733cb0f2022f8039e945cd780eaf3f2e15d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3a2c7733cb0f2022f8039e945cd780eaf3f2e15d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/80c6e5526c63409e4f359905d0fd319ac7d2b129","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/80c6e5526c63409e4f359905d0fd319ac7d2b129","html_url":"https://github.com/apache/bookkeeper/commit/80c6e5526c63409e4f359905d0fd319ac7d2b129","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/80c6e5526c63409e4f359905d0fd319ac7d2b129/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"68deb96d2d1de45eea0c358c0eab39847d51e1f8","url":"https://api.github.com/repos/apache/bookkeeper/commits/68deb96d2d1de45eea0c358c0eab39847d51e1f8","html_url":"https://github.com/apache/bookkeeper/commit/68deb96d2d1de45eea0c358c0eab39847d51e1f8"}]},{"sha":"c9db762707538a99a92852e60b88bed577b01377","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjOWRiNzYyNzA3NTM4YTk5YTkyODUyZTYwYjg4YmVkNTc3YjAxMzc3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-10T10:01:45Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-10T10:01:45Z"},"message":"BOOKKEEPER-765 bookkeeper script should fall back to java in path if JAVA_HOME is not set (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1601592 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a993ecd52afc91703df176727a9b7515c4be9037","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a993ecd52afc91703df176727a9b7515c4be9037"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c9db762707538a99a92852e60b88bed577b01377","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c9db762707538a99a92852e60b88bed577b01377","html_url":"https://github.com/apache/bookkeeper/commit/c9db762707538a99a92852e60b88bed577b01377","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c9db762707538a99a92852e60b88bed577b01377/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"80c6e5526c63409e4f359905d0fd319ac7d2b129","url":"https://api.github.com/repos/apache/bookkeeper/commits/80c6e5526c63409e4f359905d0fd319ac7d2b129","html_url":"https://github.com/apache/bookkeeper/commit/80c6e5526c63409e4f359905d0fd319ac7d2b129"}]},{"sha":"37fda574a530eedc6bd3ba5030e2f3e0805c10f8","node_id":"MDY6Q29tbWl0MTU3NTk1NjozN2ZkYTU3NGE1MzBlZWRjNmJkM2JhNTAzMGUyZjNlMDgwNWMxMGY4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-07-15T07:09:21Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-07-15T07:09:21Z"},"message":"BOOKKEEPER-768: fix typo seconds to milliseconds in benchmark output (jialin via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1610596 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c5851aff651d8e627aa2d7b3c7127e9981e04432","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c5851aff651d8e627aa2d7b3c7127e9981e04432"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/37fda574a530eedc6bd3ba5030e2f3e0805c10f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/37fda574a530eedc6bd3ba5030e2f3e0805c10f8","html_url":"https://github.com/apache/bookkeeper/commit/37fda574a530eedc6bd3ba5030e2f3e0805c10f8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/37fda574a530eedc6bd3ba5030e2f3e0805c10f8/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"c9db762707538a99a92852e60b88bed577b01377","url":"https://api.github.com/repos/apache/bookkeeper/commits/c9db762707538a99a92852e60b88bed577b01377","html_url":"https://github.com/apache/bookkeeper/commit/c9db762707538a99a92852e60b88bed577b01377"}]},{"sha":"8f09334e24deaa8e80674a702c498d802986f3c8","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4ZjA5MzM0ZTI0ZGVhYThlODA2NzRhNzAyYzQ5OGQ4MDI5ODZmM2M4","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-07-23T23:41:19Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-07-23T23:41:19Z"},"message":"BOOKKEEPER-739: Test timeouts mostly ignored (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1612972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d6326435122e5b8fb124f603eb94e5c8382c4a00","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d6326435122e5b8fb124f603eb94e5c8382c4a00"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8f09334e24deaa8e80674a702c498d802986f3c8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8f09334e24deaa8e80674a702c498d802986f3c8","html_url":"https://github.com/apache/bookkeeper/commit/8f09334e24deaa8e80674a702c498d802986f3c8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8f09334e24deaa8e80674a702c498d802986f3c8/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"37fda574a530eedc6bd3ba5030e2f3e0805c10f8","url":"https://api.github.com/repos/apache/bookkeeper/commits/37fda574a530eedc6bd3ba5030e2f3e0805c10f8","html_url":"https://github.com/apache/bookkeeper/commit/37fda574a530eedc6bd3ba5030e2f3e0805c10f8"}]},{"sha":"c81076e4d9521bc67653a917e9fb9edbe27bf073","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjODEwNzZlNGQ5NTIxYmM2NzY1M2E5MTdlOWZiOWVkYmUyN2JmMDcz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-07-24T22:34:19Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-07-24T22:34:19Z"},"message":"BOOKKEEPER-582: Make bookie and client use protobuf for requests (non-wire part)\n(sijie via fpj)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1613315 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d83d0e5168bb347efae558c4af8eb106a74d083b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d83d0e5168bb347efae558c4af8eb106a74d083b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c81076e4d9521bc67653a917e9fb9edbe27bf073","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c81076e4d9521bc67653a917e9fb9edbe27bf073","html_url":"https://github.com/apache/bookkeeper/commit/c81076e4d9521bc67653a917e9fb9edbe27bf073","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c81076e4d9521bc67653a917e9fb9edbe27bf073/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"8f09334e24deaa8e80674a702c498d802986f3c8","url":"https://api.github.com/repos/apache/bookkeeper/commits/8f09334e24deaa8e80674a702c498d802986f3c8","html_url":"https://github.com/apache/bookkeeper/commit/8f09334e24deaa8e80674a702c498d802986f3c8"}]},{"sha":"4ec0bf11c3fdb78e390c5c889140d8fbf87ce60b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZWMwYmYxMWMzZmRiNzhlMzkwYzVjODg5MTQwZDhmYmY4N2NlNjBi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-07-26T06:51:52Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-07-26T06:51:52Z"},"message":"BOOKKEEPER-582: Make bookie and client use protobuf for requests (non-wire part) (missing files) (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1613567 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb3d529171231dd617cb8662d41bb902f4a3ce8f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/eb3d529171231dd617cb8662d41bb902f4a3ce8f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4ec0bf11c3fdb78e390c5c889140d8fbf87ce60b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4ec0bf11c3fdb78e390c5c889140d8fbf87ce60b","html_url":"https://github.com/apache/bookkeeper/commit/4ec0bf11c3fdb78e390c5c889140d8fbf87ce60b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4ec0bf11c3fdb78e390c5c889140d8fbf87ce60b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"c81076e4d9521bc67653a917e9fb9edbe27bf073","url":"https://api.github.com/repos/apache/bookkeeper/commits/c81076e4d9521bc67653a917e9fb9edbe27bf073","html_url":"https://github.com/apache/bookkeeper/commit/c81076e4d9521bc67653a917e9fb9edbe27bf073"}]},{"sha":"69620e6561196975295752175b01354877a9fdde","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2OTYyMGU2NTYxMTk2OTc1Mjk1NzUyMTc1YjAxMzU0ODc3YTlmZGRl","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-08-02T18:02:06Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-08-02T18:02:06Z"},"message":"BOOKEEPER-697. stats collection on bookkeeper server (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1615338 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d73e6050bec15c1a02f072bf7bf842464d3258f3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d73e6050bec15c1a02f072bf7bf842464d3258f3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/69620e6561196975295752175b01354877a9fdde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/69620e6561196975295752175b01354877a9fdde","html_url":"https://github.com/apache/bookkeeper/commit/69620e6561196975295752175b01354877a9fdde","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/69620e6561196975295752175b01354877a9fdde/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"4ec0bf11c3fdb78e390c5c889140d8fbf87ce60b","url":"https://api.github.com/repos/apache/bookkeeper/commits/4ec0bf11c3fdb78e390c5c889140d8fbf87ce60b","html_url":"https://github.com/apache/bookkeeper/commit/4ec0bf11c3fdb78e390c5c889140d8fbf87ce60b"}]},{"sha":"e30e116fc65088aad428b4151e1ab39c73c99676","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMzBlMTE2ZmM2NTA4OGFhZDQyOGI0MTUxZTFhYjM5YzczYzk5Njc2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-08-06T04:48:42Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-08-06T04:48:42Z"},"message":"BOOKKEEPER-697: stats collection on bookkeeper server (sijie via fpj) (missing file)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1616094 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bfd06cffa13e6aad5f9de2cebdcfd6b4005d4b1c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bfd06cffa13e6aad5f9de2cebdcfd6b4005d4b1c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e30e116fc65088aad428b4151e1ab39c73c99676","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e30e116fc65088aad428b4151e1ab39c73c99676","html_url":"https://github.com/apache/bookkeeper/commit/e30e116fc65088aad428b4151e1ab39c73c99676","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e30e116fc65088aad428b4151e1ab39c73c99676/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"69620e6561196975295752175b01354877a9fdde","url":"https://api.github.com/repos/apache/bookkeeper/commits/69620e6561196975295752175b01354877a9fdde","html_url":"https://github.com/apache/bookkeeper/commit/69620e6561196975295752175b01354877a9fdde"}]},{"sha":"b6f33e49d0671a5b982bcb3613c5c9844f6aec8b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiNmYzM2U0OWQwNjcxYTViOTgyYmNiMzYxM2M1Yzk4NDRmNmFlYzhi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-08-14T06:15:59Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-08-14T06:15:59Z"},"message":"BOOKKEEPER-774: Flaky test org.apache.bookkeeper.test.ReadOnlyBookieTest.testBookieShouldTurnWritableFromReadOnly (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1617888 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"54068cbff5cad0ecf2c63aba8f4af47121c3eef5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/54068cbff5cad0ecf2c63aba8f4af47121c3eef5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b6f33e49d0671a5b982bcb3613c5c9844f6aec8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b6f33e49d0671a5b982bcb3613c5c9844f6aec8b","html_url":"https://github.com/apache/bookkeeper/commit/b6f33e49d0671a5b982bcb3613c5c9844f6aec8b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b6f33e49d0671a5b982bcb3613c5c9844f6aec8b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"e30e116fc65088aad428b4151e1ab39c73c99676","url":"https://api.github.com/repos/apache/bookkeeper/commits/e30e116fc65088aad428b4151e1ab39c73c99676","html_url":"https://github.com/apache/bookkeeper/commit/e30e116fc65088aad428b4151e1ab39c73c99676"}]},{"sha":"38a6fd30048c5fe165409a9ca536fb1ffbdbf537","node_id":"MDY6Q29tbWl0MTU3NTk1NjozOGE2ZmQzMDA0OGM1ZmUxNjU0MDlhOWNhNTM2ZmIxZmZiZGJmNTM3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-08-18T21:00:15Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-08-18T21:00:15Z"},"message":"BOOKKEEPER-704: reconnectable zookeeper client wrapper (sijie via ivank)\n\nChange-Id: I00c73788f4ed5911713906b4d7622ca6dcec79a5\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1618732 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b362c62c00a7277182ac8d8feeec09d4ed5bd3b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3b362c62c00a7277182ac8d8feeec09d4ed5bd3b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/38a6fd30048c5fe165409a9ca536fb1ffbdbf537","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/38a6fd30048c5fe165409a9ca536fb1ffbdbf537","html_url":"https://github.com/apache/bookkeeper/commit/38a6fd30048c5fe165409a9ca536fb1ffbdbf537","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/38a6fd30048c5fe165409a9ca536fb1ffbdbf537/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b6f33e49d0671a5b982bcb3613c5c9844f6aec8b","url":"https://api.github.com/repos/apache/bookkeeper/commits/b6f33e49d0671a5b982bcb3613c5c9844f6aec8b","html_url":"https://github.com/apache/bookkeeper/commit/b6f33e49d0671a5b982bcb3613c5c9844f6aec8b"}]},{"sha":"c0cef66c6b34c635ec69a69ef033f96600ca5b99","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMGNlZjY2YzZiMzRjNjM1ZWM2OWE2OWVmMDMzZjk2NjAwY2E1Yjk5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-08-18T21:03:41Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-08-18T21:03:41Z"},"message":"BOOKKEEPER-630: Add tag to o.a.b.net.* to indict which release of hadoop they came from, move DNS to o.a.b.net.* and indent (sijie via ivank)\n\nChange-Id: I9dd16912da6f23543d069434e9419495fdf8f314\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1618737 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f90bea53214cda44705431243cc3c99f96fc1bc4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f90bea53214cda44705431243cc3c99f96fc1bc4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c0cef66c6b34c635ec69a69ef033f96600ca5b99","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c0cef66c6b34c635ec69a69ef033f96600ca5b99","html_url":"https://github.com/apache/bookkeeper/commit/c0cef66c6b34c635ec69a69ef033f96600ca5b99","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c0cef66c6b34c635ec69a69ef033f96600ca5b99/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"38a6fd30048c5fe165409a9ca536fb1ffbdbf537","url":"https://api.github.com/repos/apache/bookkeeper/commits/38a6fd30048c5fe165409a9ca536fb1ffbdbf537","html_url":"https://github.com/apache/bookkeeper/commit/38a6fd30048c5fe165409a9ca536fb1ffbdbf537"}]},{"sha":"e61a1968c488a7517912be69e5d2cc98eb421040","node_id":"MDY6Q29tbWl0MTU3NTk1NjplNjFhMTk2OGM0ODhhNzUxNzkxMmJlNjllNWQyY2M5OGViNDIxMDQw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-08-19T08:32:23Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-08-19T08:32:23Z"},"message":"BOOKKEEPER-704: reconnectable zookeeper client wrapper (sijie via ivank) [missing file]\n\nChange-Id: I46cf3237ec5e1998039fedee9d127752c1389a73\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1618817 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ade001338a80cd9b191a1a55a6d11cacfb02724","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7ade001338a80cd9b191a1a55a6d11cacfb02724"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e61a1968c488a7517912be69e5d2cc98eb421040","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e61a1968c488a7517912be69e5d2cc98eb421040","html_url":"https://github.com/apache/bookkeeper/commit/e61a1968c488a7517912be69e5d2cc98eb421040","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e61a1968c488a7517912be69e5d2cc98eb421040/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c0cef66c6b34c635ec69a69ef033f96600ca5b99","url":"https://api.github.com/repos/apache/bookkeeper/commits/c0cef66c6b34c635ec69a69ef033f96600ca5b99","html_url":"https://github.com/apache/bookkeeper/commit/c0cef66c6b34c635ec69a69ef033f96600ca5b99"}]},{"sha":"0c96765dffe3850ae6fc80397f9bc221421f1fa3","node_id":"MDY6Q29tbWl0MTU3NTk1NjowYzk2NzY1ZGZmZTM4NTBhZTZmYzgwMzk3ZjliYzIyMTQyMWYxZmEz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-04T21:49:31Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-04T21:49:31Z"},"message":"BOOKKEEPER-780: Findbug issue in trunk (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1622568 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58d7f8da82f43d3f27b1cfb7df27ef7e45b29689","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/58d7f8da82f43d3f27b1cfb7df27ef7e45b29689"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0c96765dffe3850ae6fc80397f9bc221421f1fa3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0c96765dffe3850ae6fc80397f9bc221421f1fa3","html_url":"https://github.com/apache/bookkeeper/commit/0c96765dffe3850ae6fc80397f9bc221421f1fa3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0c96765dffe3850ae6fc80397f9bc221421f1fa3/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"e61a1968c488a7517912be69e5d2cc98eb421040","url":"https://api.github.com/repos/apache/bookkeeper/commits/e61a1968c488a7517912be69e5d2cc98eb421040","html_url":"https://github.com/apache/bookkeeper/commit/e61a1968c488a7517912be69e5d2cc98eb421040"}]},{"sha":"8f81eba34d2af8444be9f713447e12f4387e5932","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4ZjgxZWJhMzRkMmFmODQ0NGJlOWY3MTM0NDdlMTJmNDM4N2U1OTMy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:13:53Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:13:53Z"},"message":"BOOKKEEPER-777: Flake in LedgerCloseTest (ivank via fpj)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1622827 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b0609b8b5e5d3ccef6ae0d93f002efd5755795db","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b0609b8b5e5d3ccef6ae0d93f002efd5755795db"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8f81eba34d2af8444be9f713447e12f4387e5932","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8f81eba34d2af8444be9f713447e12f4387e5932","html_url":"https://github.com/apache/bookkeeper/commit/8f81eba34d2af8444be9f713447e12f4387e5932","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8f81eba34d2af8444be9f713447e12f4387e5932/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"0c96765dffe3850ae6fc80397f9bc221421f1fa3","url":"https://api.github.com/repos/apache/bookkeeper/commits/0c96765dffe3850ae6fc80397f9bc221421f1fa3","html_url":"https://github.com/apache/bookkeeper/commit/0c96765dffe3850ae6fc80397f9bc221421f1fa3"}]},{"sha":"fd6835e4f06d3cbb6a33062f582e4756d0a3139b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmZDY4MzVlNGYwNmQzY2JiNmEzMzA2MmY1ODJlNDc1NmQwYTMxMzli","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:27:02Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:27:02Z"},"message":"BOOKKEEPER-779: jmx reporter for codahale metrics provider (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1622828 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"419bc810b2d3d011efc5e9a70dfbbae487973b35","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/419bc810b2d3d011efc5e9a70dfbbae487973b35"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fd6835e4f06d3cbb6a33062f582e4756d0a3139b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fd6835e4f06d3cbb6a33062f582e4756d0a3139b","html_url":"https://github.com/apache/bookkeeper/commit/fd6835e4f06d3cbb6a33062f582e4756d0a3139b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fd6835e4f06d3cbb6a33062f582e4756d0a3139b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8f81eba34d2af8444be9f713447e12f4387e5932","url":"https://api.github.com/repos/apache/bookkeeper/commits/8f81eba34d2af8444be9f713447e12f4387e5932","html_url":"https://github.com/apache/bookkeeper/commit/8f81eba34d2af8444be9f713447e12f4387e5932"}]},{"sha":"8abec018fca57d9cee9efd13a7085d8808a3b57e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4YWJlYzAxOGZjYTU3ZDljZWU5ZWZkMTNhNzA4NWQ4ODA4YTNiNTdl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:51:08Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:51:08Z"},"message":"BOOKKEEPER-718: AuditorLedgerCheckerTest is flakey (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1622830 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1bac5d50ce5d98e7133c7cbfbf5095ca3f7f9e7f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1bac5d50ce5d98e7133c7cbfbf5095ca3f7f9e7f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8abec018fca57d9cee9efd13a7085d8808a3b57e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8abec018fca57d9cee9efd13a7085d8808a3b57e","html_url":"https://github.com/apache/bookkeeper/commit/8abec018fca57d9cee9efd13a7085d8808a3b57e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8abec018fca57d9cee9efd13a7085d8808a3b57e/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"fd6835e4f06d3cbb6a33062f582e4756d0a3139b","url":"https://api.github.com/repos/apache/bookkeeper/commits/fd6835e4f06d3cbb6a33062f582e4756d0a3139b","html_url":"https://github.com/apache/bookkeeper/commit/fd6835e4f06d3cbb6a33062f582e4756d0a3139b"}]},{"sha":"6fe9f6349443aaa193749e7d436a7aaca30d3ccd","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ZmU5ZjYzNDk0NDNhYWExOTM3NDllN2Q0MzZhN2FhY2EzMGQzY2Nk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:58:47Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:58:47Z"},"message":"BOOKKEEPER-736: Stats for AutoRecovery (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1622832 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f941e722790e145726db0ad505c750cad8b6323","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8f941e722790e145726db0ad505c750cad8b6323"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6fe9f6349443aaa193749e7d436a7aaca30d3ccd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6fe9f6349443aaa193749e7d436a7aaca30d3ccd","html_url":"https://github.com/apache/bookkeeper/commit/6fe9f6349443aaa193749e7d436a7aaca30d3ccd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8abec018fca57d9cee9efd13a7085d8808a3b57e","url":"https://api.github.com/repos/apache/bookkeeper/commits/8abec018fca57d9cee9efd13a7085d8808a3b57e","html_url":"https://github.com/apache/bookkeeper/commit/8abec018fca57d9cee9efd13a7085d8808a3b57e"}]},{"sha":"caf9ef945c93833f8cbc3bb0e6e451e1e58855cb","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjYWY5ZWY5NDVjOTM4MzNmOGNiYzNiYjBlNmU0NTFlMWU1ODg1NWNi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-09T03:57:10Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-09T03:57:10Z"},"message":"BOOKKEEPER-778: Flake in TestTryReadLastConfirmed (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1623618 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db2663f57ac7db9042a38318ffe7ba22060764b2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/db2663f57ac7db9042a38318ffe7ba22060764b2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/caf9ef945c93833f8cbc3bb0e6e451e1e58855cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/caf9ef945c93833f8cbc3bb0e6e451e1e58855cb","html_url":"https://github.com/apache/bookkeeper/commit/caf9ef945c93833f8cbc3bb0e6e451e1e58855cb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/caf9ef945c93833f8cbc3bb0e6e451e1e58855cb/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"6fe9f6349443aaa193749e7d436a7aaca30d3ccd","url":"https://api.github.com/repos/apache/bookkeeper/commits/6fe9f6349443aaa193749e7d436a7aaca30d3ccd","html_url":"https://github.com/apache/bookkeeper/commit/6fe9f6349443aaa193749e7d436a7aaca30d3ccd"}]},{"sha":"2e1346c5fb6f8641f23dd926e1626211657be2ca","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZTEzNDZjNWZiNmY4NjQxZjIzZGQ5MjZlMTYyNjIxMTY1N2JlMmNh","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-09T09:03:00Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-09T09:03:00Z"},"message":"BOOKKEEPER-781: Fix OOM on Hedwig Tests (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1623713 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5726478141815aa0975f8644842182d966b11f90","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5726478141815aa0975f8644842182d966b11f90"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2e1346c5fb6f8641f23dd926e1626211657be2ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2e1346c5fb6f8641f23dd926e1626211657be2ca","html_url":"https://github.com/apache/bookkeeper/commit/2e1346c5fb6f8641f23dd926e1626211657be2ca","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2e1346c5fb6f8641f23dd926e1626211657be2ca/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"caf9ef945c93833f8cbc3bb0e6e451e1e58855cb","url":"https://api.github.com/repos/apache/bookkeeper/commits/caf9ef945c93833f8cbc3bb0e6e451e1e58855cb","html_url":"https://github.com/apache/bookkeeper/commit/caf9ef945c93833f8cbc3bb0e6e451e1e58855cb"}]},{"sha":"fb6324b064e5b367d48d59fc44381462431d500a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYjYzMjRiMDY0ZTViMzY3ZDQ4ZDU5ZmM0NDM4MTQ2MjQzMWQ1MDBh","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-09T10:40:01Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-09T10:40:01Z"},"message":"BOOKKEEPER-776: Flaky test BookieRecoveryTest (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1623741 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"26e371ae4f6f369fc133e0047db807625898368b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/26e371ae4f6f369fc133e0047db807625898368b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fb6324b064e5b367d48d59fc44381462431d500a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fb6324b064e5b367d48d59fc44381462431d500a","html_url":"https://github.com/apache/bookkeeper/commit/fb6324b064e5b367d48d59fc44381462431d500a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fb6324b064e5b367d48d59fc44381462431d500a/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"2e1346c5fb6f8641f23dd926e1626211657be2ca","url":"https://api.github.com/repos/apache/bookkeeper/commits/2e1346c5fb6f8641f23dd926e1626211657be2ca","html_url":"https://github.com/apache/bookkeeper/commit/2e1346c5fb6f8641f23dd926e1626211657be2ca"}]},{"sha":"77e68b5b033f306f8575b66278e8765784394413","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3N2U2OGI1YjAzM2YzMDZmODU3NWI2NjI3OGU4NzY1Nzg0Mzk0NDEz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-10T22:41:28Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-10T22:41:28Z"},"message":"BOOKKEEPER-775: Improve MultipleThreadReadTest to reduce flakiness (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1624161 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4815d61e2601c872c2054d283f6338e3791ac9f7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4815d61e2601c872c2054d283f6338e3791ac9f7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/77e68b5b033f306f8575b66278e8765784394413","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/77e68b5b033f306f8575b66278e8765784394413","html_url":"https://github.com/apache/bookkeeper/commit/77e68b5b033f306f8575b66278e8765784394413","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/77e68b5b033f306f8575b66278e8765784394413/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"fb6324b064e5b367d48d59fc44381462431d500a","url":"https://api.github.com/repos/apache/bookkeeper/commits/fb6324b064e5b367d48d59fc44381462431d500a","html_url":"https://github.com/apache/bookkeeper/commit/fb6324b064e5b367d48d59fc44381462431d500a"}]},{"sha":"c918051659f9f9231989531304a0a0a15f0f939e","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjOTE4MDUxNjU5ZjlmOTIzMTk4OTUzMTMwNGEwYTBhMTVmMGY5Mzll","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-17T14:32:48Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-17T14:32:48Z"},"message":"BOOKKEEPER-783: Avoid running out of fds in MutlipleThreadReadTest (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1625611 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58919cc76ab9df32c27ec078a8be67460b0520ed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/58919cc76ab9df32c27ec078a8be67460b0520ed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c918051659f9f9231989531304a0a0a15f0f939e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c918051659f9f9231989531304a0a0a15f0f939e","html_url":"https://github.com/apache/bookkeeper/commit/c918051659f9f9231989531304a0a0a15f0f939e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c918051659f9f9231989531304a0a0a15f0f939e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"77e68b5b033f306f8575b66278e8765784394413","url":"https://api.github.com/repos/apache/bookkeeper/commits/77e68b5b033f306f8575b66278e8765784394413","html_url":"https://github.com/apache/bookkeeper/commit/77e68b5b033f306f8575b66278e8765784394413"}]},{"sha":"4f0e52d027ed277576344ecbde1938ed3eeb7aae","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZjBlNTJkMDI3ZWQyNzc1NzYzNDRlY2JkZTE5MzhlZDNlZWI3YWFl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:47:22Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:47:22Z"},"message":"BOOKKEEPER-785: Fix javadoc warnings in trunk (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1625885 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79151a5f7ca8980ec6f32ccd58c127d8368315ac","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/79151a5f7ca8980ec6f32ccd58c127d8368315ac"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4f0e52d027ed277576344ecbde1938ed3eeb7aae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4f0e52d027ed277576344ecbde1938ed3eeb7aae","html_url":"https://github.com/apache/bookkeeper/commit/4f0e52d027ed277576344ecbde1938ed3eeb7aae","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4f0e52d027ed277576344ecbde1938ed3eeb7aae/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"c918051659f9f9231989531304a0a0a15f0f939e","url":"https://api.github.com/repos/apache/bookkeeper/commits/c918051659f9f9231989531304a0a0a15f0f939e","html_url":"https://github.com/apache/bookkeeper/commit/c918051659f9f9231989531304a0a0a15f0f939e"}]},{"sha":"4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YTIxNzRhOTFmYmQ2Yjg1ZmVkNjQwZWY1OGYxYzk4ZmQyOGVlMmQ0","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:53:21Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:53:21Z"},"message":"BOOKKEEPER-784: BookKeeperCloseTest#testLedgerCheck is failing intermittently (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1625886 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f550195f97d1428d45776989b7298ff27889ad0f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f550195f97d1428d45776989b7298ff27889ad0f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4","html_url":"https://github.com/apache/bookkeeper/commit/4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4f0e52d027ed277576344ecbde1938ed3eeb7aae","url":"https://api.github.com/repos/apache/bookkeeper/commits/4f0e52d027ed277576344ecbde1938ed3eeb7aae","html_url":"https://github.com/apache/bookkeeper/commit/4f0e52d027ed277576344ecbde1938ed3eeb7aae"}]},{"sha":"86480a21d366210eec96a7f47f2d43f1313705cc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4NjQ4MGEyMWQzNjYyMTBlZWM5NmE3ZjQ3ZjJkNDNmMTMxMzcwNWNj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:57:17Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:57:17Z"},"message":"BOOKKEEPER-782: Use builder pattern for Cookie (rakeshr via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1625888 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e2037712e927654eab4f912586c244f51f5764d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1e2037712e927654eab4f912586c244f51f5764d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/86480a21d366210eec96a7f47f2d43f1313705cc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/86480a21d366210eec96a7f47f2d43f1313705cc","html_url":"https://github.com/apache/bookkeeper/commit/86480a21d366210eec96a7f47f2d43f1313705cc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/86480a21d366210eec96a7f47f2d43f1313705cc/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4","url":"https://api.github.com/repos/apache/bookkeeper/commits/4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4","html_url":"https://github.com/apache/bookkeeper/commit/4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4"}]},{"sha":"36478d1e639ba099cc4256ca2b2fbcc98f7649dd","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNjQ3OGQxZTYzOWJhMDk5Y2M0MjU2Y2EyYjJmYmNjOThmNzY0OWRk","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-22T10:11:35Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-09-22T10:11:35Z"},"message":"BOOKKEEPER-786: Fix Findbugs Error In Codahale Stats Provider (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1626721 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"84ab16ad4e13df6c4cb8e91d9732e3b48c20fcb2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/84ab16ad4e13df6c4cb8e91d9732e3b48c20fcb2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/36478d1e639ba099cc4256ca2b2fbcc98f7649dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/36478d1e639ba099cc4256ca2b2fbcc98f7649dd","html_url":"https://github.com/apache/bookkeeper/commit/36478d1e639ba099cc4256ca2b2fbcc98f7649dd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/36478d1e639ba099cc4256ca2b2fbcc98f7649dd/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"86480a21d366210eec96a7f47f2d43f1313705cc","url":"https://api.github.com/repos/apache/bookkeeper/commits/86480a21d366210eec96a7f47f2d43f1313705cc","html_url":"https://github.com/apache/bookkeeper/commit/86480a21d366210eec96a7f47f2d43f1313705cc"}]},{"sha":"479cb452d43785c88c729934e079d5ca4939ba90","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NzljYjQ1MmQ0Mzc4NWM4OGM3Mjk5MzRlMDc5ZDVjYTQ5MzliYTkw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-23T15:53:40Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-23T15:53:40Z"},"message":"BOOKKEEPER-787: Modify Cookie by removing 'znodeVersion' state/field (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1627068 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e32161c852941e52259d0cda716be2e7035dbf61","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e32161c852941e52259d0cda716be2e7035dbf61"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/479cb452d43785c88c729934e079d5ca4939ba90","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/479cb452d43785c88c729934e079d5ca4939ba90","html_url":"https://github.com/apache/bookkeeper/commit/479cb452d43785c88c729934e079d5ca4939ba90","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/479cb452d43785c88c729934e079d5ca4939ba90/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"36478d1e639ba099cc4256ca2b2fbcc98f7649dd","url":"https://api.github.com/repos/apache/bookkeeper/commits/36478d1e639ba099cc4256ca2b2fbcc98f7649dd","html_url":"https://github.com/apache/bookkeeper/commit/36478d1e639ba099cc4256ca2b2fbcc98f7649dd"}]},{"sha":"2d630bbd594de7a79afbf227ed41f84484a527f5","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZDYzMGJiZDU5NGRlN2E3OWFmYmYyMjdlZDQxZjg0NDg0YTUyN2Y1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-29T14:29:22Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-29T14:29:22Z"},"message":"BOOKKEEPER-773: Provide admin tool to rename bookie identifier in Cookies (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1628193 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a202b0ee67ea0809efbbe3a6f78c58b86b3ca2e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4a202b0ee67ea0809efbbe3a6f78c58b86b3ca2e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2d630bbd594de7a79afbf227ed41f84484a527f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2d630bbd594de7a79afbf227ed41f84484a527f5","html_url":"https://github.com/apache/bookkeeper/commit/2d630bbd594de7a79afbf227ed41f84484a527f5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2d630bbd594de7a79afbf227ed41f84484a527f5/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"479cb452d43785c88c729934e079d5ca4939ba90","url":"https://api.github.com/repos/apache/bookkeeper/commits/479cb452d43785c88c729934e079d5ca4939ba90","html_url":"https://github.com/apache/bookkeeper/commit/479cb452d43785c88c729934e079d5ca4939ba90"}]},{"sha":"643992144d17297d2a5a8414f0a1e106d0fc8b99","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NDM5OTIxNDRkMTcyOTdkMmE1YTg0MTRmMGExZTEwNmQwZmM4Yjk5","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-03T07:21:37Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-03T07:21:37Z"},"message":"Preparing for release 4.3.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1629124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"763fac2fca02cf4c7f45cfcc6153a3c84de043b4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/763fac2fca02cf4c7f45cfcc6153a3c84de043b4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/643992144d17297d2a5a8414f0a1e106d0fc8b99","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/643992144d17297d2a5a8414f0a1e106d0fc8b99","html_url":"https://github.com/apache/bookkeeper/commit/643992144d17297d2a5a8414f0a1e106d0fc8b99","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/643992144d17297d2a5a8414f0a1e106d0fc8b99/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"2d630bbd594de7a79afbf227ed41f84484a527f5","url":"https://api.github.com/repos/apache/bookkeeper/commits/2d630bbd594de7a79afbf227ed41f84484a527f5","html_url":"https://github.com/apache/bookkeeper/commit/2d630bbd594de7a79afbf227ed41f84484a527f5"}]},{"sha":"34153410bf8d1229d02f64d17c1a3ac6e58a638b","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNDE1MzQxMGJmOGQxMjI5ZDAyZjY0ZDE3YzFhM2FjNmU1OGE2Mzhi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-03T07:22:30Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-03T07:22:30Z"},"message":"Branching for 4.3 releases\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.3@1629125 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"763fac2fca02cf4c7f45cfcc6153a3c84de043b4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/763fac2fca02cf4c7f45cfcc6153a3c84de043b4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/34153410bf8d1229d02f64d17c1a3ac6e58a638b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/34153410bf8d1229d02f64d17c1a3ac6e58a638b","html_url":"https://github.com/apache/bookkeeper/commit/34153410bf8d1229d02f64d17c1a3ac6e58a638b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/34153410bf8d1229d02f64d17c1a3ac6e58a638b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"643992144d17297d2a5a8414f0a1e106d0fc8b99","url":"https://api.github.com/repos/apache/bookkeeper/commits/643992144d17297d2a5a8414f0a1e106d0fc8b99","html_url":"https://github.com/apache/bookkeeper/commit/643992144d17297d2a5a8414f0a1e106d0fc8b99"}]},{"sha":"d486623b7f4be7aab991bb6b67a6c0d8ba1b13da","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNDg2NjIzYjdmNGJlN2FhYjk5MWJiNmI2N2E2YzBkOGJhMWIxM2Rh","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-03T07:26:44Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-03T07:26:44Z"},"message":"Update release version 4.3.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.3@1629126 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80cab6f26bf2ac6382fe97f335bfd8427516aaf7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/80cab6f26bf2ac6382fe97f335bfd8427516aaf7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d486623b7f4be7aab991bb6b67a6c0d8ba1b13da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d486623b7f4be7aab991bb6b67a6c0d8ba1b13da","html_url":"https://github.com/apache/bookkeeper/commit/d486623b7f4be7aab991bb6b67a6c0d8ba1b13da","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d486623b7f4be7aab991bb6b67a6c0d8ba1b13da/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"34153410bf8d1229d02f64d17c1a3ac6e58a638b","url":"https://api.github.com/repos/apache/bookkeeper/commits/34153410bf8d1229d02f64d17c1a3ac6e58a638b","html_url":"https://github.com/apache/bookkeeper/commit/34153410bf8d1229d02f64d17c1a3ac6e58a638b"}]},{"sha":"546bd57d4e80290815300868464acf9e9351702b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NDZiZDU3ZDRlODAyOTA4MTUzMDA4Njg0NjRhY2Y5ZTkzNTE3MDJi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-03T08:49:29Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-03T08:49:29Z"},"message":"BookKeeper 4.3.0 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.3.0@1629145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80cab6f26bf2ac6382fe97f335bfd8427516aaf7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/80cab6f26bf2ac6382fe97f335bfd8427516aaf7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/546bd57d4e80290815300868464acf9e9351702b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/546bd57d4e80290815300868464acf9e9351702b","html_url":"https://github.com/apache/bookkeeper/commit/546bd57d4e80290815300868464acf9e9351702b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/546bd57d4e80290815300868464acf9e9351702b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d486623b7f4be7aab991bb6b67a6c0d8ba1b13da","url":"https://api.github.com/repos/apache/bookkeeper/commits/d486623b7f4be7aab991bb6b67a6c0d8ba1b13da","html_url":"https://github.com/apache/bookkeeper/commit/d486623b7f4be7aab991bb6b67a6c0d8ba1b13da"}]},{"sha":"1ac93878b9cb3f0371ae573481ce6415b6bc0ebf","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxYWM5Mzg3OGI5Y2IzZjAzNzFhZTU3MzQ4MWNlNjQxNWI2YmMwZWJm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T08:41:10Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T08:41:10Z"},"message":"BOOKKEEPER-790: Add JNA license in NOTICE files (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.3@1630029 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aec28550ffbccbb12f76f0027104bdd499239561","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/aec28550ffbccbb12f76f0027104bdd499239561"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1ac93878b9cb3f0371ae573481ce6415b6bc0ebf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1ac93878b9cb3f0371ae573481ce6415b6bc0ebf","html_url":"https://github.com/apache/bookkeeper/commit/1ac93878b9cb3f0371ae573481ce6415b6bc0ebf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1ac93878b9cb3f0371ae573481ce6415b6bc0ebf/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d486623b7f4be7aab991bb6b67a6c0d8ba1b13da","url":"https://api.github.com/repos/apache/bookkeeper/commits/d486623b7f4be7aab991bb6b67a6c0d8ba1b13da","html_url":"https://github.com/apache/bookkeeper/commit/d486623b7f4be7aab991bb6b67a6c0d8ba1b13da"}]},{"sha":"946fa5446138eb077ab1c5283a545b7b1b932f52","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NDZmYTU0NDYxMzhlYjA3N2FiMWM1MjgzYTU0NWI3YjFiOTMyZjUy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T08:43:26Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T08:43:26Z"},"message":"BOOKKEEPER-789: Update README to reflect bookkeeper modules (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.3@1630031 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b22b005a758b3c811347ddf4272c5336353d634","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3b22b005a758b3c811347ddf4272c5336353d634"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/946fa5446138eb077ab1c5283a545b7b1b932f52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/946fa5446138eb077ab1c5283a545b7b1b932f52","html_url":"https://github.com/apache/bookkeeper/commit/946fa5446138eb077ab1c5283a545b7b1b932f52","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/946fa5446138eb077ab1c5283a545b7b1b932f52/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"1ac93878b9cb3f0371ae573481ce6415b6bc0ebf","url":"https://api.github.com/repos/apache/bookkeeper/commits/1ac93878b9cb3f0371ae573481ce6415b6bc0ebf","html_url":"https://github.com/apache/bookkeeper/commit/1ac93878b9cb3f0371ae573481ce6415b6bc0ebf"}]},{"sha":"d6c94da5751258c7868c7fd3232bafaf55090af9","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNmM5NGRhNTc1MTI1OGM3ODY4YzdmZDMyMzJiYWZhZjU1MDkwYWY5","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T09:08:17Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T09:08:17Z"},"message":"BookKeeper 4.3.0 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.3.0@1630038 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0444ea6874c3f1003e7c49d1c941cf908093e83f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0444ea6874c3f1003e7c49d1c941cf908093e83f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d6c94da5751258c7868c7fd3232bafaf55090af9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d6c94da5751258c7868c7fd3232bafaf55090af9","html_url":"https://github.com/apache/bookkeeper/commit/d6c94da5751258c7868c7fd3232bafaf55090af9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d6c94da5751258c7868c7fd3232bafaf55090af9/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"546bd57d4e80290815300868464acf9e9351702b","url":"https://api.github.com/repos/apache/bookkeeper/commits/546bd57d4e80290815300868464acf9e9351702b","html_url":"https://github.com/apache/bookkeeper/commit/546bd57d4e80290815300868464acf9e9351702b"}]},{"sha":"5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1ZDQ0Y2Q4NGYwZTBmZGQ5ODk1ZWJkMWJmNzM0M2M4M2JjNDg5MGNi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T09:27:14Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T09:27:14Z"},"message":"undo bad copy\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.3.0@1630040 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80cab6f26bf2ac6382fe97f335bfd8427516aaf7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/80cab6f26bf2ac6382fe97f335bfd8427516aaf7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","html_url":"https://github.com/apache/bookkeeper/commit/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d6c94da5751258c7868c7fd3232bafaf55090af9","url":"https://api.github.com/repos/apache/bookkeeper/commits/d6c94da5751258c7868c7fd3232bafaf55090af9","html_url":"https://github.com/apache/bookkeeper/commit/d6c94da5751258c7868c7fd3232bafaf55090af9"}]},{"sha":"9474696ffcaf073f086838d6cce19c1b8245bff3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NDc0Njk2ZmZjYWYwNzNmMDg2ODM4ZDZjY2UxOWMxYjgyNDViZmYz","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T09:35:37Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T09:35:37Z"},"message":"BookKeeper 4.3.0 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.3.0@1630047 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b22b005a758b3c811347ddf4272c5336353d634","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3b22b005a758b3c811347ddf4272c5336353d634"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9474696ffcaf073f086838d6cce19c1b8245bff3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9474696ffcaf073f086838d6cce19c1b8245bff3","html_url":"https://github.com/apache/bookkeeper/commit/9474696ffcaf073f086838d6cce19c1b8245bff3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9474696ffcaf073f086838d6cce19c1b8245bff3/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","url":"https://api.github.com/repos/apache/bookkeeper/commits/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","html_url":"https://github.com/apache/bookkeeper/commit/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb"},{"sha":"946fa5446138eb077ab1c5283a545b7b1b932f52","url":"https://api.github.com/repos/apache/bookkeeper/commits/946fa5446138eb077ab1c5283a545b7b1b932f52","html_url":"https://github.com/apache/bookkeeper/commit/946fa5446138eb077ab1c5283a545b7b1b932f52"}]}],"files":[{"sha":"43c4c7c77ca1677cb91de961db2582d79d5ca5b7","filename":"CHANGES.txt","status":"modified","additions":384,"deletions":21,"changes":405,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -1,3 +1,358 @@\n+Release 4.3.0 - 2014-10-03\n+\n+  Non-backward compatible changes:\n+\n+    BUGFIXES:\n+\n+    IMPROVEMENTS:\n+\n+  Backward compatible changes:\n+\n+    BUGFIXES:\n+\n+      BOOKKEEPER-564: Better checkpoint mechanism (sijie & ivank)\n+\n+      BOOKKEEPER-596: Ledgers are gc'ed by mistake in MSLedgerManagerFactory. (sijie & ivank)\n+\n+      BOOKKEEPER-595: Crash of inprocess autorecovery daemon should not take down the bookie (ivank)\n+\n+      BOOKKEEPER-597: Add flag to output test logs to stdout (ivank)\n+\n+      BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank)\n+\n+      BOOKKEEPER-586: Remove recursive call in delivery manager (sijie via ivank)\n+\n+      BOOKKEEPER-506: Provide better topic release algorithm (sijie via ivank)\n+\n+      BOOKKEEPER-581: Ledger recovery doesn't work correctly when recovery adds force changing ensembles. (sijie via ivank)\n+\n+      BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank)\n+\n+      BOOKKEEPER-617: BOOKKEEPER-544 breaks hedwig-server/bin/hedwig script (ivank)\n+\n+      BOOKKEEPER-619: Bookie should not create local cookie files if zookeeper is uninitialized (ivank)\n+\n+      BOOKKEEPER-313: Bookkeeper shutdown call from Bookie thread is not shutting down server (vinay via ivank)\n+\n+      BOOKKEEPER-620: PerChannelBookieClient race during channel disconnect (ivank)\n+\n+      BOOKKEEPER-637: NoSuchEntry exception when reading an entry from a bookie should not print ERROR level message (mmerli via ivank)\n+\n+      BOOKKEEPER-641: DeathWatcher thread is unnecessarily running even after bookie shutdown (rakeshr via ivank)\n+\n+      BOOKKEEPER-636: Latest txn logs might be deleted in a race condition which is not recoverable if BK goes down before next txn log created. (vinay via ivank)\n+\n+      BOOKKEEPER-635: jenkins build should highlight which lines of the patch cause raw analysis errors (ivank via sijie)\n+\n+      BOOKKEEPER-653: Timeout option is missing in few testcases (Rakesh via ivank)\n+\n+      BOOKKEEPER-686: Bookie startup will fail if one of the configured ledgerDir is full and the same is used for replaying the journal (Rakesh via sijie)\n+\n+      BOOKKEEPER-605: Use static Logger objects everywhere for bookkeeper (sijie via ivank)\n+\n+      BOOKKEEPER-614: Generic stats interface, which multiple providers can be plugged into (sijie & ivank via ivank)\n+\n+      BOOKKEEPER-615: Twitter stats implementation of stats interface (sijie via ivank)\n+\n+      BOOKKEEPER-719: Inconsistent synchronization of org.apache.bookkeeper.stats.CodahaleMetricsProvider.metrics (sijie via ivank)\n+\n+      BOOKKEEPER-644: Provide a bookie address wrapper (sijie via fpj)\n+\n+      BOOKKEEPER-763: findbugs fails to run on jenkins (ivank)\n+\n+      BOOKKEEPER-766: Update notice.txt files to include 2014 (ivank via fpj)\n+      \n+      BOOKKEEPER-767: Allow loopback in tests (ivank via fpj)\n+\n+      BOOKKEEPER-765: bookkeeper script should fall back to java in path if JAVA_HOME is not set (ivank)\n+\n+      BOOKKEEPER-776: Flaky test BookieRecoveryTest (ivank via fpj)\n+\n+      BOOKKEEPER-790: Add JNA license in NOTICE files (sijie)\n+\n+      BOOKKEEPER-789: Update README to reflect bookkeeper modules (sijie)\n+\n+      bookkeeper-server:\n+\n+        BOOKKEEPER-567: ReadOnlyBookieTest hangs on shutdown (sijie via ivank)\n+\n+        BOOKKEEPER-549: Documentation missed for readOnlyMode support (ivank)\n+\n+        BOOKKEEPER-548: Document about periodic ledger checker configuration (ivank)\n+\n+        BOOKKEEPER-561: Findbugs report errors with openjdk (ivank via umamahesh)\n+\n+        BOOKKEEPER-554: fd leaking when move ledger index file (sijie, ivank via sijie)\n+\n+        BOOKKEEPER-568: NPE during GC with HierarchicalLedgerManager (Matteo via sijie)\n+\n+        BOOKKEEPER-569: Critical performance bug in InterleavedLedgerStorage (ivank via fpj)\n+\n+        BOOKKEEPER-559: Fix occasional failure in AuditorBookieTest (ivank via umamahesh)\n+\n+        BOOKKEEPER-599: NPE in PerChannelBookieClient (jiannan via sijie)\n+\n+\tBOOKKEEPER-577: BookieFailureTest uses sync/wait()/notify() incorrectly (ivank via fpj) \n+\t\n+\tBOOKKEEPER-626: BOOKIE_EXTRA_OPTS are added twice (vinay via fpj)\n+\n+        BOOKKEEPER-623: LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry. (vinay via sijie)\n+\n+        BOOKKEEPER-633: ConcurrentModificationException in RackawareEnsemblePlacementPolicy when a bookie is removed from available list (vinay via sijie)\n+\n+        BOOKKEEPER-563: Avoid Journal polluting page cache (Robin Dhamankar via sijie)\n+\n+        BOOKKEEPER-646: BookieShell readjournal command is throwing BufferUnderflowException (Rakesh via sijie)\n+\n+        BOOKKEEPER-652: Logger class name is wrong in LedgerCacheImpl.java (Rakesh via sijie)\n+\n+        BOOKKEEPER-642: Bookie returns incorrect exitcode, ExitCode.ZK_REG_FAIL is getting overridden (Rakesh via ivank)\n+\n+        BOOKKEEPER-663: HierarchicalLedgerManager iterator is missing some ranges and the last ledger in the range (mmerli via ivank)\n+\n+        BOOKKEEPER-604: Ledger storage can log an exception if GC happens concurrently. (sijie & ivank via ivank)\n+\n+        BOOKKEEPER-667: Client write will fail with BadMetadataVersion in case of multiple Bookie failures with AutoRecovery enabled (sijie via ivank)\n+\n+        BOOKKEEPER-668: Race between PerChannelBookieClient#channelDisconnected() and disconnect() calls can make clients hang while add/reading entries in case of multiple bookie failures (sijie & ivank via ivank)\n+\n+        BOOKKEEPER-624: Reduce logs generated by ReplicationWorker (vinay via ivank)\n+\n+        BOOKKEEPER-632: AutoRecovery should consider read only bookies (vinay via ivank)\n+\n+        BOOKKEEPER-649: Race condition in sync ZKUtils.createFullPathOptimistic() (ivank)\n+\n+        BOOKKEEPER-580: improve close logic (sijie & ivank via ivank)\n+\n+        BOOKKEEPER-446: BookKeeper.createLedger(..) should not mask the error with ZKException (sijie via ivank)\n+\n+        BOOKKEEPER-675: Log noise fixup before cutting 4.2.2 (ivank)\n+\n+        BOOKKEEPER-638: Two bookies could start at the same time to access bookie data. (sijie via ivank)\n+\n+        BOOKKEEPER-676: Make add asynchrounous in ledger recovery (aniruddha via ivank)\n+\n+        BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n+\n+        BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n+\n+        BOOKKEEPER-659: LRU page management in ledger cache. (Aniruddha, Robin Dhamankar & sijie via ivank)\n+\n+        BOOKKEEPER-700: GarbageCollectorThread exsiting with ArrayIndexOutOfBoundsException (rakeshr via ivank)\n+\n+        BOOKKEEPER-678: BookieServer shutdown hangs indefinitely at NioServerSocketChannelFactory.releaseExternalResources (rakeshr via ivank)\n+\n+        BOOKKEEPER-565: Make an option to separate storing entry log files from index files. (sijie via ivank)\n+\n+        BOOKKEEPER-711: bookkeeper-daemon.sh will not remove the pid file one successful stop (vinay via sijie)\n+\n+        BOOKKEEPER-712: bookkeeper script should use 'java' from JAVA_HOME (vinay via sijie)\n+\n+\tBOOKKEEPER-709: SlowBookieTest#testSlowBookie fails intermittently (Rakesh R via fpj)\n+\n+        BOOKKEEPER-714: Logging channel exceptions in PerChannelBookieClient (sijie)\n+\n+        BOOKKEEPER-662: Major GC should kick in immediately if remaining space reaches a warning threshold (sijie via ivank)\n+\n+        BOOKKEEPER-710: OpenLedgerNoRecovery should watch ensemble change. (sijie via ivank)\n+\n+        BOOKKEEPER-429: Provide separate read and write threads in the bookkeeper server (Aniruddha via sijie)\n+\n+        BOOKKEEPER-696: stats collection on bookkeeper client (Aniruddha, ivank via sijie)\n+\n+        BOOKKEEPER-661: Turn readonly back to writable if spaces are reclaimed. (sijie via ivank)\n+\n+        BOOKKEEPER-720: CheckpointSource.MIN#compareTo does exactly the opposite of what it should (ivank via sijie)\n+\n+        BOOKKEEPER-643: Improve concurrency of entry logger (sijie & Aniruddha via ivank)\n+\n+        BOOKKEEPER-703: Document all the settings added in BOOKKEEPER-656 (sijie)\n+\n+        BOOKKEEPER-727: Names of bookie write/read threads are backwards (ivank via fpj)\n+\n+        BOOKKEEPER-728: Bookkeeper#Builder is not public, so can't be used outside of client package (ivank via fpj)\n+\n+        BOOKKEEPER-729: Bookie shouldn't exit with 0, if exiting from deathwatcher and thread death was caused by OOM (ivank via fpj)\n+\n+        BOOKKEEPER-725: AutoRecoveryMain should exit with error code if deathwatcher finds dead thread (ivank via sijie)\n+\n+        BOOKKEEPER-726: PerChannelBookieClient should print address that it failed to connect to when it fails to correct (ivank via sijie)\n+\n+        BOOKKEEPER-724: Shade introduces RAT error (sijie via fpj)\n+\n+        BOOKKEEPER-654: Bookkeeper client operations are allowed even after its closure, bk#close() (sijie via ivank)\n+\n+        BOOKKEEPER-717: journal should look forward to group time-out entries (sijie via ivank)\n+\n+        BOOKKEEPER-715: bookie: delay dropping journal cached pages (sijie via ivank)\n+\n+        BOOKKEEPER-730: Shade pom file missing apache license header (ivank)\n+\n+        BOOKKEEPER-740: AutoRecoveryMainTest#testAutoRecoverySessionLoss is failing (Rakesh via sijie)\n+\n+        BOOKKEEPER-432: Improve performance of entry log range read per ledger entries (yixue, sijie via ivank)\n+\n+        BOOKKEEPER-742: Fix for empty ledgers losing quorum. (ivank)\n+\n+        BOOKKEEPER-743: Periodic ledger check running too often as doc doesn't match implementation. (ivank)\n+\n+        BOOKKEEPER-716: padding writes for bookie journal (sijie via ivank)\n+\n+        BOOKKEEPER-744: Run the auditor bookie check periodically (ivank)\n+\n+        BOOKKEEPER-629: Support hostname based ledger metadata to help users to change IP with existing installation (rakeshr via ivank)\n+\n+\tBOOKKEEPER-755: Incorrect number of seconds specified in a day (Joseph Redfern via fpj)\n+\t\n+\tBOOKKEEPER-750: Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank via fpj)\n+\n+        BOOKKEEPER-756: Use HashedwheelTimer for request timeouts for PCBC (sijie via ivank)\n+\n+        BOOKKEEPER-758: Add TryReadLastAddConfirmed API (sijie via ivank)\n+\n+        BOOKKEEPER-751: Ensure all the bookkeeper callbacks not run under ledger handle lock (sijie via ivank)\n+\n+        BOOKKEEPER-745: Fix for false reports of ledger unreplication during rolling restarts. (ivank)\n+\n+        BOOKKEEPER-746: 5 new shell commands. List ledgers, list metadata, list underreplicated, show auditor and simpletest (ivank)\n+\n+        BOOKKEEPER-774: Flaky test org.apache.bookkeeper.test.ReadOnlyBookieTest.testBookieShouldTurnWritableFromReadOnly (sijie)\n+\n+        BOOKKEEPER-704: reconnectable zookeeper client wrapper (sijie via ivank)\n+\n+        BOOKKEEPER-630: Add tag to o.a.b.net.* to indict which release of hadoop they came from, move DNS to o.a.b.net.* and indent (sijie via ivank)\n+\n+\tBOOKKEEPER-780: Findbug issue in trunk (ivank via fpj)\n+\n+        BOOKKEEPER-777: Flake in LedgerCloseTest (ivank via fpj)\n+\n+        BOOKKEEPER-718: AuditorLedgerCheckerTest is flakey (ivank via sijie)\n+\n+        BOOKKEEPER-736: Stats for AutoRecovery (sijie)\n+\n+\tBOOKKEEPER-775: Improve MultipleThreadReadTest to reduce flakiness (sijie via fpj)\n+\n+        BOOKKEEPER-783: Avoid running out of fds in MutlipleThreadReadTest (sijie via ivank)\n+\n+        BOOKKEEPER-785: Fix javadoc warnings in trunk (ivank via sijie)\n+\n+        BOOKKEEPER-784: BookKeeperCloseTest#testLedgerCheck is failing intermittently (ivank via sijie)\n+\n+        BOOKKEEPER-782: Use builder pattern for Cookie (rakeshr via sijie)\n+\n+        BOOKKEEPER-787: Modify Cookie by removing 'znodeVersion' state/field (rakeshr via ivank)\n+\n+        BOOKKEEPER-773: Provide admin tool to rename bookie identifier in Cookies (rakeshr via ivank)\n+\n+      bookkeeper-benchmark:\n+\n+        BOOKKEEPER-768: fix typo 'seconds' to milliseconds in benchmark output (jialin via sijie)\n+\n+        BOOKKEEPER-778: Flake in TestTryReadLastConfirmed (ivank via sijie)\n+\n+      bookkeeper-stats-providers:\n+\n+        BOOKKEEPER-779: jmx reporter for codahale metrics provider (ivank via sijie)\n+\n+\tBOOKKEEPER-786: Fix Findbugs Error In Codahale Stats Provider (sijie via fpj)\n+\n+      hedwig-server:\n+\n+        BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)\n+\n+        BOOKKEEPER-607: Filtered Messages Require ACK from Client Causes User Being Throttled Incorrectly Forever (sijie via ivank)\n+\n+        BOOKKEEPER-683: TestSubAfterCloseSub fails on 4.2 (jiannan via ivank)\n+\n+        BOOKKEEPER-363: Re-distributing topics among newly added hubs. (aniruddha via ivank)\n+\n+      hedwig-client:\n+\n+        BOOKKEEPER-598: Fails to compile - RESUBSCRIBE_EXCEPTION conflict (Matthew Farrellee via sijie)\n+\n+\tBOOKKEEPER-600: shouldClaim flag isn't cleared for hedwig multiplex java client (sijie via fpj)\n+\n+    IMPROVEMENTS:\n+\n+      BOOKKEEPER-608: Make SyncThread a reusable component (ivank)\n+\n+      BOOKKEEPER-555: Make BookieServer use Netty rather than a custom IO server (ivank)\n+\n+      BOOKKEEPER-526: multiple threads for delivery manager (sijie via ivank)\n+\n+      BOOKKEEPER-544: Modify hedwig server tests to allow client testcases to start/stop them as part of their tests (mridul via ivank)\n+\n+      BOOKKEEPER-312: Implementation of JMS provider (mridul via ivank)\n+\n+      BOOKKEEPER-556: BookieServerMXBean#getServerState makes no sense (ivank via sijie)\n+\n+      BOOKKEEPER-574: Extend the bookkeeper shell to get a list of available bookies (ivank via umamahesh)\n+\n+      BOOKKEEPER-576: Bookie client should use netty Decoder/Encoder (ivank via sijie)\n+\n+      BOOKKEEPER-585: Auditor logs noisily when a ledger has been deleted (ivank via sijie)\n+\n+      BOOKKEEPER-573: Script to start a bookkeeper cluster (ivank via sijie)\n+\n+      BOOKKEEPER-557: Compiler error showing up badly with jdk 7 (ivank via sijie)\n+\n+      BOOKKEEPER-583: Read from a ReadOnlyBookie fails if index fileinfo is not in ledger cache (vinay via sijie)\n+\n+      BOOKKEEPER-611: Speed up bookkeeper tests (ivank via fpj)\n+\n+      BOOKKEEPER-603: Support Boost 1.53 for Hedwig Cpp Client (jiannan via ivank)\n+\n+      BOOKKEEPER-592: allow application to recommend ledger data locality (sijie via ivank)\n+\n+      BOOKKEEPER-627: LedgerDirsMonitor is missing thread name (rakesh via fpj)\n+\n+      BOOKKEEPER-618: Better resolution of bookie address (ivank via fpj)\n+\n+      BOOKKEEPER-610: Make SyncThread use an executor (ivank via sijie)\n+\n+      BOOKKEEPER-640: Log improvement - add shutdown/exit log message for the bookie services (rakesh via sijie)\n+\n+      BOOKKEEPER-666: Naming threads of ExecutorService (rakesh via sijie)\n+\n+      BOOKKEEPER-645: Bookkeeper shell command to get a list of readonly bookies (rakesh via sijie)\n+\n+      BOOKKEEPER-658: ledger cache refactor (Robin Dhamankar via sijie)\n+\n+      BOOKKEEPER-657: Journal Improvement (Robin Dhamankar via sijie)\n+\n+      BOOKKEEPER-664: Compaction increases latency on journal writes (ivank via sijie)\n+\n+      BOOKKEEPER-602: we should have request timeouts rather than channel timeout in PerChannelBookieClient (Aniruddha, ivank via sijie)\n+\n+      BOOKKEEPER-698: Bookie client closure is not considering timeoutExecutor (rakesh via sijie)\n+\n+      BOOKKEEPER-699: Codahale metrics implementation of stats API (ivank via sijie)\n+\n+      BOOKKEEPER-701: Improve exception handling of Bookkeeper threads (rakesh via sijie)\n+\n+      BOOKKEEPER-708: Shade protobuf library to avoid incompatible versions (rakesh, ivank via sijie)\n+\n+      BOOKKEEPER-732: Add env variable ENTRY_FORMATTER_CLASS to the bkenv.sh (rakesh via sijie)\n+\n+      BOOKKEEPER-731: Missing BOOKIE_PID_DIR and BOOKIE_STOP_TIMEOUT in env variables list (rakesh via sijie)\n+\n+      BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)\n+\n+      BOOKKEEPER-739: Test timeouts mostly ignored (sijie via fpj)\n+\n+      BOOKKEEPER-697: stats collection on bookkeeper server (sijie via fpj)\n+\n+      BOOKKEEPER-781: Fix OOM on Hedwig Tests (sijie via fpj)\n+\n+    NEW FEATURE:\n+\n+      BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)\n+\n+      BOOKKEEPER-257: Ability to list all ledgers (fpj via ivank)\n+  \n+      BOOKKEEPER-582: Make bookie and client use protobuf for requests (non-wire part)\n+      (sijie via fpj)\n+\n Release 4.2.0 - 2013-01-14\n \n   Non-backward compatible changes:\n@@ -38,6 +393,10 @@ Release 4.2.0 - 2013-01-14\n \n       BOOKKEEPER-533: TestSubAfterCloseSub fails strangely in tests (ivank via fpj)\n \n+      BOOKKEEPER-480: Fix javac warnings (ivank via sijie)\n+\n+      BOOKKEEPER-481: Fix javadoc warnings (ivank via sijie)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)\n@@ -56,15 +415,15 @@ Release 4.2.0 - 2013-01-14\n \n         BOOKKEEPER-294: Not able to start the bookkeeper before the ZK session timeout. (rakeshr via ivank)\n \n-\tBOOKKEEPER-327: System.currentTimeMillis usage in BookKeeper (uma via fpj)\n+        BOOKKEEPER-327: System.currentTimeMillis usage in BookKeeper (uma via fpj)\n \n         BOOKKEEPER-349: Entry logger should close all the chennels which are there in Map, instead of closing only current channel. (umamaheswararao via sijie)\n \n         BOOKKEEPER-326: DeadLock during ledger recovery (rakeshr via ivank)\n \n         BOOKKEEPER-372: Check service name in bookie start/stop script. (nijel via ivank)\n \n- \tBOOKKEEPER-354: [BOOKKEEPER-296] [Documentation] Modify the bookkeeper start script and document the bookkeeper stop command in bookkeeperConfig.xml (Kiran BC via ivank)\n+        BOOKKEEPER-354: [BOOKKEEPER-296] [Documentation] Modify the bookkeeper start script and document the bookkeeper stop command in bookkeeperConfig.xml (Kiran BC via ivank)\n  \n         BOOKKEEPER-378: ReplicationWorker may not get ZK watcher notification on UnderReplication ledger lock deletion. (umamaheswararao & ivank via ivank)\n \n@@ -106,17 +465,17 @@ Release 4.2.0 - 2013-01-14\n \n         BOOKKEEPER-416: LedgerChecker returns underreplicated fragments for an closed ledger with no entries (ivank)\n \n-\tBOOKKEEPER-425: Cleanup Bookie id generation (ivank via fpj)\n+        BOOKKEEPER-425: Cleanup Bookie id generation (ivank via fpj)\n \n         BOOKKEEPER-430: Remove manual bookie registration from overview (fpj via ivank)\n \n         BOOKKEEPER-466: ZooKeeper test utility sets the port number as the tickTime (ivank)\n \n         BOOKKEEPER-460: LedgerDeleteTest checks wrong place for log file (Fangmin Lv via ivank)\n \n-\tBOOKKEEPER-477: In ReadOnlyBookieTest, we should wait for the bookie to die before asserting on it (ivank via fpj)\n+        BOOKKEEPER-477: In ReadOnlyBookieTest, we should wait for the bookie to die before asserting on it (ivank via fpj)\n \n-\tBOOKKEEPER-485: TestFencing hung (ivank via fpj)\n+        BOOKKEEPER-485: TestFencing hung (ivank via fpj)\n \n         BOOKKEEPER-351: asyncAddEntry should not throw an exception (Matteo Merli via sijie)\n \n@@ -126,15 +485,15 @@ Release 4.2.0 - 2013-01-14\n \n         BOOKKEEPER-347: Provide mechanism to detect r-o bookie by the bookie clients (Vinay via ivank)\n \n-\tBOOKKEEPER-475: BookieRecoveryTest#testSyncBookieRecoveryToRandomBookiesCheckForDupes() iterates too much (ivank via fpj)\n+        BOOKKEEPER-475: BookieRecoveryTest#testSyncBookieRecoveryToRandomBookiesCheckForDupes() iterates too much (ivank via fpj)\n \n-\tBOOKKEEPER-431: Duplicate definition of COOKIES_NODE (uma via fpj)\n+        BOOKKEEPER-431: Duplicate definition of COOKIES_NODE (uma via fpj)\n \n-\tBOOKKEEPER-474:  BookieReadWriteTest#testShutdown doesn't make sense (ivank via fpj)\n+        BOOKKEEPER-474:  BookieReadWriteTest#testShutdown doesn't make sense (ivank via fpj)\n \n-\tBOOKKEEPER-465: CreateNewLog may overwrite lastLogId with smaller value (yixue, fpj via fpj)\n+        BOOKKEEPER-465: CreateNewLog may overwrite lastLogId with smaller value (yixue, fpj via fpj)\n \n-\tBOOKKEEPER-498: BookieRecoveryTest.tearDown NPE (fpj)\n+        BOOKKEEPER-498: BookieRecoveryTest.tearDown NPE (fpj)\n \n         BOOKKEEPER-497: GcLedgersTest has a potential race (ivank via sijie)\n \n@@ -156,9 +515,9 @@ Release 4.2.0 - 2013-01-14\n \n         BOOKKEEPER-447: Bookie can fail to recover if index pages flushed before ledger flush acknowledged (ivank via sijie)\n \n-\tBOOKKEEPER-520: BookieFailureTest hangs on precommit build (sijie via fpj, jira reopened)\n+        BOOKKEEPER-520: BookieFailureTest hangs on precommit build (sijie via fpj, jira reopened)\n \n-\tBOOKKEEPER-514: TestDeadLock hanging sometimes (ivank, sijie via fpj)\n+        BOOKKEEPER-514: TestDeadLock hanging sometimes (ivank, sijie via fpj)\n \n         BOOKKEEPER-524: Bookie journal filesystem gets full after SyncThread is terminated with exception (Matteo, fpj via sijie)\n \n@@ -170,7 +529,11 @@ Release 4.2.0 - 2013-01-14\n \n         BOOKKEEPER-530: data might be lost during compaction. (ivank)\n \n-\tBOOKKEEPER-538: Race condition in BookKeeper#close (ivank via fpj)\n+        BOOKKEEPER-538: Race condition in BookKeeper#close (ivank via fpj)\n+\n+        BOOKKEEPER-408: BookieReadWriteTest will enter the endless loop and will not leave out (ivank)\n+\n+        BOOKKEEPER-504: Fix findbugs warning in PendingReadOp (fpj via ivank)\n \n       hedwig-protocol:\n \n@@ -320,6 +683,10 @@ Release 4.2.0 - 2013-01-14\n \n         BOOKKEEPER-293: Periodic checking of ledger replication status (ivank)\n \n+        BOOKKEEPER-472: Provide an option to start Autorecovery along with Bookie Servers (umamahesh via ivank)\n+\n+        BOOKKEEPER-341: add documentation for bookkeeper ledger manager interface. (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)\n@@ -366,6 +733,10 @@ Release 4.2.0 - 2013-01-14\n \n         BOOKKEEPER-522: TestHedwigHub is failing silently on Jenkins (ivank via sijie)\n \n+        BOOKKEEPER-262: Implement a meta store based hedwig metadata manager. (jiannan via ivank)\n+\n+        BOOKKEEPER-310: Changes in hedwig server to support JMS spec (ivank via sijie)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)\n@@ -522,10 +893,6 @@ Release 4.1.0 - 2012-06-07\n \n         BOOKKEEPER-288: NOTICE files don't have the correct year (ivank via sijie)\n \n-        BOOKKEEPER-408: BookieReadWriteTest will enter the endless loop and will not leave out (ivank)\n-\n-\tBOOKKEEPER-504: Fix findbugs warning in PendingReadOp (fpj via ivank)\n-\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)\n@@ -600,8 +967,6 @@ Release 4.1.0 - 2012-06-07\n \n \tBOOKKEEPER-270: Review documentation on bookie cookie (ivank via fpj)\n \n-        BOOKKEEPER-341: add documentation for bookkeeper ledger manager interface. (sijie via ivank)\n-\n       hedwig-server/\n \n         BOOKKEEPER-77: Add a console client for hedwig (Sijie Guo via ivank)\n@@ -614,8 +979,6 @@ Release 4.1.0 - 2012-06-07\n \n \tBOOKKEEPER-269: Review documentation for hedwig console client (sijie via fpj)\n \n-        BOOKKEEPER-262: Implement a meta store based hedwig metadata manager. (jiannan via ivank)\n-\n       hedwig-client/\n \n \tBOOKKEEPER-271: Review documentation for message bounding (ivank via fpj)"},{"sha":"5a6871a22146047413d2620d53e2578aa49b8aa3","filename":"NOTICE","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/NOTICE","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/NOTICE","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/NOTICE?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -1,5 +1,5 @@\n Apache BookKeeper\n-Copyright 2011-2013 The Apache Software Foundation\n+Copyright 2011-2014 The Apache Software Foundation\n \n This product includes software developed at\n The Apache Software Foundation (http://www.apache.org/)."},{"sha":"33f7540d96aa79546674b48092f577651029ea0c","filename":"README","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/README","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/README","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/README?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -12,11 +12,14 @@ Requirements:\n -------------------------------------------------------------------------------\n The BookKeeper project contains:\n \n- - bookkeeper-server     (BookKeeper server and client)\n- - bookkeeper-benchmark  (Benchmark suite for testing BookKeeper performance)\n- - hedwig-protocol       (Hedwig network protocol)\n- - hedwig-client         (Hedwig client library)\n- - hedwig-server         (Hedwig server)\n+ - bookkeeper-server            (BookKeeper server and client)\n+ - bookkeeper-benchmark         (Benchmark suite for testing BookKeeper performance)\n+ - bookkeeper-stats             (BookKeeper stats library)\n+ - bookkeeper-stats-providers   (BookKeeper stats providers)\n+ - hedwig-protocol              (Hedwig network protocol)\n+ - hedwig-server                (Hedwig server)\n+ - hedwig-client                (Hedwig client library)\n+ - hedwig-client-jms            (Hedwig client jms library)\n \n BookKeeper is a system to reliably log streams of records. It is designed to \n store  write ahead logs, such as those found in database or database like "},{"sha":"b3bfd01af87e735b2aa6abdfe5c490160f4ea8be","filename":"bin/raw-check-patch","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bin/raw-check-patch","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bin/raw-check-patch","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/raw-check-patch?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,47 @@\n+#!/usr/bin/env bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+printTrailingSpaces() {\n+    PATCH=$1\n+    cat $PATCH | awk '/^+/ { if (/ $/) { print \"\\tL\" NR \":\" $0} }'\n+}\n+\n+printTabs() {\n+    PATCH=$1\n+    cat $PATCH | awk '/^+/ { if (/\\t/) { print \"\\tL\" NR \":\" $0 } }'\n+}\n+\n+printAuthors() {\n+    PATCH=$1\n+    cat $PATCH | awk '/^+/ { L=tolower($0); if (L ~ /.*\\*.* @author/) { print \"\\tL\" NR \":\" $0 } }'\n+}\n+\n+printLongLines() {\n+    PATCH=$1\n+    cat $PATCH | awk '/^+/ { if ( length > 121 ) { print \"\\tL\" NR \":\" $0 } }'\n+}\n+\n+if [[ \"X$(basename -- \"$0\")\" = \"Xraw-check-patch\" ]]; then\n+    echo Trailing spaces\n+    printTrailingSpaces $1\n+    echo\n+    echo Tabs\n+    printTabs $1\n+    echo\n+    echo Authors\n+    printAuthors $1\n+    echo\n+    echo Long lines\n+    printLongLines $1\n+fi"},{"sha":"d266bbeb2b880a94cbf99271992784d9469746f7","filename":"bin/test-patch-00-clean","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bin/test-patch-00-clean","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bin/test-patch-00-clean","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-00-clean?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -89,6 +89,8 @@ pre)\n     exit $EXITCODE\n     ;;\n post)\n+    mvn clean ${MVNPASSTHRU} >> ${TEMPDIR}/${TASKNAME}.txt\n+    EXITCODE=$?\n     ;;\n report)\n     echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE"},{"sha":"52c0b2f50006fb0e016172502ad84fd668d9c16b","filename":"bin/test-patch-05-patch-raw-analysis","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bin/test-patch-05-patch-raw-analysis","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bin/test-patch-05-patch-raw-analysis","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-05-patch-raw-analysis?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -11,6 +11,7 @@\n #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n #   See the License for the specific language governing permissions and\n #   limitations under the License.\n+source $(dirname \"$0\")/raw-check-patch\n \n if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n     set -x\n@@ -74,37 +75,48 @@ parseArgs() {\n }\n ###############################################################################\n checkNoAuthors() {\n-    authorTags=`grep \"^+ \" ${PATCHFILE} | grep -c -i -e \".*\\*.* @author\"`\n+    TMPFILE=$TEMPDIR/$TASKNAME-authors.txt\n+    printAuthors $PATCHFILE > $TMPFILE\n+    authorTags=$(wc -l $TMPFILE | awk '{print $1}')\n     if [[ ${authorTags} != 0 ]] ; then\n         REPORT+=(\"{color:red}-1{color} the patch seems to contain ${authorTags} line(s) with @author tags\")\n+        REPORT+=(\"$(cat $TMPFILE)\")\n     else\n         REPORT+=(\"{color:green}+1{color} the patch does not introduce any @author tags\")\n     fi\n }\n ###############################################################################\n checkNoTabs() {\n-    tabs=`grep \"^+ \" ${PATCHFILE} | grep -c -P \"\\t\"`\n+    TMPFILE=$TEMPDIR/$TASKNAME-tabs.txt\n+    printTabs $PATCHFILE > $TMPFILE\n+    tabs=$(wc -l $TMPFILE | awk '{print $1}')\n     if [[ ${tabs} != 0 ]] ; then\n         REPORT+=(\"{color:red}-1{color} the patch contains ${tabs} line(s) with tabs\")\n+        REPORT+=(\"$(cat $TMPFILE)\")\n     else\n         REPORT+=(\"{color:green}+1{color} the patch does not introduce any tabs\")\n     fi\n }\n ###############################################################################\n checkNoTrailingSpaces() {\n-    trailingSpaces=`grep \"^+ \" ${PATCHFILE} | grep -c -e \" $\"`\n+    TMPFILE=$TEMPDIR/$TASKNAME-trailingspaces.txt\n+    printTrailingSpaces $PATCHFILE > $TMPFILE\n+    trailingSpaces=$(wc -l $TMPFILE | awk '{print $1}')\n     if [[ ${trailingSpaces} != 0 ]] ; then\n         REPORT+=(\"{color:red}-1{color} the patch contains ${trailingSpaces} line(s) with trailing spaces\")\n+        REPORT+=(\"$(cat $TMPFILE)\")\n     else\n         REPORT+=(\"{color:green}+1{color} the patch does not introduce any trailing spaces\")\n     fi\n }\n ###############################################################################\n checkLinesLength() {\n-  # We check for > 120 to account for the \"+\" sign\n-    longLines=`grep \"^+ \" ${PATCHFILE} | awk 'BEGIN{count=0}{if ( length > 121 ) { count=count+1} }END{ print count}'`\n+    TMPFILE=$TEMPDIR/$TASKNAME-trailingspaces.txt\n+    printLongLines $PATCHFILE > $TMPFILE\n+    longLines=$(wc -l $TMPFILE | awk '{print $1}')\n     if [[ ${longLines} != 0 ]] ; then\n         REPORT+=(\"{color:red}-1{color} the patch contains ${longLines} line(s) longer than 120 characters\")\n+        REPORT+=(\"$(cat $TMPFILE)\")\n     else\n         REPORT+=(\"{color:green}+1{color} the patch does not introduce any line longer than 120\")\n     fi"},{"sha":"5714b22342ecbc7bff9dcc3291916ba4534a7ae6","filename":"bin/test-patch-10-compile","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bin/test-patch-10-compile","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bin/test-patch-10-compile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-10-compile?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -104,15 +104,15 @@ parseArgs \"$@\"\n \n case $OP in\n pre)\n-    mvn clean package -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-clean.txt >> $STDOUT\n+    mvn clean install -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-clean.txt >> $STDOUT\n     if [[ ${PIPESTATUS[0]} == 0 ]] ; then\n         echo \"{color:green}+1{color} HEAD compiles\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n     else\n         echo \"{color:red}-1{color} HEAD does not compile\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n     fi\n     ;;\n post)\n-    mvn clean package -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-patch.txt >> $STDOUT\n+    mvn clean install -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-patch.txt >> $STDOUT\n     if [[ ${PIPESTATUS[0]} == 0 ]] ; then\n         echo \"{color:green}+1{color} patch compiles\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n     else"},{"sha":"a303d27b91cd455ac5a5ab4ddb4afe6804604bbb","filename":"bookkeeper-benchmark/pom.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.0-SNAPSHOT</version>\n+    <version>4.3.0</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-benchmark</artifactId>\n@@ -71,22 +71,22 @@\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n       <artifactId>zookeeper</artifactId>\n-      <version>3.4.3</version>\n+      <version>${zookeeper.version}</version>\n       <type>jar</type>\n       <scope>compile</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n       <artifactId>zookeeper</artifactId>\n-      <version>3.4.3</version>\n+      <version>${zookeeper.version}</version>\n       <type>test-jar</type>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.jboss.netty</groupId>\n+      <groupId>io.netty</groupId>\n       <artifactId>netty</artifactId>\n-      <version>3.2.4.Final</version>\n-    <scope>compile</scope>\n+      <version>${netty.version}</version>\n+      <scope>compile</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.bookkeeper</groupId>"},{"sha":"258a3fb606b3b47d52b8ebfd8ca4024768a31ab6","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","status":"modified","additions":14,"deletions":17,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -19,13 +19,10 @@\n  */\n package org.apache.bookkeeper.benchmark;\n \n-import java.net.InetSocketAddress;\n-import java.util.concurrent.Executors;\n-\n import java.io.IOException;\n+import java.util.concurrent.Executors;\n \n-import org.apache.zookeeper.KeeperException;\n-\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n@@ -34,30 +31,30 @@\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.jboss.netty.buffer.ChannelBuffer;\n-import org.jboss.netty.buffer.ChannelBuffers;\n-import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n-import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n-\n import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n import org.apache.commons.cli.PosixParser;\n import org.apache.commons.cli.ParseException;\n+import org.apache.zookeeper.KeeperException;\n+import org.jboss.netty.buffer.ChannelBuffer;\n+import org.jboss.netty.buffer.ChannelBuffers;\n+import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n+import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class BenchBookie {\n-    static Logger LOG = LoggerFactory.getLogger(BenchBookie.class);\n+    static final Logger LOG = LoggerFactory.getLogger(BenchBookie.class);\n \n     static class LatencyCallback implements WriteCallback {\n         boolean complete;\n         @Override\n         synchronized public void writeComplete(int rc, long ledgerId, long entryId,\n-                InetSocketAddress addr, Object ctx) {\n+                BookieSocketAddress addr, Object ctx) {\n             if (rc != 0) {\n                 LOG.error(\"Got error \" + rc);\n             }\n@@ -78,7 +75,7 @@ synchronized public void waitForComplete() throws InterruptedException {\n         int count;\n         int waitingCount = Integer.MAX_VALUE;\n         synchronized public void writeComplete(int rc, long ledgerId, long entryId,\n-                InetSocketAddress addr, Object ctx) {\n+                BookieSocketAddress addr, Object ctx) {\n             if (rc != 0) {\n                 LOG.error(\"Got error \" + rc);\n             }\n@@ -145,7 +142,7 @@ public static void main(String[] args)\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                                                 .newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"BenchBookieClientScheduler\");\n \n         ClientConfiguration conf = new ClientConfiguration();\n         BookieClient bc = new BookieClient(conf, channelFactory, executor);\n@@ -162,7 +159,7 @@ public static void main(String[] args)\n             toSend.writeLong(ledger);\n             toSend.writeLong(entry);\n             toSend.writerIndex(toSend.capacity());\n-            bc.addEntry(new InetSocketAddress(addr, port), ledger, new byte[20],\n+            bc.addEntry(new BookieSocketAddress(addr, port), ledger, new byte[20],\n                         entry, toSend, tc, null, BookieProtocol.FLAG_NONE);\n         }\n         LOG.info(\"Waiting for warmup\");\n@@ -180,7 +177,7 @@ public static void main(String[] args)\n             toSend.writeLong(entry);\n             toSend.writerIndex(toSend.capacity());\n             lc.resetComplete();\n-            bc.addEntry(new InetSocketAddress(addr, port), ledger, new byte[20],\n+            bc.addEntry(new BookieSocketAddress(addr, port), ledger, new byte[20],\n                         entry, toSend, lc, null, BookieProtocol.FLAG_NONE);\n             lc.waitForComplete();\n         }\n@@ -200,7 +197,7 @@ public static void main(String[] args)\n             toSend.writeLong(ledger);\n             toSend.writeLong(entry);\n             toSend.writerIndex(toSend.capacity());\n-            bc.addEntry(new InetSocketAddress(addr, port), ledger, new byte[20],\n+            bc.addEntry(new BookieSocketAddress(addr, port), ledger, new byte[20],\n                         entry, toSend, tc, null, BookieProtocol.FLAG_NONE);\n         }\n         tc.waitFor(entryCount);"},{"sha":"d5baaa400fa42feda40d91e3cff8de8b987eb0da","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -50,11 +50,13 @@\n import org.apache.commons.cli.PosixParser;\n import org.apache.commons.cli.ParseException;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class BenchReadThroughputLatency {\n-    static Logger LOG = LoggerFactory.getLogger(BenchReadThroughputLatency.class);\n+    static final Logger LOG = LoggerFactory.getLogger(BenchReadThroughputLatency.class);\n \n     private static final Pattern LEDGER_PATTERN = Pattern.compile(\"L([0-9]+)$\");\n \n@@ -149,6 +151,7 @@ private static void usage(Options options) {\n         formatter.printHelp(\"BenchReadThroughputLatency <options>\", options);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public static void main(String[] args) throws Exception {\n         Options options = new Options();\n         options.addOption(\"ledger\", true, \"Ledger to read. If empty, read all ledgers which come available. \" \n@@ -168,7 +171,7 @@ public static void main(String[] args) throws Exception {\n         }\n \n         final String servers = cmd.getOptionValue(\"zookeeper\", \"localhost:2181\");\n-        final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes();\n+        final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes(UTF_8);\n         final int sockTimeout = Integer.valueOf(cmd.getOptionValue(\"sockettimeout\", \"5\"));\n         if (cmd.hasOption(\"ledger\") && cmd.hasOption(\"listen\")) {\n             LOG.error(\"Cannot used -ledger and -listen together\");\n@@ -268,4 +271,4 @@ public void run() {\n             zk.close();\n         }\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"4a21792f54d99045547b0bc8b582f21659b4520a","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -56,8 +56,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n public class BenchThroughputLatency implements AddCallback, Runnable {\n-    static Logger LOG = LoggerFactory.getLogger(BenchThroughputLatency.class);\n+    static final Logger LOG = LoggerFactory.getLogger(BenchThroughputLatency.class);\n \n     BookKeeper bk;\n     LedgerHandle lh[];\n@@ -228,6 +230,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public static void main(String[] args)\n             throws KeeperException, IOException, InterruptedException, ParseException, BKException {\n         Options options = new Options();\n@@ -274,7 +277,7 @@ public static void main(String[] args)\n         final int sockTimeout = Integer.valueOf(cmd.getOptionValue(\"sockettimeout\", \"5\"));\n \n         String coordinationZnode = cmd.getOptionValue(\"coordnode\");\n-        final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes();\n+        final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes(UTF_8);\n \n         String latencyFile = cmd.getOptionValue(\"latencyFile\", \"latencyDump.dat\");\n \n@@ -381,11 +384,11 @@ public void process(WatchedEvent event) {\n \n         long tp = (long)((double)(numcompletions*1000.0)/(double)bench.getDuration());\n \n-        LOG.info(numcompletions + \" completions in \" + bench.getDuration() + \" seconds: \" + tp + \" ops/sec\");\n+        LOG.info(numcompletions + \" completions in \" + bench.getDuration() + \" milliseconds: \" + tp + \" ops/sec\");\n \n         if (zk != null) {\n             zk.create(coordinationZnode + \"/worker-\",\n-                      (\"tp \" + tp + \" duration \" + bench.getDuration()).getBytes(),\n+                      (\"tp \" + tp + \" duration \" + bench.getDuration()).getBytes(UTF_8),\n                       ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n             zk.close();\n         }\n@@ -394,7 +397,7 @@ public void process(WatchedEvent event) {\n         OutputStream fos = new BufferedOutputStream(new FileOutputStream(latencyFile));\n \n         for(Long l: latency) {\n-            fos.write((Long.toString(l)+\"\\t\"+(l/1000000)+ \"ms\\n\").getBytes());\n+            fos.write((Long.toString(l)+\"\\t\"+(l/1000000)+ \"ms\\n\").getBytes(UTF_8));\n         }\n         fos.flush();\n         fos.close();"},{"sha":"ebea877076ec9125ac03e838366b4030cd4fa029","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -30,11 +30,12 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n \n import org.apache.zookeeper.KeeperException;\n \n public class MySqlClient {\n-    static Logger LOG = LoggerFactory.getLogger(MySqlClient.class);\n+    static final Logger LOG = LoggerFactory.getLogger(MySqlClient.class);\n \n     BookKeeper x;\n     LedgerHandle lh;\n@@ -90,8 +91,8 @@ public static void main(String[] args) throws ClassNotFoundException, SQLExcepti\n         }\n         try {\n             MySqlClient c = new MySqlClient(args[2], args[3], args[4]);\n-            c.writeSameEntryBatch(sb.toString().getBytes(), Integer.parseInt(args[0]));\n-            c.writeSameEntry(sb.toString().getBytes(), Integer.parseInt(args[0]));\n+            c.writeSameEntryBatch(sb.toString().getBytes(UTF_8), Integer.parseInt(args[0]));\n+            c.writeSameEntry(sb.toString().getBytes(UTF_8), Integer.parseInt(args[0]));\n             c.closeHandle();\n         } catch (NumberFormatException e) {\n             e.printStackTrace();\n@@ -110,7 +111,7 @@ public static void main(String[] args) throws ClassNotFoundException, SQLExcepti\n     void writeSameEntryBatch(byte[] data, int times) throws InterruptedException, SQLException {\n         start = System.currentTimeMillis();\n         int count = times;\n-        String content = new String(data);\n+        String content = new String(data, UTF_8);\n         System.out.println(\"Data: \" + content + \", \" + data.length);\n         while(count-- > 0) {\n             stmt.addBatch(\"insert into data(content) values(\\\"\" + content + \"\\\");\");\n@@ -125,7 +126,7 @@ void writeSameEntryBatch(byte[] data, int times) throws InterruptedException, SQ\n     void writeSameEntry(byte[] data, int times) throws InterruptedException, SQLException {\n         start = System.currentTimeMillis();\n         int count = times;\n-        String content = new String(data);\n+        String content = new String(data, UTF_8);\n         System.out.println(\"Data: \" + content + \", \" + data.length);\n         while(count-- > 0) {\n             stmt.executeUpdate(\"insert into data(content) values(\\\"\" + content + \"\\\");\");"},{"sha":"b64151c565e4f249dfc3642b002fc3d46b01c935","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -55,6 +55,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n \n /**\n  * This is a simple test program to compare the performance of writing to\n@@ -121,7 +122,7 @@ public void run() {\n         try {\n             int numFiles = Integer.valueOf(cmd.getOptionValue(\"numconcurrent\", \"1\"));\n             int numThreads = Math.min(numFiles, 1000);\n-            byte[] data = sb.toString().getBytes();\n+            byte[] data = sb.toString().getBytes(UTF_8);\n             long runid = System.currentTimeMillis();\n             List<Callable<Long>> clients = new ArrayList<Callable<Long>>();\n "},{"sha":"ec3cd610f532321e7663b6509f167b89065da3b7","filename":"bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -24,28 +24,26 @@\n import org.junit.Test;\n import org.junit.Assert;\n \n-import java.net.InetSocketAddress;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.util.LocalBookKeeper;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.LocalBookKeeper;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.Arrays;\n+import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.Watcher.Event.EventType;\n-import org.apache.zookeeper.Watcher.Event.KeeperState;\n-\n public class TestBenchmark extends BookKeeperClusterTestCase {\n     protected static final Logger LOG = LoggerFactory.getLogger(TestBenchmark.class);\n \n@@ -68,9 +66,9 @@ public void testThroughputLatency() throws Exception {\n \n     @Test(timeout=60000)\n     public void testBookie() throws Exception {\n-        InetSocketAddress bookie = getBookie(0);\n+        BookieSocketAddress bookie = getBookie(0);\n         BenchBookie.main(new String[] {\n-                \"--host\", bookie.getHostName(),\n+                \"--host\", bookie.getSocketAddress().getHostName(),\n                 \"--port\", String.valueOf(bookie.getPort()),\n                 \"--zookeeper\", zkUtil.getZooKeeperConnectString()\n                 });"},{"sha":"daa499170839896c041727bd82e4fc907cf7020d","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -57,6 +57,19 @@ DEFAULT_LOG_CONF=$BK_HOME/conf/log4j.properties\n \n source $BK_HOME/conf/bkenv.sh\n \n+# Check for the java to use\n+if [[ -z $JAVA_HOME ]]; then\n+    JAVA=$(which java)\n+    if [ $? = 0 ]; then\n+        echo \"JAVA_HOME not set, using java from PATH. ($JAVA)\"\n+    else\n+        echo \"Error: JAVA_HOME not set, and no java executable found in $PATH.\" 1>&2\n+        exit 1\n+    fi\n+else\n+    JAVA=$JAVA_HOME/bin/java\n+fi\n+\n # exclude tests jar\n RELEASE_JAR=`ls $BK_HOME/bookkeeper-server-*.jar 2> /dev/null | grep -v tests | tail -1` \n if [ $? == 0 ]; then\n@@ -92,6 +105,8 @@ Environment variables:\n    BOOKIE_EXTRA_OPTS      Extra options to be passed to the jvm\n    BOOKIE_EXTRA_CLASSPATH Add extra paths to the bookkeeper classpath\n    ENTRY_FORMATTER_CLASS  Entry formatter class to format entries.\n+   BOOKIE_PID_DIR         Folder where the Bookie server PID file should be stored\n+   BOOKIE_STOP_TIMEOUT    Wait time before forcefully kill the Bookie server instance, if the stop is not successful\n \n These variable can also be set in conf/bkenv.sh\n EOF\n@@ -148,7 +163,7 @@ BOOKIE_CLASSPATH=\"$BOOKIE_JAR:$BOOKIE_CLASSPATH:$BOOKIE_EXTRA_CLASSPATH\"\n BOOKIE_CLASSPATH=\"`dirname $BOOKIE_LOG_CONF`:$BOOKIE_CLASSPATH\"\n OPTS=\"$OPTS -Dlog4j.configuration=`basename $BOOKIE_LOG_CONF`\"\n \n-OPTS=\"-cp $BOOKIE_CLASSPATH $OPTS $BOOKIE_EXTRA_OPTS\"\n+OPTS=\"-cp $BOOKIE_CLASSPATH $OPTS\"\n \n OPTS=\"$OPTS $BOOKIE_EXTRA_OPTS\"\n \n@@ -168,21 +183,21 @@ OPTS=\"$OPTS -Dbookkeeper.log.file=$BOOKIE_LOG_FILE\"\n #Change to BK_HOME to support relative paths\n cd \"$BK_HOME\"\n if [ $COMMAND == \"bookie\" ]; then\n-    exec java $OPTS $JMX_ARGS org.apache.bookkeeper.proto.BookieServer --conf $BOOKIE_CONF $@\n+    exec $JAVA $OPTS $JMX_ARGS org.apache.bookkeeper.proto.BookieServer --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"autorecovery\" ]; then\n-    exec java $OPTS $JMX_ARGS org.apache.bookkeeper.replication.AutoRecoveryMain --conf $BOOKIE_CONF $@\n+    exec $JAVA $OPTS $JMX_ARGS org.apache.bookkeeper.replication.AutoRecoveryMain --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"localbookie\" ]; then\n     NUMBER=$1\n     shift\n-    exec java $OPTS $JMX_ARGS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $BOOKIE_CONF $@\n+    exec $JAVA $OPTS $JMX_ARGS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $BOOKIE_CONF $@\n elif [ $COMMAND == \"upgrade\" ]; then\n-    exec java $OPTS org.apache.bookkeeper.bookie.FileSystemUpgrade --conf $BOOKIE_CONF $@\n+    exec $JAVA $OPTS org.apache.bookkeeper.bookie.FileSystemUpgrade --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"shell\" ]; then\n     ENTRY_FORMATTER_ARG=\"-DentryFormatterClass=${ENTRY_FORMATTER_CLASS:-org.apache.bookkeeper.util.StringEntryFormatter}\"\n-    exec java $OPTS $ENTRY_FORMATTER_ARG org.apache.bookkeeper.bookie.BookieShell -conf $BOOKIE_CONF $@\n+    exec $JAVA $OPTS $ENTRY_FORMATTER_ARG org.apache.bookkeeper.bookie.BookieShell -conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"help\" ]; then\n     bookkeeper_help;\n else\n-    exec java $OPTS $COMMAND $@\n+    exec $JAVA $OPTS $COMMAND $@\n fi\n "},{"sha":"d27236d25a116db3592f9461c90959c58058023d","filename":"bookkeeper-server/bin/bookkeeper-cluster.sh","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/bin/bookkeeper-cluster.sh","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/bin/bookkeeper-cluster.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper-cluster.sh?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,135 @@\n+#!/usr/bin/env bash\n+#\n+#/**\n+# * Licensed to the Apache Software Foundation (ASF) under one\n+# * or more contributor license agreements.  See the NOTICE file\n+# * distributed with this work for additional information\n+# * regarding copyright ownership.  The ASF licenses this file\n+# * to you under the Apache License, Version 2.0 (the\n+# * \"License\"); you may not use this file except in compliance\n+# * with the License.  You may obtain a copy of the License at\n+# *\n+# *     http://www.apache.org/licenses/LICENSE-2.0\n+# *\n+# * Unless required by applicable law or agreed to in writing, software\n+# * distributed under the License is distributed on an \"AS IS\" BASIS,\n+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# * See the License for the specific language governing permissions and\n+# * limitations under the License.\n+# */\n+\n+\n+BINDIR=`dirname \"$0\"`\n+BK_HOME=`cd $BINDIR/..;pwd`\n+if [ -f $BK_HOME/conf/bkenv.sh ]\n+then\n+ . $BK_HOME/conf/bkenv.sh\n+fi\n+\n+BKCFG=$BK_HOME/conf/bk_server.conf\n+CLUSTER=$BK_HOME/conf/bookies\n+usage() {\n+    cat <<EOF\n+Usage: bookkeeper-cluster.sh (start|stop|kill)\n+\n+The list of hosts in the cluster must be available in\n+$CLUSTER\n+with one hostname per line.\n+\n+BookKeeper must be installed in the same location on each host.\n+EOF\n+}\n+\n+if [ ! -f $CLUSTER ]; then\n+    echo -e \"\\nCluster file ($CLUSTER) does not exist\\n\"\n+    usage\n+    exit 1\n+fi\n+\n+NUMHOSTS=$(wc -l $CLUSTER | awk '{print $1}')\n+if [ \"$NUMHOSTS\" = \"0\" ]; then\n+    echo -e \"\\nCluster file ($CLUSTER) is empty\\n\"\n+    usage\n+    exit 1\n+fi\n+\n+bookies_list() {\n+    $BINDIR/bookkeeper shell listbookies 2> /dev/null\n+}\n+\n+bookies_available() {\n+    bookies_list | wc -l\n+}\n+\n+start() {\n+    for B in `cat $CLUSTER`; do\n+\techo \"Starting bookie on $B\"\n+\tssh $B $BINDIR/bookkeeper-daemon.sh start bookie\n+    done\n+\n+    BOOKIESSTARTED=0\n+    COUNT=0\n+\n+    while [ $BOOKIESSTARTED -lt $NUMHOSTS ];  do\n+\tsleep 1\n+\tCOUNT=$(($COUNT+1))\n+\tif [ $COUNT = 20 ]; then\n+\t    echo \"Could not start all bookies\"\n+\t    exit 1\n+\tfi\n+\n+\tBOOKIESSTARTED=$(bookies_available)\n+\n+\techo \"$BOOKIESSTARTED bookies started\"\n+    done\n+}\n+\n+stop() {\n+    for B in `cat $CLUSTER`; do\n+\techo \"Stopping bookie on $B\"\n+\tssh $B $BINDIR/bookkeeper-daemon.sh stop bookie $FORCE\n+    done\n+\n+    COUNT=0\n+    BOOKIESSTARTED=$NUMHOSTS\n+    while [ $BOOKIESSTARTED -gt 0 ];  do\n+\tsleep 1\n+\t\n+\tCOUNT=$((COUNT+1))\n+\tif [ $COUNT = 20 ]; then\n+\t    echo \"Couldn not stop all bookies. $BOOKIESSTARTED still running\"\n+\t    exit 2\n+\tfi\n+\n+\tBOOKIESSTARTED=$(bookies_available)\n+    done\n+}\n+\n+status() {\n+    BOOKIESSTARTED=$(bookies_available)\n+    echo \"$BOOKIESSTARTED bookies running\"\n+    COUNT=1\n+    for b in $(bookies_list); do\n+\techo \"$COUNT: $b\"\n+\tCOUNT=$(($COUNT+1))\n+    done\n+}\n+\n+case $1 in\n+    start)\n+\tstart\n+\t;;\n+    stop)\n+\tstop\n+\t;;\n+    kill)\n+\tFORCE=\"-force\"\n+\tstop\n+\t;;\n+    status)\n+\tstatus\n+\t;;\n+    *)\n+\tusage\n+\t;;\n+esac"},{"sha":"766f528dd0db29250ae73529b810724d584cec6b","filename":"bookkeeper-server/bin/bookkeeper-daemon.sh","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/bin/bookkeeper-daemon.sh","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/bin/bookkeeper-daemon.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper-daemon.sh?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -140,8 +140,7 @@ case $startStop in\n          done\n         \n         if [ \"$count\" != \"$BOOKIE_STOP_TIMEOUT\" ]; then\n-                 echo \"Shutdown completed.\"\n-                exit 0\n+            echo \"Shutdown completed.\"\n         fi\n                  \n         if kill -0 $TARGET_PID > /dev/null 2>&1; then"},{"sha":"e38ea2b83a72f024637cdf090ea4eefbbb598c33","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":101,"deletions":3,"changes":104,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/conf/bk_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/conf/bk_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bk_server.conf?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -25,6 +25,23 @@\n # Port that bookie server listen on\n bookiePort=3181\n \n+# Set the network interface that the bookie should listen on.\n+# If not set, the bookie will listen on all interfaces.\n+#listeningInterface=eth0\n+\n+# Whether the bookie allowed to use a loopback interface as its primary\n+# interface(i.e. the interface it uses to establish its identity)?\n+# By default, loopback interfaces are not allowed as the primary\n+# interface.\n+# Using a loopback interface as the primary interface usually indicates\n+# a configuration error. For example, its fairly common in some VPS setups\n+# to not configure a hostname, or to have the hostname resolve to\n+# 127.0.0.1. If this is the case, then all bookies in the cluster will\n+# establish their identities as 127.0.0.1:3181, and only one will be able\n+# to join the cluster. For VPSs configured like this, you should explicitly\n+# set the listening interface.\n+#allowLoopback=false\n+\n # Directory Bookkeeper outputs its write ahead log\n journalDirectory=/tmp/bk-txn\n \n@@ -37,6 +54,8 @@ journalDirectory=/tmp/bk-txn\n # which reduce the contention between random i/o and sequential write.\n # It is possible to run with a single disk, but performance will be significantly lower.\n ledgerDirectories=/tmp/bk-data\n+# Directories to store index files. If not specified, will use ledgerDirectories to store.\n+# indexDirectories=/tmp/bk-data\n \n # Ledger Manager Class\n # What kind of ledger manager is used to manage how ledgers are stored, managed\n@@ -48,6 +67,9 @@ ledgerDirectories=/tmp/bk-data\n # store all ledgers.\n # zkLedgersRootPath=/ledgers\n \n+# Enable/Disable entry logger preallocation\n+# entryLogFilePreallocationEnabled=true\n+\n # Max file size of entry logger, in bytes\n # A new entry log file will be created when the old one reaches the file size limitation\n # logSizeLimit=2147483648\n@@ -74,6 +96,19 @@ ledgerDirectories=/tmp/bk-data\n # If it is set to less than zero, the major compaction is disabled. \n # majorCompactionInterval=86400 \n \n+# Set the maximum number of entries which can be compacted without flushing.\n+# When compacting, the entries are written to the entrylog and the new offsets\n+# are cached in memory. Once the entrylog is flushed the index is updated with\n+# the new offsets. This parameter controls the number of entries added to the\n+# entrylog before a flush is forced. A higher value for this parameter means\n+# more memory will be used for offsets. Each offset consists of 3 longs.\n+# This parameter should _not_ be modified unless you know what you're doing.\n+# The default is 100,000.\n+#compactionMaxOutstandingRequests=100000\n+\n+# Set the rate at which compaction will readd entries. The unit is adds per second.\n+#compactionRate=1000\n+\n # Max file size of journal file, in mega bytes\n # A new journal file will be created when the old one reaches the file size limitation\n #\n@@ -84,6 +119,31 @@ ledgerDirectories=/tmp/bk-data\n #\n # journalMaxBackups=5\n \n+# How much space should we pre-allocate at a time in the journal\n+# journalPreAllocSizeMB=16\n+\n+# Size of the write buffers used for the journal\n+# journalWriteBufferSizeKB=64\n+\n+# Should we remove pages from page cache after force write\n+# journalRemoveFromPageCache=false\n+\n+# Should we group journal force writes, which optimize group commit\n+# for higher throughput\n+# journalAdaptiveGroupWrites=true\n+\n+# Maximum latency to impose on a journal write to achieve grouping\n+# journalMaxGroupWaitMSec=200\n+\n+# Maximum writes to buffer to achieve grouping\n+# journalBufferedWritesThreshold=524288\n+\n+# If we should flush the journal when journal queue is empty\n+# journalFlushWhenQueueEmpty=false\n+\n+# The number of threads that should handle journal callbacks\n+# numJournalCallbackThreads=1\n+\n # How long the interval to trigger next garbage collection, in milliseconds\n # Since garbage collection is running in background, too frequent gc\n # will heart performance. It is better to give a higher number of gc\n@@ -159,10 +219,9 @@ zkTimeout=10000\n # the limitation of number of index pages.\n # pageLimit=-1\n \n-#If all ledger directories configured are full, then support only read \n-#requests for clients.\n+#If all ledger directories configured are full, then support only read requests for clients.\n #If \"readOnlyModeEnabled=true\" then on all ledger disks full, bookie will be converted\n-#to read-only mode and serve only read requests. Else bookie will get shutdown.\n+#to read-only mode and serve only read requests. Otherwise the bookie will be shutdown.\n #By default this will be disabled.\n #readOnlyModeEnabled=false\n \n@@ -177,3 +236,42 @@ zkTimeout=10000\n #Disk check interval in milli seconds, interval to check the ledger dirs usage.\n #Default is 10000\n #diskCheckInterval=10000\n+\n+# Interval at which the auditor will do a check of all ledgers in the cluster.\n+# By default this runs once a week. The interval is set in seconds.\n+# To disable the periodic check completely, set this to 0.\n+# Note that periodic checking will put extra load on the cluster, so it should\n+# not be run more frequently than once a day.\n+#auditorPeriodicCheckInterval=604800\n+\n+# The interval between auditor bookie checks.\n+# The auditor bookie check, checks ledger metadata to see which bookies should\n+# contain entries for each ledger. If a bookie which should contain entries is\n+# unavailable, then the ledger containing that entry is marked for recovery.\n+# Setting this to 0 disabled the periodic check. Bookie checks will still\n+# run when a bookie fails.\n+# The interval is specified in seconds.\n+#auditorPeriodicBookieCheckInterval=86400\n+\n+# number of threads that should handle write requests. if zero, the writes would\n+# be handled by netty threads directly.\n+# numAddWorkerThreads=1\n+\n+# number of threads that should handle read requests. if zero, the reads would\n+# be handled by netty threads directly.\n+# numReadWorkerThreads=1\n+\n+# The number of bytes we should use as capacity for BufferedReadChannel. Default is 512 bytes.\n+# readBufferSizeBytes=512\n+\n+# The number of bytes used as capacity for the write buffer. Default is 64KB.\n+# writeBufferSizeBytes=65536\n+\n+# Whether the bookie should use its hostname to register with the\n+# co-ordination service(eg: zookeeper service).\n+# When false, bookie will use its ipaddress for the registration.\n+# Defaults to false.\n+#useHostNameAsBookieID=false\n+\n+# Stats Provider Class\n+#statsProviderClass=org.apache.bookkeeper.stats.CodahaleMetricsProvider"},{"sha":"c85b295c23dec0ebee6f361f73e6beaf478974c5","filename":"bookkeeper-server/conf/bkenv.sh","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/conf/bkenv.sh","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/conf/bkenv.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bkenv.sh?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -20,6 +20,9 @@\n # * limitations under the License.\n # */\n \n+# Set JAVA_HOME here to override the environment setting\n+# JAVA_HOME=\n+\n # default settings for starting bookkeeper\n \n # Configuration file of settings used in bookie server\n@@ -41,4 +44,7 @@\n #BOOKIE_PID_DIR=\n \n #Wait time before forcefully kill the Bookie server instance, if the stop is not successful\n-#BOOKIE_STOP_TIMEOUT=\n\\ No newline at end of file\n+#BOOKIE_STOP_TIMEOUT=\n+\n+#Entry formatter class to format entries.\n+#ENTRY_FORMATTER_CLASS="},{"sha":"adc8ae8fe85e052e342c07015b6f118a5f77e77b","filename":"bookkeeper-server/pom.xml","status":"modified","additions":113,"deletions":8,"changes":121,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.0-SNAPSHOT</version>\n+    <version>4.3.0</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-server</artifactId>\n@@ -32,16 +32,21 @@\n     <project.libdir>${basedir}/lib</project.libdir>\n   </properties>\n   <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper.stats</groupId>\n+      <artifactId>bookkeeper-stats-api</artifactId>\n+      <version>${project.parent.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>com.google.protobuf</groupId>\n       <artifactId>protobuf-java</artifactId>\n-      <version>2.4.1</version>\n+      <version>${protobuf.version}</version>\n       <scope>compile</scope>\n     </dependency>\n     <dependency>\n       <groupId>com.google.guava</groupId>\n       <artifactId>guava</artifactId>\n-      <version>13.0.1</version>\n+      <version>${guava.version}</version>\n     </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n@@ -62,20 +67,20 @@\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n       <artifactId>zookeeper</artifactId>\n-      <version>3.4.3</version>\n+      <version>${zookeeper.version}</version>\n       <scope>compile</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n       <artifactId>zookeeper</artifactId>\n-      <version>3.4.3</version>\n+      <version>${zookeeper.version}</version>\n       <type>test-jar</type>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.jboss.netty</groupId>\n+      <groupId>io.netty</groupId>\n       <artifactId>netty</artifactId>\n-      <version>3.2.4.Final</version>\n+      <version>${netty.version}</version>\n       <scope>compile</scope>\n     </dependency>\n     <dependency>\n@@ -98,6 +103,11 @@\n       <artifactId>commons-io</artifactId>\n       <version>2.1</version>\n     </dependency>\n+    <dependency>\n+      <groupId>net.java.dev.jna</groupId>\n+      <artifactId>jna</artifactId>\n+      <version>3.2.7</version>\n+    </dependency>\n     <!--\n         Annoying dependency we need to include because\n         zookeeper uses log4j and so we transatively do, but\n@@ -151,9 +161,77 @@\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server-compat420</artifactId>\n+      <version>4.2.0</version>\n+      <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>bookkeeper-server</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n   </dependencies>\n   <build>\n     <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>2.1</version>\n+        <configuration>\n+          <!-- put your configurations here -->\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <createDependencyReducedPom>true</createDependencyReducedPom>\n+              <artifactSet>\n+                <includes>\n+                  <include>com.google.protobuf:protobuf-java</include>\n+                  <include>com.google.guava:guava</include>\n+                </includes>\n+              </artifactSet>\n+              <minimizeJar>true</minimizeJar>\n+              <relocations>\n+                <relocation>\n+                  <pattern>com.google</pattern>\n+                  <shadedPattern>bk-shade.com.google</shadedPattern>\n+                </relocation>\n+              </relocations>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>license-maven-plugin</artifactId>\n+        <version>1.6</version>\n+        <configuration>\n+          <canUpdateCopyright>false</canUpdateCopyright>\n+          <roots><root>${project.basedir}</root></roots>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>update-pom-license</id>\n+            <goals>\n+              <goal>update-file-header</goal>\n+            </goals>\n+            <phase>package</phase>\n+            <configuration>\n+              <licenseName>apache_v2</licenseName>\n+              <includes>\n+                <include>dependency-reduced-pom.xml</include>\n+              </includes>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-jar-plugin</artifactId>\n@@ -183,6 +261,7 @@\n           <excludes>\n             <!-- exclude generated file //-->\n             <exclude>**/DataFormats.java</exclude>\n+            <exclude>**/BookkeeperProtocol.java</exclude>\n           </excludes>\n         </configuration>\n       </plugin>\n@@ -217,7 +296,13 @@\n               <directory>${project.libdir}</directory>\n               <followSymlinks>false</followSymlinks>\n             </fileset>\n-\t  </filesets>\n+            <fileset>\n+              <directory>${project.basedir}</directory>\n+              <includes>\n+                <include>dependency-reduced-pom.xml</include>\n+              </includes>\n+            </fileset>\n+          </filesets>\n \t</configuration>\n       </plugin>\n     </plugins>\n@@ -250,5 +335,25 @@\n         </plugins>\n       </build>\n     </profile>\n+    <profile>\n+      <id>twitter-science-provider</id>\n+      <dependencies>\n+        <dependency>\n+          <groupId>org.apache.bookkeeper.stats</groupId>\n+          <artifactId>twitter-science-provider</artifactId>\n+          <version>${project.parent.version}</version>\n+        </dependency>\n+      </dependencies>\n+    </profile>\n+    <profile>\n+      <id>codahale-metrics-provider</id>\n+      <dependencies>\n+        <dependency>\n+          <groupId>org.apache.bookkeeper.stats</groupId>\n+          <artifactId>codahale-metrics-provider</artifactId>\n+          <version>${project.parent.version}</version>\n+        </dependency>\n+      </dependencies>\n+    </profile>\n   </profiles>\n </project>"},{"sha":"ddd142ece040bfa3fbc285e958407876ac45edc7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+public interface BookKeeperServerStats {\n+\n+    public final static String SERVER_SCOPE = \"bookkeeper_server\";\n+    public final static String BOOKIE_SCOPE = \"bookie\";\n+\n+    public final static String SERVER_STATUS = \"SERVER_STATUS\";\n+\n+    // Server Operations\n+    public final static String ADD_ENTRY_REQUEST = \"ADD_ENTRY_REQUEST\";\n+    public final static String ADD_ENTRY = \"ADD_ENTRY\";\n+    public final static String READ_ENTRY_REQUEST = \"READ_ENTRY_REQUEST\";\n+    public final static String READ_ENTRY = \"READ_ENTRY\";\n+    public final static String READ_ENTRY_FENCE_REQUEST = \"READ_ENTRY_FENCE_REQUEST\";\n+    public final static String READ_ENTRY_FENCE_WAIT = \"READ_ENTRY_FENCE_WAIT\";\n+    public final static String READ_ENTRY_FENCE_READ = \"READ_ENTRY_FENCE_READ\";\n+\n+    // Journal Stats\n+    public final static String JOURNAL_ADD_ENTRY = \"JOURNAL_ADD_ENTRY\";\n+    public final static String JOURNAL_MEM_ADD_ENTRY = \"JOURNAL_MEM_ADD_ENTRY\";\n+    public final static String JOURNAL_PREALLOCATION = \"JOURNAL_PREALLOCATION\";\n+    public final static String JOURNAL_FORCE_WRITE_LATENCY = \"JOURNAL_FORCE_WRITE_LATENCY\";\n+    public final static String JOURNAL_FORCE_WRITE_BATCH_ENTRIES = \"JOURNAL_FORCE_WRITE_BATCH_ENTRIES\";\n+    public final static String JOURNAL_FORCE_WRITE_BATCH_BYTES = \"JOURNAL_FORCE_WRITE_BATCH_BYTES\";\n+    public final static String JOURNAL_FLUSH_LATENCY = \"JOURNAL_FLUSH_LATENCY\";\n+    public final static String JOURNAL_CREATION_LATENCY = \"JOURNAL_CREATION_LATENCY\";\n+\n+    // Ledger Storage Stats\n+    public final static String STORAGE_GET_OFFSET = \"STORAGE_GET_OFFSET\";\n+    public final static String STORAGE_GET_ENTRY = \"STORAGE_GET_ENTRY\";\n+    public final static String SKIP_LIST_GET_ENTRY = \"SKIP_LIST_GET_ENTRY\";\n+    public final static String SKIP_LIST_PUT_ENTRY = \"SKIP_LIST_PUT_ENTRY\";\n+    public final static String SKIP_LIST_SNAPSHOT = \"SKIP_LIST_SNAPSHOT\";\n+\n+    // Counters\n+    public final static String JOURNAL_WRITE_BYTES = \"JOURNAL_WRITE_BYTES\";\n+    public final static String JOURNAL_QUEUE_SIZE = \"JOURNAL_QUEUE_SIZE\";\n+    public final static String READ_BYTES = \"READ_BYTES\";\n+    public final static String WRITE_BYTES = \"WRITE_BYTES\";\n+    public final static String NUM_MINOR_COMP = \"NUM_MINOR_COMP\";\n+    public final static String NUM_MAJOR_COMP = \"NUM_MAJOR_COMP\";\n+    public final static String JOURNAL_FORCE_WRITE_QUEUE_SIZE = \"JOURNAL_FORCE_WRITE_QUEUE_SIZE\";\n+    public final static String JOURNAL_NUM_FORCE_WRITES = \"JOURNAL_NUM_FORCE_WRITES\";\n+    public final static String JOURNAL_NUM_FLUSH_EMPTY_QUEUE = \"JOURNAL_NUM_FLUSH_EMPTY_QUEUE\";\n+    public final static String JOURNAL_NUM_FLUSH_MAX_OUTSTANDING_BYTES = \"JOURNAL_NUM_FLUSH_MAX_OUTSTANDING_BYTES\";\n+    public final static String JOURNAL_NUM_FLUSH_MAX_WAIT = \"JOURNAL_NUM_FLUSH_MAX_WAIT\";\n+    public final static String SKIP_LIST_FLUSH_BYTES = \"SKIP_LIST_FLUSH_BYTES\";\n+    public final static String SKIP_LIST_THROTTLING = \"SKIP_LIST_THROTTLING\";\n+    public final static String READ_LAST_ENTRY_NOENTRY_ERROR = \"READ_LAST_ENTRY_NOENTRY_ERROR\";\n+    public final static String LEDGER_CACHE_NUM_EVICTED_LEDGERS = \"LEDGER_CACHE_NUM_EVICTED_LEDGERS\";\n+\n+    // Gauge\n+    public final static String NUM_INDEX_PAGES = \"NUM_INDEX_PAGES\";\n+    public final static String NUM_OPEN_LEDGERS = \"NUM_OPEN_LEDGERS\";\n+    public final static String JOURNAL_FORCE_WRITE_GROUPING_COUNT = \"JOURNAL_FORCE_WRITE_GROUPING_COUNT\";\n+    public final static String NUM_PENDING_READ = \"NUM_PENDING_READ\";\n+    public final static String NUM_PENDING_ADD = \"NUM_PENDING_ADD\";\n+\n+    // LedgerDirs Stats\n+    public final static String LD_LEDGER_SCOPE = \"ledger\";\n+    public final static String LD_INDEX_SCOPE = \"index\";\n+    public final static String LD_WRITABLE_DIRS = \"writable_dirs\";\n+\n+}"},{"sha":"54a3c9fbfaf9f372b569ef50c7f5533b107133d8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":370,"deletions":305,"changes":675,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,64 +21,75 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.io.File;\n import java.io.FileNotFoundException;\n-import java.io.IOException;\n import java.io.FilenameFilter;\n-import java.net.InetAddress;\n+import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.HashMap;\n import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.apache.bookkeeper.meta.LedgerManager;\n-import org.apache.bookkeeper.meta.LedgerManagerFactory;\n-import org.apache.bookkeeper.bookie.BookieException;\n-import org.apache.bookkeeper.bookie.GarbageCollectorThread.SafeEntryAdder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.net.DNS;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.NodeExistsException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.common.annotations.VisibleForTesting;\n \n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_LEDGER_SCOPE;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_INDEX_SCOPE;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.READ_BYTES;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SERVER_STATUS;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.WRITE_BYTES;\n+\n /**\n  * Implements a bookie.\n  *\n  */\n+public class Bookie extends BookieCriticalThread {\n \n-public class Bookie extends Thread {\n-\n-    static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n \n     final File journalDirectory;\n     final ServerConfiguration conf;\n@@ -97,7 +108,8 @@\n     // ZK registration path for this bookie\n     private final String bookieRegistrationPath;\n \n-    private LedgerDirsManager ledgerDirsManager;\n+    private final LedgerDirsManager ledgerDirsManager;\n+    private LedgerDirsManager indexDirsManager;\n \n     // ZooKeeper client instance for the Bookie\n     ZooKeeper zk;\n@@ -113,15 +125,20 @@\n     BookieBean jmxBookieBean;\n     BKMBeanInfo jmxLedgerStorageBean;\n \n-    Map<Long, byte[]> masterKeyCache = Collections.synchronizedMap(new HashMap<Long, byte[]>());\n+    final ConcurrentMap<Long, byte[]> masterKeyCache = new ConcurrentHashMap<Long, byte[]>();\n \n     final private String zkBookieRegPath;\n+    final private String zkBookieReadOnlyPath;\n \n     final private AtomicBoolean readOnly = new AtomicBoolean(false);\n \n+    // Expose Stats\n+    private final Counter writeBytes;\n+    private final Counter readBytes;\n+\n     public static class NoLedgerException extends IOException {\n         private static final long serialVersionUID = 1L;\n-        private long ledgerId;\n+        private final long ledgerId;\n         public NoLedgerException(long ledgerId) {\n             super(\"Ledger \" + ledgerId + \" not found\");\n             this.ledgerId = ledgerId;\n@@ -132,8 +149,8 @@ public long getLedgerId() {\n     }\n     public static class NoEntryException extends IOException {\n         private static final long serialVersionUID = 1L;\n-        private long ledgerId;\n-        private long entryId;\n+        private final long ledgerId;\n+        private final long entryId;\n         public NoEntryException(long ledgerId, long entryId) {\n             this(\"Entry \" + entryId + \" not found in \" + ledgerId, ledgerId, entryId);\n         }\n@@ -156,7 +173,7 @@ public long getEntry() {\n     static class NopWriteCallback implements WriteCallback {\n         @Override\n         public void writeComplete(int rc, long ledgerId, long entryId,\n-                                  InetSocketAddress addr, Object ctx) {\n+                                  BookieSocketAddress addr, Object ctx) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Finished writing entry {} @ ledger {} for {} : {}\",\n                           new Object[] { entryId, ledgerId, addr, rc });\n@@ -193,8 +210,11 @@ public T get() throws InterruptedException {\n             return value;\n         }\n         @Override\n-        public T get(long timeout, TimeUnit unit) throws InterruptedException {\n-            latch.await(timeout, unit);\n+        public T get(long timeout, TimeUnit unit)\n+            throws InterruptedException, TimeoutException {\n+            if (!latch.await(timeout, unit)) {\n+                throw new TimeoutException(\"Timed out waiting for latch\");\n+            }\n             return value;\n         }\n \n@@ -220,7 +240,7 @@ void setDone(T value) {\n \n         @Override\n         public void writeComplete(int rc, long ledgerId, long entryId,\n-                                  InetSocketAddress addr, Object ctx) {\n+                                  BookieSocketAddress addr, Object ctx) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Finished writing entry {} @ ledger {} for {} : {}\",\n                           new Object[] { entryId, ledgerId, addr, rc });\n@@ -233,142 +253,6 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n         }\n     }\n \n-    /**\n-     * SyncThread is a background thread which flushes ledger index pages periodically.\n-     * Also it takes responsibility of garbage collecting journal files.\n-     *\n-     * <p>\n-     * Before flushing, SyncThread first records a log marker {journalId, journalPos} in memory,\n-     * which indicates entries before this log marker would be persisted to ledger files.\n-     * Then sync thread begins flushing ledger index pages to ledger index files, flush entry\n-     * logger to ensure all entries persisted to entry loggers for future reads.\n-     * </p>\n-     * <p>\n-     * After all data has been persisted to ledger index files and entry loggers, it is safe\n-     * to persist the log marker to disk. If bookie failed after persist log mark,\n-     * bookie is able to relay journal entries started from last log mark without losing\n-     * any entries.\n-     * </p>\n-     * <p>\n-     * Those journal files whose id are less than the log id in last log mark, could be\n-     * removed safely after persisting last log mark. We provide a setting to let user keeping\n-     * number of old journal files which may be used for manual recovery in critical disaster.\n-     * </p>\n-     */\n-    class SyncThread extends Thread {\n-        volatile boolean running = true;\n-        // flag to ensure sync thread will not be interrupted during flush\n-        final AtomicBoolean flushing = new AtomicBoolean(false);\n-        // make flush interval as a parameter\n-        final int flushInterval;\n-        public SyncThread(ServerConfiguration conf) {\n-            super(\"SyncThread\");\n-            flushInterval = conf.getFlushInterval();\n-            LOG.debug(\"Flush Interval : {}\", flushInterval);\n-        }\n-\n-        private Object suspensionLock = new Object();\n-        private boolean suspended = false;\n-\n-        /**\n-         * Suspend sync thread. (for testing)\n-         */\n-        @VisibleForTesting\n-        public void suspendSync() {\n-            synchronized(suspensionLock) {\n-                suspended = true;\n-            }\n-        }\n-\n-        /**\n-         * Resume sync thread. (for testing)\n-         */\n-        @VisibleForTesting\n-        public void resumeSync() {\n-            synchronized(suspensionLock) {\n-                suspended = false;\n-                suspensionLock.notify();\n-            }\n-        }\n-\n-        @Override\n-        public void run() {\n-            try {\n-                while (running) {\n-                    synchronized (this) {\n-                        try {\n-                            wait(flushInterval);\n-                            if (!ledgerStorage.isFlushRequired()) {\n-                                continue;\n-                            }\n-                        } catch (InterruptedException e) {\n-                            Thread.currentThread().interrupt();\n-                            continue;\n-                        }\n-                    }\n-                    synchronized (suspensionLock) {\n-                        while (suspended) {\n-                            suspensionLock.wait();\n-                        }\n-                    }\n-                    // try to mark flushing flag to make sure it would not be interrupted\n-                    // by shutdown during flushing. otherwise it will receive\n-                    // ClosedByInterruptException which may cause index file & entry logger\n-                    // closed and corrupted.\n-                    if (!flushing.compareAndSet(false, true)) {\n-                        // set flushing flag failed, means flushing is true now\n-                        // indicates another thread wants to interrupt sync thread to exit\n-                        break;\n-                    }\n-\n-                    // journal mark log\n-                    journal.markLog();\n-\n-                    boolean flushFailed = false;\n-                    try {\n-                        ledgerStorage.flush();\n-                    } catch (NoWritableLedgerDirException e) {\n-                        flushFailed = true;\n-                        flushing.set(false);\n-                        transitionToReadOnlyMode();\n-                    } catch (IOException e) {\n-                        LOG.error(\"Exception flushing Ledger\", e);\n-                        flushFailed = true;\n-                    }\n-\n-                    // if flush failed, we should not roll last mark, otherwise we would\n-                    // have some ledgers are not flushed and their journal entries were lost\n-                    if (!flushFailed) {\n-                        try {\n-                            journal.rollLog();\n-                            journal.gcJournals();\n-                        } catch (NoWritableLedgerDirException e) {\n-                            flushing.set(false);\n-                            transitionToReadOnlyMode();\n-                        }\n-                    }\n-\n-                    // clear flushing flag\n-                    flushing.set(false);\n-                }\n-            } catch (Throwable t) {\n-                LOG.error(\"Exception in SyncThread\", t);\n-                triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n-            }\n-        }\n-\n-        // shutdown sync thread\n-        void shutdown() throws InterruptedException {\n-            running = false;\n-            if (flushing.compareAndSet(false, true)) {\n-                // if setting flushing flag succeed, means syncThread is not flushing now\n-                // it is safe to interrupt itself now \n-                this.interrupt();\n-            }\n-            this.join();\n-        }\n-    }\n-\n     public static void checkDirectoryStructure(File dir) throws IOException {\n         if (!dir.exists()) {\n             File parent = dir.getParentFile();\n@@ -377,6 +261,7 @@ public static void checkDirectoryStructure(File dir) throws IOException {\n \n             final AtomicBoolean oldDataExists = new AtomicBoolean(false);\n             parent.list(new FilenameFilter() {\n+                    @Override\n                     public boolean accept(File dir, String name) {\n                         if (name.endsWith(\".txn\") || name.endsWith(\".idx\") || name.endsWith(\".log\")) {\n                             oldDataExists.set(true);\n@@ -403,37 +288,55 @@ public boolean accept(File dir, String name) {\n      * first run and the filesystem structure is up to date.\n      */\n     private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException {\n+        List<File> allLedgerDirs = new ArrayList<File>(ledgerDirsManager.getAllLedgerDirs().size()\n+                                                     + indexDirsManager.getAllLedgerDirs().size());\n+        allLedgerDirs.addAll(ledgerDirsManager.getAllLedgerDirs());\n+        if (indexDirsManager != ledgerDirsManager) {\n+            allLedgerDirs.addAll(indexDirsManager.getAllLedgerDirs());\n+        }\n         if (zk == null) { // exists only for testing, just make sure directories are correct\n             checkDirectoryStructure(journalDirectory);\n-            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n+            for (File dir : allLedgerDirs) {\n                     checkDirectoryStructure(dir);\n             }\n             return;\n         }\n         try {\n-            String instanceId = getInstanceId(zk);\n             boolean newEnv = false;\n-            Cookie masterCookie = Cookie.generateCookie(conf);\n+            List<File> missedCookieDirs = new ArrayList<File>();\n+            Cookie journalCookie = null;\n+            // try to read cookie from journal directory.\n+            try {\n+                journalCookie = Cookie.readFromDirectory(journalDirectory);\n+                if (journalCookie.isBookieHostCreatedFromIp()) {\n+                    conf.setUseHostNameAsBookieID(false);\n+                } else {\n+                    conf.setUseHostNameAsBookieID(true);\n+                }\n+            } catch (FileNotFoundException fnf) {\n+                newEnv = true;\n+                missedCookieDirs.add(journalDirectory);\n+            }\n+            String instanceId = getInstanceId(zk);\n+            Cookie.Builder builder = Cookie.generateCookie(conf);\n             if (null != instanceId) {\n-                masterCookie.setInstanceId(instanceId);\n+                builder.setInstanceId(instanceId);\n             }\n+            Cookie masterCookie = builder.build();\n             try {\n-                Cookie zkCookie = Cookie.readFromZooKeeper(zk, conf);\n-                masterCookie.verify(zkCookie);\n+                Versioned<Cookie> zkCookie = Cookie.readFromZooKeeper(zk, conf);\n+                masterCookie.verify(zkCookie.getValue());\n             } catch (KeeperException.NoNodeException nne) {\n-                newEnv = true;\n+                // can occur in cases:\n+                // 1) new environment or\n+                // 2) done only metadata format and started bookie server.\n             }\n-            List<File> missedCookieDirs = new ArrayList<File>();\n             checkDirectoryStructure(journalDirectory);\n \n-            // try to read cookie from journal directory\n-            try {\n-                Cookie journalCookie = Cookie.readFromDirectory(journalDirectory);\n+            if(!newEnv){\n                 journalCookie.verify(masterCookie);\n-            } catch (FileNotFoundException fnf) {\n-                missedCookieDirs.add(journalDirectory);\n             }\n-            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n+            for (File dir : allLedgerDirs) {\n                 checkDirectoryStructure(dir);\n                 try {\n                     Cookie c = Cookie.readFromDirectory(dir);\n@@ -452,11 +355,11 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n                 if (missedCookieDirs.size() > 0) {\n                     LOG.debug(\"Directories missing cookie file are {}\", missedCookieDirs);\n                     masterCookie.writeToDirectory(journalDirectory);\n-                    for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n+                    for (File dir : allLedgerDirs) {\n                         masterCookie.writeToDirectory(dir);\n                     }\n                 }\n-                masterCookie.writeToZooKeeper(zk, conf);\n+                masterCookie.writeToZooKeeper(zk, conf, Version.NEW);\n             }\n         } catch (KeeperException ke) {\n             LOG.error(\"Couldn't access cookie in zookeeper\", ke);\n@@ -476,21 +379,43 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n     /**\n      * Return the configured address of the bookie.\n      */\n-    public static InetSocketAddress getBookieAddress(ServerConfiguration conf)\n+    public static BookieSocketAddress getBookieAddress(ServerConfiguration conf)\n             throws UnknownHostException {\n-        return new InetSocketAddress(InetAddress.getLocalHost()\n-                .getHostAddress(), conf.getBookiePort());\n+        String iface = conf.getListeningInterface();\n+        if (iface == null) {\n+            iface = \"default\";\n+        }\n+        InetSocketAddress inetAddr = new InetSocketAddress(DNS.getDefaultHost(iface), conf.getBookiePort());\n+        String hostAddress = inetAddr.getAddress().getHostAddress();\n+        if (conf.getUseHostNameAsBookieID()) {\n+            hostAddress = inetAddr.getAddress().getCanonicalHostName();\n+        }\n+        BookieSocketAddress addr =\n+                new BookieSocketAddress(hostAddress, conf.getBookiePort());\n+        if (addr.getSocketAddress().getAddress().isLoopbackAddress()\n+            && !conf.getAllowLoopback()) {\n+            throw new UnknownHostException(\"Trying to listen on loopback address, \"\n+                    + addr + \" but this is forbidden by default \"\n+                    + \"(see ServerConfiguration#getAllowLoopback())\");\n+        }\n+        return addr;\n     }\n \n     private String getInstanceId(ZooKeeper zk) throws KeeperException,\n             InterruptedException {\n         String instanceId = null;\n+        if (zk.exists(conf.getZkLedgersRootPath(), null) == null) {\n+            LOG.error(\"BookKeeper metadata doesn't exist in zookeeper. \"\n+                      + \"Has the cluster been initialized? \"\n+                      + \"Try running bin/bookkeeper shell metaformat\");\n+            throw new KeeperException.NoNodeException(\"BookKeeper metadata\");\n+        }\n         try {\n             byte[] data = zk.getData(conf.getZkLedgersRootPath() + \"/\"\n                     + BookKeeperConstants.INSTANCEID, false, null);\n-            instanceId = new String(data);\n+            instanceId = new String(data, UTF_8);\n         } catch (KeeperException.NoNodeException e) {\n-            LOG.warn(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n+            LOG.info(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n         }\n         return instanceId;\n     }\n@@ -499,6 +424,10 @@ public LedgerDirsManager getLedgerDirsManager() {\n         return ledgerDirsManager;\n     }\n \n+    LedgerDirsManager getIndexDirsManager() {\n+        return indexDirsManager;\n+    }\n+\n     public static File getCurrentDirectory(File dir) {\n         return new File(dir, BookKeeperConstants.CURRENT_DIR);\n     }\n@@ -511,35 +440,79 @@ public static File getCurrentDirectory(File dir) {\n         return currentDirs;\n     }\n \n-\n     public Bookie(ServerConfiguration conf)\n             throws IOException, KeeperException, InterruptedException, BookieException {\n+        this(conf, NullStatsLogger.INSTANCE);\n+    }\n+\n+    public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n+            throws IOException, KeeperException, InterruptedException, BookieException {\n         super(\"Bookie-\" + conf.getBookiePort());\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath() + \"/\";\n         this.conf = conf;\n         this.journalDirectory = getCurrentDirectory(conf.getJournalDir());\n-        this.ledgerDirsManager = new LedgerDirsManager(conf);\n+        this.ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                statsLogger.scope(LD_LEDGER_SCOPE));\n+        File[] idxDirs = conf.getIndexDirs();\n+        if (null == idxDirs) {\n+            this.indexDirsManager = this.ledgerDirsManager;\n+        } else {\n+            this.indexDirsManager = new LedgerDirsManager(conf, idxDirs,\n+                    statsLogger.scope(LD_INDEX_SCOPE));\n+        }\n+\n         // instantiate zookeeper client to initialize ledger manager\n         this.zk = instantiateZookeeperClient(conf);\n         checkEnvironment(this.zk);\n         ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, this.zk);\n         LOG.info(\"instantiate ledger manager {}\", ledgerManagerFactory.getClass().getName());\n         ledgerManager = ledgerManagerFactory.newLedgerManager();\n-        syncThread = new SyncThread(conf);\n-        ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager,\n-                                                     ledgerDirsManager,\n-                                                     new BookieSafeEntryAdder());\n-        handles = new HandleFactoryImpl(ledgerStorage);\n+\n+        // Initialise ledgerDirManager. This would look through all the\n+        // configured directories. When disk errors or all the ledger\n+        // directories are full, would throws exception and fail bookie startup.\n+        this.ledgerDirsManager.init();\n         // instantiate the journal\n         journal = new Journal(conf, ledgerDirsManager);\n+        // Check the type of storage.\n+        if (conf.getSortedLedgerStorageEnabled()) {\n+            ledgerStorage = new SortedLedgerStorage(conf, ledgerManager,\n+                                                    ledgerDirsManager, indexDirsManager,\n+                                                    journal, statsLogger);\n+        } else {\n+            ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager,\n+                                                         ledgerDirsManager, indexDirsManager,\n+                                                         journal, statsLogger);\n+        }\n+        syncThread = new SyncThread(conf, getLedgerDirsListener(),\n+                                    ledgerStorage, journal);\n+\n+        handles = new HandleFactoryImpl(ledgerStorage);\n \n         // ZK ephemeral node for this Bookie.\n-        zkBookieRegPath = this.bookieRegistrationPath + getMyId();\n+        String myID = getMyId();\n+        zkBookieRegPath = this.bookieRegistrationPath + myID;\n+        zkBookieReadOnlyPath = this.bookieRegistrationPath + BookKeeperConstants.READONLY + \"/\" + myID;\n+\n+        // Expose Stats\n+        writeBytes = statsLogger.getCounter(WRITE_BYTES);\n+        readBytes = statsLogger.getCounter(READ_BYTES);\n+        // 1 : up, 0 : readonly\n+        statsLogger.registerGauge(SERVER_STATUS, new Gauge<Number>() {\n+            @Override\n+            public Number getDefaultValue() {\n+                return 0;\n+            }\n+\n+            @Override\n+            public Number getSample() {\n+                return readOnly.get() ? 0 : 1;\n+            }\n+        });\n     }\n \n     private String getMyId() throws UnknownHostException {\n-        return InetAddress.getLocalHost().getHostAddress() + \":\"\n-                + conf.getBookiePort();\n+        return Bookie.getBookieAddress(conf).toString();\n     }\n \n     void readJournal() throws IOException, BookieException {\n@@ -551,7 +524,7 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n                 try {\n                     LOG.debug(\"Replay journal - ledger id : {}, entry id : {}.\", ledgerId, entryId);\n                     if (entryId == METAENTRY_ID_LEDGER_KEY) {\n-                        if (journalVersion >= 3) {\n+                        if (journalVersion >= JournalChannel.V3) {\n                             int masterKeyLen = recBuff.getInt();\n                             byte[] masterKey = new byte[masterKeyLen];\n \n@@ -563,7 +536,7 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n                                     + \") is too old to hold this\");\n                         }\n                     } else if (entryId == METAENTRY_ID_FENCE_KEY) {\n-                        if (journalVersion >= 4) {\n+                        if (journalVersion >= JournalChannel.V4) {\n                             byte[] key = masterKeyCache.get(ledgerId);\n                             if (key == null) {\n                                 key = ledgerStorage.readMasterKey(ledgerId);\n@@ -594,9 +567,15 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n         });\n     }\n \n+    @Override\n     synchronized public void start() {\n         setDaemon(true);\n         LOG.debug(\"I'm starting a bookie with journal directory {}\", journalDirectory.getName());\n+        //Start DiskChecker thread\n+        ledgerDirsManager.start();\n+        if (indexDirsManager != ledgerDirsManager) {\n+            indexDirsManager.start();\n+        }\n         // replay journals\n         try {\n             readJournal();\n@@ -609,12 +588,16 @@ synchronized public void start() {\n             shutdown(ExitCode.BOOKIE_EXCEPTION);\n             return;\n         }\n+        LOG.info(\"Finished reading journal, starting bookie\");\n         // start bookie thread\n         super.start();\n \n+        // After successful bookie startup, register listener for disk\n+        // error/full notifications.\n         ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n-        //Start DiskChecker thread\n-        ledgerDirsManager.start();\n+        if (indexDirsManager != ledgerDirsManager) {\n+            indexDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+        }\n \n         ledgerStorage.start();\n \n@@ -643,6 +626,11 @@ public void diskFull(File disk) {\n                 // Nothing needs to be handled here.\n             }\n \n+            @Override\n+            public void diskAlmostFull(File disk) {\n+                // Nothing needs to be handled here.\n+            }\n+\n             @Override\n             public void diskFailed(File disk) {\n                 // Shutdown the bookie on disk failure.\n@@ -660,6 +648,18 @@ public void fatalError() {\n                 LOG.error(\"Fatal error reported by ledgerDirsManager\");\n                 triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n             }\n+\n+            @Override\n+            public void diskWritable(File disk) {\n+                // Transition to writable mode when a disk becomes writable again.\n+                transitionToWritableMode();\n+            }\n+\n+            @Override\n+            public void diskJustWritable(File disk) {\n+                // Transition to writable mode when a disk becomes writable again.\n+                transitionToWritableMode();\n+            }\n         };\n     }\n \n@@ -722,6 +722,56 @@ private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf)\n         return newZookeeper(conf.getZkServers(), conf.getZkTimeout());\n     }\n \n+    /**\n+     * Check existence of <i>regPath</i> and wait it expired if possible\n+     *\n+     * @param regPath\n+     *          reg node path.\n+     * @return true if regPath exists, otherwise return false\n+     * @throws IOException if can't create reg path\n+     */\n+    protected boolean checkRegNodeAndWaitExpired(String regPath) throws IOException {\n+        final CountDownLatch prevNodeLatch = new CountDownLatch(1);\n+        Watcher zkPrevRegNodewatcher = new Watcher() {\n+            @Override\n+            public void process(WatchedEvent event) {\n+                // Check for prev znode deletion. Connection expiration is\n+                // not handling, since bookie has logic to shutdown.\n+                if (EventType.NodeDeleted == event.getType()) {\n+                    prevNodeLatch.countDown();\n+                }\n+            }\n+        };\n+        try {\n+            Stat stat = zk.exists(regPath, zkPrevRegNodewatcher);\n+            if (null != stat) {\n+                // if the ephemeral owner isn't current zookeeper client\n+                // wait for it to be expired.\n+                if (stat.getEphemeralOwner() != zk.getSessionId()) {\n+                    LOG.info(\"Previous bookie registration znode: {} exists, so waiting zk sessiontimeout:\"\n+                            + \" {} ms for znode deletion\", regPath, conf.getZkTimeout());\n+                    // waiting for the previous bookie reg znode deletion\n+                    if (!prevNodeLatch.await(conf.getZkTimeout(), TimeUnit.MILLISECONDS)) {\n+                        throw new NodeExistsException(regPath);\n+                    } else {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (KeeperException ke) {\n+            LOG.error(\"ZK exception checking and wait ephemeral znode {} expired : \", regPath, ke);\n+            throw new IOException(\"ZK exception checking and wait ephemeral znode \"\n+                    + regPath + \" expired\", ke);\n+        } catch (InterruptedException ie) {\n+            LOG.error(\"Interrupted checking and wait ephemeral znode {} expired : \", regPath, ie);\n+            throw new IOException(\"Interrupted checking and wait ephemeral znode \"\n+                    + regPath + \" expired\", ie);\n+        }\n+    }\n+\n     /**\n      * Register as an available bookie\n      */\n@@ -732,39 +782,14 @@ protected void registerBookie(ServerConfiguration conf) throws IOException {\n         }\n \n         // ZK ephemeral node for this Bookie.\n-        String zkBookieRegPath = this.bookieRegistrationPath\n-            + StringUtils.addrToString(getBookieAddress(conf));\n-        final CountDownLatch prevNodeLatch = new CountDownLatch(1);\n         try{\n-            Watcher zkPrevRegNodewatcher = new Watcher() {\n-                @Override\n-                public void process(WatchedEvent event) {\n-                    // Check for prev znode deletion. Connection expiration is\n-                    // not handling, since bookie has logic to shutdown.\n-                    if (EventType.NodeDeleted == event.getType()) {\n-                        prevNodeLatch.countDown();\n-                    }\n-                }\n-            };\n-            if (null != zk.exists(zkBookieRegPath, zkPrevRegNodewatcher)) {\n-                LOG.info(\"Previous bookie registration znode: \"\n-                        + zkBookieRegPath\n-                        + \" exists, so waiting zk sessiontimeout: \"\n-                        + conf.getZkTimeout() + \"ms for znode deletion\");\n-                // waiting for the previous bookie reg znode deletion\n-                if (!prevNodeLatch.await(conf.getZkTimeout(),\n-                        TimeUnit.MILLISECONDS)) {\n-                    throw new KeeperException.NodeExistsException(\n-                            zkBookieRegPath);\n-                }\n+            if (!checkRegNodeAndWaitExpired(zkBookieRegPath)) {\n+                // Create the ZK ephemeral node for this Bookie.\n+                zk.create(zkBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                        CreateMode.EPHEMERAL);\n             }\n-\n-            // Create the ZK ephemeral node for this Bookie.\n-            zk.create(zkBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n-                    CreateMode.EPHEMERAL);\n         } catch (KeeperException ke) {\n-            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\",\n-                    ke);\n+            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\", ke);\n             // Throw an IOException back up. This will cause the Bookie\n             // constructor to error out. Alternatively, we could do a System\n             // exit here as this is a fatal error.\n@@ -779,11 +804,46 @@ public void process(WatchedEvent event) {\n         }\n     }\n \n-    /*\n+    /**\n+     * Transition the bookie from readOnly mode to writable\n+     */\n+    @VisibleForTesting\n+    public void transitionToWritableMode() {\n+        if (!readOnly.compareAndSet(true, false)) {\n+            return;\n+        }\n+        LOG.info(\"Transitioning Bookie to Writable mode and will serve read/write requests.\");\n+        try {\n+            this.registerBookie(conf);\n+        } catch (IOException e) {\n+            LOG.warn(\"Error in transitioning back to writable mode : \", e);\n+            transitionToReadOnlyMode();\n+            return;\n+        }\n+        // clear the readonly state\n+        try {\n+            zk.delete(zkBookieReadOnlyPath, -1);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            LOG.warn(\"Interrupted clearing readonly state while transitioning to writable mode : \", e);\n+            return;\n+        } catch (KeeperException e) {\n+            // if we failed when deleting the readonly flag in zookeeper, it is OK since client would\n+            // already see the bookie in writable list. so just log the exception\n+            LOG.warn(\"Failed to delete bookie readonly state in zookeeper : \", e);\n+            return;\n+        }\n+    }\n+\n+    /**\n      * Transition the bookie to readOnly mode\n      */\n     @VisibleForTesting\n     public void transitionToReadOnlyMode() {\n+        if (shuttingdown) {\n+            return;\n+        }\n+\n         if (!readOnly.compareAndSet(false, true)) {\n             return;\n         }\n@@ -808,12 +868,18 @@ public void transitionToReadOnlyMode() {\n                     // this node is just now created by someone.\n                 }\n             }\n-            // Create the readonly node\n-            zk.create(this.bookieRegistrationPath\n-                    + BookKeeperConstants.READONLY + \"/\" + getMyId(),\n-                    new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n-            // Clear the current registered node\n-            zk.delete(zkBookieRegPath, -1);\n+            if (!checkRegNodeAndWaitExpired(zkBookieReadOnlyPath)) {\n+                // Create the readonly node\n+                zk.create(zkBookieReadOnlyPath,\n+                        new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+            }\n+            try {\n+                // Clear the current registered node\n+                zk.delete(zkBookieRegPath, -1);\n+            } catch (KeeperException.NoNodeException nne) {\n+                LOG.warn(\"No writable bookie registered node {} when transitioning to readonly\",\n+                        zkBookieRegPath, nne);\n+            }\n         } catch (IOException e) {\n             LOG.error(\"Error in transition to ReadOnly Mode.\"\n                     + \" Shutting down\", e);\n@@ -903,19 +969,20 @@ public void run() {\n     // Triggering the Bookie shutdown in its own thread,\n     // because shutdown can be called from sync thread which would be\n     // interrupted by shutdown call.\n+    AtomicBoolean shutdownTriggered = new AtomicBoolean(false);\n     void triggerBookieShutdown(final int exitCode) {\n-        Thread shutdownThread = new Thread() {\n+        if (!shutdownTriggered.compareAndSet(false, true)) {\n+            return;\n+        }\n+        LOG.info(\"Triggering shutdown of Bookie-{} with exitCode {}\",\n+                 conf.getBookiePort(), exitCode);\n+        BookieThread th = new BookieThread(\"BookieShutdownTrigger\") {\n+            @Override\n             public void run() {\n                 Bookie.this.shutdown(exitCode);\n             }\n         };\n-        shutdownThread.start();\n-        try {\n-            shutdownThread.join();\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n-            LOG.debug(\"InterruptedException while waiting for shutdown. Not a problem!!\");\n-        }\n+        th.start();\n     }\n \n     // provided a public shutdown method for other caller\n@@ -930,16 +997,14 @@ synchronized int shutdown(int exitCode) {\n         try {\n             if (running) { // avoid shutdown twice\n                 // the exitCode only set when first shutdown usually due to exception found\n-                this.exitCode = exitCode;\n+                LOG.info(\"Shutting down Bookie-{} with exitCode {}\",\n+                         conf.getBookiePort(), exitCode);\n+                if (this.exitCode == ExitCode.OK) {\n+                    this.exitCode = exitCode;\n+                }\n                 // mark bookie as in shutting down progress\n                 shuttingdown = true;\n \n-                // Shutdown the ZK client\n-                if(zk != null) zk.close();\n-\n-                //Shutdown disk checker\n-                ledgerDirsManager.shutdown();\n-\n                 // Shutdown journal\n                 journal.shutdown();\n                 this.join();\n@@ -955,23 +1020,34 @@ synchronized int shutdown(int exitCode) {\n                 } catch (IOException ie) {\n                     LOG.error(\"Failed to close active ledger manager : \", ie);\n                 }\n-                // setting running to false here, so watch thread in bookie server know it only after bookie shut down\n-                running = false;\n+\n+                //Shutdown disk checker\n+                ledgerDirsManager.shutdown();\n+                if (indexDirsManager != ledgerDirsManager) {\n+                    indexDirsManager.shutdown();\n+                }\n+\n+                // Shutdown the ZK client\n+                if(zk != null) zk.close();\n             }\n         } catch (InterruptedException ie) {\n             LOG.error(\"Interrupted during shutting down bookie : \", ie);\n+        } finally {\n+            // setting running to false here, so watch thread\n+            // in bookie server know it only after bookie shut down\n+            running = false;\n         }\n         return this.exitCode;\n     }\n \n-    /** \n+    /**\n      * Retrieve the ledger descriptor for the ledger which entry should be added to.\n-     * The LedgerDescriptor returned from this method should be eventually freed with \n+     * The LedgerDescriptor returned from this method should be eventually freed with\n      * #putHandle().\n      *\n      * @throws BookieException if masterKey does not match the master key of the ledger\n      */\n-    private LedgerDescriptor getLedgerForEntry(ByteBuffer entry, byte[] masterKey) \n+    private LedgerDescriptor getLedgerForEntry(ByteBuffer entry, byte[] masterKey)\n             throws IOException, BookieException {\n         long ledgerId = entry.getLong();\n         LedgerDescriptor l = handles.getHandle(ledgerId, masterKey);\n@@ -984,21 +1060,15 @@ private LedgerDescriptor getLedgerForEntry(ByteBuffer entry, byte[] masterKey)\n             bb.put(masterKey);\n             bb.flip();\n \n-            journal.logAddEntry(bb, new NopWriteCallback(), null);\n-            masterKeyCache.put(ledgerId, masterKey);\n+            if (null == masterKeyCache.putIfAbsent(ledgerId, masterKey)) {\n+                journal.logAddEntry(bb, new NopWriteCallback(), null);\n+            }\n         }\n         return l;\n     }\n \n-    protected void addEntryByLedgerId(long ledgerId, ByteBuffer entry)\n-        throws IOException, BookieException {\n-        byte[] key = ledgerStorage.readMasterKey(ledgerId);\n-        LedgerDescriptor handle = handles.getHandle(ledgerId, key);\n-        handle.addEntry(entry);\n-    }\n-\n     /**\n-     * Add an entry to a ledger as specified by handle. \n+     * Add an entry to a ledger as specified by handle.\n      */\n     private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCallback cb, Object ctx)\n             throws IOException, BookieException {\n@@ -1007,17 +1077,19 @@ private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCa\n         long entryId = handle.addEntry(entry);\n \n         entry.rewind();\n+        writeBytes.add(entry.remaining());\n+\n         LOG.trace(\"Adding {}@{}\", entryId, ledgerId);\n         journal.logAddEntry(entry, cb, ctx);\n     }\n \n     /**\n      * Add entry to a ledger, even if the ledger has previous been fenced. This should only\n-     * happen in bookie recovery or ledger recovery cases, where entries are being replicates \n+     * happen in bookie recovery or ledger recovery cases, where entries are being replicates\n      * so that they exist on a quorum of bookies. The corresponding client side call for this\n      * is not exposed to users.\n      */\n-    public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey) \n+    public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n             throws IOException, BookieException {\n         try {\n             LedgerDescriptor handle = getLedgerForEntry(entry, masterKey);\n@@ -1029,8 +1101,8 @@ public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byt\n             throw new IOException(e);\n         }\n     }\n-    \n-    /** \n+\n+    /**\n      * Add entry to a ledger.\n      * @throws BookieException.LedgerFencedException if the ledger is fenced\n      */\n@@ -1085,14 +1157,17 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n             throws IOException, NoLedgerException {\n         LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n         LOG.trace(\"Reading {}@{}\", entryId, ledgerId);\n-        return handle.readEntry(entryId);\n+        ByteBuffer entry = handle.readEntry(entryId);\n+        readBytes.add(entry.remaining());\n+        return entry;\n     }\n \n     // The rest of the code is test stuff\n     static class CounterCallback implements WriteCallback {\n         int count;\n \n-        synchronized public void writeComplete(int rc, long l, long e, InetSocketAddress addr, Object ctx) {\n+        @Override\n+        synchronized public void writeComplete(int rc, long l, long e, BookieSocketAddress addr, Object ctx) {\n             count--;\n             if (count == 0) {\n                 notifyAll();\n@@ -1112,7 +1187,7 @@ synchronized public void waitZero() throws InterruptedException {\n \n     /**\n      * Format the bookie server data\n-     * \n+     *\n      * @param conf\n      *            ServerConfiguration\n      * @param isInteractive\n@@ -1164,6 +1239,18 @@ public static boolean format(ServerConfiguration conf,\n                 return false;\n             }\n         }\n+\n+        // Clean up index directories if they are separate from the ledger dirs\n+        File[] indexDirs = conf.getIndexDirs();\n+        if (null != indexDirs) {\n+            for (File dir : indexDirs) {\n+                if (!cleanDir(dir)) {\n+                    LOG.error(\"Formatting ledger directory \" + dir + \" failed\");\n+                    return false;\n+                }\n+            }\n+        }\n+\n         LOG.info(\"Bookie format completed successfully\");\n         return true;\n     }\n@@ -1184,43 +1271,12 @@ private static boolean cleanDir(File dir) {\n         return true;\n     }\n \n-    private class BookieSafeEntryAdder implements SafeEntryAdder {\n-        @Override\n-        public void safeAddEntry(final long ledgerId, final ByteBuffer buffer,\n-                                 final GenericCallback<Void> cb) {\n-            journal.logAddEntry(buffer, new WriteCallback() {\n-                    @Override\n-                    public void writeComplete(int rc, long ledgerId2, long entryId,\n-                                              InetSocketAddress addr, Object ctx) {\n-                        if (rc != BookieException.Code.OK) {\n-                            LOG.error(\"Error rewriting to journal (ledger {}, entry {})\", ledgerId2, entryId);\n-                            cb.operationComplete(rc, null);\n-                            return;\n-                        }\n-                        try {\n-                            addEntryByLedgerId(ledgerId, buffer);\n-                            cb.operationComplete(rc, null);\n-                        } catch (IOException ioe) {\n-                            LOG.error(\"Error adding to ledger storage (ledger \" + ledgerId2\n-                                      + \", entry \" + entryId + \")\", ioe);\n-                            // couldn't add to ledger storage\n-                            cb.operationComplete(BookieException.Code.IllegalOpException, null);\n-                        } catch (BookieException bke) {\n-                            LOG.error(\"Bookie error adding to ledger storage (ledger \" + ledgerId2\n-                                      + \", entry \" + entryId + \")\", bke);\n-                            // couldn't add to ledger storage\n-                            cb.operationComplete(bke.getCode(), null);\n-                        }\n-                    }\n-                }, null);\n-        }\n-    }\n     /**\n      * @param args\n      * @throws IOException\n      * @throws InterruptedException\n      */\n-    public static void main(String[] args) \n+    public static void main(String[] args)\n             throws IOException, InterruptedException, BookieException, KeeperException {\n         Bookie b = new Bookie(new ServerConfiguration());\n         b.start();\n@@ -1239,4 +1295,13 @@ public static void main(String[] args)\n         long end = MathUtils.now();\n         System.out.println(\"Took \" + (end-start) + \"ms\");\n     }\n+\n+    /**\n+     * Returns exit code - cause of failure\n+     *\n+     * @return {@link ExitCode}\n+     */\n+    public int getExitCode() {\n+        return exitCode;\n+    }\n }"},{"sha":"53116611c9cc1528e97c224aaa8d541f07416fd4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieCriticalThread.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieCriticalThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieCriticalThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieCriticalThread.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Thread is marked as critical and will exit, when there is an uncaught\n+ * exception occurred in thread.\n+ */\n+public class BookieCriticalThread extends BookieThread {\n+    private static final Logger LOG = LoggerFactory\n+            .getLogger(BookieCriticalThread.class);\n+\n+    public BookieCriticalThread(String name) {\n+        super(name);\n+    }\n+\n+    public BookieCriticalThread(Runnable thread, String name) {\n+        super(thread, name);\n+    }\n+\n+    @Override\n+    protected void handleException(Thread t, Throwable e) {\n+        LOG.error(\"Uncaught exception in thread {} and is exiting!\",\n+                t.getName(), e);\n+        Runtime.getRuntime().exit(ExitCode.BOOKIE_EXCEPTION);\n+    }\n+}"},{"sha":"b3ee280ffd44251a1564071e0ff4b09d810b7ffd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -75,7 +75,7 @@ public int getCode() {\n     }\n \n     public String getMessage(int code) {\n-        String err = \"Invalid operation\";\n+        String err;\n         switch(code) {\n         case Code.OK:\n             err = \"No problem\";\n@@ -92,6 +92,9 @@ public String getMessage(int code) {\n         case Code.UpgradeException:\n             err = \"Error performing an upgrade operation \";\n             break;\n+        default:\n+            err = \"Invalid operation\";\n+            break;\n         }\n         String reason = super.getMessage();\n         if (reason == null) {"},{"sha":"a9af846e642c302d9a1eddfac5ddeba85556e2db","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":664,"deletions":52,"changes":716,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,38 +21,58 @@\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.net.InetSocketAddress;\n import java.nio.ByteBuffer;\n import java.util.Formatter;\n import java.util.HashMap;\n import java.util.Map;\n-\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.bookkeeper.meta.LedgerManagerFactory;\n-import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n-\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.replication.AuditorElector;\n+import org.apache.bookkeeper.bookie.BookieException.InvalidCookieException;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n-import org.apache.bookkeeper.bookie.Journal.LastLogMark;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.Tool;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+\n+import com.google.common.util.concurrent.AbstractFuture;\n+import static com.google.common.base.Charsets.UTF_8;\n \n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.cli.BasicParser;\n-import org.apache.commons.cli.MissingArgumentException;\n-import org.apache.commons.cli.Options;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingArgumentException;\n+import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -69,10 +89,17 @@\n     static final String CMD_BOOKIEFORMAT = \"bookieformat\";\n     static final String CMD_RECOVER = \"recover\";\n     static final String CMD_LEDGER = \"ledger\";\n+    static final String CMD_LISTLEDGERS = \"listledgers\";\n+    static final String CMD_LEDGERMETADATA = \"ledgermetadata\";\n+    static final String CMD_LISTUNDERREPLICATED = \"listunderreplicated\";\n+    static final String CMD_WHOISAUDITOR = \"whoisauditor\";\n+    static final String CMD_SIMPLETEST = \"simpletest\";\n     static final String CMD_READLOG = \"readlog\";\n     static final String CMD_READJOURNAL = \"readjournal\";\n     static final String CMD_LASTMARK = \"lastmark\";\n     static final String CMD_AUTORECOVERY = \"autorecovery\";\n+    static final String CMD_LISTBOOKIES = \"listbookies\";\n+    static final String CMD_UPDATECOOKIE = \"updatecookie\";\n     static final String CMD_HELP = \"help\";\n \n     final ServerConfiguration bkConf = new ServerConfiguration();\n@@ -151,7 +178,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"metaformat [-nonInteractive] [-force]\";\n+            return \"metaformat   [-nonInteractive] [-force]\";\n         }\n \n         @Override\n@@ -229,7 +256,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"recover <bookieSrc> [bookieDest]\";\n+            return \"recover      <bookieSrc> [bookieDest]\";\n         }\n \n         @Override\n@@ -259,17 +286,17 @@ private int bkRecovery(BookKeeperAdmin bkAdmin, String[] args)\n                         + \"(host:port expected): \" + args[0]);\n                 return -1;\n             }\n-            final InetSocketAddress bookieSrc = new InetSocketAddress(\n+            final BookieSocketAddress bookieSrc = new BookieSocketAddress(\n                     bookieSrcString[0], Integer.parseInt(bookieSrcString[1]));\n-            InetSocketAddress bookieDest = null;\n+            BookieSocketAddress bookieDest = null;\n             if (args.length >= 2) {\n                 final String bookieDestString[] = args[1].split(\":\");\n                 if (bookieDestString.length < 2) {\n                     System.err.println(\"BookieDest inputted has invalid format\"\n                             + \"(host:port expected): \" + args[1]);\n                     return -1;\n                 }\n-                bookieDest = new InetSocketAddress(bookieDestString[0],\n+                bookieDest = new BookieSocketAddress(bookieDestString[0],\n                         Integer.parseInt(bookieDestString[1]));\n             }\n \n@@ -326,7 +353,272 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"ledger [-m] <ledger_id>\";\n+            return \"ledger       [-m] <ledger_id>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command for listing underreplicated ledgers\n+     */\n+    class ListUnderreplicatedCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public ListUnderreplicatedCmd() {\n+            super(CMD_LISTUNDERREPLICATED);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"List ledgers marked as underreplicated\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"listunderreplicated\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerUnderreplicationManager underreplicationManager = mFactory.newLedgerUnderreplicationManager();\n+                Iterator<Long> iter = underreplicationManager.listLedgersToRereplicate();\n+                while (iter.hasNext()) {\n+                    System.out.println(iter.next());\n+                }\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n+\n+    final static int LIST_BATCH_SIZE = 1000;\n+    /**\n+     * Command to list all ledgers in the cluster\n+     */\n+    class ListLedgersCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        ListLedgersCmd() {\n+            super(CMD_LISTLEDGERS);\n+            lOpts.addOption(\"m\", \"meta\", false, \"Print metadata\");\n+\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerManager m = mFactory.newLedgerManager();\n+                LedgerRangeIterator iter = m.getLedgerRanges();\n+                if (cmdLine.hasOption(\"m\")) {\n+                    List<ReadMetadataCallback> futures\n+                        = new ArrayList<ReadMetadataCallback>(LIST_BATCH_SIZE);\n+                    while (iter.hasNext()) {\n+                        LedgerRange r = iter.next();\n+                        for (Long lid : r.getLedgers()) {\n+                            ReadMetadataCallback cb = new ReadMetadataCallback(lid);\n+                            m.readLedgerMetadata(lid, cb);\n+                            futures.add(cb);\n+                        }\n+                        if (futures.size() >= LIST_BATCH_SIZE) {\n+                            while (futures.size() > 0) {\n+                                ReadMetadataCallback cb = futures.remove(0);\n+                                printLedgerMetadata(cb);\n+                            }\n+                        }\n+                    }\n+                    while (futures.size() > 0) {\n+                        ReadMetadataCallback cb = futures.remove(0);\n+                        printLedgerMetadata(cb);\n+                    }\n+                } else {\n+                    while (iter.hasNext()) {\n+                        LedgerRange r = iter.next();\n+                        for (Long lid : r.getLedgers()) {\n+                            System.out.println(Long.toString(lid));\n+                        }\n+                    }\n+                }\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"List all ledgers on the cluster (this may take a long time)\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"listledgers  [-meta]\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    static void printLedgerMetadata(ReadMetadataCallback cb) throws Exception {\n+        LedgerMetadata md = cb.get();\n+        System.out.println(\"ledgerID: \" + cb.getLedgerId());\n+        System.out.println(new String(md.serialize(), UTF_8));\n+    }\n+\n+    static class ReadMetadataCallback extends AbstractFuture<LedgerMetadata>\n+        implements GenericCallback<LedgerMetadata> {\n+        final long ledgerId;\n+\n+        ReadMetadataCallback(long ledgerId) {\n+            this.ledgerId = ledgerId;\n+        }\n+\n+        long getLedgerId() {\n+            return ledgerId;\n+        }\n+\n+        public void operationComplete(int rc, LedgerMetadata result) {\n+            if (rc != 0) {\n+                setException(BKException.create(rc));\n+            } else {\n+                set(result);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Print the metadata for a ledger\n+     */\n+    class LedgerMetadataCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        LedgerMetadataCmd() {\n+            super(CMD_LEDGERMETADATA);\n+            lOpts.addOption(\"l\", \"ledgerid\", true, \"Ledger ID\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            final long lid = getOptionLongValue(cmdLine, \"ledgerid\", -1);\n+            if (lid == -1) {\n+                System.err.println(\"Must specify a ledger id\");\n+                return -1;\n+            }\n+\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerManager m = mFactory.newLedgerManager();\n+                ReadMetadataCallback cb = new ReadMetadataCallback(lid);\n+                m.readLedgerMetadata(lid, cb);\n+                printLedgerMetadata(cb);\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Print the metadata for a ledger\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"ledgermetadata -ledgerid <ledgerid>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    /**\n+     * Simple test to create a ledger and write to it\n+     */\n+    class SimpleTestCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        SimpleTestCmd() {\n+            super(CMD_SIMPLETEST);\n+            lOpts.addOption(\"e\", \"ensemble\", true, \"Ensemble size (default 3)\");\n+            lOpts.addOption(\"w\", \"writeQuorum\", true, \"Write quorum size (default 2)\");\n+            lOpts.addOption(\"a\", \"ackQuorum\", true, \"Ack quorum size (default 2)\");\n+            lOpts.addOption(\"n\", \"numEntries\", true, \"Entries to write (default 1000)\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            byte[] data = new byte[100]; // test data\n+\n+            int ensemble = getOptionIntValue(cmdLine, \"ensemble\", 3);\n+            int writeQuorum = getOptionIntValue(cmdLine, \"writeQuorum\", 2);\n+            int ackQuorum = getOptionIntValue(cmdLine, \"ackQuorum\", 2);\n+            int numEntries = getOptionIntValue(cmdLine, \"numEntries\", 1000);\n+\n+            ClientConfiguration conf = new ClientConfiguration();\n+            conf.addConfiguration(bkConf);\n+            BookKeeper bk = new BookKeeper(conf);\n+            LedgerHandle lh = bk.createLedger(ensemble, writeQuorum, ackQuorum,\n+                                              BookKeeper.DigestType.MAC, new byte[0]);\n+            System.out.println(\"Ledger ID: \" + lh.getId());\n+            long lastReport = System.nanoTime();\n+            for (int i = 0; i < numEntries; i++) {\n+                lh.addEntry(data);\n+                if (TimeUnit.SECONDS.convert(System.nanoTime() - lastReport,\n+                                             TimeUnit.NANOSECONDS) > 1) {\n+                    System.out.println(i + \" entries written\");\n+                    lastReport = System.nanoTime();\n+                }\n+            }\n+\n+            lh.close();\n+            bk.close();\n+            System.out.println(numEntries + \" entries written to ledger \" + lh.getId());\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Simple test to create a ledger and write entries to it\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"simpletest   [-ensemble N] [-writeQuorum N] [-ackQuorum N] [-numEntries N]\";\n         }\n \n         @Override\n@@ -387,7 +679,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"readlog [-m] <entry_log_id | entry_log_file_name>\";\n+            return \"readlog      [-msg] <entry_log_id | entry_log_file_name>\";\n         }\n \n         @Override\n@@ -448,7 +740,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"readjournal [-m] <journal_id | journal_file_name>\";\n+            return \"readjournal  [-msg] <journal_id | journal_file_name>\";\n         }\n \n         @Override\n@@ -460,25 +752,114 @@ Options getOptions() {\n     /**\n      * Command to print last log mark\n      */\n-    class LastMarkCmd implements Command {\n+    class LastMarkCmd extends MyCommand {\n+        LastMarkCmd() {\n+            super(CMD_LASTMARK);\n+        }\n+\n         @Override\n-        public int runCmd(String[] args) throws Exception {\n+        public int runCmd(CommandLine c) throws Exception {\n             printLastLogMark();\n             return 0;\n         }\n \n         @Override\n-        public void printUsage() {\n-            System.err.println(\"lastmark: Print last log marker.\");\n+        String getDescription() {\n+            return \"Print last log marker.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"lastmark\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return new Options();\n+        }\n+    }\n+\n+    /**\n+     * List available bookies\n+     */\n+    class ListBookiesCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        ListBookiesCmd() {\n+            super(CMD_LISTBOOKIES);\n+            opts.addOption(\"rw\", \"readwrite\", false, \"Print readwrite bookies\");\n+            opts.addOption(\"ro\", \"readonly\", false, \"Print readonly bookies\");\n+            opts.addOption(\"h\", \"hostnames\", false,\n+                    \"Also print hostname of the bookie\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            boolean readwrite = cmdLine.hasOption(\"rw\");\n+            boolean readonly = cmdLine.hasOption(\"ro\");\n+\n+            if ((!readwrite && !readonly) || (readwrite && readonly)) {\n+                LOG.error(\"One and only one of -readwrite and -readonly must be specified\");\n+                printUsage();\n+                return 1;\n+            }\n+            ClientConfiguration clientconf = new ClientConfiguration(bkConf)\n+                .setZkServers(bkConf.getZkServers());\n+            BookKeeperAdmin bka = new BookKeeperAdmin(clientconf);\n+\n+            int count = 0;\n+            Collection<BookieSocketAddress> bookies = new ArrayList<BookieSocketAddress>();\n+            if (cmdLine.hasOption(\"rw\")) {\n+                Collection<BookieSocketAddress> availableBookies = bka\n+                        .getAvailableBookies();\n+                bookies.addAll(availableBookies);\n+            } else if (cmdLine.hasOption(\"ro\")) {\n+                Collection<BookieSocketAddress> roBookies = bka\n+                        .getReadOnlyBookies();\n+                bookies.addAll(roBookies);\n+            }\n+            for (BookieSocketAddress b : bookies) {\n+                System.out.print(b);\n+                if (cmdLine.hasOption(\"h\")) {\n+                    System.out.print(\"\\t\" + b.getSocketAddress().getHostName());\n+                }\n+                System.out.println(\"\");\n+                count++;\n+            }\n+            if (count == 0) {\n+                System.err.println(\"No bookie exists!\");\n+                return 1;\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"List the bookies, which are running as either readwrite or readonly mode.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"listbookies  [-readwrite|-readonly] [-hostnames]\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n         }\n     }\n \n     /**\n      * Command to print help message\n      */\n-    class HelpCmd implements Command {\n+    class HelpCmd extends MyCommand {\n+        HelpCmd() {\n+            super(CMD_HELP);\n+        }\n+\n         @Override\n-        public int runCmd(String[] args) throws Exception {\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] args = cmdLine.getArgs();\n             if (args.length == 0) {\n                 printShellUsage();\n                 return 0;\n@@ -495,9 +876,18 @@ public int runCmd(String[] args) throws Exception {\n         }\n \n         @Override\n-        public void printUsage() {\n-            System.err.println(\"help: Describe the usage of this program or its subcommands.\");\n-            System.err.println(\"usage: help [COMMAND]\");\n+        String getDescription() {\n+            return \"Describe the usage of this program or its subcommands.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"help         [COMMAND]\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return new Options();\n         }\n     }\n \n@@ -572,17 +962,207 @@ int runCmd(CommandLine cmdLine) throws Exception {\n         }\n     }\n \n-    final Map<String, Command> commands;\n+    /**\n+     * Print which node has the auditor lock\n+     */\n+    class WhoIsAuditorCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public WhoIsAuditorCmd() {\n+            super(CMD_WHOISAUDITOR);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Print the node which holds the auditor lock\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"whoisauditor\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                BookieSocketAddress bookieId = AuditorElector.getCurrentAuditor(bkConf, zk);\n+                if (bookieId == null) {\n+                    LOG.info(\"No auditor elected\");\n+                    return -1;\n+                }\n+                LOG.info(\"Auditor: {}/{}:{}\",\n+                         new Object[] {\n+                             bookieId.getSocketAddress().getAddress().getCanonicalHostName(),\n+                             bookieId.getSocketAddress().getAddress().getHostAddress(),\n+                             bookieId.getSocketAddress().getPort() });\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n+\n+    /**\n+     * Update cookie command\n+     */\n+    class UpdateCookieCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        UpdateCookieCmd() {\n+            super(CMD_UPDATECOOKIE);\n+            opts.addOption(\"b\", \"bookieId\", true, \"Bookie Id\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Update bookie id in cookie\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"updatecookie -bookieId <hostname|ip>\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            final String bookieId = cmdLine.getOptionValue(\"bookieId\");\n+            if (StringUtils.isBlank(bookieId)) {\n+                LOG.error(\"Invalid argument list!\");\n+                this.printUsage();\n+                return -1;\n+            }\n+            if (!StringUtils.equals(bookieId, \"hostname\") && !StringUtils.equals(bookieId, \"ip\")) {\n+                LOG.error(\"Invalid option value:\" + bookieId);\n+                this.printUsage();\n+                return -1;\n+            }\n+            boolean useHostName = getOptionalValue(bookieId, \"hostname\");\n+            if (!bkConf.getUseHostNameAsBookieID() && useHostName) {\n+                LOG.error(\"Expects configuration useHostNameAsBookieID=true as the option value passed is 'hostname'\");\n+                return -1;\n+            } else if (bkConf.getUseHostNameAsBookieID() && !useHostName) {\n+                LOG.error(\"Expects configuration useHostNameAsBookieID=false as the option value passed is 'ip'\");\n+                return -1;\n+            }\n+            return updateBookieIdInCookie(bookieId, useHostName);\n+        }\n+\n+        private int updateBookieIdInCookie(final String bookieId, final boolean useHostname) throws IOException,\n+                InterruptedException {\n+            ZooKeeper zk = null;\n+            ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+            try {\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                ServerConfiguration conf = new ServerConfiguration(bkConf);\n+                String newBookieId = Bookie.getBookieAddress(conf).toString();\n+                // read oldcookie\n+                Versioned<Cookie> oldCookie = null;\n+                try {\n+                    conf.setUseHostNameAsBookieID(!useHostname);\n+                    oldCookie = Cookie.readFromZooKeeper(zk, conf);\n+                } catch (KeeperException.NoNodeException nne) {\n+                    LOG.error(\"Either cookie already updated with UseHostNameAsBookieID={} or no cookie exists!\",\n+                            useHostname, nne);\n+                    return -1;\n+                }\n+                Cookie newCookie = Cookie.newBuilder(oldCookie.getValue()).setBookieHost(newBookieId).build();\n+                boolean hasCookieUpdatedInDirs = verifyCookie(newCookie, journalDirectory);\n+                for (File dir : ledgerDirectories) {\n+                    hasCookieUpdatedInDirs &= verifyCookie(newCookie, dir);\n+                }\n+\n+                if (hasCookieUpdatedInDirs) {\n+                    try {\n+                        conf.setUseHostNameAsBookieID(useHostname);\n+                        Cookie.readFromZooKeeper(zk, conf);\n+                        // since newcookie exists, just do cleanup of oldcookie and return\n+                        conf.setUseHostNameAsBookieID(!useHostname);\n+                        oldCookie.getValue().deleteFromZooKeeper(zk, conf, oldCookie.getVersion());\n+                        return 0;\n+                    } catch (KeeperException.NoNodeException nne) {\n+                        LOG.debug(\"Ignoring, cookie will be written to zookeeper\");\n+                    }\n+                } else {\n+                    // writes newcookie to local dirs\n+                    newCookie.writeToDirectory(journalDirectory);\n+                    LOG.info(\"Updated cookie file present in journalDirectory {}\", journalDirectory);\n+                    for (File dir : ledgerDirectories) {\n+                        newCookie.writeToDirectory(dir);\n+                    }\n+                    LOG.info(\"Updated cookie file present in ledgerDirectories {}\", ledgerDirectories);\n+                }\n+                // writes newcookie to zookeeper\n+                conf.setUseHostNameAsBookieID(useHostname);\n+                newCookie.writeToZooKeeper(zk, conf, Version.NEW);\n+\n+                // delete oldcookie\n+                conf.setUseHostNameAsBookieID(!useHostname);\n+                oldCookie.getValue().deleteFromZooKeeper(zk, conf, oldCookie.getVersion());\n+            } catch (KeeperException ke) {\n+                LOG.error(\"KeeperException during cookie updation!\", ke);\n+                return -1;\n+            } catch (IOException ioe) {\n+                LOG.error(\"IOException during cookie updation!\", ioe);\n+                return -1;\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+            return 0;\n+        }\n+\n+        private boolean getOptionalValue(String optValue, String optName) {\n+            if (StringUtils.equals(optValue, optName)) {\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        private boolean verifyCookie(Cookie oldCookie, File dir) throws IOException {\n+            try {\n+                Cookie cookie = Cookie.readFromDirectory(dir);\n+                cookie.verify(oldCookie);\n+            } catch (InvalidCookieException e) {\n+                return false;\n+            }\n+            return true;\n+        }\n+    }\n+\n+    final Map<String, MyCommand> commands = new HashMap<String, MyCommand>();\n     {\n-        commands = new HashMap<String, Command>();\n         commands.put(CMD_METAFORMAT, new MetaFormatCmd());\n         commands.put(CMD_BOOKIEFORMAT, new BookieFormatCmd());\n         commands.put(CMD_RECOVER, new RecoverCmd());\n         commands.put(CMD_LEDGER, new LedgerCmd());\n+        commands.put(CMD_LISTLEDGERS, new ListLedgersCmd());\n+        commands.put(CMD_LISTUNDERREPLICATED, new ListUnderreplicatedCmd());\n+        commands.put(CMD_WHOISAUDITOR, new WhoIsAuditorCmd());\n+        commands.put(CMD_LEDGERMETADATA, new LedgerMetadataCmd());\n+        commands.put(CMD_SIMPLETEST, new SimpleTestCmd());\n         commands.put(CMD_READLOG, new ReadLogCmd());\n         commands.put(CMD_READJOURNAL, new ReadJournalCmd());\n         commands.put(CMD_LASTMARK, new LastMarkCmd());\n         commands.put(CMD_AUTORECOVERY, new AutoRecoveryCmd());\n+        commands.put(CMD_LISTBOOKIES, new ListBookiesCmd());\n+        commands.put(CMD_UPDATECOOKIE, new UpdateCookieCmd());\n         commands.put(CMD_HELP, new HelpCmd());\n     }\n \n@@ -592,23 +1172,22 @@ public void setConf(Configuration conf) throws Exception {\n         journalDirectory = Bookie.getCurrentDirectory(bkConf.getJournalDir());\n         ledgerDirectories = Bookie.getCurrentDirectories(bkConf.getLedgerDirs());\n         formatter = EntryFormatter.newEntryFormatter(bkConf, ENTRY_FORMATTER_CLASS);\n-        LOG.info(\"Using entry formatter \" + formatter.getClass().getName());\n+        LOG.debug(\"Using entry formatter {}\", formatter.getClass().getName());\n         pageSize = bkConf.getPageSize();\n         entriesPerPage = pageSize / 8;\n     }\n \n-    private static void printShellUsage() {\n+    private void printShellUsage() {\n         System.err.println(\"Usage: BookieShell [-conf configuration] <command>\");\n         System.err.println();\n-        System.err.println(\"       metaformat   [-nonInteractive] [-force]\");\n-        System.err.println(\"       bookieformat [-nonInteractive] [-force]\");\n-        System.err.println(\"       recover      <bookieSrc> [bookieDest]\");\n-        System.err.println(\"       ledger       [-meta] <ledger_id>\");\n-        System.err.println(\"       readlog      [-msg] <entry_log_id|entry_log_file_name>\");\n-        System.err.println(\"       readjournal  [-msg] <journal_id|journal_file_name>\");\n-        System.err.println(\"       autorecovery [-enable|-disable]\");\n-        System.err.println(\"       lastmark\");\n-        System.err.println(\"       help\");\n+        List<String> commandNames = new ArrayList<String>();\n+        for (MyCommand c : commands.values()) {\n+            commandNames.add(\"       \" + c.getUsage());\n+        }\n+        Collections.sort(commandNames);\n+        for (String s : commandNames) {\n+            System.err.println(s);\n+        }\n     }\n \n     @Override\n@@ -631,16 +1210,17 @@ public int run(String[] args) throws Exception {\n     }\n \n     public static void main(String argv[]) throws Exception {\n+        BookieShell shell = new BookieShell();\n         if (argv.length <= 0) {\n-            printShellUsage();\n+            shell.printShellUsage();\n             System.exit(-1);\n         }\n \n         CompositeConfiguration conf = new CompositeConfiguration();\n         // load configuration\n         if (\"-conf\".equals(argv[0])) {\n             if (argv.length <= 1) {\n-                printShellUsage();\n+                shell.printShellUsage();\n                 System.exit(-1);\n             }\n             conf.addConfiguration(new PropertiesConfiguration(\n@@ -651,7 +1231,7 @@ public static void main(String argv[]) throws Exception {\n             argv = newArgv;\n         }\n \n-        BookieShell shell = new BookieShell();\n+\n         shell.setConf(conf);\n         int res = shell.run(argv);\n         System.exit(res);\n@@ -670,7 +1250,7 @@ public static void main(String argv[]) throws Exception {\n      * @return file object.\n      */\n     private File getLedgerFile(long ledgerId) {\n-        String ledgerName = LedgerCacheImpl.getLedgerName(ledgerId);\n+        String ledgerName = IndexPersistenceMgr.getLedgerName(ledgerId);\n         File lf = null;\n         for (File d : ledgerDirectories) {\n             lf = new File(d, ledgerName);\n@@ -721,7 +1301,7 @@ protected void scanEntryLog(long logId, EntryLogScanner scanner) throws IOExcept\n \n     private synchronized Journal getJournal() throws IOException {\n         if (null == journal) {\n-            journal = new Journal(bkConf, new LedgerDirsManager(bkConf));\n+            journal = new Journal(bkConf, new LedgerDirsManager(bkConf, bkConf.getLedgerDirs()));\n         }\n         return journal;\n     }\n@@ -784,8 +1364,7 @@ protected void readLedgerIndexEntries(long ledgerId) throws IOException {\n         lep.usePage();\n         try {\n             while (curSize < size) {\n-                lep.setLedger(ledgerId);\n-                lep.setFirstEntry(curEntry);\n+                lep.setLedgerAndFirstEntry(ledgerId, curEntry);\n                 lep.readPage(fi);\n \n                 // process a page\n@@ -863,10 +1442,10 @@ public void process(int journalVersion, long offset, ByteBuffer entry) throws IO\n      * Print last log mark\n      */\n     protected void printLastLogMark() throws IOException {\n-        LastLogMark lastLogMark = getJournal().getLastLogMark();\n-        System.out.println(\"LastLogMark: Journal Id - \" + lastLogMark.getTxnLogId() + \"(\"\n-                + Long.toHexString(lastLogMark.getTxnLogId()) + \".txn), Pos - \"\n-                + lastLogMark.getTxnLogPosition());\n+        LogMark lastLogMark = getJournal().getLastLogMark().getCurMark();\n+        System.out.println(\"LastLogMark: Journal Id - \" + lastLogMark.getLogFileId() + \"(\"\n+                + Long.toHexString(lastLogMark.getLogFileId()) + \".txn), Pos - \"\n+                + lastLogMark.getLogFileOffset());\n     }\n \n     /**\n@@ -895,6 +1474,12 @@ private void formatEntry(long pos, ByteBuffer recBuff, boolean printMsg) {\n             System.out.println();\n             return;\n         }\n+        if (entryId == Bookie.METAENTRY_ID_FENCE_KEY) {\n+            System.out.println(\"Type:           META\");\n+            System.out.println(\"Fenced\");\n+            System.out.println();\n+            return;\n+        }\n         // process a data entry\n         long lastAddConfirmed = recBuff.getLong();\n         System.out.println(\"Type:           DATA\");\n@@ -923,6 +1508,33 @@ static String bytes2Hex(byte[] data) {\n         for (byte b : data) {\n             formatter.format(\"%02x\", b);\n         }\n+        formatter.close();\n         return sb.toString();\n     }\n+\n+    private static int getOptionIntValue(CommandLine cmdLine, String option, int defaultVal) {\n+        if (cmdLine.hasOption(option)) {\n+            String val = cmdLine.getOptionValue(option);\n+            try {\n+                return Integer.parseInt(val);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid value for option \" + option + \" : \" + val);\n+                return defaultVal;\n+            }\n+        }\n+        return defaultVal;\n+    }\n+\n+    private static long getOptionLongValue(CommandLine cmdLine, String option, long defaultVal) {\n+        if (cmdLine.hasOption(option)) {\n+            String val = cmdLine.getOptionValue(option);\n+            try {\n+                return Long.parseLong(val);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid value for option \" + option + \" : \" + val);\n+                return defaultVal;\n+            }\n+        }\n+        return defaultVal;\n+    }\n }"},{"sha":"8fddc3f677a8e0fd9a682926f78fd9fe69c2428f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,55 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/*\n+* Wrapper that wraps bookie threads\n+* Any common handing that we require for all bookie threads\n+* should be implemented here\n+*/\n+public class BookieThread extends Thread implements\n+        Thread.UncaughtExceptionHandler {\n+\n+    private static final Logger LOG = LoggerFactory\n+            .getLogger(BookieThread.class);\n+\n+    @Override\n+    public void uncaughtException(Thread t, Throwable e) {\n+        handleException(t, e);\n+    }\n+\n+    public BookieThread(String name) {\n+        super(name);\n+        setUncaughtExceptionHandler(this);\n+    }\n+\n+    public BookieThread(Runnable thread, String name) {\n+        super(thread, name);\n+        setUncaughtExceptionHandler(this);\n+    }\n+\n+    /**\n+     * Handles uncaught exception occurred in thread\n+     */\n+    protected void handleException(Thread t, Throwable e) {\n+        LOG.error(\"Uncaught exception in thread {}\", t.getName(), e);\n+    }\n+}"},{"sha":"cb7d914d7cf68307307641b13b226e1e125f2893","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","status":"modified","additions":100,"deletions":76,"changes":176,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -24,47 +24,48 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n+import org.apache.bookkeeper.util.ZeroBuffer;\n+import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * Provides a buffering layer in front of a FileChannel.\n  */\n-public class BufferedChannel\n-{\n-    ByteBuffer writeBuffer;\n-    ByteBuffer readBuffer;\n-    private FileChannel bc;\n-    long position;\n-    int capacity;\n-    long readBufferStartPosition;\n-    long writeBufferStartPosition;\n+public class BufferedChannel extends BufferedReadChannel {\n+    // The capacity of the write buffer.\n+    protected final int writeCapacity;\n+    // The position of the file channel's write pointer.\n+    protected AtomicLong writeBufferStartPosition = new AtomicLong(0);\n+    // The buffer used to write operations.\n+    protected final ByteBuffer writeBuffer;\n+    // The absolute position of the next write operation.\n+    protected volatile long position;\n+\n     // make constructor to be public for unit test\n-    public BufferedChannel(FileChannel bc, int capacity) throws IOException {\n-        this.bc = bc;\n-        this.capacity = capacity;\n-        position = bc.position();\n-        writeBufferStartPosition = position;\n+    public BufferedChannel(FileChannel fc, int capacity) throws IOException {\n+        // Use the same capacity for read and write buffers.\n+        this(fc, capacity, capacity);\n     }\n \n-    /**\n-     * @return file channel\n-     */\n-    FileChannel getFileChannel() {\n-        return this.bc;\n+    public BufferedChannel(FileChannel fc, int writeCapacity, int readCapacity) throws IOException {\n+        super(fc, readCapacity);\n+        // Set the read buffer's limit to readCapacity.\n+        this.readBuffer.limit(readCapacity);\n+        this.writeCapacity = writeCapacity;\n+        this.position = fc.position();\n+        this.writeBufferStartPosition.set(position);\n+        this.writeBuffer = ByteBuffer.allocateDirect(writeCapacity);\n     }\n \n-    /*    public void close() throws IOException {\n-            bc.close();\n-        }\n-    */\n-//    public boolean isOpen() {\n-//        return bc.isOpen();\n-//    }\n-\n-    synchronized public int write(ByteBuffer src) throws IOException {\n+    /**\n+     * Write all the data in src to the {@link FileChannel}. Note that this function can\n+     * buffer or re-order writes based on the implementation. These writes will be flushed\n+     * to the disk only when flush() is invoked.\n+     *\n+     * @param src The source ByteBuffer which contains the data to be written.\n+     * @throws IOException if a write operation fails.\n+     */\n+    synchronized public void write(ByteBuffer src) throws IOException {\n         int copied = 0;\n-        if (writeBuffer == null) {\n-            writeBuffer = ByteBuffer.allocateDirect(capacity);\n-        }\n         while(src.remaining() > 0) {\n             int truncated = 0;\n             if (writeBuffer.remaining() < src.remaining()) {\n@@ -74,107 +75,130 @@ synchronized public int write(ByteBuffer src) throws IOException {\n             copied += src.remaining();\n             writeBuffer.put(src);\n             src.limit(src.limit()+truncated);\n+            // if we have run out of buffer space, we should flush to the file\n             if (writeBuffer.remaining() == 0) {\n-                writeBuffer.flip();\n-                bc.write(writeBuffer);\n-                writeBuffer.clear();\n-                writeBufferStartPosition = bc.position();\n+                flushInternal();\n             }\n         }\n         position += copied;\n-        return copied;\n     }\n \n+    /**\n+     * Get the position where the next write operation will begin writing from.\n+     * @return\n+     */\n     public long position() {\n         return position;\n     }\n \n     /**\n-     * Retrieve the current size of the underlying FileChannel\n-     *\n-     * @return FileChannel size measured in bytes\n-     *\n-     * @throws IOException if some I/O error occurs reading the FileChannel\n+     * Get the position of the file channel's write pointer.\n+     * @return\n      */\n-    public long size() throws IOException {\n-        return bc.size();\n+    public long getFileChannelPosition() {\n+        return writeBufferStartPosition.get();\n     }\n \n-    public void flush(boolean sync) throws IOException {\n+\n+    /**\n+     * Write any data in the buffer to the file. If sync is set to true, force a sync operation so that\n+     * data is persisted to the disk.\n+     * @param shouldForceWrite\n+     * @throws IOException if the write or sync operation fails.\n+     */\n+    public void flush(boolean shouldForceWrite) throws IOException {\n         synchronized(this) {\n-            if (writeBuffer == null) {\n-                return;\n-            }\n-            writeBuffer.flip();\n-            bc.write(writeBuffer);\n-            writeBuffer.clear();\n-            writeBufferStartPosition = bc.position();\n+            flushInternal();\n         }\n-        if (sync) {\n-            bc.force(false);\n+        if (shouldForceWrite) {\n+            forceWrite(false);\n         }\n     }\n \n-    /*public Channel getInternalChannel() {\n-        return bc;\n-    }*/\n-    synchronized public int read(ByteBuffer buff, long pos) throws IOException {\n-        if (readBuffer == null) {\n-            readBuffer = ByteBuffer.allocateDirect(capacity);\n-            readBufferStartPosition = Long.MIN_VALUE;\n-        }\n+    /**\n+     * Write any data in the buffer to the file and advance the writeBufferPosition\n+     * Callers are expected to synchronize appropriately\n+     * @throws IOException if the write fails.\n+     */\n+    private void flushInternal() throws IOException {\n+        writeBuffer.flip();\n+        do {\n+            fileChannel.write(writeBuffer);\n+        } while (writeBuffer.hasRemaining());\n+        writeBuffer.clear();\n+        writeBufferStartPosition.set(fileChannel.position());\n+    }\n+\n+    public long forceWrite(boolean forceMetadata) throws IOException {\n+        // This is the point up to which we had flushed to the file system page cache\n+        // before issuing this force write hence is guaranteed to be made durable by\n+        // the force write, any flush that happens after this may or may\n+        // not be flushed\n+        long positionForceWrite = writeBufferStartPosition.get();\n+        fileChannel.force(forceMetadata);\n+        return positionForceWrite;\n+    }\n+\n+    @Override\n+    synchronized public int read(ByteBuffer dest, long pos) throws IOException {\n         long prevPos = pos;\n-        while(buff.remaining() > 0) {\n+        while(dest.remaining() > 0) {\n             // check if it is in the write buffer\n-            if (writeBuffer != null && writeBufferStartPosition <= pos) {\n-                long positionInBuffer = pos - writeBufferStartPosition;\n+            if (writeBuffer != null && writeBufferStartPosition.get() <= pos) {\n+                long positionInBuffer = pos - writeBufferStartPosition.get();\n                 long bytesToCopy = writeBuffer.position()-positionInBuffer;\n-                if (bytesToCopy > buff.remaining()) {\n-                    bytesToCopy = buff.remaining();\n+                if (bytesToCopy > dest.remaining()) {\n+                    bytesToCopy = dest.remaining();\n                 }\n                 if (bytesToCopy == 0) {\n                     throw new IOException(\"Read past EOF\");\n                 }\n                 ByteBuffer src = writeBuffer.duplicate();\n                 src.position((int) positionInBuffer);\n                 src.limit((int) (positionInBuffer+bytesToCopy));\n-                buff.put(src);\n+                dest.put(src);\n                 pos+= bytesToCopy;\n-            } else if (writeBuffer == null && writeBufferStartPosition <= pos) {\n+            } else if (writeBuffer == null && writeBufferStartPosition.get() <= pos) {\n                 // here we reach the end\n                 break;\n                 // first check if there is anything we can grab from the readBuffer\n             } else if (readBufferStartPosition <= pos && pos < readBufferStartPosition+readBuffer.capacity()) {\n                 long positionInBuffer = pos - readBufferStartPosition;\n                 long bytesToCopy = readBuffer.capacity()-positionInBuffer;\n-                if (bytesToCopy > buff.remaining()) {\n-                    bytesToCopy = buff.remaining();\n+                if (bytesToCopy > dest.remaining()) {\n+                    bytesToCopy = dest.remaining();\n                 }\n                 ByteBuffer src = readBuffer.duplicate();\n                 src.position((int) positionInBuffer);\n                 src.limit((int) (positionInBuffer+bytesToCopy));\n-                buff.put(src);\n+                dest.put(src);\n                 pos += bytesToCopy;\n                 // let's read it\n             } else {\n                 readBufferStartPosition = pos;\n                 readBuffer.clear();\n                 // make sure that we don't overlap with the write buffer\n-                if (readBufferStartPosition + readBuffer.capacity() >= writeBufferStartPosition) {\n-                    readBufferStartPosition = writeBufferStartPosition - readBuffer.capacity();\n+                if (readBufferStartPosition + readBuffer.capacity() >= writeBufferStartPosition.get()) {\n+                    readBufferStartPosition = writeBufferStartPosition.get() - readBuffer.capacity();\n                     if (readBufferStartPosition < 0) {\n-                        readBuffer.put(LedgerEntryPage.zeroPage, 0, (int)-readBufferStartPosition);\n+                        ZeroBuffer.put(readBuffer, (int)-readBufferStartPosition);\n                     }\n                 }\n                 while(readBuffer.remaining() > 0) {\n-                    if (bc.read(readBuffer, readBufferStartPosition+readBuffer.position()) <= 0) {\n+                    if (fileChannel.read(readBuffer, readBufferStartPosition+readBuffer.position()) <= 0) {\n                         throw new IOException(\"Short read\");\n                     }\n                 }\n-                readBuffer.put(LedgerEntryPage.zeroPage, 0, readBuffer.remaining());\n+                ZeroBuffer.put(readBuffer);\n                 readBuffer.clear();\n             }\n         }\n         return (int)(pos - prevPos);\n     }\n+\n+    @Override\n+    synchronized public void clear() {\n+        super.clear();\n+        writeBuffer.clear();\n+    }\n }"},{"sha":"782a39849758871512cabd9c57aba9096c2aad98","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannelBase.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannelBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannelBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannelBase.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,55 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+\n+public abstract class BufferedChannelBase {\n+    protected final FileChannel fileChannel;\n+\n+    protected BufferedChannelBase(FileChannel fc) {\n+        this.fileChannel = fc;\n+    }\n+\n+    protected FileChannel validateAndGetFileChannel() throws IOException {\n+        // Even if we have BufferedChannelBase objects in the cache, higher layers should\n+        // guarantee that once a log file has been closed and possibly deleted during garbage\n+        // collection, attempts will not be made to read from it\n+        if (!fileChannel.isOpen()) {\n+            throw new IOException(\"Attempting to access a file channel that has already been closed\");\n+        }\n+        return fileChannel;\n+    }\n+\n+    /**\n+     * Get the current size of the underlying FileChannel.\n+     * @return\n+     */\n+    public long size() throws IOException {\n+        return validateAndGetFileChannel().size();\n+    }\n+\n+    /**\n+     * Get the {@link FileChannel} that this BufferedChannel wraps around.\n+     * @return\n+     */\n+    public FileChannel getFileChannel() {\n+        return fileChannel;\n+    }\n+}"},{"sha":"0114043d47e9ce1f642e43606eb3e9f0c8646fee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedReadChannel.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedReadChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedReadChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedReadChannel.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,103 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+\n+/**\n+ * A Buffered channel without a write buffer. Only reads are buffered.\n+ */\n+public class BufferedReadChannel extends BufferedChannelBase {\n+    private static Logger LOG = LoggerFactory.getLogger(BufferedReadChannel.class);\n+    // The capacity of the read buffer.\n+    protected final int readCapacity;\n+    // The buffer for read operations.\n+    protected ByteBuffer readBuffer;\n+    // The starting position of the data currently in the read buffer.\n+    protected long readBufferStartPosition = Long.MIN_VALUE;\n+\n+    long invocationCount = 0;\n+    long cacheHitCount = 0;\n+\n+    public BufferedReadChannel(FileChannel fileChannel, int readCapacity) throws IOException {\n+        super(fileChannel);\n+        this.readCapacity = readCapacity;\n+        this.readBuffer = ByteBuffer.allocateDirect(readCapacity);\n+        this.readBuffer.limit(0);\n+    }\n+\n+    /**\n+     * Read as many bytes into dest as dest.capacity() starting at position pos in the\n+     * FileChannel. This function can read from the buffer or the file channel\n+     * depending on the implementation..\n+     * @param dest\n+     * @param pos\n+     * @return The total number of bytes read. -1 if the given position is greater than or equal to the file's current size.\n+     * @throws IOException if I/O error occurs\n+     */\n+    synchronized public int read(ByteBuffer dest, long pos) throws IOException {\n+        invocationCount++;\n+        long currentPosition = pos;\n+        long eof = validateAndGetFileChannel().size();\n+        // return -1 if the given position is greater than or equal to the file's current size.\n+        if (pos >= eof) {\n+            return -1;\n+        }\n+        while (dest.remaining() > 0) {\n+            // Check if the data is in the buffer, if so, copy it.\n+            if (readBufferStartPosition <= currentPosition && currentPosition < readBufferStartPosition + readBuffer.limit()) {\n+                long posInBuffer = currentPosition - readBufferStartPosition;\n+                long bytesToCopy = Math.min(dest.remaining(), readBuffer.limit() - posInBuffer);\n+                ByteBuffer rbDup = readBuffer.duplicate();\n+                rbDup.position((int)posInBuffer);\n+                rbDup.limit((int)(posInBuffer + bytesToCopy));\n+                dest.put(rbDup);\n+                currentPosition += bytesToCopy;\n+                cacheHitCount++;\n+            } else if (currentPosition >= eof) {\n+                // here we reached eof.\n+                break;\n+            } else {\n+                // We don't have it in the buffer, so put necessary data in the buffer\n+                readBuffer.clear();\n+                readBufferStartPosition = currentPosition;\n+                int readBytes = 0;\n+                if ((readBytes = validateAndGetFileChannel().read(readBuffer, currentPosition)) <= 0) {\n+                    throw new IOException(\"Reading from filechannel returned a non-positive value. Short read.\");\n+                }\n+                readBuffer.limit(readBytes);\n+            }\n+        }\n+        return (int)(currentPosition - pos);\n+    }\n+\n+    synchronized public void clear() {\n+        readBuffer.clear();\n+        readBuffer.limit(0);\n+    }\n+\n+}"},{"sha":"43da72fac30c927865867b8b2f4dc9b3e57a388e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CacheCallback.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CacheCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CacheCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CacheCallback.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,34 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Interface plugged into caching to receive callback notifications\n+ */\n+public interface CacheCallback {\n+    /**\n+     * Process notification that cache size limit reached.\n+     */\n+    public void onSizeLimitReached() throws IOException;\n+}"},{"sha":"911c6f4f0fc54d9973be1fd4fcad8f289fd0a195","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSource.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSource.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSource.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSource.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Interface to communicate checkpoint progress.\n+ */\n+public interface CheckpointSource {\n+\n+    /**\n+     * A checkpoint presented a time point. All entries added before this checkpoint are already persisted.\n+     */\n+    public static interface Checkpoint extends Comparable<Checkpoint> {\n+\n+        public static final Checkpoint MAX = new Checkpoint() {\n+\n+            @Override\n+            public int compareTo(Checkpoint o) {\n+                if (o == MAX) {\n+                    return 0;\n+                }\n+                return 1;\n+            }\n+\n+            @Override\n+            public boolean equals(Object o) {\n+                return this == o;\n+            }\n+\n+        };\n+\n+        public static final Checkpoint MIN = new Checkpoint() {\n+            @Override\n+            public int compareTo(Checkpoint o) {\n+                if (o == MIN) {\n+                    return 0;\n+                }\n+                return -1;\n+            }\n+\n+            @Override\n+            public boolean equals(Object o) {\n+                return this == o;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Request a new a checkpoint.\n+     *\n+     * @return checkpoint.\n+     */\n+    public Checkpoint newCheckpoint();\n+\n+    /**\n+     * Tell checkpoint source that the checkpoint is completed.\n+     * If <code>compact</code> is true, the implementation could compact\n+     * to reduce size of data containing old checkpoints.\n+     *\n+     * @param checkpoint\n+     *          The checkpoint that has been completed\n+     * @param compact\n+     *          Flag to compact old checkpoints.\n+     */\n+    public void checkpointComplete(Checkpoint checkpoint, boolean compact) throws IOException;\n+}"},{"sha":"9e77029e46622b0611a896b48375f6279b14d73a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":254,"deletions":76,"changes":330,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -20,29 +20,32 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n import java.io.EOFException;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.FileOutputStream;\n-import java.io.FileReader;\n-import java.io.OutputStreamWriter;\n-import java.io.BufferedWriter;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n import java.io.StringReader;\n-\n+import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n \n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.data.Stat;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.ZooDefs.Ids;\n-\n-import org.apache.bookkeeper.util.BookKeeperConstants;\n-import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.ZkVersion;\n import org.apache.bookkeeper.proto.DataFormats.CookieFormat;\n-\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -62,17 +65,21 @@\n  * with the cluster. It's better to fail early and obviously.\n  */\n class Cookie {\n-    static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n \n     static final int CURRENT_COOKIE_LAYOUT_VERSION = 4;\n-    private int layoutVersion = 0;\n-    private String bookieHost = null;\n-    private String journalDir = null;\n-    private String ledgerDirs = null;\n-    private int znodeVersion = -1;\n-    private String instanceId = null;\n-\n-    private Cookie() {\n+    private final int layoutVersion;\n+    private final String bookieHost;\n+    private final String journalDir;\n+    private final String ledgerDirs;\n+    private final String instanceId;\n+\n+    private Cookie(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, String instanceId) {\n+        this.layoutVersion = layoutVersion;\n+        this.bookieHost = bookieHost;\n+        this.journalDir = journalDir;\n+        this.ledgerDirs = ledgerDirs;\n+        this.instanceId = instanceId;\n     }\n \n     public void verify(Cookie c) throws BookieException.InvalidCookieException {\n@@ -121,35 +128,37 @@ private String toStringVersion3() {\n         return b.toString();\n     }\n \n-    private static Cookie parse(BufferedReader reader) throws IOException {\n-        Cookie c = new Cookie();\n+    private static Builder parse(BufferedReader reader) throws IOException {\n+        Builder cBuilder = Cookie.newBuilder();\n+        int layoutVersion = 0;\n         String line = reader.readLine();\n         if (null == line) {\n             throw new EOFException(\"Exception in parsing cookie\");\n         }\n         try {\n-            c.layoutVersion = Integer.parseInt(line.trim());\n+            layoutVersion = Integer.parseInt(line.trim());\n+            cBuilder.setLayoutVersion(layoutVersion);\n         } catch (NumberFormatException e) {\n             throw new IOException(\"Invalid string '\" + line.trim()\n                     + \"', cannot parse cookie.\");\n         }\n-        if (c.layoutVersion == 3) {\n-            c.bookieHost = reader.readLine();\n-            c.journalDir = reader.readLine();\n-            c.ledgerDirs = reader.readLine();\n-        } else if (c.layoutVersion >= 4) {\n-            CookieFormat.Builder builder = CookieFormat.newBuilder();\n-            TextFormat.merge(reader, builder);\n-            CookieFormat data = builder.build();\n-            c.bookieHost = data.getBookieHost();\n-            c.journalDir = data.getJournalDir();\n-            c.ledgerDirs = data.getLedgerDirs();\n+        if (layoutVersion == 3) {\n+            cBuilder.setBookieHost(reader.readLine());\n+            cBuilder.setJournalDir(reader.readLine());\n+            cBuilder.setLedgerDirs(reader.readLine());\n+        } else if (layoutVersion >= 4) {\n+            CookieFormat.Builder cfBuilder = CookieFormat.newBuilder();\n+            TextFormat.merge(reader, cfBuilder);\n+            CookieFormat data = cfBuilder.build();\n+            cBuilder.setBookieHost(data.getBookieHost());\n+            cBuilder.setJournalDir(data.getJournalDir());\n+            cBuilder.setLedgerDirs(data.getLedgerDirs());\n             // Since InstanceId is optional\n             if (null != data.getInstanceId() && !data.getInstanceId().isEmpty()) {\n-                c.instanceId = data.getInstanceId();\n+                cBuilder.setInstanceId(data.getInstanceId());\n             }\n         }\n-        return c;\n+        return cBuilder;\n     }\n \n     void writeToDirectory(File directory) throws IOException {\n@@ -159,7 +168,7 @@ void writeToDirectory(File directory) throws IOException {\n         FileOutputStream fos = new FileOutputStream(versionFile);\n         BufferedWriter bw = null;\n         try {\n-            bw = new BufferedWriter(new OutputStreamWriter(fos));\n+            bw = new BufferedWriter(new OutputStreamWriter(fos, UTF_8));\n             bw.write(toString());\n         } finally {\n             if (bw != null) {\n@@ -169,92 +178,261 @@ void writeToDirectory(File directory) throws IOException {\n         }\n     }\n \n-    void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n+    /**\n+     * Writes cookie details to ZooKeeper\n+     *\n+     * @param zk\n+     *            ZooKeeper instance\n+     * @param conf\n+     *            configuration\n+     * @param version\n+     *            version\n+     *\n+     * @throws KeeperException\n+     * @throws InterruptedException\n+     * @throws UnknownHostException\n+     */\n+    void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version)\n             throws KeeperException, InterruptedException, UnknownHostException {\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n                 + BookKeeperConstants.COOKIE_NODE;\n         String zkPath = getZkPath(conf);\n-        byte[] data = toString().getBytes();\n-        if (znodeVersion != -1) {\n-            zk.setData(zkPath, data, znodeVersion);\n-        } else {\n+        byte[] data = toString().getBytes(UTF_8);\n+        if (Version.NEW == version) {\n             if (zk.exists(bookieCookiePath, false) == null) {\n                 try {\n                     zk.create(bookieCookiePath, new byte[0],\n-                              Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                 } catch (KeeperException.NodeExistsException nne) {\n                     LOG.info(\"More than one bookie tried to create {} at once. Safe to ignore\",\n-                             bookieCookiePath);\n+                            bookieCookiePath);\n                 }\n             }\n             zk.create(zkPath, data,\n-                      Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-            Stat stat = zk.exists(zkPath, false);\n-            this.znodeVersion = stat.getVersion();\n+                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        } else {\n+            if (!(version instanceof ZkVersion)) {\n+                throw new IllegalArgumentException(\"Invalid version type, expected ZkVersion type\");\n+            }\n+            zk.setData(zkPath, data, ((ZkVersion) version).getZnodeVersion());\n         }\n     }\n \n-    void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n-            throws KeeperException, InterruptedException, UnknownHostException {\n-        String zkPath = getZkPath(conf);\n-        if (znodeVersion != -1) {\n-            zk.delete(zkPath, znodeVersion);\n+    /**\n+     * Deletes cookie from ZooKeeper and sets znode version to DEFAULT_COOKIE_ZNODE_VERSION\n+     *\n+     * @param zk\n+     *            ZooKeeper instance\n+     * @param conf\n+     *            configuration\n+     * @param version\n+     *            zookeeper version\n+     *\n+     * @throws KeeperException\n+     * @throws InterruptedException\n+     * @throws UnknownHostException\n+     */\n+    void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version) throws KeeperException,\n+            InterruptedException, UnknownHostException {\n+        if (!(version instanceof ZkVersion)) {\n+            throw new IllegalArgumentException(\"Invalid version type, expected ZkVersion type\");\n         }\n-        znodeVersion = -1;\n+        String zkPath = getZkPath(conf);\n+        zk.delete(zkPath, ((ZkVersion)version).getZnodeVersion());\n     }\n \n-    static Cookie generateCookie(ServerConfiguration conf)\n+    /**\n+     * Generate cookie from the given configuration\n+     *\n+     * @param conf\n+     *            configuration\n+     *\n+     * @return cookie builder object\n+     *\n+     * @throws UnknownHostException\n+     */\n+    static Builder generateCookie(ServerConfiguration conf)\n             throws UnknownHostException {\n-        Cookie c = new Cookie();\n-        c.layoutVersion = CURRENT_COOKIE_LAYOUT_VERSION;\n-        c.bookieHost = StringUtils.addrToString(Bookie.getBookieAddress(conf));\n-        c.journalDir = conf.getJournalDirName();\n         StringBuilder b = new StringBuilder();\n         String[] dirs = conf.getLedgerDirNames();\n         b.append(dirs.length);\n         for (String d : dirs) {\n             b.append(\"\\t\").append(d);\n         }\n-        c.ledgerDirs = b.toString();\n-        return c;\n+        Builder builder = Cookie.newBuilder();\n+        builder.setLayoutVersion(CURRENT_COOKIE_LAYOUT_VERSION);\n+        builder.setBookieHost(Bookie.getBookieAddress(conf).toString());\n+        builder.setJournalDir(conf.getJournalDirName());\n+        builder.setLedgerDirs(b.toString());\n+        return builder;\n     }\n \n-    static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n+    /**\n+     * Read cookie from ZooKeeper.\n+     *\n+     * @param zk\n+     *            ZooKeeper instance\n+     * @param conf\n+     *            configuration\n+     *\n+     * @return versioned cookie object\n+     *\n+     * @throws KeeperException\n+     * @throws InterruptedException\n+     * @throws IOException\n+     * @throws UnknownHostException\n+     */\n+    static Versioned<Cookie> readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n             throws KeeperException, InterruptedException, IOException, UnknownHostException {\n         String zkPath = getZkPath(conf);\n \n         Stat stat = zk.exists(zkPath, false);\n         byte[] data = zk.getData(zkPath, false, stat);\n-        BufferedReader reader = new BufferedReader(new StringReader(new String(\n-                data)));\n+        BufferedReader reader = new BufferedReader(new StringReader(new String(data, UTF_8)));\n         try {\n-            Cookie c = parse(reader);\n-            c.znodeVersion = stat.getVersion();\n-            return c;\n+            Builder builder = parse(reader);\n+            Cookie cookie = builder.build();\n+            // sets stat version from ZooKeeper\n+            ZkVersion version = new ZkVersion(stat.getVersion());\n+            return new Versioned<Cookie>(cookie, version);\n         } finally {\n             reader.close();\n         }\n     }\n \n+    /**\n+     * Returns cookie from the given directory\n+     *\n+     * @param directory\n+     *            directory\n+     *\n+     * @return cookie object\n+     *\n+     * @throws IOException\n+     */\n     static Cookie readFromDirectory(File directory) throws IOException {\n         File versionFile = new File(directory,\n                 BookKeeperConstants.VERSION_FILENAME);\n-        BufferedReader reader = new BufferedReader(new FileReader(versionFile));\n+        BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new FileInputStream(versionFile), UTF_8));\n         try {\n-            return parse(reader);\n+            return parse(reader).build();\n         } finally {\n             reader.close();\n         }\n     }\n \n-    public void setInstanceId(String instanceId) {\n-        this.instanceId = instanceId;\n-    }\n-\n-    private static String getZkPath(ServerConfiguration conf)\n+    /**\n+     * Returns cookie path in zookeeper\n+     *\n+     * @param conf\n+     *            configuration\n+     *          \n+     * @return cookie zk path\n+     *\n+     * @throws UnknownHostException\n+     */\n+    static String getZkPath(ServerConfiguration conf)\n             throws UnknownHostException {\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n                 + BookKeeperConstants.COOKIE_NODE;\n-        return bookieCookiePath + \"/\" + StringUtils.addrToString(Bookie.getBookieAddress(conf));\n+        return bookieCookiePath + \"/\" + Bookie.getBookieAddress(conf);\n+    }\n+\n+    /**\n+     * Check whether the 'bookieHost' was created using a hostname or an IP\n+     * address. Represent as 'hostname/IPaddress' if the InetSocketAddress was\n+     * created using hostname. Represent as '/IPaddress' if the\n+     * InetSocketAddress was created using an IPaddress\n+     * \n+     * @return true if the 'bookieHost' was created using an IP address, false\n+     *         if the 'bookieHost' was created using a hostname\n+     */\n+    public boolean isBookieHostCreatedFromIp() throws IOException {\n+        String parts[] = bookieHost.split(\":\");\n+        if (parts.length != 2) {\n+            throw new IOException(bookieHost + \" does not have the form host:port\");\n+        }\n+        int port;\n+        try {\n+            port = Integer.parseInt(parts[1]);\n+        } catch (NumberFormatException e) {\n+            throw new IOException(bookieHost + \" does not have the form host:port\");\n+        }\n+\n+        InetSocketAddress addr = new InetSocketAddress(parts[0], port);\n+        return addr.toString().startsWith(\"/\");\n+    }\n+\n+    /**\n+     * Cookie builder\n+     */\n+    public static class Builder {\n+        private int layoutVersion = 0;\n+        private String bookieHost = null;\n+        private String journalDir = null;\n+        private String ledgerDirs = null;\n+        private String instanceId = null;\n+\n+        private Builder() {\n+        }\n+\n+        private Builder(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, String instanceId) {\n+            this.layoutVersion = layoutVersion;\n+            this.bookieHost = bookieHost;\n+            this.journalDir = journalDir;\n+            this.ledgerDirs = ledgerDirs;\n+            this.instanceId = instanceId;\n+        }\n+\n+        public Builder setLayoutVersion(int layoutVersion) {\n+            this.layoutVersion = layoutVersion;\n+            return this;\n+        }\n+\n+        public Builder setBookieHost(String bookieHost) {\n+            this.bookieHost = bookieHost;\n+            return this;\n+        }\n+\n+        public Builder setJournalDir(String journalDir) {\n+            this.journalDir = journalDir;\n+            return this;\n+        }\n+\n+        public Builder setLedgerDirs(String ledgerDirs) {\n+            this.ledgerDirs = ledgerDirs;\n+            return this;\n+        }\n+\n+        public Builder setInstanceId(String instanceId) {\n+            this.instanceId = instanceId;\n+            return this;\n+        }\n+\n+        public Cookie build() {\n+            return new Cookie(layoutVersion, bookieHost, journalDir, ledgerDirs, instanceId);\n+        }\n+    }\n+\n+    /**\n+     * Returns Cookie builder\n+     * \n+     * @return cookie builder\n+     */\n+    static Builder newBuilder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Returns Cookie builder with the copy of given oldCookie\n+     *\n+     * @param oldCookie\n+     *            build new cookie from this cookie\n+     * @return cookie builder\n+     */\n+    static Builder newBuilder(Cookie oldCookie) {\n+        return new Builder(oldCookie.layoutVersion, oldCookie.bookieHost, oldCookie.journalDir, oldCookie.ledgerDirs,\n+                oldCookie.instanceId);\n     }\n }"},{"sha":"0107d7a1e6248516369310a15dd9aa65e8ba6fab","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKey.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKey.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKey.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKey.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,83 @@\n+/**\n+ * Copyright The Apache Software Foundation\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+\n+public class EntryKey {\n+    long ledgerId;\n+    long entryId;\n+\n+    public EntryKey() {\n+        this(0, 0);\n+    }\n+\n+    public EntryKey(long ledgerId, long entryId) {\n+        this.ledgerId = ledgerId;\n+        this.entryId = entryId;\n+    }\n+\n+    public long getLedgerId() {\n+        return ledgerId;\n+    }\n+\n+    public long getEntryId() {\n+        return entryId;\n+    }\n+\n+    /**\n+    * Comparator for the key portion\n+    */\n+    public static final KeyComparator COMPARATOR = new KeyComparator();\n+\n+    // Only compares the key portion\n+    @Override\n+    public boolean equals(Object other) {\n+        if (!(other instanceof EntryKey)) {\n+          return false;\n+        }\n+        EntryKey key = (EntryKey)other;\n+        return ledgerId == key.ledgerId &&\n+            entryId == key.entryId;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return (int)(ledgerId * 13 ^ entryId * 17);\n+    }\n+}\n+\n+/**\n+* Compare EntryKey.\n+*/\n+class KeyComparator implements Comparator<EntryKey>, Serializable {\n+\n+    private static final long serialVersionUID = 0L;\n+\n+    @Override\n+    public int compare(EntryKey left, EntryKey right) {\n+        long ret = left.ledgerId - right.ledgerId;\n+        if (ret == 0) {\n+            ret = left.entryId - right.entryId;\n+        }\n+        return (ret < 0)? -1 : ((ret > 0)? 1 : 0);\n+    }\n+}"},{"sha":"dab5396c3a91c30a8ad55761cc2cda7241b62db0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKeyValue.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKeyValue.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKeyValue.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKeyValue.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,129 @@\n+/**\n+ * Copyright The Apache Software Foundation\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * An entry Key/Value.\n+ * EntryKeyValue wraps a byte array and takes offsets and lengths into the array to\n+ * interpret the content as entry blob.\n+ */\n+public class EntryKeyValue extends EntryKey {\n+    final private byte [] bytes;\n+    private int offset = 0; // start offset of entry blob\n+    private int length = 0; // length of entry blob\n+\n+    /**\n+    * @return The byte array backing this EntryKeyValue.\n+    */\n+    public byte [] getBuffer() {\n+        return this.bytes;\n+    }\n+\n+    /**\n+    * @return Offset into {@link #getBuffer()} at which the EntryKeyValue starts.\n+    */\n+    public int getOffset() {\n+        return this.offset;\n+    }\n+\n+    /**\n+    * @return Length of bytes this EntryKeyValue occupies in {@link #getBuffer()}.\n+    */\n+    public int getLength() {\n+        return this.length;\n+    }\n+\n+    /**\n+     *\n+     * Creates a EntryKeyValue from the start of the specified byte array.\n+     * Presumes <code>bytes</code> content contains the value portion of a EntryKeyValue.\n+     * @param bytes byte array\n+     */\n+    public EntryKeyValue(long ledgerId, long entryId, final byte [] bytes) {\n+        this(ledgerId, entryId, bytes, 0, bytes.length);\n+    }\n+\n+    /**\n+     *\n+     * Creates a EntryKeyValue from the start of the specified byte array.\n+     * Presumes <code>bytes</code> content contains the value portion of a EntryKeyValue.\n+     * @param bytes byte array\n+     * @param offset offset in bytes as start of blob\n+     * @param length of blob\n+     */\n+    public EntryKeyValue(long ledgerId, long entryId, final byte [] bytes, int offset, int length) {\n+        super(ledgerId, entryId);\n+        this.bytes = bytes;\n+        this.offset = offset;\n+        this.length = length;\n+    }\n+\n+    /**\n+    * Returns the blob wrapped in a new <code>ByteBuffer</code>.\n+    *\n+    * @return the value\n+    */\n+    public ByteBuffer getValueAsByteBuffer() {\n+        return ByteBuffer.wrap(getBuffer(), getOffset(), getLength());\n+    }\n+\n+    /**\n+    * Write EntryKeyValue blob into the provided byte buffer.\n+    *\n+    * @param dst the bytes buffer to use\n+    *\n+    * @return The number of useful bytes in the buffer.\n+    *\n+    * @throws IllegalArgumentException an illegal value was passed or there is insufficient space\n+    * remaining in the buffer\n+    */\n+    int writeToByteBuffer(ByteBuffer dst) {\n+        if (dst.remaining() < getLength()) {\n+            throw new IllegalArgumentException(\"Buffer size \" + dst.remaining() + \" < \" + getLength());\n+        }\n+\n+        dst.put(getBuffer(), getOffset(), getLength());\n+        return getLength();\n+    }\n+\n+    /**\n+    * String representation\n+    */\n+    public String toString() {\n+        return ledgerId + \":\" + entryId;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        // since this entry is identified by (lid, eid)\n+        // so just use {@link org.apache.bookkeeper.bookie.EntryKey#equals}.\n+        return super.equals(other);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        // since this entry is identified by (lid, eid)\n+        // so just use {@link org.apache.bookkeeper.bookie.EntryKey#hashCode} as the hash code.\n+        return super.hashCode();\n+    }\n+\n+}"},{"sha":"0e052b527e215da193a4faa4ce56262344324900","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":414,"deletions":92,"changes":506,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,6 +21,8 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.io.BufferedReader;\n import java.io.BufferedWriter;\n import java.io.File;\n@@ -36,17 +38,28 @@\n import java.nio.channels.FileChannel;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.LinkedList;\n import java.util.List;\n-import java.util.Map.Entry;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CancellationException;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.MapMaker;\n \n /**\n  * This class manages the writing of the bookkeeper entries. All the new\n@@ -58,27 +71,47 @@\n public class EntryLogger {\n     private static final Logger LOG = LoggerFactory.getLogger(EntryLogger.class);\n \n+    private static class BufferedLogChannel extends BufferedChannel {\n+        final private long logId;\n+        public BufferedLogChannel(FileChannel fc, int writeCapacity,\n+                                  int readCapacity, long logId) throws IOException {\n+            super(fc, writeCapacity, readCapacity);\n+            this.logId = logId;\n+        }\n+        public long getLogId() {\n+            return logId;\n+        }\n+    }\n+\n     volatile File currentDir;\n-    private LedgerDirsManager ledgerDirsManager;\n-    private AtomicBoolean shouldCreateNewEntryLog = new AtomicBoolean(false);\n+    private final LedgerDirsManager ledgerDirsManager;\n+    private final AtomicBoolean shouldCreateNewEntryLog = new AtomicBoolean(false);\n \n-    private long logId;\n+    private volatile long leastUnflushedLogId;\n \n     /**\n      * The maximum size of a entry logger file.\n      */\n     final long logSizeLimit;\n-    private volatile BufferedChannel logChannel;\n+    private List<BufferedLogChannel> logChannelsToFlush;\n+    private volatile BufferedLogChannel logChannel;\n+    private final EntryLoggerAllocator entryLoggerAllocator;\n+    private final boolean entryLogPreAllocationEnabled;\n+    private final CopyOnWriteArrayList<EntryLogListener> listeners\n+        = new CopyOnWriteArrayList<EntryLogListener>();\n+\n     /**\n      * The 1K block at the head of the entry logger file\n      * that contains the fingerprint and (future) meta-data\n      */\n     final static int LOGFILE_HEADER_SIZE = 1024;\n     final ByteBuffer LOGFILE_HEADER = ByteBuffer.allocate(LOGFILE_HEADER_SIZE);\n+    final static long INVALID_LID = -1L;\n \n     final static int MIN_SANE_ENTRY_SIZE = 8 + 8;\n     final static long MB = 1024 * 1024;\n \n+    final ServerConfiguration conf;\n     /**\n      * Scan entries in a entry log file.\n      */\n@@ -107,25 +140,45 @@\n         public void process(long ledgerId, long offset, ByteBuffer entry) throws IOException;\n     }\n \n+    /**\n+     * Entry Log Listener\n+     */\n+    static interface EntryLogListener {\n+        /**\n+         * Rotate a new entry log to write.\n+         */\n+        public void onRotateEntryLog();\n+    }\n+\n     /**\n      * Create an EntryLogger that stores it's log files in the given\n      * directories\n      */\n     public EntryLogger(ServerConfiguration conf,\n             LedgerDirsManager ledgerDirsManager) throws IOException {\n+        this(conf, ledgerDirsManager, null);\n+    }\n+\n+    public EntryLogger(ServerConfiguration conf,\n+            LedgerDirsManager ledgerDirsManager, EntryLogListener listener)\n+                    throws IOException {\n         this.ledgerDirsManager = ledgerDirsManager;\n+        if (listener != null) {\n+            addListener(listener);\n+        }\n         // log size limit\n         this.logSizeLimit = conf.getEntryLogSizeLimit();\n+        this.entryLogPreAllocationEnabled = conf.isEntryLogFilePreAllocationEnabled();\n \n         // Initialize the entry log header buffer. This cannot be a static object\n         // since in our unit tests, we run multiple Bookies and thus EntryLoggers\n         // within the same JVM. All of these Bookie instances access this header\n         // so there can be race conditions when entry logs are rolled over and\n         // this header buffer is cleared before writing it into the new logChannel.\n-        LOGFILE_HEADER.put(\"BKLO\".getBytes());\n+        LOGFILE_HEADER.put(\"BKLO\".getBytes(UTF_8));\n \n         // Find the largest logId\n-        logId = -1;\n+        long logId = INVALID_LID;\n         for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n             if (!dir.exists()) {\n                 throw new FileNotFoundException(\n@@ -136,17 +189,112 @@ public EntryLogger(ServerConfiguration conf,\n                 logId = lastLogId;\n             }\n         }\n-\n+        this.leastUnflushedLogId = logId + 1;\n+        this.entryLoggerAllocator = new EntryLoggerAllocator(logId);\n+        this.conf = conf;\n         initialize();\n     }\n \n+    void addListener(EntryLogListener listener) {\n+        if (null != listener) {\n+            listeners.add(listener);\n+        }\n+    }\n+\n     /**\n-     * Maps entry log files to open channels.\n+     * If the log id of current writable channel is the same as entryLogId and the position\n+     * we want to read might end up reading from a position in the write buffer of the\n+     * buffered channel, route this read to the current logChannel. Else,\n+     * read from the BufferedReadChannel that is provided.\n+     * @param entryLogId\n+     * @param channel\n+     * @param buff remaining() on this bytebuffer tells us the last position that we\n+     *             expect to read.\n+     * @param pos The starting position from where we want to read.\n+     * @return\n      */\n-    private ConcurrentHashMap<Long, BufferedChannel> channels = new ConcurrentHashMap<Long, BufferedChannel>();\n+    private int readFromLogChannel(long entryLogId, BufferedReadChannel channel, ByteBuffer buff, long pos)\n+            throws IOException {\n+        BufferedLogChannel bc = logChannel;\n+        if (null != bc) {\n+            if (entryLogId == bc.getLogId()) {\n+                synchronized (bc) {\n+                    if (pos + buff.remaining() >= bc.getFileChannelPosition()) {\n+                        return bc.read(buff, pos);\n+                    }\n+                }\n+            }\n+        }\n+        return channel.read(buff, pos);\n+    }\n+\n+    /**\n+     * A thread-local variable that wraps a mapping of log ids to bufferedchannels\n+     * These channels should be used only for reading. logChannel is the one\n+     * that is used for writes.\n+     */\n+    private final ThreadLocal<Map<Long, BufferedReadChannel>> logid2Channel\n+            = new ThreadLocal<Map<Long, BufferedReadChannel>>() {\n+        @Override\n+        public Map<Long, BufferedReadChannel> initialValue() {\n+            // Since this is thread local there only one modifier\n+            // We dont really need the concurrency, but we need to use\n+            // the weak values. Therefore using the concurrency level of 1\n+            return new MapMaker().concurrencyLevel(1)\n+                .weakValues()\n+                .makeMap();\n+        }\n+    };\n+\n+    /**\n+     * Each thread local buffered read channel can share the same file handle because reads are not relative\n+     * and don't cause a change in the channel's position. We use this map to store the file channels. Each\n+     * file channel is mapped to a log id which represents an open log file.\n+     */\n+    private final ConcurrentMap<Long, FileChannel> logid2FileChannel\n+            = new ConcurrentHashMap<Long, FileChannel>();\n+\n+    /**\n+     * Put the logId, bc pair in the map responsible for the current thread.\n+     * @param logId\n+     * @param bc\n+     */\n+    public BufferedReadChannel putInReadChannels(long logId, BufferedReadChannel bc) {\n+        Map<Long, BufferedReadChannel> threadMap = logid2Channel.get();\n+        return threadMap.put(logId, bc);\n+    }\n+\n+    /**\n+     * Remove all entries for this log file in each thread's cache.\n+     * @param logId\n+     */\n+    public void removeFromChannelsAndClose(long logId) {\n+        FileChannel fileChannel = logid2FileChannel.remove(logId);\n+        if (null != fileChannel) {\n+            try {\n+                fileChannel.close();\n+            } catch (IOException e) {\n+                LOG.warn(\"Exception while closing channel for log file:\" + logId);\n+            }\n+        }\n+    }\n+\n+    public BufferedReadChannel getFromChannels(long logId) {\n+        return logid2Channel.get().get(logId);\n+    }\n+\n+    /**\n+     * Get the least unflushed log id. Garbage collector thread should not process\n+     * unflushed entry log file.\n+     *\n+     * @return least unflushed log id.\n+     */\n+    synchronized long getLeastUnflushedLogId() {\n+        return leastUnflushedLogId;\n+    }\n \n     synchronized long getCurrentLogId() {\n-        return logId;\n+        return logChannel.getLogId();\n     }\n \n     protected void initialize() throws IOException {\n@@ -167,6 +315,15 @@ public void diskFull(File disk) {\n                 }\n             }\n \n+            @Override\n+            public void diskAlmostFull(File disk) {\n+                // If the current entry log disk is almost full, then create new entry\n+                // log.\n+                if (currentDir != null && currentDir.equals(disk)) {\n+                    shouldCreateNewEntryLog.set(true);\n+                }\n+            }\n+\n             @Override\n             public void diskFailed(File disk) {\n                 // Nothing to handle here. Will be handled in Bookie\n@@ -181,40 +338,140 @@ public void allDisksFull() {\n             public void fatalError() {\n                 // Nothing to handle here. Will be handled in Bookie\n             }\n+\n+            @Override\n+            public void diskWritable(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void diskJustWritable(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n         };\n     }\n \n+    /**\n+     * Rolling a new log file to write.\n+     */\n+    synchronized void rollLog() throws IOException {\n+        createNewLog();\n+    }\n+\n     /**\n      * Creates a new log file\n      */\n     void createNewLog() throws IOException {\n-        if (logChannel != null) {\n-            logChannel.flush(true);\n+        // first tried to create a new log channel. add current log channel to ToFlush list only when\n+        // there is a new log channel. it would prevent that a log channel is referenced by both\n+        // *logChannel* and *ToFlush* list.\n+        if (null != logChannel) {\n+            if (null == logChannelsToFlush) {\n+                logChannelsToFlush = new LinkedList<BufferedLogChannel>();\n+            }\n+            // flush the internal buffer back to filesystem but not sync disk\n+            // so the readers could access the data from filesystem.\n+            logChannel.flush(false);\n+            BufferedLogChannel newLogChannel = entryLoggerAllocator.createNewLog();\n+            logChannelsToFlush.add(logChannel);\n+            LOG.info(\"Flushing entry logger {} back to filesystem, pending for syncing entry loggers : {}.\",\n+                    logChannel.getLogId(), logChannelsToFlush);\n+            for (EntryLogListener listener : listeners) {\n+                listener.onRotateEntryLog();\n+            }\n+            logChannel = newLogChannel;\n+        } else {\n+            logChannel = entryLoggerAllocator.createNewLog();\n+        }\n+    }\n+\n+    /**\n+     * An allocator pre-allocates entry log files.\n+     */\n+    class EntryLoggerAllocator {\n+\n+        long preallocatedLogId;\n+        Future<BufferedLogChannel> preallocation = null;\n+        ExecutorService allocatorExecutor;\n+\n+        EntryLoggerAllocator(long logId) {\n+            preallocatedLogId = logId;\n+            allocatorExecutor = Executors.newSingleThreadExecutor();\n         }\n \n-        // It would better not to overwrite existing entry log files\n-        String logFileName = null;\n-        do {\n-            logFileName = Long.toHexString(++logId) + \".log\";\n-            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n-                File newLogFile = new File(dir, logFileName);\n-                if (newLogFile.exists()) {\n-                    LOG.warn(\"Found existed entry log \" + newLogFile\n-                           + \" when trying to create it as a new log.\");\n-                    logFileName = null;\n-                    break;\n+        synchronized BufferedLogChannel createNewLog() throws IOException {\n+            BufferedLogChannel bc;\n+            if (!entryLogPreAllocationEnabled || null == preallocation) {\n+                // initialization time to create a new log\n+                bc = allocateNewLog();\n+            } else {\n+                // has a preallocated entry log\n+                try {\n+                    bc = preallocation.get();\n+                } catch (ExecutionException ee) {\n+                    if (ee.getCause() instanceof IOException) {\n+                        throw (IOException) (ee.getCause());\n+                    } else {\n+                        throw new IOException(\"Error to execute entry log allocation.\", ee);\n+                    }\n+                } catch (CancellationException ce) {\n+                    throw new IOException(\"Task to allocate a new entry log is cancelled.\", ce);\n+                } catch (InterruptedException ie) {\n+                    throw new IOException(\"Intrrupted when waiting a new entry log to be allocated.\", ie);\n                 }\n+                preallocation = allocatorExecutor.submit(new Callable<BufferedLogChannel>() {\n+                    @Override\n+                    public BufferedLogChannel call() throws IOException {\n+                        return allocateNewLog();\n+                    }\n+                });\n             }\n-        } while (logFileName == null);\n+            LOG.info(\"Created new entry logger {}.\", bc.getLogId());\n+            return bc;\n+        }\n \n-        // Update last log id first\n-        currentDir = ledgerDirsManager.pickRandomWritableDir();\n-        setLastLogId(currentDir, logId);\n+        /**\n+         * Allocate a new log file.\n+         */\n+        BufferedLogChannel allocateNewLog() throws IOException {\n+            List<File> list = ledgerDirsManager.getWritableLedgerDirs();\n+            Collections.shuffle(list);\n+            // It would better not to overwrite existing entry log files\n+            File newLogFile = null;\n+            do {\n+                String logFileName = Long.toHexString(++preallocatedLogId) + \".log\";\n+                for (File dir : list) {\n+                    newLogFile = new File(dir, logFileName);\n+                    currentDir = dir;\n+                    if (newLogFile.exists()) {\n+                        LOG.warn(\"Found existed entry log \" + newLogFile\n+                               + \" when trying to create it as a new log.\");\n+                        newLogFile = null;\n+                        break;\n+                    }\n+                }\n+            } while (newLogFile == null);\n \n-        File newLogFile = new File(currentDir, logFileName);\n-        logChannel = new BufferedChannel(new RandomAccessFile(newLogFile, \"rw\").getChannel(), 64*1024);\n-        logChannel.write((ByteBuffer) LOGFILE_HEADER.clear());\n-        channels.put(logId, logChannel);\n+            FileChannel channel = new RandomAccessFile(newLogFile, \"rw\").getChannel();\n+            BufferedLogChannel logChannel = new BufferedLogChannel(channel,\n+                    conf.getWriteBufferBytes(), conf.getReadBufferBytes(), preallocatedLogId);\n+            logChannel.write((ByteBuffer) LOGFILE_HEADER.clear());\n+\n+            for (File f : list) {\n+                setLastLogId(f, preallocatedLogId);\n+            }\n+            LOG.info(\"Preallocated entry logger {}.\", preallocatedLogId);\n+            return logChannel;\n+        }\n+\n+        /**\n+         * Stop the allocator.\n+         */\n+        void stop() {\n+            // wait until the preallocation finished.\n+            allocatorExecutor.shutdown();\n+            LOG.info(\"Stopped entry logger preallocator.\");\n+        }\n     }\n \n     /**\n@@ -224,15 +481,7 @@ void createNewLog() throws IOException {\n      *          Entry Log File Id\n      */\n     protected boolean removeEntryLog(long entryLogId) {\n-        BufferedChannel bc = channels.remove(entryLogId);\n-        if (null != bc) {\n-            // close its underlying file channel, so it could be deleted really\n-            try {\n-                bc.getFileChannel().close();\n-            } catch (IOException ie) {\n-                LOG.warn(\"Exception while closing garbage collected entryLog file : \", ie);\n-            }\n-        }\n+        removeFromChannelsAndClose(entryLogId);\n         File entryLogFile;\n         try {\n             entryLogFile = findFile(entryLogId);\n@@ -253,14 +502,15 @@ protected boolean removeEntryLog(long entryLogId) {\n     private void setLastLogId(File dir, long logId) throws IOException {\n         FileOutputStream fos;\n         fos = new FileOutputStream(new File(dir, \"lastId\"));\n-        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));\n+        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos, UTF_8));\n         try {\n             bw.write(Long.toHexString(logId) + \"\\n\");\n             bw.flush();\n         } finally {\n             try {\n                 bw.close();\n             } catch (IOException e) {\n+                LOG.error(\"Could not close lastId file in {}\", dir.getPath());\n             }\n         }\n     }\n@@ -289,7 +539,7 @@ public boolean accept(File file) {\n         }\n         // no log file found in this directory\n         if (0 == logs.size()) {\n-            return -1;\n+            return INVALID_LID;\n         }\n         // order the collections\n         Collections.sort(logs);\n@@ -304,16 +554,16 @@ private long readLastLogId(File f) {\n         try {\n             fis = new FileInputStream(new File(f, \"lastId\"));\n         } catch (FileNotFoundException e) {\n-            return -1;\n+            return INVALID_LID;\n         }\n-        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n+        BufferedReader br = new BufferedReader(new InputStreamReader(fis, UTF_8));\n         try {\n             String lastIdString = br.readLine();\n             return Long.parseLong(lastIdString, 16);\n         } catch (IOException e) {\n-            return -1;\n+            return INVALID_LID;\n         } catch(NumberFormatException e) {\n-            return -1;\n+            return INVALID_LID;\n         } finally {\n             try {\n                 br.close();\n@@ -322,21 +572,65 @@ private long readLastLogId(File f) {\n         }\n     }\n \n-    synchronized void flush() throws IOException {\n+    /**\n+     * Flushes all rotated log channels. After log channels are flushed,\n+     * move leastUnflushedLogId ptr to current logId.\n+     */\n+    void checkpoint() throws IOException {\n+        flushRotatedLogs();\n+    }\n+\n+    void flushRotatedLogs() throws IOException {\n+        List<BufferedLogChannel> channels = null;\n+        long flushedLogId = INVALID_LID;\n+        synchronized (this) {\n+            channels = logChannelsToFlush;\n+            logChannelsToFlush = null;\n+        }\n+        if (null == channels) {\n+            return;\n+        }\n+        for (BufferedLogChannel channel : channels) {\n+            channel.flush(true);\n+            // since this channel is only used for writing, after flushing the channel,\n+            // we had to close the underlying file channel. Otherwise, we might end up\n+            // leaking fds which cause the disk spaces could not be reclaimed.\n+            closeFileChannel(channel);\n+            if (channel.getLogId() > flushedLogId) {\n+                flushedLogId = channel.getLogId();\n+            }\n+            LOG.info(\"Synced entry logger {} to disk.\", channel.getLogId());\n+        }\n+        // move the leastUnflushedLogId ptr\n+        leastUnflushedLogId = flushedLogId + 1;\n+    }\n+\n+    void flush() throws IOException {\n+        flushRotatedLogs();\n+        flushCurrentLog();\n+    }\n+\n+    synchronized void flushCurrentLog() throws IOException {\n         if (logChannel != null) {\n             logChannel.flush(true);\n+            LOG.debug(\"Flush and sync current entry logger {}.\", logChannel.getLogId());\n         }\n     }\n-    synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n-        // Create new log if logSizeLimit reached or current disk is full\n-        boolean createNewLog = shouldCreateNewEntryLog.get();\n-        if (createNewLog\n-                || (logChannel.position() + entry.remaining() + 4 > logSizeLimit)) {\n-            createNewLog();\n \n-            // Reset the flag\n-            if (createNewLog) {\n-                shouldCreateNewEntryLog.set(false);\n+    long addEntry(long ledger, ByteBuffer entry) throws IOException {\n+        return addEntry(ledger, entry, true);\n+    }\n+\n+    synchronized long addEntry(long ledger, ByteBuffer entry, boolean rollLog) throws IOException {\n+        if (rollLog) {\n+            // Create new log if logSizeLimit reached or current disk is full\n+            boolean createNewLog = shouldCreateNewEntryLog.get();\n+            if (createNewLog || reachEntryLogLimit(entry.remaining() + 4)) {\n+                createNewLog();\n+                // Reset the flag\n+                if (createNewLog) {\n+                    shouldCreateNewEntryLog.set(false);\n+                }\n             }\n         }\n         ByteBuffer buff = ByteBuffer.allocate(4);\n@@ -345,25 +639,32 @@ synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n         logChannel.write(buff);\n         long pos = logChannel.position();\n         logChannel.write(entry);\n-        //logChannel.flush(false);\n \n-        return (logId << 32L) | pos;\n+        return (logChannel.getLogId() << 32L) | pos;\n+    }\n+\n+    static long logIdForOffset(long offset) {\n+        return offset >> 32L;\n+    }\n+\n+    synchronized boolean reachEntryLogLimit(long size) {\n+        return logChannel.position() + size > logSizeLimit;\n     }\n \n     byte[] readEntry(long ledgerId, long entryId, long location) throws IOException, Bookie.NoEntryException {\n-        long entryLogId = location >> 32L;\n+        long entryLogId = logIdForOffset(location);\n         long pos = location & 0xffffffffL;\n         ByteBuffer sizeBuff = ByteBuffer.allocate(4);\n         pos -= 4; // we want to get the ledgerId and length to check\n-        BufferedChannel fc;\n+        BufferedReadChannel fc;\n         try {\n             fc = getChannelForLogId(entryLogId);\n         } catch (FileNotFoundException e) {\n             FileNotFoundException newe = new FileNotFoundException(e.getMessage() + \" for \" + ledgerId + \" with location \" + location);\n             newe.setStackTrace(e.getStackTrace());\n             throw newe;\n         }\n-        if (fc.read(sizeBuff, pos) != sizeBuff.capacity()) {\n+        if (readFromLogChannel(entryLogId, fc, sizeBuff, pos) != sizeBuff.capacity()) {\n             throw new Bookie.NoEntryException(\"Short read from entrylog \" + entryLogId,\n                                               ledgerId, entryId);\n         }\n@@ -381,7 +682,7 @@ synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n         }\n         byte data[] = new byte[entrySize];\n         ByteBuffer buff = ByteBuffer.wrap(data);\n-        int rc = fc.read(buff, pos);\n+        int rc = readFromLogChannel(entryLogId, fc, buff, pos);\n         if ( rc != data.length) {\n             // Note that throwing NoEntryException here instead of IOException is not\n             // without risk. If all bookies in a quorum throw this same exception\n@@ -407,27 +708,25 @@ synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n         return data;\n     }\n \n-    private BufferedChannel getChannelForLogId(long entryLogId) throws IOException {\n-        BufferedChannel fc = channels.get(entryLogId);\n+    private BufferedReadChannel getChannelForLogId(long entryLogId) throws IOException {\n+        BufferedReadChannel fc = getFromChannels(entryLogId);\n         if (fc != null) {\n             return fc;\n         }\n         File file = findFile(entryLogId);\n         // get channel is used to open an existing entry log file\n         // it would be better to open using read mode\n         FileChannel newFc = new RandomAccessFile(file, \"r\").getChannel();\n-        // If the file already exists before creating a BufferedChannel layer above it,\n-        // set the FileChannel's position to the end so the write buffer knows where to start.\n-        newFc.position(newFc.size());\n-        fc = new BufferedChannel(newFc, 8192);\n-\n-        BufferedChannel oldfc = channels.putIfAbsent(entryLogId, fc);\n-        if (oldfc != null) {\n+        FileChannel oldFc = logid2FileChannel.putIfAbsent(entryLogId, newFc);\n+        if (null != oldFc) {\n             newFc.close();\n-            return oldfc;\n-        } else {\n-            return fc;\n+            newFc = oldFc;\n         }\n+        // We set the position of the write buffer of this buffered channel to Long.MAX_VALUE\n+        // so that there are no overlaps with the write buffer while reading\n+        fc = new BufferedReadChannel(newFc, conf.getReadBufferBytes());\n+        putInReadChannels(entryLogId, fc);\n+        return fc;\n     }\n \n     /**\n@@ -465,7 +764,7 @@ private File findFile(long logId) throws FileNotFoundException {\n     protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOException {\n         ByteBuffer sizeBuff = ByteBuffer.allocate(4);\n         ByteBuffer lidBuff = ByteBuffer.allocate(8);\n-        BufferedChannel bc;\n+        BufferedReadChannel bc;\n         // Get the BufferedChannel for the current entry log file\n         try {\n             bc = getChannelForLogId(entryLogId);\n@@ -482,7 +781,7 @@ protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOE\n             if (pos >= bc.size()) {\n                 break;\n             }\n-            if (bc.read(sizeBuff, pos) != sizeBuff.capacity()) {\n+            if (readFromLogChannel(entryLogId, bc, sizeBuff, pos) != sizeBuff.capacity()) {\n                 throw new IOException(\"Short read for entry size from entrylog \" + entryLogId);\n             }\n             long offset = pos;\n@@ -495,7 +794,7 @@ protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOE\n             }\n             sizeBuff.clear();\n             // try to read ledger id first\n-            if (bc.read(lidBuff, pos) != lidBuff.capacity()) {\n+            if (readFromLogChannel(entryLogId, bc, lidBuff, pos) != lidBuff.capacity()) {\n                 throw new IOException(\"Short read for ledger id from entrylog \" + entryLogId);\n             }\n             lidBuff.flip();\n@@ -509,7 +808,7 @@ protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOE\n             // read the entry\n             byte data[] = new byte[entrySize];\n             ByteBuffer buff = ByteBuffer.wrap(data);\n-            int rc = bc.read(buff, pos);\n+            int rc = readFromLogChannel(entryLogId, bc, buff, pos);\n             if (rc != data.length) {\n                 throw new IOException(\"Short read for ledger entry from entryLog \" + entryLogId\n                                     + \"@\" + pos + \"(\" + rc + \"!=\" + data.length + \")\");\n@@ -527,24 +826,47 @@ protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOE\n      */\n     public void shutdown() {\n         // since logChannel is buffered channel, do flush when shutting down\n+        LOG.info(\"Stopping EntryLogger\");\n         try {\n             flush();\n-            for (Entry<Long, BufferedChannel> channelEntry : channels\n-                    .entrySet()) {\n-                channelEntry.getValue().getFileChannel().close();\n+            for (FileChannel fc : logid2FileChannel.values()) {\n+                fc.close();\n             }\n+            // clear the mapping, so we don't need to go through the channels again in finally block in normal case.\n+            logid2FileChannel.clear();\n+            // close current writing log file\n+            closeFileChannel(logChannel);\n+            logChannel = null;\n         } catch (IOException ie) {\n             // we have no idea how to avoid io exception during shutting down, so just ignore it\n             LOG.error(\"Error flush entry log during shutting down, which may cause entry log corrupted.\", ie);\n         } finally {\n-            for (Entry<Long, BufferedChannel> channelEntry : channels\n-                    .entrySet()) {\n-                FileChannel fileChannel = channelEntry.getValue()\n-                        .getFileChannel();\n-                if (fileChannel.isOpen()) {\n-                    IOUtils.close(LOG, fileChannel);\n-                }\n+            for (FileChannel fc : logid2FileChannel.values()) {\n+                IOUtils.close(LOG, fc);\n             }\n+            forceCloseFileChannel(logChannel);\n+        }\n+        // shutdown the pre-allocation thread\n+        entryLoggerAllocator.stop();\n+    }\n+\n+    private static void closeFileChannel(BufferedChannelBase channel) throws IOException {\n+        if (null == channel) {\n+            return;\n+        }\n+        FileChannel fileChannel = channel.getFileChannel();\n+        if (null != fileChannel) {\n+            fileChannel.close();\n+        }\n+    }\n+\n+    private static void forceCloseFileChannel(BufferedChannelBase channel) {\n+        if (null == channel) {\n+            return;\n+        }\n+        FileChannel fileChannel = channel.getFileChannel();\n+        if (null != fileChannel) {\n+            IOUtils.close(LOG, fileChannel);\n         }\n     }\n "},{"sha":"9fbe866fc0404985601e487f1ecdcbfdfa9261f0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryMemTable.java","status":"added","additions":440,"deletions":0,"changes":440,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryMemTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryMemTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryMemTable.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,440 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import org.apache.bookkeeper.bookie.Bookie.NoLedgerException;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.MathUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SKIP_LIST_FLUSH_BYTES;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SKIP_LIST_GET_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SKIP_LIST_PUT_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SKIP_LIST_SNAPSHOT;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SKIP_LIST_THROTTLING;\n+\n+/**\n+ * The EntryMemTable holds in-memory representation to the entries not-yet flushed.\n+ * When asked to flush, current EntrySkipList is moved to snapshot and is cleared.\n+ * We continue to serve edits out of new EntrySkipList and backing snapshot until\n+ * flusher reports in that the flush succeeded. At that point we let the snapshot go.\n+ */\n+public class EntryMemTable {\n+    private static Logger Logger = LoggerFactory.getLogger(Journal.class);\n+\n+    /**\n+     * Entry skip list\n+     */\n+    static class EntrySkipList extends ConcurrentSkipListMap<EntryKey, EntryKeyValue> {\n+        final Checkpoint cp;\n+        static final EntrySkipList EMPTY_VALUE = new EntrySkipList(Checkpoint.MAX) {\n+            @Override\n+            public boolean isEmpty() {\n+                return true;\n+            }\n+        };\n+\n+        EntrySkipList(final Checkpoint cp) {\n+            super(EntryKey.COMPARATOR);\n+            this.cp = cp;\n+        }\n+\n+        int compareTo(final Checkpoint cp) {\n+            return this.cp.compareTo(cp);\n+        }\n+\n+        @Override\n+        public EntryKeyValue put(EntryKey k, EntryKeyValue v) {\n+            return putIfAbsent(k, v);\n+        }\n+\n+        @Override\n+        public EntryKeyValue putIfAbsent(EntryKey k, EntryKeyValue v) {\n+            assert k.equals(v);\n+            return super.putIfAbsent(v, v);\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            return this == o;\n+        }\n+    }\n+\n+    volatile EntrySkipList kvmap;\n+\n+    // Snapshot of EntryMemTable.  Made for flusher.\n+    volatile EntrySkipList snapshot;\n+\n+    final ServerConfiguration conf;\n+    final CheckpointSource checkpointSource;\n+\n+    final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n+\n+    // Used to track own data size\n+    final AtomicLong size;\n+\n+    final long skipListSizeLimit;\n+\n+    SkipListArena allocator;\n+\n+    private EntrySkipList newSkipList() {\n+        return new EntrySkipList(checkpointSource.newCheckpoint());\n+    }\n+\n+    // Stats\n+    private final OpStatsLogger snapshotStats;\n+    private final OpStatsLogger putEntryStats;\n+    private final OpStatsLogger getEntryStats;\n+    private final Counter flushBytesCounter;\n+    private final Counter throttlingCounter;\n+\n+    /**\n+    * Constructor.\n+    * @param conf Server configuration\n+    */\n+    public EntryMemTable(final ServerConfiguration conf, final CheckpointSource source,\n+                         final StatsLogger statsLogger) {\n+        this.checkpointSource = source;\n+        this.kvmap = newSkipList();\n+        this.snapshot = EntrySkipList.EMPTY_VALUE;\n+        this.conf = conf;\n+        this.size = new AtomicLong(0);\n+        this.allocator = new SkipListArena(conf);\n+        // skip list size limit\n+        this.skipListSizeLimit = conf.getSkipListSizeLimit();\n+\n+        // Stats\n+        this.snapshotStats = statsLogger.getOpStatsLogger(SKIP_LIST_SNAPSHOT);\n+        this.putEntryStats = statsLogger.getOpStatsLogger(SKIP_LIST_PUT_ENTRY);\n+        this.getEntryStats = statsLogger.getOpStatsLogger(SKIP_LIST_GET_ENTRY);\n+        this.flushBytesCounter = statsLogger.getCounter(SKIP_LIST_FLUSH_BYTES);\n+        this.throttlingCounter = statsLogger.getCounter(SKIP_LIST_THROTTLING);\n+    }\n+\n+    void dump() {\n+        for (EntryKey key: this.kvmap.keySet()) {\n+            Logger.info(key.toString());\n+        }\n+        for (EntryKey key: this.snapshot.keySet()) {\n+            Logger.info(key.toString());\n+        }\n+    }\n+\n+    Checkpoint snapshot() throws IOException {\n+        return snapshot(Checkpoint.MAX);\n+    }\n+\n+    /**\n+     * Snapshot current EntryMemTable. if given <i>oldCp</i> is older than current checkpoint,\n+     * we don't do any snapshot. If snapshot happened, we return the checkpoint of the snapshot.\n+     *\n+     * @param oldCp\n+     *          checkpoint\n+     * @return checkpoint of the snapshot, null means no snapshot\n+     * @throws IOException\n+     */\n+    Checkpoint snapshot(Checkpoint oldCp) throws IOException {\n+        Checkpoint cp = null;\n+        // No-op if snapshot currently has entries\n+        if (this.snapshot.isEmpty() &&\n+                this.kvmap.compareTo(oldCp) < 0) {\n+            final long startTimeNanos = MathUtils.nowInNano();\n+            this.lock.writeLock().lock();\n+            try {\n+                if (this.snapshot.isEmpty() && !this.kvmap.isEmpty()\n+                        && this.kvmap.compareTo(oldCp) < 0) {\n+                    this.snapshot = this.kvmap;\n+                    this.kvmap = newSkipList();\n+                    // get the checkpoint of the memtable.\n+                    cp = this.kvmap.cp;\n+                    // Reset heap to not include any keys\n+                    this.size.set(0);\n+                    // Reset allocator so we get a fresh buffer for the new EntryMemTable\n+                    this.allocator = new SkipListArena(conf);\n+                }\n+            } finally {\n+                this.lock.writeLock().unlock();\n+            }\n+\n+            if (null != cp) {\n+                snapshotStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            } else {\n+                snapshotStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            }\n+        }\n+        return cp;\n+    }\n+\n+    /**\n+     * Flush snapshot and clear it.\n+     */\n+    long flush(final SkipListFlusher flusher) throws IOException {\n+        return flushSnapshot(flusher, Checkpoint.MAX);\n+    }\n+\n+    /**\n+     * Flush memtable until checkpoint.\n+     *\n+     * @param checkpoint\n+     *          all data before this checkpoint need to be flushed.\n+     */\n+    public long flush(SkipListFlusher flusher, Checkpoint checkpoint) throws IOException {\n+        long size = flushSnapshot(flusher, checkpoint);\n+        if (null != snapshot(checkpoint)) {\n+            size += flushSnapshot(flusher, checkpoint);\n+        }\n+        return size;\n+    }\n+\n+    /**\n+     * Flush snapshot and clear it iff its data is before checkpoint.\n+     * Only this function change non-empty this.snapshot.\n+     */\n+    private long flushSnapshot(final SkipListFlusher flusher, Checkpoint checkpoint) throws IOException {\n+        long size = 0;\n+        if (this.snapshot.compareTo(checkpoint) < 0) {\n+            long ledger, ledgerGC = -1;\n+            synchronized (this) {\n+                EntrySkipList keyValues = this.snapshot;\n+                if (keyValues.compareTo(checkpoint) < 0) {\n+                    for (EntryKey key : keyValues.keySet()) {\n+                        EntryKeyValue kv = (EntryKeyValue)key;\n+                        size += kv.getLength();\n+                        ledger = kv.getLedgerId();\n+                        if (ledgerGC != ledger) {\n+                            try {\n+                                flusher.process(ledger, kv.getEntryId(), kv.getValueAsByteBuffer());\n+                            } catch (NoLedgerException exception) {\n+                                ledgerGC = ledger;\n+                            }\n+                        }\n+                    }\n+                    flushBytesCounter.add(size);\n+                    clearSnapshot(keyValues);\n+                }\n+            }\n+        }\n+\n+        return size;\n+    }\n+\n+    /**\n+     * The passed snapshot was successfully persisted; it can be let go.\n+     * @param keyValues The snapshot to clean out.\n+     * @see {@link #snapshot()}\n+     */\n+    private void clearSnapshot(final EntrySkipList keyValues) {\n+        // Caller makes sure that keyValues not empty\n+        assert !keyValues.isEmpty();\n+        this.lock.writeLock().lock();\n+        try {\n+            // create a new snapshot and let the old one go.\n+            assert this.snapshot == keyValues;\n+            this.snapshot = EntrySkipList.EMPTY_VALUE;\n+        } finally {\n+            this.lock.writeLock().unlock();\n+        }\n+    }\n+\n+    /**\n+     * Throttling writer w/ 1 ms delay\n+     */\n+    private void throttleWriters() {\n+        try {\n+            Thread.sleep(1);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+        }\n+        throttlingCounter.inc();\n+    }\n+\n+    /**\n+    * Write an update\n+    * @param entry\n+    * @return approximate size of the passed key and value.\n+    */\n+    public long addEntry(long ledgerId, long entryId, final ByteBuffer entry, final CacheCallback cb)\n+            throws IOException {\n+        long size = 0;\n+        long startTimeNanos = MathUtils.nowInNano();\n+        boolean success = false;\n+        try {\n+            if (isSizeLimitReached()) {\n+                Checkpoint cp = snapshot();\n+                if (null != cp) {\n+                    cb.onSizeLimitReached();\n+                } else {\n+                    throttleWriters();\n+                }\n+            }\n+\n+            this.lock.readLock().lock();\n+            try {\n+                EntryKeyValue toAdd = cloneWithAllocator(ledgerId, entryId, entry);\n+                size = internalAdd(toAdd);\n+            } finally {\n+                this.lock.readLock().unlock();\n+            }\n+            success = true;\n+            return size;\n+        } finally {\n+            if (success) {\n+                putEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            } else {\n+                putEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            }\n+        }\n+    }\n+\n+    /**\n+    * Internal version of add() that doesn't clone KVs with the\n+    * allocator, and doesn't take the lock.\n+    *\n+    * Callers should ensure they already have the read lock taken\n+    */\n+    private long internalAdd(final EntryKeyValue toAdd) throws IOException {\n+        long sizeChange = 0;\n+        if (kvmap.putIfAbsent(toAdd, toAdd) == null) {\n+            sizeChange = toAdd.getLength();\n+            size.addAndGet(sizeChange);\n+        }\n+        return sizeChange;\n+    }\n+\n+    private EntryKeyValue newEntry(long ledgerId, long entryId, final ByteBuffer entry) {\n+        byte[] buf;\n+        int offset = 0;\n+        int length = entry.remaining();\n+\n+        if (entry.hasArray()) {\n+            buf = entry.array();\n+            offset = entry.arrayOffset();\n+        }\n+        else {\n+            buf = new byte[length];\n+            entry.get(buf);\n+        }\n+        return new EntryKeyValue(ledgerId, entryId, buf, offset, length);\n+    }\n+\n+    private EntryKeyValue cloneWithAllocator(long ledgerId, long entryId, final ByteBuffer entry) {\n+        int len = entry.remaining();\n+        SkipListArena.MemorySlice alloc = allocator.allocateBytes(len);\n+        if (alloc == null) {\n+            // The allocation was too large, allocator decided\n+            // not to do anything with it.\n+            return newEntry(ledgerId, entryId, entry);\n+        }\n+\n+        assert alloc.getData() != null;\n+        entry.get(alloc.getData(), alloc.getOffset(), len);\n+        return new EntryKeyValue(ledgerId, entryId, alloc.getData(), alloc.getOffset(), len);\n+    }\n+\n+    /**\n+     * Find the entry with given key\n+     * @param ledgerId\n+     * @param entryId\n+     * @return the entry kv or null if none found.\n+     */\n+    public EntryKeyValue getEntry(long ledgerId, long entryId) throws IOException {\n+        EntryKey key = new EntryKey(ledgerId, entryId);\n+        EntryKeyValue value = null;\n+        long startTimeNanos = MathUtils.nowInNano();\n+        boolean success = false;\n+        this.lock.readLock().lock();\n+        try {\n+            value = this.kvmap.get(key);\n+            if (value == null) {\n+                value = this.snapshot.get(key);\n+            }\n+            success = true;\n+        } finally {\n+            this.lock.readLock().unlock();\n+            if (success) {\n+                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            } else {\n+                getEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            }\n+        }\n+\n+        return value;\n+    }\n+\n+    /**\n+     * Find the last entry with the given ledger key\n+     * @param ledgerId\n+     * @return the entry kv or null if none found.\n+     */\n+    public EntryKeyValue getLastEntry(long ledgerId) throws IOException {\n+        EntryKey result = null;\n+        EntryKey key = new EntryKey(ledgerId, Long.MAX_VALUE);\n+        long startTimeNanos = MathUtils.nowInNano();\n+        boolean success = false;\n+        this.lock.readLock().lock();\n+        try {\n+            result = this.kvmap.floorKey(key);\n+            if (result == null || result.getLedgerId() != ledgerId) {\n+                result = this.snapshot.floorKey(key);\n+            }\n+            success = true;\n+        } finally {\n+            this.lock.readLock().unlock();\n+            if (success) {\n+                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            } else {\n+                getEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            }\n+        }\n+\n+        if (result == null || result.getLedgerId() != ledgerId) {\n+            return null;\n+        }\n+        return (EntryKeyValue)result;\n+    }\n+\n+    /**\n+     * Check if the entire heap usage for this EntryMemTable exceeds limit\n+     */\n+    boolean isSizeLimitReached() {\n+        return size.get() >= skipListSizeLimit;\n+    }\n+\n+    /**\n+     * Check if there is data in the mem-table\n+     * @return\n+     */\n+    boolean isEmpty() {\n+        return size.get() == 0 && snapshot.isEmpty();\n+    }\n+}"},{"sha":"f96627b1f2d35ba56012ed26710468e2ee037f0e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":39,"deletions":13,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,16 +21,21 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.io.File;\n import java.io.IOException;\n import java.io.RandomAccessFile;\n-import java.nio.ByteBuffer;\n import java.nio.BufferUnderflowException;\n+import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n /**\n  * This is the file handle for a ledger's index file that maps entry ids to location.\n  * It is used by LedgerCache.\n@@ -50,7 +55,7 @@\n  * </p>\n  */\n class FileInfo {\n-    static Logger LOG = LoggerFactory.getLogger(FileInfo.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(FileInfo.class);\n \n     static final int NO_MASTER_KEY = -1;\n     static final int STATE_FENCED_BIT = 0x1;\n@@ -62,12 +67,12 @@\n     /**\n      * The fingerprint of a ledger index file\n      */\n-    static final public int signature = ByteBuffer.wrap(\"BKLE\".getBytes()).getInt();\n+    static final public int signature = ByteBuffer.wrap(\"BKLE\".getBytes(UTF_8)).getInt();\n     static final public int headerVersion = 0;\n \n     static final long START_OF_DATA = 1024;\n     private long size;\n-    private int useCount;\n+    private AtomicInteger useCount = new AtomicInteger(0);\n     private boolean isClosed;\n     private long sizeSinceLastwrite;\n \n@@ -140,7 +145,7 @@ synchronized private void checkOpen(boolean create) throws IOException {\n             throw new IOException(lf + \" not found\");\n         }\n \n-        if (!exists) { \n+        if (!exists) {\n             if (create) {\n                 // delayed the creation of parents directories\n                 checkParents(lf);\n@@ -217,15 +222,23 @@ synchronized public long size() throws IOException {\n         return rc;\n     }\n \n-    synchronized public int read(ByteBuffer bb, long position) throws IOException {\n+    public int read(ByteBuffer bb, long position) throws IOException {\n         return readAbsolute(bb, position + START_OF_DATA);\n     }\n \n     private int readAbsolute(ByteBuffer bb, long start) throws IOException {\n         checkOpen(false);\n+        synchronized (this) {\n+            if (fc == null) {\n+                return 0;\n+            }\n+        }\n         int total = 0;\n+        int rc = 0;\n         while(bb.remaining() > 0) {\n-            int rc = fc.read(bb, start);\n+            synchronized (this) {\n+                rc = fc.read(bb, start);\n+            }\n             if (rc <= 0) {\n                 throw new IOException(\"Short read\");\n             }\n@@ -246,7 +259,7 @@ private int readAbsolute(ByteBuffer bb, long start) throws IOException {\n     synchronized public void close(boolean force) throws IOException {\n         isClosed = true;\n         checkOpen(force);\n-        if (useCount == 0 && fc != null) {\n+        if (useCount.get() == 0 && fc != null) {\n             fc.close();\n         }\n     }\n@@ -281,10 +294,14 @@ synchronized public long write(ByteBuffer[] buffs, long position) throws IOExcep\n      */\n     public synchronized void moveToNewLocation(File newFile, long size) throws IOException {\n         checkOpen(false);\n+        // If the channel is null, or same file path, just return.\n+        if (null == fc || isSameFile(newFile)) {\n+            return;\n+        }\n         if (size > fc.size()) {\n             size = fc.size();\n         }\n-        File rlocFile = new File(newFile.getParentFile(), newFile.getName() + LedgerCacheImpl.RLOC);\n+        File rlocFile = new File(newFile.getParentFile(), newFile.getName() + IndexPersistenceMgr.RLOC);\n         if (!rlocFile.exists()) {\n             checkParents(rlocFile);\n             if (!rlocFile.createNewFile()) {\n@@ -330,13 +347,18 @@ public synchronized void moveToNewLocation(File newFile, long size) throws IOExc\n         return masterKey;\n     }\n \n-    synchronized public void use() {\n-        useCount++;\n+    public void use() {\n+        useCount.incrementAndGet();\n+    }\n+\n+    @VisibleForTesting\n+    int getUseCount() {\n+        return useCount.get();\n     }\n \n     synchronized public void release() {\n-        useCount--;\n-        if (isClosed && useCount == 0 && fc != null) {\n+        int count = useCount.decrementAndGet();\n+        if (isClosed && (count == 0) && fc != null) {\n             try {\n                 fc.close();\n             } catch (IOException e) {\n@@ -358,4 +380,8 @@ static final private void checkParents(File f) throws IOException {\n             throw new IOException(\"Counldn't mkdirs for \" + parent);\n         }\n     }\n+\n+    public boolean isSameFile(File f) {\n+        return this.lf.equals(f);\n+    }\n }"},{"sha":"f6ec59c9bfcee8fd3e9365d0ad58fd79e9e52fa2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -23,6 +23,8 @@\n \n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.HardLink;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.cli.BasicParser;\n@@ -56,12 +58,14 @@\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.KeeperException;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n /**\n  * Application for upgrading the bookkeeper filesystem\n  * between versions\n  */\n public class FileSystemUpgrade {\n-    static Logger LOG = LoggerFactory.getLogger(FileSystemUpgrade.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(FileSystemUpgrade.class);\n \n     static FilenameFilter BOOKIE_FILES_FILTER = new FilenameFilter() {\n             private boolean containsIndexFiles(File dir, String name) {\n@@ -118,7 +122,7 @@ private static int detectPreviousVersion(File directory) throws IOException {\n         if (!v2versionFile.exists()) {\n             return 1;\n         }\n-        Scanner s = new Scanner(v2versionFile);\n+        Scanner s = new Scanner(v2versionFile, UTF_8.name());\n         try {\n             return s.nextInt();\n         } catch (NoSuchElementException nse) {\n@@ -189,7 +193,8 @@ public static void upgrade(ServerConfiguration conf)\n         ZooKeeper zk = newZookeeper(conf);\n         try {\n             Map<File,File> deferredMoves = new HashMap<File, File>();\n-            Cookie c = Cookie.generateCookie(conf);\n+            Cookie.Builder cookieBuilder = Cookie.generateCookie(conf);\n+            Cookie c = cookieBuilder.build();\n             for (File d : getAllDirectories(conf)) {\n                 LOG.info(\"Upgrading {}\", d);\n                 int version = detectPreviousVersion(d);\n@@ -237,7 +242,7 @@ public boolean accept(File dir, String name) {\n             }\n \n             try {\n-                c.writeToZooKeeper(zk, conf);\n+                c.writeToZooKeeper(zk, conf, Version.NEW);\n             } catch (KeeperException ke) {\n                 LOG.error(\"Error writing cookie to zookeeper\");\n                 throw new BookieException.UpgradeException(ke);\n@@ -311,8 +316,8 @@ public static void rollback(ServerConfiguration conf)\n                 }\n             }\n             try {\n-                Cookie c = Cookie.readFromZooKeeper(zk, conf);\n-                c.deleteFromZooKeeper(zk, conf);\n+                Versioned<Cookie> cookie = Cookie.readFromZooKeeper(zk, conf);\n+                cookie.getValue().deleteFromZooKeeper(zk, conf, cookie.getVersion());\n             } catch (KeeperException ke) {\n                 LOG.error(\"Error deleting cookie from ZooKeeper\");\n                 throw new BookieException.UpgradeException(ke);"},{"sha":"74c6ec2d3840e39a016383571f98b1ec8e3a51d0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":148,"deletions":88,"changes":236,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -30,9 +30,10 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.RateLimiter;\n+\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.GarbageCollector.GarbageCleaner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -46,9 +47,8 @@\n  * This is the garbage collector thread that runs in the background to\n  * remove any entry log files that no longer contains any active ledger.\n  */\n-public class GarbageCollectorThread extends Thread {\n+public class GarbageCollectorThread extends BookieThread {\n     private static final Logger LOG = LoggerFactory.getLogger(GarbageCollectorThread.class);\n-    private static final int COMPACTION_MAX_OUTSTANDING_REQUESTS = 1000;\n     private static final int SECOND = 1000;\n \n     // Maps entry log files to the set of ledgers that comprise the file and the size usage per ledger\n@@ -69,9 +69,12 @@\n     long lastMinorCompactionTime;\n     long lastMajorCompactionTime;\n \n+    final int maxOutstandingRequests;\n+    final int compactionRate;\n+    final CompactionScannerFactory scannerFactory;\n+\n     // Entry Logger Handle\n     final EntryLogger entryLogger;\n-    final SafeEntryAdder safeEntryAdder;\n \n     // Ledger Cache Handle\n     final LedgerCache ledgerCache;\n@@ -86,80 +89,100 @@\n     // track the last scanned successfully log id\n     long scannedLogId = 0;\n \n+    // Boolean to trigger a forced GC.\n+    final AtomicBoolean forceGarbageCollection = new AtomicBoolean(false);\n+\n     final GarbageCollector garbageCollector;\n     final GarbageCleaner garbageCleaner;\n \n+    private static class Offset {\n+        final long ledger;\n+        final long entry;\n+        final long offset;\n \n-    /**\n-     * Interface for adding entries. When the write callback is triggered, the\n-     * entry must be guaranteed to be presisted.\n-     */\n-    interface SafeEntryAdder {\n-        public void safeAddEntry(long ledgerId, ByteBuffer buffer, GenericCallback<Void> cb);\n+        Offset(long ledger, long entry, long offset) {\n+            this.ledger = ledger;\n+            this.entry = entry;\n+            this.offset = offset;\n+        }\n     }\n \n     /**\n      * A scanner wrapper to check whether a ledger is alive in an entry log file\n      */\n-    class CompactionScanner implements EntryLogScanner {\n-        EntryLogMetadata meta;\n-        Object completionLock = new Object();\n-        AtomicInteger outstandingRequests = new AtomicInteger(0);\n-        AtomicBoolean allSuccessful = new AtomicBoolean(true);\n+    class CompactionScannerFactory implements EntryLogger.EntryLogListener {\n+        List<Offset> offsets = new ArrayList<Offset>();\n+\n+        EntryLogScanner newScanner(final EntryLogMetadata meta) {\n+            final RateLimiter rateLimiter = RateLimiter.create(compactionRate);\n+            return new EntryLogScanner() {\n+                @Override\n+                public boolean accept(long ledgerId) {\n+                    return meta.containsLedger(ledgerId);\n+                }\n \n-        public CompactionScanner(EntryLogMetadata meta) {\n-            this.meta = meta;\n-        }\n+                @Override\n+                public void process(final long ledgerId, long offset, ByteBuffer entry)\n+                        throws IOException {\n+                    rateLimiter.acquire();\n+                    synchronized (CompactionScannerFactory.this) {\n+                        if (offsets.size() > maxOutstandingRequests) {\n+                            waitEntrylogFlushed();\n+                        }\n+                        entry.getLong(); // discard ledger id, we already have it\n+                        long entryId = entry.getLong();\n+                        entry.rewind();\n \n-        @Override\n-        public boolean accept(long ledgerId) {\n-            return meta.containsLedger(ledgerId);\n+                        long newoffset = entryLogger.addEntry(ledgerId, entry);\n+                        offsets.add(new Offset(ledgerId, entryId, newoffset));\n+                    }\n+                }\n+            };\n         }\n \n+        Object flushLock = new Object();\n+\n         @Override\n-        public void process(final long ledgerId, long offset, ByteBuffer entry)\n-            throws IOException {\n-            if (!allSuccessful.get()) {\n-                return;\n+        public void onRotateEntryLog() {\n+            synchronized (flushLock) {\n+                flushLock.notifyAll();\n             }\n+        }\n \n-            outstandingRequests.incrementAndGet();\n-            synchronized (completionLock) {\n-                while (outstandingRequests.get() >= COMPACTION_MAX_OUTSTANDING_REQUESTS) {\n-                    try {\n-                        completionLock.wait();\n-                    } catch (InterruptedException ie) {\n-                        LOG.error(\"Interrupted while waiting to re-add entry\", ie);\n-                        Thread.currentThread().interrupt();\n-                        throw new IOException(\"Interrupted while waiting to re-add entry\", ie);\n+        synchronized private void waitEntrylogFlushed() throws IOException {\n+            try {\n+                if (offsets.size() <= 0) {\n+                    LOG.debug(\"Skipping entry log flushing, as there is no offset!\");\n+                    return;\n+                }\n+                synchronized (flushLock) {\n+                    Offset lastOffset = offsets.get(offsets.size()-1);\n+                    long lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.offset);\n+                    while (lastOffsetLogId < entryLogger.getLeastUnflushedLogId() && running) {\n+                        flushLock.wait(1000);\n+\n+                        lastOffset = offsets.get(offsets.size()-1);\n+                        lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.offset);\n+                    }\n+                    if (lastOffsetLogId >= entryLogger.getLeastUnflushedLogId() && !running) {\n+                        throw new IOException(\"Shutdown before flushed\");\n                     }\n                 }\n+            } catch (InterruptedException ie) {\n+                Thread.currentThread().interrupt();\n+                throw new IOException(\"Interrupted waiting for flush\", ie);\n             }\n-            safeEntryAdder.safeAddEntry(ledgerId, entry, new GenericCallback<Void>() {\n-                    @Override\n-                    public void operationComplete(int rc, Void result) {\n-                        if (rc != BookieException.Code.OK) {\n-                            LOG.error(\"Error {} re-adding entry for ledger {})\",\n-                                      rc, ledgerId);\n-                            allSuccessful.set(false);\n-                        }\n-                        synchronized(completionLock) {\n-                            outstandingRequests.decrementAndGet();\n-                            completionLock.notifyAll();\n-                        }\n-                    }\n-                });\n-        }\n \n-        void awaitComplete() throws InterruptedException, IOException {\n-            synchronized(completionLock) {\n-                while (outstandingRequests.get() > 0) {\n-                    completionLock.wait();\n-                }\n-                if (allSuccessful.get() == false) {\n-                    throw new IOException(\"Couldn't re-add all entries\");\n-                }\n+            for (Offset o : offsets) {\n+                ledgerCache.putEntryOffset(o.ledger, o.entry, o.offset);\n             }\n+            offsets.clear();\n+        }\n+\n+        synchronized void flush() throws IOException {\n+            waitEntrylogFlushed();\n+\n+            ledgerCache.flushLedger(true);\n         }\n     }\n \n@@ -175,17 +198,19 @@ public GarbageCollectorThread(ServerConfiguration conf,\n                                   final LedgerCache ledgerCache,\n                                   EntryLogger entryLogger,\n                                   SnapshotMap<Long, Boolean> activeLedgers,\n-                                  SafeEntryAdder safeEntryAdder,\n                                   LedgerManager ledgerManager)\n         throws IOException {\n         super(\"GarbageCollectorThread\");\n \n         this.ledgerCache = ledgerCache;\n         this.entryLogger = entryLogger;\n         this.activeLedgers = activeLedgers;\n-        this.safeEntryAdder = safeEntryAdder;\n \n         this.gcWaitTime = conf.getGcWaitTime();\n+        this.maxOutstandingRequests = conf.getCompactionMaxOutstandingRequests();\n+        this.compactionRate = conf.getCompactionRate();\n+        this.scannerFactory = new CompactionScannerFactory();\n+        entryLogger.addListener(this.scannerFactory);\n \n         this.garbageCleaner = new GarbageCollector.GarbageCleaner() {\n             @Override\n@@ -251,6 +276,20 @@ public void clean(long ledgerId) {\n         lastMinorCompactionTime = lastMajorCompactionTime = MathUtils.now();\n     }\n \n+    public synchronized void enableForceGC() {\n+        if (forceGarbageCollection.compareAndSet(false, true)) {\n+            LOG.info(\"Forced garbage collection triggered by thread: {}\", Thread.currentThread().getName());\n+            notify();\n+        }\n+    }\n+\n+    public void disableForceGC() {\n+        if (forceGarbageCollection.compareAndSet(true, false)) {\n+            LOG.info(\"{} disabled force garbage collection since bookie has enough space now.\", Thread\n+                    .currentThread().getName());\n+        }\n+    }\n+\n     @Override\n     public void run() {\n         while (running) {\n@@ -262,6 +301,10 @@ public void run() {\n                     continue;\n                 }\n             }\n+            boolean force = forceGarbageCollection.get();\n+            if (force) {\n+                LOG.info(\"Garbage collector thread forced to perform GC before expiry of wait time.\");\n+            }\n \n             // Extract all of the ledger ID's that comprise all of the entry logs\n             // (except for the current new one which is still being written to).\n@@ -274,8 +317,8 @@ public void run() {\n             doGcEntryLogs();\n \n             long curTime = MathUtils.now();\n-            if (enableMajorCompaction &&\n-                curTime - lastMajorCompactionTime > majorCompactionInterval) {\n+            if (force || (enableMajorCompaction &&\n+                curTime - lastMajorCompactionTime > majorCompactionInterval)) {\n                 // enter major compaction\n                 LOG.info(\"Enter major compaction\");\n                 doCompactEntryLogs(majorCompactionThreshold);\n@@ -285,14 +328,16 @@ public void run() {\n                 continue;\n             }\n \n-            if (enableMinorCompaction &&\n-                curTime - lastMinorCompactionTime > minorCompactionInterval) {\n+            if (force || (enableMinorCompaction &&\n+                curTime - lastMinorCompactionTime > minorCompactionInterval)) {\n                 // enter minor compaction\n                 LOG.info(\"Enter minor compaction\");\n                 doCompactEntryLogs(minorCompactionThreshold);\n                 lastMinorCompactionTime = MathUtils.now();\n             }\n+            forceGarbageCollection.set(false);\n         }\n+        LOG.info(\"GarbageCollectorThread exited loop!\");\n     }\n \n     /**\n@@ -333,7 +378,8 @@ private void doGcEntryLogs() {\n      * would not be compacted.\n      * </p>\n      */\n-    private void doCompactEntryLogs(double threshold) {\n+    @VisibleForTesting\n+    void doCompactEntryLogs(double threshold) {\n         LOG.info(\"Do compaction to compact those files lower than \" + threshold);\n         // sort the ledger meta by occupied unused space\n         Comparator<EntryLogMetadata> sizeComparator = new Comparator<EntryLogMetadata>() {\n@@ -353,16 +399,42 @@ public int compare(EntryLogMetadata m1, EntryLogMetadata m2) {\n         List<EntryLogMetadata> logsToCompact = new ArrayList<EntryLogMetadata>();\n         logsToCompact.addAll(entryLogMetaMap.values());\n         Collections.sort(logsToCompact, sizeComparator);\n+        List<Long> toRemove = new ArrayList<Long>();\n+\n         for (EntryLogMetadata meta : logsToCompact) {\n             if (meta.getUsage() >= threshold) {\n                 break;\n             }\n             LOG.debug(\"Compacting entry log {} below threshold {}.\", meta.entryLogId, threshold);\n-            compactEntryLog(meta.entryLogId);\n+            try {\n+                compactEntryLog(scannerFactory, meta);\n+                toRemove.add(meta.entryLogId);\n+            } catch (LedgerDirsManager.NoWritableLedgerDirException nwlde) {\n+                LOG.warn(\"No writable ledger directory available, aborting compaction\", nwlde);\n+                break;\n+            } catch (IOException ioe) {\n+                // if compact entry log throws IOException, we don't want to remove that\n+                // entry log. however, if some entries from that log have been readded\n+                // to the entry log, and the offset updated, it's ok to flush that\n+                LOG.error(\"Error compacting entry log. Log won't be deleted\", ioe);\n+            }\n+\n             if (!running) { // if gc thread is not running, stop compaction\n                 return;\n             }\n         }\n+        try {\n+            // compaction finished, flush any outstanding offsets\n+            scannerFactory.flush();\n+        } catch (IOException ioe) {\n+            LOG.error(\"Cannot flush compacted entries, skip removal\", ioe);\n+            return;\n+        }\n+\n+        // offsets have been flushed, its now safe to remove the old entrylogs\n+        for (Long l : toRemove) {\n+            removeEntryLog(l);\n+        }\n     }\n \n     /**\n@@ -372,6 +444,7 @@ public int compare(EntryLogMetadata m1, EntryLogMetadata m2) {\n      */\n     public void shutdown() throws InterruptedException {\n         this.running = false;\n+        LOG.info(\"Shutting down GarbageCollectorThread\");\n         if (compacting.compareAndSet(false, true)) {\n             // if setting compacting flag succeed, means gcThread is not compacting now\n             // it is safe to interrupt itself now\n@@ -399,13 +472,8 @@ private void removeEntryLog(long entryLogId) {\n      * @param entryLogId\n      *          Entry Log File Id\n      */\n-    protected void compactEntryLog(long entryLogId) {\n-        EntryLogMetadata entryLogMeta = entryLogMetaMap.get(entryLogId);\n-        if (null == entryLogMeta) {\n-            LOG.warn(\"Can't get entry log meta when compacting entry log \" + entryLogId + \".\");\n-            return;\n-        }\n-\n+    protected void compactEntryLog(CompactionScannerFactory scannerFactory,\n+                                   EntryLogMetadata entryLogMeta) throws IOException {\n         // Similar with Sync Thread\n         // try to mark compacting flag to make sure it would not be interrupted\n         // by shutdown during compaction. otherwise it will receive\n@@ -417,19 +485,11 @@ protected void compactEntryLog(long entryLogId) {\n             return;\n         }\n \n-        LOG.info(\"Compacting entry log : \" + entryLogId);\n+        LOG.info(\"Compacting entry log : {}\", entryLogMeta.entryLogId);\n \n         try {\n-            CompactionScanner scanner = new CompactionScanner(entryLogMeta);\n-            entryLogger.scanEntryLog(entryLogId, scanner);\n-            scanner.awaitComplete();\n-            // after moving entries to new entry log, remove this old one\n-            removeEntryLog(entryLogId);\n-        } catch (IOException e) {\n-            LOG.info(\"Premature exception when compacting \" + entryLogId, e);\n-        } catch (InterruptedException ie) {\n-            Thread.currentThread().interrupt();\n-            LOG.warn(\"Interrupted while compacting\", ie);\n+            entryLogger.scanEntryLog(entryLogMeta.entryLogId,\n+                                     scannerFactory.newScanner(entryLogMeta));\n         } finally {\n             // clear compacting flag\n             compacting.set(false);\n@@ -528,7 +588,7 @@ public void process(long ledgerId, long offset, ByteBuffer entry) {\n         // Extract it for every entry log except for the current one.\n         // Entry Log ID's are just a long value that starts at 0 and increments\n         // by 1 when the log fills up and we roll to a new one.\n-        long curLogId = entryLogger.getCurrentLogId();\n+        long curLogId = entryLogger.getLeastUnflushedLogId();\n         boolean hasExceptionWhenScan = false;\n         for (long entryLogId = scannedLogId; entryLogId < curLogId; entryLogId++) {\n             // Comb the current entry log file if it has not already been extracted.\n@@ -542,7 +602,7 @@ public void process(long ledgerId, long offset, ByteBuffer entry) {\n                 continue;\n             }\n \n-            LOG.info(\"Extracting entry log meta from entryLogId: \" + entryLogId);\n+            LOG.info(\"Extracting entry log meta from entryLogId: {}\", entryLogId);\n \n             try {\n                 // Read through the entry log file and extract the entry log meta\n@@ -570,8 +630,8 @@ static EntryLogMetadata extractMetaFromEntryLog(EntryLogger entryLogger, long en\n         ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);\n         // Read through the entry log file and extract the entry log meta\n         entryLogger.scanEntryLog(entryLogId, scanner);\n-        LOG.info(\"Retrieved entry log meta data entryLogId: \"\n-                 + entryLogId + \", meta: \" + entryLogMeta);\n+        LOG.debug(\"Retrieved entry log meta data entryLogId: {}, meta: {}\",\n+                  entryLogId, entryLogMeta);\n         return entryLogMeta;\n     }\n }"},{"sha":"45be76397a02b1e32df02eb0a8b16d50ebdd7e00","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -22,12 +22,13 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.IOException;\n-import java.util.HashMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n class HandleFactoryImpl implements HandleFactory {\n-    HashMap<Long, LedgerDescriptor> ledgers = new HashMap<Long, LedgerDescriptor>();\n-    HashMap<Long, LedgerDescriptor> readOnlyLedgers\n-        = new HashMap<Long, LedgerDescriptor>();\n+    ConcurrentMap<Long, LedgerDescriptor> ledgers = new ConcurrentHashMap<Long, LedgerDescriptor>();\n+    ConcurrentMap<Long, LedgerDescriptor> readOnlyLedgers\n+        = new ConcurrentHashMap<Long, LedgerDescriptor>();\n \n     final LedgerStorage ledgerStorage;\n \n@@ -39,28 +40,29 @@\n     public LedgerDescriptor getHandle(long ledgerId, byte[] masterKey)\n             throws IOException, BookieException {\n         LedgerDescriptor handle = null;\n-        synchronized (ledgers) {\n-            handle = ledgers.get(ledgerId);\n-            if (handle == null) {\n-                handle = LedgerDescriptor.create(masterKey, ledgerId, ledgerStorage);\n-                ledgers.put(ledgerId, handle);\n+        if (null == (handle = ledgers.get(ledgerId))) {\n+            // LedgerDescriptor#create sets the master key in the ledger storage, calling it\n+            // twice on the same ledgerId is safe because it eventually puts a value in the ledger cache\n+            // that guarantees synchronized access across all cached entries.\n+            handle = ledgers.putIfAbsent(ledgerId, LedgerDescriptor.create(masterKey, ledgerId, ledgerStorage));\n+            if (null == handle) {\n+                handle = ledgers.get(ledgerId);\n             }\n-            handle.checkAccess(masterKey);\n         }\n+        handle.checkAccess(masterKey);\n         return handle;\n     }\n \n     @Override\n     public LedgerDescriptor getReadOnlyHandle(long ledgerId)\n             throws IOException, Bookie.NoLedgerException {\n         LedgerDescriptor handle = null;\n-        synchronized (ledgers) {\n-            handle = readOnlyLedgers.get(ledgerId);\n-            if (handle == null) {\n-                handle = LedgerDescriptor.createReadOnly(ledgerId, ledgerStorage);\n-                readOnlyLedgers.put(ledgerId, handle);\n+        if (null == (handle = readOnlyLedgers.get(ledgerId))) {\n+            handle = readOnlyLedgers.putIfAbsent(ledgerId, LedgerDescriptor.createReadOnly(ledgerId, ledgerStorage));\n+            if (null == handle) {\n+                handle = readOnlyLedgers.get(ledgerId);\n             }\n         }\n         return handle;\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"454a38335c8fb3ddaca268ece564c6ae171fef1f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java","status":"added","additions":564,"deletions":0,"changes":564,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,564 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ConcurrentSkipListSet;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.NUM_INDEX_PAGES;\n+\n+class IndexInMemPageMgr {\n+    private final static Logger LOG = LoggerFactory.getLogger(IndexInMemPageMgr.class);\n+    private final static ConcurrentHashMap<Long, LedgerEntryPage> EMPTY_PAGE_MAP\n+        = new ConcurrentHashMap<Long, LedgerEntryPage>();\n+\n+    private static class InMemPageCollection implements LEPStateChangeCallback {\n+\n+        ConcurrentMap<Long, ConcurrentMap<Long,LedgerEntryPage>> pages;\n+\n+        Map<EntryKey, LedgerEntryPage> lruCleanPageMap;\n+\n+        public InMemPageCollection() {\n+            pages = new ConcurrentHashMap<Long, ConcurrentMap<Long,LedgerEntryPage>>();\n+            lruCleanPageMap =\n+                Collections.synchronizedMap(new LinkedHashMap<EntryKey, LedgerEntryPage>(16, 0.75f, true));\n+        }\n+\n+        /**\n+         * Retrieve the LedgerEntryPage corresponding to the ledger and firstEntry\n+         *\n+         * @param ledgerId\n+         *          Ledger id\n+         * @param firstEntry\n+         *          Id of the first entry in the page\n+         * @returns LedgerEntryPage if present\n+         */\n+        private LedgerEntryPage getPage(long ledgerId, long firstEntry) {\n+            ConcurrentMap<Long, LedgerEntryPage> map = pages.get(ledgerId);\n+            if (null != map) {\n+                return map.get(firstEntry);\n+            }\n+            return null;\n+        }\n+\n+        /**\n+         * Add a LedgerEntryPage to the page map\n+         *\n+         * @param lep\n+         *          Ledger Entry Page object\n+         */\n+        private LedgerEntryPage putPage(LedgerEntryPage lep) {\n+            // Do a get here to avoid too many new ConcurrentHashMaps() as putIntoTable is called frequently.\n+            ConcurrentMap<Long, LedgerEntryPage> map = pages.get(lep.getLedger());\n+            if (null == map) {\n+                ConcurrentMap<Long, LedgerEntryPage> mapToPut = new ConcurrentHashMap<Long, LedgerEntryPage>();\n+                map = pages.putIfAbsent(lep.getLedger(), mapToPut);\n+                if (null == map) {\n+                    map = mapToPut;\n+                }\n+            }\n+            LedgerEntryPage oldPage = map.putIfAbsent(lep.getFirstEntry(), lep);\n+            if (null == oldPage) {\n+                oldPage = lep;\n+                // Also include this in the clean page map if it qualifies.\n+                // Note: This is done for symmetry and correctness, however it should never\n+                // get exercised since we shouldn't attempt a put without the page being in use\n+                addToCleanPagesList(lep);\n+            }\n+            return oldPage;\n+        }\n+\n+        /**\n+         * Traverse the pages for a given ledger in memory and find the highest\n+         * entry amongst these pages\n+         *\n+         * @param ledgerId\n+         *          Ledger id\n+         * @returns last entry in the in memory pages\n+         */\n+        private long getLastEntryInMem(long ledgerId) {\n+            long lastEntry = 0;\n+            // Find the last entry in the cache\n+            ConcurrentMap<Long, LedgerEntryPage> map = pages.get(ledgerId);\n+            if (map != null) {\n+                for(LedgerEntryPage lep: map.values()) {\n+                    if (lep.getMaxPossibleEntry() < lastEntry) {\n+                        continue;\n+                    }\n+                    lep.usePage();\n+                    long highest = lep.getLastEntry();\n+                    if (highest > lastEntry) {\n+                        lastEntry = highest;\n+                    }\n+                    lep.releasePage();\n+                }\n+            }\n+            return lastEntry;\n+        }\n+\n+        /**\n+         * Removes ledger entry pages for a given ledger\n+         *\n+         * @param ledgerId\n+         *          Ledger id\n+         * @returns number of pages removed\n+         */\n+        private int removeEntriesForALedger(long ledgerId) {\n+            // remove pages first to avoid page flushed when deleting file info\n+            ConcurrentMap<Long, LedgerEntryPage> lPages = pages.remove(ledgerId);\n+            if (null != lPages) {\n+                for (long entryId: lPages.keySet()) {\n+                    synchronized(lruCleanPageMap) {\n+                        lruCleanPageMap.remove(new EntryKey(ledgerId, entryId));\n+                    }\n+                }\n+                return lPages.size();\n+            }\n+            return 0;\n+        }\n+\n+        /**\n+         * Gets the list of pages in memory that have been changed and hence need to\n+         * be written as a part of the flush operation that is being issued\n+         *\n+         * @param ledgerId\n+         *          Ledger id\n+         * @returns last entry in the in memory pages.\n+         */\n+        private LinkedList<Long> getFirstEntryListToBeFlushed(long ledgerId) {\n+            ConcurrentMap<Long, LedgerEntryPage> pageMap = pages.get(ledgerId);\n+            if (pageMap == null || pageMap.isEmpty()) {\n+                return null;\n+            }\n+\n+            LinkedList<Long> firstEntryList = new LinkedList<Long>();\n+            for(ConcurrentMap.Entry<Long, LedgerEntryPage> entry: pageMap.entrySet()) {\n+                LedgerEntryPage lep = entry.getValue();\n+                if (lep.isClean()) {\n+                    if (!lep.inUse()) {\n+                        addToCleanPagesList(lep);\n+                    }\n+                    if (LOG.isTraceEnabled()) {\n+                        LOG.trace(\"Page is clean \" + lep);\n+                    }\n+                } else {\n+                    firstEntryList.add(lep.getFirstEntry());\n+                }\n+            }\n+            return firstEntryList;\n+        }\n+\n+        /**\n+         * Add the LedgerEntryPage to the clean page LRU map\n+         *\n+         * @param lep\n+         *          Ledger Entry Page object\n+         */\n+        private void addToCleanPagesList(LedgerEntryPage lep) {\n+            synchronized(lruCleanPageMap) {\n+                if (lep.isClean() && !lep.inUse()) {\n+                    lruCleanPageMap.put(lep.getEntryKey(), lep);\n+                }\n+            }\n+        }\n+\n+        /**\n+         * Remove the LedgerEntryPage from the clean page LRU map\n+         *\n+         * @param lep\n+         *          Ledger Entry Page object\n+         */\n+        private void removeFromCleanPageList(LedgerEntryPage lep) {\n+            synchronized(lruCleanPageMap) {\n+                if (!lep.isClean() || lep.inUse()) {\n+                    lruCleanPageMap.remove(lep.getEntryKey());\n+                }\n+            }\n+        }\n+\n+        /**\n+         * Get the set of active ledgers\n+         *\n+         */\n+        Set<Long> getActiveLedgers() {\n+            return pages.keySet();\n+        }\n+\n+        /**\n+         * Get a clean page and provision it for the specified ledger and firstEntry within\n+         * the ledger\n+         *\n+         * @param ledgerId\n+         *          Ledger id\n+         * @param firstEntry\n+         *          Id of the first entry in the page\n+         * @returns LedgerEntryPage if present\n+         */\n+        LedgerEntryPage grabCleanPage(long ledgerId, long firstEntry) {\n+            LedgerEntryPage lep = null;\n+            while (lruCleanPageMap.size() > 0) {\n+                lep = null;\n+                synchronized(lruCleanPageMap) {\n+                    Iterator<Map.Entry<EntryKey,LedgerEntryPage>> iterator = lruCleanPageMap.entrySet().iterator();\n+\n+                    Map.Entry<EntryKey,LedgerEntryPage> entry = null;\n+                    while (iterator.hasNext())\n+                    {\n+                        entry = iterator.next();\n+                        iterator.remove();\n+                        if (entry.getValue().isClean() &&\n+                                !entry.getValue().inUse()) {\n+                            lep = entry.getValue();\n+                            break;\n+                        }\n+                    }\n+\n+                    if (null == lep) {\n+                        LOG.debug(\"Did not find eligible page in the first pass\");\n+                        return null;\n+                    }\n+                }\n+\n+                // We found a candidate page, lets see if we can reclaim it before its re-used\n+                ConcurrentMap<Long, LedgerEntryPage> pageMap = pages.get(lep.getLedger());\n+                // Remove from map only if nothing has changed since we checked this lep.\n+                // Its possible for the ledger to have been deleted or the page to have already\n+                // been reclaimed. The page map is the definitive source of information, if anything\n+                // has changed we should leave this page along and continue iterating to find\n+                // another suitable page.\n+                if ((null != pageMap) && (pageMap.remove(lep.getFirstEntry(), lep))) {\n+                    if (!lep.isClean()) {\n+                        // Someone wrote to this page while we were reclaiming it.\n+                        pageMap.put(lep.getFirstEntry(), lep);\n+                        lep = null;\n+                    } else {\n+                        // Do some bookkeeping on the page table\n+                        pages.remove(lep.getLedger(), EMPTY_PAGE_MAP);\n+                        // We can now safely reset this lep and return it.\n+                        lep.usePage();\n+                        lep.zeroPage();\n+                        lep.setLedgerAndFirstEntry(ledgerId, firstEntry);\n+                        return lep;\n+                    }\n+                } else {\n+                    lep = null;\n+                }\n+            }\n+            return lep;\n+        }\n+\n+        @Override\n+        public void onSetInUse(LedgerEntryPage lep) {\n+            removeFromCleanPageList(lep);\n+        }\n+\n+        @Override\n+        public void onResetInUse(LedgerEntryPage lep) {\n+            addToCleanPagesList(lep);\n+        }\n+\n+        @Override\n+        public void onSetClean(LedgerEntryPage lep) {\n+            addToCleanPagesList(lep);\n+        }\n+\n+        @Override\n+        public void onSetDirty(LedgerEntryPage lep) {\n+            removeFromCleanPageList(lep);\n+        }\n+    }\n+\n+    final int pageSize;\n+    final int entriesPerPage;\n+    final int pageLimit;\n+    final InMemPageCollection pageMapAndList;\n+\n+    // The number of pages that have actually been used\n+    private final AtomicInteger pageCount = new AtomicInteger(0);\n+\n+    // The persistence manager that this page manager uses to\n+    // flush and read pages\n+    private final IndexPersistenceMgr indexPersistenceManager;\n+\n+    /**\n+     * the list of potentially dirty ledgers\n+     */\n+    private final ConcurrentLinkedQueue<Long> ledgersToFlush = new ConcurrentLinkedQueue<Long>();\n+    private final ConcurrentSkipListSet<Long> ledgersFlushing = new ConcurrentSkipListSet<Long>();\n+\n+    public IndexInMemPageMgr(int pageSize,\n+                             int entriesPerPage,\n+                             ServerConfiguration conf,\n+                             IndexPersistenceMgr indexPersistenceManager,\n+                             StatsLogger statsLogger) {\n+        this.pageSize = pageSize;\n+        this.entriesPerPage = entriesPerPage;\n+        this.indexPersistenceManager = indexPersistenceManager;\n+        this.pageMapAndList = new InMemPageCollection();\n+\n+        if (conf.getPageLimit() <= 0) {\n+            // allocate half of the memory to the page cache\n+            this.pageLimit = (int) ((Runtime.getRuntime().maxMemory() / 3) / this.pageSize);\n+        } else {\n+            this.pageLimit = conf.getPageLimit();\n+        }\n+        LOG.info(\"maxMemory = {}, pageSize = {}, pageLimit = {}\", new Object[] { Runtime.getRuntime().maxMemory(),\n+                        pageSize, pageLimit });\n+        // Expose Stats\n+        statsLogger.registerGauge(NUM_INDEX_PAGES, new Gauge<Number>() {\n+            @Override\n+            public Number getDefaultValue() {\n+                return 0;\n+            }\n+\n+            @Override\n+            public Number getSample() {\n+                return getNumUsedPages();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * @return page size used in ledger cache\n+     */\n+    public int getPageSize() {\n+        return pageSize;\n+    }\n+\n+    /**\n+     * @return entries per page used in ledger cache\n+     */\n+    public int getEntriesPerPage() {\n+        return entriesPerPage;\n+    }\n+\n+    /**\n+     * @return page limitation in ledger cache\n+     */\n+    public int getPageLimit() {\n+        return pageLimit;\n+    }\n+\n+    /**\n+     * @return number of page used in ledger cache\n+     */\n+    public int getNumUsedPages() {\n+        return pageCount.get();\n+    }\n+\n+    LedgerEntryPage getLedgerEntryPage(Long ledger, Long firstEntry, boolean onlyDirty) {\n+        LedgerEntryPage lep = pageMapAndList.getPage(ledger, firstEntry);\n+        if (onlyDirty && null != lep && lep.isClean()) {\n+            return null;\n+        }\n+        if (null != lep) {\n+            lep.usePage();\n+        }\n+        return lep;\n+    }\n+\n+    /**\n+     * Grab ledger entry page whose first entry is <code>pageEntry</code>.\n+     *\n+     * If the page doesn't existed before, we allocate a memory page.\n+     * Otherwise, we grab a clean page and read it from disk.\n+     *\n+     * @param ledger\n+     *          Ledger Id\n+     * @param pageEntry\n+     *          Start entry of this entry page.\n+     */\n+    private LedgerEntryPage grabLedgerEntryPage(long ledger, long pageEntry) throws IOException {\n+        LedgerEntryPage lep = grabCleanPage(ledger, pageEntry);\n+        try {\n+            // should get the up to date page from the persistence manager\n+            // before we put it into table otherwise we would put\n+            // an empty page in it\n+            indexPersistenceManager.updatePage(lep);\n+            LedgerEntryPage oldLep;\n+            if (lep != (oldLep = pageMapAndList.putPage(lep))) {\n+                lep.releasePage();\n+                // Decrement the page count because we couldn't put this lep in the page cache.\n+                pageCount.decrementAndGet();\n+                // Increment the use count of the old lep because this is unexpected\n+                oldLep.usePage();\n+                lep = oldLep;\n+            }\n+        } catch (IOException ie) {\n+            // if we grab a clean page, but failed to update the page\n+            // we are exhausting the count of ledger entry pages.\n+            // since this page will be never used, so we need to decrement\n+            // page count of ledger cache.\n+            lep.releasePage();\n+            pageCount.decrementAndGet();\n+            throw ie;\n+        }\n+        return lep;\n+    }\n+\n+    void removePagesForLedger(long ledgerId) {\n+        int removedPageCount = pageMapAndList.removeEntriesForALedger(ledgerId);\n+        if (pageCount.addAndGet(-removedPageCount) < 0) {\n+            throw new RuntimeException(\"Page count of ledger cache has been decremented to be less than zero.\");\n+        }\n+        ledgersToFlush.remove(ledgerId);\n+    }\n+\n+    long getLastEntryInMem(long ledgerId) {\n+        return pageMapAndList.getLastEntryInMem(ledgerId);\n+    }\n+\n+    private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOException {\n+        if (entry % entriesPerPage != 0) {\n+            throw new IllegalArgumentException(entry + \" is not a multiple of \" + entriesPerPage);\n+        }\n+\n+        while(true) {\n+            boolean canAllocate = false;\n+            if (pageCount.incrementAndGet() <= pageLimit) {\n+                canAllocate = true;\n+            } else {\n+                pageCount.decrementAndGet();\n+            }\n+\n+            if (canAllocate) {\n+                LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage, pageMapAndList);\n+                lep.setLedgerAndFirstEntry(ledger, entry);\n+                lep.usePage();\n+                return lep;\n+            }\n+\n+            LedgerEntryPage lep = pageMapAndList.grabCleanPage(ledger, entry);\n+            if (null != lep) {\n+                return lep;\n+            }\n+            LOG.info(\"Could not grab a clean page for ledger {}, entry {}, force flushing dirty ledgers.\",\n+                    ledger, entry);\n+            flushOneOrMoreLedgers(false);\n+        }\n+    }\n+\n+    void flushOneOrMoreLedgers(boolean doAll) throws IOException {\n+        if (ledgersToFlush.isEmpty()) {\n+            ledgersToFlush.addAll(pageMapAndList.getActiveLedgers());\n+        }\n+        Long potentiallyDirtyLedger;\n+        while (null != (potentiallyDirtyLedger = ledgersToFlush.poll())) {\n+            if (!ledgersFlushing.add(potentiallyDirtyLedger)) {\n+                continue;\n+            }\n+            try {\n+                flushSpecificLedger(potentiallyDirtyLedger);\n+            } finally {\n+                ledgersFlushing.remove(potentiallyDirtyLedger);\n+            }\n+            if (!doAll) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Flush a specified ledger\n+     *\n+     * @param ledger\n+     *          Ledger Id\n+     * @throws IOException\n+     */\n+    private void flushSpecificLedger(long ledger) throws IOException {\n+        LinkedList<Long> firstEntryList = pageMapAndList.getFirstEntryListToBeFlushed(ledger);\n+\n+        // flush ledger index file header if necessary\n+        indexPersistenceManager.flushLedgerHeader(ledger);\n+\n+        if (null == firstEntryList || firstEntryList.size() == 0) {\n+            LOG.debug(\"Nothing to flush for ledger {}.\", ledger);\n+            // nothing to do\n+            return;\n+        }\n+\n+        // Now flush all the pages of a ledger\n+        List<LedgerEntryPage> entries = new ArrayList<LedgerEntryPage>(firstEntryList.size());\n+        try {\n+            for(Long firstEntry: firstEntryList) {\n+                LedgerEntryPage lep = getLedgerEntryPage(ledger, firstEntry, true);\n+                if (lep != null) {\n+                    entries.add(lep);\n+                }\n+            }\n+            indexPersistenceManager.flushLedgerEntries(ledger, entries);\n+        } finally {\n+            for(LedgerEntryPage lep: entries) {\n+                lep.releasePage();\n+            }\n+        }\n+    }\n+\n+    void putEntryOffset(long ledger, long entry, long offset) throws IOException {\n+        int offsetInPage = (int) (entry % entriesPerPage);\n+        // find the id of the first entry of the page that has the entry\n+        // we are looking for\n+        long pageEntry = entry - offsetInPage;\n+        LedgerEntryPage lep = getLedgerEntryPage(ledger, pageEntry, false);\n+        if (lep == null) {\n+            lep = grabLedgerEntryPage(ledger, pageEntry);\n+        }\n+        assert lep != null;\n+        lep.setOffset(offset, offsetInPage * LedgerEntryPage.getIndexEntrySize());\n+        lep.releasePage();\n+    }\n+\n+    long getEntryOffset(long ledger, long entry) throws IOException {\n+        int offsetInPage = (int) (entry % entriesPerPage);\n+        // find the id of the first entry of the page that has the entry\n+        // we are looking for\n+        long pageEntry = entry - offsetInPage;\n+        LedgerEntryPage lep = getLedgerEntryPage(ledger, pageEntry, false);\n+        try {\n+            if (lep == null) {\n+                lep = grabLedgerEntryPage(ledger, pageEntry);\n+            }\n+            return lep.getOffset(offsetInPage * LedgerEntryPage.getIndexEntrySize());\n+        } finally {\n+            if (lep != null) {\n+                lep.releasePage();\n+            }\n+        }\n+    }\n+}"},{"sha":"60b409951cef808ec8718fba4984c6042615f07f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"added","additions":588,"deletions":0,"changes":588,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,588 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.SnapshotMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LEDGER_CACHE_NUM_EVICTED_LEDGERS;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.NUM_OPEN_LEDGERS;\n+\n+public class IndexPersistenceMgr {\n+    private final static Logger LOG = LoggerFactory.getLogger(IndexPersistenceMgr.class);\n+\n+    private static final String IDX = \".idx\";\n+    static final String RLOC = \".rloc\";\n+\n+    @VisibleForTesting\n+    public static final String getLedgerName(long ledgerId) {\n+        int parent = (int) (ledgerId & 0xff);\n+        int grandParent = (int) ((ledgerId & 0xff00) >> 8);\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(Integer.toHexString(grandParent));\n+        sb.append('/');\n+        sb.append(Integer.toHexString(parent));\n+        sb.append('/');\n+        sb.append(Long.toHexString(ledgerId));\n+        sb.append(IDX);\n+        return sb.toString();\n+    }\n+\n+    final ConcurrentMap<Long, FileInfo> fileInfoCache = new ConcurrentHashMap<Long, FileInfo>();\n+    final int openFileLimit;\n+    final int pageSize;\n+    final int entriesPerPage;\n+\n+    // Manage all active ledgers in LedgerManager\n+    // so LedgerManager has knowledge to garbage collect inactive/deleted ledgers\n+    final SnapshotMap<Long, Boolean> activeLedgers;\n+    private LedgerDirsManager ledgerDirsManager;\n+    final LinkedList<Long> openLedgers = new LinkedList<Long>();\n+\n+    // Stats\n+    private final Counter evictedLedgersCounter;\n+\n+    public IndexPersistenceMgr(int pageSize,\n+                               int entriesPerPage,\n+                               ServerConfiguration conf,\n+                               SnapshotMap<Long, Boolean> activeLedgers,\n+                               LedgerDirsManager ledgerDirsManager,\n+                               StatsLogger statsLogger) throws IOException {\n+        this.openFileLimit = conf.getOpenFileLimit();\n+        this.activeLedgers = activeLedgers;\n+        this.ledgerDirsManager = ledgerDirsManager;\n+        this.pageSize = pageSize;\n+        this.entriesPerPage = entriesPerPage;\n+        LOG.info(\"openFileLimit = {}\", openFileLimit);\n+        // Retrieve all of the active ledgers.\n+        getActiveLedgers();\n+        ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+\n+        // Expose Stats\n+        evictedLedgersCounter = statsLogger.getCounter(LEDGER_CACHE_NUM_EVICTED_LEDGERS);\n+        statsLogger.registerGauge(NUM_OPEN_LEDGERS, new Gauge<Integer>() {\n+            @Override\n+            public Integer getDefaultValue() {\n+                return 0;\n+            }\n+\n+            @Override\n+            public Integer getSample() {\n+                return getNumOpenLedgers();\n+            }\n+        });\n+    }\n+\n+    FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n+        FileInfo fi = fileInfoCache.get(ledger);\n+        if (null == fi) {\n+            boolean createdNewFile = false;\n+            File lf = null;\n+            synchronized (this) {\n+                // Check if the index file exists on disk.\n+                lf = findIndexFile(ledger);\n+                if (null == lf) {\n+                    if (null == masterKey) {\n+                        throw new Bookie.NoLedgerException(ledger);\n+                    }\n+                    // We don't have a ledger index file on disk, so create it.\n+                    lf = getNewLedgerIndexFile(ledger, null);\n+                    createdNewFile = true;\n+                }\n+            }\n+            fi = putFileInfo(ledger, masterKey, lf, createdNewFile);\n+        }\n+\n+        assert null != fi;\n+        fi.use();\n+        return fi;\n+    }\n+\n+    private FileInfo putFileInfo(Long ledger, byte masterKey[], File lf, boolean createdNewFile) throws IOException {\n+        FileInfo fi = new FileInfo(lf, masterKey);\n+        FileInfo oldFi = fileInfoCache.putIfAbsent(ledger, fi);\n+        if (null != oldFi) {\n+            // Some other thread won the race. We should delete our file if we created\n+            // a new one and the paths are different.\n+            if (createdNewFile && !oldFi.isSameFile(lf)) {\n+                fi.delete();\n+            }\n+            fi = oldFi;\n+        } else {\n+            if (createdNewFile) {\n+                // Else, we won and the active ledger manager should know about this.\n+                LOG.debug(\"New ledger index file created for ledgerId: {}\", ledger);\n+                activeLedgers.put(ledger, true);\n+            }\n+            // Evict cached items from the file info cache if necessary\n+            evictFileInfoIfNecessary();\n+            synchronized (openLedgers) {\n+                openLedgers.offer(ledger);\n+            }\n+        }\n+        return fi;\n+    }\n+\n+    /**\n+     * Get a new index file for ledger excluding directory <code>excludedDir</code>.\n+     *\n+     * @param ledger\n+     *          Ledger id.\n+     * @param excludedDir\n+     *          The ledger directory to exclude.\n+     * @return new index file object.\n+     * @throws NoWritableLedgerDirException if there is no writable dir available.\n+     */\n+    private File getNewLedgerIndexFile(Long ledger, File excludedDir)\n+                    throws NoWritableLedgerDirException {\n+        File dir = ledgerDirsManager.pickRandomWritableDir(excludedDir);\n+        String ledgerName = getLedgerName(ledger);\n+        return new File(dir, ledgerName);\n+    }\n+\n+    /**\n+     * This method will look within the ledger directories for the ledger index\n+     * files. That will comprise the set of active ledgers this particular\n+     * BookieServer knows about that have not yet been deleted by the BookKeeper\n+     * Client. This is called only once during initialization.\n+     */\n+    private void getActiveLedgers() throws IOException {\n+        // Ledger index files are stored in a file hierarchy with a parent and\n+        // grandParent directory. We'll have to go two levels deep into these\n+        // directories to find the index files.\n+        for (File ledgerDirectory : ledgerDirsManager.getAllLedgerDirs()) {\n+            for (File grandParent : ledgerDirectory.listFiles()) {\n+                if (grandParent.isDirectory()) {\n+                    for (File parent : grandParent.listFiles()) {\n+                        if (parent.isDirectory()) {\n+                            for (File index : parent.listFiles()) {\n+                                if (!index.isFile()\n+                                        || (!index.getName().endsWith(IDX) && !index.getName().endsWith(RLOC))) {\n+                                    continue;\n+                                }\n+\n+                                // We've found a ledger index file. The file\n+                                // name is the HexString representation of the\n+                                // ledgerId.\n+                                String ledgerIdInHex = index.getName().replace(RLOC, \"\").replace(IDX, \"\");\n+                                if (index.getName().endsWith(RLOC)) {\n+                                    if (findIndexFile(Long.parseLong(ledgerIdInHex)) != null) {\n+                                        if (!index.delete()) {\n+                                            LOG.warn(\"Deleting the rloc file \" + index + \" failed\");\n+                                        }\n+                                        continue;\n+                                    } else {\n+                                        File dest = new File(index.getParentFile(), ledgerIdInHex + IDX);\n+                                        if (!index.renameTo(dest)) {\n+                                            throw new IOException(\"Renaming rloc file \" + index\n+                                                    + \" to index file has failed\");\n+                                        }\n+                                    }\n+                                }\n+                                activeLedgers.put(Long.parseLong(ledgerIdInHex, 16), true);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is called whenever a ledger is deleted by the BookKeeper Client\n+     * and we want to remove all relevant data for it stored in the LedgerCache.\n+     */\n+    void removeLedger(long ledgerId) throws IOException {\n+        // Delete the ledger's index file and close the FileInfo\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            fi.close(false);\n+            fi.delete();\n+        } finally {\n+            // should release use count\n+            // otherwise the file channel would not be closed.\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+\n+        // Remove it from the active ledger manager\n+        activeLedgers.remove(ledgerId);\n+\n+        // Now remove it from all the other lists and maps.\n+        fileInfoCache.remove(ledgerId);\n+        synchronized (openLedgers) {\n+            openLedgers.remove(ledgerId);\n+        }\n+    }\n+\n+    private File findIndexFile(long ledgerId) throws IOException {\n+        String ledgerName = getLedgerName(ledgerId);\n+        for (File d : ledgerDirsManager.getAllLedgerDirs()) {\n+            File lf = new File(d, ledgerName);\n+            if (lf.exists()) {\n+                return lf;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    boolean ledgerExists(long ledgerId) throws IOException {\n+        FileInfo fi = fileInfoCache.get(ledgerId);\n+        if (fi == null) {\n+            File lf = findIndexFile(ledgerId);\n+            if (lf == null) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    int getNumOpenLedgers() {\n+        return openLedgers.size();\n+    }\n+\n+    // evict file info if necessary\n+    private void evictFileInfoIfNecessary() throws IOException {\n+        if (openLedgers.size() > openFileLimit) {\n+            Long ledgerToRemove;\n+            synchronized (openLedgers) {\n+                ledgerToRemove = openLedgers.poll();\n+            }\n+            if (null == ledgerToRemove) {\n+                // Should not reach here. We probably cleared this while the thread\n+                // was executing.\n+                return;\n+            }\n+            evictedLedgersCounter.inc();\n+            FileInfo fi = fileInfoCache.remove(ledgerToRemove);\n+            if (null == fi) {\n+                // Seems like someone else already closed the file.\n+                return;\n+            }\n+            fi.close(true);\n+         }\n+    }\n+\n+    void close() throws IOException {\n+        for (Entry<Long, FileInfo> fileInfo : fileInfoCache.entrySet()) {\n+            FileInfo value = fileInfo.getValue();\n+            if (value != null) {\n+                value.close(true);\n+            }\n+        }\n+        fileInfoCache.clear();\n+    }\n+\n+    byte[] readMasterKey(long ledgerId) throws IOException, BookieException {\n+        FileInfo fi = fileInfoCache.get(ledgerId);\n+        if (fi == null) {\n+            File lf = findIndexFile(ledgerId);\n+            if (lf == null) {\n+                throw new Bookie.NoLedgerException(ledgerId);\n+            }\n+            fi = putFileInfo(ledgerId, null, lf, false);\n+        }\n+        return fi.getMasterKey();\n+    }\n+\n+    void setMasterKey(long ledgerId, byte[] masterKey) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, masterKey);\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    boolean setFenced(long ledgerId) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            return fi.setFenced();\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    boolean isFenced(long ledgerId) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            return fi.isFenced();\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    int getOpenFileLimit() {\n+        return openFileLimit;\n+    }\n+\n+    private LedgerDirsListener getLedgerDirsListener() {\n+        return new LedgerDirsListener() {\n+            @Override\n+            public void diskFull(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void diskAlmostFull(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void diskFailed(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void allDisksFull() {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void fatalError() {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void diskWritable(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void diskJustWritable(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+        };\n+    }\n+\n+    private void relocateIndexFileAndFlushHeader(long ledger, FileInfo fi) throws IOException {\n+        File currentDir = getLedgerDirForLedger(fi);\n+        if (ledgerDirsManager.isDirFull(currentDir)) {\n+            moveLedgerIndexFile(ledger, fi);\n+        }\n+        fi.flushHeader();\n+    }\n+\n+    /**\n+     * Get the ledger directory that the ledger index belongs to.\n+     *\n+     * @param fi File info of a ledger\n+     * @return ledger directory that the ledger belongs to.\n+     */\n+    private File getLedgerDirForLedger(FileInfo fi) {\n+        return fi.getLf().getParentFile().getParentFile().getParentFile();\n+    }\n+\n+    private void moveLedgerIndexFile(Long l, FileInfo fi) throws NoWritableLedgerDirException, IOException {\n+        File newLedgerIndexFile = getNewLedgerIndexFile(l, getLedgerDirForLedger(fi));\n+        fi.moveToNewLocation(newLedgerIndexFile, fi.getSizeSinceLastwrite());\n+    }\n+\n+    void flushLedgerHeader(long ledger) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledger, null);\n+            relocateIndexFileAndFlushHeader(ledger, fi);\n+        } catch (Bookie.NoLedgerException nle) {\n+            // ledger has been deleted\n+            LOG.info(\"No ledger {} found when flushing header.\", ledger);\n+            return;\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    void flushLedgerEntries(long l, List<LedgerEntryPage> entries) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            Collections.sort(entries, new Comparator<LedgerEntryPage>() {\n+                @Override\n+                public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n+                    return (int) (o1.getFirstEntry() - o2.getFirstEntry());\n+                }\n+            });\n+            int[] versions = new int[entries.size()];\n+            try {\n+                fi = getFileInfo(l, null);\n+            } catch (Bookie.NoLedgerException nle) {\n+                // ledger has been deleted\n+                LOG.info(\"No ledger {} found when flushing entries.\", l);\n+                return;\n+            }\n+\n+            // flush the header if necessary\n+            relocateIndexFileAndFlushHeader(l, fi);\n+            int start = 0;\n+            long lastOffset = -1;\n+            for (int i = 0; i < entries.size(); i++) {\n+                versions[i] = entries.get(i).getVersion();\n+                if (lastOffset != -1 && (entries.get(i).getFirstEntry() - lastOffset) != entriesPerPage) {\n+                    // send up a sequential list\n+                    int count = i - start;\n+                    if (count == 0) {\n+                        LOG.warn(\"Count cannot possibly be zero!\");\n+                    }\n+                    writeBuffers(l, entries, fi, start, count);\n+                    start = i;\n+                }\n+                lastOffset = entries.get(i).getFirstEntry();\n+            }\n+            if (entries.size() - start == 0 && entries.size() != 0) {\n+                LOG.warn(\"Nothing to write, but there were entries!\");\n+            }\n+            writeBuffers(l, entries, fi, start, entries.size() - start);\n+            for (int i = 0; i < entries.size(); i++) {\n+                LedgerEntryPage lep = entries.get(i);\n+                lep.setClean(versions[i]);\n+            }\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Flushed ledger {} with {} pages.\", l, entries.size());\n+            }\n+        } finally {\n+            if (fi != null) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    private void writeBuffers(Long ledger,\n+                              List<LedgerEntryPage> entries, FileInfo fi,\n+                              int start, int count) throws IOException {\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Writing {} buffers of {}\", count, Long.toHexString(ledger));\n+        }\n+        if (count == 0) {\n+            return;\n+        }\n+        ByteBuffer buffs[] = new ByteBuffer[count];\n+        for (int j = 0; j < count; j++) {\n+            buffs[j] = entries.get(start + j).getPageToWrite();\n+            if (entries.get(start + j).getLedger() != ledger) {\n+                throw new IOException(\"Writing to \" + ledger + \" but page belongs to \"\n+                                + entries.get(start + j).getLedger());\n+            }\n+        }\n+        long totalWritten = 0;\n+        while (buffs[buffs.length - 1].remaining() > 0) {\n+            long rc = fi.write(buffs, entries.get(start + 0).getFirstEntryPosition());\n+            if (rc <= 0) {\n+                throw new IOException(\"Short write to ledger \" + ledger + \" rc = \" + rc);\n+            }\n+            totalWritten += rc;\n+        }\n+        if (totalWritten != (long) count * (long) pageSize) {\n+            throw new IOException(\"Short write to ledger \" + ledger + \" wrote \" + totalWritten\n+                            + \" expected \" + count * pageSize);\n+        }\n+    }\n+\n+    void updatePage(LedgerEntryPage lep) throws IOException {\n+        if (!lep.isClean()) {\n+            throw new IOException(\"Trying to update a dirty page\");\n+        }\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(lep.getLedger(), null);\n+            long pos = lep.getFirstEntryPosition();\n+            if (pos >= fi.size()) {\n+                lep.zeroPage();\n+            } else {\n+                lep.readPage(fi);\n+            }\n+        } finally {\n+            if (fi != null) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    long getPersistEntryBeyondInMem(long ledgerId, long lastEntryInMem) throws IOException {\n+        FileInfo fi = null;\n+        long lastEntry = lastEntryInMem;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            long size = fi.size();\n+            // make sure the file size is aligned with index entry size\n+            // otherwise we may read incorret data\n+            if (0 != size % LedgerEntryPage.getIndexEntrySize()) {\n+                LOG.warn(\"Index file of ledger {} is not aligned with index entry size.\", ledgerId);\n+                size = size - size % LedgerEntryPage.getIndexEntrySize();\n+            }\n+            // we may not have the last entry in the cache\n+            if (size > lastEntry * LedgerEntryPage.getIndexEntrySize()) {\n+                ByteBuffer bb = ByteBuffer.allocate(pageSize);\n+                long position = size - pageSize;\n+                if (position < 0) {\n+                    position = 0;\n+                }\n+                fi.read(bb, position);\n+                bb.flip();\n+                long startingEntryId = position / LedgerEntryPage.getIndexEntrySize();\n+                for (int i = entriesPerPage - 1; i >= 0; i--) {\n+                    if (bb.getLong(i * LedgerEntryPage.getIndexEntrySize()) != 0) {\n+                        if (lastEntry < startingEntryId + i) {\n+                            lastEntry = startingEntryId + i;\n+                        }\n+                        break;\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (fi != null) {\n+                fi.release();\n+            }\n+        }\n+        return lastEntry;\n+    }\n+\n+}"},{"sha":"1a69692207b6b1a65a8590a99fa8596febd3e81c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":206,"deletions":42,"changes":248,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,29 +21,61 @@\n \n package org.apache.bookkeeper.bookie;\n \n-import java.nio.ByteBuffer;\n+import java.io.File;\n import java.io.IOException;\n+import java.nio.ByteBuffer;\n \n-import org.apache.bookkeeper.jmx.BKMBeanInfo;\n+import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n+import org.apache.bookkeeper.bookie.EntryLogger.EntryLogListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.SnapshotMap;\n-import org.apache.zookeeper.ZooKeeper;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.STORAGE_GET_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.STORAGE_GET_OFFSET;\n+\n /**\n  * Interleave ledger storage\n  * This ledger storage implementation stores all entries in a single\n  * file and maintains an index file for each ledger.\n  */\n-class InterleavedLedgerStorage implements LedgerStorage {\n-    final static Logger LOG = LoggerFactory.getLogger(InterleavedLedgerStorage.class);\n+class InterleavedLedgerStorage implements LedgerStorage, EntryLogListener {\n+    private final static Logger LOG = LoggerFactory.getLogger(InterleavedLedgerStorage.class);\n+\n+    // Hold the last checkpoint\n+    protected static class CheckpointHolder {\n+        Checkpoint lastCheckpoint = Checkpoint.MAX;\n+\n+        protected synchronized void setNextCheckpoint(Checkpoint cp) {\n+            if (Checkpoint.MAX.equals(lastCheckpoint) || lastCheckpoint.compareTo(cp) < 0) {\n+                lastCheckpoint = cp;\n+            }\n+        }\n+\n+        protected synchronized void clearLastCheckpoint(Checkpoint done) {\n+            if (0 == lastCheckpoint.compareTo(done)) {\n+                lastCheckpoint = Checkpoint.MAX;\n+            }\n+        }\n+\n+        protected synchronized Checkpoint getLastCheckpoint() {\n+            return lastCheckpoint;\n+        }\n+    }\n \n     EntryLogger entryLogger;\n     LedgerCache ledgerCache;\n+    private final CheckpointSource checkpointSource;\n+    protected final CheckpointHolder checkpointHolder = new CheckpointHolder();\n \n     // A sorted map to stored all active ledger ids\n     protected final SnapshotMap<Long, Boolean> activeLedgers;\n@@ -56,15 +88,72 @@\n     // this indicates that a write has happened since the last flush\n     private volatile boolean somethingWritten = false;\n \n-    InterleavedLedgerStorage(ServerConfiguration conf,\n-                             LedgerManager ledgerManager, LedgerDirsManager ledgerDirsManager,\n-                             GarbageCollectorThread.SafeEntryAdder safeEntryAdder)\n-\t\t\tthrows IOException {\n+    // Expose Stats\n+    private final OpStatsLogger getOffsetStats;\n+    private final OpStatsLogger getEntryStats;\n+\n+    InterleavedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager,\n+                             LedgerDirsManager ledgerDirsManager, CheckpointSource checkpointSource)\n+            throws IOException {\n+        this(conf, ledgerManager, ledgerDirsManager, ledgerDirsManager, checkpointSource, NullStatsLogger.INSTANCE);\n+    }\n+\n+    InterleavedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager,\n+                             LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n+                             CheckpointSource checkpointSource, StatsLogger statsLogger)\n+            throws IOException {\n         activeLedgers = new SnapshotMap<Long, Boolean>();\n-        entryLogger = new EntryLogger(conf, ledgerDirsManager);\n-        ledgerCache = new LedgerCacheImpl(conf, activeLedgers, ledgerDirsManager);\n+        this.checkpointSource = checkpointSource;\n+        entryLogger = new EntryLogger(conf, ledgerDirsManager, this);\n+        ledgerCache = new LedgerCacheImpl(conf, activeLedgers,\n+                null == indexDirsManager ? ledgerDirsManager : indexDirsManager, statsLogger);\n         gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n-                activeLedgers, safeEntryAdder, ledgerManager);\n+                activeLedgers, ledgerManager);\n+        ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+        // Expose Stats\n+        getOffsetStats = statsLogger.getOpStatsLogger(STORAGE_GET_OFFSET);\n+        getEntryStats = statsLogger.getOpStatsLogger(STORAGE_GET_ENTRY);\n+    }\n+\n+    private LedgerDirsListener getLedgerDirsListener() {\n+        return new LedgerDirsListener() {\n+            @Override\n+            public void diskFailed(File disk) {\n+                // do nothing.\n+            }\n+\n+            @Override\n+            public void diskAlmostFull(File disk) {\n+                gcThread.enableForceGC();\n+            }\n+\n+            @Override\n+            public void diskFull(File disk) {\n+                gcThread.enableForceGC();\n+            }\n+\n+            @Override\n+            public void allDisksFull() {\n+                gcThread.enableForceGC();\n+            }\n+\n+            @Override\n+            public void fatalError() {\n+                // do nothing.\n+            }\n+\n+            @Override\n+            public void diskWritable(File disk) {\n+                // we have enough space now, disable force gc.\n+                gcThread.disableForceGC();\n+            }\n+\n+            @Override\n+            public void diskJustWritable(File disk) {\n+                // if a disk is just writable, we still need force gc.\n+                gcThread.enableForceGC();\n+            }\n+        };\n     }\n \n     @Override\n@@ -76,6 +165,7 @@ public void start() {\n     public void shutdown() throws InterruptedException {\n         // shut down gc thread, which depends on zookeeper client\n         // also compaction will write entries again to entry log file\n+        LOG.info(\"Shutting down InterleavedLedgerStorage\");\n         gcThread.shutdown();\n         entryLogger.shutdown();\n         try {\n@@ -115,19 +205,8 @@ synchronized public long addEntry(ByteBuffer entry) throws IOException {\n         long ledgerId = entry.getLong();\n         long entryId = entry.getLong();\n         entry.rewind();\n-        \n-        /*\n-         * Log the entry\n-         */\n-        long pos = entryLogger.addEntry(ledgerId, entry);\n-        \n-        \n-        /*\n-         * Set offset of entry id to be the current ledger position\n-         */\n-        ledgerCache.putEntryOffset(ledgerId, entryId, pos);\n \n-        somethingWritten = true;\n+        processEntry(ledgerId, entryId, entry);\n \n         return entryId;\n     }\n@@ -142,36 +221,61 @@ public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n             entryId = ledgerCache.getLastEntry(ledgerId);\n         }\n \n-        offset = ledgerCache.getEntryOffset(ledgerId, entryId);\n-        if (offset == 0) {\n-            throw new Bookie.NoEntryException(ledgerId, entryId);\n+        // Get Offset\n+        long startTimeNanos = MathUtils.nowInNano();\n+        boolean success = false;\n+        try {\n+            offset = ledgerCache.getEntryOffset(ledgerId, entryId);\n+            if (offset == 0) {\n+                throw new Bookie.NoEntryException(ledgerId, entryId);\n+            }\n+            success = true;\n+        } finally {\n+            if (success) {\n+                getOffsetStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            } else {\n+                getOffsetStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            }\n+        }\n+        // Get Entry\n+        startTimeNanos = MathUtils.nowInNano();\n+        success = false;\n+        try {\n+            byte[] retBytes = entryLogger.readEntry(ledgerId, entryId, offset);\n+            success = true;\n+            return ByteBuffer.wrap(retBytes);\n+        } finally {\n+            if (success) {\n+                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            } else {\n+                getEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            }\n         }\n-        return ByteBuffer.wrap(entryLogger.readEntry(ledgerId, entryId, offset));\n     }\n \n-    @Override\n-    public boolean isFlushRequired() {\n-        return somethingWritten;\n-    };\n+    private void flushOrCheckpoint(boolean isCheckpointFlush)\n+            throws IOException {\n \n-    @Override\n-    public synchronized void flush() throws IOException {\n-\n-        if (!somethingWritten) {\n-            return;\n-        }\n-        somethingWritten = false;\n         boolean flushFailed = false;\n-\n         try {\n             ledgerCache.flushLedger(true);\n+        } catch (LedgerDirsManager.NoWritableLedgerDirException e) {\n+            throw e;\n         } catch (IOException ioe) {\n             LOG.error(\"Exception flushing Ledger cache\", ioe);\n             flushFailed = true;\n         }\n \n         try {\n-            entryLogger.flush();\n+            // if it is just a checkpoint flush, we just flush rotated entry log files\n+            // in entry logger.\n+            if (isCheckpointFlush) {\n+                entryLogger.checkpoint();\n+            } else {\n+                entryLogger.flush();\n+            }\n+        } catch (LedgerDirsManager.NoWritableLedgerDirException e) {\n+            throw e;\n         } catch (IOException ioe) {\n             LOG.error(\"Exception flushing Ledger\", ioe);\n             flushFailed = true;\n@@ -181,8 +285,68 @@ public synchronized void flush() throws IOException {\n         }\n     }\n \n+    @Override\n+    public Checkpoint checkpoint(Checkpoint checkpoint) throws IOException {\n+        Checkpoint lastCheckpoint = checkpointHolder.getLastCheckpoint();\n+        // if checkpoint is less than last checkpoint, we don't need to do checkpoint again.\n+        if (lastCheckpoint.compareTo(checkpoint) > 0) {\n+            return lastCheckpoint;\n+        }\n+        // we don't need to check somethingwritten since checkpoint\n+        // is scheduled when rotate an entry logger file. and we could\n+        // not set somethingWritten to false after checkpoint, since\n+        // current entry logger file isn't flushed yet.\n+        flushOrCheckpoint(true);\n+        // after the ledger storage finished checkpointing, try to clear the done checkpoint\n+\n+        checkpointHolder.clearLastCheckpoint(lastCheckpoint);\n+        return lastCheckpoint;\n+    }\n+\n+    @Override\n+    synchronized public void flush() throws IOException {\n+        if (!somethingWritten) {\n+            return;\n+        }\n+        somethingWritten = false;\n+        flushOrCheckpoint(false);\n+    }\n+\n     @Override\n     public BKMBeanInfo getJMXBean() {\n         return ledgerCache.getJMXBean();\n     }\n+\n+    protected void processEntry(long ledgerId, long entryId, ByteBuffer entry) throws IOException {\n+        processEntry(ledgerId, entryId, entry, true);\n+    }\n+\n+    synchronized protected void processEntry(long ledgerId, long entryId, ByteBuffer entry, boolean rollLog)\n+            throws IOException {\n+        /*\n+         * Touch dirty flag\n+         */\n+        somethingWritten = true;\n+\n+        /*\n+         * Log the entry\n+         */\n+        long pos = entryLogger.addEntry(ledgerId, entry, rollLog);\n+\n+        /*\n+         * Set offset of entry id to be the current ledger position\n+         */\n+        ledgerCache.putEntryOffset(ledgerId, entryId, pos);\n+    }\n+\n+    @Override\n+    public void onRotateEntryLog() {\n+        // for interleaved ledger storage, we request a checkpoint when rotating a entry log file.\n+        // the checkpoint represent the point that all the entries added before this point are already\n+        // in ledger storage and ready to be synced to disk.\n+        // TODO: we could consider remove checkpointSource and checkpointSouce#newCheckpoint\n+        // later if we provide kind of LSN (Log/Journal Squeuence Number)\n+        // mechanism when adding entry.\n+        checkpointHolder.setNextCheckpoint(checkpointSource.newCheckpoint());\n+    }\n }"},{"sha":"ad48386ca666eb7fbde98f469ad0edd5801e6935","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":522,"deletions":131,"changes":653,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -30,22 +30,34 @@\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n \n+import com.google.common.base.Stopwatch;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.DaemonThreadFactory;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.ZeroBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.*;\n+\n /**\n  * Provide journal related management.\n  */\n-class Journal extends Thread {\n+class Journal extends BookieCriticalThread implements CheckpointSource {\n \n-    static Logger LOG = LoggerFactory.getLogger(Journal.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(Journal.class);\n \n     /**\n      * Filter to pickup journals\n@@ -83,44 +95,76 @@\n         return logs;\n     }\n \n+    /**\n+     * A wrapper over log mark to provide a checkpoint for users of journal\n+     * to do checkpointing.\n+     */\n+    private static class LogMarkCheckpoint implements Checkpoint {\n+        final LastLogMark mark;\n+\n+        public LogMarkCheckpoint(LastLogMark checkpoint) {\n+            this.mark = checkpoint;\n+        }\n+\n+        @Override\n+        public int compareTo(Checkpoint o) {\n+            if (o == Checkpoint.MAX) {\n+                return -1;\n+            } else if (o == Checkpoint.MIN) {\n+                return 1;\n+            }\n+            return mark.getCurMark().compare(((LogMarkCheckpoint)o).mark.getCurMark());\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (!(o instanceof LogMarkCheckpoint)) {\n+                return false;\n+            }\n+            return 0 == compareTo((LogMarkCheckpoint)o);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return mark.hashCode();\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return mark.toString();\n+        }\n+    }\n+\n     /**\n      * Last Log Mark\n      */\n     class LastLogMark {\n-        private long txnLogId;\n-        private long txnLogPosition;\n-        private LastLogMark lastMark;\n+        private final LogMark curMark;\n+\n         LastLogMark(long logId, long logPosition) {\n-            this.txnLogId = logId;\n-            this.txnLogPosition = logPosition;\n-        }\n-        synchronized void setLastLogMark(long logId, long logPosition) {\n-            txnLogId = logId;\n-            txnLogPosition = logPosition;\n-        }\n-        synchronized void markLog() {\n-            lastMark = new LastLogMark(txnLogId, txnLogPosition);\n+            this.curMark = new LogMark(logId, logPosition);\n         }\n \n-        synchronized LastLogMark getLastMark() {\n-            return lastMark;\n+        void setCurLogMark(long logId, long logPosition) {\n+            curMark.setLogMark(logId, logPosition);\n         }\n-        synchronized long getTxnLogId() {\n-            return txnLogId;\n+\n+        LastLogMark markLog() {\n+            return new LastLogMark(curMark.getLogFileId(), curMark.getLogFileOffset());\n         }\n-        synchronized long getTxnLogPosition() {\n-            return txnLogPosition;\n+\n+        LogMark getCurMark() {\n+            return curMark;\n         }\n \n-        synchronized void rollLog() throws NoWritableLedgerDirException {\n+        void rollLog(LastLogMark lastMark) throws NoWritableLedgerDirException {\n             byte buff[] = new byte[16];\n             ByteBuffer bb = ByteBuffer.wrap(buff);\n             // we should record <logId, logPosition> marked in markLog\n             // which is safe since records before lastMark have been\n             // persisted to disk (both index & entry logger)\n-            bb.putLong(lastMark.getTxnLogId());\n-            bb.putLong(lastMark.getTxnLogPosition());\n-            LOG.debug(\"RollLog to persist last marked log : {}\", lastMark);\n+            lastMark.getCurMark().writeLogMark(bb);\n+            LOG.debug(\"RollLog to persist last marked log : {}\", lastMark.getCurMark());\n             List<File> writableLedgerDirs = ledgerDirsManager\n                     .getWritableLedgerDirs();\n             for (File dir : writableLedgerDirs) {\n@@ -148,9 +192,10 @@ synchronized void rollLog() throws NoWritableLedgerDirException {\n          * The last mark should first be max journal log id,\n          * and then max log position in max journal log.\n          */\n-        synchronized void readLog() {\n+        void readLog() {\n             byte buff[] = new byte[16];\n             ByteBuffer bb = ByteBuffer.wrap(buff);\n+            LogMark mark = new LogMark();\n             for(File dir: ledgerDirsManager.getAllLedgerDirs()) {\n                 File file = new File(dir, \"lastMark\");\n                 try {\n@@ -165,13 +210,9 @@ synchronized void readLog() {\n                         fis.close();\n                     }\n                     bb.clear();\n-                    long i = bb.getLong();\n-                    long p = bb.getLong();\n-                    if (i > txnLogId) {\n-                        txnLogId = i;\n-                        if(p > txnLogPosition) {\n-                          txnLogPosition = p;\n-                        }\n+                    mark.readLogMark(bb);\n+                    if (curMark.compare(mark) < 0) {\n+                        curMark.setLogMark(mark.getLogFileId(), mark.getLogFileOffset());\n                     }\n                 } catch (IOException e) {\n                     LOG.error(\"Problems reading from \" + file + \" (this is okay if it is the first time starting this bookie\");\n@@ -181,22 +222,24 @@ synchronized void readLog() {\n \n         @Override\n         public String toString() {\n-            StringBuilder sb = new StringBuilder();\n-\n-            sb.append(\"LastMark: logId - \").append(txnLogId)\n-              .append(\" , position - \").append(txnLogPosition);\n-\n-            return sb.toString();\n+            return curMark.toString();\n         }\n     }\n \n     /**\n      * Filter to return list of journals for rolling\n      */\n-    private class JournalRollingFilter implements JournalIdFilter {\n+    private static class JournalRollingFilter implements JournalIdFilter {\n+\n+        final LastLogMark lastMark;\n+\n+        JournalRollingFilter(LastLogMark lastMark) {\n+            this.lastMark = lastMark;\n+        }\n+\n         @Override\n         public boolean accept(long journalId) {\n-            if (journalId < lastLogMark.getLastMark().getTxnLogId()) {\n+            if (journalId < lastMark.getCurMark().getLogFileId()) {\n                 return true;\n             } else {\n                 return false;\n@@ -226,119 +269,355 @@ public boolean accept(long journalId) {\n      * Journal Entry to Record\n      */\n     private static class QueueEntry {\n+        ByteBuffer entry;\n+        long ledgerId;\n+        long entryId;\n+        WriteCallback cb;\n+        Object ctx;\n+        long enqueueTime;\n+\n         QueueEntry(ByteBuffer entry, long ledgerId, long entryId,\n-                   WriteCallback cb, Object ctx) {\n+                   WriteCallback cb, Object ctx, long enqueueTime) {\n             this.entry = entry.duplicate();\n             this.cb = cb;\n             this.ctx = ctx;\n             this.ledgerId = ledgerId;\n             this.entryId = entryId;\n+            this.enqueueTime = enqueueTime;\n         }\n \n-        ByteBuffer entry;\n+        public void callback() {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Acknowledge Ledger: {}, Entry: {}\", ledgerId, entryId);\n+            }\n+            cb.writeComplete(0, ledgerId, entryId, null, ctx);\n+        }\n+    }\n \n-        long ledgerId;\n+    private class ForceWriteRequest implements Runnable {\n+        private final JournalChannel logFile;\n+        private final LinkedList<QueueEntry> forceWriteWaiters;\n+        private boolean shouldClose;\n+        private final boolean isMarker;\n+        private final long lastFlushedPosition;\n+        private final long logId;\n+\n+        private ForceWriteRequest(JournalChannel logFile,\n+                          long logId,\n+                          long lastFlushedPosition,\n+                          LinkedList<QueueEntry> forceWriteWaiters,\n+                          boolean shouldClose,\n+                          boolean isMarker) {\n+            this.forceWriteWaiters = forceWriteWaiters;\n+            this.logFile = logFile;\n+            this.logId = logId;\n+            this.lastFlushedPosition = lastFlushedPosition;\n+            this.shouldClose = shouldClose;\n+            this.isMarker = isMarker;\n+            forceWriteQueueSize.inc();\n+        }\n \n-        long entryId;\n+        public int process(boolean shouldForceWrite) throws IOException {\n+            forceWriteQueueSize.dec();\n+            if (isMarker) {\n+                return 0;\n+            }\n \n-        WriteCallback cb;\n+            try {\n+                if (shouldForceWrite) {\n+                    this.logFile.forceWrite(false);\n+                }\n+                lastLogMark.setCurLogMark(this.logId, this.lastFlushedPosition);\n \n-        Object ctx;\n+                // Notify the waiters that the force write succeeded\n+                cbThreadPool.submit(this);\n+\n+                return this.forceWriteWaiters.size();\n+            }\n+            finally {\n+                closeFileIfNecessary();\n+            }\n+        }\n+\n+        @Override\n+        public void run() {\n+            for (QueueEntry e : this.forceWriteWaiters) {\n+                journalAddEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(e.enqueueTime));\n+                e.callback();    // Process cbs inline\n+            }\n+        }\n+\n+        public void closeFileIfNecessary() {\n+            // Close if shouldClose is set\n+            if (shouldClose) {\n+                // We should guard against exceptions so its\n+                // safe to call in catch blocks\n+                try {\n+                    logFile.close();\n+                    // Call close only once\n+                    shouldClose = false;\n+                }\n+                catch (IOException ioe) {\n+                    LOG.error(\"I/O exception while closing file\", ioe);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * ForceWriteThread is a background thread which makes the journal durable periodically\n+     *\n+     */\n+    private class ForceWriteThread extends BookieCriticalThread {\n+        volatile boolean running = true;\n+        // This holds the queue entries that should be notified after a\n+        // successful force write\n+        Thread threadToNotifyOnEx;\n+        // should we group force writes\n+        private final boolean enableGroupForceWrites;\n+        // make flush interval as a parameter\n+        public ForceWriteThread(Thread threadToNotifyOnEx, boolean enableGroupForceWrites) {\n+            super(\"ForceWriteThread\");\n+            this.threadToNotifyOnEx = threadToNotifyOnEx;\n+            this.enableGroupForceWrites = enableGroupForceWrites;\n+        }\n+        @Override\n+        public void run() {\n+            LOG.info(\"ForceWrite Thread started\");\n+            boolean shouldForceWrite = true;\n+            int numReqInLastForceWrite = 0;\n+            while(running) {\n+                ForceWriteRequest req = null;\n+                try {\n+                    req = forceWriteRequests.take();\n+\n+                    // Force write the file and then notify the write completions\n+                    //\n+                    if (!req.isMarker) {\n+                        if (shouldForceWrite) {\n+                            // if we are going to force write, any request that is already in the\n+                            // queue will benefit from this force write - post a marker prior to issuing\n+                            // the flush so until this marker is encountered we can skip the force write\n+                            if (enableGroupForceWrites) {\n+                                forceWriteRequests.put(new ForceWriteRequest(req.logFile, 0, 0, null, false, true));\n+                            }\n+\n+                            // If we are about to issue a write, record the number of requests in\n+                            // the last force write and then reset the counter so we can accumulate\n+                            // requests in the write we are about to issue\n+                            if (numReqInLastForceWrite > 0) {\n+                                forceWriteGroupingCountStats.registerSuccessfulEvent(numReqInLastForceWrite);\n+                                numReqInLastForceWrite = 0;\n+                            }\n+                        }\n+                        numReqInLastForceWrite += req.process(shouldForceWrite);\n+                    }\n+\n+                    if (enableGroupForceWrites &&\n+                        // if its a marker we should switch back to flushing\n+                        !req.isMarker &&\n+                        // This indicates that this is the last request in a given file\n+                        // so subsequent requests will go to a different file so we should\n+                        // flush on the next request\n+                        !req.shouldClose) {\n+                        shouldForceWrite = false;\n+                    }\n+                    else {\n+                        shouldForceWrite = true;\n+                    }\n+                } catch (IOException ioe) {\n+                    LOG.error(\"I/O exception in ForceWrite thread\", ioe);\n+                    running = false;\n+                } catch (InterruptedException e) {\n+                    LOG.error(\"ForceWrite thread interrupted\", e);\n+                    // close is idempotent\n+                    if (null != req) {\n+                        req.closeFileIfNecessary();\n+                    }\n+                    running = false;\n+                }\n+            }\n+            // Regardless of what caused us to exit, we should notify the\n+            // the parent thread as it should either exit or be in the process\n+            // of exiting else we will have write requests hang\n+            threadToNotifyOnEx.interrupt();\n+        }\n+        // shutdown sync thread\n+        void shutdown() throws InterruptedException {\n+            running = false;\n+            this.interrupt();\n+            this.join();\n+        }\n+    }\n+\n+    final static int PADDING_MASK = -0x100;\n+\n+    static void writePaddingBytes(JournalChannel jc, ByteBuffer paddingBuffer, int journalAlignSize)\n+            throws IOException {\n+        int bytesToAlign = (int) (jc.bc.position() % journalAlignSize);\n+        if (0 != bytesToAlign) {\n+            int paddingBytes = journalAlignSize - bytesToAlign;\n+            if (paddingBytes < 8) {\n+                paddingBytes = journalAlignSize - (8 - paddingBytes);\n+            } else {\n+                paddingBytes -= 8;\n+            }\n+            paddingBuffer.clear();\n+            // padding mask\n+            paddingBuffer.putInt(PADDING_MASK);\n+            // padding len\n+            paddingBuffer.putInt(paddingBytes);\n+            // padding bytes\n+            paddingBuffer.position(8 + paddingBytes);\n+\n+            paddingBuffer.flip();\n+            jc.preAllocIfNeeded(paddingBuffer.limit());\n+            // write padding bytes\n+            jc.bc.write(paddingBuffer);\n+        }\n     }\n \n     final static long MB = 1024 * 1024L;\n+    final static int KB = 1024;\n     // max journal file size\n     final long maxJournalSize;\n+    // pre-allocation size for the journal files\n+    final long journalPreAllocSize;\n+    // write buffer size for the journal files\n+    final int journalWriteBufferSize;\n     // number journal files kept before marked journal\n     final int maxBackupJournals;\n \n     final File journalDirectory;\n     final ServerConfiguration conf;\n+    final ForceWriteThread forceWriteThread;\n+    // Time after which we will stop grouping and issue the flush\n+    private final long maxGroupWaitInMSec;\n+    // Threshold after which we flush any buffered journal entries\n+    private final long bufferedEntriesThreshold;\n+    // Threshold after which we flush any buffered journal writes\n+    private final long bufferedWritesThreshold;\n+    // should we flush if the queue is empty\n+    private final boolean flushWhenQueueEmpty;\n+    // should we hint the filesystem to remove pages from cache after force write\n+    private final boolean removePagesFromCache;\n+\n+    private final LastLogMark lastLogMark = new LastLogMark(0, 0);\n \n-    private LastLogMark lastLogMark = new LastLogMark(0, 0);\n+    /**\n+     * The thread pool used to handle callback.\n+     */\n+    private final ExecutorService cbThreadPool;\n \n     // journal entry queue to commit\n-    LinkedBlockingQueue<QueueEntry> queue = new LinkedBlockingQueue<QueueEntry>();\n+    final LinkedBlockingQueue<QueueEntry> queue = new LinkedBlockingQueue<QueueEntry>();\n+    final LinkedBlockingQueue<ForceWriteRequest> forceWriteRequests = new LinkedBlockingQueue<ForceWriteRequest>();\n \n     volatile boolean running = true;\n-    private LedgerDirsManager ledgerDirsManager;\n+    private final LedgerDirsManager ledgerDirsManager;\n+\n+    // Expose Stats\n+    private final OpStatsLogger journalAddEntryStats;\n+    private final OpStatsLogger journalCreationStats;\n+    private final OpStatsLogger journalFlushStats;\n+    private final OpStatsLogger forceWriteGroupingCountStats;\n+    private final OpStatsLogger forceWriteBatchEntriesStats;\n+    private final OpStatsLogger forceWriteBatchBytesStats;\n+    private final Counter journalQueueSize;\n+    private final Counter forceWriteQueueSize;\n+    private final Counter flushMaxWaitCounter;\n+    private final Counter flushMaxOutstandingBytesCounter;\n+    private final Counter flushEmptyQueueCounter;\n+    private final Counter journalWriteBytes;\n \n     public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager) {\n+        this(conf, ledgerDirsManager, NullStatsLogger.INSTANCE);\n+    }\n+\n+    public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager, StatsLogger statsLogger) {\n         super(\"BookieJournal-\" + conf.getBookiePort());\n         this.ledgerDirsManager = ledgerDirsManager;\n         this.conf = conf;\n         this.journalDirectory = Bookie.getCurrentDirectory(conf.getJournalDir());\n-        this.maxJournalSize = conf.getMaxJournalSize() * MB;\n+        this.maxJournalSize = conf.getMaxJournalSizeMB() * MB;\n+        this.journalPreAllocSize = conf.getJournalPreAllocSizeMB() * MB;\n+        this.journalWriteBufferSize = conf.getJournalWriteBufferSizeKB() * KB;\n         this.maxBackupJournals = conf.getMaxBackupJournals();\n-\n+        this.forceWriteThread = new ForceWriteThread(this, conf.getJournalAdaptiveGroupWrites());\n+        this.maxGroupWaitInMSec = conf.getJournalMaxGroupWaitMSec();\n+        this.bufferedWritesThreshold = conf.getJournalBufferedWritesThreshold();\n+        this.bufferedEntriesThreshold = conf.getJournalBufferedEntriesThreshold();\n+        this.cbThreadPool = Executors.newFixedThreadPool(conf.getNumJournalCallbackThreads(),\n+                                                         new DaemonThreadFactory());\n+\n+        // Unless there is a cap on the max wait (which requires group force writes)\n+        // we cannot skip flushing for queue empty\n+        this.flushWhenQueueEmpty = maxGroupWaitInMSec <= 0 || conf.getJournalFlushWhenQueueEmpty();\n+\n+        this.removePagesFromCache = conf.getJournalRemovePagesFromCache();\n         // read last log mark\n         lastLogMark.readLog();\n-        LOG.debug(\"Last Log Mark : {}\", lastLogMark);\n+        LOG.debug(\"Last Log Mark : {}\", lastLogMark.getCurMark());\n+\n+        // Expose Stats\n+        journalAddEntryStats = statsLogger.getOpStatsLogger(JOURNAL_ADD_ENTRY);\n+        journalCreationStats = statsLogger.getOpStatsLogger(JOURNAL_CREATION_LATENCY);\n+        journalFlushStats = statsLogger.getOpStatsLogger(JOURNAL_FLUSH_LATENCY);\n+        forceWriteGroupingCountStats = statsLogger.getOpStatsLogger(JOURNAL_FORCE_WRITE_GROUPING_COUNT);\n+        forceWriteBatchEntriesStats = statsLogger.getOpStatsLogger(JOURNAL_FORCE_WRITE_BATCH_ENTRIES);\n+        forceWriteBatchBytesStats = statsLogger.getOpStatsLogger(JOURNAL_FORCE_WRITE_BATCH_BYTES);\n+        journalQueueSize = statsLogger.getCounter(JOURNAL_QUEUE_SIZE);\n+        forceWriteQueueSize = statsLogger.getCounter(JOURNAL_FORCE_WRITE_QUEUE_SIZE);\n+        flushMaxWaitCounter = statsLogger.getCounter(JOURNAL_NUM_FLUSH_MAX_WAIT);\n+        flushMaxOutstandingBytesCounter = statsLogger.getCounter(JOURNAL_NUM_FLUSH_MAX_OUTSTANDING_BYTES);\n+        flushEmptyQueueCounter = statsLogger.getCounter(JOURNAL_NUM_FLUSH_EMPTY_QUEUE);\n+        journalWriteBytes = statsLogger.getCounter(JOURNAL_WRITE_BYTES);\n     }\n \n     LastLogMark getLastLogMark() {\n         return lastLogMark;\n     }\n \n     /**\n-     * Records a <i>LastLogMark</i> in memory.\n-     *\n-     * <p>\n-     * The <i>LastLogMark</i> contains two parts: first one is <i>txnLogId</i>\n-     * (file id of a journal) and the second one is <i>txnLogPos</i> (offset in\n-     *  a journal). The <i>LastLogMark</i> indicates that those entries before\n-     * it have been persisted to both index and entry log files.\n-     * </p>\n-     *\n-     * <p>\n-     * This method is called before flushing entry log files and ledger cache.\n-     * </p>\n+     * Application tried to schedule a checkpoint. After all the txns added\n+     * before checkpoint are persisted, a <i>checkpoint</i> will be returned\n+     * to application. Application could use <i>checkpoint</i> to do its logic.\n      */\n-    public void markLog() {\n-        lastLogMark.markLog();\n+    @Override\n+    public Checkpoint newCheckpoint() {\n+        return new LogMarkCheckpoint(lastLogMark.markLog());\n     }\n \n     /**\n-     * Persists the <i>LastLogMark</i> marked by #markLog() to disk.\n+     * Telling journal a checkpoint is finished.\n      *\n-     * <p>\n-     * This action means entries added before <i>LastLogMark</i> whose entry data\n-     * and index pages were already persisted to disk. It is the time to safely\n-     * remove journal files created earlier than <i>LastLogMark.txnLogId</i>.\n-     * </p>\n-     * <p>\n-     * If the bookie has crashed before persisting <i>LastLogMark</i> to disk,\n-     * it still has journal files contains entries for which index pages may not\n-     * have been persisted. Consequently, when the bookie restarts, it inspects\n-     * journal files to restore those entries; data isn't lost.\n-     * </p>\n-     * <p>\n-     * This method is called after flushing entry log files and ledger cache successfully, which is to ensure <i>LastLogMark</i> is pesisted.\n-     * </p>\n-     * @see #markLog()\n-     */\n-    public void rollLog() throws NoWritableLedgerDirException {\n-        lastLogMark.rollLog();\n-    }\n-\n-    /**\n-     * Garbage collect older journals\n+     * @throws IOException\n      */\n-    public void gcJournals() {\n-        // list the journals that have been marked\n-        List<Long> logs = listJournalIds(journalDirectory, new JournalRollingFilter());\n-        // keep MAX_BACKUP_JOURNALS journal files before marked journal\n-        if (logs.size() >= maxBackupJournals) {\n-            int maxIdx = logs.size() - maxBackupJournals;\n-            for (int i=0; i<maxIdx; i++) {\n-                long id = logs.get(i);\n-                // make sure the journal id is smaller than marked journal id\n-                if (id < lastLogMark.getLastMark().getTxnLogId()) {\n-                    File journalFile = new File(journalDirectory, Long.toHexString(id) + \".txn\");\n-                    if (!journalFile.delete()) {\n-                        LOG.warn(\"Could not delete old journal file {}\", journalFile);\n+    @Override\n+    public void checkpointComplete(Checkpoint checkpoint, boolean compact) throws IOException {\n+        if (!(checkpoint instanceof LogMarkCheckpoint)) {\n+            return; // we didn't create this checkpoint, so dont do anything with it\n+        }\n+        LogMarkCheckpoint lmcheckpoint = (LogMarkCheckpoint)checkpoint;\n+        LastLogMark mark = lmcheckpoint.mark;\n+\n+        mark.rollLog(mark);\n+        if (compact) {\n+            // list the journals that have been marked\n+            List<Long> logs = listJournalIds(journalDirectory, new JournalRollingFilter(mark));\n+            // keep MAX_BACKUP_JOURNALS journal files before marked journal\n+            if (logs.size() >= maxBackupJournals) {\n+                int maxIdx = logs.size() - maxBackupJournals;\n+                for (int i=0; i<maxIdx; i++) {\n+                    long id = logs.get(i);\n+                    // make sure the journal id is smaller than marked journal id\n+                    if (id < mark.getCurMark().getLogFileId()) {\n+                        File journalFile = new File(journalDirectory, Long.toHexString(id) + \".txn\");\n+                        if (!journalFile.delete()) {\n+                            LOG.warn(\"Could not delete old journal file {}\", journalFile);\n+                        }\n+                        LOG.info(\"garbage collected journal \" + journalFile.getName());\n                     }\n-                    LOG.info(\"garbage collected journal \" + journalFile.getName());\n                 }\n             }\n         }\n@@ -359,9 +638,9 @@ public void scanJournal(long journalId, long journalPos, JournalScanner scanner)\n         throws IOException {\n         JournalChannel recLog;\n         if (journalPos <= 0) {\n-            recLog = new JournalChannel(journalDirectory, journalId);\n+            recLog = new JournalChannel(journalDirectory, journalId, journalPreAllocSize, journalWriteBufferSize);\n         } else {\n-            recLog = new JournalChannel(journalDirectory, journalId, journalPos);\n+            recLog = new JournalChannel(journalDirectory, journalId, journalPreAllocSize, journalWriteBufferSize, journalPos);\n         }\n         int journalVersion = recLog.getFormatVersion();\n         try {\n@@ -381,6 +660,25 @@ public void scanJournal(long journalId, long journalPos, JournalScanner scanner)\n                 if (len == 0) {\n                     break;\n                 }\n+                boolean isPaddingRecord = false;\n+                if (len == PADDING_MASK) {\n+                    if (journalVersion >= JournalChannel.V5) {\n+                        // skip padding bytes\n+                        lenBuff.clear();\n+                        fullRead(recLog, lenBuff);\n+                        if (lenBuff.remaining() != 0) {\n+                            break;\n+                        }\n+                        lenBuff.flip();\n+                        len = lenBuff.getInt();\n+                        if (len == 0) {\n+                            continue;\n+                        }\n+                        isPaddingRecord = true;\n+                    } else {\n+                        throw new IOException(\"Invalid record found with negative length : \" + len);\n+                    }\n+                }\n                 recBuff.clear();\n                 if (recBuff.remaining() < len) {\n                     recBuff = ByteBuffer.allocate(len);\n@@ -392,7 +690,9 @@ public void scanJournal(long journalId, long journalPos, JournalScanner scanner)\n                     break;\n                 }\n                 recBuff.flip();\n-                scanner.process(journalVersion, offset, recBuff);\n+                if (!isPaddingRecord) {\n+                    scanner.process(journalVersion, offset, recBuff);\n+                }\n             }\n         } finally {\n             recLog.close();\n@@ -407,21 +707,21 @@ public void scanJournal(long journalId, long journalPos, JournalScanner scanner)\n      * @throws IOException\n      */\n     public void replay(JournalScanner scanner) throws IOException {\n-        final long markedLogId = lastLogMark.getTxnLogId();\n+        final LogMark markedLog = lastLogMark.getCurMark();\n         List<Long> logs = listJournalIds(journalDirectory, new JournalIdFilter() {\n             @Override\n             public boolean accept(long journalId) {\n-                if (journalId < markedLogId) {\n+                if (journalId < markedLog.getLogFileId()) {\n                     return false;\n                 }\n                 return true;\n             }\n         });\n         // last log mark may be missed due to no sync up before\n         // validate filtered log ids only when we have markedLogId\n-        if (markedLogId > 0) {\n-            if (logs.size() == 0 || logs.get(0) != markedLogId) {\n-                throw new IOException(\"Recovery log \" + markedLogId + \" is missing\");\n+        if (markedLog.getLogFileId() > 0) {\n+            if (logs.size() == 0 || logs.get(0) != markedLog.getLogFileId()) {\n+                throw new IOException(\"Recovery log \" + markedLog.getLogFileId() + \" is missing\");\n             }\n         }\n         LOG.debug(\"Try to relay journal logs : {}\", logs);\n@@ -430,9 +730,10 @@ public boolean accept(long journalId) {\n         // system calls done.\n         for(Long id: logs) {\n             long logPosition = 0L;\n-            if(id == markedLogId) {\n-                logPosition = lastLogMark.getTxnLogPosition();\n+            if(id == markedLog.getLogFileId()) {\n+                logPosition = markedLog.getLogFileOffset();\n             }\n+            LOG.info(\"Replaying journal {} from position {}\", id, logPosition);\n             scanJournal(id, logPosition, scanner);\n         }\n     }\n@@ -444,7 +745,8 @@ public void logAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx) {\n         long ledgerId = entry.getLong();\n         long entryId = entry.getLong();\n         entry.rewind();\n-        queue.add(new QueueEntry(entry, ledgerId, entryId, cb, ctx));\n+        journalQueueSize.inc();\n+        queue.add(new QueueEntry(entry, ledgerId, entryId, cb, ctx, MathUtils.nowInNano()));\n     }\n \n     /**\n@@ -469,48 +771,115 @@ public int getJournalQueueLength() {\n      * new journal file using current timestamp, and continue persistence logic.\n      * Those journals will be garbage collected in SyncThread.\n      * </p>\n-     * @see Bookie#SyncThread\n+     * @see org.apache.bookkeeper.bookie.SyncThread\n      */\n     @Override\n     public void run() {\n         LinkedList<QueueEntry> toFlush = new LinkedList<QueueEntry>();\n         ByteBuffer lenBuff = ByteBuffer.allocate(4);\n+        ByteBuffer paddingBuff = ByteBuffer.allocate(2 * conf.getJournalAlignmentSize());\n+        ZeroBuffer.put(paddingBuff);\n         JournalChannel logFile = null;\n+        forceWriteThread.start();\n+        Stopwatch journalCreationWatcher = new Stopwatch();\n+        Stopwatch journalFlushWatcher = new Stopwatch();\n+        long batchSize = 0;\n         try {\n-            long logId = 0;\n+            List<Long> journalIds = listJournalIds(journalDirectory, null);\n+            // Should not use MathUtils.now(), which use System.nanoTime() and\n+            // could only be used to measure elapsed time.\n+            // http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#nanoTime%28%29\n+            long logId = journalIds.isEmpty() ? System.currentTimeMillis() : journalIds.get(journalIds.size() - 1);\n             BufferedChannel bc = null;\n             long lastFlushPosition = 0;\n+            boolean groupWhenTimeout = false;\n \n             QueueEntry qe = null;\n             while (true) {\n                 // new journal file to write\n                 if (null == logFile) {\n-                    logId = MathUtils.now();\n-                    logFile = new JournalChannel(journalDirectory, logId);\n+                    logId = logId + 1;\n+\n+                    journalCreationWatcher.reset().start();\n+                    logFile = new JournalChannel(journalDirectory,\n+                                        logId,\n+                                        journalPreAllocSize,\n+                                        journalWriteBufferSize,\n+                                        conf.getJournalAlignmentSize(),\n+                                        removePagesFromCache,\n+                                        conf.getJournalFormatVersionToWrite());\n+                    journalCreationStats.registerSuccessfulEvent(\n+                            journalCreationWatcher.stop().elapsedTime(TimeUnit.MILLISECONDS));\n+\n                     bc = logFile.getBufferedChannel();\n \n-                    lastFlushPosition = 0;\n+                    lastFlushPosition = bc.position();\n                 }\n \n                 if (qe == null) {\n                     if (toFlush.isEmpty()) {\n                         qe = queue.take();\n                     } else {\n-                        qe = queue.poll();\n-                        if (qe == null || bc.position() > lastFlushPosition + 512*1024) {\n-                            //logFile.force(false);\n-                            bc.flush(true);\n+                        long pollWaitTime = maxGroupWaitInMSec - MathUtils.elapsedMSec(toFlush.getFirst().enqueueTime);\n+                        if (flushWhenQueueEmpty || pollWaitTime < 0) {\n+                            pollWaitTime = 0;\n+                        }\n+                        qe = queue.poll(pollWaitTime, TimeUnit.MILLISECONDS);\n+                        boolean shouldFlush = false;\n+                        // We should issue a forceWrite if any of the three conditions below holds good\n+                        // 1. If the oldest pending entry has been pending for longer than the max wait time\n+                        if (maxGroupWaitInMSec > 0 && !groupWhenTimeout && (MathUtils.elapsedMSec(toFlush.getFirst().enqueueTime) > maxGroupWaitInMSec)) {\n+                            groupWhenTimeout = true;\n+                        } else if (maxGroupWaitInMSec > 0 && groupWhenTimeout && qe != null && MathUtils.elapsedMSec(qe.enqueueTime) < maxGroupWaitInMSec) {\n+                            // when group timeout, it would be better to look forward, as there might be lots of entries already timeout\n+                            // due to a previous slow write (writing to filesystem which impacted by force write).\n+                            // Group those entries in the queue\n+                            // a) already timeout\n+                            // b) limit the number of entries to group\n+                            groupWhenTimeout = false;\n+                            shouldFlush = true;\n+                            flushMaxWaitCounter.inc();\n+                        } else if (qe != null &&\n+                                ((bufferedEntriesThreshold > 0 && toFlush.size() > bufferedEntriesThreshold) ||\n+                                 (bc.position() > lastFlushPosition + bufferedWritesThreshold))) {\n+                            // 2. If we have buffered more than the buffWriteThreshold or bufferedEntriesThreshold\n+                            shouldFlush = true;\n+                            flushMaxOutstandingBytesCounter.inc();\n+                        } else if (qe == null) {\n+                            // We should get here only if we flushWhenQueueEmpty is true else we would wait\n+                            // for timeout that would put is past the maxWait threshold\n+                            // 3. If the queue is empty i.e. no benefit of grouping. This happens when we have one\n+                            // publish at a time - common case in tests.\n+                            shouldFlush = true;\n+                            flushEmptyQueueCounter.inc();\n+                        }\n+\n+                        // toFlush is non null and not empty so should be safe to access getFirst\n+                        if (shouldFlush) {\n+                            if (conf.getJournalFormatVersionToWrite() >= JournalChannel.V5) {\n+                                writePaddingBytes(logFile, paddingBuff, conf.getJournalAlignmentSize());\n+                            }\n+                            journalFlushWatcher.reset().start();\n+                            bc.flush(false);\n                             lastFlushPosition = bc.position();\n-                            lastLogMark.setLastLogMark(logId, lastFlushPosition);\n-                            for (QueueEntry e : toFlush) {\n-                                e.cb.writeComplete(BookieException.Code.OK,\n-                                                   e.ledgerId, e.entryId, null, e.ctx);\n+                            journalFlushStats.registerSuccessfulEvent(\n+                                    journalFlushWatcher.stop().elapsedTime(TimeUnit.MILLISECONDS));\n+\n+                            // Trace the lifetime of entries through persistence\n+                            if (LOG.isDebugEnabled()) {\n+                                for (QueueEntry e : toFlush) {\n+                                    LOG.debug(\"Written and queuing for flush Ledger:\" + e.ledgerId + \" Entry:\" + e.entryId);\n+                                }\n                             }\n-                            toFlush.clear();\n \n+                            forceWriteBatchEntriesStats.registerSuccessfulEvent(toFlush.size());\n+                            forceWriteBatchBytesStats.registerSuccessfulEvent(batchSize);\n+\n+                            forceWriteRequests.put(new ForceWriteRequest(logFile, logId, lastFlushPosition, toFlush, (lastFlushPosition > maxJournalSize), false));\n+                            toFlush = new LinkedList<QueueEntry>();\n+                            batchSize = 0L;\n                             // check whether journal file is over file limit\n                             if (bc.position() > maxJournalSize) {\n-                                logFile.close();\n                                 logFile = null;\n                                 continue;\n                             }\n@@ -526,18 +895,26 @@ public void run() {\n                 if (qe == null) { // no more queue entry\n                     continue;\n                 }\n+\n+                journalWriteBytes.add(qe.entry.remaining());\n+                journalQueueSize.dec();\n+\n+                batchSize += (4 + qe.entry.remaining());\n+\n                 lenBuff.clear();\n                 lenBuff.putInt(qe.entry.remaining());\n                 lenBuff.flip();\n+\n+                // preAlloc based on size\n+                logFile.preAllocIfNeeded(4 + qe.entry.remaining());\n+\n                 //\n                 // we should be doing the following, but then we run out of\n                 // direct byte buffers\n                 // logFile.write(new ByteBuffer[] { lenBuff, qe.entry });\n                 bc.write(lenBuff);\n                 bc.write(qe.entry);\n \n-                logFile.preAllocIfNeeded();\n-\n                 toFlush.add(qe);\n                 qe = null;\n             }\n@@ -548,8 +925,14 @@ public void run() {\n         } catch (InterruptedException ie) {\n             LOG.warn(\"Journal exits when shutting down\", ie);\n         } finally {\n+            // There could be packets queued for forceWrite on this logFile\n+            // That is fine as this exception is going to anyway take down the\n+            // the bookie. If we execute this as a part of graceful shutdown,\n+            // close will flush the file system cache making any previous\n+            // cached writes durable so this is fine as well.\n             IOUtils.close(LOG, logFile);\n         }\n+        LOG.info(\"Journal exited loop!\");\n     }\n \n     /**\n@@ -560,6 +943,14 @@ public synchronized void shutdown() {\n             if (!running) {\n                 return;\n             }\n+            LOG.info(\"Shutting down Journal\");\n+            forceWriteThread.shutdown();\n+            cbThreadPool.shutdown();\n+            if (!cbThreadPool.awaitTermination(5, TimeUnit.SECONDS)) {\n+                LOG.warn(\"Couldn't shutdown journal callback thread gracefully. Forcing\");\n+            }\n+            cbThreadPool.shutdownNow();\n+\n             running = false;\n             this.interrupt();\n             this.join();"},{"sha":"ad46e5cf3a826d9718ce9382d1c028ce7848fb70","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":147,"deletions":30,"changes":177,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,85 +21,172 @@\n \n package org.apache.bookkeeper.bookie;\n \n-import java.util.Arrays;\n-\n import java.io.Closeable;\n import java.io.File;\n import java.io.RandomAccessFile;\n import java.io.IOException;\n import java.nio.channels.FileChannel;\n import java.nio.ByteBuffer;\n+import java.util.Arrays;\n \n+import org.apache.bookkeeper.util.NativeIO;\n+import org.apache.bookkeeper.util.ZeroBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n /**\n  * Simple wrapper around FileChannel to add versioning\n  * information to the file.\n  */\n class JournalChannel implements Closeable {\n-    static Logger LOG = LoggerFactory.getLogger(JournalChannel.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(JournalChannel.class);\n \n+    final RandomAccessFile randomAccessFile;\n+    final int fd;\n     final FileChannel fc;\n     final BufferedChannel bc;\n     final int formatVersion;\n     long nextPrealloc = 0;\n \n-    final byte[] MAGIC_WORD = \"BKLG\".getBytes();\n+    final byte[] MAGIC_WORD = \"BKLG\".getBytes(UTF_8);\n \n+    final static int SECTOR_SIZE = 512;\n     private final static int START_OF_FILE = -12345;\n+    private static long CACHE_DROP_LAG_BYTES = 8 * 1024 * 1024;\n+\n+    // No header\n+    static final int V1 = 1;\n+    // Adding header\n+    static final int V2 = 2;\n+    // Adding ledger key\n+    static final int V3 = 3;\n+    // Adding fencing key\n+    static final int V4 = 4;\n+    // 1) expanding header to 512\n+    // 2) Padding writes to align sector size\n+    static final int V5 = 5;\n+\n+    static final int HEADER_SIZE = SECTOR_SIZE; // align header to sector size\n+    static final int VERSION_HEADER_SIZE = 8; // 4byte magic word, 4 byte version\n+    static final int MIN_COMPAT_JOURNAL_FORMAT_VERSION = V1;\n+    static final int CURRENT_JOURNAL_FORMAT_VERSION = V5;\n \n-    int HEADER_SIZE = 8; // 4byte magic word, 4 byte version\n-    int MIN_COMPAT_JOURNAL_FORMAT_VERSION = 1;\n-    int CURRENT_JOURNAL_FORMAT_VERSION = 4;\n+    private final long preAllocSize;\n+    private final int journalAlignSize;\n+    private final boolean fRemoveFromPageCache;\n+    public final ByteBuffer zeros;\n \n-    public final static long preAllocSize = 4*1024*1024;\n-    public final static ByteBuffer zeros = ByteBuffer.allocate(512);\n+    // The position of the file channel's last drop position\n+    private long lastDropPosition = 0L;\n \n+    // Mostly used by tests\n     JournalChannel(File journalDirectory, long logId) throws IOException {\n-        this(journalDirectory, logId, START_OF_FILE);\n+        this(journalDirectory, logId, 4 * 1024 * 1024, 65536, START_OF_FILE);\n+    }\n+\n+    // Open journal for scanning starting from the first record in journal.\n+    JournalChannel(File journalDirectory, long logId, long preAllocSize, int writeBufferSize) throws IOException {\n+        this(journalDirectory, logId, preAllocSize, writeBufferSize, START_OF_FILE);\n+    }\n+\n+    // Open journal for scanning starting from given position.\n+    JournalChannel(File journalDirectory, long logId,\n+                   long preAllocSize, int writeBufferSize, long position) throws IOException {\n+         this(journalDirectory, logId, preAllocSize, writeBufferSize, SECTOR_SIZE, position, false, V5);\n+    }\n+\n+    // Open journal to write\n+    JournalChannel(File journalDirectory, long logId,\n+                   long preAllocSize, int writeBufferSize, int journalAlignSize,\n+                   boolean fRemoveFromPageCache, int formatVersionToWrite) throws IOException {\n+        this(journalDirectory, logId, preAllocSize, writeBufferSize, journalAlignSize,\n+             START_OF_FILE, fRemoveFromPageCache, formatVersionToWrite);\n     }\n \n-    JournalChannel(File journalDirectory, long logId, long position) throws IOException {\n+    /**\n+     * Create a journal file.\n+     *\n+     * @param journalDirectory\n+     *          directory to store the journal file.\n+     * @param logId\n+     *          log id for the journal file.\n+     * @param preAllocSize\n+     *          pre allocation size.\n+     * @param writeBufferSize\n+     *          write buffer size.\n+     * @param journalAlignSize\n+     *          size to align journal writes.\n+     * @param position\n+     *          position to start read/write\n+     * @param fRemoveFromPageCache\n+     *          whether to remove cached pages from page cache.\n+     * @param formatVersionToWrite\n+     *          format version to write\n+     * @throws IOException\n+     */\n+    private JournalChannel(File journalDirectory, long logId,\n+                           long preAllocSize, int writeBufferSize, int journalAlignSize,\n+                           long position, boolean fRemoveFromPageCache,\n+                           int formatVersionToWrite) throws IOException {\n+        this.journalAlignSize = journalAlignSize;\n+        this.zeros = ByteBuffer.allocate(journalAlignSize);\n+        this.preAllocSize = preAllocSize - preAllocSize % journalAlignSize;\n+        this.fRemoveFromPageCache = fRemoveFromPageCache;\n         File fn = new File(journalDirectory, Long.toHexString(logId) + \".txn\");\n \n+        if (formatVersionToWrite < V4) {\n+            throw new IOException(\"Invalid journal format to write : version = \" + formatVersionToWrite);\n+        }\n+\n         LOG.info(\"Opening journal {}\", fn);\n         if (!fn.exists()) { // new file, write version\n-            fc = new RandomAccessFile(fn, \"rw\").getChannel();\n-            formatVersion = CURRENT_JOURNAL_FORMAT_VERSION;\n+            if (!fn.createNewFile()) {\n+                LOG.error(\"Journal file {}, that shouldn't exist, already exists. \"\n+                          + \" is there another bookie process running?\", fn);\n+                throw new IOException(\"File \" + fn\n+                        + \" suddenly appeared, is another bookie process running?\");\n+            }\n+            randomAccessFile = new RandomAccessFile(fn, \"rw\");\n+            fc = randomAccessFile.getChannel();\n+            formatVersion = formatVersionToWrite;\n \n-            ByteBuffer bb = ByteBuffer.allocate(HEADER_SIZE);\n+            int headerSize = (V4 == formatVersion) ? VERSION_HEADER_SIZE : HEADER_SIZE;\n+            ByteBuffer bb = ByteBuffer.allocate(headerSize);\n+            ZeroBuffer.put(bb);\n+            bb.clear();\n             bb.put(MAGIC_WORD);\n             bb.putInt(formatVersion);\n-            bb.flip();\n+            bb.clear();\n             fc.write(bb);\n-            fc.force(true);\n-\n-            bc = new BufferedChannel(fc, 65536);\n \n-            nextPrealloc = preAllocSize;\n-            fc.write(zeros, nextPrealloc);\n+            bc = new BufferedChannel(fc, writeBufferSize);\n+            forceWrite(true);\n+            nextPrealloc = this.preAllocSize;\n+            fc.write(zeros, nextPrealloc - journalAlignSize);\n         } else {  // open an existing file\n-            fc = new RandomAccessFile(fn, \"r\").getChannel();\n+            randomAccessFile = new RandomAccessFile(fn, \"r\");\n+            fc = randomAccessFile.getChannel();\n             bc = null; // readonly\n \n-            ByteBuffer bb = ByteBuffer.allocate(HEADER_SIZE);\n+            ByteBuffer bb = ByteBuffer.allocate(VERSION_HEADER_SIZE);\n             int c = fc.read(bb);\n             bb.flip();\n \n-            if (c == HEADER_SIZE) {\n+            if (c == VERSION_HEADER_SIZE) {\n                 byte[] first4 = new byte[4];\n                 bb.get(first4);\n \n                 if (Arrays.equals(first4, MAGIC_WORD)) {\n                     formatVersion = bb.getInt();\n                 } else {\n                     // pre magic word journal, reset to 0;\n-                    formatVersion = 1;\n+                    formatVersion = V1;\n                 }\n             } else {\n                 // no header, must be old version\n-                formatVersion = 1;\n+                formatVersion = V1;\n             }\n \n             if (formatVersion < MIN_COMPAT_JOURNAL_FORMAT_VERSION\n@@ -114,8 +201,10 @@\n \n             try {\n                 if (position == START_OF_FILE) {\n-                    if (formatVersion >= 2) {\n+                    if (formatVersion >= V5) {\n                         fc.position(HEADER_SIZE);\n+                    } else if (formatVersion >= V2) {\n+                        fc.position(VERSION_HEADER_SIZE);\n                     } else {\n                         fc.position(0);\n                     }\n@@ -126,6 +215,7 @@\n                 LOG.error(\"Bookie journal file can seek to position :\", e);\n             }\n         }\n+        this.fd = NativeIO.getSysFileDescriptor(randomAccessFile.getFD());\n     }\n \n     int getFormatVersion() {\n@@ -139,11 +229,11 @@ BufferedChannel getBufferedChannel() throws IOException {\n         return bc;\n     }\n \n-    void preAllocIfNeeded() throws IOException {\n-        if (bc.position() > nextPrealloc) {\n-            nextPrealloc = ((fc.size() + HEADER_SIZE) / preAllocSize + 1) * preAllocSize;\n+    void preAllocIfNeeded(long size) throws IOException {\n+        if (bc.position() + size > nextPrealloc) {\n+            nextPrealloc += preAllocSize;\n             zeros.clear();\n-            fc.write(zeros, nextPrealloc);\n+            fc.write(zeros, nextPrealloc - journalAlignSize);\n         }\n     }\n \n@@ -155,4 +245,31 @@ int read(ByteBuffer dst)\n     public void close() throws IOException {\n         fc.close();\n     }\n+\n+    public void forceWrite(boolean forceMetadata) throws IOException {\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Journal ForceWrite\");\n+        }\n+        long newForceWritePosition = bc.forceWrite(forceMetadata);\n+        //\n+        // For POSIX_FADV_DONTNEED, we want to drop from the beginning\n+        // of the file to a position prior to the current position.\n+        //\n+        // The CACHE_DROP_LAG_BYTES is to prevent dropping a page that will\n+        // be appended again, which would introduce random seeking on journal\n+        // device.\n+        //\n+        // <======== drop ==========>\n+        //                           <-----------LAG------------>\n+        // +------------------------+---------------------------O\n+        // lastDropPosition     newDropPos             lastForceWritePosition\n+        //\n+        if (fRemoveFromPageCache) {\n+            long newDropPos = newForceWritePosition - CACHE_DROP_LAG_BYTES;\n+            if (lastDropPosition < newDropPos) {\n+                NativeIO.bestEffortRemoveFromPageCache(fd, lastDropPosition, newDropPos - lastDropPosition);\n+            }\n+            this.lastDropPosition = newDropPos;\n+        }\n+    }\n }"},{"sha":"9f4fbc6edb43cb090b97b0496bb1dbc31e79f328","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LEPStateChangeCallback.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LEPStateChangeCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LEPStateChangeCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LEPStateChangeCallback.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,31 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+/**\n+ * Callback interface when state of ledger entry page changed.\n+ */\n+interface LEPStateChangeCallback {\n+    public void onSetInUse(LedgerEntryPage lep);\n+    public void onResetInUse(LedgerEntryPage lep);\n+    public void onSetClean(LedgerEntryPage lep);\n+    public void onSetDirty(LedgerEntryPage lep);\n+}"},{"sha":"e6d2edd92d43d15205b8919cfef3e9582a79a905","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":46,"deletions":791,"changes":837,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,26 +21,12 @@\n \n package org.apache.bookkeeper.bookie;\n \n-import java.io.File;\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n-import com.google.common.annotations.VisibleForTesting;\n-\n-import org.apache.bookkeeper.util.SnapshotMap;\n-import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n-import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.SnapshotMap;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -49,56 +35,35 @@\n  * This class serves two purposes.\n  */\n public class LedgerCacheImpl implements LedgerCache {\n-    private final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n-    private static final String IDX = \".idx\";\n-    static final String RLOC = \".rloc\";\n+    private final static Logger LOG = LoggerFactory.getLogger(LedgerCacheImpl.class);\n \n-    private LedgerDirsManager ledgerDirsManager;\n-    final private AtomicBoolean shouldRelocateIndexFile = new AtomicBoolean(false);\n+    private final IndexInMemPageMgr indexPageManager;\n+    private final IndexPersistenceMgr indexPersistenceManager;\n+    private final int pageSize;\n+    private final int entriesPerPage;\n \n     public LedgerCacheImpl(ServerConfiguration conf, SnapshotMap<Long, Boolean> activeLedgers,\n-            LedgerDirsManager ledgerDirsManager)\n-            throws IOException {\n-        this.ledgerDirsManager = ledgerDirsManager;\n-        this.openFileLimit = conf.getOpenFileLimit();\n+                           LedgerDirsManager ledgerDirsManager) throws IOException {\n+        this(conf, activeLedgers, ledgerDirsManager, NullStatsLogger.INSTANCE);\n+    }\n+\n+    public LedgerCacheImpl(ServerConfiguration conf, SnapshotMap<Long, Boolean> activeLedgers,\n+                           LedgerDirsManager ledgerDirsManager, StatsLogger statsLogger) throws IOException {\n         this.pageSize = conf.getPageSize();\n         this.entriesPerPage = pageSize / 8;\n-\n-        if (conf.getPageLimit() <= 0) {\n-            // allocate half of the memory to the page cache\n-            this.pageLimit = (int)((Runtime.getRuntime().maxMemory() / 3) / this.pageSize);\n-        } else {\n-            this.pageLimit = conf.getPageLimit();\n-        }\n-        LOG.info(\"maxMemory = \" + Runtime.getRuntime().maxMemory());\n-        LOG.info(\"openFileLimit is \" + openFileLimit + \", pageSize is \" + pageSize + \", pageLimit is \" + pageLimit);\n-        this.activeLedgers = activeLedgers;\n-        // Retrieve all of the active ledgers.\n-        getActiveLedgers();\n-        ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+        this.indexPersistenceManager = new IndexPersistenceMgr(pageSize, entriesPerPage, conf, activeLedgers,\n+                ledgerDirsManager, statsLogger);\n+        this.indexPageManager = new IndexInMemPageMgr(pageSize, entriesPerPage, conf,\n+                indexPersistenceManager, statsLogger);\n     }\n-    /**\n-     * the list of potentially clean ledgers\n-     */\n-    LinkedList<Long> cleanLedgers = new LinkedList<Long>();\n \n-    /**\n-     * the list of potentially dirty ledgers\n-     */\n-    LinkedList<Long> dirtyLedgers = new LinkedList<Long>();\n-\n-    HashMap<Long, FileInfo> fileInfoCache = new HashMap<Long, FileInfo>();\n-\n-    LinkedList<Long> openLedgers = new LinkedList<Long>();\n-\n-    // Manage all active ledgers in LedgerManager\n-    // so LedgerManager has knowledge to garbage collect inactive/deleted ledgers\n-    final SnapshotMap<Long, Boolean> activeLedgers;\n+    IndexPersistenceMgr getIndexPersistenceManager() {\n+        return indexPersistenceManager;\n+    }\n \n-    final int openFileLimit;\n-    final int pageSize;\n-    final int pageLimit;\n-    final int entriesPerPage;\n+    IndexInMemPageMgr getIndexPageManager() {\n+        return indexPageManager;\n+    }\n \n     /**\n      * @return page size used in ledger cache\n@@ -107,610 +72,33 @@ public int getPageSize() {\n         return pageSize;\n     }\n \n-    /**\n-     * @return entries per page used in ledger cache\n-     */\n-    public int getEntriesPerPage() {\n-        return entriesPerPage;\n-    }\n-\n-    /**\n-     * @return page limitation in ledger cache\n-     */\n-    public int getPageLimit() {\n-        return pageLimit;\n-    }\n-\n-    // The number of pages that have actually been used\n-    private int pageCount = 0;\n-    HashMap<Long, HashMap<Long,LedgerEntryPage>> pages = new HashMap<Long, HashMap<Long,LedgerEntryPage>>();\n-\n-    /**\n-     * @return number of page used in ledger cache\n-     */\n-    public int getNumUsedPages() {\n-        return pageCount;\n-    }\n-\n-    private void putIntoTable(HashMap<Long, HashMap<Long,LedgerEntryPage>> table, LedgerEntryPage lep) {\n-        HashMap<Long, LedgerEntryPage> map = table.get(lep.getLedger());\n-        if (map == null) {\n-            map = new HashMap<Long, LedgerEntryPage>();\n-            table.put(lep.getLedger(), map);\n-        }\n-        map.put(lep.getFirstEntry(), lep);\n-    }\n-\n-    private static LedgerEntryPage getFromTable(HashMap<Long, HashMap<Long,LedgerEntryPage>> table,\n-                                                Long ledger, Long firstEntry) {\n-        HashMap<Long, LedgerEntryPage> map = table.get(ledger);\n-        if (map != null) {\n-            return map.get(firstEntry);\n-        }\n-        return null;\n-    }\n-\n-    synchronized protected LedgerEntryPage getLedgerEntryPage(Long ledger, Long firstEntry, boolean onlyDirty) {\n-        LedgerEntryPage lep = getFromTable(pages, ledger, firstEntry);\n-        if (lep == null) {\n-            return null;\n-        }\n-\n-        lep.usePage();\n-\n-        if (onlyDirty && lep.isClean()) {\n-            return null;\n-        } else {\n-            return lep;\n-        }\n-    }\n-\n-    /** \n-     * Grab ledger entry page whose first entry is <code>pageEntry</code>.\n-     *\n-     * If the page doesn't existed before, we allocate a memory page.\n-     * Otherwise, we grab a clean page and read it from disk.\n-     *\n-     * @param ledger\n-     *          Ledger Id\n-     * @param pageEntry\n-     *          Start entry of this entry page.\n-     */\n-    private LedgerEntryPage grabLedgerEntryPage(long ledger, long pageEntry) throws IOException {\n-        LedgerEntryPage lep = grabCleanPage(ledger, pageEntry);\n-        try {\n-            // should update page before we put it into table\n-            // otherwise we would put an empty page in it\n-            updatePage(lep);\n-            synchronized(this) {\n-                putIntoTable(pages, lep);\n-            }   \n-        } catch (IOException ie) {\n-            // if we grab a clean page, but failed to update the page\n-            // we are exhausting the count of ledger entry pages.\n-            // since this page will be never used, so we need to decrement\n-            // page count of ledger cache.\n-            lep.releasePage();\n-            synchronized (this) {\n-                --pageCount;\n-            }\n-            throw ie; \n-        }   \n-        return lep;\n-    }\n-\n     @Override\n     public void putEntryOffset(long ledger, long entry, long offset) throws IOException {\n-        int offsetInPage = (int) (entry % entriesPerPage);\n-        // find the id of the first entry of the page that has the entry\n-        // we are looking for\n-        long pageEntry = entry-offsetInPage;\n-        LedgerEntryPage lep = getLedgerEntryPage(ledger, pageEntry, false);\n-        if (lep == null) {\n-            lep = grabLedgerEntryPage(ledger, pageEntry); \n-        }\n-        if (lep != null) {\n-            lep.setOffset(offset, offsetInPage*8);\n-            lep.releasePage();\n-            return;\n-        }\n+        indexPageManager.putEntryOffset(ledger, entry, offset);\n     }\n \n     @Override\n     public long getEntryOffset(long ledger, long entry) throws IOException {\n-        int offsetInPage = (int) (entry%entriesPerPage);\n-        // find the id of the first entry of the page that has the entry\n-        // we are looking for\n-        long pageEntry = entry-offsetInPage;\n-        LedgerEntryPage lep = getLedgerEntryPage(ledger, pageEntry, false);\n-        try {\n-            if (lep == null) {\n-                lep = grabLedgerEntryPage(ledger, pageEntry);\n-            }\n-            return lep.getOffset(offsetInPage*8);\n-        } finally {\n-            if (lep != null) {\n-                lep.releasePage();\n-            }\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static final String getLedgerName(long ledgerId) {\n-        int parent = (int) (ledgerId & 0xff);\n-        int grandParent = (int) ((ledgerId & 0xff00) >> 8);\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(Integer.toHexString(grandParent));\n-        sb.append('/');\n-        sb.append(Integer.toHexString(parent));\n-        sb.append('/');\n-        sb.append(Long.toHexString(ledgerId));\n-        sb.append(IDX);\n-        return sb.toString();\n-    }\n-\n-    FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n-        synchronized(fileInfoCache) {\n-            FileInfo fi = fileInfoCache.get(ledger);\n-            if (fi == null) {\n-                File lf = findIndexFile(ledger);\n-                if (lf == null) {\n-                    if (masterKey == null) {\n-                        throw new Bookie.NoLedgerException(ledger);\n-                    }\n-                    lf = getNewLedgerIndexFile(ledger, null);\n-                    // A new ledger index file has been created for this Bookie.\n-                    // Add this new ledger to the set of active ledgers.\n-                    LOG.debug(\"New ledger index file created for ledgerId: {}\", ledger);\n-                    activeLedgers.put(ledger, true);\n-                }\n-                evictFileInfoIfNecessary();\n-                fi = new FileInfo(lf, masterKey);\n-                if (ledgerDirsManager.isDirFull(getLedgerDirForLedger(fi))) {\n-                    moveLedgerIndexFile(ledger, fi);\n-                }\n-                fileInfoCache.put(ledger, fi);\n-                openLedgers.add(ledger);\n-            }\n-            if (fi != null) {\n-                fi.use();\n-            }\n-            return fi;\n-        }\n-    }\n-\n-    /**\n-     * Get a new index file for ledger excluding directory <code>excludedDir</code>.\n-     *\n-     * @param ledger\n-     *          Ledger id.\n-     * @param excludedDir\n-     *          The ledger directory to exclude.\n-     * @return new index file object.\n-     * @throws NoWritableLedgerDirException if there is no writable dir available.\n-     */\n-    private File getNewLedgerIndexFile(Long ledger, File excludedDir)\n-    throws NoWritableLedgerDirException {\n-        File dir = ledgerDirsManager.pickRandomWritableDir(excludedDir);\n-        String ledgerName = getLedgerName(ledger);\n-        return new File(dir, ledgerName);\n-    }\n-\n-    private void updatePage(LedgerEntryPage lep) throws IOException {\n-        if (!lep.isClean()) {\n-            throw new IOException(\"Trying to update a dirty page\");\n-        }\n-        FileInfo fi = null;\n-        try {\n-            fi = getFileInfo(lep.getLedger(), null);\n-            long pos = lep.getFirstEntry()*8;\n-            if (pos >= fi.size()) {\n-                lep.zeroPage();\n-            } else {\n-                lep.readPage(fi);\n-            }\n-        } finally {\n-            if (fi != null) {\n-                fi.release();\n-            }\n-        }\n-    }\n-\n-    private LedgerDirsListener getLedgerDirsListener() {\n-        return new LedgerDirsListener() {\n-            @Override\n-            public void diskFull(File disk) {\n-                // If the current entry log disk is full, then create new entry\n-                // log.\n-                shouldRelocateIndexFile.set(true);\n-            }\n-\n-            @Override\n-            public void diskFailed(File disk) {\n-                // Nothing to handle here. Will be handled in Bookie\n-            }\n-\n-            @Override\n-            public void allDisksFull() {\n-                // Nothing to handle here. Will be handled in Bookie\n-            }\n-\n-            @Override\n-            public void fatalError() {\n-                // Nothing to handle here. Will be handled in Bookie\n-            }\n-        };\n+        return indexPageManager.getEntryOffset(ledger, entry);\n     }\n \n     @Override\n     public void flushLedger(boolean doAll) throws IOException {\n-        synchronized(dirtyLedgers) {\n-            if (dirtyLedgers.isEmpty()) {\n-                synchronized(this) {\n-                    for(Long l: pages.keySet()) {\n-                        if (LOG.isTraceEnabled()) {\n-                            LOG.trace(\"Adding {} to dirty pages\", Long.toHexString(l));\n-                        }\n-                        dirtyLedgers.add(l);\n-                    }\n-                }\n-            }\n-            if (dirtyLedgers.isEmpty()) {\n-                return;\n-            }\n-\n-            if (shouldRelocateIndexFile.get()) {\n-                // if some new dir detected as full, then move all corresponding\n-                // open index files to new location\n-                for (Long l : dirtyLedgers) {\n-                    FileInfo fi = getFileInfo(l, null);\n-                    File currentDir = getLedgerDirForLedger(fi);\n-                    if (ledgerDirsManager.isDirFull(currentDir)) {\n-                        moveLedgerIndexFile(l, fi);\n-                    }\n-                }\n-                shouldRelocateIndexFile.set(false);\n-            }\n-\n-            while(!dirtyLedgers.isEmpty()) {\n-                Long l = dirtyLedgers.removeFirst();\n-\n-                flushLedger(l);\n-\n-                if (!doAll) {\n-                    break;\n-                }\n-                // Yield. if we are doing all the ledgers we don't want to block other flushes that\n-                // need to happen\n-                try {\n-                    dirtyLedgers.wait(1);\n-                } catch (InterruptedException e) {\n-                    // just pass it on\n-                    Thread.currentThread().interrupt();\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Get the ledger directory that the ledger index belongs to.\n-     *\n-     * @param fi File info of a ledger\n-     * @return ledger directory that the ledger belongs to.\n-     */\n-    private File getLedgerDirForLedger(FileInfo fi) {\n-        return fi.getLf().getParentFile().getParentFile().getParentFile();\n-    }\n-\n-    private void moveLedgerIndexFile(Long l, FileInfo fi) throws NoWritableLedgerDirException, IOException {\n-        File newLedgerIndexFile = getNewLedgerIndexFile(l, getLedgerDirForLedger(fi));\n-        fi.moveToNewLocation(newLedgerIndexFile, fi.getSizeSinceLastwrite());\n-    }\n-\n-    /**\n-     * Flush a specified ledger\n-     *\n-     * @param l\n-     *          Ledger Id\n-     * @throws IOException\n-     */\n-    private void flushLedger(long l) throws IOException {\n-        LinkedList<Long> firstEntryList;\n-        synchronized(this) {\n-            HashMap<Long, LedgerEntryPage> pageMap = pages.get(l);\n-            if (pageMap == null || pageMap.isEmpty()) {\n-                FileInfo fi = null;\n-                try {\n-                    fi = getFileInfo(l, null);\n-                    fi.flushHeader();\n-                } finally {\n-                    if (null != fi) {\n-                        fi.release();\n-                    }\n-                }\n-                return;\n-            }\n-            firstEntryList = new LinkedList<Long>();\n-            for(Map.Entry<Long, LedgerEntryPage> entry: pageMap.entrySet()) {\n-                LedgerEntryPage lep = entry.getValue();\n-                if (lep.isClean()) {\n-                    LOG.trace(\"Page is clean {}\", lep);\n-                    continue;\n-                }\n-                firstEntryList.add(lep.getFirstEntry());\n-            }\n-        }\n-\n-        if (firstEntryList.size() == 0) {\n-            LOG.debug(\"Nothing to flush for ledger {}.\", l);\n-            // nothing to do\n-            return;\n-        }\n-\n-        // Now flush all the pages of a ledger\n-        List<LedgerEntryPage> entries = new ArrayList<LedgerEntryPage>(firstEntryList.size());\n-        FileInfo fi = null;\n-        try {\n-            for(Long firstEntry: firstEntryList) {\n-                LedgerEntryPage lep = getLedgerEntryPage(l, firstEntry, true);\n-                if (lep != null) {\n-                    entries.add(lep);\n-                }\n-            }\n-            Collections.sort(entries, new Comparator<LedgerEntryPage>() {\n-                    @Override\n-                    public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n-                    return (int)(o1.getFirstEntry()-o2.getFirstEntry());\n-                    }\n-                    });\n-            ArrayList<Integer> versions = new ArrayList<Integer>(entries.size());\n-            fi = getFileInfo(l, null);\n-            // flush the header if necessary\n-            fi.flushHeader();\n-            int start = 0;\n-            long lastOffset = -1;\n-            for(int i = 0; i < entries.size(); i++) {\n-                versions.add(i, entries.get(i).getVersion());\n-                if (lastOffset != -1 && (entries.get(i).getFirstEntry() - lastOffset) != entriesPerPage) {\n-                    // send up a sequential list\n-                    int count = i - start;\n-                    if (count == 0) {\n-                        LOG.warn(\"Count cannot possibly be zero!\");\n-                    }\n-                    writeBuffers(l, entries, fi, start, count);\n-                    start = i;\n-                }\n-                lastOffset = entries.get(i).getFirstEntry();\n-            }\n-            if (entries.size()-start == 0 && entries.size() != 0) {\n-                LOG.warn(\"Nothing to write, but there were entries!\");\n-            }\n-            writeBuffers(l, entries, fi, start, entries.size()-start);\n-            synchronized(this) {\n-                for(int i = 0; i < entries.size(); i++) {\n-                    LedgerEntryPage lep = entries.get(i);\n-                    lep.setClean(versions.get(i));\n-                }\n-            }\n-        } finally {\n-            for(LedgerEntryPage lep: entries) {\n-                lep.releasePage();\n-            }\n-            if (fi != null) {\n-                fi.release();\n-            }\n-        }\n-    }\n-\n-    private void writeBuffers(Long ledger,\n-                              List<LedgerEntryPage> entries, FileInfo fi,\n-                              int start, int count) throws IOException {\n-        if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Writing {} buffers of {}\", count, Long.toHexString(ledger));\n-        }\n-        if (count == 0) {\n-            return;\n-        }\n-        ByteBuffer buffs[] = new ByteBuffer[count];\n-        for(int j = 0; j < count; j++) {\n-            buffs[j] = entries.get(start+j).getPageToWrite();\n-            if (entries.get(start+j).getLedger() != ledger) {\n-                throw new IOException(\"Writing to \" + ledger + \" but page belongs to \"\n-                                      + entries.get(start+j).getLedger());\n-            }\n-        }\n-        long totalWritten = 0;\n-        while(buffs[buffs.length-1].remaining() > 0) {\n-            long rc = fi.write(buffs, entries.get(start+0).getFirstEntry()*8);\n-            if (rc <= 0) {\n-                throw new IOException(\"Short write to ledger \" + ledger + \" rc = \" + rc);\n-            }\n-            totalWritten += rc;\n-        }\n-        if (totalWritten != (long)count * (long)pageSize) {\n-            throw new IOException(\"Short write to ledger \" + ledger + \" wrote \" + totalWritten\n-                                  + \" expected \" + count * pageSize);\n-        }\n-    }\n-    private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOException {\n-        if (entry % entriesPerPage != 0) {\n-            throw new IllegalArgumentException(entry + \" is not a multiple of \" + entriesPerPage);\n-        }\n-        outerLoop:\n-        while(true) {\n-            synchronized(this) {\n-                if (pageCount  < pageLimit) {\n-                    // let's see if we can allocate something\n-                    LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n-                    lep.setLedger(ledger);\n-                    lep.setFirstEntry(entry);\n-\n-                    // note, this will not block since it is a new page\n-                    lep.usePage();\n-                    pageCount++;\n-                    return lep;\n-                }\n-            }\n-\n-            synchronized(cleanLedgers) {\n-                if (cleanLedgers.isEmpty()) {\n-                    flushLedger(false);\n-                    synchronized(this) {\n-                        for(Long l: pages.keySet()) {\n-                            cleanLedgers.add(l);\n-                        }\n-                    }\n-                }\n-                synchronized(this) {\n-                    // if ledgers deleted between checking pageCount and putting\n-                    // ledgers into cleanLedgers list, the cleanLedgers list would be empty.\n-                    // so give it a chance to go back to check pageCount again because\n-                    // deleteLedger would decrement pageCount to return the number of pages\n-                    // occupied by deleted ledgers.\n-                    if (cleanLedgers.isEmpty()) {\n-                        continue outerLoop;\n-                    }\n-                    Long cleanLedger = cleanLedgers.getFirst();\n-                    Map<Long, LedgerEntryPage> map = pages.get(cleanLedger);\n-                    while (map == null || map.isEmpty()) {\n-                        cleanLedgers.removeFirst();\n-                        if (cleanLedgers.isEmpty()) {\n-                            continue outerLoop; \n-                        }\n-                        cleanLedger = cleanLedgers.getFirst();\n-                        map = pages.get(cleanLedger);\n-                    }\n-                    Iterator<Map.Entry<Long, LedgerEntryPage>> it = map.entrySet().iterator();\n-                    LedgerEntryPage lep = it.next().getValue();\n-                    while((lep.inUse() || !lep.isClean())) {\n-                        if (!it.hasNext()) {\n-                            // no clean page found in this ledger\n-                            cleanLedgers.removeFirst();\n-                            continue outerLoop;\n-                        }\n-                        lep = it.next().getValue();\n-                    }\n-                    it.remove();\n-                    if (map.isEmpty()) {\n-                        pages.remove(lep.getLedger());\n-                    }\n-                    lep.usePage();\n-                    lep.zeroPage();\n-                    lep.setLedger(ledger);\n-                    lep.setFirstEntry(entry);\n-                    return lep;\n-                }\n-            }\n-        }\n+        indexPageManager.flushOneOrMoreLedgers(doAll);\n     }\n \n     @Override\n     public long getLastEntry(long ledgerId) throws IOException {\n-        long lastEntry = 0;\n-        // Find the last entry in the cache\n-        synchronized(this) {\n-            Map<Long, LedgerEntryPage> map = pages.get(ledgerId);\n-            if (map != null) {\n-                for(LedgerEntryPage lep: map.values()) {\n-                    if (lep.getFirstEntry() + entriesPerPage < lastEntry) {\n-                        continue;\n-                    }\n-                    lep.usePage();\n-                    long highest = lep.getLastEntry();\n-                    if (highest > lastEntry) {\n-                        lastEntry = highest;\n-                    }\n-                    lep.releasePage();\n-                }\n-            }\n-        }\n-\n-        FileInfo fi = null;\n-        try {\n-            fi = getFileInfo(ledgerId, null);\n-            long size = fi.size();\n-            // make sure the file size is aligned with index entry size\n-            // otherwise we may read incorret data\n-            if (0 != size % 8) {\n-                LOG.warn(\"Index file of ledger {} is not aligned with index entry size.\", ledgerId);\n-                size = size - size % 8;\n-            }\n-            // we may not have the last entry in the cache\n-            if (size > lastEntry*8) {\n-                ByteBuffer bb = ByteBuffer.allocate(getPageSize());\n-                long position = size - getPageSize();\n-                if (position < 0) {\n-                    position = 0;\n-                }\n-                fi.read(bb, position);\n-                bb.flip();\n-                long startingEntryId = position/8;\n-                for(int i = getEntriesPerPage()-1; i >= 0; i--) {\n-                    if (bb.getLong(i*8) != 0) {\n-                        if (lastEntry < startingEntryId+i) {\n-                            lastEntry = startingEntryId+i;\n-                        }\n-                        break;\n-                    }\n-                }\n-            }\n-        } finally {\n-            if (fi != null) {\n-                fi.release();\n-            }\n-        }\n-\n+        // Get the highest entry from the pages that are in memory\n+        long lastEntryInMem = indexPageManager.getLastEntryInMem(ledgerId);\n+        // Some index pages may have been evicted from memory, retrieve the last entry\n+        // from the persistent store. We will check if there could be an entry beyond the\n+        // last in mem entry and only then attempt to get the last persisted entry from the file\n+        // The latter is just an optimization\n+        long lastEntry = indexPersistenceManager.getPersistEntryBeyondInMem(ledgerId, lastEntryInMem);\n         return lastEntry;\n     }\n \n-    /**\n-     * This method will look within the ledger directories for the ledger index\n-     * files. That will comprise the set of active ledgers this particular\n-     * BookieServer knows about that have not yet been deleted by the BookKeeper\n-     * Client. This is called only once during initialization.\n-     */\n-    private void getActiveLedgers() throws IOException {\n-        // Ledger index files are stored in a file hierarchy with a parent and\n-        // grandParent directory. We'll have to go two levels deep into these\n-        // directories to find the index files.\n-        for (File ledgerDirectory : ledgerDirsManager.getAllLedgerDirs()) {\n-            for (File grandParent : ledgerDirectory.listFiles()) {\n-                if (grandParent.isDirectory()) {\n-                    for (File parent : grandParent.listFiles()) {\n-                        if (parent.isDirectory()) {\n-                            for (File index : parent.listFiles()) {\n-                                if (!index.isFile()\n-                                        || (!index.getName().endsWith(IDX) && !index.getName().endsWith(RLOC))) {\n-                                    continue;\n-                                }\n-\n-                                // We've found a ledger index file. The file\n-                                // name is the HexString representation of the\n-                                // ledgerId.\n-                                String ledgerIdInHex = index.getName().replace(RLOC, \"\").replace(IDX, \"\");\n-                                if (index.getName().endsWith(RLOC)) {\n-                                    if (findIndexFile(Long.parseLong(ledgerIdInHex)) != null) {\n-                                        if (!index.delete()) {\n-                                            LOG.warn(\"Deleting the rloc file \" + index + \" failed\");\n-                                        }\n-                                        continue;\n-                                    } else {\n-                                        File dest = new File(index.getParentFile(), ledgerIdInHex + IDX);\n-                                        if (!index.renameTo(dest)) {\n-                                            throw new IOException(\"Renaming rloc file \" + index\n-                                                    + \" to index file has failed\");\n-                                        }\n-                                    }\n-                                }\n-                                activeLedgers.put(Long.parseLong(ledgerIdInHex, 16), true);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     /**\n      * This method is called whenever a ledger is deleted by the BookKeeper Client\n      * and we want to remove all relevant data for it stored in the LedgerCache.\n@@ -719,148 +107,33 @@ private void getActiveLedgers() throws IOException {\n     public void deleteLedger(long ledgerId) throws IOException {\n         LOG.debug(\"Deleting ledgerId: {}\", ledgerId);\n \n-        // remove pages first to avoid page flushed when deleting file info\n-        synchronized(this) {\n-            Map<Long, LedgerEntryPage> lpages = pages.remove(ledgerId);\n-            if (null != lpages) {\n-                pageCount -= lpages.size();\n-                if (pageCount < 0) {\n-                    LOG.error(\"Page count of ledger cache has been decremented to be less than zero.\");\n-                }\n-            }\n-        }\n-        // Delete the ledger's index file and close the FileInfo\n-        FileInfo fi = null;\n-        try {\n-            fi = getFileInfo(ledgerId, null);\n-            fi.close(false);\n-            fi.delete();\n-        } finally {\n-            // should release use count\n-            // otherwise the file channel would not be closed.\n-            if (null != fi) {\n-                fi.release();\n-            }\n-        }\n-\n-        // Remove it from the active ledger manager\n-        activeLedgers.remove(ledgerId);\n-\n-        // Now remove it from all the other lists and maps.\n-        // These data structures need to be synchronized first before removing entries.\n-        synchronized(fileInfoCache) {\n-            fileInfoCache.remove(ledgerId);\n-        }\n-        synchronized(cleanLedgers) {\n-            cleanLedgers.remove(ledgerId);\n-        }\n-        synchronized(dirtyLedgers) {\n-            dirtyLedgers.remove(ledgerId);\n-        }\n-        synchronized(openLedgers) {\n-            openLedgers.remove(ledgerId);\n-        }\n-    }\n-\n-    private File findIndexFile(long ledgerId) throws IOException {\n-        String ledgerName = getLedgerName(ledgerId);\n-        for (File d : ledgerDirsManager.getAllLedgerDirs()) {\n-            File lf = new File(d, ledgerName);\n-            if (lf.exists()) {\n-                return lf;\n-            }\n-        }\n-        return null;\n+        indexPageManager.removePagesForLedger(ledgerId);\n+        indexPersistenceManager.removeLedger(ledgerId);\n     }\n \n     @Override\n     public byte[] readMasterKey(long ledgerId) throws IOException, BookieException {\n-        synchronized(fileInfoCache) {\n-            FileInfo fi = fileInfoCache.get(ledgerId);\n-            if (fi == null) {\n-                File lf = findIndexFile(ledgerId);\n-                if (lf == null) {\n-                    throw new Bookie.NoLedgerException(ledgerId);\n-                }\n-                evictFileInfoIfNecessary();        \n-                fi = new FileInfo(lf, null);\n-                byte[] key = fi.getMasterKey();\n-                fileInfoCache.put(ledgerId, fi);\n-                openLedgers.add(ledgerId);\n-                return key;\n-            }\n-            return fi.getMasterKey();\n-        }\n-    }\n-\n-    // evict file info if necessary\n-    private void evictFileInfoIfNecessary() throws IOException {\n-        synchronized (fileInfoCache) {\n-            if (openLedgers.size() > openFileLimit) {\n-                long ledgerToRemove = openLedgers.removeFirst();\n-                LOG.info(\"Ledger {} is evicted from file info cache.\",\n-                         ledgerToRemove);\n-                fileInfoCache.remove(ledgerToRemove).close(true);\n-            }\n-        }\n+        return indexPersistenceManager.readMasterKey(ledgerId);\n     }\n \n     @Override\n     public boolean setFenced(long ledgerId) throws IOException {\n-        FileInfo fi = null;\n-        try {\n-            fi = getFileInfo(ledgerId, null);\n-            if (null != fi) {\n-                return fi.setFenced();\n-            }\n-            return false;\n-        } finally {\n-            if (null != fi) {\n-                fi.release();\n-            }\n-        }\n+        return indexPersistenceManager.setFenced(ledgerId);\n     }\n \n     @Override\n     public boolean isFenced(long ledgerId) throws IOException {\n-        FileInfo fi = null;\n-        try {\n-            fi = getFileInfo(ledgerId, null);\n-            if (null != fi) {\n-                return fi.isFenced();\n-            }\n-            return false;\n-        } finally {\n-            if (null != fi) {\n-                fi.release();\n-            }\n-        }\n+        return indexPersistenceManager.isFenced(ledgerId);\n     }\n \n     @Override\n     public void setMasterKey(long ledgerId, byte[] masterKey) throws IOException {\n-        FileInfo fi = null;\n-        try {\n-            fi = getFileInfo(ledgerId, masterKey);\n-        } finally {\n-            if (null != fi) {\n-                fi.release();\n-            }\n-        }\n+        indexPersistenceManager.setMasterKey(ledgerId, masterKey);\n     }\n \n     @Override\n     public boolean ledgerExists(long ledgerId) throws IOException {\n-        synchronized(fileInfoCache) {\n-            FileInfo fi = fileInfoCache.get(ledgerId);\n-            if (fi == null) {\n-                File lf = findIndexFile(ledgerId);\n-                if (lf == null) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n+        return indexPersistenceManager.ledgerExists(ledgerId);\n     }\n \n     @Override\n@@ -878,7 +151,7 @@ public boolean isHidden() {\n \n             @Override\n             public int getPageCount() {\n-                return LedgerCacheImpl.this.getNumUsedPages();\n+                return LedgerCacheImpl.this.indexPageManager.getNumUsedPages();\n             }\n \n             @Override\n@@ -888,41 +161,23 @@ public int getPageSize() {\n \n             @Override\n             public int getOpenFileLimit() {\n-                return openFileLimit;\n+                return LedgerCacheImpl.this.indexPersistenceManager.getOpenFileLimit();\n             }\n \n             @Override\n             public int getPageLimit() {\n-                return LedgerCacheImpl.this.getPageLimit();\n-            }\n-\n-            @Override\n-            public int getNumCleanLedgers() {\n-                return cleanLedgers.size();\n-            }\n-\n-            @Override\n-            public int getNumDirtyLedgers() {\n-                return dirtyLedgers.size();\n+                return LedgerCacheImpl.this.indexPageManager.getPageLimit();\n             }\n \n             @Override\n             public int getNumOpenLedgers() {\n-                return openLedgers.size();\n+                return LedgerCacheImpl.this.indexPersistenceManager.getNumOpenLedgers();\n             }\n         };\n     }\n \n     @Override\n     public void close() throws IOException {\n-        synchronized (fileInfoCache) {\n-            for (Entry<Long, FileInfo> fileInfo : fileInfoCache.entrySet()) {\n-                FileInfo value = fileInfo.getValue();\n-                if (value != null) {\n-                    value.close(true);\n-                }\n-            }\n-            fileInfoCache.clear();\n-        }\n+        indexPersistenceManager.close();\n     }\n }"},{"sha":"c24e3489426e0c4c4e985c14e78a5e3e0b7d0edb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheMXBean.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheMXBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheMXBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheMXBean.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -43,16 +43,6 @@\n      */\n     public int getPageLimit();\n \n-    /**\n-     * @return number of clean ledgers\n-     */\n-    public int getNumCleanLedgers();\n-\n-    /**\n-     * @return number of dirty ledgers\n-     */\n-    public int getNumDirtyLedgers();\n-\n     /**\n      * @return number of open ledgers\n      */"},{"sha":"d9814b667317517f80917e9fd7e7a370785881fe","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -34,7 +34,7 @@\n  *\n  */\n public class LedgerDescriptorImpl extends LedgerDescriptor {\n-    final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n     final LedgerStorage ledgerStorage;\n     private long ledgerId;\n "},{"sha":"935befb2fd73d07ce2bee150773f9a9705b0df35","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":193,"deletions":42,"changes":235,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -26,38 +26,80 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n-import com.google.common.annotations.VisibleForTesting;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n+import org.apache.bookkeeper.util.DiskChecker.DiskWarnThresholdException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_WRITABLE_DIRS;\n+\n /**\n  * This class manages ledger directories used by the bookie.\n  */\n public class LedgerDirsManager {\n-    private static Logger LOG = LoggerFactory\n+    private final static Logger LOG = LoggerFactory\n             .getLogger(LedgerDirsManager.class);\n \n     private volatile List<File> filledDirs;\n     private final List<File> ledgerDirectories;\n     private volatile List<File> writableLedgerDirectories;\n-    private DiskChecker diskChecker;\n-    private List<LedgerDirsListener> listeners;\n-    private LedgerDirsMonitor monitor;\n+    private final DiskChecker diskChecker;\n+    private final List<LedgerDirsListener> listeners;\n+    private final LedgerDirsMonitor monitor;\n     private final Random rand = new Random();\n+    private final ConcurrentMap<File, Float> diskUsages =\n+            new ConcurrentHashMap<File, Float>();\n \n-    public LedgerDirsManager(ServerConfiguration conf) {\n+    public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n+        this(conf, dirs, NullStatsLogger.INSTANCE);\n+    }\n+\n+    LedgerDirsManager(ServerConfiguration conf, File[] dirs, StatsLogger statsLogger) {\n         this.ledgerDirectories = Arrays.asList(Bookie\n-                .getCurrentDirectories(conf.getLedgerDirs()));\n+                .getCurrentDirectories(dirs));\n         this.writableLedgerDirectories = new ArrayList<File>(ledgerDirectories);\n         this.filledDirs = new ArrayList<File>();\n-        listeners = new ArrayList<LedgerDirsManager.LedgerDirsListener>();\n-        diskChecker = new DiskChecker(conf.getDiskUsageThreshold());\n+        listeners = new ArrayList<LedgerDirsListener>();\n+        diskChecker = new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold());\n         monitor = new LedgerDirsMonitor(conf.getDiskCheckInterval());\n+        for (File dir : dirs) {\n+            diskUsages.put(dir, 0f);\n+            String statName = \"dir_\" + dir.getPath().replace('/', '_') + \"_usage\";\n+            final File targetDir = dir;\n+            statsLogger.registerGauge(statName, new Gauge<Number>() {\n+                @Override\n+                public Number getDefaultValue() {\n+                    return 0;\n+                }\n+\n+                @Override\n+                public Number getSample() {\n+                    return diskUsages.get(targetDir) * 100;\n+                }\n+            });\n+        }\n+        statsLogger.registerGauge(LD_WRITABLE_DIRS, new Gauge<Number>() {\n+            @Override\n+            public Number getDefaultValue() {\n+                return 0;\n+            }\n+\n+            @Override\n+            public Number getSample() {\n+                return writableLedgerDirectories.size();\n+            }\n+        });\n     }\n \n     /**\n@@ -82,6 +124,13 @@ public LedgerDirsManager(ServerConfiguration conf) {\n         return writableLedgerDirectories;\n     }\n \n+    /**\n+     * @return full-filled ledger dirs.\n+     */\n+    public List<File> getFullFilledLedgerDirs() {\n+        return filledDirs;\n+    }\n+\n     /**\n      * Get dirs, which are full more than threshold\n      */\n@@ -112,6 +161,34 @@ public void addToFilledDirs(File dir) {\n         }\n     }\n \n+    /**\n+     * Add the dir to writable dirs list.\n+     *\n+     * @param dir Dir\n+     */\n+    public void addToWritableDirs(File dir, boolean underWarnThreshold) {\n+        if (writableLedgerDirectories.contains(dir)) {\n+            return;\n+        }\n+        LOG.info(\"{} becomes writable. Adding it to writable dirs list.\", dir);\n+        // Update writable dirs list\n+        List<File> updatedWritableDirs = new ArrayList<File>(writableLedgerDirectories);\n+        updatedWritableDirs.add(dir);\n+        writableLedgerDirectories = updatedWritableDirs;\n+        // Update the filled dirs list\n+        List<File> newDirs = new ArrayList<File>(filledDirs);\n+        newDirs.removeAll(writableLedgerDirectories);\n+        filledDirs = newDirs;\n+        // Notify listeners about disk writable\n+        for (LedgerDirsListener listener : listeners) {\n+            if (underWarnThreshold) {\n+                listener.diskWritable(dir);\n+            } else {\n+                listener.diskJustWritable(dir);\n+            }\n+        }\n+    }\n+\n     /**\n      * Returns one of the ledger dir from writable dirs list randomly.\n      */\n@@ -153,6 +230,19 @@ public void addLedgerDirsListener(LedgerDirsListener listener) {\n         }\n     }\n \n+    /**\n+     * Sweep through all the directories to check disk errors or disk full.\n+     *\n+     * @throws DiskErrorException\n+     *             If disk having errors\n+     * @throws NoWritableLedgerDirException\n+     *             If all the configured ledger directories are full or having\n+     *             less space than threshold\n+     */\n+    public void init() throws DiskErrorException, NoWritableLedgerDirException {\n+        monitor.checkDirs(writableLedgerDirectories);\n+    }\n+\n     // start the daemon for disk monitoring\n     public void start() {\n         monitor.setDaemon(true);\n@@ -161,6 +251,7 @@ public void start() {\n \n     // shutdown disk monitoring daemon\n     public void shutdown() {\n+        LOG.info(\"Shutting down LedgerDirsMonitor\");\n         monitor.interrupt();\n         try {\n             monitor.join();\n@@ -172,54 +263,91 @@ public void shutdown() {\n     /**\n      * Thread to monitor the disk space periodically.\n      */\n-    private class LedgerDirsMonitor extends Thread {\n-        int interval;\n+    private class LedgerDirsMonitor extends BookieThread {\n+        private final int interval;\n \n         public LedgerDirsMonitor(int interval) {\n+            super(\"LedgerDirsMonitorThread\");\n             this.interval = interval;\n         }\n \n         @Override\n         public void run() {\n-            try {\n-                while (true) {\n-                    List<File> writableDirs;\n+            while (true) {\n+                List<File> writableDirs;\n+                try {\n+                    writableDirs = getWritableLedgerDirs();\n+                } catch (NoWritableLedgerDirException e) {\n+                    for (LedgerDirsListener listener : listeners) {\n+                        listener.allDisksFull();\n+                    }\n+                    break;\n+                }\n+                // Check all writable dirs disk space usage.\n+                for (File dir : writableDirs) {\n                     try {\n-                        writableDirs = getWritableLedgerDirs();\n-                    } catch (NoWritableLedgerDirException e) {\n+                        diskUsages.put(dir, diskChecker.checkDir(dir));\n+                    } catch (DiskErrorException e) {\n+                        LOG.error(\"Ledger directory {} failed on disk checking : \", dir, e);\n+                        // Notify disk failure to all listeners\n                         for (LedgerDirsListener listener : listeners) {\n-                            listener.allDisksFull();\n+                            listener.diskFailed(dir);\n                         }\n-                        break;\n-                    }\n-                    // Check all writable dirs disk space usage.\n-                    for (File dir : writableDirs) {\n-                        try {\n-                            diskChecker.checkDir(dir);\n-                        } catch (DiskErrorException e) {\n-                            // Notify disk failure to all listeners\n-                            for (LedgerDirsListener listener : listeners) {\n-                                listener.diskFailed(dir);\n-                            }\n-                        } catch (DiskOutOfSpaceException e) {\n-                            // Notify disk full to all listeners\n-                            addToFilledDirs(dir);\n+                    } catch (DiskWarnThresholdException e) {\n+                        LOG.warn(\"Ledger directory {} is almost full.\", dir);\n+                        diskUsages.put(dir, e.getUsage());\n+                        for (LedgerDirsListener listener : listeners) {\n+                            listener.diskAlmostFull(dir);\n                         }\n+                    } catch (DiskOutOfSpaceException e) {\n+                        LOG.error(\"Ledger directory {} is out-of-space.\", dir);\n+                        diskUsages.put(dir, e.getUsage());\n+                        // Notify disk full to all listeners\n+                        addToFilledDirs(dir);\n                     }\n+                }\n+                List<File> fullfilledDirs = new ArrayList<File>(getFullFilledLedgerDirs());\n+                // Check all full-filled disk space usage\n+                for (File dir : fullfilledDirs) {\n                     try {\n-                        Thread.sleep(interval);\n-                    } catch (InterruptedException e) {\n-                        LOG.info(\"LedgerDirsMonitor thread is interrupted\");\n-                        break;\n+                        diskUsages.put(dir, diskChecker.checkDir(dir));\n+                        addToWritableDirs(dir, true);\n+                    } catch (DiskErrorException e) {\n+                        //Notify disk failure to all the listeners\n+                        for (LedgerDirsListener listener : listeners) {\n+                            listener.diskFailed(dir);\n+                        }\n+                    } catch (DiskWarnThresholdException e) {\n+                        diskUsages.put(dir, e.getUsage());\n+                        // the full-filled dir become writable but still above warn threshold\n+                        addToWritableDirs(dir, false);\n+                    } catch (DiskOutOfSpaceException e) {\n+                        // the full-filled dir is still full-filled\n+                        diskUsages.put(dir, e.getUsage());\n                     }\n                 }\n-            } catch (Exception e) {\n-                LOG.error(\"Error Occured while checking disks\", e);\n-                // Notify disk failure to all listeners\n-                for (LedgerDirsListener listener : listeners) {\n-                    listener.fatalError();\n+                try {\n+                    Thread.sleep(interval);\n+                } catch (InterruptedException e) {\n+                    LOG.info(\"LedgerDirsMonitor thread is interrupted\");\n+                    break;\n+                }\n+            }\n+            LOG.info(\"LedgerDirsMonitorThread exited!\");\n+        }\n+\n+        private void checkDirs(List<File> writableDirs)\n+                throws DiskErrorException, NoWritableLedgerDirException {\n+            for (File dir : writableDirs) {\n+                try {\n+                    diskChecker.checkDir(dir);\n+                } catch (DiskWarnThresholdException e) {\n+                    // nop\n+                } catch (DiskOutOfSpaceException e) {\n+                    addToFilledDirs(dir);\n                 }\n             }\n+            getWritableLedgerDirs();\n         }\n     }\n \n@@ -241,20 +369,43 @@ public NoWritableLedgerDirException(String errMsg) {\n     public static interface LedgerDirsListener {\n         /**\n          * This will be notified on disk failure/disk error\n-         * \n+         *\n          * @param disk\n          *            Failed disk\n          */\n         void diskFailed(File disk);\n \n+        /**\n+         * Notified when the disk usage warn threshold is exceeded on\n+         * the drive.\n+         * @param disk\n+         */\n+        void diskAlmostFull(File disk);\n+\n         /**\n          * This will be notified on disk detected as full\n-         * \n+         *\n          * @param disk\n          *            Filled disk\n          */\n         void diskFull(File disk);\n \n+        /**\n+         * This will be notified on disk detected as writable and under warn threshold\n+         *\n+         * @param disk\n+         *          Writable disk\n+         */\n+        void diskWritable(File disk);\n+\n+        /**\n+         * This will be notified on disk detected as writable but still in warn threshold\n+         *\n+         * @param disk\n+         *          Writable disk\n+         */\n+        void diskJustWritable(File disk);\n+\n         /**\n          * This will be notified whenever all disks are detected as full.\n          */"},{"sha":"2d6f80d7c162c7f47c923065107c61ebebfc342b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","status":"modified","additions":106,"deletions":45,"changes":151,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,30 +21,45 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.util.ZeroBuffer;\n+\n import java.io.IOException;\n import java.nio.ByteBuffer;\n-\n-import org.apache.bookkeeper.proto.BookieProtocol;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * This is a page in the LedgerCache. It holds the locations\n  * (entrylogfile, offset) for entry ids.\n  */\n public class LedgerEntryPage {\n+    private final static int indexEntrySize = 8;\n     private final int pageSize;\n     private final int entriesPerPage;\n-    private long ledger = -1;\n-    private long firstEntry = BookieProtocol.INVALID_ENTRY_ID;\n+    volatile private EntryKey entryKey = new EntryKey(-1, BookieProtocol.INVALID_ENTRY_ID);\n     private final ByteBuffer page;\n-    private boolean clean = true;\n-    private boolean pinned = false;\n-    private int useCount;\n-    private int version;\n+    volatile private boolean clean = true;\n+    private final AtomicInteger useCount = new AtomicInteger();\n+    private final AtomicInteger version = new AtomicInteger(0);\n+    volatile private int last = -1; // Last update position\n+    private final LEPStateChangeCallback callback;\n+\n+    public static int getIndexEntrySize() {\n+        return indexEntrySize;\n+    }\n \n     public LedgerEntryPage(int pageSize, int entriesPerPage) {\n+        this(pageSize, entriesPerPage, null);\n+    }\n+\n+    public LedgerEntryPage(int pageSize, int entriesPerPage, LEPStateChangeCallback callback) {\n         this.pageSize = pageSize;\n         this.entriesPerPage = entriesPerPage;\n         page = ByteBuffer.allocateDirect(pageSize);\n+        this.callback = callback;\n+        if (null != this.callback) {\n+            callback.onResetInUse(this);\n+        }\n     }\n \n     @Override\n@@ -54,32 +69,33 @@ public String toString() {\n         sb.append('@');\n         sb.append(getFirstEntry());\n         sb.append(clean ? \" clean \" : \" dirty \");\n-        sb.append(useCount);\n+        sb.append(useCount.get());\n         return sb.toString();\n     }\n-    synchronized public void usePage() {\n-        useCount++;\n-    }\n-    synchronized public void pin() {\n-        pinned = true;\n-    }\n-    synchronized public void unpin() {\n-        pinned = false;\n-    }\n-    synchronized public boolean isPinned() {\n-        return pinned;\n+\n+    public void usePage() {\n+        int oldVal = useCount.getAndIncrement();\n+        if ((0 == oldVal) && (null != callback)) {\n+            callback.onSetInUse(this);\n+        }\n     }\n-    synchronized public void releasePage() {\n-        useCount--;\n-        if (useCount < 0) {\n+\n+    public void releasePage() {\n+        int newUseCount = useCount.decrementAndGet();\n+        if (newUseCount < 0) {\n             throw new IllegalStateException(\"Use count has gone below 0\");\n         }\n+        if ((null != callback) && (newUseCount == 0)) {\n+            callback.onResetInUse(this);\n+        }\n     }\n-    synchronized private void checkPage() {\n-        if (useCount <= 0) {\n+\n+    private void checkPage() {\n+        if (useCount.get() <= 0) {\n             throw new IllegalStateException(\"Page not marked in use\");\n         }\n     }\n+\n     @Override\n     public boolean equals(Object other) {\n         if (other instanceof LedgerEntryPage) {\n@@ -89,75 +105,120 @@ public boolean equals(Object other) {\n             return false;\n         }\n     }\n+\n     @Override\n     public int hashCode() {\n         return (int)getLedger() ^ (int)(getFirstEntry());\n     }\n+\n     void setClean(int versionOfCleaning) {\n-        this.clean = (versionOfCleaning == version);\n+        this.clean = (versionOfCleaning == version.get());\n+\n+        if ((null != callback) && clean) {\n+            callback.onSetClean(this);\n+        }\n     }\n+\n     boolean isClean() {\n         return clean;\n     }\n+\n     public void setOffset(long offset, int position) {\n         checkPage();\n-        version++;\n-        this.clean = false;\n         page.putLong(position, offset);\n+        version.incrementAndGet();\n+        if (last < position/getIndexEntrySize()) {\n+            last = position/getIndexEntrySize();\n+        }\n+        this.clean = false;\n+\n+        if (null != callback) {\n+            callback.onSetDirty(this);\n+        }\n     }\n+\n     public long getOffset(int position) {\n         checkPage();\n         return page.getLong(position);\n     }\n-    static final byte zeroPage[] = new byte[64*1024];\n+\n     public void zeroPage() {\n         checkPage();\n         page.clear();\n-        page.put(zeroPage, 0, page.remaining());\n+        ZeroBuffer.put(page);\n+        last = -1;\n         clean = true;\n     }\n+\n     public void readPage(FileInfo fi) throws IOException {\n         checkPage();\n         page.clear();\n         while(page.remaining() != 0) {\n-            if (fi.read(page, getFirstEntry()*8) <= 0) {\n-                throw new IOException(\"Short page read of ledger \" + getLedger() + \" tried to get \" + page.capacity() + \" from position \" + getFirstEntry()*8 + \" still need \" + page.remaining());\n+            if (fi.read(page, getFirstEntryPosition()) <= 0) {\n+                throw new IOException(\"Short page read of ledger \" + getLedger()\n+                                + \" tried to get \" + page.capacity() + \" from position \" + getFirstEntryPosition()\n+                                + \" still need \" + page.remaining());\n             }\n         }\n+        last = getLastEntryIndex();\n         clean = true;\n     }\n+\n     public ByteBuffer getPageToWrite() {\n         checkPage();\n         page.clear();\n         return page;\n     }\n-    void setLedger(long ledger) {\n-        this.ledger = ledger;\n-    }\n+\n     long getLedger() {\n-        return ledger;\n+        return entryKey.getLedgerId();\n     }\n+\n     int getVersion() {\n-        return version;\n+        return version.get();\n     }\n-    void setFirstEntry(long firstEntry) {\n+\n+    public EntryKey getEntryKey() {\n+        return entryKey;\n+    }\n+\n+    void setLedgerAndFirstEntry(long ledgerId, long firstEntry) {\n         if (firstEntry % entriesPerPage != 0) {\n             throw new IllegalArgumentException(firstEntry + \" is not a multiple of \" + entriesPerPage);\n         }\n-        this.firstEntry = firstEntry;\n+        this.entryKey = new EntryKey(ledgerId, firstEntry);\n     }\n     long getFirstEntry() {\n-        return firstEntry;\n+        return entryKey.getEntryId();\n     }\n+\n+    long getMaxPossibleEntry() {\n+        return entryKey.getEntryId() + entriesPerPage;\n+    }\n+\n+    long getFirstEntryPosition() {\n+        return entryKey.getEntryId() * indexEntrySize;\n+    }\n+\n     public boolean inUse() {\n-        return useCount > 0;\n+        return useCount.get() > 0;\n     }\n-    public long getLastEntry() {\n+\n+    private int getLastEntryIndex() {\n         for(int i = entriesPerPage - 1; i >= 0; i--) {\n-            if (getOffset(i*8) > 0) {\n-                return i + firstEntry;\n+            if (getOffset(i*getIndexEntrySize()) > 0) {\n+                return i;\n             }\n         }\n-        return 0;\n+        return -1;\n+    }\n+\n+    public long getLastEntry() {\n+        if (last >= 0) {\n+            return last + entryKey.getEntryId();\n+        } else {\n+            int index = getLastEntryIndex();\n+            return index >= 0 ? (index + entryKey.getEntryId()) : 0;\n+        }\n     }\n }"},{"sha":"e992d03ddb2d704ec7f326bb120dc50d0b1f2767","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -24,6 +24,7 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n \n+import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n \n /**\n@@ -90,18 +91,26 @@\n      */\n     ByteBuffer getEntry(long ledgerId, long entryId) throws IOException;\n \n-    /**\n-     * Whether there is data in the storage which needs to be flushed\n-     */\n-    boolean isFlushRequired();\n-\n     /**\n      * Flushes all data in the storage. Once this is called,\n      * add data written to the LedgerStorage up until this point\n      * has been persisted to perminant storage\n      */\n     void flush() throws IOException;\n \n+    /**\n+     * Ask the ledger storage to sync data until the given <i>checkpoint</i>.\n+     * The ledger storage implementation do checkpoint and return the real checkpoint\n+     * that it finished. The returned the checkpoint indicates that all entries added\n+     * before that point already persist.\n+     *\n+     * @param checkpoint\n+     *          Check Point that {@link Checkpointer} proposed.\n+     * @throws IOException\n+     * @return the checkpoint that the ledger storage finished.\n+     */\n+    Checkpoint checkpoint(Checkpoint checkpoint) throws IOException;\n+\n     /**\n      * Get the JMX management bean for this LedgerStorage\n      */"},{"sha":"4bf1e050754a974cbdc63a97c7d778b63647a51a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LogMark.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LogMark.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LogMark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LogMark.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,83 @@\n+/**\n+ * Copyright The Apache Software Foundation\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Journal stream position\n+ */\n+class LogMark {\n+    long logFileId;\n+    long logFileOffset;\n+\n+    public LogMark() {\n+        setLogMark(0, 0);\n+    }\n+\n+    public LogMark(LogMark other) {\n+        setLogMark(other.getLogFileId(), other.getLogFileOffset());\n+    }\n+\n+    public LogMark(long logFileId, long logFileOffset) {\n+        setLogMark(logFileId, logFileOffset);\n+    }\n+\n+    public synchronized long getLogFileId() {\n+        return logFileId;\n+    }\n+\n+    public synchronized long getLogFileOffset() {\n+        return logFileOffset;\n+    }\n+\n+    public synchronized void readLogMark(ByteBuffer bb) {\n+        logFileId = bb.getLong();\n+        logFileOffset = bb.getLong();\n+    }\n+\n+    public synchronized void writeLogMark(ByteBuffer bb) {\n+        bb.putLong(logFileId);\n+        bb.putLong(logFileOffset);\n+    }\n+\n+    public synchronized void setLogMark(long logFileId, long logFileOffset) {\n+        this.logFileId = logFileId;\n+        this.logFileOffset = logFileOffset;\n+    }\n+\n+    public synchronized int compare(LogMark other) {\n+        long ret = this.logFileId - other.getLogFileId();\n+        if (ret == 0) {\n+            ret = this.logFileOffset - other.getLogFileOffset();\n+        }\n+        return (ret < 0)? -1 : ((ret > 0)? 1 : 0);\n+    }\n+\n+    @Override\n+    public synchronized String toString() {\n+        StringBuilder sb = new StringBuilder();\n+\n+        sb.append(\"LogMark: logFileId - \").append(logFileId)\n+                .append(\" , logFileOffset - \").append(logFileOffset);\n+\n+        return sb.toString();\n+    }\n+}"},{"sha":"a2ce9e3cb94ecfc4116fa6279373393e6495ae1e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -32,7 +32,7 @@\n public class ReadOnlyEntryLogger extends EntryLogger {\n \n     public ReadOnlyEntryLogger(ServerConfiguration conf) throws IOException {\n-        super(conf, new LedgerDirsManager(conf));\n+        super(conf, new LedgerDirsManager(conf, conf.getLedgerDirs()));\n     }\n \n     @Override"},{"sha":"d8a87e4b31ac44676599d9227f0e096ec3bdac51","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -72,31 +72,31 @@ public void gc(GarbageCleaner garbageCleaner) {\n                     garbageCleaner.clean(bkLid);\n                 }\n             }\n+            long lastEnd = -1;\n+\n             while(ledgerRangeIterator.hasNext()) {\n                 LedgerRange lRange = ledgerRangeIterator.next();\n                 Map<Long, Boolean> subBkActiveLedgers = null;\n-                Long start = lRange.start();\n+\n+                Long start = lastEnd + 1;\n                 Long end = lRange.end();\n-                if (end != LedgerRange.NOLIMIT) {\n-                    subBkActiveLedgers = bkActiveLedgersSnapshot.subMap(start,\n-                            true, end, true);\n-                } else {\n-                    if (start != LedgerRange.NOLIMIT) {\n-                        subBkActiveLedgers = bkActiveLedgersSnapshot.tailMap(start);\n-                    } else {\n-                        subBkActiveLedgers = bkActiveLedgersSnapshot;\n-                    }\n+                if (!ledgerRangeIterator.hasNext()) {\n+                    end = Long.MAX_VALUE;\n                 }\n-                Set<Long> globalActiveLedgers = lRange.getLedgers();\n-                LOG.debug(\"All active ledgers for hash node {}, Current active ledgers from Bookie for hash node {}\",\n-                        globalActiveLedgers, subBkActiveLedgers.keySet());\n+                subBkActiveLedgers = bkActiveLedgersSnapshot.subMap(\n+                        start, true, end, true);\n+\n+                Set<Long> ledgersInMetadata = lRange.getLedgers();\n+                LOG.debug(\"Active in metadata {}, Active in bookie {}\",\n+                          ledgersInMetadata, subBkActiveLedgers.keySet());\n                 for (Long bkLid : subBkActiveLedgers.keySet()) {\n-                    if (!globalActiveLedgers.contains(bkLid)) {\n+                    if (!ledgersInMetadata.contains(bkLid)) {\n                         // remove it from current active ledger\n                         subBkActiveLedgers.remove(bkLid);\n                         garbageCleaner.clean(bkLid);\n                     }\n                 }\n+                lastEnd = end;\n             }\n         } catch (Exception e) {\n             // ignore exception, collecting garbage next time"},{"sha":"c3ec897f9bb7840a4f57235c737bb88b44339ab9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SkipListArena.java","status":"added","additions":238,"deletions":0,"changes":238,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SkipListArena.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SkipListArena.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SkipListArena.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,238 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+/**\n+ * SkipList allocation buffer to reduce memory fragment.\n+ * Adapted from HBase project.\n+ * <p>\n+ * The SkipListArena is basically a bump-the-pointer allocator that allocates\n+ * big (default 2MB) byte[] chunks from and then handles it out to threads that\n+ * request slices into the array.\n+ * <p>\n+ * The purpose of this class is to combat heap fragmentation in the\n+ * bookie. By ensuring that all KeyValues in a given SkipList refer\n+ * only to large chunks of contiguous memory, we ensure that large blocks\n+ * get freed up when the SkipList is flushed.\n+ * <p>\n+ * Without the Arena, the byte array allocated during insertion end up\n+ * interleaved throughout the heap, and the old generation gets progressively\n+ * more fragmented until a stop-the-world compacting collection occurs.\n+ * <p>\n+ */\n+public class SkipListArena {\n+    private AtomicReference<Chunk> curChunk = new AtomicReference<Chunk>();\n+\n+    final int chunkSize;\n+\n+    final int maxAlloc;\n+\n+    public SkipListArena(ServerConfiguration cfg) {\n+        chunkSize = cfg.getSkipListArenaChunkSize();\n+        maxAlloc = cfg.getSkipListArenaMaxAllocSize();\n+        assert maxAlloc <= chunkSize;\n+    }\n+\n+    /**\n+    * Allocate a slice of the given length.\n+    *\n+    * If the size is larger than the maximum size specified for this\n+    * allocator, returns null.\n+    */\n+    public MemorySlice allocateBytes(int size) {\n+        assert size >= 0;\n+\n+        // Callers should satisfy large allocations directly from JVM since they\n+        // don't cause fragmentation as badly.\n+        if (size > maxAlloc) {\n+            return null;\n+        }\n+\n+        while (true) {\n+            Chunk c = getCurrentChunk();\n+\n+            // Try to allocate from this chunk\n+            int allocOffset = c.alloc(size);\n+            if (allocOffset != -1) {\n+                // We succeeded - this is the common case - small alloc\n+                // from a big buffer\n+                return new MemorySlice(c.data, allocOffset);\n+            }\n+\n+            // not enough space!\n+            // try to retire this chunk\n+            retireCurrentChunk(c);\n+        }\n+    }\n+\n+    /**\n+    * Try to retire the current chunk if it is still there.\n+    */\n+    private void retireCurrentChunk(Chunk c) {\n+        curChunk.compareAndSet(c, null);\n+        // If the CAS fails, that means that someone else already\n+        // retired the chunk for us.\n+    }\n+\n+    /**\n+    * Get the current chunk, or, if there is no current chunk,\n+    * allocate a new one from the JVM.\n+    */\n+    private Chunk getCurrentChunk() {\n+        while (true) {\n+            // Try to get the chunk\n+            Chunk c = curChunk.get();\n+            if (c != null) {\n+                return c;\n+            }\n+\n+            // No current chunk, so we want to allocate one. We race\n+            // against other allocators to CAS in an uninitialized chunk\n+            // (which is cheap to allocate)\n+            c = new Chunk(chunkSize);\n+            if (curChunk.compareAndSet(null, c)) {\n+                c.init();\n+                return c;\n+            }\n+            // lost race\n+        }\n+    }\n+\n+    /**\n+    * A chunk of memory out of which allocations are sliced.\n+    */\n+    private static class Chunk {\n+        /** Actual underlying data */\n+        private byte[] data;\n+\n+        private static final int UNINITIALIZED = -1;\n+        private static final int OOM = -2;\n+        /**\n+         * Offset for the next allocation, or the sentinel value -1\n+         * which implies that the chunk is still uninitialized.\n+         * */\n+        private AtomicInteger nextFreeOffset = new AtomicInteger(UNINITIALIZED);\n+\n+        /** Total number of allocations satisfied from this buffer */\n+        private AtomicInteger allocCount = new AtomicInteger();\n+\n+        /** Size of chunk in bytes */\n+        private final int size;\n+\n+        /**\n+         * Create an uninitialized chunk. Note that memory is not allocated yet, so\n+         * this is cheap.\n+         * @param size in bytes\n+         */\n+        private Chunk(int size) {\n+            this.size = size;\n+        }\n+\n+        /**\n+         * Actually claim the memory for this chunk. This should only be called from\n+         * the thread that constructed the chunk. It is thread-safe against other\n+         * threads calling alloc(), who will block until the allocation is complete.\n+         */\n+        public void init() {\n+            assert nextFreeOffset.get() == UNINITIALIZED;\n+            try {\n+                data = new byte[size];\n+            } catch (OutOfMemoryError e) {\n+                boolean failInit = nextFreeOffset.compareAndSet(UNINITIALIZED, OOM);\n+                assert failInit; // should be true.\n+                throw e;\n+            }\n+            // Mark that it's ready for use\n+            boolean okInit = nextFreeOffset.compareAndSet(UNINITIALIZED, 0);\n+            assert okInit;    // single-threaded call\n+        }\n+\n+        /**\n+         * Try to allocate <code>size</code> bytes from the chunk.\n+         * @return the offset of the successful allocation, or -1 to indicate not-enough-space\n+         */\n+        public int alloc(int size) {\n+            while (true) {\n+                int oldOffset = nextFreeOffset.get();\n+                if (oldOffset == UNINITIALIZED) {\n+                    // Other thread allocating it right now\n+                    Thread.yield();\n+                    continue;\n+                }\n+                if (oldOffset == OOM) {\n+                    return -1;\n+                }\n+\n+                if (oldOffset + size > data.length) {\n+                    return -1; // alloc doesn't fit\n+                }\n+\n+                // Try to atomically claim this chunk\n+                if (nextFreeOffset.compareAndSet(oldOffset, oldOffset + size)) {\n+                    // we got the alloc\n+                    allocCount.incrementAndGet();\n+                    return oldOffset;\n+                }\n+                // lost race\n+            }\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Chunk@\" + System.identityHashCode(this) +\n+                \": used(\" + allocCount.get() + \"), free(\" +\n+                (data.length - nextFreeOffset.get() + \")\");\n+        }\n+    }\n+\n+    /**\n+    * The result of a single allocation. Contains the chunk that the\n+    * allocation points into, and the offset in this array where the\n+    * slice begins.\n+    */\n+    public static class MemorySlice {\n+        private final byte[] data;\n+        private final int offset;\n+\n+        private MemorySlice(byte[] data, int off) {\n+            this.data = data;\n+            this.offset = off;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Slice:\" + \"capacity(\" + data.length + \"), offset(\" + offset + \")\";\n+        }\n+\n+        byte[] getData() {\n+            return data;\n+        }\n+\n+        int getOffset() {\n+            return offset;\n+        }\n+    }\n+}"},{"sha":"1dfb880ce288ba87ef205f362504f94a30f7a323","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SkipListFlusher.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SkipListFlusher.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SkipListFlusher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SkipListFlusher.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,43 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Flush entries from skip list\n+ */\n+public interface SkipListFlusher {\n+    /**\n+     * Process an entry.\n+     *\n+     * @param ledgerId\n+     *          Ledger ID.\n+     * @param entryId\n+     *          The entry id this entry.\n+     * @param entry\n+     *          Entry ByteBuffer\n+     * @throws IOException\n+     */\n+    public void process(long ledgerId, long entryId, ByteBuffer entry) throws IOException;\n+}"},{"sha":"0a3884c2636fed66618af2ab9a8c3bf87abf8bbc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,186 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SortedLedgerStorage extends InterleavedLedgerStorage\n+        implements LedgerStorage, CacheCallback, SkipListFlusher {\n+    private final static Logger LOG = LoggerFactory.getLogger(SortedLedgerStorage.class);\n+\n+    private final EntryMemTable memTable;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public SortedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager,\n+                               LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n+                               final CheckpointSource checkpointSource, StatsLogger statsLogger)\n+                                       throws IOException {\n+        super(conf, ledgerManager, ledgerDirsManager, indexDirsManager, null, statsLogger);\n+        this.memTable = new EntryMemTable(conf, checkpointSource, statsLogger);\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor(\n+                new ThreadFactoryBuilder()\n+                .setNameFormat(\"SortedLedgerStorage-%d\")\n+                .setPriority((Thread.NORM_PRIORITY + Thread.MAX_PRIORITY)/2).build());\n+    }\n+\n+    @Override\n+    public void start() {\n+        try {\n+            flush();\n+        } catch (IOException e) {\n+            LOG.error(\"Exception thrown while flushing ledger cache.\", e);\n+        }\n+        super.start();\n+    }\n+\n+    @Override\n+    public void shutdown() throws InterruptedException {\n+        // Wait for any jobs currently scheduled to be completed and then shut down.\n+        scheduler.shutdown();\n+        if (!scheduler.awaitTermination(3, TimeUnit.SECONDS)) {\n+            scheduler.shutdownNow();\n+        }\n+        super.shutdown();\n+    }\n+\n+    @Override\n+    public boolean ledgerExists(long ledgerId) throws IOException {\n+        // Done this way because checking the skip list is an O(logN) operation compared to\n+        // the O(1) for the ledgerCache.\n+        if (!super.ledgerExists(ledgerId)) {\n+            EntryKeyValue kv = memTable.getLastEntry(ledgerId);\n+            if (null == kv) {\n+                return super.ledgerExists(ledgerId);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long addEntry(ByteBuffer entry) throws IOException {\n+        long ledgerId = entry.getLong();\n+        long entryId = entry.getLong();\n+        entry.rewind();\n+        memTable.addEntry(ledgerId, entryId, entry, this);\n+        return entryId;\n+    }\n+\n+    /**\n+     * Get the last entry id for a particular ledger.\n+     * @param ledgerId\n+     * @return\n+     */\n+    private ByteBuffer getLastEntryId(long ledgerId) throws IOException {\n+        EntryKeyValue kv = memTable.getLastEntry(ledgerId);\n+        if (null != kv) {\n+            return kv.getValueAsByteBuffer();\n+        }\n+        // If it doesn't exist in the skip list, then fallback to the ledger cache+index.\n+        return super.getEntry(ledgerId, BookieProtocol.LAST_ADD_CONFIRMED);\n+    }\n+\n+    @Override\n+    public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n+        if (entryId == BookieProtocol.LAST_ADD_CONFIRMED) {\n+            return getLastEntryId(ledgerId);\n+        }\n+        ByteBuffer buffToRet;\n+        try {\n+            buffToRet = super.getEntry(ledgerId, entryId);\n+        } catch (Bookie.NoEntryException nee) {\n+            EntryKeyValue kv = memTable.getEntry(ledgerId, entryId);\n+            if (null == kv) {\n+                // The entry might have been flushed since we last checked, so query the ledger cache again.\n+                // If the entry truly doesn't exist, then this will throw a NoEntryException\n+                buffToRet = super.getEntry(ledgerId, entryId);\n+            } else {\n+                buffToRet = kv.getValueAsByteBuffer();\n+            }\n+        }\n+        // buffToRet will not be null when we reach here.\n+        return buffToRet;\n+    }\n+\n+    @Override\n+    public Checkpoint checkpoint(final Checkpoint checkpoint) throws IOException {\n+        Checkpoint lastCheckpoint = checkpointHolder.getLastCheckpoint();\n+        // if checkpoint is less than last checkpoint, we don't need to do checkpoint again.\n+        if (lastCheckpoint.compareTo(checkpoint) > 0) {\n+            return lastCheckpoint;\n+        }\n+        memTable.flush(this, checkpoint);\n+        return super.checkpoint(checkpoint);\n+    }\n+\n+    @Override\n+    public void process(long ledgerId, long entryId,\n+                        ByteBuffer buffer) throws IOException {\n+        processEntry(ledgerId, entryId, buffer, false);\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+        memTable.flush(this, Checkpoint.MAX);\n+        super.flush();\n+    }\n+\n+    // CacheCallback functions.\n+    @Override\n+    public void onSizeLimitReached() throws IOException {\n+        // when size limit reached, we get the previous checkpoint from snapshot mem-table.\n+        // at this point, we are safer to schedule a checkpoint, since the entries added before\n+        // this checkpoint already written to entry logger.\n+        // but it would be better not to let mem-table flush to different entry log files,\n+        // so we roll entry log files in SortedLedgerStorage itself.\n+        // After that, we could make the process writing data to entry logger file not bound with checkpoint.\n+        // otherwise, it hurts add performance.\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    LOG.info(\"Started flushing mem table.\");\n+                    memTable.flush(SortedLedgerStorage.this);\n+                    if (entryLogger.reachEntryLogLimit(0)) {\n+                        entryLogger.rollLog();\n+                        LOG.info(\"Rolling entry logger since it reached size limitation\");\n+                    }\n+                } catch (IOException e) {\n+                    // TODO: if we failed to flush data, we should switch the bookie back to readonly mode\n+                    //       or shutdown it.\n+                    LOG.error(\"Exception thrown while flushing skip list cache.\", e);\n+                }\n+            }\n+        });\n+    }\n+}"},{"sha":"71a21580294d18664fa9002bf1fb03bff6b1a78d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,189 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.util.MathUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+/**\n+ * SyncThread is a background thread which help checkpointing ledger storage\n+ * when a checkpoint is requested. After a ledger storage is checkpointed,\n+ * the journal files added before checkpoint will be garbage collected.\n+ * <p>\n+ * After all data has been persisted to ledger index files and entry\n+ * loggers, it is safe to complete a checkpoint by persisting the log marker\n+ * to disk. If bookie failed after persist log mark, bookie is able to relay\n+ * journal entries started from last log mark without losing any entries.\n+ * </p>\n+ * <p>\n+ * Those journal files whose id are less than the log id in last log mark,\n+ * could be removed safely after persisting last log mark. We provide a\n+ * setting to let user keeping number of old journal files which may be used\n+ * for manual recovery in critical disaster.\n+ * </p>\n+ */\n+class SyncThread {\n+    private final static Logger LOG = LoggerFactory.getLogger(SyncThread.class);\n+\n+    final ScheduledExecutorService executor;\n+    final int flushInterval;\n+    final LedgerStorage ledgerStorage;\n+    final LedgerDirsListener dirsListener;\n+    final CheckpointSource checkpointSource;\n+\n+    public SyncThread(ServerConfiguration conf,\n+                      LedgerDirsListener dirsListener,\n+                      LedgerStorage ledgerStorage,\n+                      CheckpointSource checkpointSource) {\n+        this.dirsListener = dirsListener;\n+        this.ledgerStorage = ledgerStorage;\n+        this.checkpointSource = checkpointSource;\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n+            .setNameFormat(\"SyncThread-\" + conf.getBookiePort() + \"-%d\");\n+        this.executor = Executors.newSingleThreadScheduledExecutor(tfb.build());\n+        flushInterval = conf.getFlushInterval();\n+        LOG.debug(\"Flush Interval : {}\", flushInterval);\n+    }\n+\n+    void start() {\n+        executor.scheduleAtFixedRate(new Runnable() {\n+                public void run() {\n+                    try {\n+                        synchronized (suspensionLock) {\n+                            while (suspended) {\n+                                try {\n+                                    suspensionLock.wait();\n+                                } catch (InterruptedException e) {\n+                                    Thread.currentThread().interrupt();\n+                                    continue;\n+                                }\n+                            }\n+                        }\n+                        checkpoint(checkpointSource.newCheckpoint());\n+                    } catch (Throwable t) {\n+                        LOG.error(\"Exception in SyncThread\", t);\n+                        dirsListener.fatalError();\n+                    }\n+                }\n+            }, flushInterval, flushInterval, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void flush() {\n+        Checkpoint checkpoint = checkpointSource.newCheckpoint();\n+        try {\n+            ledgerStorage.flush();\n+        } catch (NoWritableLedgerDirException e) {\n+            LOG.error(\"No writeable ledger directories\", e);\n+            dirsListener.allDisksFull();\n+            return;\n+        } catch (IOException e) {\n+            LOG.error(\"Exception flushing ledgers\", e);\n+            return;\n+        }\n+\n+        try {\n+            checkpointSource.checkpointComplete(checkpoint, false);\n+        } catch (IOException e) {\n+            LOG.error(\"Exception marking checkpoint as complete\", e);\n+            dirsListener.allDisksFull();\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public void checkpoint(Checkpoint checkpoint) {\n+        try {\n+            checkpoint = ledgerStorage.checkpoint(checkpoint);\n+        } catch (NoWritableLedgerDirException e) {\n+            LOG.error(\"No writeable ledger directories\", e);\n+            dirsListener.allDisksFull();\n+            return;\n+        } catch (IOException e) {\n+            LOG.error(\"Exception flushing ledgers\", e);\n+            return;\n+        }\n+\n+        try {\n+            checkpointSource.checkpointComplete(checkpoint, true);\n+        } catch (IOException e) {\n+            LOG.error(\"Exception marking checkpoint as complete\", e);\n+            dirsListener.allDisksFull();\n+        }\n+    }\n+\n+    private Object suspensionLock = new Object();\n+    private boolean suspended = false;\n+\n+    /**\n+     * Suspend sync thread. (for testing)\n+     */\n+    @VisibleForTesting\n+    public void suspendSync() {\n+        synchronized(suspensionLock) {\n+            suspended = true;\n+        }\n+    }\n+\n+    /**\n+     * Resume sync thread. (for testing)\n+     */\n+    @VisibleForTesting\n+    public void resumeSync() {\n+        synchronized(suspensionLock) {\n+            suspended = false;\n+            suspensionLock.notify();\n+        }\n+    }\n+\n+    // shutdown sync thread\n+    void shutdown() throws InterruptedException {\n+        LOG.info(\"Shutting down SyncThread\");\n+        executor.submit(new Runnable() {\n+                public void run() {\n+                    try {\n+                        flush();\n+                    } catch (Throwable t) {\n+                        LOG.error(\"Exception flushing ledgers at shutdown\", t);\n+                    }\n+                }\n+            });\n+        executor.shutdown();\n+        long start = MathUtils.now();\n+        while (!executor.awaitTermination(5, TimeUnit.MINUTES)) {\n+            long now = MathUtils.now();\n+            LOG.info(\"SyncThread taking a long time to shutdown. Has taken {}\"\n+                    + \" seconds so far\", now - start);\n+        }\n+    }\n+}"},{"sha":"d3f17284bc8efd4b188ef3b5c6c41fbcc6e87192","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -136,4 +136,16 @@ void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n          */\n         void recoverComplete(int rc, Object ctx);\n     }\n+    \n+    public interface IsClosedCallback {\n+        /**\n+         * Callback definition for isClosed operation\n+         *\n+         * @param rc\n+         *          return code\n+         * @param isClosed\n+         *          true if ledger is closed\n+         */\n+        void isClosedComplete(int rc, boolean isClosed, Object ctx);\n+    }\n }"},{"sha":"c5be32d543da38655f09cff31a15cfe124e73e4f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":40,"deletions":2,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -88,8 +88,14 @@ public static BKException create(int code) {\n             return new BKUnclosedFragmentException();\n         case Code.WriteOnReadOnlyBookieException:\n             return new BKWriteOnReadOnlyBookieException();\n-        default:\n+        case Code.ReplicationException:\n+            return new BKReplicationException();\n+        case Code.ClientClosedException:\n+            return new BKClientClosedException();\n+        case Code.IllegalOpException:\n             return new BKIllegalOpException();\n+        default:\n+            return new BKUnexpectedConditionException();\n         }\n     }\n \n@@ -117,12 +123,19 @@ public static BKException create(int code) {\n         int ProtocolVersionException = -16;\n         int MetadataVersionException = -17;\n         int MetaStoreException = -18;\n+        int ClientClosedException = -19;\n \n         int IllegalOpException = -100;\n         int LedgerFencedException = -101;\n         int UnauthorizedAccessException = -102;\n         int UnclosedFragmentException = -103;\n         int WriteOnReadOnlyBookieException = -104;\n+\n+        // generic exception code used to propagate in replication pipeline\n+        int ReplicationException = -200;\n+\n+        // For all unexpected error conditions\n+        int UnexpectedConditionException = -999;\n     }\n \n     public void setCode(int code) {\n@@ -181,8 +194,14 @@ public static String getMessage(int code) {\n             return \"Attempting to use an unclosed fragment; This is not safe\";\n         case Code.WriteOnReadOnlyBookieException:\n             return \"Attempting to write on ReadOnly bookie\";\n-        default:\n+        case Code.ReplicationException:\n+            return \"Errors in replication pipeline\";\n+        case Code.ClientClosedException:\n+            return \"BookKeeper client is closed\";\n+        case Code.IllegalOpException:\n             return \"Invalid operation\";\n+        default:\n+            return \"Unexpected condition\";\n         }\n     }\n \n@@ -228,6 +247,12 @@ public BKIllegalOpException() {\n         }\n     }\n \n+    public static class BKUnexpectedConditionException extends BKException {\n+        public BKUnexpectedConditionException() {\n+            super(Code.UnexpectedConditionException);\n+        }\n+    }\n+\n     public static class BKNotEnoughBookiesException extends BKException {\n         public BKNotEnoughBookiesException() {\n             super(Code.NotEnoughBookiesException);\n@@ -323,4 +348,17 @@ public BKWriteOnReadOnlyBookieException() {\n             super(Code.WriteOnReadOnlyBookieException);\n         }\n     }\n+\n+    public static class BKReplicationException extends BKException {\n+        public BKReplicationException() {\n+            super(Code.ReplicationException);\n+        }\n+    }\n+\n+    public static class BKClientClosedException extends BKException {\n+        public BKClientClosedException() {\n+            super(Code.ClientClosedException);\n+        }\n+    }\n+\n }"},{"sha":"49d8e5915d762dc2971d70dbf28517ffbe705e10","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":321,"deletions":59,"changes":380,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -25,25 +25,35 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n-import org.apache.bookkeeper.client.BKException.Code;\n+import org.apache.bookkeeper.client.AsyncCallback.IsClosedCallback;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.meta.CleanupLedgerManager;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookieClient;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.commons.configuration.ConfigurationException;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n /**\n  * BookKeeper client. We assume there is one single writer to a ledger at any\n  * time.\n@@ -62,10 +72,16 @@\n     static final Logger LOG = LoggerFactory.getLogger(BookKeeper.class);\n \n     final ZooKeeper zk;\n-    final CountDownLatch connectLatch = new CountDownLatch(1);\n-    final static int zkConnectTimeoutMs = 5000;\n     final ClientSocketChannelFactory channelFactory;\n \n+    // The stats logger for this client.\n+    private final StatsLogger statsLogger;\n+    private OpStatsLogger createOpLogger;\n+    private OpStatsLogger openOpLogger;\n+    private OpStatsLogger deleteOpLogger;\n+    private OpStatsLogger readOpLogger;\n+    private OpStatsLogger addOpLogger;\n+\n     // whether the socket factory is one we created, or is owned by whoever\n     // instantiated us\n     boolean ownChannelFactory = false;\n@@ -83,11 +99,70 @@\n     final LedgerManagerFactory ledgerManagerFactory;\n     final LedgerManager ledgerManager;\n \n+    // Ensemble Placement Policy\n+    final EnsemblePlacementPolicy placementPolicy;\n+\n     final ClientConfiguration conf;\n \n-    interface ZKConnectCallback {\n-        public void connected();\n-        public void connectionFailed(int code);\n+    // Close State\n+    boolean closed = false;\n+    final ReentrantReadWriteLock closeLock = new ReentrantReadWriteLock();\n+\n+    public static class Builder {\n+        final ClientConfiguration conf;\n+\n+        ZooKeeper zk = null;\n+        ClientSocketChannelFactory channelFactory = null;\n+        StatsLogger statsLogger = NullStatsLogger.INSTANCE;\n+\n+        Builder(ClientConfiguration conf) {\n+            this.conf = conf;\n+        }\n+\n+        public Builder setChannelFactory(ClientSocketChannelFactory f) {\n+            channelFactory = f;\n+            return this;\n+        }\n+\n+        public Builder setZookeeper(ZooKeeper zk) {\n+            this.zk = zk;\n+            return this;\n+        }\n+\n+        public Builder setStatsLogger(StatsLogger statsLogger) {\n+            this.statsLogger = statsLogger;\n+            return this;\n+        }\n+\n+        public BookKeeper build() throws IOException, InterruptedException, KeeperException {\n+            boolean ownZK = false;\n+            boolean ownChannelFactory = false;\n+            if (zk == null) {\n+                ownZK = true;\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n+                w.waitForConnection();\n+            }\n+            if (channelFactory == null) {\n+                ownChannelFactory = true;\n+                ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n+                channelFactory = new NioClientSocketChannelFactory(\n+                        Executors.newCachedThreadPool(tfb.setNameFormat(\n+                                                              \"BookKeeper-NIOBoss-%d\").build()),\n+                        Executors.newCachedThreadPool(tfb.setNameFormat(\n+                                                              \"BookKeeper-NIOWorker-%d\").build()));\n+            }\n+\n+            BookKeeper bk = new BookKeeper(conf, zk, channelFactory, statsLogger);\n+            bk.ownZKHandle = ownZK;\n+            bk.ownChannelFactory = ownChannelFactory;\n+\n+            return bk;\n+        }\n+    }\n+\n+    public static Builder forConfig(final ClientConfiguration conf) {\n+        return new Builder(conf);\n     }\n \n     /**\n@@ -110,7 +185,7 @@ public BookKeeper(String servers) throws IOException, InterruptedException,\n \n     /**\n      * Create a bookkeeper client using a configuration object.\n-     * A zookeeper client and a client socket factory will be \n+     * A zookeeper client and a client socket factory will be\n      * instantiated as part of this constructor.\n      *\n      * @param conf\n@@ -125,22 +200,31 @@ public BookKeeper(final ClientConfiguration conf)\n         ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n         this.zk = ZkUtils\n                 .createConnectedZookeeperClient(conf.getZkServers(), w);\n-\n-        this.channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n-                                                                Executors.newCachedThreadPool());\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n-\n-        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n+        this.channelFactory = new NioClientSocketChannelFactory(\n+                Executors.newCachedThreadPool(tfb.setNameFormat(\n+                        \"BookKeeper-NIOBoss-%d\").build()),\n+                Executors.newCachedThreadPool(tfb.setNameFormat(\n+                        \"BookKeeper-NIOWorker-%d\").build()));\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor(tfb\n+                .setNameFormat(\"BookKeeperClientScheduler-%d\").build());\n+        this.statsLogger = NullStatsLogger.INSTANCE;\n+        initOpLoggers(this.statsLogger);\n+        // initialize the ensemble placement\n+        this.placementPolicy = initializeEnsemblePlacementPolicy(conf);\n+\n+        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads(),\n+                \"BookKeeperClientWorker\");\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        bookieWatcher = new BookieWatcher(conf, scheduler, this);\n+        bookieWatcher = new BookieWatcher(conf, scheduler, placementPolicy, this);\n         bookieWatcher.readBookiesBlocking();\n \n         ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, zk);\n-        ledgerManager = ledgerManagerFactory.newLedgerManager();\n+        ledgerManager = new CleanupLedgerManager(ledgerManagerFactory.newLedgerManager());\n \n         ownChannelFactory = true;\n         ownZKHandle = true;\n-     }\n+    }\n \n     /**\n      * Create a bookkeeper client but use the passed in zookeeper client instead\n@@ -157,9 +241,13 @@ public BookKeeper(final ClientConfiguration conf)\n      * @throws KeeperException\n      */\n     public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n-        throws IOException, InterruptedException, KeeperException {\n-        this(conf, zk, new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n-                Executors.newCachedThreadPool()));\n+            throws IOException, InterruptedException, KeeperException {\n+\n+        this(conf, zk, new NioClientSocketChannelFactory(\n+                Executors.newCachedThreadPool(new ThreadFactoryBuilder()\n+                        .setNameFormat(\"BookKeeper-NIOBoss-%d\").build()),\n+                Executors.newCachedThreadPool(new ThreadFactoryBuilder()\n+                        .setNameFormat(\"BookKeeper-NIOWorker-%d\").build())));\n         ownChannelFactory = true;\n     }\n \n@@ -182,6 +270,15 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n      */\n     public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFactory channelFactory)\n             throws IOException, InterruptedException, KeeperException {\n+        this(conf, zk, channelFactory, NullStatsLogger.INSTANCE);\n+    }\n+\n+    /**\n+     * Contructor for use with the builder. Other constructors also use it.\n+     */\n+    private BookKeeper(ClientConfiguration conf, ZooKeeper zk,\n+                       ClientSocketChannelFactory channelFactory, StatsLogger statsLogger)\n+            throws IOException, InterruptedException, KeeperException {\n         if (zk == null || channelFactory == null) {\n             throw new NullPointerException();\n         }\n@@ -192,15 +289,46 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFac\n         this.conf = conf;\n         this.zk = zk;\n         this.channelFactory = channelFactory;\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n-\n-        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n-        bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        bookieWatcher = new BookieWatcher(conf, scheduler, this);\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder().setNameFormat(\n+                \"BookKeeperClientScheduler-%d\");\n+        this.scheduler = Executors\n+                .newSingleThreadScheduledExecutor(tfb.build());\n+        this.statsLogger = statsLogger.scope(BookKeeperClientStats.CLIENT_SCOPE);\n+        initOpLoggers(this.statsLogger);\n+\n+        // initialize the ensemble placement\n+        this.placementPolicy = initializeEnsemblePlacementPolicy(conf);\n+\n+        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads(),\n+                \"BookKeeperClientWorker\");\n+        bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool, statsLogger);\n+        bookieWatcher = new BookieWatcher(conf, scheduler, placementPolicy, this);\n         bookieWatcher.readBookiesBlocking();\n \n         ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, zk);\n-        ledgerManager = ledgerManagerFactory.newLedgerManager();\n+        ledgerManager = new CleanupLedgerManager(ledgerManagerFactory.newLedgerManager());\n+    }\n+\n+    private EnsemblePlacementPolicy initializeEnsemblePlacementPolicy(ClientConfiguration conf)\n+        throws IOException {\n+        try {\n+            Class<? extends EnsemblePlacementPolicy> policyCls = conf.getEnsemblePlacementPolicy();\n+            return ReflectionUtils.newInstance(policyCls).initialize(conf);\n+        } catch (ConfigurationException e) {\n+            throw new IOException(\"Failed to initialize ensemble placement policy : \", e);\n+        }\n+    }\n+\n+    int getReturnRc(int rc) {\n+        if (BKException.Code.OK == rc) {\n+            return rc;\n+        } else {\n+            if (bookieClient.isClosed()) {\n+                return BKException.Code.ClientClosedException;\n+            } else {\n+                return rc;\n+            }\n+        }\n     }\n \n     LedgerManager getLedgerManager() {\n@@ -216,7 +344,7 @@ LedgerManager getLedgerManager() {\n      */\n     public enum DigestType {\n         MAC, CRC32\n-    };\n+    }\n \n     ZooKeeper getZkHandle() {\n         return zk;\n@@ -226,6 +354,10 @@ protected ClientConfiguration getConf() {\n         return conf;\n     }\n \n+    StatsLogger getStatsLogger() {\n+        return statsLogger;\n+    }\n+\n     /**\n      * Get the BookieClient, currently used for doing bookie recovery.\n      *\n@@ -305,9 +437,18 @@ public void asyncCreateLedger(final int ensSize,\n         if (writeQuorumSize < ackQuorumSize) {\n             throw new IllegalArgumentException(\"Write quorum must be larger than ack quorum\");\n         }\n-        new LedgerCreateOp(BookKeeper.this, ensSize, writeQuorumSize,\n-                           ackQuorumSize, digestType, passwd, cb, ctx)\n-            .initiate();\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                cb.createComplete(BKException.Code.ClientClosedException, null, ctx);\n+                return;\n+            }\n+            new LedgerCreateOp(BookKeeper.this, ensSize, writeQuorumSize,\n+                               ackQuorumSize, digestType, passwd, cb, ctx)\n+                .initiate();\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n     }\n \n \n@@ -329,7 +470,7 @@ public LedgerHandle createLedger(DigestType digestType, byte passwd[])\n \n     /**\n      * Synchronous call to create ledger. Parameters match those of\n-     * {@link #asyncCreateLedger(int, int, DigestType, byte[], \n+     * {@link #asyncCreateLedger(int, int, DigestType, byte[],\n      *                           AsyncCallback.CreateCallback, Object)}\n      *\n      * @param ensSize\n@@ -375,29 +516,32 @@ public LedgerHandle createLedger(int ensSize, int writeQuorumSize, int ackQuorum\n          * Wait\n          */\n         counter.block(0);\n-        if (counter.getLh() == null) {\n-            LOG.error(\"ZooKeeper error: \" + counter.getrc());\n-            throw BKException.create(Code.ZKException);\n+        if (counter.getrc() != BKException.Code.OK) {\n+            LOG.error(\"Error while creating ledger : {}\", counter.getrc());\n+            throw BKException.create(counter.getrc());\n+        } else if (counter.getLh() == null) {\n+            LOG.error(\"Unexpected condition : no ledger handle returned for a success ledger creation\");\n+            throw BKException.create(BKException.Code.UnexpectedConditionException);\n         }\n \n         return counter.getLh();\n     }\n \n     /**\n      * Open existing ledger asynchronously for reading.\n-     * \n-     * Opening a ledger with this method invokes fencing and recovery on the ledger \n-     * if the ledger has not been closed. Fencing will block all other clients from \n-     * writing to the ledger. Recovery will make sure that the ledger is closed \n-     * before reading from it. \n      *\n-     * Recovery also makes sure that any entries which reached one bookie, but not a \n+     * Opening a ledger with this method invokes fencing and recovery on the ledger\n+     * if the ledger has not been closed. Fencing will block all other clients from\n+     * writing to the ledger. Recovery will make sure that the ledger is closed\n+     * before reading from it.\n+     *\n+     * Recovery also makes sure that any entries which reached one bookie, but not a\n      * quorum, will be replicated to a quorum of bookies. This occurs in cases were\n      * the writer of a ledger crashes after sending a write request to one bookie but\n-     * before being able to send it to the rest of the bookies in the quorum. \n+     * before being able to send it to the rest of the bookies in the quorum.\n      *\n      * If the ledger is already closed, neither fencing nor recovery will be applied.\n-     * \n+     *\n      * @see LedgerHandle#asyncClose\n      *\n      * @param lId\n@@ -411,7 +555,16 @@ public LedgerHandle createLedger(int ensSize, int writeQuorumSize, int ackQuorum\n      */\n     public void asyncOpenLedger(final long lId, final DigestType digestType, final byte passwd[],\n                                 final OpenCallback cb, final Object ctx) {\n-        new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                cb.openComplete(BKException.Code.ClientClosedException, null, ctx);\n+                return;\n+            }\n+            new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n     }\n \n     /**\n@@ -421,14 +574,14 @@ public void asyncOpenLedger(final long lId, final DigestType digestType, final b\n      * unsealed forever if there is no external mechanism to detect the failure\n      * of the writer and the ledger is not open in a safe manner, invoking the\n      * recovery procedure.\n-     * \n+     *\n      * Opening a ledger without recovery does not fence the ledger. As such, other\n-     * clients can continue to write to the ledger. \n+     * clients can continue to write to the ledger.\n      *\n-     * This method returns a read only ledger handle. It will not be possible \n-     * to add entries to the ledger. Any attempt to add entries will throw an \n+     * This method returns a read only ledger handle. It will not be possible\n+     * to add entries to the ledger. Any attempt to add entries will throw an\n      * exception.\n-     * \n+     *\n      * Reads from the returned ledger will only be able to read entries up until\n      * the lastConfirmedEntry at the point in time at which the ledger was opened.\n      *\n@@ -443,7 +596,16 @@ public void asyncOpenLedger(final long lId, final DigestType digestType, final b\n      */\n     public void asyncOpenLedgerNoRecovery(final long lId, final DigestType digestType, final byte passwd[],\n                                           final OpenCallback cb, final Object ctx) {\n-        new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                cb.openComplete(BKException.Code.ClientClosedException, null, ctx);\n+                return;\n+            }\n+            new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n     }\n \n \n@@ -529,7 +691,16 @@ public LedgerHandle openLedgerNoRecovery(long lId, DigestType digestType, byte p\n      *            optional control object\n      */\n     public void asyncDeleteLedger(final long lId, final DeleteCallback cb, final Object ctx) {\n-        new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                cb.deleteComplete(BKException.Code.ClientClosedException, ctx);\n+                return;\n+            }\n+            new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n     }\n \n \n@@ -556,28 +727,105 @@ public void deleteLedger(long lId) throws InterruptedException, BKException {\n         }\n     }\n \n+    /**\n+     * Check asynchronously whether the ledger with identifier <i>lId</i>\n+     * has been closed.\n+     *\n+     * @param lId   ledger identifier\n+     * @param cb    callback method\n+     */\n+    public void asyncIsClosed(long lId, final IsClosedCallback cb, final Object ctx){\n+        ledgerManager.readLedgerMetadata(lId, new GenericCallback<LedgerMetadata>(){\n+            public void operationComplete(int rc, LedgerMetadata lm){\n+                if (rc == BKException.Code.OK) {\n+                    cb.isClosedComplete(rc, lm.isClosed(), ctx);\n+                } else {\n+                    cb.isClosedComplete(rc, false, ctx);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Check whether the ledger with identifier <i>lId</i>\n+     * has been closed.\n+     *\n+     * @param lId\n+     * @return boolean true if ledger has been closed\n+     * @throws BKException\n+     */\n+    public boolean isClosed(long lId)\n+    throws BKException, InterruptedException {\n+        final class Result {\n+            int rc;\n+            boolean isClosed;\n+            final CountDownLatch notifier = new CountDownLatch(1);\n+        }\n+\n+        final Result result = new Result();\n+\n+        final IsClosedCallback cb = new IsClosedCallback(){\n+            public void isClosedComplete(int rc, boolean isClosed, Object ctx){\n+                    result.isClosed = isClosed;\n+                    result.rc = rc;\n+                    result.notifier.countDown();\n+            }\n+        };\n+\n+        /*\n+         * Call asynchronous version of isClosed\n+         */\n+        asyncIsClosed(lId, cb, null);\n+\n+        /*\n+         * Wait for callback\n+         */\n+        result.notifier.await();\n+\n+        if (result.rc != BKException.Code.OK) {\n+            throw BKException.create(result.rc);\n+        }\n+\n+        return result.isClosed;\n+    }\n+\n     /**\n      * Shuts down client.\n      *\n      */\n     public void close() throws InterruptedException, BKException {\n-        scheduler.shutdown();\n-        if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) {\n-            LOG.warn(\"The scheduler did not shutdown cleanly\");\n-        }\n-        mainWorkerPool.shutdown();\n-        if (!mainWorkerPool.awaitTermination(10, TimeUnit.SECONDS)) {\n-            LOG.warn(\"The mainWorkerPool did not shutdown cleanly\");\n+        closeLock.writeLock().lock();\n+        try {\n+            if (closed) {\n+                return;\n+            }\n+            closed = true;\n+        } finally {\n+            closeLock.writeLock().unlock();\n         }\n \n+        // Close bookie client so all pending bookie requests would be failed\n+        // which will reject any incoming bookie requests.\n         bookieClient.close();\n         try {\n+            // Close ledger manage so all pending metadata requests would be failed\n+            // which will reject any incoming metadata requests.\n             ledgerManager.close();\n             ledgerManagerFactory.uninitialize();\n         } catch (IOException ie) {\n             LOG.error(\"Failed to close ledger manager : \", ie);\n         }\n \n+        // Close the scheduler\n+        scheduler.shutdown();\n+        if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) {\n+            LOG.warn(\"The scheduler did not shutdown cleanly\");\n+        }\n+        mainWorkerPool.shutdown();\n+        if (!mainWorkerPool.awaitTermination(10, TimeUnit.SECONDS)) {\n+            LOG.warn(\"The mainWorkerPool did not shutdown cleanly\");\n+        }\n+\n         if (ownChannelFactory) {\n             channelFactory.releaseExternalResources();\n         }\n@@ -597,6 +845,7 @@ public void close() throws InterruptedException, BKException {\n          * @param ctx\n          *          optional control object\n          */\n+        @Override\n         public void createComplete(int rc, LedgerHandle lh, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setLh(lh);\n@@ -616,12 +865,13 @@ public void createComplete(int rc, LedgerHandle lh, Object ctx) {\n          * @param ctx\n          *          optional control object\n          */\n+        @Override\n         public void openComplete(int rc, LedgerHandle lh, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setLh(lh);\n-            \n+\n             LOG.debug(\"Open complete: {}\", rc);\n-            \n+\n             counter.setrc(rc);\n             counter.dec();\n         }\n@@ -636,13 +886,25 @@ public void openComplete(int rc, LedgerHandle lh, Object ctx) {\n          * @param ctx\n          *            optional control object\n          */\n+        @Override\n         public void deleteComplete(int rc, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setrc(rc);\n             counter.dec();\n         }\n     }\n \n+    private final void initOpLoggers(StatsLogger stats) {\n+        createOpLogger = stats.getOpStatsLogger(BookKeeperClientStats.CREATE_OP);\n+        deleteOpLogger = stats.getOpStatsLogger(BookKeeperClientStats.DELETE_OP);\n+        openOpLogger = stats.getOpStatsLogger(BookKeeperClientStats.OPEN_OP);\n+        readOpLogger = stats.getOpStatsLogger(BookKeeperClientStats.READ_OP);\n+        addOpLogger = stats.getOpStatsLogger(BookKeeperClientStats.ADD_OP);\n+    }\n \n-\n+    OpStatsLogger getCreateOpLogger() { return createOpLogger; }\n+    OpStatsLogger getOpenOpLogger() { return openOpLogger; }\n+    OpStatsLogger getDeleteOpLogger() { return deleteOpLogger; }\n+    OpStatsLogger getReadOpLogger() { return readOpLogger; }\n+    OpStatsLogger getAddOpLogger() { return addOpLogger; }\n }"},{"sha":"18a801cba914b2f6ce25af904a6d4d44ce9e0b2f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":181,"deletions":57,"changes":238,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -20,21 +20,13 @@\n  */\n package org.apache.bookkeeper.client;\n \n-import java.io.IOException;\n-import java.net.InetSocketAddress;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Random;\n-import java.util.UUID;\n-\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.AsyncCallback.RecoverCallback;\n import org.apache.bookkeeper.client.BookKeeper.SyncOpenCallback;\n import org.apache.bookkeeper.client.LedgerFragmentReplicator.SingleFragmentCallback;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n@@ -44,26 +36,44 @@\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZKUtil;\n-import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.ZKUtil;\n import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Random;\n+import java.util.UUID;\n+\n+import static com.google.common.base.Charsets.UTF_8;\n+\n /**\n  * Admin client for BookKeeper clusters\n  */\n public class BookKeeperAdmin {\n-    private static Logger LOG = LoggerFactory.getLogger(BookKeeperAdmin.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(BookKeeperAdmin.class);\n     // ZK client instance\n     private ZooKeeper zk;\n+    private final boolean ownsZK;\n+\n     // ZK ledgers related String constants\n     private final String bookiesPath;\n \n     // BookKeeper client instance\n     private BookKeeper bkc;\n-    \n+    private final boolean ownsBK;\n+\n     // LedgerFragmentReplicator instance\n     private LedgerFragmentReplicator lfr;\n \n@@ -118,23 +128,29 @@ public BookKeeperAdmin(ClientConfiguration conf) throws IOException, Interrupted\n         // Create the ZooKeeper client instance\n         ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n         zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n+        ownsZK = true;\n+\n         // Create the bookie path\n         bookiesPath = conf.getZkAvailableBookiesPath();\n         // Create the BookKeeper client instance\n         bkc = new BookKeeper(conf, zk);\n+        ownsBK = true;\n+\n         this.lfr = new LedgerFragmentReplicator(bkc);\n     }\n \n     /**\n      * Constructor that takes in a BookKeeper instance . This will be useful,\n      * when users already has bk instance ready.\n-     * \n+     *\n      * @param bkc\n      *            - bookkeeper instance\n      */\n     public BookKeeperAdmin(final BookKeeper bkc) {\n         this.bkc = bkc;\n+        ownsBK = false;\n         this.zk = bkc.zk;\n+        ownsZK = false;\n         this.bookiesPath = bkc.getConf().getZkAvailableBookiesPath();\n         this.lfr = new LedgerFragmentReplicator(bkc);\n     }\n@@ -147,8 +163,43 @@ public BookKeeperAdmin(final BookKeeper bkc) {\n      *             class uses.\n      */\n     public void close() throws InterruptedException, BKException {\n-        bkc.close();\n-        zk.close();\n+        if (ownsBK) {\n+            bkc.close();\n+        }\n+        if (ownsZK) {\n+            zk.close();\n+        }\n+    }\n+\n+    /**\n+     * Get a list of the available bookies.\n+     *\n+     * @return a collection of bookie addresses\n+     */\n+    public Collection<BookieSocketAddress> getAvailableBookies()\n+            throws BKException {\n+        return bkc.bookieWatcher.getBookies();\n+    }\n+\n+    /**\n+     * Get a list of readonly bookies\n+     *\n+     * @return a collection of bookie addresses\n+     */\n+    public Collection<BookieSocketAddress> getReadOnlyBookies() {\n+        return bkc.bookieWatcher.getReadOnlyBookies();\n+    }\n+\n+    /**\n+     * Notify when the available list of bookies changes.\n+     * This is a one-shot notification. To receive subsequent notifications\n+     * the listener must be registered again.\n+     *\n+     * @param listener the listener to notify\n+     */\n+    public void notifyBookiesChanged(final BookiesListener listener)\n+            throws BKException {\n+        bkc.bookieWatcher.notifyBookiesChanged(listener);\n     }\n \n     /**\n@@ -167,12 +218,12 @@ public void close() throws InterruptedException, BKException {\n     public void asyncOpenLedger(final long lId, final OpenCallback cb, final Object ctx) {\n         new LedgerOpenOp(bkc, lId, cb, ctx).initiate();\n     }\n-    \n+\n     /**\n      * Open a ledger as an administrator. This means that no digest password\n      * checks are done. Otherwise, the call is identical to\n      * BookKeeper#openLedger\n-     * \n+     *\n      * @param lId\n      *            - ledger identifier\n      * @see BookKeeper#openLedger\n@@ -210,12 +261,12 @@ public LedgerHandle openLedger(final long lId) throws InterruptedException,\n     public void asyncOpenLedgerNoRecovery(final long lId, final OpenCallback cb, final Object ctx) {\n         new LedgerOpenOp(bkc, lId, cb, ctx).initiateWithoutRecovery();\n     }\n-    \n+\n     /**\n      * Open a ledger as an administrator without recovering the ledger. This\n      * means that no digest password checks are done. Otherwise, the call is\n      * identical to BookKeeper#openLedgerNoRecovery\n-     * \n+     *\n      * @param lId\n      *            ledger identifier\n      * @see BookKeeper#openLedgerNoRecovery\n@@ -266,7 +317,7 @@ public SyncObject() {\n      *            Optional destination bookie that if passed, we will copy all\n      *            of the ledger fragments from the source bookie over to it.\n      */\n-    public void recoverBookieData(final InetSocketAddress bookieSrc, final InetSocketAddress bookieDest)\n+    public void recoverBookieData(final BookieSocketAddress bookieSrc, final BookieSocketAddress bookieDest)\n             throws InterruptedException, BKException {\n         SyncObject sync = new SyncObject();\n         // Call the async method to recover bookie data.\n@@ -317,7 +368,7 @@ public void recoverComplete(int rc, Object ctx) {\n      * @param context\n      *            Context for the RecoverCallback to call.\n      */\n-    public void asyncRecoverBookieData(final InetSocketAddress bookieSrc, final InetSocketAddress bookieDest,\n+    public void asyncRecoverBookieData(final BookieSocketAddress bookieSrc, final BookieSocketAddress bookieDest,\n                                        final RecoverCallback cb, final Object context) {\n         // Sync ZK to make sure we're reading the latest bookie data.\n         zk.sync(bookiesPath, new AsyncCallback.VoidCallback() {\n@@ -329,7 +380,9 @@ public void processResult(int rc, String path, Object ctx) {\n                     return;\n                 }\n                 getAvailableBookies(bookieSrc, bookieDest, cb, context);\n-            };\n+            }\n+\n+            ;\n         }, null);\n     }\n \n@@ -352,9 +405,9 @@ public void processResult(int rc, String path, Object ctx) {\n      * @param context\n      *            Context for the RecoverCallback to call.\n      */\n-    private void getAvailableBookies(final InetSocketAddress bookieSrc, final InetSocketAddress bookieDest,\n+    private void getAvailableBookies(final BookieSocketAddress bookieSrc, final BookieSocketAddress bookieDest,\n                                      final RecoverCallback cb, final Object context) {\n-        final List<InetSocketAddress> availableBookies = new LinkedList<InetSocketAddress>();\n+        final List<BookieSocketAddress> availableBookies = new LinkedList<BookieSocketAddress>();\n         if (bookieDest != null) {\n             availableBookies.add(bookieDest);\n             // Now poll ZK to get the active ledgers\n@@ -375,13 +428,15 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n                             // exclude the readonly node from available bookies.\n                             continue;\n                         }\n-                        String parts[] = bookieNode.split(BookKeeperConstants.COLON);\n-                        if (parts.length < 2) {\n+                        BookieSocketAddress addr;\n+                        try {\n+                            addr = new BookieSocketAddress(bookieNode);\n+                        } catch (UnknownHostException nhe) {\n                             LOG.error(\"Bookie Node retrieved from ZK has invalid name format: \" + bookieNode);\n                             cb.recoverComplete(BKException.Code.ZKException, context);\n                             return;\n                         }\n-                        availableBookies.add(new InetSocketAddress(parts[0], Integer.parseInt(parts[1])));\n+                        availableBookies.add(addr);\n                     }\n                     // Now poll ZK to get the active ledgers\n                     getActiveLedgers(bookieSrc, null, cb, context, availableBookies);\n@@ -413,8 +468,8 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n      *            single bookie server if the user explicitly chose a bookie\n      *            server to replicate data to.\n      */\n-    private void getActiveLedgers(final InetSocketAddress bookieSrc, final InetSocketAddress bookieDest,\n-                                  final RecoverCallback cb, final Object context, final List<InetSocketAddress> availableBookies) {\n+    private void getActiveLedgers(final BookieSocketAddress bookieSrc, final BookieSocketAddress bookieDest,\n+            final RecoverCallback cb, final Object context, final List<BookieSocketAddress> availableBookies) {\n         // Wrapper class around the RecoverCallback so it can be used\n         // as the final VoidCallback to process ledgers\n         class RecoverCallbackWrapper implements AsyncCallback.VoidCallback {\n@@ -426,7 +481,7 @@ private void getActiveLedgers(final InetSocketAddress bookieSrc, final InetSocke\n \n             @Override\n             public void processResult(int rc, String path, Object ctx) {\n-                cb.recoverComplete(rc, ctx);\n+                cb.recoverComplete(bkc.getReturnRc(rc), ctx);\n             }\n         }\n \n@@ -437,18 +492,18 @@ public void process(Long ledgerId, AsyncCallback.VoidCallback iterCallback) {\n             }\n         };\n         bkc.getLedgerManager().asyncProcessLedgers(\n-            ledgerProcessor, new RecoverCallbackWrapper(cb),\n-            context, BKException.Code.OK, BKException.Code.LedgerRecoveryException);\n+                ledgerProcessor, new RecoverCallbackWrapper(cb),\n+                context, BKException.Code.OK, BKException.Code.LedgerRecoveryException);\n     }\n \n     /**\n      * Get a new random bookie, but ensure that it isn't one that is already\n      * in the ensemble for the ledger.\n      */\n-    private InetSocketAddress getNewBookie(final List<InetSocketAddress> bookiesAlreadyInEnsemble, \n-                                           final List<InetSocketAddress> availableBookies) \n+    private BookieSocketAddress getNewBookie(final List<BookieSocketAddress> bookiesAlreadyInEnsemble,\n+            final List<BookieSocketAddress> availableBookies)\n             throws BKException.BKNotEnoughBookiesException {\n-        ArrayList<InetSocketAddress> candidates = new ArrayList<InetSocketAddress>();\n+        ArrayList<BookieSocketAddress> candidates = new ArrayList<BookieSocketAddress>();\n         candidates.addAll(availableBookies);\n         candidates.removeAll(bookiesAlreadyInEnsemble);\n         if (candidates.size() == 0) {\n@@ -475,8 +530,8 @@ private InetSocketAddress getNewBookie(final List<InetSocketAddress> bookiesAlre\n      *            single bookie server if the user explicitly chose a bookie\n      *            server to replicate data to.\n      */\n-    private void recoverLedger(final InetSocketAddress bookieSrc, final long lId,\n-                               final AsyncCallback.VoidCallback ledgerIterCb, final List<InetSocketAddress> availableBookies) {\n+    private void recoverLedger(final BookieSocketAddress bookieSrc, final long lId,\n+            final AsyncCallback.VoidCallback ledgerIterCb, final List<BookieSocketAddress> availableBookies) {\n         LOG.debug(\"Recovering ledger : {}\", lId);\n \n         asyncOpenLedgerNoRecovery(lId, new OpenCallback() {\n@@ -492,7 +547,7 @@ public void openComplete(int rc, final LedgerHandle lh, Object ctx) {\n                 if (!lm.isClosed() &&\n                     lm.getEnsembles().size() > 0) {\n                     Long lastKey = lm.getEnsembles().lastKey();\n-                    ArrayList<InetSocketAddress> lastEnsemble = lm.getEnsembles().get(lastKey);\n+                    ArrayList<BookieSocketAddress> lastEnsemble = lm.getEnsembles().get(lastKey);\n                     // the original write has not removed faulty bookie from\n                     // current ledger ensemble. to avoid data loss issue in\n                     // the case of concurrent updates to the ensemble composition,\n@@ -536,7 +591,7 @@ public void openComplete(int newrc, final LedgerHandle newlh, Object newctx) {\n                  */\n                 Map<Long, Long> ledgerFragmentsRange = new HashMap<Long, Long>();\n                 Long curEntryId = null;\n-                for (Map.Entry<Long, ArrayList<InetSocketAddress>> entry : lh.getLedgerMetadata().getEnsembles()\n+                for (Map.Entry<Long, ArrayList<BookieSocketAddress>> entry : lh.getLedgerMetadata().getEnsembles()\n                          .entrySet()) {\n                     if (curEntryId != null)\n                         ledgerFragmentsRange.put(curEntryId, entry.getKey() - 1);\n@@ -578,25 +633,26 @@ public void openComplete(int newrc, final LedgerHandle newlh, Object newctx) {\n                  */\n                 for (final Long startEntryId : ledgerFragmentsToRecover) {\n                     Long endEntryId = ledgerFragmentsRange.get(startEntryId);\n-                    InetSocketAddress newBookie = null;\n+                    BookieSocketAddress newBookie = null;\n                     try {\n                         newBookie = getNewBookie(lh.getLedgerMetadata().getEnsembles().get(startEntryId),\n                                                  availableBookies);\n                     } catch (BKException.BKNotEnoughBookiesException bke) {\n-                        ledgerFragmentsMcb.processResult(BKException.Code.NotEnoughBookiesException, \n+                        ledgerFragmentsMcb.processResult(BKException.Code.NotEnoughBookiesException,\n                                                          null, null);\n                         continue;\n                     }\n-                    \n+\n                     if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Replicating fragment from [\" + startEntryId \n+                        LOG.debug(\"Replicating fragment from [\" + startEntryId\n                                   + \",\" + endEntryId + \"] of ledger \" + lh.getId()\n                                   + \" to \" + newBookie);\n                     }\n                     try {\n                         LedgerFragmentReplicator.SingleFragmentCallback cb = new LedgerFragmentReplicator.SingleFragmentCallback(\n                                                                                ledgerFragmentsMcb, lh, startEntryId, bookieSrc, newBookie);\n-                        ArrayList<InetSocketAddress> currentEnsemble =  lh.getLedgerMetadata().getEnsemble(startEntryId);\n+                        ArrayList<BookieSocketAddress> currentEnsemble = lh.getLedgerMetadata().getEnsemble(\n+                                startEntryId);\n                         int bookieIndex = -1;\n                         if (null != currentEnsemble) {\n                             for (int i = 0; i < currentEnsemble.size(); i++) {\n@@ -622,10 +678,10 @@ public void openComplete(int newrc, final LedgerHandle newlh, Object newctx) {\n      * This method asynchronously recovers a ledger fragment which is a\n      * contiguous portion of a ledger that was stored in an ensemble that\n      * included the failed bookie.\n-     * \n+     *\n      * @param lh\n      *            - LedgerHandle for the ledger\n-     * @param lf\n+     * @param ledgerFragment\n      *            - LedgerFragment to replicate\n      * @param ledgerFragmentMcb\n      *            - MultiCallback to invoke once we've recovered the current\n@@ -637,13 +693,14 @@ public void openComplete(int newrc, final LedgerHandle newlh, Object newctx) {\n     private void asyncRecoverLedgerFragment(final LedgerHandle lh,\n             final LedgerFragment ledgerFragment,\n             final AsyncCallback.VoidCallback ledgerFragmentMcb,\n-            final InetSocketAddress newBookie) throws InterruptedException {\n+            final BookieSocketAddress newBookie)\n+            throws InterruptedException {\n         lfr.replicate(lh, ledgerFragment, ledgerFragmentMcb, newBookie);\n     }\n \n     /**\n      * Replicate the Ledger fragment to target Bookie passed.\n-     * \n+     *\n      * @param lh\n      *            - ledgerHandle\n      * @param ledgerFragment\n@@ -653,7 +710,7 @@ private void asyncRecoverLedgerFragment(final LedgerHandle lh,\n      */\n     public void replicateLedgerFragment(LedgerHandle lh,\n             final LedgerFragment ledgerFragment,\n-            final InetSocketAddress targetBookieAddress)\n+            final BookieSocketAddress targetBookieAddress)\n             throws InterruptedException, BKException {\n         SyncCounter syncCounter = new SyncCounter();\n         ResultCallBack resultCallBack = new ResultCallBack(syncCounter);\n@@ -664,7 +721,7 @@ public void replicateLedgerFragment(LedgerHandle lh,\n         asyncRecoverLedgerFragment(lh, ledgerFragment, cb, targetBookieAddress);\n         syncCounter.block(0);\n         if (syncCounter.getrc() != BKException.Code.OK) {\n-            throw BKException.create(syncCounter.getrc());\n+            throw BKException.create(bkc.getReturnRc(syncCounter.getrc()));\n         }\n     }\n \n@@ -685,7 +742,7 @@ public void processResult(int rc, String s, Object obj) {\n \n     /**\n      * Format the BookKeeper metadata in zookeeper\n-     * \n+     *\n      * @param isInteractive\n      *            Whether format should ask prompt for confirmation if old data\n      *            exists or not.\n@@ -708,12 +765,12 @@ public static boolean format(ClientConfiguration conf,\n \n             // Create ledgers root node if not exists\n             if (!ledgerRootExists) {\n-                zkc.create(conf.getZkLedgersRootPath(), \"\".getBytes(),\n+                zkc.create(conf.getZkLedgersRootPath(), \"\".getBytes(UTF_8),\n                         Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             }\n             // create available bookies node if not exists\n             if (!availableNodeExists) {\n-                zkc.create(conf.getZkAvailableBookiesPath(), \"\".getBytes(),\n+                zkc.create(conf.getZkAvailableBookiesPath(), \"\".getBytes(UTF_8),\n                         Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             }\n \n@@ -731,7 +788,9 @@ public static boolean format(ClientConfiguration conf,\n                 } else {\n                     // Confirm with the admin.\n                     confirm = IOUtils\n-                            .confirmPrompt(\"Are you sure to format bookkeeper metadata ?\");\n+                            .confirmPrompt(\"Ledger root already exists. \"\n+                                    +\"Are you sure to format bookkeeper metadata? \"\n+                                    +\"This may cause data loss.\");\n                 }\n                 if (!confirm) {\n                     LOG.error(\"BookKeeper metadata Format aborted!!\");\n@@ -761,7 +820,7 @@ public static boolean format(ClientConfiguration conf,\n             // create INSTANCEID\n             String instanceId = UUID.randomUUID().toString();\n             zkc.create(conf.getZkLedgersRootPath() + \"/\"\n-                    + BookKeeperConstants.INSTANCEID, instanceId.getBytes(),\n+                    + BookKeeperConstants.INSTANCEID, instanceId.getBytes(UTF_8),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n \n             LOG.info(\"Successfully formatted BookKeeper metadata\");\n@@ -775,4 +834,69 @@ public static boolean format(ClientConfiguration conf,\n         }\n         return true;\n     }\n+\n+    /**\n+     * This method returns an iterable object for the list of ledger identifiers of\n+     * the ledgers currently available.\n+     *\n+     * @return an iterable object for the list of ledger identifiers\n+     * @throws IOException  if the list of ledger identifiers cannot be read from the\n+     *  metadata store\n+     */\n+    public Iterable<Long> listLedgers()\n+    throws IOException {\n+        final LedgerRangeIterator iterator = bkc.getLedgerManager().getLedgerRanges();\n+        return new Iterable<Long>() {\n+            public Iterator<Long> iterator() {\n+                return new Iterator<Long>() {\n+                    Iterator<Long> currentRange = null;\n+\n+                    @Override\n+                    public boolean hasNext() {\n+                        try {\n+                            if (iterator.hasNext()) {\n+                                return true;\n+                            } else if (currentRange != null) {\n+                                if (currentRange.hasNext()) {\n+                                    return true;\n+                                }\n+                            }\n+                        } catch (IOException e) {\n+                            LOG.error(\"Error while checking if there is a next element\", e);\n+                        }\n+\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public Long next()\n+                    throws NoSuchElementException {\n+                        try{\n+                            if (currentRange == null) {\n+                                currentRange = iterator.next().getLedgers().iterator();\n+                            }\n+                        } catch (IOException e) {\n+                            LOG.error(\"Error while reading the next element\", e);\n+                            throw new NoSuchElementException(e.getMessage());\n+                        }\n+\n+                        return currentRange.next();\n+                    }\n+\n+                    @Override\n+                    public void remove()\n+                    throws UnsupportedOperationException {\n+                        throw new UnsupportedOperationException();\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    /**\n+     * @return the metadata for the passed ledger handle\n+     */\n+    public LedgerMetadata getLedgerMetadata(LedgerHandle lh) {\n+        return lh.getLedgerMetadata();\n+    }\n }"},{"sha":"e245ea310070cf33099ec803b80d742f298b184c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,43 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.client;\n+\n+public interface BookKeeperClientStats {\n+    public final static String CLIENT_SCOPE = \"bookkeeper_client\";\n+    public final static String CREATE_OP = \"LEDGER_CREATE\";\n+    public final static String DELETE_OP = \"LEDGER_DELETE\";\n+    public final static String OPEN_OP = \"LEDGER_OPEN\";\n+    public final static String ADD_OP = \"ADD_ENTRY\";\n+    public final static String READ_OP = \"READ_ENTRY\";\n+    public final static String PENDING_ADDS = \"NUM_PENDING_ADD\";\n+    public final static String ENSEMBLE_CHANGES = \"NUM_ENSEMBLE_CHANGE\";\n+    public final static String LAC_UPDATE_HITS = \"LAC_UPDATE_HITS\";\n+    public final static String LAC_UPDATE_MISSES = \"LAC_UPDATE_MISSES\";\n+\n+    // per channel stats\n+    public final static String CHANNEL_SCOPE = \"per_channel_bookie_client\";\n+\n+    public final static String CHANNEL_READ_OP = \"READ_ENTRY\";\n+    public final static String CHANNEL_TIMEOUT_READ = \"TIMEOUT_READ_ENTRY\";\n+    public final static String CHANNEL_ADD_OP = \"ADD_ENTRY\";\n+    public final static String CHANNEL_TIMEOUT_ADD = \"TIMEOUT_ADD_ENTRY\";\n+}"},{"sha":"204f0dc8c19307efd5c7996a2f7da628c22225bc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":90,"deletions":79,"changes":169,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,34 +15,35 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n \n import java.io.IOException;\n-import java.net.InetSocketAddress;\n import java.util.ArrayList;\n-import java.util.Collections;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.SafeRunnable;\n-import org.apache.bookkeeper.util.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.zookeeper.AsyncCallback.ChildrenCallback;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.AsyncCallback.ChildrenCallback;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.KeeperException.NodeExistsException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.ZooDefs.Ids;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This class is responsible for maintaining a consistent view of what bookies\n@@ -56,15 +55,15 @@\n class BookieWatcher implements Watcher, ChildrenCallback {\n     static final Logger logger = LoggerFactory.getLogger(BookieWatcher.class);\n \n+    public static int ZK_CONNECT_BACKOFF_SEC = 1;\n+    private static final Set<BookieSocketAddress> EMPTY_SET = new HashSet<BookieSocketAddress>();\n+\n     // Bookie registration path in ZK\n     private final String bookieRegistrationPath;\n-    static final Set<InetSocketAddress> EMPTY_SET = new HashSet<InetSocketAddress>();\n-    public static int ZK_CONNECT_BACKOFF_SEC = 1;\n \n     final BookKeeper bk;\n-\n-    HashSet<InetSocketAddress> knownBookies = new HashSet<InetSocketAddress>();\n     final ScheduledExecutorService scheduler;\n+    final EnsemblePlacementPolicy placementPolicy;\n \n     SafeRunnable reReadTask = new SafeRunnable() {\n         @Override\n@@ -76,14 +75,56 @@ public void safeRun() {\n \n     public BookieWatcher(ClientConfiguration conf,\n                          ScheduledExecutorService scheduler,\n+                         EnsemblePlacementPolicy placementPolicy,\n                          BookKeeper bk) throws KeeperException, InterruptedException  {\n         this.bk = bk;\n         // ZK bookie registration path\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath();\n         this.scheduler = scheduler;\n+        this.placementPolicy = placementPolicy;\n         readOnlyBookieWatcher = new ReadOnlyBookieWatcher(conf, bk);\n     }\n \n+    void notifyBookiesChanged(final BookiesListener listener) throws BKException {\n+        try {\n+            bk.getZkHandle().getChildren(this.bookieRegistrationPath,\n+                    new Watcher() {\n+                        public void process(WatchedEvent event) {\n+                            // listen children changed event from ZooKeeper\n+                            if (event.getType() == EventType.NodeChildrenChanged) {\n+                                listener.availableBookiesChanged();\n+                            }\n+                        }\n+                    });\n+        } catch (KeeperException ke) {\n+            logger.error(\"Error registering watcher with zookeeper\", ke);\n+            throw new BKException.ZKException();\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            logger.error(\"Interrupted registering watcher with zookeeper\", ie);\n+            throw new BKException.BKInterruptedException();\n+        }\n+    }\n+\n+    public Collection<BookieSocketAddress> getBookies() throws BKException {\n+        try {\n+            List<String> children = bk.getZkHandle().getChildren(this.bookieRegistrationPath, false);\n+            children.remove(BookKeeperConstants.READONLY);\n+            return convertToBookieAddresses(children);\n+        } catch (KeeperException ke) {\n+            logger.error(\"Failed to get bookie list : \", ke);\n+            throw new BKException.ZKException();\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            logger.error(\"Interrupted reading bookie list\", ie);\n+            throw new BKException.BKInterruptedException();\n+        }\n+    }\n+\n+    Collection<BookieSocketAddress> getReadOnlyBookies() {\n+        return new HashSet<BookieSocketAddress>(readOnlyBookieWatcher.getReadOnlyBookies());\n+    }\n+\n     public void readBookies() {\n         readBookies(this);\n     }\n@@ -103,37 +144,38 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n         if (rc != KeeperException.Code.OK.intValue()) {\n             //logger.error(\"Error while reading bookies\", KeeperException.create(Code.get(rc), path));\n             // try the read after a second again\n-            scheduler.schedule(reReadTask, ZK_CONNECT_BACKOFF_SEC, TimeUnit.SECONDS);\n+            try {\n+                scheduler.schedule(reReadTask, ZK_CONNECT_BACKOFF_SEC, TimeUnit.SECONDS);\n+            } catch (RejectedExecutionException ree) {\n+                logger.warn(\"Failed to schedule reading bookies task : \", ree);\n+            }\n             return;\n         }\n \n         // Just exclude the 'readonly' znode to exclude r-o bookies from\n         // available nodes list.\n         children.remove(BookKeeperConstants.READONLY);\n \n-        HashSet<InetSocketAddress> newBookieAddrs = convertToBookieAddresses(children);\n+        HashSet<BookieSocketAddress> newBookieAddrs = convertToBookieAddresses(children);\n \n-        final HashSet<InetSocketAddress> deadBookies;\n+        final Set<BookieSocketAddress> deadBookies;\n         synchronized (this) {\n-            deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n-            deadBookies.removeAll(newBookieAddrs);\n-            // No need to close readonly bookie clients.\n-            deadBookies.removeAll(readOnlyBookieWatcher.getReadOnlyBookies());\n-            knownBookies = newBookieAddrs;\n+            Set<BookieSocketAddress> readonlyBookies = readOnlyBookieWatcher.getReadOnlyBookies();\n+            deadBookies = placementPolicy.onClusterChanged(newBookieAddrs, readonlyBookies);\n         }\n \n         if (bk.getBookieClient() != null) {\n             bk.getBookieClient().closeClients(deadBookies);\n         }\n     }\n \n-    private static HashSet<InetSocketAddress> convertToBookieAddresses(List<String> children) {\n+    private static HashSet<BookieSocketAddress> convertToBookieAddresses(List<String> children) {\n         // Read the bookie addresses into a set for efficient lookup\n-        HashSet<InetSocketAddress> newBookieAddrs = new HashSet<InetSocketAddress>();\n+        HashSet<BookieSocketAddress> newBookieAddrs = new HashSet<BookieSocketAddress>();\n         for (String bookieAddrString : children) {\n-            InetSocketAddress bookieAddr;\n+            BookieSocketAddress bookieAddr;\n             try {\n-                bookieAddr = StringUtils.parseAddr(bookieAddrString);\n+                bookieAddr = new BookieSocketAddress(bookieAddrString);\n             } catch (IOException e) {\n                 logger.error(\"Could not parse bookie address: \" + bookieAddrString + \", ignoring this bookie\");\n                 continue;\n@@ -172,64 +214,33 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n     }\n \n     /**\n-     * Wrapper over the {@link #getAdditionalBookies(Set, int)} method when there is no exclusion list (or exisiting bookies)\n-     * @param numBookiesNeeded\n-     * @return\n+     * Create an ensemble with given <i>ensembleSize</i> and <i>writeQuorumSize</i>.\n+     *\n+     * @param ensembleSize\n+     *          Ensemble Size\n+     * @param writeQuorumSize\n+     *          Write Quorum Size\n+     * @return list of bookies for new ensemble.\n      * @throws BKNotEnoughBookiesException\n      */\n-    public ArrayList<InetSocketAddress> getNewBookies(int numBookiesNeeded) throws BKNotEnoughBookiesException {\n-        return getAdditionalBookies(EMPTY_SET, numBookiesNeeded);\n-    }\n-\n-    /**\n-     * Wrapper over the {@link #getAdditionalBookies(Set, int)} method when you just need 1 extra bookie\n-     * @param existingBookies\n-     * @return\n-     * @throws BKNotEnoughBookiesException\n-     */\n-    public InetSocketAddress getAdditionalBookie(List<InetSocketAddress> existingBookies)\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize)\n             throws BKNotEnoughBookiesException {\n-        return getAdditionalBookies(new HashSet<InetSocketAddress>(existingBookies), 1).get(0);\n+        return placementPolicy.newEnsemble(ensembleSize, writeQuorumSize, EMPTY_SET);\n     }\n \n     /**\n-     * Returns additional bookies given an exclusion list and how many are needed\n+     * Choose a bookie to replace bookie <i>bookieIdx</i> in <i>existingBookies</i>.\n      * @param existingBookies\n-     * @param numAdditionalBookiesNeeded\n-     * @return\n+     *          list of existing bookies.\n+     * @param bookieIdx\n+     *          index of the bookie in the list to be replaced.\n+     * @return the bookie to replace.\n      * @throws BKNotEnoughBookiesException\n      */\n-    public ArrayList<InetSocketAddress> getAdditionalBookies(Set<InetSocketAddress> existingBookies,\n-            int numAdditionalBookiesNeeded) throws BKNotEnoughBookiesException {\n-\n-        ArrayList<InetSocketAddress> newBookies = new ArrayList<InetSocketAddress>();\n-\n-        if (numAdditionalBookiesNeeded <= 0) {\n-            return newBookies;\n-        }\n-\n-        List<InetSocketAddress> allBookies;\n-\n-        synchronized (this) {\n-            allBookies = new ArrayList<InetSocketAddress>(knownBookies);\n-        }\n-\n-        Collections.shuffle(allBookies);\n-\n-        for (InetSocketAddress bookie : allBookies) {\n-            if (existingBookies.contains(bookie)) {\n-                continue;\n-            }\n-\n-            newBookies.add(bookie);\n-            numAdditionalBookiesNeeded--;\n-\n-            if (numAdditionalBookiesNeeded == 0) {\n-                return newBookies;\n-            }\n-        }\n-\n-        throw new BKNotEnoughBookiesException();\n+    public BookieSocketAddress replaceBookie(List<BookieSocketAddress> existingBookies, int bookieIdx)\n+            throws BKNotEnoughBookiesException {\n+        BookieSocketAddress addr = existingBookies.get(bookieIdx);\n+        return placementPolicy.replaceBookie(addr, new HashSet<BookieSocketAddress>(existingBookies));\n     }\n \n     /**\n@@ -239,7 +250,7 @@ public InetSocketAddress getAdditionalBookie(List<InetSocketAddress> existingBoo\n     private static class ReadOnlyBookieWatcher implements Watcher, ChildrenCallback {\n \n         private final static Logger LOG = LoggerFactory.getLogger(ReadOnlyBookieWatcher.class);\n-        private HashSet<InetSocketAddress> readOnlyBookies = new HashSet<InetSocketAddress>();\n+        private HashSet<BookieSocketAddress> readOnlyBookies = new HashSet<BookieSocketAddress>();\n         private BookKeeper bk;\n         private String readOnlyBookieRegPath;\n \n@@ -302,12 +313,12 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n                 return;\n             }\n \n-            HashSet<InetSocketAddress> newReadOnlyBookies = convertToBookieAddresses(children);\n+            HashSet<BookieSocketAddress> newReadOnlyBookies = convertToBookieAddresses(children);\n             readOnlyBookies = newReadOnlyBookies;\n         }\n \n         // returns the readonly bookies\n-        public HashSet<InetSocketAddress> getReadOnlyBookies() {\n+        public HashSet<BookieSocketAddress> getReadOnlyBookies() {\n             return readOnlyBookies;\n         }\n     }"},{"sha":"2f125fb166cae2717c404a90f16d12842e2b7138","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,27 @@\n+package org.apache.bookkeeper.client;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+/**\n+ * Listener for the the available bookies changes.\n+ */\n+public interface BookiesListener {\n+    void availableBookiesChanged();\n+}"},{"sha":"5f2d2c31c7decee7f9acdd45c0ac2e4161846f90","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DefaultEnsemblePlacementPolicy.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DefaultEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DefaultEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DefaultEnsemblePlacementPolicy.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.commons.configuration.Configuration;\n+\n+/**\n+ * Default Ensemble Placement Policy, which picks bookies randomly\n+ */\n+public class DefaultEnsemblePlacementPolicy implements EnsemblePlacementPolicy {\n+\n+    static final Set<BookieSocketAddress> EMPTY_SET = new HashSet<BookieSocketAddress>();\n+\n+    private Set<BookieSocketAddress> knownBookies = new HashSet<BookieSocketAddress>();\n+\n+    @Override\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int quorumSize,\n+            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+        ArrayList<BookieSocketAddress> newBookies = new ArrayList<BookieSocketAddress>(ensembleSize);\n+        if (ensembleSize <= 0) {\n+            return newBookies;\n+        }\n+        List<BookieSocketAddress> allBookies;\n+        synchronized (this) {\n+            allBookies = new ArrayList<BookieSocketAddress>(knownBookies);\n+        }\n+        Collections.shuffle(allBookies);\n+        for (BookieSocketAddress bookie : allBookies) {\n+            if (excludeBookies.contains(bookie)) {\n+                continue;\n+            }\n+            newBookies.add(bookie);\n+            --ensembleSize;\n+            if (ensembleSize == 0) {\n+                return newBookies;\n+            }\n+        }\n+        throw new BKNotEnoughBookiesException();\n+    }\n+\n+    @Override\n+    public BookieSocketAddress replaceBookie(BookieSocketAddress bookieToReplace,\n+            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+        ArrayList<BookieSocketAddress> addresses = newEnsemble(1, 1, excludeBookies);\n+        return addresses.get(0);\n+    }\n+\n+    @Override\n+    public synchronized Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writableBookies,\n+            Set<BookieSocketAddress> readOnlyBookies) {\n+        HashSet<BookieSocketAddress> deadBookies;\n+        deadBookies = new HashSet<BookieSocketAddress>(knownBookies);\n+        deadBookies.removeAll(writableBookies);\n+        // readonly bookies should not be treated as dead bookies\n+        deadBookies.removeAll(readOnlyBookies);\n+        knownBookies = writableBookies;\n+        return deadBookies;\n+    }\n+\n+    @Override\n+    public EnsemblePlacementPolicy initialize(Configuration conf) {\n+        return this;\n+    }\n+\n+    @Override\n+    public void uninitalize() {\n+        // do nothing\n+    }\n+\n+}"},{"sha":"a1d8ce38f766a8a8e399935433eaff500b59785b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/EnsemblePlacementPolicy.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/EnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/EnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/EnsemblePlacementPolicy.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.util.ArrayList;\n+import java.util.Set;\n+\n+import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.commons.configuration.Configuration;\n+\n+/**\n+ * Encapsulation of the algorithm that selects a number of bookies from the cluster as an ensemble for storing\n+ * data, based on the data input as well as the node properties.\n+ */\n+public interface EnsemblePlacementPolicy {\n+\n+    /**\n+     * Initialize the policy.\n+     *\n+     * @param conf\n+     *          client configuration.\n+     * @return initialized ensemble placement policy\n+     */\n+    public EnsemblePlacementPolicy initialize(Configuration conf);\n+\n+    /**\n+     * Uninitialize the policy\n+     */\n+    public void uninitalize();\n+\n+    /**\n+     * A consistent view of the cluster (what bookies are available as writable, what bookies are available as\n+     * readonly) is updated when any changes happen in the cluster.\n+     *\n+     * @param writableBookies\n+     *          All the bookies in the cluster available for write/read.\n+     * @param readOnlyBookies\n+     *          All the bookies in the cluster available for readonly.\n+     * @return the dead bookies during this cluster change.\n+     */\n+    public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writableBookies,\n+            Set<BookieSocketAddress> readOnlyBookies);\n+\n+    /**\n+     * Choose <i>numBookies</i> bookies for ensemble. If the count is more than the number of available\n+     * nodes, {@link BKNotEnoughBookiesException} is thrown.\n+     *\n+     * @param ensembleSize\n+     *          Ensemble Size\n+     * @param writeQuorumSize\n+     *          Write Quorum Size\n+     * @param excludeBookies\n+     *          Bookies that should not be considered as targets.\n+     * @return list of bookies chosen as targets.\n+     * @throws BKNotEnoughBookiesException if not enough bookies available.\n+     */\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize,\n+            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException;\n+\n+    /**\n+     * Choose a new bookie to replace <i>bookieToReplace</i>. If no bookie available in the cluster,\n+     * {@link BKNotEnoughBookiesException} is thrown.\n+     *\n+     * @param bookieToReplace\n+     *          bookie to replace\n+     * @param excludeBookies\n+     *          bookies that should not be considered as candidate.\n+     * @return the bookie chosen as target.\n+     * @throws BKNotEnoughBookiesException\n+     */\n+    public BookieSocketAddress replaceBookie(BookieSocketAddress bookieToReplace,\n+            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException;\n+}"},{"sha":"3f2580fd2d16de8cd716dad0e5fae608ebd888ac","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,27 +21,25 @@\n \n import java.util.ArrayList;\n import java.util.HashSet;\n-import java.util.Set;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n-\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.net.InetSocketAddress;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n /**\n  *Checks the complete ledger and finds the UnderReplicated fragments if any\n  */\n public class LedgerChecker {\n-    private static Logger LOG = LoggerFactory.getLogger(LedgerChecker.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(LedgerChecker.class);\n \n     public final BookieClient bookieClient;\n \n@@ -129,7 +127,8 @@ private void verifyLedgerFragment(LedgerFragment fragment,\n \n         public void readEntryComplete(int rc, long ledgerId, long entryId,\n                                       ChannelBuffer buffer, Object ctx) {\n-            if (rc != BKException.Code.NoSuchEntryException) {\n+            if (BKException.Code.NoSuchEntryException != rc &&\n+                BKException.Code.NoSuchLedgerExistsException != rc) {\n                 entryMayExist.set(true);\n             }\n \n@@ -158,7 +157,10 @@ public void readEntryComplete(int rc, long ledgerId, long entryId,\n         }\n \n         public void operationComplete(int rc, LedgerFragment result) {\n-            if (rc != BKException.Code.OK) {\n+            if (rc == BKException.Code.ClientClosedException) {\n+                cb.operationComplete(BKException.Code.ClientClosedException, badFragments);\n+                return;\n+            } else if (rc != BKException.Code.OK) {\n                 badFragments.add(result);\n             }\n             if (numFragments.decrementAndGet() == 0) {\n@@ -177,8 +179,8 @@ public void checkLedger(LedgerHandle lh,\n         final Set<LedgerFragment> fragments = new HashSet<LedgerFragment>();\n \n         Long curEntryId = null;\n-        ArrayList<InetSocketAddress> curEnsemble = null;\n-        for (Map.Entry<Long, ArrayList<InetSocketAddress>> e : lh\n+        ArrayList<BookieSocketAddress> curEnsemble = null;\n+        for (Map.Entry<Long, ArrayList<BookieSocketAddress>> e : lh\n                 .getLedgerMetadata().getEnsembles().entrySet()) {\n             if (curEntryId != null) {\n                 for (int i = 0; i < curEnsemble.size(); i++) {\n@@ -204,9 +206,7 @@ public void checkLedger(LedgerHandle lh,\n          * NoSuchEntry we can assume it was never written. If they respond with anything\n          * else, we must assume the entry has been written, so we run the check.\n          */\n-        if (curEntryId != null\n-            && !(lh.getLastAddConfirmed() == LedgerHandle.INVALID_ENTRY_ID\n-                 && lh.getLedgerMetadata().isClosed())) {\n+        if (curEntryId != null && !(lh.getLedgerMetadata().isClosed() && lh.getLastAddConfirmed() < curEntryId)) {\n             long lastEntry = lh.getLastAddConfirmed();\n \n             if (lastEntry < curEntryId) {\n@@ -236,7 +236,7 @@ public void operationComplete(int rc, Boolean result) {\n                                               });\n \n                 for (int bi : lh.getDistributionSchedule().getWriteSet(entryToRead)) {\n-                    InetSocketAddress addr = curEnsemble.get(bi);\n+                    BookieSocketAddress addr = curEnsemble.get(bi);\n                     bookieClient.readEntry(addr, lh.getId(),\n                                            entryToRead, eecb, null);\n                 }"},{"sha":"fe223af959228c34482ce9c96b25c4559858494b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":25,"deletions":10,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,15 +21,16 @@\n \n package org.apache.bookkeeper.client;\n \n-import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n import java.util.ArrayList;\n \n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -48,6 +49,8 @@\n     byte[] passwd;\n     BookKeeper bk;\n     DigestType digestType;\n+    long startTime;\n+    OpStatsLogger createOpLogger;\n \n     /**\n      * Constructor\n@@ -78,6 +81,8 @@\n         this.passwd = passwd;\n         this.cb = cb;\n         this.ctx = ctx;\n+        this.startTime = MathUtils.nowInNano();\n+        this.createOpLogger = bk.getCreateOpLogger();\n     }\n \n     /**\n@@ -90,12 +95,13 @@ public void initiate() {\n          * Adding bookies to ledger handle\n          */\n \n-        ArrayList<InetSocketAddress> ensemble;\n+        ArrayList<BookieSocketAddress> ensemble;\n         try {\n-            ensemble = bk.bookieWatcher.getNewBookies(metadata.getEnsembleSize());\n+            ensemble = bk.bookieWatcher\n+                    .newEnsemble(metadata.getEnsembleSize(), metadata.getWriteQuorumSize());\n         } catch (BKNotEnoughBookiesException e) {\n             LOG.error(\"Not enough bookies to create ledger\");\n-            cb.createComplete(e.getCode(), null, this.ctx);\n+            createComplete(e.getCode(), null);\n             return;\n         }\n \n@@ -114,24 +120,33 @@ public void initiate() {\n     @Override\n     public void operationComplete(int rc, Long ledgerId) {\n         if (BKException.Code.OK != rc) {\n-            cb.createComplete(rc, null, this.ctx);\n+            createComplete(rc, null);\n             return;\n         }\n \n         try {\n             lh = new LedgerHandle(bk, ledgerId, metadata, digestType, passwd);\n         } catch (GeneralSecurityException e) {\n             LOG.error(\"Security exception while creating ledger: \" + ledgerId, e);\n-            cb.createComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);\n+            createComplete(BKException.Code.DigestNotInitializedException, null);\n             return;\n         } catch (NumberFormatException e) {\n             LOG.error(\"Incorrectly entered parameter throttle: \" + bk.getConf().getThrottleValue(), e);\n-            cb.createComplete(BKException.Code.IncorrectParameterException, null, this.ctx);\n+            createComplete(BKException.Code.IncorrectParameterException, null);\n             return;\n         }\n-\n         // return the ledger handle back\n-        cb.createComplete(BKException.Code.OK, lh, this.ctx);\n+        createComplete(BKException.Code.OK, lh);\n+    }\n+\n+    private void createComplete(int rc, LedgerHandle lh) {\n+        // Opened a new ledger\n+        if (BKException.Code.OK != rc) {\n+            createOpLogger.registerFailedEvent(MathUtils.elapsedMSec(startTime));\n+        } else {\n+            createOpLogger.registerSuccessfulEvent(MathUtils.elapsedMSec(startTime));\n+        }\n+        cb.createComplete(rc, lh, ctx);\n     }\n \n }"},{"sha":"f8caa5be03777deff259eaf24e8ae50e46a2adc9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -22,6 +22,8 @@\n package org.apache.bookkeeper.client;\n \n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n import org.apache.bookkeeper.versioning.Version;\n import org.slf4j.Logger;\n@@ -39,6 +41,8 @@\n     long ledgerId;\n     DeleteCallback cb;\n     Object ctx;\n+    long startTime;\n+    OpStatsLogger deleteOpLogger;\n \n     /**\n      * Constructor\n@@ -58,6 +62,8 @@\n         this.ledgerId = ledgerId;\n         this.cb = cb;\n         this.ctx = ctx;\n+        this.startTime = MathUtils.nowInNano();\n+        this.deleteOpLogger = bk.getDeleteOpLogger();\n     }\n \n     /**\n@@ -74,6 +80,11 @@ public void initiate() {\n      */\n     @Override\n     public void safeOperationComplete(int rc, Void result) {\n+        if (BKException.Code.OK != rc) {\n+            deleteOpLogger.registerFailedEvent(startTime);\n+        } else {\n+            deleteOpLogger.registerSuccessfulEvent(startTime);\n+        }\n         cb.deleteComplete(rc, this.ctx);\n     }\n }"},{"sha":"91f897c45f1f852a7067870ef312a6520f6ee2ca","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -35,7 +35,7 @@\n  */\n \n public class LedgerEntry {\n-    Logger LOG = LoggerFactory.getLogger(LedgerEntry.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(LedgerEntry.class);\n \n     long ledgerId;\n     long entryId;"},{"sha":"6aadb8aaa1fc77cb12731fa24e1087bc3e67dda4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -19,11 +19,12 @@\n  */\n package org.apache.bookkeeper.client;\n \n-import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.SortedMap;\n \n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+\n /**\n  * Represents the entries of a segment of a ledger which are stored on a single\n  * bookie in the segments bookie ensemble.\n@@ -32,7 +33,7 @@\n  */\n public class LedgerFragment {\n     private final int bookieIndex;\n-    private final List<InetSocketAddress> ensemble;\n+    private final List<BookieSocketAddress> ensemble;\n     private final long firstEntryId;\n     private final long lastKnownEntryId;\n     private final long ledgerId;\n@@ -47,7 +48,7 @@\n         this.bookieIndex = bookieIndex;\n         this.ensemble = lh.getLedgerMetadata().getEnsemble(firstEntryId);\n         this.schedule = lh.getDistributionSchedule();\n-        SortedMap<Long, ArrayList<InetSocketAddress>> ensembles = lh\n+        SortedMap<Long, ArrayList<BookieSocketAddress>> ensembles = lh\n                 .getLedgerMetadata().getEnsembles();\n         this.isLedgerClosed = lh.getLedgerMetadata().isClosed()\n                 || !ensemble.equals(ensembles.get(ensembles.lastKey()));\n@@ -82,7 +83,7 @@ long getLastKnownEntryId() {\n     /**\n      * Gets the failedBookie address\n      */\n-    public InetSocketAddress getAddress() {\n+    public BookieSocketAddress getAddress() {\n         return ensemble.get(bookieIndex);\n     }\n     \n@@ -133,7 +134,7 @@ public long getLastStoredEntryId() {\n      * \n      * @return the ensemble for the segment which this fragment is a part of\n      */\n-    public List<InetSocketAddress> getEnsemble() {\n+    public List<BookieSocketAddress> getEnsemble() {\n         return this.ensemble;\n     }\n "},{"sha":"4501524ae849472ae8405afdbc940f4ad0341a89","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","status":"modified","additions":19,"deletions":20,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -19,7 +19,6 @@\n  */\n package org.apache.bookkeeper.client;\n \n-import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.HashSet;\n@@ -29,12 +28,12 @@\n import java.util.Set;\n \n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n-\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException.Code;\n import org.jboss.netty.buffer.ChannelBuffer;\n@@ -54,13 +53,13 @@ public LedgerFragmentReplicator(BookKeeper bkc) {\n         this.bkc = bkc;\n     }\n \n-    private static Logger LOG = LoggerFactory\n+    private final static Logger LOG = LoggerFactory\n             .getLogger(LedgerFragmentReplicator.class);\n \n     private void replicateFragmentInternal(final LedgerHandle lh,\n             final LedgerFragment lf,\n             final AsyncCallback.VoidCallback ledgerFragmentMcb,\n-            final InetSocketAddress newBookie) throws InterruptedException {\n+            final BookieSocketAddress newBookie) throws InterruptedException {\n         if (!lf.isClosed()) {\n             LOG.error(\"Trying to replicate an unclosed fragment;\"\n                       + \" This is not safe {}\", lf);\n@@ -133,7 +132,7 @@ private void replicateFragmentInternal(final LedgerHandle lh,\n      */\n     void replicate(final LedgerHandle lh, final LedgerFragment lf,\n             final AsyncCallback.VoidCallback ledgerFragmentMcb,\n-            final InetSocketAddress targetBookieAddress)\n+            final BookieSocketAddress targetBookieAddress)\n             throws InterruptedException {\n         Set<LedgerFragment> partionedFragments = splitIntoSubFragments(lh, lf,\n                 bkc.getConf().getRereplicationEntryBatchSize());\n@@ -147,7 +146,7 @@ void replicate(final LedgerHandle lh, final LedgerFragment lf,\n     private void replicateNextBatch(final LedgerHandle lh,\n             final Iterator<LedgerFragment> fragments,\n             final AsyncCallback.VoidCallback ledgerFragmentMcb,\n-            final InetSocketAddress targetBookieAddress) {\n+            final BookieSocketAddress targetBookieAddress) {\n         if (fragments.hasNext()) {\n             try {\n                 replicateFragmentInternal(lh, fragments.next(),\n@@ -238,7 +237,7 @@ public void processResult(int rc, String v, Object ctx) {\n     private void recoverLedgerFragmentEntry(final Long entryId,\n             final LedgerHandle lh,\n             final AsyncCallback.VoidCallback ledgerFragmentEntryMcb,\n-            final InetSocketAddress newBookie) throws InterruptedException {\n+            final BookieSocketAddress newBookie) throws InterruptedException {\n         /*\n          * Read the ledger entry using the LedgerHandle. This will allow us to\n          * read the entry from one of the other replicated bookies other than\n@@ -248,7 +247,7 @@ private void recoverLedgerFragmentEntry(final Long entryId,\n             @Override\n             public void readComplete(int rc, LedgerHandle lh,\n                     Enumeration<LedgerEntry> seq, Object ctx) {\n-                if (rc != Code.OK.intValue()) {\n+                if (rc != BKException.Code.OK) {\n                     LOG.error(\"BK error reading ledger entry: \" + entryId,\n                             BKException.create(rc));\n                     ledgerFragmentEntryMcb.processResult(rc, null, null);\n@@ -269,9 +268,9 @@ public void readComplete(int rc, LedgerHandle lh,\n                         new WriteCallback() {\n                             @Override\n                             public void writeComplete(int rc, long ledgerId,\n-                                    long entryId, InetSocketAddress addr,\n+                                    long entryId, BookieSocketAddress addr,\n                                     Object ctx) {\n-                                if (rc != Code.OK.intValue()) {\n+                                if (rc != BKException.Code.OK) {\n                                     LOG.error(\n                                             \"BK error writing entry for ledgerId: \"\n                                                     + ledgerId + \", entryId: \"\n@@ -308,12 +307,12 @@ public void writeComplete(int rc, long ledgerId,\n         final AsyncCallback.VoidCallback ledgerFragmentsMcb;\n         final LedgerHandle lh;\n         final long fragmentStartId;\n-        final InetSocketAddress oldBookie;\n-        final InetSocketAddress newBookie;\n+        final BookieSocketAddress oldBookie;\n+        final BookieSocketAddress newBookie;\n \n         SingleFragmentCallback(AsyncCallback.VoidCallback ledgerFragmentsMcb,\n                 LedgerHandle lh, long fragmentStartId,\n-                InetSocketAddress oldBookie, InetSocketAddress newBookie) {\n+                BookieSocketAddress oldBookie, BookieSocketAddress newBookie) {\n             this.ledgerFragmentsMcb = ledgerFragmentsMcb;\n             this.lh = lh;\n             this.fragmentStartId = fragmentStartId;\n@@ -323,7 +322,7 @@ public void writeComplete(int rc, long ledgerId,\n \n         @Override\n         public void processResult(int rc, String path, Object ctx) {\n-            if (rc != Code.OK.intValue()) {\n+            if (rc != BKException.Code.OK) {\n                 LOG.error(\"BK error replicating ledger fragments for ledger: \"\n                         + lh.getId(), BKException.create(rc));\n                 ledgerFragmentsMcb.processResult(rc, null, null);\n@@ -337,13 +336,13 @@ public void processResult(int rc, String path, Object ctx) {\n     /** Updates the ensemble with newBookie and notify the ensembleUpdatedCb */\n     private static void updateEnsembleInfo(\n             AsyncCallback.VoidCallback ensembleUpdatedCb, long fragmentStartId,\n-            LedgerHandle lh, InetSocketAddress oldBookie,\n-            InetSocketAddress newBookie) {\n+            LedgerHandle lh, BookieSocketAddress oldBookie,\n+            BookieSocketAddress newBookie) {\n         /*\n          * Update the ledger metadata's ensemble info to point to the new\n          * bookie.\n          */\n-        ArrayList<InetSocketAddress> ensemble = lh.getLedgerMetadata()\n+        ArrayList<BookieSocketAddress> ensemble = lh.getLedgerMetadata()\n                 .getEnsembles().get(fragmentStartId);\n         int deadBookieIndex = ensemble.indexOf(oldBookie);\n         ensemble.remove(deadBookieIndex);\n@@ -361,12 +360,12 @@ private static void updateEnsembleInfo(\n         final AsyncCallback.VoidCallback ensembleUpdatedCb;\n         final LedgerHandle lh;\n         final long fragmentStartId;\n-        final InetSocketAddress oldBookie;\n-        final InetSocketAddress newBookie;\n+        final BookieSocketAddress oldBookie;\n+        final BookieSocketAddress newBookie;\n \n         public UpdateEnsembleCb(AsyncCallback.VoidCallback ledgerFragmentsMcb,\n                 long fragmentStartId, LedgerHandle lh,\n-                InetSocketAddress oldBookie, InetSocketAddress newBookie) {\n+                BookieSocketAddress oldBookie, BookieSocketAddress newBookie) {\n             this.ensembleUpdatedCb = ledgerFragmentsMcb;\n             this.lh = lh;\n             this.fragmentStartId = fragmentStartId;"},{"sha":"7204d6cbb2795f5503a3ad8a38407bbc5cd84ee6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":311,"deletions":99,"changes":410,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,37 +18,39 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n+\n+import static com.google.common.base.Charsets.UTF_8;\n \n-import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.Arrays;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Enumeration;\n+import java.util.List;\n import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n-import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n-import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n-\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.State;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n import org.apache.bookkeeper.util.SafeRunnable;\n-\n-import com.google.common.util.concurrent.RateLimiter;\n-\n+import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.jboss.netty.buffer.ChannelBuffer;\n+import com.google.common.util.concurrent.RateLimiter;\n \n /**\n  * Ledger handle contains ledger metadata and is used to access the read and\n@@ -80,6 +80,10 @@\n     final AtomicInteger blockAddCompletions = new AtomicInteger(0);\n     final Queue<PendingAddOp> pendingAddOps = new ConcurrentLinkedQueue<PendingAddOp>();\n \n+    final Counter ensembleChangeCounter;\n+    final Counter lacUpdateHitsCounter;\n+    final Counter lacUpdateMissesCounter;\n+\n     LedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n                  DigestType digestType, byte[] password)\n             throws GeneralSecurityException, NumberFormatException {\n@@ -102,6 +106,19 @@\n         this.ledgerKey = MacDigestManager.genDigest(\"ledger\", password);\n         distributionSchedule = new RoundRobinDistributionSchedule(\n                 metadata.getWriteQuorumSize(), metadata.getAckQuorumSize(), metadata.getEnsembleSize());\n+\n+        ensembleChangeCounter = bk.getStatsLogger().getCounter(BookKeeperClientStats.ENSEMBLE_CHANGES);\n+        lacUpdateHitsCounter = bk.getStatsLogger().getCounter(BookKeeperClientStats.LAC_UPDATE_HITS);\n+        lacUpdateMissesCounter = bk.getStatsLogger().getCounter(BookKeeperClientStats.LAC_UPDATE_MISSES);\n+        bk.getStatsLogger().registerGauge(BookKeeperClientStats.PENDING_ADDS,\n+                                          new Gauge<Integer>() {\n+                                              public Integer getDefaultValue() {\n+                                                  return 0;\n+                                              }\n+                                              public Integer getSample() {\n+                                                  return pendingAddOps.size();\n+                                              }\n+                                          });\n     }\n \n     /**\n@@ -170,7 +187,7 @@ DigestManager getDigestManager() {\n      *  Add to the length of the ledger in bytes.\n      *\n      * @param delta\n-     * @return\n+     * @return the length of the ledger after the addition\n      */\n     long addToLength(long delta) {\n         this.length += delta;\n@@ -205,7 +222,7 @@ void writeLedgerConfig(GenericCallback<Void> writeCb) {\n      * Close this ledger synchronously.\n      * @see #asyncClose\n      */\n-    public void close() \n+    public void close()\n             throws InterruptedException, BKException {\n         SyncCounter counter = new SyncCounter();\n         counter.inc();\n@@ -220,21 +237,30 @@ public void close()\n \n     /**\n      * Asynchronous close, any adds in flight will return errors.\n-     * \n-     * Closing a ledger will ensure that all clients agree on what the last entry \n-     * of the ledger is. This ensures that, once the ledger has been closed, all \n-     * reads from the ledger will return the same set of entries. \n-     * \n+     *\n+     * Closing a ledger will ensure that all clients agree on what the last entry\n+     * of the ledger is. This ensures that, once the ledger has been closed, all\n+     * reads from the ledger will return the same set of entries.\n+     *\n      * @param cb\n      *          callback implementation\n      * @param ctx\n      *          control object\n-     * @throws InterruptedException\n      */\n     public void asyncClose(CloseCallback cb, Object ctx) {\n         asyncCloseInternal(cb, ctx, BKException.Code.LedgerClosedException);\n     }\n \n+    void asyncCloseInternal(final CloseCallback cb, final Object ctx, final int rc) {\n+        try {\n+            doAsyncCloseInternal(cb, ctx, rc);\n+        } catch (RejectedExecutionException re) {\n+            LOG.debug(\"Failed to close ledger {} : \", ledgerId, re);\n+            errorOutPendingAdds(bk.getReturnRc(rc));\n+            cb.closeComplete(bk.getReturnRc(BKException.Code.InterruptedException), this, ctx);\n+        }\n+    }\n+\n     /**\n      * Same as public version of asyncClose except that this one takes an\n      * additional parameter which is the return code to hand to all the pending\n@@ -244,31 +270,41 @@ public void asyncClose(CloseCallback cb, Object ctx) {\n      * @param ctx\n      * @param rc\n      */\n-    void asyncCloseInternal(final CloseCallback cb, final Object ctx, final int rc) {\n+    void doAsyncCloseInternal(final CloseCallback cb, final Object ctx, final int rc) {\n         bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {\n             @Override\n             public void safeRun() {\n                 final long prevLastEntryId;\n                 final long prevLength;\n                 final State prevState;\n+                List<PendingAddOp> pendingAdds;\n \n                 synchronized(LedgerHandle.this) {\n+                    // if the metadata is already closed, we don't need to proceed the process\n+                    // otherwise, it might end up encountering bad version error log messages when updating metadata\n+                    if (metadata.isClosed()) {\n+                        cb.closeComplete(BKException.Code.OK, LedgerHandle.this, ctx);\n+                        return;\n+                    }\n                     prevState = metadata.getState();\n                     prevLastEntryId = metadata.getLastEntryId();\n                     prevLength = metadata.getLength();\n \n-                    // synchronized on LedgerHandle.this to ensure that \n-                    // lastAddPushed can not be updated after the metadata \n-                    // is closed. \n-                    metadata.setLength(length);\n+                    // drain pending adds first\n+                    pendingAdds = drainPendingAddsToErrorOut();\n \n-                    // Close operation is idempotent, so no need to check if we are\n-                    // already closed\n+                    // synchronized on LedgerHandle.this to ensure that\n+                    // lastAddPushed can not be updated after the metadata\n+                    // is closed.\n+                    metadata.setLength(length);\n                     metadata.close(lastAddConfirmed);\n-                    errorOutPendingAdds(rc);\n                     lastAddPushed = lastAddConfirmed;\n                 }\n \n+                // error out all pending adds during closing, the callbacks shouldn't be\n+                // running under any bk locks.\n+                errorOutPendingAdds(rc, pendingAdds);\n+\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Closing ledger: \" + ledgerId + \" at entryId: \"\n                               + metadata.getLastEntryId() + \" with this many bytes: \" + metadata.getLength());\n@@ -297,7 +333,12 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                                         }\n \n                                         metadata.setLength(prevLength);\n-                                        if (metadata.resolveConflict(newMeta)) {\n+                                        if (!metadata.isNewerThan(newMeta)\n+                                                && !metadata.isConflictWith(newMeta)) {\n+                                            // use the new metadata's ensemble, in case re-replication already\n+                                            // replaced some bookies in the ensemble.\n+                                            metadata.setEnsembles(newMeta.getEnsembles());\n+                                            metadata.setVersion(newMeta.version);\n                                             metadata.setLength(length);\n                                             metadata.close(lastAddConfirmed);\n                                             writeLedgerConfig(new CloseCb());\n@@ -411,7 +452,7 @@ public long addEntry(byte[] data, int offset, int length)\n         SyncAddCallback callback = new SyncAddCallback();\n         asyncAddEntry(data, offset, length, callback, counter);\n         counter.block(0);\n-        \n+\n         if (counter.getrc() != BKException.Code.OK) {\n             throw BKException.create(counter.getrc());\n         }\n@@ -483,21 +524,28 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n \n         final long entryId;\n         final long currentLength;\n+        boolean wasClosed = false;\n         synchronized(this) {\n             // synchronized on this to ensure that\n-            // the ledger isn't closed between checking and \n+            // the ledger isn't closed between checking and\n             // updating lastAddPushed\n             if (metadata.isClosed()) {\n-                LOG.warn(\"Attempt to add to closed ledger: \" + ledgerId);\n-                cb.addComplete(BKException.Code.LedgerClosedException,\n-                               LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n-                return;\n+                wasClosed = true;\n+                entryId = -1;\n+                currentLength = 0;\n+            } else {\n+                entryId = ++lastAddPushed;\n+                currentLength = addToLength(length);\n+                op.setEntryId(entryId);\n+                pendingAddOps.add(op);\n             }\n+        }\n \n-            entryId = ++lastAddPushed;\n-            currentLength = addToLength(length);\n-            op.setEntryId(entryId);\n-            pendingAddOps.add(op);\n+        if (wasClosed) {\n+            LOG.warn(\"Attempt to add to closed ledger: {}\", ledgerId);\n+            cb.addComplete(BKException.Code.LedgerClosedException,\n+                           LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n+            return;\n         }\n \n         try {\n@@ -506,37 +554,57 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n                 public void safeRun() {\n                     ChannelBuffer toSend = macManager.computeDigestAndPackageForSending(\n                                                entryId, lastAddConfirmed, currentLength, data, offset, length);\n-                    op.initiate(toSend);\n+                    op.initiate(toSend, length);\n                 }\n             });\n-        } catch (RuntimeException e) {\n-            cb.addComplete(BKException.Code.InterruptedException,\n+        } catch (RejectedExecutionException e) {\n+            cb.addComplete(bk.getReturnRc(BKException.Code.InterruptedException),\n                     LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n         }\n     }\n \n+    synchronized void updateLastConfirmed(long lac, long len) {\n+        if (lac > lastAddConfirmed) {\n+            lastAddConfirmed = lac;\n+            lacUpdateHitsCounter.inc();\n+        } else {\n+            lacUpdateMissesCounter.inc();\n+        }\n+        lastAddPushed = Math.max(lastAddPushed, lac);\n+        length = Math.max(length, len);\n+    }\n+\n     /**\n-     * Obtains asynchronously the last confirmed write from a quorum of bookies. This \n+     * Obtains asynchronously the last confirmed write from a quorum of bookies. This\n      * call obtains the the last add confirmed each bookie has received for this ledger\n      * and returns the maximum. If the ledger has been closed, the value returned by this\n      * call may not correspond to the id of the last entry of the ledger, since it reads\n-     * the hint of bookies. Consequently, in the case the ledger has been closed, it may \n-     * return a different value than getLastAddConfirmed, which returns the local value \n+     * the hint of bookies. Consequently, in the case the ledger has been closed, it may\n+     * return a different value than getLastAddConfirmed, which returns the local value\n      * of the ledger handle.\n-     * \n+     *\n      * @see #getLastAddConfirmed()\n      *\n      * @param cb\n      * @param ctx\n      */\n \n     public void asyncReadLastConfirmed(final ReadLastConfirmedCallback cb, final Object ctx) {\n+        boolean isClosed;\n+        long lastEntryId;\n+        synchronized (this) {\n+            isClosed = metadata.isClosed();\n+            lastEntryId = metadata.getLastEntryId();\n+        }\n+        if (isClosed) {\n+            cb.readLastConfirmedComplete(BKException.Code.OK, lastEntryId, ctx);\n+            return;\n+        }\n         ReadLastConfirmedOp.LastConfirmedDataCallback innercb = new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n+                @Override\n                 public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {\n                     if (rc == BKException.Code.OK) {\n-                        lastAddConfirmed = Math.max(lastAddConfirmed, data.lastAddConfirmed);\n-                        lastAddPushed = Math.max(lastAddPushed, data.lastAddConfirmed);\n-                        length = Math.max(length, data.length);\n+                        updateLastConfirmed(data.lastAddConfirmed, data.length);\n                         cb.readLastConfirmedComplete(rc, data.lastAddConfirmed, ctx);\n                     } else {\n                         cb.readLastConfirmedComplete(rc, INVALID_ENTRY_ID, ctx);\n@@ -546,6 +614,49 @@ public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData dat\n         new ReadLastConfirmedOp(this, innercb).initiate();\n     }\n \n+    /**\n+     * Obtains asynchronously the last confirmed write from a quorum of bookies.\n+     * It is similar as\n+     * {@link #asyncTryReadLastConfirmed(org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback, Object)},\n+     * but it doesn't wait all the responses from the quorum. It would callback\n+     * immediately if it received a LAC which is larger than current LAC.\n+     *\n+     * @see #asyncTryReadLastConfirmed(org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback, Object)\n+     *\n+     * @param cb\n+     *          callback to return read last confirmed\n+     * @param ctx\n+     *          callback context\n+     */\n+    public void asyncTryReadLastConfirmed(final ReadLastConfirmedCallback cb, final Object ctx) {\n+        boolean isClosed;\n+        long lastEntryId;\n+        synchronized (this) {\n+            isClosed = metadata.isClosed();\n+            lastEntryId = metadata.getLastEntryId();\n+        }\n+        if (isClosed) {\n+            cb.readLastConfirmedComplete(BKException.Code.OK, lastEntryId, ctx);\n+            return;\n+        }\n+        ReadLastConfirmedOp.LastConfirmedDataCallback innercb = new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n+            AtomicBoolean completed = new AtomicBoolean(false);\n+            @Override\n+            public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {\n+                if (rc == BKException.Code.OK) {\n+                    updateLastConfirmed(data.lastAddConfirmed, data.length);\n+                    if (completed.compareAndSet(false, true)) {\n+                        cb.readLastConfirmedComplete(rc, data.lastAddConfirmed, ctx);\n+                    }\n+                } else {\n+                    if (completed.compareAndSet(false, true)) {\n+                        cb.readLastConfirmedComplete(rc, INVALID_ENTRY_ID, ctx);\n+                    }\n+                }\n+            }\n+        };\n+        new TryReadLastConfirmedOp(this, innercb, getLastAddConfirmed()).initiate();\n+    }\n \n     /**\n      * Context objects for synchronous call to read last confirmed.\n@@ -585,18 +696,17 @@ boolean ready() {\n      * obtains the the last add confirmed each bookie has received for this ledger\n      * and returns the maximum. If the ledger has been closed, the value returned by this\n      * call may not correspond to the id of the last entry of the ledger, since it reads\n-     * the hint of bookies. Consequently, in the case the ledger has been closed, it may \n-     * return a different value than getLastAddConfirmed, which returns the local value \n+     * the hint of bookies. Consequently, in the case the ledger has been closed, it may\n+     * return a different value than getLastAddConfirmed, which returns the local value\n      * of the ledger handle.\n-     * \n+     *\n      * @see #getLastAddConfirmed()\n-     * \n+     *\n      * @return The entry id of the last confirmed write or {@link #INVALID_ENTRY_ID INVALID_ENTRY_ID}\n      *         if no entry has been confirmed\n      * @throws InterruptedException\n      * @throws BKException\n      */\n-    \n     public long readLastConfirmed()\n             throws InterruptedException, BKException {\n         LastConfirmedCtx ctx = new LastConfirmedCtx();\n@@ -611,6 +721,31 @@ public long readLastConfirmed()\n         return ctx.getlastConfirmed();\n     }\n \n+    /**\n+     * Obtains synchronously the last confirmed write from a quorum of bookies.\n+     * It is similar as {@link #readLastConfirmed()}, but it doesn't wait all the responses\n+     * from the quorum. It would callback immediately if it received a LAC which is larger\n+     * than current LAC.\n+     *\n+     * @see #readLastConfirmed()\n+     *\n+     * @return The entry id of the last confirmed write or {@link #INVALID_ENTRY_ID INVALID_ENTRY_ID}\n+     *         if no entry has been confirmed\n+     * @throws InterruptedException\n+     * @throws BKException\n+     */\n+    public long tryReadLastConfirmed() throws InterruptedException, BKException {\n+        LastConfirmedCtx ctx = new LastConfirmedCtx();\n+        asyncTryReadLastConfirmed(new SyncReadLastConfirmedCallback(), ctx);\n+        synchronized (ctx) {\n+            while (!ctx.ready()) {\n+                ctx.wait();\n+            }\n+        }\n+        if (ctx.getRC() != BKException.Code.OK) throw BKException.create(ctx.getRC());\n+        return ctx.getlastConfirmed();\n+    }\n+\n     // close the ledger and send fails to all the adds in the pipeline\n     void handleUnrecoverableErrorDuringAdd(int rc) {\n         if (metadata.isInRecovery()) {\n@@ -619,13 +754,27 @@ void handleUnrecoverableErrorDuringAdd(int rc) {\n             errorOutPendingAdds(rc);\n             return;\n         }\n+        LOG.error(\"Closing ledger {} due to error {}\", ledgerId, rc);\n         asyncCloseInternal(NoopCloseCallback.instance, null, rc);\n     }\n \n     void errorOutPendingAdds(int rc) {\n+        errorOutPendingAdds(rc, drainPendingAddsToErrorOut());\n+    }\n+\n+    synchronized List<PendingAddOp> drainPendingAddsToErrorOut() {\n         PendingAddOp pendingAddOp;\n+        List<PendingAddOp> opsDrained = new ArrayList<PendingAddOp>(pendingAddOps.size());\n         while ((pendingAddOp = pendingAddOps.poll()) != null) {\n-            pendingAddOp.submitCallback(rc);\n+            addToLength(-pendingAddOp.entryLength);\n+            opsDrained.add(pendingAddOp);\n+        }\n+        return opsDrained;\n+    }\n+\n+    void errorOutPendingAdds(int rc, List<PendingAddOp> ops) {\n+        for (PendingAddOp op : ops) {\n+            op.submitCallback(rc);\n         }\n     }\n \n@@ -645,16 +794,16 @@ void sendAddSuccessCallbacks() {\n \n     }\n \n-    ArrayList<InetSocketAddress> replaceBookieInMetadata(final InetSocketAddress addr, final int bookieIndex)\n+    ArrayList<BookieSocketAddress> replaceBookieInMetadata(final BookieSocketAddress addr, final int bookieIndex)\n             throws BKException.BKNotEnoughBookiesException {\n-        InetSocketAddress newBookie;\n+        BookieSocketAddress newBookie;\n         LOG.info(\"Handling failure of bookie: {} index: {}\", addr, bookieIndex);\n-        final ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>();\n+        final ArrayList<BookieSocketAddress> newEnsemble = new ArrayList<BookieSocketAddress>();\n         final long newEnsembleStartEntry = lastAddConfirmed + 1;\n \n         // avoid parallel ensemble changes to same ensemble.\n         synchronized (metadata) {\n-            newBookie = bk.bookieWatcher.getAdditionalBookie(metadata.currentEnsemble);\n+            newBookie = bk.bookieWatcher.replaceBookie(metadata.currentEnsemble, bookieIndex);\n \n             newEnsemble.addAll(metadata.currentEnsemble);\n             newEnsemble.set(bookieIndex, newBookie);\n@@ -670,7 +819,7 @@ void sendAddSuccessCallbacks() {\n         return newEnsemble;\n     }\n \n-    void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n+    void handleBookieFailure(final BookieSocketAddress addr, final int bookieIndex) {\n         blockAddCompletions.incrementAndGet();\n \n         synchronized (metadata) {\n@@ -683,7 +832,7 @@ void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n             }\n \n             try {\n-                ArrayList<InetSocketAddress> newEnsemble = replaceBookieInMetadata(addr, bookieIndex);\n+                ArrayList<BookieSocketAddress> newEnsemble = replaceBookieInMetadata(addr, bookieIndex);\n \n                 EnsembleInfo ensembleInfo = new EnsembleInfo(newEnsemble, bookieIndex,\n                                                              addr);\n@@ -699,12 +848,12 @@ void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n \n     // Contains newly reformed ensemble, bookieIndex, failedBookieAddress\n     private static final class EnsembleInfo {\n-        private final ArrayList<InetSocketAddress> newEnsemble;\n+        private final ArrayList<BookieSocketAddress> newEnsemble;\n         private final int bookieIndex;\n-        private final InetSocketAddress addr;\n+        private final BookieSocketAddress addr;\n \n-        public EnsembleInfo(ArrayList<InetSocketAddress> newEnsemble,\n-                int bookieIndex, InetSocketAddress addr) {\n+        public EnsembleInfo(ArrayList<BookieSocketAddress> newEnsemble, int bookieIndex,\n+                            BookieSocketAddress addr) {\n             this.newEnsemble = newEnsemble;\n             this.bookieIndex = bookieIndex;\n             this.addr = addr;\n@@ -727,6 +876,9 @@ public EnsembleInfo(ArrayList<InetSocketAddress> newEnsemble,\n         @Override\n         public void safeOperationComplete(final int rc, Void result) {\n             if (rc == BKException.Code.MetadataVersionException) {\n+                // We changed the ensemble, but got a version exception. We\n+                // should still consider this as an ensemble change\n+                ensembleChangeCounter.inc();\n                 rereadMetadata(new ReReadLedgerMetadataCb(rc,\n                                        ensembleInfo));\n                 return;\n@@ -740,6 +892,8 @@ public void safeOperationComplete(final int rc, Void result) {\n             }\n             blockAddCompletions.decrementAndGet();\n \n+            // We've successfully changed an ensemble\n+            ensembleChangeCounter.inc();\n             // the failed bookie has been replaced\n             unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);\n         }\n@@ -771,16 +925,18 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                             + \"while changing ensemble to: \"\n                             + ensembleInfo.newEnsemble\n                             + \", old meta data is \\n\"\n-                            + new String(metadata.serialize())\n+                            + new String(metadata.serialize(), UTF_8)\n                             + \"\\n, new meta data is \\n\"\n-                            + new String(newMeta.serialize())\n+                            + new String(newMeta.serialize(), UTF_8)\n                             + \"\\n ,closing ledger\");\n                     handleUnrecoverableErrorDuringAdd(rc);\n                 }\n             }\n         }\n \n         /**\n+         * Specific resolve conflicts happened when multiple bookies failures in same ensemble.\n+         * <p>\n          * Resolving the version conflicts between local ledgerMetadata and zk\n          * ledgerMetadata. This will do the following:\n          * <ul>\n@@ -790,40 +946,78 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n          * if the zk ledgerMetadata still contains the failed bookie, then\n          * update zookeeper with the newBookie otherwise send write request</li>\n          * </ul>\n+         * </p>\n          */\n         private boolean resolveConflict(LedgerMetadata newMeta) {\n-            // close have changed, another client has opened\n-            // the ledger, can't resolve this conflict.\n+            // make sure the ledger isn't closed by other ones.\n             if (metadata.getState() != newMeta.getState()) {\n                 return false;\n             }\n-            // update znode version\n-            metadata.setVersion(newMeta.getVersion());\n-            // Resolve the conflicts if zk metadata still contains failed\n-            // bookie.\n+\n+            // We should check number of ensembles since there are two kinds of metadata conflicts:\n+            // - Case 1: Multiple bookies involved in ensemble change.\n+            //           Number of ensembles should be same in this case.\n+            // - Case 2: Recovery (Auto/Manually) replaced ensemble and ensemble changed.\n+            //           The metadata changed due to ensemble change would have one more ensemble\n+            //           than the metadata changed by recovery.\n+            int diff = newMeta.getEnsembles().size() - metadata.getEnsembles().size();\n+            if (0 != diff) {\n+                if (-1 == diff) {\n+                    // Case 1: metadata is changed by other ones (e.g. Recovery)\n+                    return updateMetadataIfPossible(newMeta);\n+                }\n+                return false;\n+            }\n+\n+            //\n+            // Case 2:\n+            //\n+            // If the failed the bookie is still existed in the metadata (in zookeeper), it means that\n+            // the ensemble change of the failed bookie is failed due to metadata conflicts. so try to\n+            // update the ensemble change metadata again. Otherwise, it means that the ensemble change\n+            // is already succeed, unset the success and re-adding entries.\n             if (newMeta.currentEnsemble.get(ensembleInfo.bookieIndex).equals(\n                     ensembleInfo.addr)) {\n-                // Update ledger metadata in zk, if in-memory metadata doesn't\n-                // contains the failed bookie.\n+                // If the in-memory data doesn't contains the failed bookie, it means the ensemble change\n+                // didn't finish, so try to resolve conflicts with the metadata read from zookeeper and\n+                // update ensemble changed metadata again.\n                 if (!metadata.currentEnsemble.get(ensembleInfo.bookieIndex)\n                         .equals(ensembleInfo.addr)) {\n-                    LOG.info(\"Resolve ledger metadata conflict \"\n-                            + \"while changing ensemble to: \"\n-                            + ensembleInfo.newEnsemble\n-                            + \", old meta data is \\n\"\n-                            + new String(metadata.serialize())\n-                            + \"\\n, new meta data is \\n\"\n-                            + new String(newMeta.serialize()));\n-                    writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n+                    return updateMetadataIfPossible(newMeta);\n                 }\n             } else {\n+                ensembleChangeCounter.inc();\n+                // We've successfully changed an ensemble\n                 // the failed bookie has been replaced\n                 blockAddCompletions.decrementAndGet();\n                 unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);\n             }\n             return true;\n         }\n \n+        private boolean updateMetadataIfPossible(LedgerMetadata newMeta) {\n+            // if the local metadata is newer than zookeeper metadata, it means that metadata is updated\n+            // again when it was trying re-reading the metatada, re-kick the reread again\n+            if (metadata.isNewerThan(newMeta)) {\n+                rereadMetadata(this);\n+                return true;\n+            }\n+            // make sure the metadata doesn't changed by other ones.\n+            if (metadata.isConflictWith(newMeta)) {\n+                return false;\n+            }\n+            LOG.info(\"Resolve ledger metadata conflict while changing ensemble to: {},\"\n+                    + \" old meta data is \\n {} \\n, new meta data is \\n {}.\", new Object[] {\n+                    ensembleInfo.newEnsemble, metadata, newMeta });\n+            // update znode version\n+            metadata.setVersion(newMeta.getVersion());\n+            // merge ensemble infos from new meta except last ensemble\n+            // since they might be modified by recovery tool.\n+            metadata.mergeEnsembles(newMeta.getEnsembles());\n+            writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n+            return true;\n+        }\n+\n     };\n \n     void unsetSuccessAndSendWriteRequest(final int bookieIndex) {\n@@ -836,25 +1030,39 @@ void rereadMetadata(final GenericCallback<LedgerMetadata> cb) {\n         bk.getLedgerManager().readLedgerMetadata(ledgerId, cb);\n     }\n \n-    synchronized void recover(final GenericCallback<Void> cb) {\n-        if (metadata.isClosed()) {\n-            lastAddConfirmed = lastAddPushed = metadata.getLastEntryId();\n-            length = metadata.getLength();\n+    void recover(final GenericCallback<Void> cb) {\n+        boolean wasClosed = false;\n+        boolean wasInRecovery = false;\n \n+        synchronized (this) {\n+            if (metadata.isClosed()) {\n+                lastAddConfirmed = lastAddPushed = metadata.getLastEntryId();\n+                length = metadata.getLength();\n+                wasClosed = true;\n+            } else {\n+                wasClosed = false;\n+                if (metadata.isInRecovery()) {\n+                    wasInRecovery = true;\n+                } else {\n+                    wasInRecovery = false;\n+                    metadata.markLedgerInRecovery();\n+                }\n+            }\n+        }\n+\n+        if (wasClosed) {\n             // We are already closed, nothing to do\n             cb.operationComplete(BKException.Code.OK, null);\n             return;\n         }\n \n-        // if metadata is already in recover, dont try to write again,\n-        // just do the recovery from the starting point\n-        if (metadata.isInRecovery()) {\n+        if (wasInRecovery) {\n+            // if metadata is already in recover, dont try to write again,\n+            // just do the recovery from the starting point\n             new LedgerRecoveryOp(LedgerHandle.this, cb).initiate();\n             return;\n         }\n \n-        metadata.markLedgerInRecovery();\n-\n         writeLedgerConfig(new OrderedSafeGenericCallback<Void>(bk.mainWorkerPool, ledgerId) {\n             @Override\n             public void safeOperationComplete(final int rc, Void result) {\n@@ -892,7 +1100,7 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n             // noop\n         }\n     }\n-    \n+\n     private static class SyncReadCallback implements ReadCallback {\n         /**\n          * Implementation of callback interface for synchronous read method.\n@@ -906,9 +1114,10 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n          * @param ctx\n          *          control object\n          */\n+        @Override\n         public void readComplete(int rc, LedgerHandle lh,\n                                  Enumeration<LedgerEntry> seq, Object ctx) {\n-            \n+\n             SyncCounter counter = (SyncCounter) ctx;\n             synchronized (counter) {\n                 counter.setSequence(seq);\n@@ -934,6 +1143,7 @@ public void readComplete(int rc, LedgerHandle lh,\n          * @param ctx\n          *          control object\n          */\n+        @Override\n         public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n \n@@ -947,9 +1157,10 @@ public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n         /**\n          * Implementation of  callback interface for synchronous read last confirmed method.\n          */\n+        @Override\n         public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n             LastConfirmedCtx lcCtx = (LastConfirmedCtx) ctx;\n-            \n+\n             synchronized(lcCtx) {\n                 lcCtx.setRC(rc);\n                 lcCtx.setLastConfirmed(lastConfirmed);\n@@ -966,6 +1177,7 @@ public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n          * @param lh\n          * @param ctx\n          */\n+        @Override\n         public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setrc(rc);"},{"sha":"a20f34ade6af14e2b892afb243827e796b78329b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":120,"deletions":59,"changes":179,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,25 +15,28 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.TextFormat;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.BufferedReader;\n-import java.io.StringReader;\n import java.io.IOException;\n-import java.net.InetSocketAddress;\n+import java.io.StringReader;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.SortedMap;\n import java.util.TreeMap;\n-import java.util.Arrays;\n \n-import org.apache.bookkeeper.versioning.Version;\n-import com.google.protobuf.TextFormat;\n-import com.google.protobuf.ByteString;\n-import org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat;\n-import org.apache.bookkeeper.util.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import static com.google.common.base.Charsets.UTF_8;\n \n /**\n  * This class encapsulates all the ledger metadata that is persistently stored\n@@ -67,8 +68,9 @@\n     private long lastEntryId;\n \n     private LedgerMetadataFormat.State state;\n-    private SortedMap<Long, ArrayList<InetSocketAddress>> ensembles = new TreeMap<Long, ArrayList<InetSocketAddress>>();\n-    ArrayList<InetSocketAddress> currentEnsemble;\n+    private SortedMap<Long, ArrayList<BookieSocketAddress>> ensembles =\n+        new TreeMap<Long, ArrayList<BookieSocketAddress>>();\n+    ArrayList<BookieSocketAddress> currentEnsemble;\n     volatile Version version = Version.NEW;\n \n     private boolean hasPassword = false;\n@@ -96,6 +98,30 @@ public LedgerMetadata(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n         this.hasPassword = true;\n     }\n \n+    /**\n+     * Copy Constructor.\n+     */\n+    LedgerMetadata(LedgerMetadata other) {\n+        this.ensembleSize = other.ensembleSize;\n+        this.writeQuorumSize = other.writeQuorumSize;\n+        this.ackQuorumSize = other.ackQuorumSize;\n+        this.length = other.length;\n+        this.lastEntryId = other.lastEntryId;\n+        this.metadataFormatVersion = other.metadataFormatVersion;\n+        this.state = other.state;\n+        this.version = other.version;\n+        this.hasPassword = other.hasPassword;\n+        this.digestType = other.digestType;\n+        this.password = new byte[other.password.length];\n+        System.arraycopy(other.password, 0, this.password, 0, other.password.length);\n+        // copy the ensembles\n+        for (Entry<Long, ArrayList<BookieSocketAddress>> entry : other.ensembles.entrySet()) {\n+            long startEntryId = entry.getKey();\n+            ArrayList<BookieSocketAddress> newEnsemble = new ArrayList<BookieSocketAddress>(entry.getValue());\n+            this.addEnsemble(startEntryId, newEnsemble);\n+        }\n+    }\n+\n     private LedgerMetadata() {\n         this(0, 0, 0, BookKeeper.DigestType.MAC, new byte[] {});\n         this.hasPassword = false;\n@@ -108,10 +134,14 @@ private LedgerMetadata() {\n      * @return SortedMap of Ledger Fragments and the corresponding\n      * bookie ensembles that store the entries.\n      */\n-    public SortedMap<Long, ArrayList<InetSocketAddress>> getEnsembles() {\n+    public SortedMap<Long, ArrayList<BookieSocketAddress>> getEnsembles() {\n         return ensembles;\n     }\n \n+    void setEnsembles(SortedMap<Long, ArrayList<BookieSocketAddress>> ensembles) {\n+        this.ensembles = ensembles;\n+    }\n+\n     public int getEnsembleSize() {\n         return ensembleSize;\n     }\n@@ -183,28 +213,28 @@ void close(long entryId) {\n         state = LedgerMetadataFormat.State.CLOSED;\n     }\n \n-    void addEnsemble(long startEntryId, ArrayList<InetSocketAddress> ensemble) {\n+    void addEnsemble(long startEntryId, ArrayList<BookieSocketAddress> ensemble) {\n         assert ensembles.isEmpty() || startEntryId >= ensembles.lastKey();\n \n         ensembles.put(startEntryId, ensemble);\n         currentEnsemble = ensemble;\n     }\n \n-    ArrayList<InetSocketAddress> getEnsemble(long entryId) {\n+    ArrayList<BookieSocketAddress> getEnsemble(long entryId) {\n         // the head map cannot be empty, since we insert an ensemble for\n         // entry-id 0, right when we start\n         return ensembles.get(ensembles.headMap(entryId + 1).lastKey());\n     }\n \n     /**\n-     * the entry id > the given entry-id at which the next ensemble change takes\n-     * place ( -1 if no further ensemble changes)\n+     * the entry id greater than the given entry-id at which the next ensemble change takes\n+     * place\n      *\n      * @param entryId\n-     * @return\n+     * @return the entry id of the next ensemble change (-1 if no further ensemble changes) \n      */\n     long getNextEnsembleChange(long entryId) {\n-        SortedMap<Long, ArrayList<InetSocketAddress>> tailMap = ensembles.tailMap(entryId + 1);\n+        SortedMap<Long, ArrayList<BookieSocketAddress>> tailMap = ensembles.tailMap(entryId + 1);\n \n         if (tailMap.isEmpty()) {\n             return -1;\n@@ -231,11 +261,11 @@ long getNextEnsembleChange(long entryId) {\n             builder.setDigestType(digestType).setPassword(ByteString.copyFrom(password));\n         }\n \n-        for (Map.Entry<Long, ArrayList<InetSocketAddress>> entry : ensembles.entrySet()) {\n+        for (Map.Entry<Long, ArrayList<BookieSocketAddress>> entry : ensembles.entrySet()) {\n             LedgerMetadataFormat.Segment.Builder segmentBuilder = LedgerMetadataFormat.Segment.newBuilder();\n             segmentBuilder.setFirstEntryId(entry.getKey());\n-            for (InetSocketAddress addr : entry.getValue()) {\n-                segmentBuilder.addEnsembleMember(addr.getAddress().getHostAddress() + \":\" + addr.getPort());\n+            for (BookieSocketAddress addr : entry.getValue()) {\n+                segmentBuilder.addEnsembleMember(addr.toString());\n             }\n             builder.addSegment(segmentBuilder.build());\n         }\n@@ -244,19 +274,19 @@ long getNextEnsembleChange(long entryId) {\n         s.append(VERSION_KEY).append(tSplitter).append(CURRENT_METADATA_FORMAT_VERSION).append(lSplitter);\n         s.append(TextFormat.printToString(builder.build()));\n         LOG.debug(\"Serialized config: {}\", s);\n-        return s.toString().getBytes();\n+        return s.toString().getBytes(UTF_8);\n     }\n \n     private byte[] serializeVersion1() {\n         StringBuilder s = new StringBuilder();\n         s.append(VERSION_KEY).append(tSplitter).append(metadataFormatVersion).append(lSplitter);\n         s.append(writeQuorumSize).append(lSplitter).append(ensembleSize).append(lSplitter).append(length);\n \n-        for (Map.Entry<Long, ArrayList<InetSocketAddress>> entry : ensembles.entrySet()) {\n+        for (Map.Entry<Long, ArrayList<BookieSocketAddress>> entry : ensembles.entrySet()) {\n             s.append(lSplitter).append(entry.getKey());\n-            for (InetSocketAddress addr : entry.getValue()) {\n+            for (BookieSocketAddress addr : entry.getValue()) {\n                 s.append(tSplitter);\n-                s.append(StringUtils.addrToString(addr));\n+                s.append(addr.toString());\n             }\n         }\n \n@@ -268,7 +298,7 @@ long getNextEnsembleChange(long entryId) {\n \n         LOG.debug(\"Serialized config: {}\", s);\n \n-        return s.toString().getBytes();\n+        return s.toString().getBytes(UTF_8);\n     }\n \n     /**\n@@ -286,15 +316,14 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version) throws I\n         LedgerMetadata lc = new LedgerMetadata();\n         lc.version = version;\n \n-        String config = new String(bytes);\n+        String config = new String(bytes, UTF_8);\n \n         LOG.debug(\"Parsing Config: {}\", config);\n         BufferedReader reader = new BufferedReader(new StringReader(config));\n         String versionLine = reader.readLine();\n         if (versionLine == null) {\n             throw new IOException(\"Invalid metadata. Content missing\");\n         }\n-        int i = 0;\n         if (versionLine.startsWith(VERSION_KEY)) {\n             String parts[] = versionLine.split(tSplitter);\n             lc.metadataFormatVersion = new Integer(parts[1]);\n@@ -341,9 +370,9 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version) throws I\n         }\n \n         for (LedgerMetadataFormat.Segment s : data.getSegmentList()) {\n-            ArrayList<InetSocketAddress> addrs = new ArrayList<InetSocketAddress>();\n+            ArrayList<BookieSocketAddress> addrs = new ArrayList<BookieSocketAddress>();\n             for (String member : s.getEnsembleMemberList()) {\n-                addrs.add(StringUtils.parseAddr(member));\n+                addrs.add(new BookieSocketAddress(member));\n             }\n             lc.addEnsemble(s.getFirstEntryId(), addrs);\n         }\n@@ -374,9 +403,9 @@ static LedgerMetadata parseVersion1Config(LedgerMetadata lc,\n                     lc.state = LedgerMetadataFormat.State.OPEN;\n                 }\n \n-                ArrayList<InetSocketAddress> addrs = new ArrayList<InetSocketAddress>();\n+                ArrayList<BookieSocketAddress> addrs = new ArrayList<BookieSocketAddress>();\n                 for (int j = 1; j < parts.length; j++) {\n-                    addrs.add(StringUtils.parseAddr(parts[j]));\n+                    addrs.add(new BookieSocketAddress(parts[j]));\n                 }\n                 lc.addEnsemble(new Long(parts[0]), addrs);\n                 line = reader.readLine();\n@@ -389,7 +418,7 @@ static LedgerMetadata parseVersion1Config(LedgerMetadata lc,\n \n     /**\n      * Updates the version of this metadata.\n-     * \n+     *\n      * @param v Version\n      */\n     public void setVersion(Version v) {\n@@ -398,21 +427,34 @@ public void setVersion(Version v) {\n \n     /**\n      * Returns the last version.\n-     * \n+     *\n      * @return version\n      */\n     public Version getVersion() {\n         return this.version;\n     }\n \n     /**\n-     * Resolve conflict with new updated metadata.\n+     * Is the metadata newer than given <i>newMeta</i>.\n+     *\n+     * @param newMeta the metadata to compare\n+     * @return true if <i>this</i> is newer than <i>newMeta</i>, false otherwise\n+     */\n+    boolean isNewerThan(LedgerMetadata newMeta) {\n+        if (null == version) {\n+            return false;\n+        }\n+        return Version.Occurred.AFTER == version.compare(newMeta.version);\n+    }\n+\n+    /**\n+     * Is the metadata conflict with new updated metadata.\n      *\n      * @param newMeta\n      *          Re-read metadata\n-     * @return true if the conflict has been resolved, otherwise false.\n+     * @return true if the metadata is conflict.\n      */\n-    boolean resolveConflict(LedgerMetadata newMeta) {\n+    boolean isConflictWith(LedgerMetadata newMeta) {\n         /*\n          *  if length & close have changed, then another client has\n          *  opened the ledger, can't resolve this conflict.\n@@ -426,42 +468,61 @@ boolean resolveConflict(LedgerMetadata newMeta) {\n             state != newMeta.state ||\n             !digestType.equals(newMeta.digestType) ||\n             !Arrays.equals(password, newMeta.password)) {\n-            return false;\n+            return true;\n         }\n         if (state == LedgerMetadataFormat.State.CLOSED\n             && lastEntryId != newMeta.lastEntryId) {\n-            return false;\n-        }\n-        // new meta znode version should be larger than old one\n-        if (null != version &&\n-            Version.Occurred.AFTER == version.compare(newMeta.version)) {\n-            return false;\n+            return true;\n         }\n         // if ledger is closed, we can just take the new ensembles\n         if (newMeta.state != LedgerMetadataFormat.State.CLOSED) {\n-            // ensemble size should be same\n-            if (ensembles.size() != newMeta.ensembles.size()) {\n-                return false;\n+            // allow new metadata to be one ensemble less than current metadata\n+            // since ensemble change might kick in when recovery changed metadata\n+            int diff = ensembles.size() - newMeta.ensembles.size();\n+            if (0 != diff && 1 != diff) {\n+                return true;\n             }\n             // ensemble distribution should be same\n             // we don't check the detail ensemble, since new bookie will be set\n             // using recovery tool.\n             Iterator<Long> keyIter = ensembles.keySet().iterator();\n             Iterator<Long> newMetaKeyIter = newMeta.ensembles.keySet().iterator();\n-            for (int i=0; i<ensembles.size(); i++) {\n+            for (int i=0; i<newMeta.ensembles.size(); i++) {\n                 Long curKey = keyIter.next();\n                 Long newMetaKey = newMetaKeyIter.next();\n                 if (!curKey.equals(newMetaKey)) {\n-                    return false;\n+                    return true;\n                 }\n             }\n         }\n-        /*\n-         *  if the conflict has been resolved, then update\n-         *  ensemble and znode version\n-         */\n-        ensembles = newMeta.ensembles;\n-        version = newMeta.version;\n-        return true;\n+        return false;\n     }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"(meta:\").append(new String(serialize(), UTF_8)).append(\", version:\").append(version).append(\")\");\n+        return sb.toString();\n+    }\n+\n+    void mergeEnsembles(SortedMap<Long, ArrayList<BookieSocketAddress>> newEnsembles) {\n+        // allow new metadata to be one ensemble less than current metadata\n+        // since ensemble change might kick in when recovery changed metadata\n+        int diff = ensembles.size() - newEnsembles.size();\n+        if (0 != diff && 1 != diff) {\n+            return;\n+        }\n+        int i = 0;\n+        for (Entry<Long, ArrayList<BookieSocketAddress>> entry : newEnsembles.entrySet()) {\n+            ++i;\n+            if (ensembles.size() != i) {\n+                // we should use last ensemble from current metadata\n+                // not the new metadata read from zookeeper\n+                long key = entry.getKey();\n+                ArrayList<BookieSocketAddress> ensemble = entry.getValue();\n+                ensembles.put(key, ensemble);\n+            }\n+        }\n+    }\n+\n }"},{"sha":"4df89ea24bf3604d6aa113c73c53ca4e01944d27","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":38,"deletions":22,"changes":60,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -28,6 +28,8 @@\n import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n \n import org.slf4j.Logger;\n@@ -49,6 +51,8 @@\n     final DigestType digestType;\n     boolean doRecovery = true;\n     boolean administrativeOpen = false;\n+    long startTime;\n+    OpStatsLogger openOpLogger;\n \n     /**\n      * Constructor.\n@@ -85,6 +89,10 @@ public LedgerOpenOp(BookKeeper bk, long ledgerId, OpenCallback cb, Object ctx) {\n      * Inititates the ledger open operation\n      */\n     public void initiate() {\n+        startTime = MathUtils.nowInNano();\n+\n+        openOpLogger = bk.getOpenOpLogger();\n+\n         /**\n          * Asynchronously read the ledger metadata node.\n          */\n@@ -102,10 +110,11 @@ public void initiateWithoutRecovery() {\n     /**\n      * Implements Open Ledger Callback.\n      */\n+    @Override\n     public void operationComplete(int rc, LedgerMetadata metadata) {\n         if (BKException.Code.OK != rc) {\n             // open ledger failed.\n-            cb.openComplete(rc, null, this.ctx);\n+            openComplete(rc, null);\n             return;\n         }\n \n@@ -125,65 +134,72 @@ public void operationComplete(int rc, LedgerMetadata metadata) {\n             if (metadata.hasPassword()) {\n                 if (!Arrays.equals(passwd, metadata.getPassword())) {\n                     LOG.error(\"Provided passwd does not match that in metadata\");\n-                    cb.openComplete(BKException.Code.UnauthorizedAccessException, null, this.ctx);\n+                    openComplete(BKException.Code.UnauthorizedAccessException, null);\n                     return;\n                 }\n                 if (digestType != metadata.getDigestType()) {\n                     LOG.error(\"Provided digest does not match that in metadata\");\n-                    cb.openComplete(BKException.Code.DigestMatchException, null, this.ctx);\n+                    openComplete(BKException.Code.DigestMatchException, null);\n                     return;\n                 }\n             }\n         }\n \n         // get the ledger metadata back\n         try {\n-            lh = new ReadOnlyLedgerHandle(bk, ledgerId, metadata, digestType, passwd);\n+            lh = new ReadOnlyLedgerHandle(bk, ledgerId, metadata, digestType, passwd, !doRecovery);\n         } catch (GeneralSecurityException e) {\n             LOG.error(\"Security exception while opening ledger: \" + ledgerId, e);\n-            cb.openComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);\n+            openComplete(BKException.Code.DigestNotInitializedException, null);\n             return;\n         } catch (NumberFormatException e) {\n             LOG.error(\"Incorrectly entered parameter throttle: \" + bk.getConf().getThrottleValue(), e);\n-            cb.openComplete(BKException.Code.IncorrectParameterException, null, this.ctx);\n+            openComplete(BKException.Code.IncorrectParameterException, null);\n             return;\n         }\n \n         if (metadata.isClosed()) {\n             // Ledger was closed properly\n-            cb.openComplete(BKException.Code.OK, lh, this.ctx);\n+            openComplete(BKException.Code.OK, lh);\n             return;\n         }\n \n         if (doRecovery) {\n             lh.recover(new OrderedSafeGenericCallback<Void>(bk.mainWorkerPool, ledgerId) {\n-                    @Override\n-                    public void safeOperationComplete(int rc, Void result) {\n-                        if (rc == BKException.Code.OK) {\n-                            cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);\n-                        } else if (rc == BKException.Code.UnauthorizedAccessException) {\n-                            cb.openComplete(BKException.Code.UnauthorizedAccessException, null, LedgerOpenOp.this.ctx);\n-                        } else {\n-                            cb.openComplete(BKException.Code.LedgerRecoveryException, null, LedgerOpenOp.this.ctx);\n-                        }\n+                @Override\n+                public void safeOperationComplete(int rc, Void result) {\n+                    if (rc == BKException.Code.OK) {\n+                        openComplete(BKException.Code.OK, lh);\n+                    } else if (rc == BKException.Code.UnauthorizedAccessException) {\n+                        openComplete(BKException.Code.UnauthorizedAccessException, null);\n+                    } else {\n+                        openComplete(bk.getReturnRc(BKException.Code.LedgerRecoveryException), null);\n                     }\n-                });\n+                }\n+            });\n         } else {\n             lh.asyncReadLastConfirmed(new ReadLastConfirmedCallback() {\n-\n                 @Override\n                 public void readLastConfirmedComplete(int rc,\n                         long lastConfirmed, Object ctx) {\n                     if (rc != BKException.Code.OK) {\n-                        cb.openComplete(BKException.Code.ReadException, null, LedgerOpenOp.this.ctx);\n+                        openComplete(bk.getReturnRc(BKException.Code.ReadException), null);\n                     } else {\n                         lh.lastAddConfirmed = lh.lastAddPushed = lastConfirmed;\n-                        cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);\n+                        openComplete(BKException.Code.OK, lh);\n                     }\n                 }\n-                \n             }, null);\n-            \n+\n+        }\n+    }\n+\n+    void openComplete(int rc, LedgerHandle lh) {\n+        if (BKException.Code.OK != rc) {\n+            openOpLogger.registerFailedEvent(startTime);\n+        } else {\n+            openOpLogger.registerSuccessfulEvent(startTime);\n         }\n+        cb.openComplete(rc, lh, ctx);\n     }\n }"},{"sha":"7ed7aa251751f78f691e46be9d16fe605c33ca33","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":82,"deletions":45,"changes":127,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -19,21 +19,18 @@\n  */\n \n import java.util.Enumeration;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n-import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n-import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n-import org.apache.bookkeeper.client.LedgerHandle.NoopCloseCallback;\n import org.apache.bookkeeper.client.DigestManager.RecoveryData;\n-import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-\n import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n  * This class encapsulated the ledger recovery operation. It first does a read\n@@ -46,34 +43,56 @@\n class LedgerRecoveryOp implements ReadCallback, AddCallback {\n     static final Logger LOG = LoggerFactory.getLogger(LedgerRecoveryOp.class);\n     LedgerHandle lh;\n-    int numResponsesPending;\n-    boolean proceedingWithRecovery = false;\n-    long maxAddPushed = LedgerHandle.INVALID_ENTRY_ID;\n-    long maxAddConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n-    long maxLength = 0;\n+    AtomicLong readCount, writeCount;\n+    AtomicBoolean readDone;\n+    AtomicBoolean callbackDone;\n+    long entryToRead;\n+    // keep a copy of metadata for recovery.\n+    LedgerMetadata metadataForRecovery;\n \n     GenericCallback<Void> cb;\n \n+    class RecoveryReadOp extends PendingReadOp {\n+\n+        RecoveryReadOp(LedgerHandle lh, ScheduledExecutorService scheduler, long startEntryId,\n+                long endEntryId, ReadCallback cb, Object ctx) {\n+            super(lh, scheduler, startEntryId, endEntryId, cb, ctx);\n+        }\n+\n+        @Override\n+        protected LedgerMetadata getLedgerMetadata() {\n+            return metadataForRecovery;\n+        }\n+\n+    }\n+\n     public LedgerRecoveryOp(LedgerHandle lh, GenericCallback<Void> cb) {\n+        readCount = new AtomicLong(0);\n+        writeCount = new AtomicLong(0);\n+        readDone = new AtomicBoolean(false);\n+        callbackDone = new AtomicBoolean(false);\n         this.cb = cb;\n         this.lh = lh;\n-        numResponsesPending = lh.metadata.getEnsembleSize();\n     }\n \n     public void initiate() {\n         ReadLastConfirmedOp rlcop = new ReadLastConfirmedOp(lh,\n                 new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n-                public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n-                    if (rc == BKException.Code.OK) {\n-                        lh.lastAddPushed = lh.lastAddConfirmed = data.lastAddConfirmed;\n-                        lh.length = data.length;\n-                        doRecoveryRead();\n-                    } else if (rc == BKException.Code.UnauthorizedAccessException) {\n-                        cb.operationComplete(rc, null);\n-                    } else {\n-                        cb.operationComplete(BKException.Code.ReadException, null);\n+                    public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n+                        if (rc == BKException.Code.OK) {\n+                            lh.lastAddPushed = lh.lastAddConfirmed = data.lastAddConfirmed;\n+                            lh.length = data.length;\n+                            entryToRead = lh.lastAddConfirmed;\n+                            // keep a copy of ledger metadata before proceeding\n+                            // ledger recovery\n+                            metadataForRecovery = new LedgerMetadata(lh.getLedgerMetadata());\n+                            doRecoveryRead();\n+                        } else if (rc == BKException.Code.UnauthorizedAccessException) {\n+                            cb.operationComplete(rc, null);\n+                        } else {\n+                            cb.operationComplete(BKException.Code.ReadException, null);\n+                        }\n                     }\n-                }\n                 });\n \n         /**\n@@ -88,15 +107,38 @@ public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n      * Try to read past the last confirmed.\n      */\n     private void doRecoveryRead() {\n-        lh.lastAddConfirmed++;\n-        lh.asyncReadEntries(lh.lastAddConfirmed, lh.lastAddConfirmed, this, null);\n+        if (!callbackDone.get()) {\n+            entryToRead++;\n+            try {\n+                new RecoveryReadOp(lh, lh.bk.scheduler, entryToRead, entryToRead, this, null).initiate();\n+            } catch (InterruptedException e) {\n+                readComplete(BKException.Code.InterruptedException, lh, null, null);\n+            }\n+        }\n+    }\n+\n+    private void closeAndCallback() {\n+        if (callbackDone.compareAndSet(false, true)) {\n+            lh.asyncCloseInternal(new CloseCallback() {\n+                @Override\n+                public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n+                    if (rc != BKException.Code.OK) {\n+                        LOG.warn(\"Close ledger {} failed during recovery: \",\n+                            LedgerRecoveryOp.this.lh.getId(), BKException.getMessage(rc));\n+                        cb.operationComplete(rc, null);\n+                    } else {\n+                        cb.operationComplete(BKException.Code.OK, null);\n+                        LOG.debug(\"After closing length is: {}\", lh.getLength());\n+                    }\n+                }\n+            }, null, BKException.Code.LedgerClosedException);\n+        }\n     }\n \n     @Override\n     public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n-        // get back to prev value\n-        lh.lastAddConfirmed--;\n         if (rc == BKException.Code.OK) {\n+            readCount.incrementAndGet();\n             LedgerEntry entry = seq.nextElement();\n             byte[] data = entry.getEntry();\n \n@@ -109,27 +151,20 @@ public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n                 lh.length = entry.getLength() - (long) data.length;\n             }\n             lh.asyncRecoveryAddEntry(data, 0, data.length, this, null);\n+            doRecoveryRead();\n             return;\n         }\n \n         if (rc == BKException.Code.NoSuchEntryException || rc == BKException.Code.NoSuchLedgerExistsException) {\n-            lh.asyncCloseInternal(new CloseCallback() {\n-                @Override\n-                public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n-                    if (rc != KeeperException.Code.OK.intValue()) {\n-                        LOG.warn(\"Close failed: \" + BKException.getMessage(rc));\n-                        cb.operationComplete(BKException.Code.ZKException, null);\n-                    } else {\n-                        cb.operationComplete(BKException.Code.OK, null);\n-                        LOG.debug(\"After closing length is: {}\", lh.getLength());\n-                    }\n-                }\n-                }, null, BKException.Code.LedgerClosedException);\n+            readDone.set(true);\n+            if (readCount.get() == writeCount.get()) {\n+                closeAndCallback();\n+            }\n             return;\n         }\n \n         // otherwise, some other error, we can't handle\n-        LOG.error(\"Failure \" + BKException.getMessage(rc) + \" while reading entry: \" + (lh.lastAddConfirmed + 1)\n+        LOG.error(\"Failure \" + BKException.getMessage(rc) + \" while reading entry: \" + entryToRead\n                   + \" ledger: \" + lh.ledgerId + \" while recovering ledger\");\n         cb.operationComplete(rc, null);\n         return;\n@@ -138,16 +173,18 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n     @Override\n     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n         if (rc != BKException.Code.OK) {\n-            // Give up, we can't recover from this error\n-\n             LOG.error(\"Failure \" + BKException.getMessage(rc) + \" while writing entry: \" + (lh.lastAddConfirmed + 1)\n                       + \" ledger: \" + lh.ledgerId + \" while recovering ledger\");\n-            cb.operationComplete(rc, null);\n+            if (callbackDone.compareAndSet(false, true)) {\n+                // Give up, we can't recover from this error\n+                cb.operationComplete(rc, null);\n+            }\n             return;\n         }\n-\n-        doRecoveryRead();\n-\n+        long numAdd = writeCount.incrementAndGet();\n+        if (readDone.get() && readCount.get() == numAdd) {\n+            closeAndCallback();\n+        }\n     }\n \n }"},{"sha":"df09d527741b5c43ba7e3dbccf7ccdc763968ee0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -28,8 +28,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n class MacDigestManager extends DigestManager {\n-    final static Logger LOG = LoggerFactory.getLogger(MacDigestManager.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(MacDigestManager.class);\n \n     public static String DIGEST_ALGORITHM = \"SHA-1\";\n     public static String KEY_ALGORITHM = \"HmacSHA1\";\n@@ -59,7 +61,7 @@ public MacDigestManager(long ledgerId, byte[] passwd) throws GeneralSecurityExce\n \n     static byte[] genDigest(String pad, byte[] passwd) throws NoSuchAlgorithmException {\n         MessageDigest digest = MessageDigest.getInstance(DIGEST_ALGORITHM);\n-        digest.update(pad.getBytes());\n+        digest.update(pad.getBytes(UTF_8));\n         digest.update(passwd);\n         return digest.digest();\n     }"},{"sha":"1b92d093792b56ae7ebb55c7f3debf8b6cd61055","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":40,"deletions":10,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -19,13 +19,16 @@\n \n import java.util.HashSet;\n import java.util.Set;\n-import java.net.InetSocketAddress;\n+\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.util.MathUtils;\n+import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n  * This represents a pending add operation. When it has got success from all\n@@ -37,27 +40,32 @@\n  *\n  */\n class PendingAddOp implements WriteCallback {\n-    final static Logger LOG = LoggerFactory.getLogger(PendingAddOp.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(PendingAddOp.class);\n \n     ChannelBuffer toSend;\n     AddCallback cb;\n     Object ctx;\n     long entryId;\n+    int entryLength;\n     Set<Integer> writeSet;\n \n     DistributionSchedule.AckSet ackSet;\n     boolean completed = false;\n \n     LedgerHandle lh;\n     boolean isRecoveryAdd = false;\n+    long requestTimeMillis;\n+    OpStatsLogger addOpLogger;\n \n     PendingAddOp(LedgerHandle lh, AddCallback cb, Object ctx) {\n         this.lh = lh;\n         this.cb = cb;\n         this.ctx = ctx;\n         this.entryId = LedgerHandle.INVALID_ENTRY_ID;\n-        \n+\n         ackSet = lh.distributionSchedule.getAckSet();\n+\n+        addOpLogger = lh.bk.getAddOpLogger();\n     }\n \n     /**\n@@ -121,32 +129,46 @@ void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n         sendWriteRequest(bookieIndex);\n     }\n \n-    void initiate(ChannelBuffer toSend) {\n+    void initiate(ChannelBuffer toSend, int entryLength) {\n+        requestTimeMillis = MathUtils.now();\n         this.toSend = toSend;\n+        this.entryLength = entryLength;\n         for (int bookieIndex : writeSet) {\n             sendWriteRequest(bookieIndex);\n         }\n     }\n \n     @Override\n-    public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n+    public void writeComplete(int rc, long ledgerId, long entryId, BookieSocketAddress addr, Object ctx) {\n         int bookieIndex = (Integer) ctx;\n \n+        if (completed) {\n+            // I am already finished, ignore incoming responses.\n+            // otherwise, we might hit the following error handling logic, which might cause bad things.\n+            return;\n+        }\n \n         switch (rc) {\n         case BKException.Code.OK:\n             // continue\n             break;\n+        case BKException.Code.ClientClosedException:\n+            // bookie client is closed.\n+            lh.errorOutPendingAdds(rc);\n+            return;\n         case BKException.Code.LedgerFencedException:\n-            LOG.warn(\"Fencing exception on write: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Fencing exception on write: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleUnrecoverableErrorDuringAdd(rc);\n             return;\n         case BKException.Code.UnauthorizedAccessException:\n-            LOG.warn(\"Unauthorized access exception on write: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Unauthorized access exception on write: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleUnrecoverableErrorDuringAdd(rc);\n             return;\n         default:\n-            LOG.warn(\"Write did not succeed: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Write did not succeed: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleBookieFailure(addr, bookieIndex);\n             return;\n         }\n@@ -167,6 +189,14 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n     }\n \n     void submitCallback(final int rc) {\n+        long latencyMillis = MathUtils.now() - requestTimeMillis;\n+        if (rc != BKException.Code.OK) {\n+            addOpLogger.registerFailedEvent(latencyMillis);\n+            LOG.error(\"Write of ledger entry to quorum failed: L{} E{}\",\n+                      lh.getId(), entryId);\n+        } else {\n+            addOpLogger.registerSuccessfulEvent(latencyMillis);\n+        }\n         cb.addComplete(rc, lh, entryId, ctx);\n     }\n "},{"sha":"e548f3d456a2a1d9d0ace577a870c8a99bb65912","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":115,"deletions":65,"changes":180,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,28 +18,33 @@\n  * under the License.\n  *\n  */\n-import java.net.InetSocketAddress;\n-import java.util.concurrent.ArrayBlockingQueue;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.ScheduledFuture;\n+package org.apache.bookkeeper.client;\n+\n import java.util.ArrayList;\n+import java.util.BitSet;\n import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.List;\n import java.util.NoSuchElementException;\n import java.util.Queue;\n-import java.util.BitSet;\n import java.util.Set;\n-import java.util.HashSet;\n-import java.util.List;\n-\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n+\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBufferInputStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Sequence of entries of a ledger that represents a pending read operation.\n@@ -51,19 +54,22 @@\n  *\n  */\n class PendingReadOp implements Enumeration<LedgerEntry>, ReadEntryCallback {\n-    Logger LOG = LoggerFactory.getLogger(PendingReadOp.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(PendingReadOp.class);\n \n     final int speculativeReadTimeout;\n     final private ScheduledExecutorService scheduler;\n     private ScheduledFuture<?> speculativeTask = null;\n     Queue<LedgerEntryRequest> seq;\n-    Set<InetSocketAddress> heardFromHosts;\n+    Set<BookieSocketAddress> heardFromHosts;\n     ReadCallback cb;\n     Object ctx;\n     LedgerHandle lh;\n     long numPendingEntries;\n     long startEntryId;\n     long endEntryId;\n+    long requestTimeMillis;\n+    OpStatsLogger readOpLogger;\n+\n     final int maxMissedReadsAllowed;\n \n     class LedgerEntryRequest extends LedgerEntry {\n@@ -74,12 +80,12 @@\n         int firstError = BKException.Code.OK;\n         int numMissedEntryReads = 0;\n \n-        final ArrayList<InetSocketAddress> ensemble;\n+        final ArrayList<BookieSocketAddress> ensemble;\n         final List<Integer> writeSet;\n         final BitSet sentReplicas;\n         final BitSet erroredReplicas;\n \n-        LedgerEntryRequest(ArrayList<InetSocketAddress> ensemble, long lId, long eId) {\n+        LedgerEntryRequest(ArrayList<BookieSocketAddress> ensemble, long lId, long eId) {\n             super(lId, eId);\n \n             this.ensemble = ensemble;\n@@ -88,7 +94,7 @@\n             this.erroredReplicas = new BitSet(lh.getLedgerMetadata().getWriteQuorumSize());\n         }\n \n-        private int getReplicaIndex(InetSocketAddress host) {\n+        private int getReplicaIndex(BookieSocketAddress host) {\n             int bookieIndex = ensemble.indexOf(host);\n             if (bookieIndex == -1) {\n                 return NOT_FOUND;\n@@ -107,9 +113,9 @@ private BitSet getSentToBitSet() {\n             return b;\n         }\n \n-        private BitSet getHeardFromBitSet(Set<InetSocketAddress> heardFromHosts) {\n+        private BitSet getHeardFromBitSet(Set<BookieSocketAddress> heardFromHosts) {\n             BitSet b = new BitSet(ensemble.size());\n-            for (InetSocketAddress i : heardFromHosts) {\n+            for (BookieSocketAddress i : heardFromHosts) {\n                 int index = ensemble.indexOf(i);\n                 if (index != -1) {\n                     b.set(index);\n@@ -127,8 +133,8 @@ private boolean readsOutstanding() {\n          * This returns the host we may have sent to for unit testing.\n          * @return host we sent to if we sent. null otherwise.\n          */\n-        synchronized InetSocketAddress maybeSendSpeculativeRead(Set<InetSocketAddress> heardFromHosts) {\n-            if (nextReplicaIndexToReadFrom >= lh.getLedgerMetadata().getWriteQuorumSize()) {\n+        synchronized BookieSocketAddress maybeSendSpeculativeRead(Set<BookieSocketAddress> heardFromHosts) {\n+            if (nextReplicaIndexToReadFrom >= getLedgerMetadata().getWriteQuorumSize()) {\n                 return null;\n             }\n \n@@ -145,8 +151,8 @@ synchronized InetSocketAddress maybeSendSpeculativeRead(Set<InetSocketAddress> h\n             }\n         }\n \n-        synchronized InetSocketAddress sendNextRead() {\n-            if (nextReplicaIndexToReadFrom >= lh.metadata.getWriteQuorumSize()) {\n+        synchronized BookieSocketAddress sendNextRead() {\n+            if (nextReplicaIndexToReadFrom >= getLedgerMetadata().getWriteQuorumSize()) {\n                 // we are done, the read has failed from all replicas, just fail the\n                 // read\n \n@@ -166,7 +172,7 @@ synchronized InetSocketAddress sendNextRead() {\n             nextReplicaIndexToReadFrom++;\n \n             try {\n-                InetSocketAddress to = ensemble.get(bookieIndex);\n+                BookieSocketAddress to = ensemble.get(bookieIndex);\n                 sendReadTo(to, this);\n                 sentReplicas.set(replica);\n                 return to;\n@@ -178,23 +184,29 @@ synchronized InetSocketAddress sendNextRead() {\n             }\n         }\n \n-        synchronized void logErrorAndReattemptRead(InetSocketAddress host, String errMsg, int rc) {\n+        synchronized void logErrorAndReattemptRead(BookieSocketAddress host, String errMsg, int rc) {\n             if (BKException.Code.OK == firstError ||\n-                BKException.Code.NoSuchEntryException == firstError) {\n+                BKException.Code.NoSuchEntryException == firstError ||\n+                BKException.Code.NoSuchLedgerExistsException == firstError) {\n                 firstError = rc;\n             } else if (BKException.Code.BookieHandleNotAvailableException == firstError &&\n-                       BKException.Code.NoSuchEntryException != rc) {\n-                // if other exception rather than NoSuchEntryException is returned\n-                // we need to update firstError to indicate that it might be a valid read but just failed.\n+                       BKException.Code.NoSuchEntryException != rc &&\n+                       BKException.Code.NoSuchLedgerExistsException != rc) {\n+                // if other exception rather than NoSuchEntryException or NoSuchLedgerExistsException is\n+                // returned we need to update firstError to indicate that it might be a valid read but just\n+                // failed.\n                 firstError = rc;\n             }\n-            if (BKException.Code.NoSuchEntryException == rc) {\n+            if (BKException.Code.NoSuchEntryException == rc ||\n+                BKException.Code.NoSuchLedgerExistsException == rc) {\n                 ++numMissedEntryReads;\n+                LOG.debug(\"No such entry found on bookie.  L{} E{} bookie: {}\",\n+                        new Object[] { lh.ledgerId, entryId, host });\n+            } else {\n+                LOG.debug(errMsg + \" while reading L{} E{} from bookie: {}\",\n+                          new Object[] { lh.ledgerId, entryId, host });\n             }\n \n-            LOG.error(errMsg + \" while reading entry: \" + entryId + \" ledgerId: \" + lh.ledgerId + \" from bookie: \"\n-                      + host);\n-\n             int replica = getReplicaIndex(host);\n             if (replica == NOT_FOUND) {\n                 LOG.error(\"Received error from a host which is not in the ensemble {} {}.\", host, ensemble);\n@@ -209,7 +221,7 @@ synchronized void logErrorAndReattemptRead(InetSocketAddress host, String errMsg\n \n         // return true if we managed to complete the entry\n         // return false if the read entry is not complete or it is already completed before\n-        boolean complete(InetSocketAddress host, final ChannelBuffer buffer) {\n+        boolean complete(BookieSocketAddress host, final ChannelBuffer buffer) {\n             ChannelBufferInputStream is;\n             try {\n                 is = lh.macManager.verifyDigestAndReturnData(entryId, buffer);\n@@ -236,6 +248,7 @@ boolean isComplete() {\n             return complete.get();\n         }\n \n+        @Override\n         public String toString() {\n             return String.format(\"L%d-E%d\", ledgerId, entryId);\n         }\n@@ -251,43 +264,65 @@ public String toString() {\n         this.endEntryId = endEntryId;\n         this.scheduler = scheduler;\n         numPendingEntries = endEntryId - startEntryId + 1;\n-        maxMissedReadsAllowed = lh.metadata.getWriteQuorumSize() - lh.metadata.getAckQuorumSize();\n+        maxMissedReadsAllowed = getLedgerMetadata().getWriteQuorumSize()\n+                - getLedgerMetadata().getAckQuorumSize();\n         speculativeReadTimeout = lh.bk.getConf().getSpeculativeReadTimeout();\n-        heardFromHosts = new HashSet<InetSocketAddress>();\n+        heardFromHosts = new HashSet<BookieSocketAddress>();\n+\n+        readOpLogger = lh.bk.getReadOpLogger();\n+    }\n+\n+    protected LedgerMetadata getLedgerMetadata() {\n+        return lh.metadata;\n+    }\n+\n+    private void cancelSpeculativeTask(boolean mayInterruptIfRunning) {\n+        if (speculativeTask != null) {\n+            speculativeTask.cancel(mayInterruptIfRunning);\n+            speculativeTask = null;\n+        }\n     }\n \n     public void initiate() throws InterruptedException {\n         long nextEnsembleChange = startEntryId, i = startEntryId;\n-\n-        ArrayList<InetSocketAddress> ensemble = null;\n+        this.requestTimeMillis = MathUtils.now();\n+        ArrayList<BookieSocketAddress> ensemble = null;\n \n         if (speculativeReadTimeout > 0) {\n-            speculativeTask = scheduler.scheduleWithFixedDelay(new Runnable() {\n-                    public void run() {\n-                        int x = 0;\n-                        for (LedgerEntryRequest r : seq) {\n-                            if (!r.isComplete()) {\n-                                if (null != r.maybeSendSpeculativeRead(heardFromHosts)) {\n-                                    LOG.debug(\"Send speculative read for {}. Hosts heard are {}.\",\n-                                              r, heardFromHosts);\n-                                    ++x;\n-                                }\n+            Runnable readTask = new Runnable() {\n+                public void run() {\n+                    int x = 0;\n+                    for (LedgerEntryRequest r : seq) {\n+                        if (!r.isComplete()) {\n+                            if (null == r.maybeSendSpeculativeRead(heardFromHosts)) {\n+                                // Subsequent speculative read will not materialize anyway\n+                                cancelSpeculativeTask(false);\n+                            } else {\n+                                LOG.debug(\"Send speculative read for {}. Hosts heard are {}.\",\n+                                          r, heardFromHosts);\n+                                ++x;\n                             }\n                         }\n-                        if (x > 0) {\n-                            LOG.info(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n-                                     new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n-                        }\n                     }\n-                }, speculativeReadTimeout, speculativeReadTimeout, TimeUnit.MILLISECONDS);\n+                    if (x > 0) {\n+                        LOG.debug(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n+                                  new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n+                    }\n+                }\n+            };\n+            try {\n+                speculativeTask = scheduler.scheduleWithFixedDelay(readTask,\n+                        speculativeReadTimeout, speculativeReadTimeout, TimeUnit.MILLISECONDS);\n+            } catch (RejectedExecutionException re) {\n+                LOG.debug(\"Failed to schedule speculative reads for ledger {} ({}, {}) : \",\n+                    new Object[] { lh.getId(), startEntryId, endEntryId, re });\n+            }\n         }\n \n         do {\n-            LOG.debug(\"Acquiring lock: {}\", i);\n-\n             if (i == nextEnsembleChange) {\n-                ensemble = lh.metadata.getEnsemble(i);\n-                nextEnsembleChange = lh.metadata.getNextEnsembleChange(i);\n+                ensemble = getLedgerMetadata().getEnsemble(i);\n+                nextEnsembleChange = getLedgerMetadata().getNextEnsembleChange(i);\n             }\n             LedgerEntryRequest entry = new LedgerEntryRequest(ensemble, lh.ledgerId, i);\n             seq.add(entry);\n@@ -298,19 +333,19 @@ public void run() {\n     }\n \n     private static class ReadContext {\n-        final InetSocketAddress to;\n+        final BookieSocketAddress to;\n         final LedgerEntryRequest entry;\n \n-        ReadContext(InetSocketAddress to, LedgerEntryRequest entry) {\n+        ReadContext(BookieSocketAddress to, LedgerEntryRequest entry) {\n             this.to = to;\n             this.entry = entry;\n         }\n     }\n \n-    void sendReadTo(InetSocketAddress to, LedgerEntryRequest entry) throws InterruptedException {\n+    void sendReadTo(BookieSocketAddress to, LedgerEntryRequest entry) throws InterruptedException {\n         lh.throttler.acquire();\n \n-        lh.bk.bookieClient.readEntry(to, lh.ledgerId, entry.entryId, \n+        lh.bk.bookieClient.readEntry(to, lh.ledgerId, entry.entryId,\n                                      this, new ReadContext(to, entry));\n     }\n \n@@ -338,16 +373,31 @@ public void readEntryComplete(int rc, long ledgerId, final long entryId, final C\n     }\n \n     private void submitCallback(int code) {\n-        if (speculativeTask != null) {\n-            speculativeTask.cancel(true);\n-            speculativeTask = null;\n+        long latencyMillis = MathUtils.now() - requestTimeMillis;\n+        if (code != BKException.Code.OK) {\n+            long firstUnread = LedgerHandle.INVALID_ENTRY_ID;\n+            for (LedgerEntryRequest req : seq) {\n+                if (!req.isComplete()) {\n+                    firstUnread = req.getEntryId();\n+                    break;\n+                }\n+            }\n+            LOG.error(\"Read of ledger entry failed: L{} E{}-E{}, Heard from {}. First unread entry is {}\",\n+                    new Object[] { lh.getId(), startEntryId, endEntryId, heardFromHosts, firstUnread });\n+            readOpLogger.registerFailedEvent(latencyMillis);\n+        } else {\n+            readOpLogger.registerSuccessfulEvent(latencyMillis);\n         }\n+        cancelSpeculativeTask(true);\n         cb.readComplete(code, lh, PendingReadOp.this, PendingReadOp.this.ctx);\n     }\n+\n+    @Override\n     public boolean hasMoreElements() {\n         return !seq.isEmpty();\n     }\n \n+    @Override\n     public LedgerEntry nextElement() throws NoSuchElementException {\n         return seq.remove();\n     }"},{"sha":"7b15d9e6e8a17d19d495245382dcbe8d07e6b584","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","status":"added","additions":572,"deletions":0,"changes":572,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,572 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.conf.Configurable;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.net.CachedDNSToSwitchMapping;\n+import org.apache.bookkeeper.net.DNSToSwitchMapping;\n+import org.apache.bookkeeper.net.NetworkTopology;\n+import org.apache.bookkeeper.net.Node;\n+import org.apache.bookkeeper.net.NodeBase;\n+import org.apache.bookkeeper.net.ScriptBasedMapping;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+import org.apache.commons.configuration.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Simple rackware ensemble placement policy.\n+ *\n+ * Make most of the class and methods as protected, so it could be extended to implement other algorithms.\n+ */\n+public class RackawareEnsemblePlacementPolicy implements EnsemblePlacementPolicy {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(RackawareEnsemblePlacementPolicy.class);\n+\n+    public static final String REPP_DNS_RESOLVER_CLASS = \"reppDnsResolverClass\";\n+\n+    /**\n+     * Predicate used when choosing an ensemble.\n+     */\n+    protected static interface Predicate {\n+        boolean apply(BookieNode candidate, Ensemble chosenBookies);\n+    }\n+\n+    /**\n+     * Ensemble used to hold the result of an ensemble selected for placement.\n+     */\n+    protected static interface Ensemble {\n+\n+        /**\n+         * Append the new bookie node to the ensemble.\n+         *\n+         * @param node\n+         *          new candidate bookie node.\n+         */\n+        public void addBookie(BookieNode node);\n+\n+        /**\n+         * @return list of addresses representing the ensemble\n+         */\n+        public ArrayList<BookieSocketAddress> toList();\n+    }\n+\n+    protected static class TruePredicate implements Predicate {\n+\n+        public static final TruePredicate instance = new TruePredicate();\n+\n+        @Override\n+        public boolean apply(BookieNode candidate, Ensemble chosenNodes) {\n+            return true;\n+        }\n+\n+    }\n+\n+    protected static class EnsembleForReplacement implements Ensemble {\n+\n+        public static final EnsembleForReplacement instance = new EnsembleForReplacement();\n+        static final ArrayList<BookieSocketAddress> EMPTY_LIST = new ArrayList<BookieSocketAddress>(0);\n+\n+        @Override\n+        public void addBookie(BookieNode node) {\n+            // do nothing\n+        }\n+\n+        @Override\n+        public ArrayList<BookieSocketAddress> toList() {\n+            return EMPTY_LIST;\n+        }\n+\n+    }\n+\n+    /**\n+     * A predicate checking the rack coverage for write quorum in {@link RoundRobinDistributionSchedule},\n+     * which ensures that a write quorum should be covered by at least two racks.\n+     */\n+    protected static class RRRackCoverageEnsemble implements Predicate, Ensemble {\n+\n+        class QuorumCoverageSet {\n+            Set<String> racks = new HashSet<String>();\n+            int seenBookies = 0;\n+\n+            boolean apply(BookieNode candidate) {\n+                if (seenBookies + 1 == writeQuorumSize) {\n+                    return racks.size() > (racks.contains(candidate.getNetworkLocation()) ? 1 : 0);\n+                }\n+                return true;\n+            }\n+\n+            void addBookie(BookieNode candidate) {\n+                ++seenBookies;\n+                racks.add(candidate.getNetworkLocation());\n+            }\n+        }\n+\n+        final int ensembleSize;\n+        final int writeQuorumSize;\n+        final ArrayList<BookieNode> chosenNodes;\n+        private final QuorumCoverageSet[] quorums;\n+\n+        protected RRRackCoverageEnsemble(int ensembleSize, int writeQuorumSize) {\n+            this.ensembleSize = ensembleSize;\n+            this.writeQuorumSize = writeQuorumSize;\n+            this.chosenNodes = new ArrayList<BookieNode>(ensembleSize);\n+            this.quorums = new QuorumCoverageSet[ensembleSize];\n+        }\n+\n+        @Override\n+        public boolean apply(BookieNode candidate, Ensemble ensemble) {\n+            if (ensemble != this) {\n+                return false;\n+            }\n+            // candidate position\n+            int candidatePos = chosenNodes.size();\n+            int startPos = candidatePos - writeQuorumSize + 1;\n+            for (int i = startPos; i <= candidatePos; i++) {\n+                int idx = (i + ensembleSize) % ensembleSize;\n+                if (null == quorums[idx]) {\n+                    quorums[idx] = new QuorumCoverageSet();\n+                }\n+                if (!quorums[idx].apply(candidate)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public void addBookie(BookieNode node) {\n+            int candidatePos = chosenNodes.size();\n+            int startPos = candidatePos - writeQuorumSize + 1;\n+            for (int i = startPos; i <= candidatePos; i++) {\n+                int idx = (i + ensembleSize) % ensembleSize;\n+                if (null == quorums[idx]) {\n+                    quorums[idx] = new QuorumCoverageSet();\n+                }\n+                quorums[idx].addBookie(node);\n+            }\n+            chosenNodes.add(node);\n+        }\n+\n+        @Override\n+        public ArrayList<BookieSocketAddress> toList() {\n+            ArrayList<BookieSocketAddress> addresses = new ArrayList<BookieSocketAddress>(ensembleSize);\n+            for (BookieNode bn : chosenNodes) {\n+                addresses.add(bn.getAddr());\n+            }\n+            return addresses;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return chosenNodes.toString();\n+        }\n+\n+    }\n+\n+    protected static class BookieNode implements Node {\n+\n+        private final BookieSocketAddress addr; // identifier of a bookie node.\n+\n+        private int level; // the level in topology tree\n+        private Node parent; // its parent in topology tree\n+        private String location = NetworkTopology.DEFAULT_RACK; // its network location\n+        private final String name;\n+\n+        BookieNode(BookieSocketAddress addr, String networkLoc) {\n+            this.addr = addr;\n+            this.name = addr.toString();\n+            setNetworkLocation(networkLoc);\n+        }\n+\n+        public BookieSocketAddress getAddr() {\n+            return addr;\n+        }\n+\n+        @Override\n+        public int getLevel() {\n+            return level;\n+        }\n+\n+        @Override\n+        public void setLevel(int level) {\n+            this.level = level;\n+        }\n+\n+        @Override\n+        public Node getParent() {\n+            return parent;\n+        }\n+\n+        @Override\n+        public void setParent(Node parent) {\n+            this.parent = parent;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+\n+        @Override\n+        public String getNetworkLocation() {\n+            return location;\n+        }\n+\n+        @Override\n+        public void setNetworkLocation(String location) {\n+            this.location = location;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return name.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (!(obj instanceof BookieNode)) {\n+                return false;\n+            }\n+            BookieNode other = (BookieNode) obj;\n+            return getName().equals(other.getName());\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return String.format(\"<Bookie:%s>\", name);\n+        }\n+\n+    }\n+\n+    static class DefaultResolver implements DNSToSwitchMapping {\n+\n+        @Override\n+        public List<String> resolve(List<String> names) {\n+            List<String> rNames = new ArrayList<String>(names.size());\n+            for (@SuppressWarnings(\"unused\") String name : names) {\n+                rNames.add(NetworkTopology.DEFAULT_RACK);\n+            }\n+            return rNames;\n+        }\n+\n+        @Override\n+        public void reloadCachedMappings() {\n+            // nop\n+        }\n+\n+    };\n+\n+    // for now, we just maintain the writable bookies' topology\n+    private final NetworkTopology topology;\n+    private DNSToSwitchMapping dnsResolver;\n+    private final Map<BookieSocketAddress, BookieNode> knownBookies;\n+    private BookieNode localNode;\n+    private final ReentrantReadWriteLock rwLock;\n+\n+    public RackawareEnsemblePlacementPolicy() {\n+        topology = new NetworkTopology();\n+        knownBookies = new HashMap<BookieSocketAddress, BookieNode>();\n+\n+        rwLock = new ReentrantReadWriteLock();\n+    }\n+\n+    private BookieNode createBookieNode(BookieSocketAddress addr) {\n+        return new BookieNode(addr, resolveNetworkLocation(addr));\n+    }\n+\n+    @Override\n+    public EnsemblePlacementPolicy initialize(Configuration conf) {\n+        String dnsResolverName = conf.getString(REPP_DNS_RESOLVER_CLASS, ScriptBasedMapping.class.getName());\n+        try {\n+            dnsResolver = ReflectionUtils.newInstance(dnsResolverName, DNSToSwitchMapping.class);\n+            if (dnsResolver instanceof Configurable) {\n+                ((Configurable) dnsResolver).setConf(conf);\n+            }\n+        } catch (RuntimeException re) {\n+            LOG.info(\"Failed to initialize DNS Resolver {}, used default subnet resolver.\", dnsResolverName, re);\n+            dnsResolver = new DefaultResolver();\n+        }\n+\n+        BookieNode bn;\n+        try {\n+            bn = createBookieNode(new BookieSocketAddress(InetAddress.getLocalHost().getHostAddress(), 0));\n+        } catch (UnknownHostException e) {\n+            LOG.error(\"Failed to get local host address : \", e);\n+            bn = null;\n+        }\n+        localNode = bn;\n+        LOG.info(\"Initialize rackaware ensemble placement policy @ {} : {}.\", localNode,\n+                dnsResolver.getClass().getName());\n+        return this;\n+    }\n+\n+    @Override\n+    public void uninitalize() {\n+        // do nothing\n+    }\n+\n+    private String resolveNetworkLocation(BookieSocketAddress addr) {\n+        List<String> names = new ArrayList<String>(1);\n+        if (dnsResolver instanceof CachedDNSToSwitchMapping) {\n+            names.add(addr.getSocketAddress().getAddress().getHostAddress());\n+        } else {\n+            names.add(addr.getSocketAddress().getHostName());\n+        }\n+        // resolve network addresses\n+        List<String> rNames = dnsResolver.resolve(names);\n+        String netLoc;\n+        if (null == rNames) {\n+            LOG.warn(\"Failed to resolve network location for {}, using default rack for them : {}.\", names,\n+                    NetworkTopology.DEFAULT_RACK);\n+            netLoc = NetworkTopology.DEFAULT_RACK;\n+        } else {\n+            netLoc = rNames.get(0);\n+        }\n+        return netLoc;\n+    }\n+\n+    @Override\n+    public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writableBookies,\n+            Set<BookieSocketAddress> readOnlyBookies) {\n+        rwLock.writeLock().lock();\n+        try {\n+            ImmutableSet<BookieSocketAddress> joinedBookies, leftBookies, deadBookies;\n+            Set<BookieSocketAddress> oldBookieSet = knownBookies.keySet();\n+            // left bookies : bookies in known bookies, but not in new writable bookie cluster.\n+            leftBookies = Sets.difference(oldBookieSet, writableBookies).immutableCopy();\n+            // joined bookies : bookies in new writable bookie cluster, but not in known bookies\n+            joinedBookies = Sets.difference(writableBookies, oldBookieSet).immutableCopy();\n+            // dead bookies.\n+            deadBookies = Sets.difference(leftBookies, readOnlyBookies).immutableCopy();\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\n+                        \"Cluster changed : left bookies are {}, joined bookies are {}, while dead bookies are {}.\",\n+                        new Object[] { leftBookies, joinedBookies, deadBookies });\n+            }\n+\n+            // node left\n+            for (BookieSocketAddress addr : leftBookies) {\n+                BookieNode node = knownBookies.remove(addr);\n+                topology.remove(node);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Cluster changed : bookie {} left from cluster.\", addr);\n+                }\n+            }\n+\n+            // node joined\n+            for (BookieSocketAddress addr : joinedBookies) {\n+                BookieNode node = createBookieNode(addr);\n+                topology.add(node);\n+                knownBookies.put(addr, node);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Cluster changed : bookie {} joined the cluster.\", addr);\n+                }\n+            }\n+\n+            return deadBookies;\n+        } finally {\n+            rwLock.writeLock().unlock();\n+        }\n+    }\n+\n+    private Set<Node> convertBookiesToNodes(Set<BookieSocketAddress> excludeBookies) {\n+        Set<Node> nodes = new HashSet<Node>();\n+        for (BookieSocketAddress addr : excludeBookies) {\n+            BookieNode bn = knownBookies.get(addr);\n+            if (null == bn) {\n+                bn = createBookieNode(addr);\n+            }\n+            nodes.add(bn);\n+        }\n+        return nodes;\n+    }\n+\n+    @Override\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize,\n+            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+        rwLock.readLock().lock();\n+        try {\n+            Set<Node> excludeNodes = convertBookiesToNodes(excludeBookies);\n+            RRRackCoverageEnsemble ensemble = new RRRackCoverageEnsemble(ensembleSize, writeQuorumSize);\n+            BookieNode prevNode = null;\n+            int numRacks = topology.getNumOfRacks();\n+            // only one rack, use the random algorithm.\n+            if (numRacks < 2) {\n+                List<BookieNode> bns = selectRandom(ensembleSize, excludeNodes,\n+                        EnsembleForReplacement.instance);\n+                ArrayList<BookieSocketAddress> addrs = new ArrayList<BookieSocketAddress>(ensembleSize);\n+                for (BookieNode bn : bns) {\n+                    addrs.add(bn.addr);\n+                }\n+                return addrs;\n+            }\n+            // pick nodes by racks, to ensure there is at least two racks per write quorum.\n+            for (int i = 0; i < ensembleSize; i++) {\n+                String curRack;\n+                if (null == prevNode) {\n+                    if (null == localNode) {\n+                        curRack = NodeBase.ROOT;\n+                    } else {\n+                        curRack = localNode.getNetworkLocation();\n+                    }\n+                } else {\n+                    curRack = \"~\" + prevNode.getNetworkLocation();\n+                }\n+                prevNode = selectFromRack(curRack, excludeNodes, ensemble, ensemble);\n+            }\n+            return ensemble.toList();\n+        } finally {\n+            rwLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public BookieSocketAddress replaceBookie(BookieSocketAddress bookieToReplace,\n+            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+        rwLock.readLock().lock();\n+        try {\n+            BookieNode bn = knownBookies.get(bookieToReplace);\n+            if (null == bn) {\n+                bn = createBookieNode(bookieToReplace);\n+            }\n+\n+            Set<Node> excludeNodes = convertBookiesToNodes(excludeBookies);\n+            // add the bookie to replace in exclude set\n+            excludeNodes.add(bn);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Try to choose a new bookie to replace {}, excluding {}.\", bookieToReplace,\n+                        excludeNodes);\n+            }\n+            // pick a candidate from same rack to replace\n+            BookieNode candidate = selectFromRack(bn.getNetworkLocation(), excludeNodes,\n+                    TruePredicate.instance, EnsembleForReplacement.instance);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Bookie {} is chosen to replace bookie {}.\", candidate, bn);\n+            }\n+            return candidate.addr;\n+        } finally {\n+            rwLock.readLock().unlock();\n+        }\n+    }\n+\n+    protected BookieNode selectFromRack(String networkLoc, Set<Node> excludeBookies, Predicate predicate,\n+            Ensemble ensemble) throws BKNotEnoughBookiesException {\n+        // select one from local rack\n+        try {\n+            return selectRandomFromRack(networkLoc, excludeBookies, predicate, ensemble);\n+        } catch (BKNotEnoughBookiesException e) {\n+            LOG.warn(\"Failed to choose a bookie from {} : \"\n+                     + \"excluded {}, fallback to choose bookie randomly from the cluster.\",\n+                     networkLoc, excludeBookies);\n+            // randomly choose one from whole cluster, ignore the provided predicate.\n+            return selectRandom(1, excludeBookies, ensemble).get(0);\n+        }\n+    }\n+\n+    protected String getRemoteRack(BookieNode node) {\n+        return \"~\" + node.getNetworkLocation();\n+    }\n+\n+    /**\n+     * Choose random node under a given network path.\n+     *\n+     * @param netPath\n+     *          network path\n+     * @param excludeBookies\n+     *          exclude bookies\n+     * @param predicate\n+     *          predicate to check whether the target is a good target.\n+     * @param ensemble\n+     *          ensemble structure\n+     * @return chosen bookie.\n+     */\n+    protected BookieNode selectRandomFromRack(String netPath, Set<Node> excludeBookies, Predicate predicate,\n+            Ensemble ensemble) throws BKNotEnoughBookiesException {\n+        List<Node> leaves = new ArrayList<Node>(topology.getLeaves(netPath));\n+        Collections.shuffle(leaves);\n+        for (Node n : leaves) {\n+            if (excludeBookies.contains(n)) {\n+                continue;\n+            }\n+            if (!(n instanceof BookieNode) || !predicate.apply((BookieNode) n, ensemble)) {\n+                continue;\n+            }\n+            BookieNode bn = (BookieNode) n;\n+            // got a good candidate\n+            ensemble.addBookie(bn);\n+            // add the candidate to exclude set\n+            excludeBookies.add(bn);\n+            return bn;\n+        }\n+        throw new BKNotEnoughBookiesException();\n+    }\n+\n+    /**\n+     * Choose a random node from whole cluster.\n+     *\n+     * @param numBookies\n+     *          number bookies to choose\n+     * @param excludeBookies\n+     *          bookies set to exclude.\n+     * @param ensemble\n+     *          ensemble to hold the bookie chosen.\n+     * @return the bookie node chosen.\n+     * @throws BKNotEnoughBookiesException\n+     */\n+    protected List<BookieNode> selectRandom(int numBookies, Set<Node> excludeBookies, Ensemble ensemble)\n+            throws BKNotEnoughBookiesException {\n+        List<BookieNode> allBookies = new ArrayList<BookieNode>(knownBookies.values());\n+        Collections.shuffle(allBookies);\n+        List<BookieNode> newBookies = new ArrayList<BookieNode>(numBookies);\n+        for (BookieNode bookie : allBookies) {\n+            if (excludeBookies.contains(bookie)) {\n+                continue;\n+            }\n+            ensemble.addBookie(bookie);\n+            excludeBookies.add(bookie);\n+            newBookies.add(bookie);\n+            --numBookies;\n+            if (numBookies == 0) {\n+                return newBookies;\n+            }\n+        }\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Failed to find {} bookies : excludeBookies {}, allBookies {}.\", new Object[] {\n+                    numBookies, excludeBookies, allBookies });\n+        }\n+        throw new BKNotEnoughBookiesException();\n+    }\n+\n+}"},{"sha":"af21f442dba35d8761247d9766a6a1f7a38a89f0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -35,6 +35,7 @@\n     int numResponsesPending;\n     RecoveryData maxRecoveredData;\n     volatile boolean completed = false;\n+    int lastSeenError = BKException.Code.ReadException;\n \n     LastConfirmedDataCallback cb;\n     final DistributionSchedule.QuorumCoverageSet coverageSet;\n@@ -104,6 +105,11 @@ public synchronized void readEntryComplete(final int rc, final long ledgerId, fi\n             cb.readLastConfirmedDataComplete(rc, maxRecoveredData);\n             completed = true;\n         }\n+\n+        if (!heardValidResponse && BKException.Code.OK != rc) {\n+            lastSeenError = rc;\n+        }\n+\n         // other return codes dont count as valid responses\n         if (heardValidResponse\n             && coverageSet.addBookieAndCheckCovered(bookieIndex)\n@@ -119,7 +125,7 @@ public synchronized void readEntryComplete(final int rc, final long ledgerId, fi\n         if (numResponsesPending == 0 && !completed) {\n             // Have got all responses back but was still not enough, just fail the operation\n             LOG.error(\"While readLastConfirmed ledger: \" + ledgerId + \" did not hear success responses from all quorums\");\n-            cb.readLastConfirmedDataComplete(BKException.Code.LedgerRecoveryException, maxRecoveredData);\n+            cb.readLastConfirmedDataComplete(lastSeenError, maxRecoveredData);\n         }\n \n     }"},{"sha":"8de4092b8d9e289a9702e2f8f2fb40e5c9bee329","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":78,"deletions":16,"changes":94,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,46 +18,77 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n+\n+import java.security.GeneralSecurityException;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import java.security.GeneralSecurityException;\n-import java.net.InetSocketAddress;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n+import org.apache.bookkeeper.util.SafeRunnable;\n+import org.apache.bookkeeper.versioning.Version;\n+\n+import java.util.concurrent.RejectedExecutionException;\n \n /**\n- * Read only ledger handle. This ledger handle allows you to \n- * read from a ledger but not to write to it. It overrides all \n+ * Read only ledger handle. This ledger handle allows you to\n+ * read from a ledger but not to write to it. It overrides all\n  * the public write operations from LedgerHandle.\n  * It should be returned for BookKeeper#openLedger operations.\n  */\n-class ReadOnlyLedgerHandle extends LedgerHandle {\n+class ReadOnlyLedgerHandle extends LedgerHandle implements LedgerMetadataListener {\n+\n+    class MetadataUpdater extends SafeRunnable {\n+\n+        final LedgerMetadata m;\n+\n+        MetadataUpdater(LedgerMetadata metadata) {\n+            this.m = metadata;\n+        }\n+\n+        @Override\n+        public void safeRun() {\n+            Version.Occurred occurred =\n+                    ReadOnlyLedgerHandle.this.metadata.getVersion().compare(this.m.getVersion());\n+            if (Version.Occurred.BEFORE == occurred) {\n+                LOG.info(\"Updated ledger metadata for ledger {} to {}.\", ledgerId, this.m);\n+                ReadOnlyLedgerHandle.this.metadata = this.m;\n+            }\n+        }\n+    }\n+\n     ReadOnlyLedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n-                         DigestType digestType, byte[] password)\n+                         DigestType digestType, byte[] password, boolean watch)\n             throws GeneralSecurityException, NumberFormatException {\n         super(bk, ledgerId, metadata, digestType, password);\n+        if (watch) {\n+            bk.getLedgerManager().registerLedgerMetadataListener(ledgerId, this);\n+        }\n     }\n \n     @Override\n-    public void close() \n+    public void close()\n             throws InterruptedException, BKException {\n-        // noop\n+        bk.getLedgerManager().unregisterLedgerMetadataListener(ledgerId, this);\n     }\n \n     @Override\n     public void asyncClose(CloseCallback cb, Object ctx) {\n+        bk.getLedgerManager().unregisterLedgerMetadataListener(ledgerId, this);\n         cb.closeComplete(BKException.Code.OK, this, ctx);\n     }\n-    \n+\n     @Override\n     public long addEntry(byte[] data) throws InterruptedException, BKException {\n         return addEntry(data, 0, data.length);\n     }\n-    \n+\n     @Override\n     public long addEntry(byte[] data, int offset, int length)\n             throws InterruptedException, BKException {\n-        LOG.error(\"Tried to add entry on a Read-Only ledger handle, ledgerid=\" + ledgerId);        \n+        LOG.error(\"Tried to add entry on a Read-Only ledger handle, ledgerid=\" + ledgerId);\n         throw BKException.create(BKException.Code.IllegalOpException);\n     }\n \n@@ -78,14 +107,14 @@ public void asyncAddEntry(final byte[] data, final int offset, final int length,\n     }\n \n     @Override\n-    void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n+    void handleBookieFailure(final BookieSocketAddress addr, final int bookieIndex) {\n         blockAddCompletions.incrementAndGet();\n         synchronized (metadata) {\n             try {\n                 if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n                     // ensemble has already changed, failure of this addr is immaterial\n-                    LOG.warn(\"Write did not succeed to {}, bookieIndex {}, but we have already fixed it.\",\n-                             addr, bookieIndex);\n+                    LOG.debug(\"Write did not succeed to {}, bookieIndex {},\"\n+                              +\" but we have already fixed it.\", addr, bookieIndex);\n                     blockAddCompletions.decrementAndGet();\n                     return;\n                 }\n@@ -103,4 +132,37 @@ void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n             }\n         }\n     }\n+\n+    @Override\n+    public void onChanged(long lid, LedgerMetadata newMetadata) {\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received ledger metadata update on {} : {}\", lid, newMetadata);\n+        }\n+        if (this.ledgerId != lid) {\n+            return;\n+        }\n+        if (null == newMetadata) {\n+            return;\n+        }\n+        Version.Occurred occurred =\n+                this.metadata.getVersion().compare(newMetadata.getVersion());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Try to update metadata from {} to {} : {}\",\n+                    new Object[] { this.metadata, newMetadata, occurred });\n+        }\n+        if (Version.Occurred.BEFORE == occurred) { // the metadata is updated\n+            try {\n+                bk.mainWorkerPool.submitOrdered(ledgerId, new MetadataUpdater(newMetadata));\n+            } catch (RejectedExecutionException ree) {\n+                LOG.error(\"Failed on submitting updater to update ledger metadata on ledger {} : {}\",\n+                        ledgerId, newMetadata);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"ReadOnlyLedgerHandle(lid = %d, id = %d)\", ledgerId, super.hashCode());\n+    }\n+\n }"},{"sha":"01b81c9ff53c829550d4f906a5182d64638302dd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import org.apache.bookkeeper.client.DigestManager.RecoveryData;\n+import org.apache.bookkeeper.client.ReadLastConfirmedOp.LastConfirmedDataCallback;\n+import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n+import org.jboss.netty.buffer.ChannelBuffer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+\n+/**\n+ * This op is try to read last confirmed without involving quorum coverage checking.\n+ * Use {@link ReadLastConfirmedOp} if you need quorum coverage checking.\n+ */\n+class TryReadLastConfirmedOp implements ReadEntryCallback {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(TryReadLastConfirmedOp.class);\n+\n+    final LedgerHandle lh;\n+    final LastConfirmedDataCallback cb;\n+\n+    int numResponsesPending;\n+    volatile boolean hasValidResponse = false;\n+    volatile boolean completed = false;\n+    RecoveryData maxRecoveredData;\n+\n+    TryReadLastConfirmedOp(LedgerHandle lh, LastConfirmedDataCallback cb, long lac) {\n+        this.lh = lh;\n+        this.cb = cb;\n+        this.maxRecoveredData = new RecoveryData(lac, 0);\n+        this.numResponsesPending = lh.metadata.getEnsembleSize();\n+    }\n+\n+    public void initiate() {\n+        for (int i = 0; i < lh.metadata.currentEnsemble.size(); i++) {\n+            lh.bk.bookieClient.readEntry(lh.metadata.currentEnsemble.get(i),\n+                                         lh.ledgerId,\n+                                         BookieProtocol.LAST_ADD_CONFIRMED,\n+                                         this, i);\n+        }\n+    }\n+\n+    @Override\n+    public void readEntryComplete(int rc, long ledgerId, long entryId, ChannelBuffer buffer, Object ctx) {\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"TryReadLastConfirmed received response for (lid={}, eid={}) : {}\",\n+                    new Object[] { ledgerId, entryId, rc });\n+        }\n+\n+        int bookieIndex = (Integer) ctx;\n+        numResponsesPending--;\n+        if (BKException.Code.OK == rc) {\n+            try {\n+                RecoveryData recoveryData = lh.macManager.verifyDigestAndReturnLastConfirmed(buffer);\n+                if (LOG.isTraceEnabled()) {\n+                    LOG.trace(\"Received lastAddConfirmed (lac={}, length={}) from bookie({}) for (lid={}).\",\n+                            new Object[] { recoveryData.lastAddConfirmed, recoveryData.length, bookieIndex, ledgerId });\n+                }\n+                if (recoveryData.lastAddConfirmed > maxRecoveredData.lastAddConfirmed) {\n+                    maxRecoveredData = recoveryData;\n+                    // callback immediately\n+                    cb.readLastConfirmedDataComplete(BKException.Code.OK, maxRecoveredData);\n+                }\n+                hasValidResponse = true;\n+            } catch (BKException.BKDigestMatchException e) {\n+                LOG.error(\"Mac mismatch for ledger: \" + ledgerId + \", entry: \" + entryId\n+                          + \" while reading last entry from bookie: \"\n+                          + lh.metadata.currentEnsemble.get(bookieIndex));\n+            }\n+        } else if (BKException.Code.UnauthorizedAccessException == rc && !completed) {\n+            cb.readLastConfirmedDataComplete(rc, maxRecoveredData);\n+            completed = true;\n+        } else if (BKException.Code.NoSuchLedgerExistsException == rc ||\n+                   BKException.Code.NoSuchEntryException == rc) {\n+            hasValidResponse = true;\n+        }\n+        if (numResponsesPending == 0 && !completed) {\n+            if (!hasValidResponse) {\n+                // no success called\n+                cb.readLastConfirmedDataComplete(BKException.Code.LedgerRecoveryException, maxRecoveredData);\n+            } else {\n+                // callback\n+                cb.readLastConfirmedDataComplete(BKException.Code.OK, maxRecoveredData);\n+            }\n+            completed = true;\n+        }\n+    }\n+}"},{"sha":"3ec2b5a1c305a8807d1299b36b99af51b022ab71","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -38,12 +38,13 @@\n \n     static final Logger LOG = LoggerFactory.getLogger(AbstractConfiguration.class);\n \n-    private static ClassLoader defaultLoader;\n+    protected static final ClassLoader defaultLoader;\n     static {\n-        defaultLoader = Thread.currentThread().getContextClassLoader();\n-        if (null == defaultLoader) {\n-            defaultLoader = AbstractConfiguration.class.getClassLoader();\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        if (null == loader) {\n+            loader = AbstractConfiguration.class.getClassLoader();\n         }\n+        defaultLoader = loader;\n     }\n \n     // Ledger Manager"},{"sha":"2f4127a96980c2a893f2e9d6461481f0b87c3fe6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":203,"deletions":6,"changes":209,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -17,10 +17,16 @@\n  */\n package org.apache.bookkeeper.conf;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-\n+import org.apache.bookkeeper.client.EnsemblePlacementPolicy;\n+import org.apache.bookkeeper.client.RackawareEnsemblePlacementPolicy;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.lang.StringUtils;\n \n /**\n@@ -42,12 +48,23 @@\n \n     // NIO Parameters\n     protected final static String CLIENT_TCP_NODELAY = \"clientTcpNoDelay\";\n+    protected final static String NUM_CHANNELS_PER_BOOKIE = \"numChannelsPerBookie\";\n+    // Read Parameters\n     protected final static String READ_TIMEOUT = \"readTimeout\";\n     protected final static String SPECULATIVE_READ_TIMEOUT = \"speculativeReadTimeout\";\n+    // Timeout Setting\n+    protected final static String ADD_ENTRY_TIMEOUT_SEC = \"addEntryTimeoutSec\";\n+    protected final static String READ_ENTRY_TIMEOUT_SEC = \"readEntryTimeoutSec\";\n+    protected final static String TIMEOUT_TASK_INTERVAL_MILLIS = \"timeoutTaskIntervalMillis\";\n+    protected final static String PCBC_TIMEOUT_TIMER_TICK_DURATION_MS = \"pcbcTimeoutTimerTickDurationMs\";\n+    protected final static String PCBC_TIMEOUT_TIMER_NUM_TICKS = \"pcbcTimeoutTimerNumTicks\";\n \n     // Number Woker Threads\n     protected final static String NUM_WORKER_THREADS = \"numWorkerThreads\";\n \n+    // Ensemble Placement Policy\n+    protected final static String ENSEMBLE_PLACEMENT_POLICY = \"ensemblePlacementPolicy\";\n+\n     /**\n      * Construct a default client-side configuration\n      */\n@@ -79,7 +96,7 @@ public int getThrottleValue() {\n     /**\n      * Set throttle value.\n      *\n-     * Since BookKeeper process requests in asynchrous way, it will holds \n+     * Since BookKeeper process requests in asynchrous way, it will holds\n      * those pending request in queue. You may easily run it out of memory\n      * if producing too many requests than the capability of bookie servers can handle.\n      * To prevent that from happeding, you can set a throttle value here.\n@@ -129,7 +146,7 @@ public ClientConfiguration setBookieRecoveryDigestType(DigestType digestType) {\n      * @see #setBookieRecoveryPasswd\n      */\n     public byte[] getBookieRecoveryPasswd() {\n-        return this.getString(PASSWD, \"\").getBytes();\n+        return this.getString(PASSWD, \"\").getBytes(UTF_8);\n     }\n \n     /**\n@@ -147,7 +164,7 @@ public ClientConfiguration setBookieRecoveryDigestType(DigestType digestType) {\n      * @return client configuration\n      */\n     public ClientConfiguration setBookieRecoveryPasswd(byte[] passwd) {\n-        setProperty(PASSWD, new String(passwd));\n+        setProperty(PASSWD, new String(passwd, UTF_8));\n         return this;\n     }\n \n@@ -166,7 +183,7 @@ public boolean getClientTcpNoDelay() {\n      *\n      * This settings is used to enabled/disabled Nagle's algorithm, which is a means of\n      * improving the efficiency of TCP/IP networks by reducing the number of packets\n-     * that need to be sent over the network. If you are sending many small messages, \n+     * that need to be sent over the network. If you are sending many small messages,\n      * such that more than one can fit in a single IP packet, setting client.tcpnodelay\n      * to false to enable Nagle algorithm can provide better performance.\n      * <br>\n@@ -181,13 +198,34 @@ public ClientConfiguration setClientTcpNoDelay(boolean noDelay) {\n         return this;\n     }\n \n+    /**\n+     * Get num channels per bookie.\n+     *\n+     * @return num channels per bookie.\n+     */\n+    public int getNumChannelsPerBookie() {\n+        return getInt(NUM_CHANNELS_PER_BOOKIE, 1);\n+    }\n+\n+    /**\n+     * Set num channels per bookie.\n+     *\n+     * @param numChannelsPerBookie\n+     *          num channels per bookie.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setNumChannelsPerBookie(int numChannelsPerBookie) {\n+        setProperty(NUM_CHANNELS_PER_BOOKIE, numChannelsPerBookie);\n+        return this;\n+    }\n+\n     /**\n      * Get zookeeper servers to connect\n      *\n      * @return zookeeper servers\n      */\n     public String getZkServers() {\n-        List<Object> servers = getList(ZK_SERVERS, null);\n+        List servers = getList(ZK_SERVERS, null);\n         if (null == servers || 0 == servers.size()) {\n             return \"localhost\";\n         }\n@@ -234,7 +272,9 @@ public ClientConfiguration setZkTimeout(int zkTimeout) {\n      * The default is 5 seconds.\n      *\n      * @return the current read timeout in seconds\n+     * @deprecated use {@link #getReadEntryTimeout()} or {@link #getAddEntryTimeout()} instead\n      */\n+    @Deprecated\n     public int getReadTimeout() {\n         return getInt(READ_TIMEOUT, 5);\n     }\n@@ -244,12 +284,145 @@ public int getReadTimeout() {\n      * @see #getReadTimeout()\n      * @param timeout The new read timeout in seconds\n      * @return client configuration\n+     * @deprecated use {@link #setReadEntryTimeout(int)} or {@link #setAddEntryTimeout(int)} instead\n      */\n+    @Deprecated\n     public ClientConfiguration setReadTimeout(int timeout) {\n         setProperty(READ_TIMEOUT, Integer.toString(timeout));\n         return this;\n     }\n \n+    /**\n+     * Get the timeout for add request. This is the number of seconds we wait without hearing\n+     * a response for add request from a bookie before we consider it failed.\n+     *\n+     * The default value is 5 second for backwards compatibility.\n+     *\n+     * @return add entry timeout.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public int getAddEntryTimeout() {\n+        return getInt(ADD_ENTRY_TIMEOUT_SEC, getReadTimeout());\n+    }\n+\n+    /**\n+     * Set timeout for add entry request.\n+     * @see #getAddEntryTimeout()\n+     *\n+     * @param timeout\n+     *          The new add entry timeout in seconds.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setAddEntryTimeout(int timeout) {\n+        setProperty(ADD_ENTRY_TIMEOUT_SEC, timeout);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the timeout for read entry. This is the number of seconds we wait without hearing\n+     * a response for read entry request from a bookie before we consider it failed. By default,\n+     * we use socket timeout specified at {@link #getReadTimeout()}.\n+     *\n+     * @return read entry timeout.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public int getReadEntryTimeout() {\n+        return getInt(READ_ENTRY_TIMEOUT_SEC, getReadTimeout());\n+    }\n+\n+    /**\n+     * Set the timeout for read entry request.\n+     * @see #getReadEntryTimeout()\n+     *\n+     * @param timeout\n+     *          The new read entry timeout in seconds.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setReadEntryTimeout(int timeout) {\n+        setProperty(READ_ENTRY_TIMEOUT_SEC, timeout);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the interval between successive executions of the PerChannelBookieClient's\n+     * TimeoutTask. This value is in milliseconds. Every X milliseconds, the timeout task\n+     * will be executed and it will error out entries that have timed out.\n+     *\n+     * We do it more aggressive to not accumulate pending requests due to slow responses.\n+     * @return the interval at which request timeouts will be checked\n+     */\n+    @Deprecated\n+    public long getTimeoutTaskIntervalMillis() {\n+        return getLong(TIMEOUT_TASK_INTERVAL_MILLIS,\n+                TimeUnit.SECONDS.toMillis(Math.min(getAddEntryTimeout(), getReadEntryTimeout())) / 2);\n+    }\n+\n+    @Deprecated\n+    public ClientConfiguration setTimeoutTaskIntervalMillis(long timeoutMillis) {\n+        setProperty(TIMEOUT_TASK_INTERVAL_MILLIS, Long.toString(timeoutMillis));\n+        return this;\n+    }\n+\n+    /**\n+     * Get the tick duration in milliseconds that used for the\n+     * {@link org.jboss.netty.util.HashedWheelTimer} that used by PCBC to timeout\n+     * requests.\n+     *\n+     * @see org.jboss.netty.util.HashedWheelTimer\n+     *\n+     * @return tick duration in milliseconds\n+     */\n+    public long getPCBCTimeoutTimerTickDurationMs() {\n+        return getLong(PCBC_TIMEOUT_TIMER_TICK_DURATION_MS, 100);\n+    }\n+\n+    /**\n+     * Set the tick duration in milliseconds that used for\n+     * {@link org.jboss.netty.util.HashedWheelTimer} that used by PCBC to timeout\n+     * requests. Be aware of {@link org.jboss.netty.util.HashedWheelTimer} if you\n+     * are going to modify this setting.\n+     *\n+     * @see #getPCBCTimeoutTimerTickDurationMs()\n+     *\n+     * @param tickDuration\n+     *          tick duration in milliseconds.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setPCBCTimeoutTimerTickDurationMs(long tickDuration) {\n+        setProperty(PCBC_TIMEOUT_TIMER_TICK_DURATION_MS, tickDuration);\n+        return this;\n+    }\n+\n+    /**\n+     * Get number of ticks that used for\n+     * {@link org.jboss.netty.util.HashedWheelTimer} that used by PCBC to timeout\n+     * requests.\n+     *\n+     * @see org.jboss.netty.util.HashedWheelTimer\n+     *\n+     * @return number of ticks that used for timeout timer.\n+     */\n+    public int getPCBCTimeoutTimerNumTicks() {\n+        return getInt(PCBC_TIMEOUT_TIMER_NUM_TICKS, 1024);\n+    }\n+\n+    /**\n+     * Set number of ticks that used for\n+     * {@link org.jboss.netty.util.HashedWheelTimer} that used by PCBC to timeout request.\n+     * Be aware of {@link org.jboss.netty.util.HashedWheelTimer} if you are going to modify\n+     * this setting.\n+     *\n+     * @see #getPCBCTimeoutTimerNumTicks()\n+     *\n+     * @param numTicks\n+     *          number of ticks that used for timeout timer.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setPCBCTimeoutTimerNumTicks(int numTicks) {\n+        setProperty(PCBC_TIMEOUT_TIMER_NUM_TICKS, numTicks);\n+        return this;\n+    }\n+\n     /**\n      * Get the number of worker threads. This is the number of\n      * worker threads used by bookkeeper client to submit operations.\n@@ -311,4 +484,28 @@ public ClientConfiguration setSpeculativeReadTimeout(int timeout) {\n         setProperty(SPECULATIVE_READ_TIMEOUT, timeout);\n         return this;\n     }\n+\n+    /**\n+     * Get Ensemble Placement Policy Class.\n+     *\n+     * @return ensemble placement policy class.\n+     */\n+    public Class<? extends EnsemblePlacementPolicy> getEnsemblePlacementPolicy()\n+        throws ConfigurationException {\n+        return ReflectionUtils.getClass(this, ENSEMBLE_PLACEMENT_POLICY,\n+                                        RackawareEnsemblePlacementPolicy.class,\n+                                        EnsemblePlacementPolicy.class,\n+                                        defaultLoader);\n+    }\n+\n+    /**\n+     * Set Ensemble Placement Policy Class.\n+     *\n+     * @param policyClass\n+     *          Ensemble Placement Policy Class.\n+     */\n+    public ClientConfiguration setEnsemblePlacementPolicy(Class<? extends EnsemblePlacementPolicy> policyClass) {\n+        setProperty(ENSEMBLE_PLACEMENT_POLICY, policyClass.getName());\n+        return this;\n+    }\n }"},{"sha":"361669043693c6a5ea19f93bf5a153ba79d3c138","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/Configurable.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/Configurable.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/Configurable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/Configurable.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,47 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.conf;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+import com.google.common.annotations.Beta;\n+\n+/**\n+ * Class that may be configured with a {@link Configuration}.\n+ */\n+@Beta\n+public interface Configurable {\n+\n+    /**\n+     * Set the configuration to be used by this object.\n+     *\n+     * @param conf\n+     *          Configuration object to use\n+     */\n+    public void setConf(Configuration conf);\n+\n+    /**\n+     * Return the configuration used by this object.\n+     *\n+     * @return configuration used by this object.\n+     */\n+    public Configuration getConf();\n+}"},{"sha":"03b3be49ba96fad8f6065af8e670aad7cf15aa37","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":726,"deletions":34,"changes":760,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -20,6 +20,11 @@\n import java.io.File;\n import java.util.List;\n \n+import com.google.common.annotations.Beta;\n+import org.apache.bookkeeper.stats.NullStatsProvider;\n+import org.apache.bookkeeper.stats.StatsProvider;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.lang.StringUtils;\n \n /**\n@@ -28,10 +33,14 @@\n public class ServerConfiguration extends AbstractConfiguration {\n     // Entry Log Parameters\n     protected final static String ENTRY_LOG_SIZE_LIMIT = \"logSizeLimit\";\n+    protected final static String ENTRY_LOG_FILE_PREALLOCATION_ENABLED = \"entryLogFilePreallocationEnabled\";\n     protected final static String MINOR_COMPACTION_INTERVAL = \"minorCompactionInterval\";\n     protected final static String MINOR_COMPACTION_THRESHOLD = \"minorCompactionThreshold\";\n     protected final static String MAJOR_COMPACTION_INTERVAL = \"majorCompactionInterval\";\n     protected final static String MAJOR_COMPACTION_THRESHOLD = \"majorCompactionThreshold\";\n+    protected final static String COMPACTION_MAX_OUTSTANDING_REQUESTS\n+        = \"compactionMaxOutstandingRequests\";\n+    protected final static String COMPACTION_RATE = \"compactionRate\";\n \n     // Gc Parameters\n     protected final static String GC_WAIT_TIME = \"gcWaitTime\";\n@@ -46,24 +55,59 @@\n     // Journal Parameters\n     protected final static String MAX_JOURNAL_SIZE = \"journalMaxSizeMB\";\n     protected final static String MAX_BACKUP_JOURNALS = \"journalMaxBackups\";\n+    protected final static String JOURNAL_ADAPTIVE_GROUP_WRITES = \"journalAdaptiveGroupWrites\";\n+    protected final static String JOURNAL_MAX_GROUP_WAIT_MSEC = \"journalMaxGroupWaitMSec\";\n+    protected final static String JOURNAL_BUFFERED_WRITES_THRESHOLD = \"journalBufferedWritesThreshold\";\n+    protected final static String JOURNAL_BUFFERED_ENTRIES_THRESHOLD = \"journalBufferedEntriesThreshold\";\n+    protected final static String JOURNAL_FLUSH_WHEN_QUEUE_EMPTY = \"journalFlushWhenQueueEmpty\";\n+    protected final static String JOURNAL_REMOVE_FROM_PAGE_CACHE = \"journalRemoveFromPageCache\";\n+    protected final static String JOURNAL_PRE_ALLOC_SIZE = \"journalPreAllocSizeMB\";\n+    protected final static String JOURNAL_WRITE_BUFFER_SIZE = \"journalWriteBufferSizeKB\";\n+    protected final static String JOURNAL_ALIGNMENT_SIZE = \"journalAlignmentSize\";\n+    protected final static String NUM_JOURNAL_CALLBACK_THREADS = \"numJournalCallbackThreads\";\n+    protected final static String JOURNAL_FORMAT_VERSION_TO_WRITE = \"journalFormatVersionToWrite\";\n     // Bookie Parameters\n     protected final static String BOOKIE_PORT = \"bookiePort\";\n+    protected final static String LISTENING_INTERFACE = \"listeningInterface\";\n+    protected final static String ALLOW_LOOPBACK = \"allowLoopback\";\n+\n     protected final static String JOURNAL_DIR = \"journalDirectory\";\n     protected final static String LEDGER_DIRS = \"ledgerDirectories\";\n+    protected final static String INDEX_DIRS = \"indexDirectories\";\n     // NIO Parameters\n     protected final static String SERVER_TCP_NODELAY = \"serverTcpNoDelay\";\n     // Zookeeper Parameters\n     protected final static String ZK_TIMEOUT = \"zkTimeout\";\n     protected final static String ZK_SERVERS = \"zkServers\";\n-    // Statistics Parameters\n-    protected final static String ENABLE_STATISTICS = \"enableStatistics\";\n     protected final static String OPEN_LEDGER_REREPLICATION_GRACE_PERIOD = \"openLedgerRereplicationGracePeriod\";\n     //ReadOnly mode support on all disk full\n     protected final static String READ_ONLY_MODE_ENABLED = \"readOnlyModeEnabled\";\n     //Disk utilization\n     protected final static String DISK_USAGE_THRESHOLD = \"diskUsageThreshold\";\n+    protected final static String DISK_USAGE_WARN_THRESHOLD = \"diskUsageWarnThreshold\";\n     protected final static String DISK_CHECK_INTERVAL = \"diskCheckInterval\";\n     protected final static String AUDITOR_PERIODIC_CHECK_INTERVAL = \"auditorPeriodicCheckInterval\";\n+    protected final static String AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL = \"auditorPeriodicBookieCheckInterval\";\n+    protected final static String AUTO_RECOVERY_DAEMON_ENABLED = \"autoRecoveryDaemonEnabled\";\n+\n+    // Worker Thread parameters.\n+    protected final static String NUM_ADD_WORKER_THREADS = \"numAddWorkerThreads\";\n+    protected final static String NUM_READ_WORKER_THREADS = \"numReadWorkerThreads\";\n+\n+    protected final static String READ_BUFFER_SIZE = \"readBufferSizeBytes\";\n+    protected final static String WRITE_BUFFER_SIZE = \"writeBufferSizeBytes\";\n+    // Whether the bookie should use its hostname or ipaddress for the\n+    // registration.\n+    protected final static String USE_HOST_NAME_AS_BOOKIE_ID = \"useHostNameAsBookieID\";\n+\n+    protected final static String SORTED_LEDGER_STORAGE_ENABLED = \"sortedLedgerStorageEnabled\";\n+    protected final static String SKIP_LIST_SIZE_LIMIT = \"skipListSizeLimit\";\n+    protected final static String SKIP_LIST_CHUNK_SIZE_ENTRY = \"skipListArenaChunkSize\";\n+    protected final static String SKIP_LIST_MAX_ALLOC_ENTRY = \"skipListArenaMaxAllocSize\";\n+\n+    // Statistics Parameters\n+    protected final static String ENABLE_STATISTICS = \"enableStatistics\";\n+    protected final static String STATS_PROVIDER_CLASS = \"statsProviderClass\";\n \n     /**\n      * Construct a default configuration object\n@@ -103,6 +147,27 @@ public ServerConfiguration setEntryLogSizeLimit(long logSizeLimit) {\n         return this;\n     }\n \n+    /**\n+     * Is entry log file preallocation enabled.\n+     *\n+     * @return whether entry log file preallocation is enabled or not.\n+     */\n+    public boolean isEntryLogFilePreAllocationEnabled() {\n+        return this.getBoolean(ENTRY_LOG_FILE_PREALLOCATION_ENABLED, true);\n+    }\n+\n+    /**\n+     * Enable/disable entry log file preallocation.\n+     *\n+     * @param enabled\n+     *          enable/disable entry log file preallocation.\n+     * @return server configuration object.\n+     */\n+    public ServerConfiguration setEntryLogFilePreAllocationEnabled(boolean enabled) {\n+        this.setProperty(ENTRY_LOG_FILE_PREALLOCATION_ENABLED, enabled);\n+        return this;\n+    }\n+\n     /**\n      * Get Garbage collection wait time\n      *\n@@ -224,7 +289,7 @@ public ServerConfiguration setPageSize(int pageSize) {\n      *\n      * @return max journal file size\n      */\n-    public long getMaxJournalSize() {\n+    public long getMaxJournalSizeMB() {\n         return this.getLong(MAX_JOURNAL_SIZE, 2 * 1024);\n     }\n \n@@ -235,11 +300,29 @@ public long getMaxJournalSize() {\n      *          new max journal file size\n      * @return server configuration\n      */\n-    public ServerConfiguration setMaxJournalSize(long maxJournalSize) {\n+    public ServerConfiguration setMaxJournalSizeMB(long maxJournalSize) {\n         this.setProperty(MAX_JOURNAL_SIZE, Long.toString(maxJournalSize));\n         return this;\n     }\n \n+    /**\n+     * How much space should we pre-allocate at a time in the journal\n+     *\n+     * @return journal pre-allocation size in MB\n+     */\n+    public int getJournalPreAllocSizeMB() {\n+        return this.getInt(JOURNAL_PRE_ALLOC_SIZE, 16);\n+    }\n+\n+    /**\n+     * Size of the write buffers used for the journal\n+     *\n+     * @return journal write buffer size in KB\n+     */\n+    public int getJournalWriteBufferSizeKB() {\n+        return this.getInt(JOURNAL_WRITE_BUFFER_SIZE, 64);\n+    }\n+\n     /**\n      * Max number of older journal files kept\n      *\n@@ -261,6 +344,49 @@ public ServerConfiguration setMaxBackupJournals(int maxBackupJournals) {\n         return this;\n     }\n \n+    /**\n+     * All the journal writes and commits should be aligned to given size. If not,\n+     * zeros will be padded to align to given size.\n+     *\n+     * @return journal alignment size\n+     */\n+    public int getJournalAlignmentSize() {\n+        return this.getInt(JOURNAL_ALIGNMENT_SIZE, 512);\n+    }\n+\n+    /**\n+     * Set journal alignment size.\n+     *\n+     * @param size\n+     *          journal alignment size.\n+     * @return server configuration.\n+     */\n+    public ServerConfiguration setJournalAlignmentSize(int size) {\n+        this.setProperty(JOURNAL_ALIGNMENT_SIZE, size);\n+        return this;\n+    }\n+\n+    /**\n+     * Get journal format version to write.\n+     *\n+     * @return journal format version to write.\n+     */\n+    public int getJournalFormatVersionToWrite() {\n+        return this.getInt(JOURNAL_FORMAT_VERSION_TO_WRITE, 4);\n+    }\n+\n+    /**\n+     * Set journal format version to write.\n+     *\n+     * @param version\n+     *          journal format version to write.\n+     * @return server configuration.\n+     */\n+    public ServerConfiguration setJournalFormatVersionToWrite(int version) {\n+        this.setProperty(JOURNAL_FORMAT_VERSION_TO_WRITE, version);\n+        return this;\n+    }\n+\n     /**\n      * Get bookie port that bookie server listen on\n      *\n@@ -282,6 +408,64 @@ public ServerConfiguration setBookiePort(int port) {\n         return this;\n     }\n \n+    /**\n+     * Get the network interface that the bookie should\n+     * listen for connections on. If this is null, then the bookie\n+     * will listen for connections on all interfaces.\n+     *\n+     * @return the network interface to listen on, e.g. eth0, or\n+     *         null if none is specified\n+     */\n+    public String getListeningInterface() {\n+        return this.getString(LISTENING_INTERFACE);\n+    }\n+\n+    /**\n+     * Set the network interface that the bookie should listen on.\n+     * If not set, the bookie will listen on all interfaces.\n+     *\n+     * @param iface the interface to listen on\n+     */\n+    public ServerConfiguration setListeningInterface(String iface) {\n+        this.setProperty(LISTENING_INTERFACE, iface);\n+        return this;\n+    }\n+\n+    /**\n+     * Is the bookie allowed to use a loopback interface as its primary\n+     * interface(i.e. the interface it uses to establish its identity)?\n+     *\n+     * By default, loopback interfaces are not allowed as the primary\n+     * interface.\n+     *\n+     * Using a loopback interface as the primary interface usually indicates\n+     * a configuration error. For example, its fairly common in some VPS setups\n+     * to not configure a hostname, or to have the hostname resolve to\n+     * 127.0.0.1. If this is the case, then all bookies in the cluster will\n+     * establish their identities as 127.0.0.1:3181, and only one will be able\n+     * to join the cluster. For VPSs configured like this, you should explicitly\n+     * set the listening interface.\n+     *\n+     * @see #setListeningInterface(String)\n+     * @return whether a loopback interface can be used as the primary interface\n+     */\n+    public boolean getAllowLoopback() {\n+        return this.getBoolean(ALLOW_LOOPBACK, false);\n+    }\n+\n+    /**\n+     * Configure the bookie to allow loopback interfaces to be used\n+     * as the primary bookie interface.\n+     *\n+     * @see #getAllowLoopback\n+     * @param allow whether to allow loopback interfaces\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setAllowLoopback(boolean allow) {\n+        this.setProperty(ALLOW_LOOPBACK, allow);\n+        return this;\n+    }\n+\n     /**\n      * Get dir name to store journal files\n      *\n@@ -351,16 +535,55 @@ public ServerConfiguration setLedgerDirNames(String[] ledgerDirs) {\n      */\n     public File[] getLedgerDirs() {\n         String[] ledgerDirNames = getLedgerDirNames();\n-        if (null == ledgerDirNames) {\n-            return null;\n-        }\n+\n         File[] ledgerDirs = new File[ledgerDirNames.length];\n         for (int i = 0; i < ledgerDirNames.length; i++) {\n             ledgerDirs[i] = new File(ledgerDirNames[i]);\n         }\n         return ledgerDirs;\n     }\n \n+    /**\n+     * Get dir name to store index files.\n+     *\n+     * @return ledger index dir name, if no index dirs provided return null\n+     */\n+    public String[] getIndexDirNames() {\n+        if (!this.containsKey(INDEX_DIRS)) {\n+            return null;\n+        }\n+        return this.getStringArray(INDEX_DIRS);\n+    }\n+\n+    /**\n+     * Set dir name to store index files.\n+     *\n+     * @param indexDirs\n+     *          Index dir names\n+     * @return server configuration.\n+     */\n+    public ServerConfiguration setIndexDirName(String[] indexDirs) {\n+        this.setProperty(INDEX_DIRS, indexDirs);\n+        return this;\n+    }\n+\n+    /**\n+     * Get index dir to store ledger index files.\n+     *\n+     * @return index dirs, if no index dirs provided return null\n+     */\n+    public File[] getIndexDirs() {\n+        String[] idxDirNames = getIndexDirNames();\n+        if (null == idxDirNames) {\n+            return null;\n+        }\n+        File[] idxDirs = new File[idxDirNames.length];\n+        for (int i=0; i<idxDirNames.length; i++) {\n+            idxDirs[i] = new File(idxDirNames[i]);\n+        }\n+        return idxDirs;\n+    }\n+\n     /**\n      * Is tcp connection no delay.\n      *\n@@ -388,7 +611,7 @@ public ServerConfiguration setServerTcpNoDelay(boolean noDelay) {\n      * @return zookeeper servers\n      */\n     public String getZkServers() {\n-        List<Object> servers = getList(ZK_SERVERS, null);\n+        List servers = getList(ZK_SERVERS, null);\n         if (null == servers || 0 == servers.size()) {\n             return null;\n         }\n@@ -553,20 +776,20 @@ public ServerConfiguration setMajorCompactionInterval(long interval) {\n         setProperty(MAJOR_COMPACTION_INTERVAL, interval);\n         return this;\n     }\n-    \n+\n     /**\n      * Set the grace period which the rereplication worker will wait before\n      * fencing and rereplicating a ledger fragment which is still being written\n      * to, on bookie failure.\n-     * \n-     * The grace period allows the writer to detect the bookie failure, and\n-     * start replicating the ledger fragment. If the writer writes nothing\n+     *\n+     * The grace period allows the writer to detect the bookie failure, and and\n+     * start writing to another ledger fragment. If the writer writes nothing\n      * during the grace period, the rereplication worker assumes that it has\n-     * crashed and fences the ledger, preventing any further writes to that \n-     * ledger.\n-     * \n+     * crashed and therefore fences the ledger, preventing any further writes to\n+     * that ledger.\n+     *\n      * @see org.apache.bookkeeper.client.BookKeeper#openLedger\n-     * \n+     *\n      * @param waitTime time to wait before replicating ledger fragment\n      */\n     public void setOpenLedgerRereplicationGracePeriod(String waitTime) {\n@@ -577,40 +800,319 @@ public void setOpenLedgerRereplicationGracePeriod(String waitTime) {\n      * Get the grace period which the rereplication worker to wait before\n      * fencing and rereplicating a ledger fragment which is still being written\n      * to, on bookie failure.\n-     * \n+     *\n      * @return long\n      */\n     public long getOpenLedgerRereplicationGracePeriod() {\n         return getLong(OPEN_LEDGER_REREPLICATION_GRACE_PERIOD, 30000);\n     }\n \n     /**\n-     * Set the ReadOnlyModeEnabled status\n-     * \n-     * @param enabled enables read-only mode.\n-     * \n-     * @return ServerConfiguration \n+     * Get the number of bytes we should use as capacity for\n+     * org.apache.bookkeeper.bookie.BufferedReadChannel\n+     * Default is 512 bytes\n+     * @return read buffer size\n+     */\n+    public int getReadBufferBytes() {\n+        return getInt(READ_BUFFER_SIZE, 512);\n+    }\n+\n+    /**\n+     * Set the number of bytes we should use as capacity for\n+     * org.apache.bookkeeper.bookie.BufferedReadChannel\n+     *\n+     * @param readBufferSize\n+     *          Read Buffer Size\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setReadBufferBytes(int readBufferSize) {\n+        setProperty(READ_BUFFER_SIZE, readBufferSize);\n+        return this;\n+    }\n+\n+    /**\n+     * Set the number of threads that would handle write requests.\n+     *\n+     * @param numThreads\n+     *          number of threads to handle write requests.\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setNumAddWorkerThreads(int numThreads) {\n+        setProperty(NUM_ADD_WORKER_THREADS, numThreads);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the number of threads that should handle write requests.\n+     *\n+     * @return the number of threads that handle write requests.\n+     */\n+    public int getNumAddWorkerThreads() {\n+        return getInt(NUM_ADD_WORKER_THREADS, 1);\n+    }\n+\n+    /**\n+     * Set the number of threads that would handle read requests.\n+     *\n+     * @param numThreads\n+     *          Number of threads to handle read requests.\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setNumReadWorkerThreads(int numThreads) {\n+        setProperty(NUM_READ_WORKER_THREADS, numThreads);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the number of threads that should handle read requests.\n+     */\n+    public int getNumReadWorkerThreads() {\n+        return getInt(NUM_READ_WORKER_THREADS, 8);\n+    }\n+\n+    /**\n+     * Get the number of bytes used as capacity for the write buffer. Default is\n+     * 64KB.\n+     * NOTE: Make sure this value is greater than the maximum message size.\n+     * @return the size of the write buffer in bytes\n+     */\n+    public int getWriteBufferBytes() {\n+        return getInt(WRITE_BUFFER_SIZE, 65536);\n+    }\n+\n+    /**\n+     * Set the number of bytes used as capacity for the write buffer.\n+     *\n+     * @param writeBufferBytes\n+     *          Write Buffer Bytes\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setWriteBufferBytes(int writeBufferBytes) {\n+        setProperty(WRITE_BUFFER_SIZE, writeBufferBytes);\n+        return this;\n+    }\n+\n+    /**\n+     * Set the number of threads that would handle journal callbacks.\n+     *\n+     * @param numThreads\n+     *          number of threads to handle journal callbacks.\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setNumJournalCallbackThreads(int numThreads) {\n+        setProperty(NUM_JOURNAL_CALLBACK_THREADS, numThreads);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the number of threads that should handle journal callbacks.\n+     *\n+     * @return the number of threads that handle journal callbacks.\n+     */\n+    public int getNumJournalCallbackThreads() {\n+        return getInt(NUM_JOURNAL_CALLBACK_THREADS, 1);\n+    }\n+\n+    /**\n+     * Set sorted-ledger storage enabled or not\n+     *\n+     * @param enabled\n+     */\n+    public ServerConfiguration setSortedLedgerStorageEnabled(boolean enabled) {\n+        this.setProperty(SORTED_LEDGER_STORAGE_ENABLED, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Check if sorted-ledger storage enabled (default true)\n+     *\n+     * @return true if sorted ledger storage is enabled, false otherwise\n+     */\n+    public boolean getSortedLedgerStorageEnabled() {\n+        return this.getBoolean(SORTED_LEDGER_STORAGE_ENABLED, true);\n+    }\n+\n+    /**\n+     * Get skip list data size limitation (default 64MB)\n+     *\n+     * @return skip list data size limitation\n+     */\n+    public long getSkipListSizeLimit() {\n+        return this.getLong(SKIP_LIST_SIZE_LIMIT, 64 * 1024 * 1024L);\n+    }\n+\n+    /**\n+     * Set skip list size limit.\n+     *\n+     * @param size skip list size limit.\n+     * @return server configuration object.\n+     */\n+    public ServerConfiguration setSkipListSizeLimit(int size) {\n+        setProperty(SKIP_LIST_SIZE_LIMIT, size);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the number of bytes we should use as chunk allocation for\n+     * org.apache.bookkeeper.bookie.SkipListArena\n+     * Default is 4 MB\n+     * @return the number of bytes to use for each chunk in the skiplist arena\n+     */\n+    public int getSkipListArenaChunkSize() {\n+        return getInt(SKIP_LIST_CHUNK_SIZE_ENTRY, 4096 * 1024);\n+    }\n+\n+    /**\n+     * Set the number of bytes w used as chunk allocation for\n+     * org.apache.bookkeeper.bookie.SkipListArena\n+     *\n+     * @param size chunk size.\n+     * @return server configuration object.\n+     */\n+    public ServerConfiguration setSkipListArenaChunkSize(int size) {\n+        setProperty(SKIP_LIST_CHUNK_SIZE_ENTRY, size);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the max size we should allocate from the skiplist arena. Allocations\n+     * larger than this should be allocated directly by the VM to avoid fragmentation.\n+     *\n+     * @return max size allocatable from the skiplist arena (Default is 128 KB)\n+     */\n+    public int getSkipListArenaMaxAllocSize() {\n+        return getInt(SKIP_LIST_MAX_ALLOC_ENTRY, 128 * 1024);\n+    }\n+\n+    /**\n+     * Should we group journal force writes\n+     *\n+     * @return group journal force writes\n+     */\n+    public boolean getJournalAdaptiveGroupWrites() {\n+        return getBoolean(JOURNAL_ADAPTIVE_GROUP_WRITES, true);\n+    }\n+\n+    /**\n+     * Enable/disable group journal force writes\n+     *\n+     * @param enabled flag to enable/disable group journal force writes\n+     */\n+    public ServerConfiguration setJournalAdaptiveGroupWrites(boolean enabled) {\n+        setProperty(JOURNAL_ADAPTIVE_GROUP_WRITES, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Maximum latency to impose on a journal write to achieve grouping\n+     *\n+     * @return max wait for grouping\n+     */\n+    public long getJournalMaxGroupWaitMSec() {\n+        return getLong(JOURNAL_MAX_GROUP_WAIT_MSEC, 200);\n+    }\n+\n+    /**\n+     * Maximum bytes to buffer to impose on a journal write to achieve grouping\n+     *\n+     * @return max bytes to buffer\n+     */\n+    public long getJournalBufferedWritesThreshold() {\n+        return getLong(JOURNAL_BUFFERED_WRITES_THRESHOLD, 512 * 1024);\n+    }\n+\n+    /**\n+     * Maximum entries to buffer to impose on a journal write to achieve grouping.\n+     * Use {@link #getJournalBufferedWritesThreshold()} if this is set to zero or\n+     * less than zero.\n+     *\n+     * @return max entries to buffer.\n+     */\n+    public long getJournalBufferedEntriesThreshold() {\n+        return getLong(JOURNAL_BUFFERED_ENTRIES_THRESHOLD, 0);\n+    }\n+\n+    /**\n+     * Set maximum entries to buffer to impose on a journal write to achieve grouping.\n+     * Use {@link #getJournalBufferedWritesThreshold()} set this to zero or less than\n+     * zero.\n+     *\n+     * @param maxEntries\n+     *          maximum entries to buffer.\n+     * @return server configuration.\n+     */\n+    public ServerConfiguration setJournalBufferedEntriesThreshold(int maxEntries) {\n+        setProperty(JOURNAL_BUFFERED_ENTRIES_THRESHOLD, maxEntries);\n+        return this;\n+    }\n+\n+    /**\n+     * Set if we should flush the journal when queue is empty\n+     */\n+    public ServerConfiguration setJournalFlushWhenQueueEmpty(boolean enabled) {\n+        setProperty(JOURNAL_FLUSH_WHEN_QUEUE_EMPTY, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Should we flush the journal when queue is empty\n+     *\n+     * @return flush when queue is empty\n+     */\n+    public boolean getJournalFlushWhenQueueEmpty() {\n+        return getBoolean(JOURNAL_FLUSH_WHEN_QUEUE_EMPTY, false);\n+    }\n+\n+    /**\n+     * Set whether the bookie is able to go into read-only mode.\n+     * If this is set to false, the bookie will shutdown on encountering\n+     * an error condition.\n+     *\n+     * @param enabled whether to enable read-only mode.\n+     *\n+     * @return ServerConfiguration\n      */\n     public ServerConfiguration setReadOnlyModeEnabled(boolean enabled) {\n         setProperty(READ_ONLY_MODE_ENABLED, enabled);\n         return this;\n     }\n \n     /**\n-     * Get ReadOnlyModeEnabled status\n-     * \n+     * Get whether read-only mode is enabled. The default is false.\n+     *\n      * @return boolean\n      */\n     public boolean isReadOnlyModeEnabled() {\n         return getBoolean(READ_ONLY_MODE_ENABLED, false);\n     }\n \n+    /**\n+     * Set the warning threshold for disk usage.\n+     *\n+     * @param threshold warning threshold to force gc.\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setDiskUsageWarnThreshold(float threshold) {\n+        setProperty(DISK_USAGE_WARN_THRESHOLD, threshold);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the warning threshold for disk usage. If disk usage\n+     * goes beyond this, a garbage collection cycle will be forced.\n+     * @return the percentage at which a disk usage warning will trigger\n+     */\n+    public float getDiskUsageWarnThreshold() {\n+        return getFloat(DISK_USAGE_WARN_THRESHOLD, 0.90f);\n+    }\n+\n     /**\n      * Set the Disk free space threshold as a fraction of the total\n      * after which disk will be considered as full during disk check.\n-     * \n+     *\n      * @param threshold threshold to declare a disk full\n-     * \n+     *\n      * @return ServerConfiguration\n      */\n     public ServerConfiguration setDiskUsageThreshold(float threshold) {\n@@ -620,18 +1122,18 @@ public ServerConfiguration setDiskUsageThreshold(float threshold) {\n \n     /**\n      * Returns disk free space threshold. By default it is 0.95.\n-     * \n-     * @return float\n+     *\n+     * @return the percentage at which a disk will be considered full\n      */\n     public float getDiskUsageThreshold() {\n         return getFloat(DISK_USAGE_THRESHOLD, 0.95f);\n     }\n \n     /**\n      * Set the disk checker interval to monitor ledger disk space\n-     * \n+     *\n      * @param interval interval between disk checks for space.\n-     * \n+     *\n      * @return ServerConfiguration\n      */\n     public ServerConfiguration setDiskCheckInterval(int interval) {\n@@ -641,7 +1143,7 @@ public ServerConfiguration setDiskCheckInterval(int interval) {\n \n     /**\n      * Get the disk checker interval\n-     * \n+     *\n      * @return int\n      */\n     public int getDiskCheckInterval() {\n@@ -651,7 +1153,8 @@ public int getDiskCheckInterval() {\n     /**\n      * Set the regularity at which the auditor will run a check\n      * of all ledgers. This should not be run very often, and at most,\n-     * once a day.\n+     * once a day. Setting this to 0 will completely disable the periodic\n+     * check.\n      *\n      * @param interval The interval in seconds. e.g. 86400 = 1 day, 604800 = 1 week\n      */\n@@ -661,9 +1164,198 @@ public void setAuditorPeriodicCheckInterval(long interval) {\n \n     /**\n      * Get the regularity at which the auditor checks all ledgers.\n-     * @return The interval in seconds\n+     * @return The interval in seconds. Default is 604800 (1 week).\n      */\n     public long getAuditorPeriodicCheckInterval() {\n-        return getLong(AUDITOR_PERIODIC_CHECK_INTERVAL, 86400);\n+        return getLong(AUDITOR_PERIODIC_CHECK_INTERVAL, 604800);\n+    }\n+\n+    /**\n+     * Set the interval between auditor bookie checks.\n+     * The auditor bookie check, checks ledger metadata to see which bookies\n+     * contain entries for each ledger. If a bookie which should contain entries\n+     * is unavailable, then the ledger containing that entry is marked for recovery.\n+     * Setting this to 0 disabled the periodic check. Bookie checks will still\n+     * run when a bookie fails.\n+     *\n+     * @param interval The period in seconds.\n+     */\n+    public void setAuditorPeriodicBookieCheckInterval(long interval) {\n+        setProperty(AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL, interval);\n     }\n+\n+    /**\n+     * Get the interval between auditor bookie check runs.\n+     * @see #setAuditorPeriodicBookieCheckInterval(long)\n+     * @return the interval between bookie check runs, in seconds. Default is 86400 (= 1 day)\n+     */\n+    public long getAuditorPeriodicBookieCheckInterval() {\n+        return getLong(AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL, 86400);\n+    }\n+\n+    /**\n+     * Sets that whether the auto-recovery service can start along with Bookie\n+     * server itself or not\n+     *\n+     * @param enabled\n+     *            - true if need to start auto-recovery service. Otherwise\n+     *            false.\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setAutoRecoveryDaemonEnabled(boolean enabled) {\n+        setProperty(AUTO_RECOVERY_DAEMON_ENABLED, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Get whether the Bookie itself can start auto-recovery service also or not\n+     *\n+     * @return true - if Bookie should start auto-recovery service along with\n+     *         it. false otherwise.\n+     */\n+    public boolean isAutoRecoveryDaemonEnabled() {\n+        return getBoolean(AUTO_RECOVERY_DAEMON_ENABLED, false);\n+    }\n+\n+    /**\n+     * Get the maximum number of entries which can be compacted without flushing.\n+     * Default is 100,000.\n+     *\n+     * @return the maximum number of unflushed entries\n+     */\n+    public int getCompactionMaxOutstandingRequests() {\n+        return getInt(COMPACTION_MAX_OUTSTANDING_REQUESTS, 100000);\n+    }\n+\n+    /**\n+     * Set the maximum number of entries which can be compacted without flushing.\n+     *\n+     * When compacting, the entries are written to the entrylog and the new offsets\n+     * are cached in memory. Once the entrylog is flushed the index is updated with\n+     * the new offsets. This parameter controls the number of entries added to the\n+     * entrylog before a flush is forced. A higher value for this parameter means\n+     * more memory will be used for offsets. Each offset consists of 3 longs.\n+     *\n+     * This parameter should _not_ be modified unless you know what you're doing.\n+     * The default is 100,000.\n+     *\n+     * @param maxOutstandingRequests number of entries to compact before flushing\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setCompactionMaxOutstandingRequests(int maxOutstandingRequests) {\n+        setProperty(COMPACTION_MAX_OUTSTANDING_REQUESTS, maxOutstandingRequests);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the rate of compaction adds. Default is 1,000.\n+     *\n+     * @return rate of compaction (adds per second)\n+     */\n+    public int getCompactionRate() {\n+        return getInt(COMPACTION_RATE, 1000);\n+    }\n+\n+    /**\n+     * Set the rate of compaction adds.\n+     *\n+     * @param rate rate of compaction adds (adds per second)\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setCompactionRate(int rate) {\n+        setProperty(COMPACTION_RATE, rate);\n+        return this;\n+    }\n+\n+    /**\n+     * Should we remove pages from page cache after force write\n+     *\n+     * @return remove pages from cache\n+     */\n+    @Beta\n+    public boolean getJournalRemovePagesFromCache() {\n+        return getBoolean(JOURNAL_REMOVE_FROM_PAGE_CACHE, false);\n+    }\n+\n+    /**\n+     * Sets that whether should we remove pages from page cache after force write.\n+     *\n+     * @param enabled\n+     *            - true if we need to remove pages from page cache. otherwise, false\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setJournalRemovePagesFromCache(boolean enabled) {\n+        setProperty(JOURNAL_REMOVE_FROM_PAGE_CACHE, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Get whether bookie is using hostname for registration and in ledger\n+     * metadata. Defaults to false.\n+     *\n+     * @return true, then bookie will be registered with its hostname and\n+     *         hostname will be used in ledger metadata. Otherwise bookie will\n+     *         use its ipaddress\n+     */\n+    public boolean getUseHostNameAsBookieID() {\n+        return getBoolean(USE_HOST_NAME_AS_BOOKIE_ID, false);\n+    }\n+\n+    /**\n+     * Configure the bookie to use its hostname to register with the\n+     * co-ordination service(eg: zookeeper) and in ledger metadata\n+     *\n+     * @see #getUseHostNameAsBookieID\n+     * @param useHostName\n+     *            whether to use hostname for registration and in ledgermetadata\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setUseHostNameAsBookieID(boolean useHostName) {\n+        setProperty(USE_HOST_NAME_AS_BOOKIE_ID, useHostName);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the stats provider used by bookie.\n+     *\n+     * @return stats provider class\n+     * @throws ConfigurationException\n+     */\n+    public Class<? extends StatsProvider> getStatsProviderClass()\n+        throws ConfigurationException {\n+        return ReflectionUtils.getClass(this, STATS_PROVIDER_CLASS,\n+                                        NullStatsProvider.class, StatsProvider.class,\n+                                        defaultLoader);\n+    }\n+\n+    /**\n+     * Set the stats provider used by bookie.\n+     *\n+     * @param providerClass\n+     *          stats provider class\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setStatsProviderClass(Class<? extends StatsProvider> providerClass) {\n+        setProperty(STATS_PROVIDER_CLASS, providerClass.getName());\n+        return this;\n+    }\n+\n+    /**\n+     * Validate the configuration.\n+     * @throws ConfigurationException\n+     */\n+    public void validate() throws ConfigurationException {\n+        if (getSkipListArenaChunkSize() < getSkipListArenaMaxAllocSize()) {\n+            throw new ConfigurationException(\"Arena max allocation size should be smaller than the chunk size.\");\n+        }\n+        if (getJournalAlignmentSize() < 512 || getJournalAlignmentSize() % 512 != 0) {\n+            throw new ConfigurationException(\"Invalid journal alignment size : \" + getJournalAlignmentSize());\n+        }\n+        if (getJournalAlignmentSize() > getJournalPreAllocSizeMB() * 1024 * 1024) {\n+            throw new ConfigurationException(\"Invalid preallocation size : \" + getJournalPreAllocSizeMB() + \" MB\");\n+        }\n+    }\n+\n }"},{"sha":"0fc8afee8658ef747e100ab53c23f6514e782517","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":195,"deletions":14,"changes":209,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -20,41 +20,108 @@\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.NavigableSet;\n import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n \n-import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n-import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.util.ZkUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n+import org.apache.bookkeeper.versioning.Version;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.AsyncCallback.DataCallback;\n-import org.apache.zookeeper.AsyncCallback.VoidCallback;\n import org.apache.zookeeper.AsyncCallback.StatCallback;\n+import org.apache.zookeeper.AsyncCallback.VoidCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n /**\n  * Abstract ledger manager based on zookeeper, which provides common methods such as query zk nodes.\n  */\n-abstract class AbstractZkLedgerManager implements LedgerManager {\n+abstract class AbstractZkLedgerManager implements LedgerManager, Watcher {\n+\n+    private final static Logger LOG = LoggerFactory.getLogger(AbstractZkLedgerManager.class);\n \n-    static Logger LOG = LoggerFactory.getLogger(AbstractZkLedgerManager.class);\n+    static int ZK_CONNECT_BACKOFF_MS = 200;\n \n     protected final AbstractConfiguration conf;\n     protected final ZooKeeper zk;\n     protected final String ledgerRootPath;\n \n+    // ledger metadata listeners\n+    protected final ConcurrentMap<Long, Set<LedgerMetadataListener>> listeners =\n+            new ConcurrentHashMap<Long, Set<LedgerMetadataListener>>();\n+    // we use this to prevent long stack chains from building up in callbacks\n+    protected ScheduledExecutorService scheduler;\n+\n+    protected class ReadLedgerMetadataTask implements Runnable, GenericCallback<LedgerMetadata> {\n+\n+        final long ledgerId;\n+\n+        ReadLedgerMetadataTask(long ledgerId) {\n+            this.ledgerId = ledgerId;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (null != listeners.get(ledgerId)) {\n+                LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                readLedgerMetadata(ledgerId, this, AbstractZkLedgerManager.this);\n+            } else {\n+                LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+            }\n+        }\n+\n+        @Override\n+        public void operationComplete(int rc, final LedgerMetadata result) {\n+            if (BKException.Code.OK == rc) {\n+                final Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (null != listenerSet) {\n+                    LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                    scheduler.submit(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            synchronized(listenerSet) {\n+                                for (LedgerMetadataListener listener : listenerSet) {\n+                                    listener.onChanged(ledgerId, result);\n+                                }\n+                            }\n+                        }\n+                    });\n+                }\n+            } else if (BKException.Code.NoSuchLedgerExistsException == rc) {\n+                // the ledger is removed, do nothing\n+                Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                if (null != listenerSet) {\n+                    LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n+                            ledgerId, listenerSet.size());\n+                }\n+            } else {\n+                LOG.warn(\"Failed on read ledger metadata of ledger {} : {}\", ledgerId, rc);\n+                scheduler.schedule(this, ZK_CONNECT_BACKOFF_MS, TimeUnit.MILLISECONDS);\n+            }\n+        }\n+    }\n+\n     /**\n      * ZooKeeper-based Ledger Manager Constructor\n      *\n@@ -67,6 +134,12 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         this.conf = conf;\n         this.zk = zk;\n         this.ledgerRootPath = conf.getZkLedgersRootPath();\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder().setNameFormat(\n+                \"ZkLedgerManagerScheduler-%d\");\n+        this.scheduler = Executors\n+                .newSingleThreadScheduledExecutor(tfb.build());\n+        LOG.debug(\"Using AbstractZkLedgerManager with root path : {}\", ledgerRootPath);\n     }\n \n     /**\n@@ -88,6 +161,59 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n      */\n     protected abstract long getLedgerId(String ledgerPath) throws IOException;\n \n+    @Override\n+    public void process(WatchedEvent event) {\n+        LOG.info(\"Received watched event {} from zookeeper based ledger manager.\", event);\n+        if (Event.EventType.None == event.getType()) {\n+            /** TODO: BOOKKEEPER-537 to handle expire events.\n+            if (Event.KeeperState.Expired == event.getState()) {\n+                LOG.info(\"ZooKeeper client expired on ledger manager.\");\n+                Set<Long> keySet = new HashSet<Long>(listeners.keySet());\n+                for (Long lid : keySet) {\n+                    scheduler.submit(new ReadLedgerMetadataTask(lid));\n+                    LOG.info(\"Re-read ledger metadata for {} after zookeeper session expired.\", lid);\n+                }\n+            }\n+            **/\n+            return;\n+        }\n+        String path = event.getPath();\n+        if (null == path) {\n+            return;\n+        }\n+        final long ledgerId;\n+        try {\n+            ledgerId = getLedgerId(event.getPath());\n+        } catch (IOException ioe) {\n+            LOG.info(\"Received invalid ledger path {} : \", event.getPath(), ioe);\n+            return;\n+        }\n+        switch (event.getType()) {\n+        case NodeDeleted:\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+            if (null != listenerSet) {\n+                synchronized(listenerSet){\n+                    LOG.debug(\"Removed ledger metadata listeners on ledger {} : {}\",\n+                            ledgerId, listenerSet);\n+                    for(LedgerMetadataListener l : listenerSet) {\n+                        unregisterLedgerMetadataListener(ledgerId, l);\n+                        l.onChanged( ledgerId, null );\n+                    }\n+                }\n+            } else {\n+                LOG.debug(\"No ledger metadata listeners to remove from ledger {} after it's deleted.\",\n+                        ledgerId);\n+            }\n+            break;\n+        case NodeDataChanged:\n+            new ReadLedgerMetadataTask(ledgerId).run();\n+            break;\n+        default:\n+            LOG.debug(\"Received event {} on {}.\", event.getType(), event.getPath());\n+            break;\n+        }\n+    }\n+\n     /**\n      * Removes ledger metadata from ZooKeeper if version matches.\n      *\n@@ -121,6 +247,15 @@ public void processResult(int rc, String path, Object ctx) {\n                     LOG.warn(\"Ledger node does not exist in ZooKeeper: ledgerId={}\", ledgerId);\n                     bkRc = BKException.Code.NoSuchLedgerExistsException;\n                 } else if (rc == KeeperException.Code.OK.intValue()) {\n+                    // removed listener on ledgerId\n+                    Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Remove registered ledger metadata listeners on ledger {} after ledger is deleted.\",\n+                                ledgerId, listenerSet);\n+                    } else {\n+                        LOG.debug(\"No ledger metadata listeners to remove from ledger {} when it's being deleted.\",\n+                                ledgerId);\n+                    }\n                     bkRc = BKException.Code.OK;\n                 } else {\n                     bkRc = BKException.Code.ZKException;\n@@ -130,9 +265,50 @@ public void processResult(int rc, String path, Object ctx) {\n         }, null);\n     }\n \n+    @Override\n+    public void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+        if (null != listener) {\n+            LOG.info(\"Registered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+            if (listenerSet == null) {\n+                Set<LedgerMetadataListener> newListenerSet = new HashSet<LedgerMetadataListener>();\n+                Set<LedgerMetadataListener> oldListenerSet = listeners.putIfAbsent(ledgerId, newListenerSet);\n+                if (null != oldListenerSet) {\n+                    listenerSet = oldListenerSet;\n+                } else {\n+                    listenerSet = newListenerSet;\n+                }\n+            }\n+            synchronized (listenerSet) {\n+                listenerSet.add(listener);\n+            }\n+            new ReadLedgerMetadataTask(ledgerId).run();\n+        }\n+    }\n+\n+    @Override\n+    public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+        Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+        if (listenerSet != null) {\n+            synchronized (listenerSet) {\n+                if (listenerSet.remove(listener)) {\n+                    LOG.info(\"Unregistered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                }\n+                if (listenerSet.isEmpty()) {\n+                    listeners.remove(ledgerId, listenerSet);\n+                }\n+            }\n+        }\n+    }\n+\n     @Override\n     public void readLedgerMetadata(final long ledgerId, final GenericCallback<LedgerMetadata> readCb) {\n-        zk.getData(getLedgerPath(ledgerId), false, new DataCallback() {\n+        readLedgerMetadata(ledgerId, readCb, null);\n+    }\n+\n+    protected void readLedgerMetadata(final long ledgerId, final GenericCallback<LedgerMetadata> readCb,\n+                                      Watcher watcher) {\n+        zk.getData(getLedgerPath(ledgerId), watcher, new DataCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n                 if (rc == KeeperException.Code.NONODE.intValue()) {\n@@ -177,7 +353,7 @@ public void writeLedgerMetadata(final long ledgerId, final LedgerMetadata metada\n                    new StatCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx, Stat stat) {\n-                if (KeeperException.Code.BadVersion == rc) {\n+                if (KeeperException.Code.BADVERSION.intValue() == rc) {\n                     cb.operationComplete(BKException.Code.MetadataVersionException, null);\n                 } else if (KeeperException.Code.OK.intValue() == rc) {\n                     // update metadata version\n@@ -275,8 +451,8 @@ protected boolean isSpecialZnode(String znode) {\n      *          the prefix path of the ledger nodes\n      * @return ledger id hash set\n      */\n-    protected Set<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n-        Set<Long> zkActiveLedgers = new HashSet<Long>(ledgerNodes.size(), 1.0f);\n+    protected NavigableSet<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n+        NavigableSet<Long> zkActiveLedgers = new TreeSet<Long>();\n         for (String ledgerNode : ledgerNodes) {\n             if (isSpecialZnode(ledgerNode)) {\n                 continue;\n@@ -297,5 +473,10 @@ protected boolean isSpecialZnode(String znode) {\n \n     @Override\n     public void close() {\n+        try {\n+            scheduler.shutdown();\n+        } catch (Exception e) {\n+            LOG.warn(\"Error when closing zookeeper based ledger manager: \", e);\n+        }\n     }\n }"},{"sha":"a8731124807ff59eab8566e91376e8d1a1937e7a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,226 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.zookeeper.AsyncCallback;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+public class CleanupLedgerManager implements LedgerManager {\n+\n+    private class CleanupGenericCallback<T> implements GenericCallback<T> {\n+\n+        private final GenericCallback<T> cb;\n+\n+        CleanupGenericCallback(GenericCallback<T> cb) {\n+            this.cb = cb;\n+            addCallback(cb);\n+        }\n+\n+        @Override\n+        public void operationComplete(int rc, T result) {\n+            closeLock.readLock().lock();\n+            try {\n+                if (!closed && null != removeCallback(cb)) {\n+                    cb.operationComplete(rc, result);\n+                }\n+            } finally {\n+                closeLock.readLock().unlock();\n+            }\n+        }\n+    }\n+\n+    private static class ClosedLedgerRangeIterator implements LedgerRangeIterator {\n+\n+        @Override\n+        public boolean hasNext() throws IOException {\n+            throw new IOException(\"Ledger manager is closed.\");\n+        }\n+\n+        @Override\n+        public LedgerRange next() throws IOException {\n+            throw new IOException(\"Ledger manager is closed.\");\n+        }\n+    }\n+\n+    private final LedgerManager underlying;\n+    private final ConcurrentMap<GenericCallback, GenericCallback> callbacks =\n+        new ConcurrentHashMap<GenericCallback, GenericCallback>();\n+    private boolean closed = false;\n+    private final ReentrantReadWriteLock closeLock = new ReentrantReadWriteLock();\n+\n+    public CleanupLedgerManager(LedgerManager lm) {\n+        this.underlying = lm;\n+    }\n+\n+    private void addCallback(GenericCallback callback) {\n+        callbacks.put(callback, callback);\n+    }\n+\n+    @Override\n+    public void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+        underlying.registerLedgerMetadataListener(ledgerId, listener);\n+    }\n+\n+    @Override\n+    public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+        underlying.unregisterLedgerMetadataListener(ledgerId, listener);\n+    }\n+\n+    private GenericCallback removeCallback(GenericCallback callback) {\n+        return callbacks.remove(callback);\n+    }\n+\n+    @Override\n+    public void createLedger(LedgerMetadata metadata,\n+                             GenericCallback<Long> cb) {\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                cb.operationComplete(BKException.Code.ClientClosedException, null);\n+                return;\n+            }\n+            underlying.createLedger(metadata, new CleanupGenericCallback<Long>(cb));\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public void removeLedgerMetadata(long ledgerId, Version version,\n+                                     GenericCallback<Void> vb) {\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                vb.operationComplete(BKException.Code.ClientClosedException, null);\n+                return;\n+            }\n+            underlying.removeLedgerMetadata(ledgerId, version,\n+                    new CleanupGenericCallback<Void>(vb));\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public void readLedgerMetadata(long ledgerId,\n+                                   GenericCallback<LedgerMetadata> readCb) {\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                readCb.operationComplete(BKException.Code.ClientClosedException, null);\n+                return;\n+            }\n+            underlying.readLedgerMetadata(ledgerId, new CleanupGenericCallback<LedgerMetadata>(readCb));\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public void writeLedgerMetadata(long ledgerId, LedgerMetadata metadata,\n+                                    GenericCallback<Void> cb) {\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                cb.operationComplete(BKException.Code.ClientClosedException, null);\n+                return;\n+            }\n+            underlying.writeLedgerMetadata(ledgerId, metadata,\n+                    new CleanupGenericCallback<Void>(cb));\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public void asyncProcessLedgers(Processor<Long> processor,\n+                                    final AsyncCallback.VoidCallback finalCb, final Object context,\n+                                    final int successRc, final int failureRc) {\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                finalCb.processResult(failureRc, null, context);\n+                return;\n+            }\n+            final GenericCallback<Void> stub = new GenericCallback<Void>() {\n+                @Override\n+                public void operationComplete(int rc, Void result) {\n+                    finalCb.processResult(failureRc, null, context);\n+                }\n+            };\n+            addCallback(stub);\n+            underlying.asyncProcessLedgers(processor, new AsyncCallback.VoidCallback() {\n+                @Override\n+                public void processResult(int rc, String path, Object ctx) {\n+                    if (null != removeCallback(stub)) {\n+                        finalCb.processResult(rc, path, ctx);\n+                    }\n+                }\n+            }, context, successRc, failureRc);\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public LedgerRangeIterator getLedgerRanges() {\n+        closeLock.readLock().lock();\n+        try {\n+            if (closed) {\n+                return new ClosedLedgerRangeIterator();\n+            }\n+            return underlying.getLedgerRanges();\n+        } finally {\n+            closeLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void close() throws IOException {\n+        Set<GenericCallback> keys;\n+        closeLock.writeLock().lock();\n+        try {\n+            if (closed) {\n+                return;\n+            }\n+            closed = true;\n+            keys = new HashSet<GenericCallback>(callbacks.keySet());\n+        } finally {\n+            closeLock.writeLock().unlock();\n+        }\n+        for (GenericCallback key : keys) {\n+            GenericCallback callback = callbacks.remove(key);\n+            if (null != callback) {\n+                callback.operationComplete(BKException.Code.ClientClosedException, null);\n+            }\n+        }\n+    }\n+}"},{"sha":"2bc42580f4ae87784f44910009821c5c77553e9c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":30,"deletions":17,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -79,21 +79,21 @@ public void processResult(int rc, String path, Object ctx,\n                 if (Code.OK.intValue() != rc) {\n                     LOG.error(\"Could not create node for ledger\",\n                               KeeperException.create(KeeperException.Code.get(rc), path));\n-                    cb.operationComplete(rc, null);\n+                    cb.operationComplete(BKException.Code.ZKException, null);\n                 } else {\n                     // update znode status\n                     metadata.setVersion(new ZkVersion(0));\n                     try {\n                         long ledgerId = getLedgerId(name);\n-                        cb.operationComplete(rc, ledgerId);\n+                        cb.operationComplete(BKException.Code.OK, ledgerId);\n                     } catch (IOException ie) {\n                         LOG.error(\"Could not extract ledger-id from path:\" + name, ie);\n                         cb.operationComplete(BKException.Code.ZKException, null);\n                     }\n                 }\n             }\n         };\n-        ZkUtils.createFullPathOptimistic(zk, ledgerPrefix, metadata.serialize(),\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPrefix, metadata.serialize(),\n             Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL, scb, null);\n     }\n \n@@ -128,25 +128,38 @@ public void asyncProcessLedgers(final Processor<Long> processor,\n     public LedgerRangeIterator getLedgerRanges() {\n         return new LedgerRangeIterator() {\n             // single iterator, can visit only one time\n-            boolean hasMoreElement = true;\n-            @Override\n-            public boolean hasNext() {\n-                return hasMoreElement;\n-            }\n-            @Override\n-            public LedgerRange next() throws IOException {\n-                if (!hasMoreElement) {\n-                    throw new NoSuchElementException();\n+            boolean nextCalled = false;\n+            LedgerRange nextRange = null;\n+\n+            synchronized private void preload() throws IOException {\n+                if (nextRange != null) {\n+                    return;\n                 }\n-                hasMoreElement = false;\n-                Set<Long> zkActiveLedgers;\n+                Set<Long> zkActiveLedgers = null;\n+\n                 try {\n                     zkActiveLedgers = ledgerListToSet(\n                             ZkUtils.getChildrenInSingleNode(zk, ledgerRootPath), ledgerRootPath);\n-                } catch (InterruptedException e) {\n-                    throw new IOException(\"Error when get child nodes from zk\", e);\n+                    nextRange = new LedgerRange(zkActiveLedgers);\n+                } catch (InterruptedException ie) {\n+                    Thread.currentThread().interrupt();\n+                    throw new IOException(\"Error when get child nodes from zk\", ie);\n+                }\n+            }\n+\n+            @Override\n+            synchronized public boolean hasNext() throws IOException {\n+                preload();\n+                return nextRange != null && nextRange.size() > 0 && !nextCalled;\n+            }\n+\n+            @Override\n+            synchronized public LedgerRange next() throws IOException {\n+                if (!hasNext()) {\n+                    throw new NoSuchElementException();\n                 }\n-                return new LedgerRange(zkActiveLedgers);\n+                nextCalled = true;\n+                return nextRange;\n             }\n         };\n     }"},{"sha":"db16d26b1672ce4f549d9d4010307e7924475db8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -30,7 +30,7 @@\n /**\n  * Flat Ledger Manager Factory\n  */\n-class FlatLedgerManagerFactory extends LedgerManagerFactory {\n+public class FlatLedgerManagerFactory extends LedgerManagerFactory {\n \n     public static final String NAME = \"flat\";\n     public static final int CUR_VERSION = 1;"},{"sha":"7f2df736bc1e511f0c4eafcfb0d9ede140f8e84c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":56,"deletions":46,"changes":102,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.meta;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,16 +15,19 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.NavigableSet;\n import java.util.NoSuchElementException;\n-import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -40,7 +41,6 @@\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -71,9 +71,6 @@\n     // Path to generate global id\n     private final String idGenPath;\n \n-    // we use this to prevent long stack chains from building up in callbacks\n-    ScheduledExecutorService scheduler;\n-\n     /**\n      * Constructor\n      *\n@@ -86,30 +83,18 @@ public HierarchicalLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         super(conf, zk);\n \n         this.idGenPath = ledgerRootPath + IDGENERATION_PREFIX;\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n-        LOG.debug(\"Using HierarchicalLedgerManager with root path : {}\", ledgerRootPath);\n-    }\n-\n-    @Override\n-    public void close() {\n-        try {\n-            scheduler.shutdown();\n-        } catch (Exception e) {\n-            LOG.warn(\"Error when closing HierarchicalLedgerManager : \", e);\n-        }\n-        super.close();\n     }\n \n     @Override\n     public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n-        ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n             CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx, final String idPathName) {\n                 if (rc != KeeperException.Code.OK.intValue()) {\n                     LOG.error(\"Could not generate new ledger id\",\n                               KeeperException.create(KeeperException.Code.get(rc), path));\n-                    ledgerCb.operationComplete(rc, null);\n+                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                     return;\n                 }\n                 /*\n@@ -120,7 +105,7 @@ public void processResult(int rc, String path, Object ctx, final String idPathNa\n                     ledgerId = getLedgerIdFromGenPath(idPathName);\n                 } catch (IOException e) {\n                     LOG.error(\"Could not extract ledger-id from id gen path:\" + path, e);\n-                    ledgerCb.operationComplete(KeeperException.Code.SYSTEMERROR.intValue(), null);\n+                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                     return;\n                 }\n                 String ledgerPath = getLedgerPath(ledgerId);\n@@ -132,15 +117,15 @@ public void processResult(int rc, String path,\n                         if (rc != KeeperException.Code.OK.intValue()) {\n                             LOG.error(\"Could not create node for ledger\",\n                                       KeeperException.create(KeeperException.Code.get(rc), path));\n-                            ledgerCb.operationComplete(rc, null);\n+                            ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                         } else {\n                             // update version\n                             metadata.setVersion(new ZkVersion(0));\n-                            ledgerCb.operationComplete(rc, lid);\n+                            ledgerCb.operationComplete(BKException.Code.OK, lid);\n                         }\n                     }\n                 };\n-                ZkUtils.createFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n+                ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, scb, null);\n                 // delete the znode for id generation\n                 scheduler.submit(new Runnable() {\n@@ -381,7 +366,8 @@ public LedgerRangeIterator getLedgerRanges() {\n         private Iterator<String> l1NodesIter = null;\n         private Iterator<String> l2NodesIter = null;\n         private String curL1Nodes = \"\";\n-        private boolean hasMoreElement = true;\n+        private boolean iteratorDone = false;\n+        private LedgerRange nextRange = null;\n \n         /**\n          * iterate next level1 znode\n@@ -401,6 +387,7 @@ private boolean nextL1Node() throws KeeperException, InterruptedException {\n                     continue;\n                 }\n                 List<String> l2Nodes = zk.getChildren(ledgerRootPath + \"/\" + curL1Nodes, null);\n+                Collections.sort(l2Nodes);\n                 l2NodesIter = l2Nodes.iterator();\n                 if (!l2NodesIter.hasNext()) {\n                     l2NodesIter = null;\n@@ -410,27 +397,49 @@ private boolean nextL1Node() throws KeeperException, InterruptedException {\n             return true;\n         }\n \n-        @Override\n-        public boolean hasNext() throws IOException {\n-            try {\n-                if (l1NodesIter == null) {\n-                    l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();\n-                    hasMoreElement = nextL1Node();\n-                } else if (!l2NodesIter.hasNext()) {\n-                    hasMoreElement = nextL1Node();\n+        synchronized private void preload() throws IOException {\n+            while (nextRange == null && !iteratorDone) {\n+                boolean hasMoreElements = false;\n+                try {\n+                    if (l1NodesIter == null) {\n+                        l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();\n+                        hasMoreElements = nextL1Node();\n+                    } else if (l2NodesIter == null || !l2NodesIter.hasNext()) {\n+                        hasMoreElements = nextL1Node();\n+                    } else {\n+                        hasMoreElements = true;\n+                    }\n+                } catch (KeeperException ke) {\n+                    throw new IOException(\"Error preloading next range\", ke);\n+                } catch (InterruptedException ie) {\n+                    Thread.currentThread().interrupt();\n+                    throw new IOException(\"Interrupted while preloading\", ie);\n+                }\n+                if (hasMoreElements) {\n+                    nextRange = getLedgerRangeByLevel(curL1Nodes, l2NodesIter.next());\n+                    if (nextRange.size() == 0) {\n+                        nextRange = null;\n+                    }\n+                } else {\n+                    iteratorDone = true;\n                 }\n-            } catch (Exception e) {\n-                throw new IOException(\"Error when check more elements\", e);\n             }\n-            return hasMoreElement;\n         }\n \n         @Override\n-        public LedgerRange next() throws IOException {\n-            if (!hasMoreElement) {\n+        synchronized public boolean hasNext() throws IOException {\n+            preload();\n+            return nextRange != null && !iteratorDone;\n+        }\n+\n+        @Override\n+        synchronized public LedgerRange next() throws IOException {\n+            if (!hasNext()) {\n                 throw new NoSuchElementException();\n             }\n-            return getLedgerRangeByLevel(curL1Nodes, l2NodesIter.next());\n+            LedgerRange r = nextRange;\n+            nextRange = null;\n+            return r;\n         }\n \n         /**\n@@ -454,13 +463,14 @@ LedgerRange getLedgerRangeByLevel(final String level1, final String level2)\n             } catch (InterruptedException e) {\n                 throw new IOException(\"Error when get child nodes from zk\", e);\n             }\n-            Set<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n+            NavigableSet<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"All active ledgers from ZK for hash node \"\n                           + level1 + \"/\" + level2 + \" : \" + zkActiveLedgers);\n             }\n-            return new LedgerRange(zkActiveLedgers,\n-                    getStartLedgerIdByLevel(level1, level2), getEndLedgerIdByLevel(level1, level2));\n+\n+            return new LedgerRange(zkActiveLedgers.subSet(getStartLedgerIdByLevel(level1, level2), true,\n+                                                          getEndLedgerIdByLevel(level1, level2), true));\n         }\n     }\n }"},{"sha":"b843e994af49da314d17204110a191968e685220","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -30,7 +30,7 @@\n /**\n  * Hierarchical Ledger Manager Factory\n  */\n-class HierarchicalLedgerManagerFactory extends LedgerManagerFactory {\n+public class HierarchicalLedgerManagerFactory extends LedgerManagerFactory {\n \n     public static final String NAME = \"hierarchical\";\n     public static final int CUR_VERSION = 1;"},{"sha":"72290286e1b0227db0b712393411b34a34db0731","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","status":"modified","additions":29,"deletions":17,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,10 +21,13 @@\n import java.io.Closeable;\n import java.io.IOException;\n import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n \n import org.apache.zookeeper.AsyncCallback;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.versioning.Version;\n@@ -91,6 +94,26 @@\n      */\n     public void writeLedgerMetadata(long ledgerId, LedgerMetadata metadata, GenericCallback<Void> cb);\n \n+    /**\n+     * Register the ledger metadata <i>listener</i> on <i>ledgerId</i>.\n+     *\n+     * @param ledgerId\n+     *          ledger id.\n+     * @param listener\n+     *          listener.\n+     */\n+    public abstract void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener);\n+\n+    /**\n+     * Unregister the ledger metadata <i>listener</i> on <i>ledgerId</i>.\n+     *\n+     * @param ledgerId\n+     *          ledger id.\n+     * @param listener\n+     *          ledger metadata listener.\n+     */\n+    public abstract void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener);\n+\n     /**\n      * Loop to process all ledgers.\n      * <p>\n@@ -127,34 +150,23 @@ public void asyncProcessLedgers(Processor<Long> processor, AsyncCallback.VoidCal\n      * current scan.\n      */\n     public static class LedgerRange {\n-        // ledger start and end ranges\n-        private final long start;\n-        private final long end;\n-        public final static long NOLIMIT = -1;\n-\n         // returned ledgers\n-        private Set<Long> ledgers;\n+        private final SortedSet<Long> ledgers;\n \n         public LedgerRange(Set<Long> ledgers) {\n-            this(ledgers, NOLIMIT, NOLIMIT);\n-        }\n-\n-        public LedgerRange(Set<Long> ledgers, long start) {\n-            this(ledgers, start, NOLIMIT);\n+            this.ledgers = new TreeSet<Long>(ledgers);\n         }\n \n-        public LedgerRange(Set<Long> ledgers, long start, long end) {\n-            this.ledgers = ledgers;\n-            this.start = start;\n-            this.end = end;\n+        public int size() {\n+            return this.ledgers.size();\n         }\n \n         public Long start() {\n-            return this.start;\n+            return ledgers.first();\n         }\n \n         public Long end() {\n-            return this.end;\n+            return ledgers.last();\n         }\n \n         public Set<Long> getLedgers() {"},{"sha":"7c3cf5c994c7a8a61e8ad1cea70bab9c0c2720ec","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -133,16 +133,17 @@ public static LedgerManagerFactory newLedgerManagerFactory(\n         // handle pre V2 layout\n         if (layout.getLayoutFormatVersion() <= V1) {\n             // pre V2 layout we use type of ledger manager\n+            @SuppressWarnings(\"deprecation\")\n             String lmType = conf.getLedgerManagerType();\n-            if (lmType != null && !layout.getManagerType().equals(lmType)) {\n+            if (lmType != null && !layout.getManagerFactoryClass().equals(lmType)) {\n                 throw new IOException(\"Configured layout \" + lmType\n-                                    + \" does not match existing layout \"  + layout.getManagerType());\n+                        + \" does not match existing layout \"  + layout.getManagerFactoryClass());\n             }\n \n             // create the ledger manager\n-            if (FlatLedgerManagerFactory.NAME.equals(layout.getManagerType())) {\n+            if (FlatLedgerManagerFactory.NAME.equals(layout.getManagerFactoryClass())) {\n                 lmFactory = new FlatLedgerManagerFactory();\n-            } else if (HierarchicalLedgerManagerFactory.NAME.equals(layout.getManagerType())) {\n+            } else if (HierarchicalLedgerManagerFactory.NAME.equals(layout.getManagerFactoryClass())) {\n                 lmFactory = new HierarchicalLedgerManagerFactory();\n             } else {\n                 throw new IOException(\"Unknown ledger manager type: \" + lmType);\n@@ -189,6 +190,7 @@ private static LedgerManagerFactory createNewLMFactory(\n         // use default ledger manager factory if no one provided\n         if (factoryClass == null) {\n             // for backward compatibility, check manager type\n+            @SuppressWarnings(\"deprecation\")\n             String lmType = conf.getLedgerManagerType();\n             if (lmType == null) {\n                 factoryClass = FlatLedgerManagerFactory.class;"},{"sha":"d006895e9e4eb7b7afb4fded35e7325d47e18783","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -20,6 +20,8 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.replication.ReplicationException;\n \n+import java.util.Iterator;\n+\n /**\n  * Interface for marking ledgers which need to be rereplicated\n  */\n@@ -38,6 +40,14 @@ void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n     void markLedgerReplicated(long ledgerId)\n             throws ReplicationException.UnavailableException;\n \n+    /**\n+     * Get a list of all the ledgers which have been\n+     * marked for rereplication.\n+     *\n+     * @return an iterator which returns ledger ids\n+     */\n+    Iterator<Long> listLedgersToRereplicate();\n+\n     /**\n      * Acquire a underreplicated ledger for rereplication. The ledger\n      * should be locked, so that no other agent will receive the ledger"},{"sha":"2510b89d749f3123f0ea225b3396d1e84e28f292","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":141,"deletions":9,"changes":150,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -21,18 +21,24 @@\n import static org.apache.bookkeeper.metastore.MetastoreTable.NON_FIELDS;\n \n import java.io.IOException;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.bookkeeper.meta.AbstractZkLedgerManager.ReadLedgerMetadataTask;\n import org.apache.bookkeeper.metastore.MSException;\n+import org.apache.bookkeeper.metastore.MSWatchedEvent;\n import org.apache.bookkeeper.metastore.MetaStore;\n import org.apache.bookkeeper.metastore.MetastoreCallback;\n import org.apache.bookkeeper.metastore.MetastoreCursor;\n@@ -41,8 +47,11 @@\n import org.apache.bookkeeper.metastore.MetastoreFactory;\n import org.apache.bookkeeper.metastore.MetastoreScannableTable;\n import org.apache.bookkeeper.metastore.MetastoreTableItem;\n+import org.apache.bookkeeper.metastore.MetastoreWatcher;\n+import org.apache.bookkeeper.metastore.MSWatchedEvent.EventType;\n import org.apache.bookkeeper.metastore.Value;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.util.StringUtils;\n@@ -58,12 +67,16 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n /**\n  * MetaStore Based Ledger Manager Factory\n  */\n public class MSLedgerManagerFactory extends LedgerManagerFactory {\n \n-    static Logger LOG = LoggerFactory.getLogger(MSLedgerManagerFactory.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(MSLedgerManagerFactory.class);\n+\n+    static int MS_CONNECT_BACKOFF_MS = 200;\n \n     public static final int CUR_VERSION = 1;\n \n@@ -167,7 +180,7 @@ public synchronized T getResult() {\n         }\n     }\n \n-    static class MsLedgerManager implements LedgerManager {\n+    static class MsLedgerManager implements LedgerManager, MetastoreWatcher {\n         final ZooKeeper zk;\n         final AbstractConfiguration conf;\n \n@@ -178,13 +191,66 @@ public synchronized T getResult() {\n         static final String IDGEN_ZNODE = \"ms-idgen\";\n         static final String IDGENERATION_PREFIX = \"/\" + IDGEN_ZNODE + \"/ID-\";\n \n+        // ledger metadata listeners\n+        protected final ConcurrentMap<Long, Set<LedgerMetadataListener>> listeners =\n+                new ConcurrentHashMap<Long, Set<LedgerMetadataListener>>();\n+\n         // Path to generate global id\n         private final String idGenPath;\n \n         // we use this to prevent long stack chains from building up in\n         // callbacks\n         ScheduledExecutorService scheduler;\n \n+        protected class ReadLedgerMetadataTask implements Runnable, GenericCallback<LedgerMetadata> {\n+\n+            final long ledgerId;\n+\n+            ReadLedgerMetadataTask(long ledgerId) {\n+                this.ledgerId = ledgerId;\n+            }\n+\n+            @Override\n+            public void run() {\n+                if (null != listeners.get(ledgerId)) {\n+                    LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                    readLedgerMetadata(ledgerId, ReadLedgerMetadataTask.this);\n+                } else {\n+                    LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+                }\n+            }\n+\n+            @Override\n+            public void operationComplete(int rc, final LedgerMetadata result) {\n+                if (BKException.Code.OK == rc) {\n+                    final Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                        scheduler.submit(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                synchronized(listenerSet) {\n+                                    for (LedgerMetadataListener listener : listenerSet) {\n+                                        listener.onChanged(ledgerId, result);\n+                                    }\n+                                }\n+                            }\n+                        });\n+                    }\n+                } else if (BKException.Code.NoSuchLedgerExistsException == rc) {\n+                    // the ledger is removed, do nothing\n+                    Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n+                                ledgerId, listenerSet.size());\n+                    }\n+                } else {\n+                    LOG.warn(\"Failed on read ledger metadata of ledger {} : {}\", ledgerId, rc);\n+                    scheduler.schedule(this, MS_CONNECT_BACKOFF_MS, TimeUnit.MILLISECONDS);\n+                }\n+            }\n+        }\n+\n         MsLedgerManager(final AbstractConfiguration conf, final ZooKeeper zk, final MetaStore metastore) {\n             this.conf = conf;\n             this.zk = zk;\n@@ -201,7 +267,72 @@ public synchronized T getResult() {\n             maxEntriesPerScan = conf.getMetastoreMaxEntriesPerScan();\n \n             this.idGenPath = conf.getZkLedgersRootPath() + IDGENERATION_PREFIX;\n-            this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+            ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"MSLedgerManagerScheduler-%d\");\n+            this.scheduler = Executors.newSingleThreadScheduledExecutor(tfb\n+                    .build());\n+        }\n+\n+        @Override\n+        public void process(MSWatchedEvent e){\n+            long ledgerId = key2LedgerId(e.getKey());\n+            switch(e.getType()) {\n+            case CHANGED:\n+                new ReadLedgerMetadataTask(key2LedgerId(e.getKey())).run();\n+\n+                break;\n+            case REMOVED:\n+                Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (listenerSet != null) {\n+                    synchronized (listenerSet) {\n+                        for(LedgerMetadataListener l : listenerSet){\n+                            unregisterLedgerMetadataListener(ledgerId, l);\n+                            l.onChanged( ledgerId, null );\n+                        }\n+                    }\n+                }\n+\n+                break;\n+            default:\n+                LOG.warn(\"Unknown type: {}\", e.getType());\n+                break;\n+            }\n+        }\n+\n+        @Override\n+        public void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+            if (null != listener) {\n+                LOG.info(\"Registered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (listenerSet == null) {\n+                    Set<LedgerMetadataListener> newListenerSet = new HashSet<LedgerMetadataListener>();\n+                    Set<LedgerMetadataListener> oldListenerSet = listeners.putIfAbsent(ledgerId, newListenerSet);\n+                    if (null != oldListenerSet) {\n+                        listenerSet = oldListenerSet;\n+                    } else {\n+                        listenerSet = newListenerSet;\n+                    }\n+                }\n+                synchronized (listenerSet) {\n+                    listenerSet.add(listener);\n+                }\n+                new ReadLedgerMetadataTask(ledgerId).run();\n+            }\n+        }\n+\n+        @Override\n+        public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+            if (listenerSet != null) {\n+                synchronized (listenerSet) {\n+                    if (listenerSet.remove(listener)) {\n+                        LOG.info(\"Unregistered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                    }\n+                    if (listenerSet.isEmpty()) {\n+                        listeners.remove(ledgerId, listenerSet);\n+                    }\n+                }\n+            }\n         }\n \n         @Override\n@@ -216,7 +347,7 @@ public void close() {\n \n         @Override\n         public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n-            ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+            ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                     CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n                         @Override\n                         public void processResult(int rc, String path, Object ctx, final String idPathName) {\n@@ -338,7 +469,7 @@ public void complete(int rc, Versioned<Value> value, Object ctx) {\n                     readCb.operationComplete(BKException.Code.OK, metadata);\n                 }\n             };\n-            ledgerTable.get(key, msCallback, ALL_FIELDS);\n+            ledgerTable.get(key, this, msCallback, ALL_FIELDS);\n         }\n \n         @Override\n@@ -463,6 +594,7 @@ public void processResult(int rc, String path, Object ctx) {\n         class MSLedgerRangeIterator implements LedgerRangeIterator {\n             final CountDownLatch openCursorLatch = new CountDownLatch(1);\n             MetastoreCursor cursor = null;\n+            // last ledger id in previous range\n \n             MSLedgerRangeIterator() {\n                 MetastoreCallback<MetastoreCursor> openCursorCb = new MetastoreCallback<MetastoreCursor>() {\n@@ -480,24 +612,24 @@ public void complete(int rc, MetastoreCursor newCursor, Object ctx) {\n             }\n \n             @Override\n-            public boolean hasNext() {\n+            public boolean hasNext() throws IOException {\n                 try {\n                     openCursorLatch.await();\n                 } catch (InterruptedException ie) {\n                     LOG.error(\"Interrupted waiting for cursor to open\", ie);\n                     Thread.currentThread().interrupt();\n-                    return false;\n+                    throw new IOException(\"Interrupted waiting to read range\", ie);\n                 }\n                 if (cursor == null) {\n-                    return false;\n+                    throw new IOException(\"Failed to open ledger range cursor, check logs\");\n                 }\n                 return cursor.hasMoreEntries();\n             }\n \n             @Override\n             public LedgerRange next() throws IOException {\n                 try {\n-                    Set<Long> ledgerIds = new TreeSet<Long>();\n+                    SortedSet<Long> ledgerIds = new TreeSet<Long>();\n                     Iterator<MetastoreTableItem> iter = cursor.readEntries(maxEntriesPerScan);\n                     while (iter.hasNext()) {\n                         ledgerIds.add(key2LedgerId(iter.next().getKey()));"},{"sha":"a4600bc5f087df057e755c621715251e1637f3e5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":73,"deletions":8,"changes":81,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -18,11 +18,13 @@\n \n package org.apache.bookkeeper.meta;\n \n+import org.apache.bookkeeper.net.DNS;\n import org.apache.bookkeeper.replication.ReplicationEnableCb;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n+\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.DataFormats.LedgerRereplicationLayoutFormat;\n import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n@@ -36,11 +38,11 @@\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.protobuf.TextFormat;\n import com.google.common.base.Joiner;\n import static com.google.common.base.Charsets.UTF_8;\n \n-import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n import java.util.concurrent.CountDownLatch;\n@@ -49,7 +51,12 @@\n import java.util.List;\n import java.util.Collections;\n import java.util.Arrays;\n-\n+import java.util.Deque;\n+import java.util.ArrayDeque;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.ArrayList;\n \n import java.util.regex.Pattern;\n import java.util.regex.Matcher;\n@@ -114,7 +121,7 @@ public ZkLedgerUnderreplicationManager(AbstractConfiguration conf, ZooKeeper zkc\n \n         LockDataFormat.Builder lockDataBuilder = LockDataFormat.newBuilder();\n         try {\n-            lockDataBuilder.setBookieId(InetAddress.getLocalHost().getHostAddress().toString());\n+            lockDataBuilder.setBookieId(DNS.getDefaultHost(\"default\"));\n         } catch (UnknownHostException uhe) {\n             // if we cant get the address, ignore. it's optional\n             // in the data structure in any case\n@@ -196,7 +203,7 @@ public static String getParentZnodePath(String base, long ledgerId) {\n         String subdir2 = String.format(\"%04x\", ledgerId >> 32 & 0xffff);\n         String subdir3 = String.format(\"%04x\", ledgerId >> 16 & 0xffff);\n         String subdir4 = String.format(\"%04x\", ledgerId & 0xffff);\n-        \n+\n         return String.format(\"%s/%s/%s/%s/%s\",\n                              base, subdir1, subdir2, subdir3, subdir4);\n     }\n@@ -209,6 +216,15 @@ private String getUrLedgerZnode(long ledgerId) {\n         return getUrLedgerZnode(urLedgerPath, ledgerId);\n     }\n \n+    @VisibleForTesting\n+    public UnderreplicatedLedgerFormat getLedgerUnreplicationInfo(long ledgerId)\n+            throws KeeperException, TextFormat.ParseException, InterruptedException {\n+        String znode = getUrLedgerZnode(ledgerId);\n+        UnderreplicatedLedgerFormat.Builder builder = UnderreplicatedLedgerFormat.newBuilder();\n+        byte[] data = zkc.getData(znode, false, null);\n+        TextFormat.merge(new String(data, UTF_8), builder);\n+        return builder.build();\n+    }\n \n     @Override\n     public void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n@@ -302,6 +318,56 @@ public void markLedgerReplicated(long ledgerId) throws ReplicationException.Unav\n         }\n     }\n \n+    @Override\n+    public Iterator<Long> listLedgersToRereplicate() {\n+        final Queue<String> queue = new LinkedList<String>();\n+        queue.add(urLedgerPath);\n+\n+        return new Iterator<Long>() {\n+            final Queue<Long> curBatch = new LinkedList<Long>();\n+\n+            @Override\n+            public void remove() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+                if (curBatch.size() > 0) {\n+                    return true;\n+                }\n+\n+                while (queue.size() > 0 && curBatch.size() == 0) {\n+                    String parent = queue.remove();\n+                    try {\n+                        for (String c : zkc.getChildren(parent,false)) {\n+                            String child = parent + \"/\" + c;\n+                            if (c.startsWith(\"urL\")) {\n+                                curBatch.add(getLedgerId(child));\n+                            } else {\n+                                queue.add(child);\n+                            }\n+                        }\n+                    } catch (InterruptedException ie) {\n+                        Thread.currentThread().interrupt();\n+                        return false;\n+                    } catch (KeeperException.NoNodeException nne) {\n+                        // ignore\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(\"Error reading list\", e);\n+                    }\n+                }\n+                return curBatch.size() > 0;\n+            }\n+\n+            @Override\n+            public Long next() {\n+                assert curBatch.size() > 0;\n+                return curBatch.remove();\n+            }\n+        };\n+    }\n+\n     private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watcher w)\n             throws KeeperException, InterruptedException {\n         if (depth == 4) {\n@@ -428,7 +494,7 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n             cb.await();\n         }\n     }\n-    \n+\n     @Override\n     public void releaseUnderreplicatedLedger(long ledgerId) throws ReplicationException.UnavailableException {\n         LOG.debug(\"releaseLedger(ledgerId={})\", ledgerId);\n@@ -471,9 +537,8 @@ public void disableLedgerReplication()\n             throws ReplicationException.UnavailableException {\n         LOG.debug(\"disableLedegerReplication()\");\n         try {\n-            ZkUtils.createFullPathOptimistic(zkc, basePath + '/'\n-                    + BookKeeperConstants.DISABLE_NODE, \"\".getBytes(),\n-                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            String znode = basePath + '/' + BookKeeperConstants.DISABLE_NODE;\n+            zkc.create(znode, \"\".getBytes(UTF_8), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             LOG.info(\"Auto ledger re-replication is disabled!\");\n         } catch (KeeperException.NodeExistsException ke) {\n             LOG.warn(\"AutoRecovery is already disabled!\", ke);"},{"sha":"a7cc953a33c59dc946af2786c1399d9787463103","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -24,22 +24,25 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.NavigableMap;\n import java.util.Set;\n+import java.util.SortedMap;\n import java.util.concurrent.ScheduledExecutorService;\n \n import org.apache.bookkeeper.metastore.MSException.Code;\n import org.apache.bookkeeper.versioning.Versioned;\n \n+import com.google.common.collect.ImmutableSortedMap;\n+\n class InMemoryMetastoreCursor implements MetastoreCursor {\n \n     private final ScheduledExecutorService scheduler;\n     private final Iterator<Map.Entry<String, Versioned<Value>>> iter;\n     private final Set<String> fields;\n \n-    public InMemoryMetastoreCursor(NavigableMap<String, Versioned<Value>> map, Set<String> fields,\n+    public InMemoryMetastoreCursor(SortedMap<String, Versioned<Value>> map, Set<String> fields,\n             ScheduledExecutorService scheduler) {\n-        this.iter = map.entrySet().iterator();\n+        // copy an map for iterator to avoid concurrent modification problem.\n+        this.iter = ImmutableSortedMap.copyOfSorted(map).entrySet().iterator();\n         this.fields = fields;\n         this.scheduler = scheduler;\n     }"},{"sha":"03f1c600566dd6f42ab8fc661454bf1588e0a544","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","status":"modified","additions":45,"deletions":2,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -27,6 +27,8 @@\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n public class InMemoryMetastoreTable implements MetastoreScannableTable {\n \n     public static class MetadataVersion implements Version {\n@@ -91,12 +93,18 @@ public int hashCode() {\n \n     private String name;\n     private TreeMap<String, Versioned<Value>> map = null;\n+    private TreeMap<String, MetastoreWatcher> watcherMap = null;\n     private ScheduledExecutorService scheduler;\n \n     public InMemoryMetastoreTable(InMemoryMetaStore metastore, String name) {\n         this.map = new TreeMap<String, Versioned<Value>>();\n+        this.watcherMap = new TreeMap<String,MetastoreWatcher>();\n         this.name = name;\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        String thName = \"InMemoryMetastore-Table(\" + name + \")-Scheduler-%d\";\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n+                .setNameFormat(thName);\n+        this.scheduler = Executors\n+                .newSingleThreadScheduledExecutor(tfb.build());\n     }\n \n     @Override\n@@ -138,6 +146,19 @@ public void run() {\n             }\n         });\n     }\n+    \n+    @Override\n+    public void get(final String key, final MetastoreWatcher watcher, final MetastoreCallback<Versioned<Value>> cb, final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                scheduleGet(key, ALL_FIELDS, cb, ctx);\n+                synchronized(watcherMap) {\n+                    watcherMap.put( key, watcher );\n+                }\n+            }\n+        });\n+    }\n \n     @Override\n     public void get(final String key, final Set<String> fields, final MetastoreCallback<Versioned<Value>> cb,\n@@ -176,10 +197,18 @@ public void run() {\n                 }\n                 Result<Version> result = put(key, value, version);\n                 cb.complete(result.code.getCode(), result.value, ctx);\n+                \n+                /*\n+                 * If there is a watcher set for this key, we need\n+                 * to trigger it.\n+                 */\n+                if(result.code == MSException.Code.OK){\n+                    triggerWatch(key, MSWatchedEvent.EventType.CHANGED);\n+                }\n             }\n         });\n     }\n-\n+    \n     @Override\n     public void remove(final String key, final Version version, final MetastoreCallback<Void> cb, final Object ctx) {\n         scheduler.submit(new Runnable() {\n@@ -191,6 +220,10 @@ public void run() {\n                 }\n                 Code code = remove(key, version);\n                 cb.complete(code.getCode(), null, ctx);\n+                \n+                if(code == MSException.Code.OK){\n+                    triggerWatch(key, MSWatchedEvent.EventType.REMOVED);\n+                }\n             }\n         });\n     }\n@@ -232,6 +265,16 @@ public void run() {\n         });\n     }\n \n+    private void triggerWatch(String key, MSWatchedEvent.EventType type) {\n+        synchronized(watcherMap){\n+            if(watcherMap.containsKey( key )) {\n+                MSWatchedEvent event = new MSWatchedEvent(key, type);\n+                watcherMap.get( key ).process( event );\n+                watcherMap.remove( key );\n+            }\n+        }\n+    }\n+    \n     private synchronized Versioned<Value> get(String key) {\n         return map.get(key);\n     }"},{"sha":"182387877f5ed058e018f9127a5d60364010b95a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+public class MSWatchedEvent {\n+    public enum EventType {CHANGED, REMOVED};\n+    \n+    String key;\n+    EventType type;\n+    \n+    public MSWatchedEvent(String key, EventType type) {\n+        this.key = key;\n+        this.type = type;\n+    }\n+    \n+    public EventType getType() {\n+        return type;\n+    }\n+    \n+    public String getKey(){\n+        return key;\n+    }\n+}"},{"sha":"735931e92fc3a7a6884a393b442d5a7d0cfdc2ed","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -55,6 +55,27 @@\n      */\n     public void get(String key, MetastoreCallback<Versioned<Value>> cb, Object ctx);\n \n+    /**\n+     * Get all fields of a key.\n+     *\n+     * <p>\n+     * Return Code:<ul>\n+     * <li>{@link MSException.Code.OK}: success returning the key</li>\n+     * <li>{@link MSException.Code.NoKey}: no key found</li>\n+     * <li>{@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}: other issues</li>\n+     * </ul></p>\n+     *\n+     * @param key\n+     *          Key Name\n+     * @param watcher\n+     *          Watcher object to receive notifications\n+     * @param cb\n+     *          Callback to return all fields of the key\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void get(String key, MetastoreWatcher watcher, MetastoreCallback<Versioned<Value>> cb, Object ctx);\n+    \n     /**\n      * Get specified fields of a key.\n      *"},{"sha":"4c6ebc9bcee6e05b1e44978dde051cb2b84f21f8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,22 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+public interface MetastoreWatcher {\n+    public void process(MSWatchedEvent e);\n+}"},{"sha":"9424bf93ea0ebbd8703b86cae9f646b51481288e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -28,6 +28,8 @@\n import java.util.Set;\n import java.util.Collections;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import static org.apache.bookkeeper.metastore.MetastoreTable.ALL_FIELDS;\n \n public class Value {\n@@ -144,7 +146,7 @@ public String toString() {\n             if (null == entry.getValue()) {\n                 value = \"NONE\";\n             } else {\n-                value = new String(entry.getValue());\n+                value = new String(entry.getValue(), UTF_8);\n             }\n             sb.append(\"('\").append(f).append(\"'=\").append(value).append(\")\");\n         }"},{"sha":"cba1f7ebdad4d7ce36c5e12d7c30da49ccfa089a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/AbstractDNSToSwitchMapping.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/AbstractDNSToSwitchMapping.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/AbstractDNSToSwitchMapping.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/AbstractDNSToSwitchMapping.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3","patch":"@@ -0,0 +1,142 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+// This code has been copied from hadoop-common 0.23.1\n+package org.apache.bookkeeper.net;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.bookkeeper.conf.Configurable;\n+import org.apache.commons.configuration.Configuration;\n+\n+/**\n+ * This is a base class for DNS to Switch mappings. <p/> It is not mandatory to\n+ * derive {@link DNSToSwitchMapping} implementations from it, but it is strongly\n+ * recommended, as it makes it easy for the Hadoop developers to add new methods\n+ * to this base class that are automatically picked up by all implementations.\n+ * <p/>\n+ *\n+ * This class does not extend the <code>Configured</code>\n+ * base class, and should not be changed to do so, as it causes problems\n+ * for subclasses. The constructor of the <code>Configured</code> calls\n+ * the  {@link #setConf(Configuration)} method, which will call into the\n+ * subclasses before they have been fully constructed.\n+ *\n+ */\n+public abstract class AbstractDNSToSwitchMapping implements DNSToSwitchMapping, Configurable {\n+\n+    private Configuration conf;\n+\n+    /**\n+     * Create an unconfigured instance\n+     */\n+    protected AbstractDNSToSwitchMapping() {\n+    }\n+\n+    /**\n+     * Create an instance, caching the configuration file.\n+     * This constructor does not call {@link #setConf(Configuration)}; if\n+     * a subclass extracts information in that method, it must call it explicitly.\n+     * @param conf the configuration\n+     */\n+    protected AbstractDNSToSwitchMapping(Configuration conf) {\n+        this.conf = conf;\n+    }\n+\n+    public Configuration getConf() {\n+        return conf;\n+    }\n+\n+    public void setConf(Configuration conf) {\n+        this.conf = conf;\n+    }\n+\n+    /**\n+     * Predicate that indicates that the switch mapping is known to be\n+     * single-switch. The base class returns false: it assumes all mappings are\n+     * multi-rack. Subclasses may override this with methods that are more aware\n+     * of their topologies.\n+     *\n+     * <p/>\n+     *\n+     * This method is used when parts of Hadoop need know whether to apply\n+     * single rack vs multi-rack policies, such as during block placement.\n+     * Such algorithms behave differently if they are on multi-switch systems.\n+     * </p>\n+     *\n+     * @return true if the mapping thinks that it is on a single switch\n+     */\n+    public boolean isSingleSwitch() {\n+        return false;\n+    }\n+\n+    /**\n+     * Get a copy of the map (for diagnostics)\n+     * @return a clone of the map or null for none known\n+     */\n+    public Map<String, String> getSwitchMap() {\n+        return null;\n+    }\n+\n+    /**\n+     * Generate a string listing the switch mapping implementation,\n+     * the mapping for every known node and the number of nodes and\n+     * unique switches known about -each entry to a separate line.\n+     * @return a string that can be presented to the ops team or used in\n+     * debug messages.\n+     */\n+    public String dumpTopology() {\n+        Map<String, String> rack = getSwitchMap();\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(\"Mapping: \").append(toString()).append(\"\\n\");\n+        if (rack != null) {\n+            builder.append(\"Map:\\n\");\n+            Set<String> switches = new HashSet<String>();\n+            for (Map.Entry<String, String> entry : rack.entrySet()) {\n+                builder.append(\"  \").append(entry.getKey()).append(\" -> \").append(entry.getValue()).append(\"\\n\");\n+                switches.add(entry.getValue());\n+            }\n+            builder.append(\"Nodes: \").append(rack.size()).append(\"\\n\");\n+            builder.append(\"Switches: \").append(switches.size()).append(\"\\n\");\n+        } else {\n+            builder.append(\"No topology information\");\n+        }\n+        return builder.toString();\n+    }\n+\n+    protected boolean isSingleSwitchByScriptPolicy() {\n+        return conf != null && conf.getString(CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY) == null;\n+    }\n+\n+    /**\n+     * Query for a {@link DNSToSwitchMapping} instance being on a single\n+     * switch.\n+     * <p/>\n+     * This predicate simply assumes that all mappings not derived from\n+     * this class are multi-switch.\n+     * @param mapping the mapping to query\n+     * @return true if the base class says it is single switch, or the mapping\n+     * is not derived from this class.\n+     */\n+    public static boolean isMappingSingleSwitch(DNSToSwitchMapping mapping) {\n+        return mapping != null && mapping instanceof AbstractDNSToSwitchMapping\n+                && ((AbstractDNSToSwitchMapping) mapping).isSingleSwitch();\n+    }\n+\n+}"},{"sha":"78773330188f2e511ef282bc04d96ddbe2ffe5e0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/BookieSocketAddress.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/BookieSocketAddress.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/BookieSocketAddress.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/BookieSocketAddress.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"96acbc2409fa39ee5c0a7da7f1ef734b27470c42","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"12a3f1ad987d79855bf20c59d7ef91d23569db9a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CommonConfigurationKeys.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CommonConfigurationKeys.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CommonConfigurationKeys.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CommonConfigurationKeys.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a5dce939076ce7468b053c0b82baff50743a8ae0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"35f9a36da4cfd9e4f49ca283300ee8a1ccad7215","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"bcc880c66ea91f9339a31c0d3422824f248ef456","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"26abc96159f85bbf0fddaaaee0a984a161ddbdce","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f11e0a76a2df38b00244458efddf990838f68d96","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/Node.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/Node.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/Node.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/Node.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f1a4b85cec3edc6563de27b1063abc901a521f41","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NodeBase.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NodeBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NodeBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NodeBase.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1671cc888b7ffa77e683851fd9949f072b9a71e2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"d785d29eef71b4c5388a8cf8abdf4dfaca04a095","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/processor/RequestProcessor.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"d69d4a812bc16e4d51256ae7bbbf0712d257cc76","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"b623998aea07f564d4fc3bf141e8b890d8d70634","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"6ece56ea329504af677d86f650abccc02c2a94bc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtoEncoding.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtoEncoding.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtoEncoding.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtoEncoding.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"4dd26d6e6776a2c505da7d8bf0fff6056ff7b863","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"3c5f128497eabf3eecda74e3c50d73ebabab0dc2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"9fec15fa6bc0e3a0c5cb62c7b160be9a90b7094b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"bf5f438ac28647d885e0630fe3505ba93278533b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"afb763e93e116e6b03cc35dc44524685e649757a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"054309fc5ed33861bbb2a7f220d65ae258ea622c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"e6e7802ddd3cc1c5f5c55047d606326621219db5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"57d350328e11dffd224382828ab26abcaafaa8b6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"920515ba098f078bb067034db267d98101b5301c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DefaultPerChannelBookieClientPool.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DefaultPerChannelBookieClientPool.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DefaultPerChannelBookieClientPool.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DefaultPerChannelBookieClientPool.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"8f205fe3c076ecd269b8e5b0077946044d020972","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/17de3dbe64450bfab7505d7cf51e082eb5672bc8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/17de3dbe64450bfab7505d7cf51e082eb5672bc8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=17de3dbe64450bfab7505d7cf51e082eb5672bc8"},{"sha":"b247616839d306e645899fdb7f6724911547ae24","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBase.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBase.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ebff52608470235d93f5ca984653b38f81665631","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBaseV3.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBaseV3.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBaseV3.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBaseV3.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"deef9f48f66819280cf496feabaeb08b1564faa7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"bd45e9209d6372d68794c59a637f36bc6c56892d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientFactory.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientFactory.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"81b3ba7b10edb226187ed464e7812fb210f168c7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientPool.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientPool.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientPool.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClientPool.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"385cf022b7b362efdac561fc8bbd8a8e8fc1ec6b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"03517789625a5c17e474dec00579a6d69b6f6d82","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"651c11834a289b19575058713006474dd8247f0f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ResponseBuilder.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ResponseBuilder.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ResponseBuilder.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ResponseBuilder.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"4920bb9dcddda46db9abf625219c7661740ae890","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"719c937dea9baefc44edd87b85026ef37439b25f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ebb9ebe98be14ada2f6083408b82c29b76b21155","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"4e6e3fb3f9adcdce76a6150ba06ff9247c37453f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"c4fb77dffa4127f7208450d1ca25fd693e18fc56","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"dd08f71b6274e9ec22f9d8770a7779f6fceca095","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1b4efafc1f40c5769fb4c9515aecc666e0d7d755","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"32a03e224e78c44f4d69e3c18e4f1b96b2c21374","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"9e280a79bdde133e0433a1d7f7514a1a0bea656a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"02154e580512d2e3e3577ba3722a6925d4b98bdb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"7e01bdca2512b14c485b2aa9135b64a564564fd1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"05d390b61eb159e873f96097fc10bb7debf8d4d6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"54e07c3df1e445f03fa72108c3d72267c554ac07","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ad805cfdee98ca055e0c6f4dea19e28a59188b00","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DaemonThreadFactory.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DaemonThreadFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DaemonThreadFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DaemonThreadFactory.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"75902c9e8c93f874b589357e94d7d98e7c9e7310","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1549a9f045e5af057ace60b2f49ff5e615287f07","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"e770bb09c914906ee3e4d7ac1e81250548b96054","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"5e8559461e33f733701e8482b5403e8d3c0c7a57","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"4897883036c0c7fb8e96501d72fae6f48ead06ee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"32571fa59f8d7c7715d6b2bc8459c8a45b33a99c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"24488425b97048ef98335605e73d481cc9dda3e2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"597c88662b8e799ab4f2379f84d1a4dd62840a5d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"5dbfc381359acb9deda890db1b312e4f02dedf22","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Shell.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Shell.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Shell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Shell.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"bea03721dae126f4bb9c15bee502a30c221c97d7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1109da2b71baf69ae14e9eb69907686055a54d66","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZeroBuffer.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZeroBuffer.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZeroBuffer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZeroBuffer.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"9608240c70c01ac7ab1805f7aa1ee999cbc76a4c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"7fe237a900a0c53b9387f23c214180e868301b36","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/BoundExponentialBackoffRetryPolicy.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/BoundExponentialBackoffRetryPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/BoundExponentialBackoffRetryPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/BoundExponentialBackoffRetryPolicy.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"dab7aa719325743ea8bfe54543cb5511c085943c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ExponentialBackoffRetryPolicy.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ExponentialBackoffRetryPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ExponentialBackoffRetryPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ExponentialBackoffRetryPolicy.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a4269fbe7193aaa2ba3c957f3eaf89b6b6a99245","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/RetryPolicy.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/RetryPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/RetryPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/RetryPolicy.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a479a369039f210afe1c1aa36c43b0ca6defd6e4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperClient.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperClient.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"707b8420cdd11fc1cf8a2b025d8bca090520d53b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"871612ef5cade9c7088d300e93235a610973ffc5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooWorker.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooWorker.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"56ba5817577e260fe94d188d0f537d0543b5c926","filename":"bookkeeper-server/src/main/proto/BookkeeperProtocol.proto","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/proto/BookkeeperProtocol.proto","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/proto/BookkeeperProtocol.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/proto/BookkeeperProtocol.proto?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"c70651426b08f2825ce432662275d1774c3de297","filename":"bookkeeper-server/src/main/resources/NOTICE.bin.txt","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/resources/NOTICE.bin.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/resources/NOTICE.bin.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/resources/NOTICE.bin.txt?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"bff9431175c62fbee3c41423a264642e153a68da","filename":"bookkeeper-server/src/main/resources/findbugsExclude.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/resources/findbugsExclude.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/main/resources/findbugsExclude.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/resources/findbugsExclude.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"2e0f18f1bca06d32fc5c6b9eb02fa5e506c41154","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f19583f51fa9e82b56727d5d2c49c6873d6ea8c4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"0d6e592b629b96764255df74e3e4097d741e01fd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"17460435ab1a9a25b0cc162d4ffd49f96130c09c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"dfcbcf42eb3a818ee7b35bab23c30225c816cc3a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieThreadTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieThreadTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieThreadTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieThreadTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ef4cea8d93f0443ee49f7e9df82ff79711ae1497","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"27577d2924c33886a875eb952c8031bbb072225e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"51b25bc297d90cb20cd95f07c0ad7afe1c4c957b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"8f59b54495485c0152b1d3c3cb9fe6ad784d226c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"151feaeb2dc9b5462afd29b1fd536b33e9aecf47","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"b62c69508379f99df5506904bb2598c91de87b00","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"fb48f3f259dff26cb63a0704e1d17f556aa4a96f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"d947dff97514d2177a72a0d9224c277b8bec9ed6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"5eaf224a42e67bd1cba0e14365a95d6b10609522","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"64d994cf992e40665fe8d365c7dbdb8b72aa80db","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"89790f66feca1e4098b7be717c8b37fc210fe274","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"364e48eb6e5e1eba3d2d2aa6f80ac24a93feeb47","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f18e159d6be69128475c9c6d95c5ff16200ccd12","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"7b77c485555047c5aa466326e1ebdd8c0bccc173","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"dc43b2c37cdb756d39b9a9c32c9dff731912053d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"eef56b07f0f735e0a094e80523aae2778ba29130","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f54cde1048db8865bbda7db978618744c7313066","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"d34c0648f9e0ee9251994de9e07f712f4260c6b2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ce9aab91b4b25f95578ac4b58d1b054e8bcce3fb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"521d1e3cb33abcffd4fe7c4090bfffd34aa26ff4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ba51175e2fde93203ebd3b60761a83484ec157a1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"eb61c2120790af7058997dfcd9942240b6a1d039","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"e4f744f1baf113cf537f5cfbdc7467af9e448c2e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"b5f5e322af75b7139aa6686da2cb9bdb4a42d412","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"96c5fa872a9feb459cf7d34b7fdf160d68ba96cc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"2a6c71d3a57a1f0ec69142e60278b8a70c705939","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ac0afb6e075b803ef21ee97f65302a8c27ae8ade","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"eb833a3e0d554ff223024e5ada540d4911d91a16","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"9522ae12e2230a95135f0ae123029f0a16031c0f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"19aab44e772d5ecaa83acf9ebc83d6f54ac56f13","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"18a818aeaab3c1709a0dce06c7bece06bc171f96","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1a581866ab26361a9d1f0baf8ae3fbf6c0936ce0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"b95d2db4574c5c1a7f6c60907b7e6f12c511e84f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"8fd40c9e57e25de43ca35f92b6546bff5e837a05","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"8b52bf5c18135ddb516e0837c39835f5e09b8fc5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"9b90887f63e44e884341635dcdfb7ff29ea0e053","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"675c2fd564bce54f97c39d6cb03746205a09d4ac","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"d8afee89fe3e13ac736f5dc8a0121e807166c375","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/17de3dbe64450bfab7505d7cf51e082eb5672bc8/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","raw_url":"https://github.com/apache/bookkeeper/raw/17de3dbe64450bfab7505d7cf51e082eb5672bc8/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java?ref=17de3dbe64450bfab7505d7cf51e082eb5672bc8"},{"sha":"6fbfdb0a4c535b23f7aebc576bbd0276b970eab2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"b1a53e598df7ed0cad3dfa2785bb52f708bad35e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"91aae77fe2e00487c929b69cfd1be416f6e0c67d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"fd605a74370fc8fc9c541d9f1a8154453d1e6310","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1d4bb00b7ea348c4fa85038c2711a5d99f3af087","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"5a50568d2af234d4acbd877ac9419242cf02cb44","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"72fd11c55c97de80b49ad7e6a843f1711fbb92a5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"2872397118ad0d9941d625bbc98ff0c9e0816131","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f8dc1c801af4f462653eae052c2d6badbb6d5af3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"e1ccf6895eba5f8c4ecffe3ab637cbd20bf902d2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ff1bb0f0574c6b18e8d3d5b3c748606b397c6729","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"d47e4b1ed4cf6c050062b11a4c5cc2fb97a2ba08","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"28eff34681b77e92de95ffc29959def33e4b6ca8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"9662777b5201aca9d4ecb80ba7c3ec52470bad57","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"c860bef4bd0752d3945ddcb419cd8b219b88f2bf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"2ece28dd2d2eec2f2fd8aa11221915b9c1eddc1f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a72bf578cddb3bd34526a9b1c107eabf541dff49","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"4d29ff48d152d0335e764e018a32ac36c8dd142e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"93256a7c3dec8714b8c42dd3e41f2d23b60624db","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"98c5f10596f0cf568345673815cfeeb41ddcfe19","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"caf1c3d0c456821c583a36926d2be065da84de42","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a06accd77058a221616015f9fb4ed0bf0cbb032d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ac4e0e0af08c34291bb394fd5e6573ae9db7a20a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"e3107c31b778c51c9e1d6a44368df8ed1996d203","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"d45a2f31003e3fd5f24810a73ca5415cb42e843c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"778a804822c7752764899b554c5bd8a8865ab4c8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"16ef0c52e55bad00f3a046a390ffa9b62c5b9f20","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"b68d0554eed0f0d273438b54cffde1106a79aa67","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/17de3dbe64450bfab7505d7cf51e082eb5672bc8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/17de3dbe64450bfab7505d7cf51e082eb5672bc8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java?ref=17de3dbe64450bfab7505d7cf51e082eb5672bc8"},{"sha":"8ccd07d851b0af5293ffb6a68827da586927aa81","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"89939b414736f201ed1f6659a6ccb982f0d00d7a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"61217f0d973869d027a6d9de6cf3df0b6b175641","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"fd61d2d0f18411920f52bbb1ad2671e66d0213de","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a6ffce0288ae2df2178e7d0c67e7ecdf26d3c8d0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"c0bdfa60d4b7f4cdc641f64944e61f3df6addfd4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f48fe37f70a4100f0183966b00359460f8ec8fe6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"0c6f07cd96ce52740fdbfe151900e32ddd146c9f","filename":"bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a434b3c64200a622b1a01b53edf49c49dd7cb49d","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"dbb79b62ba43c3dc349cb51a3002ceb407e222d5","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"156290b678ec51bf8151c74e15c27131775d3cd0","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f4287ff2235642e5bad407eb51e43a54e54bcd83","filename":"bookkeeper-stats-providers/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"e2b50f502496678b8920d8aeab7856f6504398d8","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"903562901b9b294f7ef1b3f824e5504f8b881e1e","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ba969bad79096341d8edf48404010d3fb730e7c5","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"62246cff8d612f3c21428621b8f85bcdfdc69acb","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"483ba0f6f835d6dab783d688e03c04faf2bc1725","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"0b0ad0233ace57dea5f633b1c5325d87d1f34ebf","filename":"bookkeeper-stats-providers/twitter-science-provider/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"df5c7ad19c93a44a550fdef5b1a57968a872fcba","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"2ac29da131f51f2733f26395c1b08f98dba554f8","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ac236f6196e0d171d2ee419b715f332c1836c9e6","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"c30c54529855cf108516143b3eeedaafeda65387","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"cc6e3f064e17261041d49fef1a8691be7e704bb9","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"286c01c2f3e490bf28fe0b54bc5243c1a8fe80f0","filename":"bookkeeper-stats/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"393c24cf6bde5966585f1d26ab52d87a7c9569e5","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"326b7e1a37d9437f12404580cbcc97704c04304b","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"21a103d6db77a9021b44ca75d8c603fbd7a37f90","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"c817e74600999120dd64041c0c7b99c8bdca92a7","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1d3cd5faf10853a94ec7c562ce8d2a75d35b8d9f","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"ca0477f980813672704f069ed87bf1bac733ddc1","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"8f8ca45b07ea438a702344a602d27fd757863da7","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f7791e8b26ae7d2a577c7fad66e1ed0dd66491f0","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"b06e0a6ba9e3dc6b0cf99ff760a68b6a91c37361","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"297cda6f7ed0941879c4d8e495a5cbf861566d34","filename":"compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"5259316d600920c8900e4ee843e64dac9e11ec3f","filename":"compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"092e12f8332b3703b1ca6e9a3c5507677af2fd36","filename":"compat-deps/bookkeeper-server-compat-4.2.0/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/bookkeeper-server-compat-4.2.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/bookkeeper-server-compat-4.2.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.2.0/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1d7d38e5e76e30aeba72a5a09fc2c401b5fc7256","filename":"compat-deps/hedwig-server-compat-4.0.0/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/hedwig-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/hedwig-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.0.0/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"8534cd44f9160f3d17e487743fa8be677bc64054","filename":"compat-deps/hedwig-server-compat-4.1.0/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/hedwig-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/hedwig-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.1.0/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"069b2428feba0b3cce00403b19cdeb24f9a2ae6e","filename":"compat-deps/hedwig-server-compat-4.2.0/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/hedwig-server-compat-4.2.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/hedwig-server-compat-4.2.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.2.0/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"0aab5ccd486f7796d57bbb0348822078847e94f9","filename":"compat-deps/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/compat-deps/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a67c1788d035204a4b3c9cc317fbf2fe4b2ebcbe","filename":"doc/bookieConfigParams.textile","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/doc/bookieConfigParams.textile","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/doc/bookieConfigParams.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookieConfigParams.textile?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"4b9d5534c395372efd29c299c09b2c98781ac6a0","filename":"doc/bookkeeperConfig.textile","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/doc/bookkeeperConfig.textile","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/doc/bookkeeperConfig.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperConfig.textile?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"97ee5e3a5abb0901dce6493983ebebe938129445","filename":"hedwig-client-jms/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/pom.xml?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"b118681733b0d7a33883b614d6687aae70802874","filename":"hedwig-client-jms/src/main/grammar/javacc/readme.html","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/grammar/javacc/readme.html","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/grammar/javacc/readme.html","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/grammar/javacc/readme.html?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a141b8b51338f06569618c6b3b6bf27155c56b2c","filename":"hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"1a77fcfeec29a5780c758a7e49a1440070b15cfd","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"12210ac2e59c273709a57fcbc1d140b68e5d7048","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"0e6d27fb462536c50cc5350c022e7f3c911198c1","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"a9e1d50fe1d5c79ba5542698f3a5d66dce14ab09","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"72ce593a02183e73ec1efb25fad41e6242903412","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"63cf0cc8e9be7888ff2dc1658eee2037ad2813d4","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"7689d3b20cf2dc60eea3b11114548d3fb9cff6d6","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"f86d9559b5c8869f39e57a21002929bd10b065d1","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"26db51499e2337ce62f3abd59a3a40dbf0059920","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"},{"sha":"2e0cddd7ca8d93ba7cfffda620213100b56b1230","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java","raw_url":"https://github.com/apache/bookkeeper/raw/9474696ffcaf073f086838d6cce19c1b8245bff3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java?ref=9474696ffcaf073f086838d6cce19c1b8245bff3"}]}

