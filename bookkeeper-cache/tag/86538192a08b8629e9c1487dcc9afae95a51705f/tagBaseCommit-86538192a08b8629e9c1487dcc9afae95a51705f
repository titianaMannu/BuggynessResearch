{"sha":"86538192a08b8629e9c1487dcc9afae95a51705f","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4NjUzODE5MmEwOGI4NjI5ZTljMTQ4N2RjYzlhZmFlOTVhNTE3MDVm","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2015-11-17T19:30:45Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2015-11-17T19:30:45Z"},"message":"BOOKKEEPER-438: Move ledger id generation out of LedgerManager (Sijie via mmerli) [missing files]","tree":{"sha":"b562e2c67537f7db9b47478cd959e0b328c33a84","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b562e2c67537f7db9b47478cd959e0b328c33a84"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/86538192a08b8629e9c1487dcc9afae95a51705f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/86538192a08b8629e9c1487dcc9afae95a51705f","html_url":"https://github.com/apache/bookkeeper/commit/86538192a08b8629e9c1487dcc9afae95a51705f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/86538192a08b8629e9c1487dcc9afae95a51705f/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"ebbb68ccdd6e86d9df96fa73d26304917b4dd33f","url":"https://api.github.com/repos/apache/bookkeeper/commits/ebbb68ccdd6e86d9df96fa73d26304917b4dd33f","html_url":"https://github.com/apache/bookkeeper/commit/ebbb68ccdd6e86d9df96fa73d26304917b4dd33f"}],"stats":{"total":283,"additions":283,"deletions":0},"files":[{"sha":"24d1f01ed836f52df4a0e3f6e08b213f7c6a377e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerIdGenerator.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/86538192a08b8629e9c1487dcc9afae95a51705f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerIdGenerator.java","raw_url":"https://github.com/apache/bookkeeper/raw/86538192a08b8629e9c1487dcc9afae95a51705f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerIdGenerator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerIdGenerator.java?ref=86538192a08b8629e9c1487dcc9afae95a51705f","patch":"@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import java.io.Closeable;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+\n+/**\n+ * The interface for global unique ledger ID generation\n+ */\n+public interface LedgerIdGenerator extends Closeable {\n+\n+    /**\n+     * generate a global unique ledger id\n+     *\n+     * @param cb\n+     *            Callback when a new ledger id is generated, return code:<ul>\n+     *            <li>{@link BKException.Code.OK} if success</li>\n+     *            <li>{@link BKException.Code.ZKException} when can't generate new ledger id</li>\n+     *            </ul>\n+     */\n+    public void generateLedgerId(GenericCallback<Long> cb);\n+\n+}"},{"sha":"a6c5b7bacb453dc989d6dc7dc8a3ca1d69c7053e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/bookkeeper/blob/86538192a08b8629e9c1487dcc9afae95a51705f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","raw_url":"https://github.com/apache/bookkeeper/raw/86538192a08b8629e9c1487dcc9afae95a51705f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java?ref=86538192a08b8629e9c1487dcc9afae95a51705f","patch":"@@ -0,0 +1,120 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import java.io.IOException;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.zookeeper.AsyncCallback;\n+import org.apache.zookeeper.AsyncCallback.StringCallback;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * ZooKeeper based ledger id generator class, which using EPHEMERAL_SEQUENTIAL\n+ * with <i>(ledgerIdGenPath)/ID-</i> prefix to generate ledger id. Note\n+ * zookeeper sequential counter has a format of %10d -- that is 10 digits with 0\n+ * (zero) padding, i.e. \"&lt;path&gt;0000000001\", so ledger id space is\n+ * fundamentally limited to 9 billion.\n+ */\n+public class ZkLedgerIdGenerator implements LedgerIdGenerator {\n+    static final Logger LOG = LoggerFactory.getLogger(ZkLedgerIdGenerator.class);\n+\n+    final ZooKeeper zk;\n+    final String ledgerIdGenPath;\n+    final String ledgerPrefix;\n+\n+    public ZkLedgerIdGenerator(ZooKeeper zk,\n+                               String ledgersPath,\n+                               String idGenZnodeName) {\n+        this.zk = zk;\n+        if (StringUtils.isBlank(idGenZnodeName)) {\n+            this.ledgerIdGenPath = ledgersPath;\n+        } else {\n+            this.ledgerIdGenPath = ledgersPath + \"/\" + idGenZnodeName;\n+        }\n+        this.ledgerPrefix = this.ledgerIdGenPath + \"/ID-\";\n+    }\n+\n+    @Override\n+    public void generateLedgerId(final GenericCallback<Long> cb) {\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPrefix, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                CreateMode.EPHEMERAL_SEQUENTIAL,\n+                new StringCallback() {\n+                    @Override\n+                    public void processResult(int rc, String path, Object ctx, final String idPathName) {\n+                        if (rc != KeeperException.Code.OK.intValue()) {\n+                            LOG.error(\"Could not generate new ledger id\",\n+                                    KeeperException.create(KeeperException.Code.get(rc), path));\n+                            cb.operationComplete(BKException.Code.ZKException, null);\n+                            return;\n+                        }\n+\n+                        /*\n+                         * Extract ledger id from generated path\n+                         */\n+                        long ledgerId;\n+                        try {\n+                            ledgerId = getLedgerIdFromGenPath(idPathName);\n+                            cb.operationComplete(BKException.Code.OK, ledgerId);\n+                        } catch (IOException e) {\n+                            LOG.error(\"Could not extract ledger-id from id gen path:\" + path, e);\n+                            cb.operationComplete(BKException.Code.ZKException, null);\n+                            return;\n+                        }\n+\n+                        // delete the znode for id generation\n+                        zk.delete(idPathName, -1, new AsyncCallback.VoidCallback() {\n+                            @Override\n+                            public void processResult(int rc, String path, Object ctx) {\n+                                if (rc != KeeperException.Code.OK.intValue()) {\n+                                    LOG.warn(\"Exception during deleting znode for id generation : \",\n+                                            KeeperException.create(KeeperException.Code.get(rc), path));\n+                                } else {\n+                                    LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n+                                }\n+                            }\n+                        }, null);\n+                    }\n+                }, null);\n+    }\n+\n+    // get ledger id from generation path\n+    private long getLedgerIdFromGenPath(String nodeName) throws IOException {\n+        long ledgerId;\n+        try {\n+            String parts[] = nodeName.split(ledgerPrefix);\n+            ledgerId = Long.parseLong(parts[parts.length - 1]);\n+        } catch (NumberFormatException e) {\n+            throw new IOException(e);\n+        }\n+        return ledgerId;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+    }\n+\n+}"},{"sha":"708fbc78180a72bb2caa7f958d33be1418bf79d8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkLedgerIdGenerator.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/bookkeeper/blob/86538192a08b8629e9c1487dcc9afae95a51705f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkLedgerIdGenerator.java","raw_url":"https://github.com/apache/bookkeeper/raw/86538192a08b8629e9c1487dcc9afae95a51705f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkLedgerIdGenerator.java?ref=86538192a08b8629e9c1487dcc9afae95a51705f","patch":"@@ -0,0 +1,122 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestZkLedgerIdGenerator extends TestCase {\n+    private static final Logger LOG = LoggerFactory.getLogger(TestZkLedgerIdGenerator.class);\n+\n+    ZooKeeperUtil zkutil;\n+    ZooKeeper zk;\n+\n+    LedgerIdGenerator ledgerIdGenerator;\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        LOG.info(\"Setting up test\");\n+        super.setUp();\n+\n+        zkutil = new ZooKeeperUtil();\n+        zkutil.startServer();\n+        zk = zkutil.getZooKeeperClient();\n+\n+        ledgerIdGenerator = new ZkLedgerIdGenerator(zk,\n+                \"/test-zk-ledger-id-generator\", \"idgen\");\n+    }\n+\n+    @Override\n+    @After\n+    public void tearDown() throws Exception {\n+        LOG.info(\"Tearing down test\");\n+        ledgerIdGenerator.close();\n+        zk.close();\n+        zkutil.killServer();\n+\n+        super.tearDown();\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testGenerateLedgerId() throws Exception {\n+        // Create *nThread* threads each generate *nLedgers* ledger id,\n+        // and then check there is no identical ledger id.\n+        final int nThread = 2;\n+        final int nLedgers = 2000;\n+        final CountDownLatch countDownLatch = new CountDownLatch(nThread*nLedgers);\n+\n+        final AtomicInteger errCount = new AtomicInteger(0);\n+        final ConcurrentLinkedQueue<Long> ledgerIds = new ConcurrentLinkedQueue<Long>();\n+        final GenericCallback<Long> cb = new GenericCallback<Long>() {\n+            @Override\n+            public void operationComplete(int rc, Long result) {\n+                if (Code.OK.intValue() == rc) {\n+                    ledgerIds.add(result);\n+                } else {\n+                    errCount.incrementAndGet();\n+                }\n+                countDownLatch.countDown();\n+            }\n+        };\n+\n+        long start = System.currentTimeMillis();\n+\n+        for (int i = 0; i < nThread; i++) {\n+            new Thread() {\n+                @Override\n+                public void run() {\n+                    for (int j = 0; j < nLedgers; j++) {\n+                        ledgerIdGenerator.generateLedgerId(cb);\n+                    }\n+                }\n+            }.start();\n+        }\n+\n+        assertTrue(\"Wait ledger id generation threads to stop timeout : \",\n+                countDownLatch.await(30, TimeUnit.SECONDS));\n+        LOG.info(\"Number of generated ledger id: {}, time used: {}\", ledgerIds.size(),\n+                System.currentTimeMillis() - start);\n+        assertEquals(\"Error occur during ledger id generation : \", 0, errCount.get());\n+\n+        Set<Long> ledgers = new HashSet<Long>();\n+        while (!ledgerIds.isEmpty()) {\n+            Long ledger = ledgerIds.poll();\n+            assertNotNull(\"Generated ledger id is null : \", ledger);\n+            assertFalse(\"Ledger id [\" + ledger + \"] conflict : \", ledgers.contains(ledger));\n+            ledgers.add(ledger);\n+        }\n+    }\n+\n+}"}]}

