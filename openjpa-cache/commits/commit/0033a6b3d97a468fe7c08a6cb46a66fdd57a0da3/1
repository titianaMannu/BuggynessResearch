{"sha":"0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwMzNhNmIzZDk3YTQ2OGZlN2MwOGE2Y2I0NmE2NmZkZDU3YTBkYTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T16:01:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T16:01:06Z"},"message":"OPENJPA-511\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619471 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dad1ce407a998c0ff4262a69dc8e2a3b93bc0d78","url":"https://api.github.com/repos/apache/openjpa/git/trees/dad1ce407a998c0ff4262a69dc8e2a3b93bc0d78"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","html_url":"https://github.com/apache/openjpa/commit/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"321ede95ee2fce8f7741085e67134ab5cff3abf2","url":"https://api.github.com/repos/apache/openjpa/commits/321ede95ee2fce8f7741085e67134ab5cff3abf2","html_url":"https://github.com/apache/openjpa/commit/321ede95ee2fce8f7741085e67134ab5cff3abf2"}],"stats":{"total":36,"additions":33,"deletions":3},"files":[{"sha":"b8186dee779306308ccec3786eeff9abf5d3f98b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","patch":"@@ -184,8 +184,7 @@ public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n             String sql = StringUtils.trimToNull(ctx.getQueryString());\n             if (sql == null)\n                 throw new UserException(_loc.get(\"no-sql\"));\n-            _select = sql.length() > 6\n-                && sql.substring(0, 6).equalsIgnoreCase(\"select\");\n+            _select = q.getStore().getDBDictionary().isSelect(sql);\n             _call = sql.length() > 4\n                 && sql.substring(0, 4).equalsIgnoreCase(\"call\");\n         }"},{"sha":"7482c26ffdf410048c9752f3d426bbacdef0ffa0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","patch":"@@ -148,6 +148,8 @@ public DB2Dictionary() {\n         }));\r\n         \r\n         super.setBatchLimit(defaultBatchLimit);\r\n+        \r\n+        selectWordSet.add(\"WITH\");\r\n     }\r\n \r\n     public boolean supportsRandomAccessResultSet(Select sel,\r"},{"sha":"536b0d6b475a5bb390c3c266e2938acf499ce8b9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":30,"deletions":1,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=0033a6b3d97a468fe7c08a6cb46a66fdd57a0da3","patch":"@@ -330,6 +330,12 @@\n     protected final Set fixedSizeTypeNameSet = new HashSet();\n     protected final Set typeModifierSet = new HashSet();\n \n+    /**\n+     * If a native query begins with any of the values found here then it will\n+     * be treated as a select statement.  \n+     */\n+    protected final Set selectWordSet = new HashSet();\n+\n     // when we store values that lose precion, track the types so that the\n     // first time it happens we can warn the user\n     private Set _precisionWarnedTypes = null;\n@@ -352,6 +358,8 @@ public DBDictionary() {\n             \"OTHER\", \"REAL\", \"REF\", \"SMALLINT\", \"STRUCT\", \"TIME\", \"TIMESTAMP\",\n             \"TINYINT\",\n         }));\n+        \n+        selectWordSet.add(\"SELECT\");\n     }\n \n     /**\n@@ -4324,5 +4332,26 @@ protected Object getKey (ResultSet rs, Column col) throws SQLException {\n     protected void calculateValue(Val val, Select sel, ExpContext ctx, \n         ExpState state, Path path, ExpState pathState) {\n         val.calculateValue(sel, ctx, state, (Val) path, pathState);\n-    }    \n+    }\n+\n+    /**\n+     * Determine whether the provided <code>sql</code> may be treated as a \n+     * select statement on this database.\n+     *  \n+     * @param sql   A sql statement. \n+     * \n+     * @return true if <code>sql</code> represents a select statement.\n+     */\n+    public boolean isSelect(String sql) {\n+        Iterator i = selectWordSet.iterator();\n+        String cur;\n+        while (i.hasNext()) {\n+            cur = (String) i.next();\n+            if (sql.length() >= cur.length()\n+                    && sql.substring(0, cur.length()).equalsIgnoreCase(cur)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n }"}]}

