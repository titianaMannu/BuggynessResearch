{"sha":"0036dc5bfbaec2a4bc5ededa93301c4353d26838","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwMzZkYzViZmJhZWMyYTRiYzVlZGVkYTkzMzAxYzQzNTNkMjY4Mzg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T03:03:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T03:03:48Z"},"message":"OPNJPA-1275: Align with JPA 2.0 Public Draft 2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810347 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2eed9e777b872bc6379042589e754279d15f17b1","url":"https://api.github.com/repos/apache/openjpa/git/trees/2eed9e777b872bc6379042589e754279d15f17b1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0036dc5bfbaec2a4bc5ededa93301c4353d26838","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0036dc5bfbaec2a4bc5ededa93301c4353d26838","html_url":"https://github.com/apache/openjpa/commit/0036dc5bfbaec2a4bc5ededa93301c4353d26838","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0036dc5bfbaec2a4bc5ededa93301c4353d26838/comments","author":null,"committer":null,"parents":[{"sha":"ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce","url":"https://api.github.com/repos/apache/openjpa/commits/ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce","html_url":"https://github.com/apache/openjpa/commit/ac939f7b5f23e8ef73e37c8baa1b0b23c5c4edce"}],"stats":{"total":90,"additions":60,"deletions":30},"files":[{"sha":"762750d869f474bc63f26296db082fce0e3a2f2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","raw_url":"https://github.com/apache/openjpa/raw/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java?ref=0036dc5bfbaec2a4bc5ededa93301c4353d26838","patch":"@@ -229,10 +229,10 @@ public void testAttributeGettersForValidInput() {\n         assertNotNull(superClass.getCollection(\"collectionRelation\"));\n         assertNotNull(superClass.getCollection(\"collectionRelation\", ExplicitFieldAccess.class));\n         \n-        assertNotNull(subClass.getCollections());\n-        assertNotNull(superClass.getCollections());\n-        assertEquals(6, subClass.getCollections().size());\n-        assertEquals(5, superClass.getCollections().size());\n+        assertNotNull(subClass.getPluralAttributes());\n+        assertNotNull(superClass.getPluralAttributes());\n+        assertEquals(6, subClass.getPluralAttributes().size());\n+        assertEquals(5, superClass.getPluralAttributes().size());\n         \n         assertNotNull(subClass.getDeclaredAttribute(\"mapRelationKeyEmbedded\"));\n         \n@@ -243,10 +243,10 @@ public void testAttributeGettersForValidInput() {\n         \n         assertNotNull(superClass.getDeclaredCollection(\"collectionRelation\"));\n         \n-        assertNotNull(subClass.getDeclaredCollections());\n-        assertNotNull(superClass.getDeclaredCollections());\n-        assertEquals(1, subClass.getDeclaredCollections().size());\n-        assertEquals(5, superClass.getDeclaredCollections().size());\n+        assertNotNull(subClass.getDeclaredPluralAttributes());\n+        assertNotNull(superClass.getDeclaredPluralAttributes());\n+        assertEquals(1, subClass.getDeclaredPluralAttributes().size());\n+        assertEquals(5, superClass.getDeclaredPluralAttributes().size());\n         \n         assertNotNull(superClass.getDeclaredList(\"listRelation\"));\n         assertNotNull(superClass.getDeclaredList(\"listRelation\", ExplicitFieldAccess.class));"},{"sha":"7640d667247d28e408f47cea6acd78bb9b622dca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java?ref=0036dc5bfbaec2a4bc5ededa93301c4353d26838","patch":"@@ -123,11 +123,11 @@ public void testPositionalParameterValueTypeInJPQLQuery() {\n         \n         Parameter<?> param1 = q.getParameter(1);\n         assertTrue(param1 instanceof ParameterImpl);\n-        assertEquals(long.class, param1.getJavaType());\n+        assertEquals(long.class, param1.getParameterType());\n         \n         Parameter<?> param2 = q.getParameter(2);\n         assertTrue(param2 instanceof ParameterImpl);\n-        assertEquals(String.class, param2.getJavaType());\n+        assertEquals(String.class, param2.getParameterType());\n     }\n     \n     public void testNamedParameterValueTypeInJPQLQuery() {\n@@ -138,11 +138,11 @@ public void testNamedParameterValueTypeInJPQLQuery() {\n         \n         Parameter<?> param1 = q.getParameter(\"id\");\n         assertTrue(param1 instanceof ParameterImpl);\n-        assertEquals(long.class, param1.getJavaType());\n+        assertEquals(long.class, param1.getParameterType());\n         \n         Parameter<?> param2 = q.getParameter(\"name\");\n         assertTrue(param2 instanceof ParameterImpl);\n-        assertEquals(String.class, param2.getJavaType());\n+        assertEquals(String.class, param2.getParameterType());\n     }\n     \n     public void testNamedParameterInPreparedQuery() {\n@@ -240,11 +240,11 @@ public void testPositionalParameterValueTypeInNamedQuery() {\n         \n         Parameter<?> param1 = q.getParameter(1);\n         assertTrue(param1 instanceof ParameterImpl);\n-        assertEquals(long.class, param1.getJavaType());\n+        assertEquals(long.class, param1.getParameterType());\n         \n         Parameter<?> param2 = q.getParameter(2);\n         assertTrue(param2 instanceof ParameterImpl);\n-        assertEquals(String.class, param2.getJavaType());\n+        assertEquals(String.class, param2.getParameterType());\n     }\n     \n     public void testNamedParameterValueTypeInNamedQuery() {\n@@ -254,11 +254,11 @@ public void testNamedParameterValueTypeInNamedQuery() {\n         \n         Parameter<?> param1 = q.getParameter(\"id\");\n         assertTrue(param1 instanceof ParameterImpl);\n-        assertEquals(long.class, param1.getJavaType());\n+        assertEquals(long.class, param1.getParameterType());\n         \n         Parameter<?> param2 = q.getParameter(\"name\");\n         assertTrue(param2 instanceof ParameterImpl);\n-        assertEquals(String.class, param2.getJavaType());\n+        assertEquals(String.class, param2.getParameterType());\n     }\n     \n     public void testCriteriaQueryWithNamedParameter() {"},{"sha":"4534be90676f1aad0f2bba5025d99fadb563eee9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=0036dc5bfbaec2a4bc5ededa93301c4353d26838","patch":"@@ -757,7 +757,7 @@ void clearBinding() {\n      */\n     public <T> Parameter<T> getParameter(String name, Class<T> type) {\n         Parameter<?> param = getParameter(name);\n-        if (param.getJavaType().isAssignableFrom(type))\n+        if (param.getParameterType().isAssignableFrom(type))\n             throw new IllegalArgumentException(param + \" does not match the requested type \" + type);\n         return (Parameter<T>)param;\n     }\n@@ -772,7 +772,7 @@ void clearBinding() {\n      */\n     public <T> Parameter<T> getParameter(int pos, Class<T> type) {\n         Parameter<?> param = getParameter(pos);\n-        if (param.getJavaType().isAssignableFrom(type))\n+        if (param.getParameterType().isAssignableFrom(type))\n             throw new IllegalArgumentException(param + \" does not match the requested type \" + type);\n         return (Parameter<T>)param;\n     }\n@@ -1028,13 +1028,13 @@ void bindValue(Parameter<?> param, Object value) {\n \n     void assertValueAssignable(Parameter<?> param, Object v) {\n         if (v == null) {\n-            if (param.getJavaType().isPrimitive())\n+            if (param.getParameterType().isPrimitive())\n                 throw new IllegalArgumentException(_loc.get(\"param-null-primitive\", param).getMessage());\n             return;\n         }\n-        if (!Filters.canConvert(v.getClass(), param.getJavaType(), true)) {\n+        if (!Filters.canConvert(v.getClass(), param.getParameterType(), true)) {\n             throw new IllegalArgumentException(_loc.get(\"param-type-mismatch\", new Object[]{\n-                param, getQueryString(), v, v.getClass().getName(), param.getJavaType().getName()}).getMessage());\n+                param, getQueryString(), v, v.getClass().getName(), param.getParameterType().getName()}).getMessage());\n         }\n     }\n     "},{"sha":"c46cc786d920c33202b8bdff7c7dbcec1790b3e2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java?ref=0036dc5bfbaec2a4bc5ededa93301c4353d26838","patch":"@@ -310,7 +310,7 @@ public Predicate isFalse(Expression<Boolean> x) {\n     }\n \n     public <E, C extends Collection<E>> Predicate isMember(Expression<E> e, Expression<C> c) {\n-        return new Expressions.IsMember<E>(e.getJavaType(), e, c);\n+        return new Expressions.IsMember<E>((Class<E>)e.getJavaType(), e, c);\n     }\n \n     public <C extends Collection<?>> Predicate isNotEmpty(Expression<C> collection) {"},{"sha":"997c3971e7e656232bd3e0182d29ac9ddaf9e398","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=0036dc5bfbaec2a4bc5ededa93301c4353d26838","patch":"@@ -237,10 +237,22 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n \n     public CriteriaQuery<T> groupBy(Expression<?>... grouping) {\n     \t_groups = new ArrayList<Expression<?>>();\n+    \tif (grouping == null)\n+    \t    return this;\n     \tfor (Expression<?> e : grouping)\n     \t\t_groups.add(e);\n         return this;\n     }\n+    \n+    public CriteriaQuery<T> groupBy(List<Expression<?>> grouping) {\n+        _groups = new ArrayList<Expression<?>>();\n+        if (grouping == null)\n+            return this;\n+        for (Expression<?> e : grouping)\n+            _groups.add(e);\n+        return this;\n+    }\n+\n \n     public CriteriaQuery<T> having(Expression<Boolean> restriction) {\n         _having = new PredicateImpl().add(restriction);\n@@ -254,8 +266,23 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n         return this;\n     }\n \n-    public CriteriaQuery<T> orderBy(Order... o) {\n-        _orders = Arrays.asList(o);\n+    public CriteriaQuery<T> orderBy(Order... orders) {\n+        _orders = new ArrayList<Order>();\n+        if (orders == null)\n+            return this;\n+        for (Order o : orders) {\n+            _orders.add(o);\n+        }\n+        return this;\n+    }\n+    \n+    public CriteriaQuery<T> orderBy(List<Order> orders) {\n+        _orders = new ArrayList<Order>();\n+        if (orders == null)\n+            return this;\n+        for (Order o : orders) {\n+            _orders.add(o);\n+        }\n         return this;\n     }\n     "},{"sha":"66d95568defdd0cec8220e4509db423c772c5d53","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=0036dc5bfbaec2a4bc5ededa93301c4353d26838","patch":"@@ -193,7 +193,7 @@ public UnaryFunctionalExpression(Class<X> t, Expression<?> e) {\n         }\n         \n         public UnaryFunctionalExpression(Expression<X> e) {\n-            this(e.getJavaType(), e);\n+            this((Class<X>)e.getJavaType(), e);\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n@@ -1263,15 +1263,13 @@ public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n         private Expression<?> val2;\n \n         public Nullif(Expression<T> x, Expression<?> y) {\n-            super(x.getJavaType());\n+            super((Class<T>)x.getJavaType());\n             val1 = x;\n             val2 = y;\n         }\n \n         public Nullif(Expression<T> x, T y) {\n-            super(x.getJavaType());\n-            val1 = x;\n-            val2 = new Constant<T>(y);\n+            this(x, new Constant<T>(y));\n         }\n \n         @Override\n@@ -1636,7 +1634,7 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         final SubqueryImpl<X> e;\n         \n         public SubqueryExpression(Subquery<X> x) {\n-            super(x.getJavaType());\n+            super((Class<X>)x.getJavaType());\n             e = (SubqueryImpl<X>)x;\n         }\n         "},{"sha":"72161b7374f58451992da5e61379546fd7c47c75","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0036dc5bfbaec2a4bc5ededa93301c4353d26838/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java?ref=0036dc5bfbaec2a4bc5ededa93301c4353d26838","patch":"@@ -156,6 +156,11 @@ public MetamodelImpl getMetamodel() {\n         _delegate.groupBy(grouping);\n         return this;\n     }\n+    \n+    public Subquery<T> groupBy(List<Expression<?>> grouping) {\n+        _delegate.groupBy(grouping);\n+        return this;\n+    }\n \n     public Subquery<T> having(Expression<Boolean> restriction) {\n         _delegate.having(restriction);"}]}

