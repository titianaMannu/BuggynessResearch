{"sha":"008b249c241dae1cc91a2c74f0621afc8947a5fa","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwOGIyNDljMjQxZGFlMWNjOTFhMmM3NGYwNjIxYWZjODk0N2E1ZmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-16T12:30:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-16T12:30:15Z"},"message":"OPENJPA-331. Checking in on behalf of Miroslav Nachev. Includes minor whitespace reformatting and @since tags for new source classes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@604621 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a1d753d1e3ed7ca5b79f2a234e731e1d2641c72","url":"https://api.github.com/repos/apache/openjpa/git/trees/0a1d753d1e3ed7ca5b79f2a234e731e1d2641c72"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/008b249c241dae1cc91a2c74f0621afc8947a5fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/008b249c241dae1cc91a2c74f0621afc8947a5fa","html_url":"https://github.com/apache/openjpa/commit/008b249c241dae1cc91a2c74f0621afc8947a5fa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/008b249c241dae1cc91a2c74f0621afc8947a5fa/comments","author":null,"committer":null,"parents":[{"sha":"7bd70d36dbf8737fb279beedcde7c46b95481c3b","url":"https://api.github.com/repos/apache/openjpa/commits/7bd70d36dbf8737fb279beedcde7c46b95481c3b","html_url":"https://github.com/apache/openjpa/commit/7bd70d36dbf8737fb279beedcde7c46b95481c3b"}],"stats":{"total":415,"additions":412,"deletions":3},"files":[{"sha":"485e8b09d16c18a378eb9b849d6954c995daf9ee","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -47,7 +47,6 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n@@ -65,6 +64,8 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.BigDecimalId;\n+import org.apache.openjpa.util.BigIntegerId;\n import org.apache.openjpa.util.ByteId;\n import org.apache.openjpa.util.CharId;\n import org.apache.openjpa.util.DateId;\n@@ -2101,6 +2102,18 @@ private void addExtractObjectIdFieldValueCode(Code code, FieldMetaData pk) {\n                     code.invokevirtual().setMethod(StringId.class, \"getId\",\n                         String.class, null);\n                     break;\n+                case JavaTypes.BIGDECIMAL:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(BigDecimalId.class);\n+                    code.invokevirtual().setMethod(BigDecimalId.class, \"getId\",\n+                        BigDecimalId.class, null);\n+                    break;\n+                case JavaTypes.BIGINTEGER:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(BigIntegerId.class);\n+                    code.invokevirtual().setMethod(BigIntegerId.class, \"getId\",\n+                        BigIntegerId.class, null);\n+                    break;\n                 default:\n                     code.aload().setLocal(oid);\n                     code.checkcast().setType(ObjectId.class);"},{"sha":"b746af8c07a892408d68d0e758543f38bc197301","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -46,6 +46,8 @@\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n+import org.apache.openjpa.util.BigDecimalId;\n+import org.apache.openjpa.util.BigIntegerId;\n import org.apache.openjpa.util.ByteId;\n import org.apache.openjpa.util.CharId;\n import org.apache.openjpa.util.DateId;\n@@ -482,6 +484,12 @@ public Class getObjectIdType() {\n             case JavaTypes.OBJECT:\n                 _objectId = ObjectId.class;\n                 break;\n+            case JavaTypes.BIGDECIMAL:\n+                _objectId = BigDecimalId.class;\n+                break;\n+            case JavaTypes.BIGINTEGER:\n+                _objectId = BigIntegerId.class;\n+                break;\n         }\n         return _objectId;\n     }"},{"sha":"b0314014da74381016d3fc66f4a80e804f8cd113","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -20,6 +20,8 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.util.Date;\n@@ -170,6 +172,14 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                 case JavaTypes.OID:\n                 case JavaTypes.OBJECT:\n                     return new ObjectId(meta.getDescribedType(), val);\n+                case JavaTypes.BIGDECIMAL:\n+                    if (!convert && !(val instanceof BigDecimal))\n+                        throw new ClassCastException(\"!(x instanceof BigDecimal)\");\n+                    return new BigDecimalId(meta.getDescribedType(), (BigDecimal)val);\n+                case JavaTypes.BIGINTEGER:\n+                    if (!convert && !(val instanceof BigInteger))\n+                        throw new ClassCastException(\"!(x instanceof BigInteger)\");\n+                    return new BigIntegerId(meta.getDescribedType(), (BigInteger)val);\n                 default:\n                     throw new InternalException();\n             }\n@@ -275,6 +285,12 @@ public static Object copy(Object oid, ClassMetaData meta) {\n                 case JavaTypes.DATE:\n                     return new DateId(cls, ((DateId) oid).getId(),\n                         koid.hasSubclasses());\n+                case JavaTypes.BIGDECIMAL:\n+                    return new BigDecimalId(cls, ((BigDecimalId) oid).getId(),\n+                        koid.hasSubclasses());\n+                case JavaTypes.BIGINTEGER:\n+                    return new BigIntegerId(cls, ((BigIntegerId) oid).getId(),\n+                        koid.hasSubclasses());\n                 default:\n                     throw new InternalException();\n             }"},{"sha":"299e2e61530233bad6ec517e85649d6f3c99d005","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigDecimalId.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ *  Copyright 2007 Miroslav Nachev.\r\n+ * \r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ * \r\n+ *       http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ *  under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.math.BigDecimal;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ * @since 1.1.0\r\n+ */\r\n+public class BigDecimalId\r\n+    extends OpenJPAId {\r\n+\r\n+    private final BigDecimal key;\r\n+\r\n+    public BigDecimalId(Class cls, String key) {\r\n+        this(cls, (key == null) ? null : new BigDecimal(key));\r\n+    }\r\n+\r\n+    public BigDecimalId(Class cls, BigDecimal key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public BigDecimalId(Class cls, BigDecimal key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public BigDecimal getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        if (key == null)\r\n+            return \"NULL\";\r\n+\r\n+        return key.toString();\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        if (key != null)\r\n+            return key.hashCode();\r\n+\r\n+        return 0;\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId other) {\r\n+        if(key == null)\r\n+            return false;\r\n+\r\n+        return key.equals(other);\r\n+    }\r\n+}\r"},{"sha":"33d9705ce598292fdb138302180e978da456015f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/BigIntegerId.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ *  Copyright 2007 Miroslav Nachev.\r\n+ * \r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ * \r\n+ *       http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ *  under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.math.BigInteger;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ * @since 1.1.0\r\n+ */\r\n+public class BigIntegerId\r\n+    extends OpenJPAId {\r\n+\r\n+    private final BigInteger key;\r\n+\r\n+    public BigIntegerId(Class cls, String key) {\r\n+        this(cls, (key == null) ? null : new BigInteger(key));\r\n+    }\r\n+\r\n+    public BigIntegerId(Class cls, BigInteger key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public BigIntegerId(Class cls, BigInteger key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public BigInteger getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        if (key == null)\r\n+            return \"NULL\";\r\n+\r\n+        return key.toString();\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        if (key != null)\r\n+            return key.hashCode();\r\n+\r\n+        return 0;\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId other) {\r\n+        if (key == null)\r\n+            return false;\r\n+\r\n+        return key.equals(other);\r\n+    }\r\n+\r\n+}\r"},{"sha":"580d916279f53a73401a5f5ae037b46d26004082","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ *  Copyright 2007 Miroslav Nachev.\r\n+ * \r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ * \r\n+ *       http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ *  under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigDecimal;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+@Entity\r\n+public class SQLBigDecimalIdEntity {\r\n+\r\n+    @Id\r\n+    private BigDecimal id;\r\n+    private int data;\r\n+\r\n+    public BigDecimal getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(BigDecimal id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getData() {\r\n+        return data;\r\n+    }\r\n+\r\n+    public void setData(int data) {\r\n+        this.data = data;\r\n+    }\r\n+}\r"},{"sha":"a03479cefacf40c0cbf39796e84932ef058c6ded","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ *  Copyright 2007 Miroslav Nachev.\r\n+ * \r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ * \r\n+ *       http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ *  under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigInteger;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+@Entity\r\n+public class SQLBigIntegerIdEntity {\r\n+\r\n+    @Id\r\n+    private BigInteger id;\r\n+    private int data;\r\n+\r\n+    public BigInteger getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(BigInteger id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getData() {\r\n+        return data;\r\n+    }\r\n+\r\n+    public void setData(int data) {\r\n+        this.data = data;\r\n+    }\r\n+}\r"},{"sha":"f392eebdd7c4059e238655c9c60fe61a35862157","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ *  Copyright 2007 Miroslav Nachev.\r\n+ * \r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ * \r\n+ *       http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ *  under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigDecimal;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+public class TestSQLBigDecimalId\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(SQLBigDecimalIdEntity.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testPersist() {\r\n+        long time = ((long) (System.currentTimeMillis() / 1000)) * 1000;\r\n+        BigDecimal decimal = new BigDecimal(time);\r\n+\r\n+        SQLBigDecimalIdEntity e = new SQLBigDecimalIdEntity();\r\n+        e.setId(decimal);\r\n+        e.setData(1);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(e);\r\n+        em.getTransaction().commit();\r\n+        assertEquals(time, e.getId().longValue());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(SQLBigDecimalIdEntity.class, decimal);\r\n+        assertEquals(1, e.getData());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(SQLBigDecimalIdEntity.class);\r\n+    }\r\n+}\r"},{"sha":"228de098cc526a956f7b94597e8f3e0c583a5b50","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ *  Copyright 2007 Miroslav Nachev.\r\n+ * \r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ * \r\n+ *       http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ *  under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.identity;\r\n+\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * @author <a href=\"mailto:mnachev@gmail.com\">Miroslav Nachev</a>\r\n+ */\r\n+public class TestSQLBigIntegerId\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(SQLBigIntegerIdEntity.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testPersist() {\r\n+        long time = ((long) (System.currentTimeMillis() / 1000)) * 1000;\r\n+        BigInteger integer = new BigDecimal(time).toBigInteger();\r\n+\r\n+        SQLBigIntegerIdEntity e = new SQLBigIntegerIdEntity();\r\n+        e.setId(integer);\r\n+        e.setData(1);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(e);\r\n+        em.getTransaction().commit();\r\n+        assertEquals(time, e.getId().longValue());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(SQLBigIntegerIdEntity.class, integer);\r\n+        assertEquals(1, e.getData());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(SQLBigIntegerIdEntity.class);\r\n+    }\r\n+}\r"},{"sha":"f03f2081791cd6413a92330ac6ef4b9c72728503","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/008b249c241dae1cc91a2c74f0621afc8947a5fa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java?ref=008b249c241dae1cc91a2c74f0621afc8947a5fa","patch":"@@ -18,6 +18,8 @@\n  */\r\n package org.apache.openjpa.persistence;\r\n \r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Iterator;\r\n@@ -27,6 +29,8 @@\n import org.apache.openjpa.kernel.Broker;\r\n import org.apache.openjpa.kernel.BrokerFactory;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.util.BigDecimalId;\r\n+import org.apache.openjpa.util.BigIntegerId;\r\n import org.apache.openjpa.util.ByteId;\r\n import org.apache.openjpa.util.CharId;\r\n import org.apache.openjpa.util.DoubleId;\r\n@@ -231,6 +235,10 @@ public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\n             return new ShortId(cls, (Short) oid);\r\n         if (oid instanceof String)\r\n             return new StringId(cls, (String) oid);\r\n+        if (oid instanceof BigDecimal)\r\n+            return new BigDecimalId(cls, (BigDecimal) oid);\r\n+        if (oid instanceof BigInteger)\r\n+            return new BigIntegerId(cls, (BigInteger) oid);\r\n         return new ObjectId(cls, oid);\r\n     }\r\n \r\n@@ -301,7 +309,11 @@ public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n         if (oidClass == ShortId.class)\r\n             return Short.class;\r\n         if (oidClass == StringId.class)\r\n-\t\t\treturn String.class;\r\n-\t\treturn oidClass;\r\n+            return String.class;\r\n+        if (oidClass == BigDecimalId.class)\r\n+            return BigDecimal.class;\r\n+        if (oidClass == BigIntegerId.class)\r\n+            return BigInteger.class;\r\n+        return oidClass;\r\n \t}\r\n }\r"}]}

