{"sha":"00bd91cc2c858949486acb4e8063176be9a48842","node_id":"MDY6Q29tbWl0MjA2MzY0OjAwYmQ5MWNjMmM4NTg5NDk0ODZhY2I0ZTgwNjMxNzZiZTlhNDg4NDI=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2020-12-14T13:13:32Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2020-12-14T13:13:32Z"},"message":"OPENJPA-2788 fix anynomous Criteria Parameters","tree":{"sha":"3a48dd1768920c5fb90039e4c2f59b36e2aee534","url":"https://api.github.com/repos/apache/openjpa/git/trees/3a48dd1768920c5fb90039e4c2f59b36e2aee534"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/00bd91cc2c858949486acb4e8063176be9a48842","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/00bd91cc2c858949486acb4e8063176be9a48842","html_url":"https://github.com/apache/openjpa/commit/00bd91cc2c858949486acb4e8063176be9a48842","comments_url":"https://api.github.com/repos/apache/openjpa/commits/00bd91cc2c858949486acb4e8063176be9a48842/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"b29976342c912ca5db47ef529cba025b3fe18430","url":"https://api.github.com/repos/apache/openjpa/commits/b29976342c912ca5db47ef529cba025b3fe18430","html_url":"https://github.com/apache/openjpa/commit/b29976342c912ca5db47ef529cba025b3fe18430"}],"stats":{"total":62,"additions":43,"deletions":19},"files":[{"sha":"c0b6cd864ace7cffa2ed14ed680b11cd87e4db33","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":34,"deletions":4,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/00bd91cc2c858949486acb4e8063176be9a48842/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/00bd91cc2c858949486acb4e8063176be9a48842/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=00bd91cc2c858949486acb4e8063176be9a48842","patch":"@@ -26,6 +26,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Random;\n \n import javax.persistence.Parameter;\n import javax.persistence.Query;\n@@ -580,6 +581,36 @@ public void decorate(Query q) {\n         }, q, jpql);\n     }\n \n+    public void testParameters_wo_paramName() {\n+        final int rand = new Random().nextInt();\n+        final String name = \"testName_\" + rand;\n+        final String lastName = \"lastName_\" + rand;\n+        em.getTransaction().begin();\n+        Customer cNew = new Customer();\n+        cNew.setName(name);\n+        cNew.setLastName(lastName);\n+        cNew.setStatus(4711);\n+        em.persist(cNew);\n+        em.getTransaction().commit();\n+\n+        CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n+        Root<Customer> c = q.from(Customer.class);\n+        Parameter<String> paramName = cb.parameter(String.class);\n+        Parameter<String> paramLastName = cb.parameter(String.class);\n+        q.select(c).where(cb.and(cb.equal(c.get(Customer_.lastName), paramLastName),\n+                cb.equal(c.get(Customer_.name), paramName)));\n+\n+        final TypedQuery<Customer> query = em.createQuery(q);\n+        query.setParameter(paramName, name);\n+        query.setParameter(paramLastName, lastName);\n+\n+        System.err.println(\"CQ: \" + query.toString());\n+\n+        final List<Customer> customers = query.getResultList();\n+        assertNotNull(customers);\n+        assertEquals(1, customers.size());\n+    }\n+\n     public void testParameters3() {\n         String jpql = \"SELECT c FROM Customer c Where c.status = :stat\";\n \n@@ -1608,10 +1639,9 @@ public void testBigDecimalConversion() {\n \n     public void testIdClass() {\n         String jpql = \"select p from EntityWithIdClass p\";\n-\n-    \tCriteriaQuery<EntityWithIdClass> cq = cb.createQuery(EntityWithIdClass.class);\n-    \tRoot<EntityWithIdClass> c = cq.from(EntityWithIdClass.class);\n-    \tem.createQuery(cq).getResultList();\n+        CriteriaQuery<EntityWithIdClass> cq = cb.createQuery(EntityWithIdClass.class);\n+        Root<EntityWithIdClass> c = cq.from(EntityWithIdClass.class);\n+        em.createQuery(cq).getResultList();\n \n         assertEquivalence(cq, jpql);\n     }"},{"sha":"c748a0b7ba3bf2d78ee7a03fd2d7ea0966b490d1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","status":"modified","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/00bd91cc2c858949486acb4e8063176be9a48842/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/00bd91cc2c858949486acb4e8063176be9a48842/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java?ref=00bd91cc2c858949486acb4e8063176be9a48842","patch":"@@ -41,7 +41,7 @@\n  */\n class ParameterExpressionImpl<T> extends ExpressionImpl<T>\n     implements ParameterExpression<T>, BindableParameter {\n-    private String _name;\n+    private final String _name;\n     private int _index = 0; // index of the parameter as seen by the kernel, not position\n     private Object value;\n \n@@ -53,8 +53,10 @@\n      */\n     public ParameterExpressionImpl(Class<T> cls, String name) {\n         super(cls);\n-        if (name != null)\n+        if (name != null) {\n             assertValidName(name);\n+        }\n+\n         _name = name;\n     }\n \n@@ -148,8 +150,12 @@ public boolean paramEquals(Object o) {\n \n         ParameterExpressionImpl<?> that = (ParameterExpressionImpl<?>) o;\n \n-        if (_name != null ? !_name.equals(that._name) : that._name != null)\n+        // we treat parameters the same ONLY if they are\n+        // * either the same instance (tested above)\n+        // * or have the same parameter name in the same tree\n+        if (_name == null || !_name.equals(that._name)) {\n             return false;\n+        }\n \n         // if name is given, then we ignore the index\n         if (_name == null && _index != that._index)\n@@ -161,16 +167,4 @@ public boolean paramEquals(Object o) {\n         return value != null ? value.equals(that.value) : that.value == null;\n     }\n \n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return super.hashCode();\n-    }\n }"}]}

