{"sha":"020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyMGQ0NmVmMTIzMWNlNTFjZTIzMTU4MWMyZTljM2Q1MmRkN2ZiYjQ=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-06T16:13:33Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-06T16:13:33Z"},"message":"OPENJPA-1338 Allow comparison for VALUE(e) that maps to basic type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822330 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d76793a58c7ef0cf2cc2d6a7e8f505efb515384d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d76793a58c7ef0cf2cc2d6a7e8f505efb515384d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","html_url":"https://github.com/apache/openjpa/commit/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/comments","author":null,"committer":null,"parents":[{"sha":"5b9c0cb8f893cd2c022b1260a3787cd41c62daca","url":"https://api.github.com/repos/apache/openjpa/commits/5b9c0cb8f893cd2c022b1260a3787cd41c62daca","html_url":"https://github.com/apache/openjpa/commit/5b9c0cb8f893cd2c022b1260a3787cd41c62daca"}],"stats":{"total":188,"additions":175,"deletions":13},"files":[{"sha":"0a1284bbf8daafe28e3a00a98b99ab6951d9e3db","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","patch":"@@ -1731,20 +1731,20 @@ else if (node.id == JJTKEY)\n \n     private Value getGeneralIdentifier(JPQLNode node, boolean inWhereClause) {\n         JPQLNode id = onlyChild(node);\n-        if (inWhereClause && node.id == JJTVALUE)\n-            throw parseException(EX_USER, \"bad-general-identifier\",\n-                new Object[]{ id.text, \"VALUE\" }, null);\n-\n         Path path = validateMapPath(node, id);\n+\n+        if (node.id == JJTKEY)\n+            path = (Path) factory.getKey(path);\n         FieldMetaData fld = path.last();\n-        path = (Path) factory.getKey(path);\n-        ClassMetaData meta = fld.getKey().getTypeMetaData();\n-        if (inWhereClause && meta != null &&\n-            fld.isElementCollection() &&\n-            fld.getElement().getEmbeddedMetaData() != null)\n-            // check basic type\n-            throw parseException(EX_USER, \"bad-general-identifier\",\n-                new Object[]{ id.text, \"KEY\" }, null);\n+        ClassMetaData meta = node.id == JJTKEY ? meta = fld.getKey().getTypeMetaData()\n+                : fld.getDeclaredTypeMetaData();\n+        if (inWhereClause &&\n+            (meta != null && meta.isEmbeddable()) ||\n+                (fld.isElementCollection() &&\n+                 fld.getElement().getEmbeddedMetaData() != null))   \n+                 // check basic type\n+                throw parseException(EX_USER, \"bad-general-identifier\",\n+                    new Object[]{ id.text, node.id == JJTVALUE ? \"VALUE\" : \"KEY\" }, null);\n \n         return path;\n     }"},{"sha":"b76e6bcc6a7aa37b51dd011a36888ebfad71acbf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Map.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Map.java","raw_url":"https://github.com/apache/openjpa/raw/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Map.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Map.java?ref=020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import javax.persistence.ElementCollection;\r\n+import javax.persistence.Embeddable;\r\n+\r\n+@Embeddable \r\n+public class Embed_Coll_Map {\r\n+    protected String name1;\r\n+    protected String name2;\r\n+    protected String name3;\r\n+    \r\n+    @ElementCollection\r\n+    public Map<Integer, Integer> mapKeyInteger = new HashMap<Integer, Integer>();\r\n+    \r\n+    public String getName1() {\r\n+        return name1;\r\n+    }\r\n+    \r\n+    public void setName1(String name1) {\r\n+        this.name1 = name1;\r\n+    }\r\n+    \r\n+    public String getName2() {\r\n+        return name2;\r\n+    }\r\n+    \r\n+    public void setName2(String name2) {\r\n+        this.name2 = name2;\r\n+    }\r\n+    \r\n+    public String getName3() {\r\n+        return name3;\r\n+    }\r\n+    \r\n+    public void setName3(String name3) {\r\n+        this.name3 = name3;\r\n+    }\r\n+    \r\n+    public Map<Integer,Integer> getMap() {\r\n+        return mapKeyInteger;\r\n+    }\r\n+ \r\n+    public void addMap(Integer key, Integer value) {\r\n+        mapKeyInteger.put(key, value);\r\n+    }\r\n+}\r"},{"sha":"a58cb6469cee39b6ff4111e008837bd2a9a17a8c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Map.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Map.java","raw_url":"https://github.com/apache/openjpa/raw/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Map.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Map.java?ref=020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Embedded;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"EETMM\")\r\n+public class EntityA_Embed_Coll_Map implements Serializable {\r\n+    @Id\r\n+    Integer id;\r\n+\r\n+    @Column(length = 30)\r\n+    String name;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    int age;\r\n+\r\n+    @Embedded\r\n+    protected Embed_Coll_Map embed;\r\n+\r\n+    public int getAge() {\r\n+        return age;\r\n+    }\r\n+\r\n+    public void setAge(int age) {\r\n+        this.age = age;\r\n+    }\r\n+\r\n+    public Integer getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Integer id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public Embed_Coll_Map getEmbed() {\r\n+        return embed;\r\n+    }\r\n+\r\n+    public void setEmbed(Embed_Coll_Map embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+}\r"},{"sha":"aa94b6216d6cdf196998125e3531c1048da7dd78","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/020d46ef1231ce51ce231581c2e9c3d52dd7fbb4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=020d46ef1231ce51ce231581c2e9c3d52dd7fbb4","patch":"@@ -97,14 +97,32 @@ public void setUp() {\n             Embed_MappedToOne.class, Embed_MappedToOneCascadeDelete.class, \n             EntityA_Embed_MappedToOneCascadeDelete.class, EntityB2.class, \n             Book.class, Listing.class, Seller.class,\n+            EntityA_Embed_Coll_Map.class, Embed_Coll_Map.class,\n             EntityA_Embed_Complex.class, CLEAR_TABLES);\n             sql.clear();\n             DBDictionary dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n             if (dict.getClass().getName().indexOf(\"oracle\") != -1) {\n                 ((OracleDictionary)dict).useTriggersForAutoAssign = true;\n             }\n     }\n-    \n+\n+    public void testEntityA_Embed_Coll_Map() {\n+        queryEntityA_Embed_Coll_Map();\n+    }\n+\n+    public void queryEntityA_Embed_Coll_Map() {\n+        EntityManager em = emf.createEntityManager();\n+        String query[] = {\n+                \"select e from EntityA_Embed_Coll_Map a join a.embed e \" +\n+                \"join e.mapKeyInteger i where value(i) > 0 \",\n+            };\n+        List rs = null;\n+        for (int i = 0; i < query.length; i++) {\n+            rs = em.createQuery(query[i]).getResultList();\n+            em.clear();\n+        }        \n+    }\n+\n     public void testEntityA_Coll_String() {\n         createEntityA_Coll_String();\n         queryEntityA_Coll_String();"}]}

