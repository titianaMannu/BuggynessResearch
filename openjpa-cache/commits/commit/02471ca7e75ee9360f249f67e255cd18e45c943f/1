{"sha":"02471ca7e75ee9360f249f67e255cd18e45c943f","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyNDcxY2E3ZTc1ZWU5MzYwZjI0OWY2N2UyNTVjZDE4ZTQ1Yzk0M2Y=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-30T20:49:09Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-30T20:49:09Z"},"message":"OPENJPA-1229 Reworked Persistence.createEMF() exception handling in the geronimo-jpa2 spec api (PFD2), which wraps all exceptions in a PersistenceException and can now return multiple provider exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820440 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cefc63f2786a89bd5f7f4e4de4727c759b424622","url":"https://api.github.com/repos/apache/openjpa/git/trees/cefc63f2786a89bd5f7f4e4de4727c759b424622"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/02471ca7e75ee9360f249f67e255cd18e45c943f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/02471ca7e75ee9360f249f67e255cd18e45c943f","html_url":"https://github.com/apache/openjpa/commit/02471ca7e75ee9360f249f67e255cd18e45c943f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/02471ca7e75ee9360f249f67e255cd18e45c943f/comments","author":null,"committer":null,"parents":[{"sha":"529bd3a876723a7af1f09aeb2ddf082708c2c841","url":"https://api.github.com/repos/apache/openjpa/commits/529bd3a876723a7af1f09aeb2ddf082708c2c841","html_url":"https://github.com/apache/openjpa/commit/529bd3a876723a7af1f09aeb2ddf082708c2c841"}],"stats":{"total":133,"additions":62,"deletions":71},"files":[{"sha":"df75dd3393d6dea44286e76872379969b0931855","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=02471ca7e75ee9360f249f67e255cd18e45c943f","patch":"@@ -866,17 +866,19 @@ protected DelegatingStoreManager createDelegatingStoreManager() {\n     protected void initWriteBehindCallback() { \n         WriteBehindCache cache = _conf.getWriteBehindCacheManagerInstance().getSystemWriteBehindCache();\n         if (cache != null) {\n-    \n-            if (_conf.getDataCacheManagerInstance().getSystemDataCache() == null ||\n-                _conf.getWriteBehindCallbackInstance() == null ) {\n-                //\n-                // Missing one or more of the following required WriteBehind configuration \n-                // parameters:\n-                //\n-                //   - openjpa.DataCache\n-                //   - openjpa.WriteBehindCallback\n-                //\n-                throw new WriteBehindConfigurationException();\n+            // Verify we are not missing one or more of the following required\n+            // WriteBehind configuration parameters:\n+            //   - openjpa.DataCache\n+            //   - openjpa.WriteBehindCallback\n+            if (_conf.getDataCacheManagerInstance().getSystemDataCache() == null) {\n+                throw new WriteBehindConfigurationException(\n+                    _loc.get(\"writebehind-cfg-err\",\n+                    \"openjpa.DataCache\").getMessage());\n+            }\n+            if (_conf.getWriteBehindCallbackInstance() == null ) {\n+                throw new WriteBehindConfigurationException(\n+                    _loc.get(\"writebehind-cfg-err\",\n+                    \"openjpa.WriteBehindCallback\").getMessage());\n             }\n     \n             Broker broker =\n@@ -899,3 +901,4 @@ protected void initWriteBehindCallback() {\n         }\n     }\n }\n+"},{"sha":"fde5dab8919115d772f895decadaddd394807a99","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindConfigurationException.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindConfigurationException.java","raw_url":"https://github.com/apache/openjpa/raw/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindConfigurationException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/writebehind/WriteBehindConfigurationException.java?ref=02471ca7e75ee9360f249f67e255cd18e45c943f","patch":"@@ -24,6 +24,13 @@\n \n     private static final long serialVersionUID = 4378466107767896762L;\n \n+    /**\n+     * Constructor; supply message as String.\n+     */\n+    public WriteBehindConfigurationException(String msg) {\n+        super(msg);\n+    }\n+\n     @Override\n     public int getType() {\n         return USER;"},{"sha":"1f0e8a7a82eed04bf1f37e325d943e87e48391cb","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=02471ca7e75ee9360f249f67e255cd18e45c943f","patch":"@@ -444,4 +444,6 @@ fill-assign-error: Error while assigning data from values \"{0}\" of types \\\n \t\"{1}\". See nested exception for details.\n fill-factory-error: Error while fill data with factory strategy. The error \\\n \toccurred while invoking \"{0}\" with key \"{1}\" and value \"{2}\" of type \"{3}\". \\\n-\tSee nested exception for details.\t\n\\ No newline at end of file\n+\tSee nested exception for details.\t\n+writebehind-cfg-err: Missing required WriteBehind configuration parameter \"{0}\"\n+"},{"sha":"2ca22933c139024aba1deda0999b2cca9986ffb2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestSpecificationConfiguration.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestSpecificationConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestSpecificationConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestSpecificationConfiguration.java?ref=02471ca7e75ee9360f249f67e255cd18e45c943f","patch":"@@ -90,9 +90,13 @@ public void testHigherVersionCanNotBeSet() {\n                 \"openjpa.Log\", \"DefaultLevel=WARN\");\n             fail(\"Expected to fail with higher Spec version\");\n         } catch (IllegalArgumentException ex) {\n-            // good\n+            // prior behavior - spec api returned runtime exceptions as-is\n             emf.getConfiguration().getLog(\"Tests\").trace(\n                 \"Caught expected IllegalArgumentException = \" + ex);\n+        } catch (PersistenceException pe) {\n+            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n+            emf.getConfiguration().getLog(\"Tests\").trace(\n+                \"Caught expected PersistenceException = \" + pe);\n         }\n     }\n     "},{"sha":"08aabe712f309ac816ad9212ce492c0fd61ae724","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","status":"modified","additions":32,"deletions":57,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","raw_url":"https://github.com/apache/openjpa/raw/02471ca7e75ee9360f249f67e255cd18e45c943f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java?ref=02471ca7e75ee9360f249f67e255cd18e45c943f","patch":"@@ -22,11 +22,12 @@\n import java.util.Map;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.Persistence;\n+import javax.persistence.PersistenceException;\n \n import junit.framework.TestCase;\n \n import org.apache.openjpa.persistence.ArgumentException;\n-import org.apache.openjpa.persistence.PersistenceException;\n+//import org.apache.openjpa.persistence.PersistenceException;\n import org.apache.openjpa.writebehind.WriteBehindConfigurationException;\n \n \n@@ -50,19 +51,14 @@ public void testInvalidConfiguration01() {\n         try {\n             emf01 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n             fail(\"testInvalidConfiguration01: Exception expected but not thrown\");\n-        }\n-        catch (ArgumentException ae) {\n-        }\n-        catch (PersistenceException pe) {\n-        }\n-        catch (WriteBehindConfigurationException wbce) {\n-        }\n-        catch (Exception e) {\n+        } catch (ArgumentException ae) {\n+            // prior behavior - spec api returned runtime exceptions as-is\n+        } catch (PersistenceException pe) {\n+            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n+        } catch (Exception e) {\n             fail(\"testInvalidConfiguration01: Caught unexpected exception: \" + e);\n             e.printStackTrace();\n-        }\n-        finally {\n-            assertNull(emf01);\n+        } finally {\n             if (emf01 != null) {\n                 emf01.close();\n             }\n@@ -83,19 +79,14 @@ public void testInvalidConfiguration02() {\n         try {\n             emf02 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n             fail(\"testInvalidConfiguration02: Exception expected but not thrown\");\n-        }\n-        catch (ArgumentException ae) {\n-        }\n-        catch (PersistenceException pe) {\n-        }\n-        catch (WriteBehindConfigurationException wbce) {\n-        }\n-        catch (Exception e) {\n+        } catch (ArgumentException ae) {\n+            // prior behavior - spec api returned runtime exceptions as-is\n+        } catch (PersistenceException pe) {\n+            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n+        } catch (Exception e) {\n             fail(\"testInvalidConfiguration02: Caught unexpected exception: \" + e);\n             e.printStackTrace();\n-        }\n-        finally {\n-            assertNull(emf02);\n+        } finally {\n             if (emf02 != null) {\n                 emf02.close();\n             }\n@@ -116,19 +107,14 @@ public void testInvalidConfiguration03() {\n         try {\n             emf03 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n             fail(\"testInvalidConfiguration03: Exception not thrown\");\n-        }\n-        catch (ArgumentException ae) {\n-        }\n-        catch (PersistenceException pe) {\n-        }\n-        catch (WriteBehindConfigurationException wbce) {\n-        }\n-        catch (Exception e) {\n+        } catch (ArgumentException ae) {\n+            // prior behavior - spec api returned runtime exceptions as-is\n+        } catch (PersistenceException pe) {\n+            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n+        } catch (Exception e) {\n             fail(\"testInvalidConfiguration03: Caught unexpected exception: \" + e);\n             e.printStackTrace();\n-        }\n-        finally {\n-            assertNull(emf03);\n+        } finally {\n             if (emf03 != null) {\n                 emf03.close();\n             }\n@@ -148,19 +134,14 @@ public void testInvalidConfiguration04() {\n         try {\n             emf04 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n             fail(\"testInvalidConfiguration04: Exception not thrown\");\n-        }\n-        catch (ArgumentException ae) {\n-        }\n-        catch (PersistenceException pe) {\n-        }\n-        catch (WriteBehindConfigurationException wbce) {\n-        }\n-        catch (Exception e) {\n+        } catch (ArgumentException ae) {\n+            // prior behavior - spec api returned runtime exceptions as-is\n+        } catch (PersistenceException pe) {\n+            // new 2.0 behavior - Geronimo spec api wraps exceptions and tries all providers\n+        } catch (Exception e) {\n             fail(\"testInvalidConfiguration04: Caught unexpected exception: \" + e);\n             e.printStackTrace();\n-        }\n-        finally {\n-            assertNull(emf04);\n+        } finally {\n             if (emf04 != null) {\n                 emf04.close();\n             }\n@@ -181,12 +162,10 @@ public void testValidConfiguration01() {\n         map.put( \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\" );\n         try {\n             emf05 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-        }\n-        catch (Exception e) {\n+        } catch (Exception e) {\n             fail(\"testValidConfiguration01: Caught unexpected exception: \" + e);\n             e.printStackTrace();\n-        }\n-        finally {\n+        } finally {\n             assertNotNull(emf05);\n             if (emf05 != null) {\n                 emf05.close();\n@@ -208,12 +187,10 @@ public void testValidConfiguration02() {\n         map.put( \"openjpa.RuntimeUnenhancedClasses\", \"supported\" );\n         try {\n             emf06 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-        }\n-        catch (Exception e) {\n+        } catch (Exception e) {\n             fail(\"testValidConfiguration02: Caught unexpected exception: \" + e);\n             e.printStackTrace();\n-        }\n-        finally {\n+        } finally {\n             assertNotNull(emf06);\n             if (emf06 != null) {\n                 emf06.close();\n@@ -235,12 +212,10 @@ public void testValidConfiguration03() {\n         map.put( \"openjpa.RuntimeUnenhancedClasses\", \"warn\" );\n         try {\n             emf07 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n-        }\n-        catch (Exception e) {\n+        } catch (Exception e) {\n             fail(\"testValidConfiguration03: Caught unexpected exception: \" + e);\n             e.printStackTrace();\n-        }                                   \n-        finally {\n+        } finally {\n             assertNotNull(emf07);\n             if (emf07 != null) {\n                 emf07.close();"},{"sha":"41985c809b494d0153d0c9f8eb58f43b1427b864","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/02471ca7e75ee9360f249f67e255cd18e45c943f/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/02471ca7e75ee9360f249f67e255cd18e45c943f/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=02471ca7e75ee9360f249f67e255cd18e45c943f","patch":"@@ -494,7 +494,7 @@\n             <dependency>\n                 <groupId>org.apache.geronimo.specs</groupId>\n                 <artifactId>geronimo-jpa_2.0_spec</artifactId>\n-                <version>1.0-EA8-SNAPSHOT</version>\n+                <version>1.0-PFD2-SNAPSHOT</version>\n             </dependency>\n             <dependency>\n                 <groupId>org.apache.geronimo.specs</groupId>"}]}

