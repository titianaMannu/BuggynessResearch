{"sha":"02619a2514845c2663beb6c754f1e17d7d56cc04","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyNjE5YTI1MTQ4NDVjMjY2M2JlYjZjNzU0ZjFlMTdkN2Q1NmNjMDQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-07T19:31:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-07T19:31:35Z"},"message":"OPENJPA-1350:\nAdd synchronization in processRegisteredClasses to prevent unknown alias error. \nSubmitted by : Jody Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@888100 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"328f3c7bb6be05f7696862aa951c74e15241956b","url":"https://api.github.com/repos/apache/openjpa/git/trees/328f3c7bb6be05f7696862aa951c74e15241956b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/02619a2514845c2663beb6c754f1e17d7d56cc04","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/02619a2514845c2663beb6c754f1e17d7d56cc04","html_url":"https://github.com/apache/openjpa/commit/02619a2514845c2663beb6c754f1e17d7d56cc04","comments_url":"https://api.github.com/repos/apache/openjpa/commits/02619a2514845c2663beb6c754f1e17d7d56cc04/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"945ca9a948e08389497048ab6fe564cbff3ce58f","url":"https://api.github.com/repos/apache/openjpa/commits/945ca9a948e08389497048ab6fe564cbff3ce58f","html_url":"https://github.com/apache/openjpa/commit/945ca9a948e08389497048ab6fe564cbff3ce58f"}],"stats":{"total":289,"additions":277,"deletions":12},"files":[{"sha":"276d13fa699381611f74389848c73a900f42c2d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":44,"deletions":12,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/02619a2514845c2663beb6c754f1e17d7d56cc04/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/02619a2514845c2663beb6c754f1e17d7d56cc04/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=02619a2514845c2663beb6c754f1e17d7d56cc04","patch":"@@ -34,21 +34,22 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.enhance.DynamicPersistenceCapable;\n import org.apache.openjpa.enhance.PCRegistry;\n-import org.apache.openjpa.enhance.PCRegistry.RegisterClassListener;\n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.enhance.DynamicPersistenceCapable;\n+import org.apache.openjpa.enhance.PCRegistry.RegisterClassListener;\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAId;\n-import org.apache.openjpa.util.ImplHelper;\n+\n import serp.util.Strings;\n \n /**\n@@ -131,6 +132,7 @@\n \n     // we buffer up any classes that register themselves to prevent\n     // reentrancy errors if classes register during a current parse (common)\n+    private boolean _registeredEmpty = true;\n     private final Collection _registered = new ArrayList();\n \n     // set of metadatas we're in the process of resolving\n@@ -268,7 +270,7 @@ else if (on)\n             _sourceMode |= mode;\n         else\n             _sourceMode &= ~mode;\n-    }\n+    } \n \n     /**\n      * Return the metadata for the given class.\n@@ -1297,6 +1299,7 @@ public void register(Class cls) {\n         // buffer registered classes until an oid metadata request is made,\n         // at which point we'll parse everything in the buffer\n         synchronized (_registered) {\n+            _registeredEmpty = false;\n             _registered.add(cls);\n         }\n     }\n@@ -1317,19 +1320,50 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n     }\n \n     /**\n-     * Updates our datastructures with the latest registered classes.\n+     * Updates our datastructures with the latest registered classes. This method will only block\n+     * when there are class registrations waiting to be processed. \n+     * \n+     * @return the list of classes that was processed due to this method call.\n      */\n     Class[] processRegisteredClasses(ClassLoader envLoader) {\n+        Class[] res = EMPTY_CLASSES;\n+        if (_registeredEmpty == false) {\n+            // The reason that we're locking on this and _registered is that this\n+            // class has locking semantics such that we always need to lock 'this', then [x].\n+            // This method can result in processRegisteredClass(..) being called and if we didn't\n+            // lock on 'this' we could cause a deadlock. ie: One thread coming in on getSequenceMetaData(..) \n+            // and another on getMetaData(String , ClassLoader , boolean ) .\n+            synchronized(this){\n+                synchronized(_registered){\n+                    // Check again, it is possible another thread already processed.\n+                    if (_registeredEmpty == false) {\n+                        res = processRegisteredClassesInternal(envLoader);\n+                        if (_registered.size() == 0) {\n+                            // It is possible that we failed to register a class and it was added back into\n+                            // our _registered class list to try again later. @see\n+                            // OpenJPAConfiguration#getRetryClassRegistration\n+                            _registeredEmpty = true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return res;\n+    }\n+         \n+    /**\n+     * Private worker method that processes the registered classes list. No locking is performed in this\n+     * method as the caller needs to hold a lock on _registered.\n+     */\n+    private Class[] processRegisteredClassesInternal(ClassLoader envLoader) {\n+        // Probably overkill\n         if (_registered.isEmpty())\n             return EMPTY_CLASSES;\n \n         // copy into new collection to avoid concurrent mod errors on reentrant\n         // registrations\n-        Class[] reg;\n-        synchronized (_registered) {\n-            reg = (Class[]) _registered.toArray(new Class[_registered.size()]);\n-            _registered.clear();\n-        }\n+        Class[] reg = (Class[]) _registered.toArray(new Class[_registered.size()]);\n+        _registered.clear();\n \n         Collection pcNames = getPersistentTypeNames(false, envLoader);\n         Collection failed = null;\n@@ -1355,9 +1389,7 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n             }\n         }\n         if (failed != null) {\n-            synchronized (_registered) {\n                 _registered.addAll(failed);\n-            }\n         }\n         return reg;\n     }"},{"sha":"3cae4a0e768a33817cc12b18640c982f4ef98679","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/MdrTestEntity.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/02619a2514845c2663beb6c754f1e17d7d56cc04/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/MdrTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/02619a2514845c2663beb6c754f1e17d7d56cc04/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/MdrTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/MdrTestEntity.java?ref=02619a2514845c2663beb6c754f1e17d7d56cc04","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+@NamedQueries( \n+    { \n+        @NamedQuery(name = \"query\", query = \"SELECT p FROM MdrTestEntity p\")\n+    }\n+)\n+public class MdrTestEntity {\n+    @Id\n+    int id;\n+\n+    @ManyToOne(cascade = CascadeType.MERGE)\n+    MdrTestEntity manyToOne;\n+\n+    @OneToMany\n+    List<MdrTestEntity> oneToMany;\n+}"},{"sha":"197acac4154327cabf39d64d8a66555a06527d6f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/02619a2514845c2663beb6c754f1e17d7d56cc04/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/02619a2514845c2663beb6c754f1e17d7d56cc04/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java?ref=02619a2514845c2663beb6c754f1e17d7d56cc04","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestMetaDataRepository extends SingleEMFTestCase {\n+    private final int threads = 20;\n+    public static boolean UnloadedEntityLoaded = false;\n+    @Override\n+    public void setUp() throws Exception {\n+        // Need to enable trace to slow down first thread to force timing condition.\n+        setUp(MdrTestEntity.class,\"openjpa.Log\",\"MetaData=trace\");\n+    }\n+\n+    public void testEntityLoading() throws Exception {\n+        EntityManager em = null;\n+        try{\n+            emf.close();\n+            String unloadedClass = \"org.apache.openjpa.persistence.meta.UnloadedEntity\";\n+            setUp(\"openjpa.MetaDataFactory\",\"jpa(Types=\"+unloadedClass+\")\");\n+            assertFalse(UnloadedEntityLoaded);\n+            em = emf.createEntityManager();\n+            assertTrue(UnloadedEntityLoaded);\n+        }finally{\n+            em.close();\n+        }\n+    }\n+\n+    /**\n+     * This method tests a timing window where more than one thread requests MetaData using an alias\n+     * at the same time. All threads should get data back and no threads should receive an\n+     * exception.\n+     */\n+    public void testMultiThreadGetMetaDataAlias() throws Exception {\n+        try {\n+            \n+            List<Worker> workers = new ArrayList<Worker>();\n+            Set<Exception> exceptions = new HashSet<Exception>();\n+            for (int i = 0; i < threads; i++) {\n+                Worker w = new Worker(emf);\n+                workers.add(w);\n+            }\n+            for (Worker w : workers) {\n+                w.start();\n+            }\n+            for (Worker w : workers) {\n+                w.join();\n+                Exception e = w.getException();\n+                if (e != null) {\n+                    exceptions.add(w.getException());\n+                }\n+            }\n+            assertTrue(\"Caught \"  + exceptions.toString(), exceptions.size() == 0);\n+        } finally {\n+            if (emf != null) {\n+                emf.close();\n+            }\n+        }\n+    }\n+\n+    class Worker extends Thread {\n+        OpenJPAEntityManagerFactorySPI emf;\n+        OpenJPAEntityManagerSPI em;\n+        MetaDataRepository repo;\n+        Exception ex;\n+\n+        Worker(EntityManagerFactory e) {\n+            emf = (OpenJPAEntityManagerFactorySPI) e;\n+            em = emf.createEntityManager();\n+            repo = em.getConfiguration().getMetaDataRepositoryInstance();\n+        }\n+\n+        Exception getException() {\n+            return ex;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                repo.getMetaData(\"MdrTestEntity\", Thread.currentThread().getContextClassLoader(), true);\n+            } catch (Exception e) {\n+                ex = e;\n+                e.printStackTrace();\n+            } finally {\n+                em.close();\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"1db629079481e39c547e71e502f83364ac447772","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/UnloadedEntity.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/02619a2514845c2663beb6c754f1e17d7d56cc04/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/UnloadedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/02619a2514845c2663beb6c754f1e17d7d56cc04/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/UnloadedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/UnloadedEntity.java?ref=02619a2514845c2663beb6c754f1e17d7d56cc04","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class UnloadedEntity {\n+    // This block calls back to the testcase so we can detect if it was loaded.\n+    static { \n+        TestMetaDataRepository.UnloadedEntityLoaded = true;\n+    }\n+    @Basic\n+    private String implClassAName;\n+    \n+    @Id \n+    @GeneratedValue\n+    private int id;\n+    \n+    @Basic\n+    private int intFieldSup;\n+    \n+    public void setImplClassAName(String implClassAName) {\n+        this.implClassAName = implClassAName;\n+    }\n+\n+    public String getImplClassAName() {\n+        return implClassAName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";implClassAName=\" + implClassAName + \n+            \";intFieldSup=\" + intFieldSup+ \";id=\"+id;\n+    }\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+}"}]}

