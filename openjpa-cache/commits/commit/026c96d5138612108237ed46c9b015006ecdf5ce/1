{"sha":"026c96d5138612108237ed46c9b015006ecdf5ce","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyNmM5NmQ1MTM4NjEyMTA4MjM3ZWQ0NmM5YjAxNTAwNmVjZGY1Y2U=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-11T20:28:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-11T20:28:49Z"},"message":"OPENJPA-656: raise error messages with connection parameters on connect failure\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676073 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71b84359dc32324ac2e92f64e8facf1a0baef3a3","url":"https://api.github.com/repos/apache/openjpa/git/trees/71b84359dc32324ac2e92f64e8facf1a0baef3a3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/026c96d5138612108237ed46c9b015006ecdf5ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/026c96d5138612108237ed46c9b015006ecdf5ce","html_url":"https://github.com/apache/openjpa/commit/026c96d5138612108237ed46c9b015006ecdf5ce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/026c96d5138612108237ed46c9b015006ecdf5ce/comments","author":null,"committer":null,"parents":[{"sha":"cc85528f693f18b625aa6bfc94c19583028e4582","url":"https://api.github.com/repos/apache/openjpa/commits/cc85528f693f18b625aa6bfc94c19583028e4582","html_url":"https://github.com/apache/openjpa/commit/cc85528f693f18b625aa6bfc94c19583028e4582"}],"stats":{"total":231,"additions":217,"deletions":14},"files":[{"sha":"b89c58df63d72e67ec5a7f97bc63f41721b8682b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":17,"deletions":12,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/026c96d5138612108237ed46c9b015006ecdf5ce/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/026c96d5138612108237ed46c9b015006ecdf5ce/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=026c96d5138612108237ed46c9b015006ecdf5ce","patch":"@@ -26,6 +26,7 @@\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n+\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -45,7 +46,6 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.OpenJPAException;\n-import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -59,7 +59,7 @@\n public class DataSourceFactory {\n \n     private static final Localizer _loc = Localizer.forPackage\n-        (DataSourceFactory.class);\n+    \t (DataSourceFactory.class);\n \n     /**\n      * Create a datasource using the given configuration.\n@@ -120,7 +120,7 @@ public static DataSource newDataSource(JDBCConfiguration conf,\n         catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n-            throw new StoreException(e).setFatal(true);\n+            throw newConnectException(conf, factory2, e);\n         }\n \n         // not a driver or a data source; die\n@@ -175,7 +175,7 @@ public static DecoratingDataSource decorateDataSource(DataSource ds,\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n-            throw new StoreException(e).setFatal(true);\n+            throw newConnectException(conf, factory2, e);\n         }\n     }\n \n@@ -237,14 +237,7 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n \n             return ds;\n         } catch (Exception e) {\n-        \tthrow new StoreException(_loc.get(\"conn-failed\", factory2 \n-        \t  ? new Object[]{conf.getConnection2DriverName(), \n-        \t\t\t         conf.getConnection2URL(), \n-        \t\t\t         conf.getConnection2Properties()}\n-        \t  : new Object[]{conf.getConnectionDriverName(),\n-        \t\t             conf.getConnectionURL(), \n-        \t\t             conf.getConnectionProperties()}),\n-        \t\t             e);\n+        \tthrow newConnectException(conf, factory2, e);\n         } finally {\n             if (conn != null)\n                 try {\n@@ -255,6 +248,18 @@ public static DecoratingDataSource installDBDictionary(DBDictionary dict,\n                 }\n         }\n     }\n+    \n+    static OpenJPAException newConnectException(JDBCConfiguration conf, \n+    \t\tboolean factory2, Exception cause) {\n+    \treturn new UserException(_loc.get(\"conn-failed\", factory2 \n+          \t  ? new Object[]{conf.getConnection2DriverName(), \n+          \t\t\t         conf.getConnection2URL(), \n+          \t\t\t         conf.getConnection2Properties()}\n+          \t  : new Object[]{conf.getConnectionDriverName(),\n+          \t\t             conf.getConnectionURL(), \n+          \t\t             conf.getConnectionProperties()}),\n+          \t\t             cause).setFatal(true);\n+    }\n \n     /**\n      * Return a data source with the given user name and password"},{"sha":"777d732f5d141874628384b67a746f11676104a9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/026c96d5138612108237ed46c9b015006ecdf5ce/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/026c96d5138612108237ed46c9b015006ecdf5ce/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=026c96d5138612108237ed46c9b015006ecdf5ce","patch":"@@ -77,8 +77,8 @@ public Connection getConnection(Properties props)\n         throws SQLException {\n     \tConnection con = getDriver().connect(_connectionURL, props);\n     \tif (con == null) {\n-        \tthrow new UserException(_loc.get(\"conn-failed\",\n-        \t\t\t_connectionDriverName, _connectionURL, props));\n+        \tthrow new SQLException(_loc.get(\"conn-failed\",\n+        \t\t\t_connectionDriverName, _connectionURL, props).getMessage());\n         }\n         return con;\n     }"},{"sha":"b40f614a6e9f9a8b58991cb6ad4053542204c8ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/026c96d5138612108237ed46c9b015006ecdf5ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","raw_url":"https://github.com/apache/openjpa/raw/026c96d5138612108237ed46c9b015006ecdf5ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java?ref=026c96d5138612108237ed46c9b015006ecdf5ce","patch":"@@ -0,0 +1,198 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import java.util.Properties;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import javax.persistence.Persistence;\r\n+import javax.persistence.PersistenceException;\r\n+\r\n+import junit.framework.AssertionFailedError;\r\n+import junit.framework.TestCase;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.util.UserException;\r\n+\r\n+/**\r\n+ * Verifies appropriate exception is thrown when an incorrect protocol or\r\n+ * sub-protocol is specified in the JDBC URL. Per the JDBC specification, the\r\n+ * Driver should return a null connection upon getConnection() when a bad driver\r\n+ * is specified on the URL. OpenJPA must be able to handle this condition and\r\n+ * return an appropriate message.\r\n+ * \r\n+ * OpenJPA JIRA: {@link http://issues.apache.org/jira/browse/OPENJPA-656}\r\n+ * \r\n+ * @author Jeremy Bauer\r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class TestBadJdbcUrl extends TestCase {\r\n+\tpublic static final String GOOD_URL = \"jdbc:derby:target/database/openjpa-derby-database;create=true\";\r\n+\tpublic static final String GOOD_DRIVER = \"org.apache.derby.jdbc.EmbeddedDriver\";\r\n+\tpublic static final String GOOD_DATASOURCE = \"org.apache.commons.dbcp.BasicDataSource\";\r\n+\r\n+\tpublic static final String BAD_DRIVER = \"bad.driver\";\r\n+\tpublic static final String BAD_URL_PROTOCOL = \"bad.url.protocol\";\r\n+\tpublic static final String BAD_URL_SUBPROTOCOL = \"bad.url.sub.protocol\";\r\n+\tpublic static final String BAD_CONN_PROPS = \"connectionUrl=bad,connectionDriver=bad\";\r\n+\r\n+\t/*\r\n+\t * Test specifying URL with bad protocol but a valid Driver.\r\n+\t */\r\n+\tpublic void testBadUrlProtocolValueWithValidDriverClass() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", GOOD_DRIVER);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", BAD_URL_PROTOCOL);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tUserException.class, GOOD_DRIVER, BAD_URL_PROTOCOL);\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test specifying URL with bad protocol but a valid DataSource.\r\n+\t */\r\n+\tpublic void testBadUrlProtocolValueWithValidDataSource() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", GOOD_DATASOURCE);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", BAD_URL_PROTOCOL);\r\n+\t\tp.put(\"openjpa.ConnectionProperties\", BAD_CONN_PROPS);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tnull, (String[])null);\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test specifying URL with bad sub-protocol but a valid Driver.\r\n+\t */\r\n+\tpublic void testBadUrlSubprotocolValueWithValidDriverClass() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", GOOD_DRIVER);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", BAD_URL_SUBPROTOCOL);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tUserException.class, GOOD_DRIVER, BAD_URL_SUBPROTOCOL);\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test specifying URL with bad sub-protocol but a valid Driver.\r\n+\t */\r\n+\tpublic void testBadUrlSubprotocolValueWithValidDataSource() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", GOOD_DRIVER);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", BAD_URL_SUBPROTOCOL);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tUserException.class, GOOD_DRIVER, BAD_URL_SUBPROTOCOL);\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test specifying Valid URL with an invalid Driver.\r\n+\t */\r\n+\tpublic void testValidUrlWithInvalidDriver() {\r\n+\t\tProperties p = new Properties();\r\n+\t\tp.put(\"openjpa.ConnectionDriverName\", BAD_DRIVER);\r\n+\t\tp.put(\"openjpa.ConnectionURL\", GOOD_URL);\r\n+\t\tverifyConnectException(p, PersistenceException.class,\r\n+\t\t\t\tUserException.class, GOOD_URL, BAD_DRIVER);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Attempts to connect with given properties and analyze exception for the\r\n+\t * existence of given target exception and error message strings.\r\n+\t * \r\n+\t * @param props\r\n+\t *            the properties to initialize the persistence unit\r\n+\t * @param target\r\n+\t *            the type expected exception to be raised.\r\n+\t * @param nested\r\n+\t *            the type expected nested exception. null implies not to look\r\n+\t *            for any.\r\n+\t * @param keys\r\n+\t *            the strings that must occur in the exception message.\r\n+\t */\r\n+\tprivate void verifyConnectException(Properties props, Class targetType,\r\n+\t\t\tClass nestedType, String... keys) {\r\n+\t\tEntityManagerFactory emf = null;\r\n+\t\tEntityManager em = null;\r\n+\t\ttry {\r\n+\t\t\temf = Persistence.createEntityManagerFactory(\"test\", props);\r\n+\t\t\tem = emf.createEntityManager();\r\n+\t\t\tOpenJPAPersistence.cast(em).getConnection();\r\n+\t\t\tfail(\"Should have caught a \" + targetType.getName());\r\n+\t\t} catch (Throwable t) {\r\n+\t\t\tassertException(t, targetType, nestedType);\r\n+\t\t\tassertMessage(t, keys);\r\n+\t\t} finally {\r\n+\t\t\tif (em != null)\r\n+\t\t\t\tem.close();\r\n+\t\t\tif (emf != null)\r\n+\t\t\t\temf.close();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Asserts that the given targetType is assignable from actual. Asserts that\r\n+\t * the nestedType is a nested within the given actual Throwable\r\n+\t * \r\n+\t * @param actual\r\n+\t * @param targetType\r\n+\t * @param nestedType\r\n+\t */\r\n+\tvoid assertException(final Throwable actual, Class targetType,\r\n+\t\t\tClass nestedTargetType) {\r\n+\t\tif (targetType == null)\r\n+\t\t\treturn;\r\n+\t\tassertNotNull(actual);\r\n+\t\tClass actualType = actual.getClass();\r\n+\t\tif (!targetType.isAssignableFrom(actualType)) {\r\n+\t\t\tactual.printStackTrace();\r\n+\t\t\tfail(targetType.getName() + \" is not assignable from \"\r\n+\t\t\t\t\t+ actualType.getName());\r\n+\t\t}\r\n+\r\n+\t\tif (nestedTargetType != null) {\r\n+\t\t\tThrowable nested = actual.getCause();\r\n+\t\t\tClass nestedType = (nested == null) ? null : nested.getClass();\r\n+\t\t\twhile (nestedType != null) {\r\n+\t\t\t\tif (nestedType.isAssignableFrom(nestedTargetType)) {\r\n+\t\t\t\t\treturn;\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tThrowable next = nested.getCause();\r\n+\t\t\t\t\tif (next == null || next == nested)\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tnestedType = next.getClass();\r\n+\t\t\t\t\tnested     = next;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tactual.printStackTrace();\r\n+\t\t\tfail(\"No nested type \" + nestedTargetType + \" in \" + actual);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Assert that each of given keys are present in the message of the given\r\n+\t * Throwable.\r\n+\t */\r\n+\tvoid assertMessage(Throwable actual, String... keys) {\r\n+\t\tif (actual == null || keys == null)\r\n+\t\t\treturn;\r\n+\t\tString message = actual.getMessage();\r\n+\t\tfor (String key : keys) {\r\n+\t\t\tassertTrue(key + \" is not in \" + message, message.contains(key));\r\n+\t\t}\r\n+\t}\r\n+}\r"}]}

