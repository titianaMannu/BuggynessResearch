{"sha":"0291158f589290114dc031614f9595e81bc30b10","node_id":"MDY6Q29tbWl0MjA2MzY0OjAyOTExNThmNTg5MjkwMTE0ZGMwMzE2MTRmOTU5NWU4MWJjMzBiMTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-19T20:37:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-19T20:37:45Z"},"message":"OPENJPA-1350: Test case (by Rick Curtis) to test early registration of type alias to avoid/minimze risk of multi-threaded repository initialization. Original change was revision 826944\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@882285 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae787655e7d7938329a02a185585dc69ec95dd30","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae787655e7d7938329a02a185585dc69ec95dd30"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0291158f589290114dc031614f9595e81bc30b10","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0291158f589290114dc031614f9595e81bc30b10","html_url":"https://github.com/apache/openjpa/commit/0291158f589290114dc031614f9595e81bc30b10","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0291158f589290114dc031614f9595e81bc30b10/comments","author":null,"committer":null,"parents":[{"sha":"c3a856faa022f43d8fe9b30d954edd46e1401131","url":"https://api.github.com/repos/apache/openjpa/commits/c3a856faa022f43d8fe9b30d954edd46e1401131","html_url":"https://github.com/apache/openjpa/commit/c3a856faa022f43d8fe9b30d954edd46e1401131"}],"stats":{"total":106,"additions":106,"deletions":0},"files":[{"sha":"9899d8c80ef40c7f3f1f58e2b0fc4b68fc03810e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestQueryTypeAliasRegistration.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/0291158f589290114dc031614f9595e81bc30b10/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestQueryTypeAliasRegistration.java","raw_url":"https://github.com/apache/openjpa/raw/0291158f589290114dc031614f9595e81bc30b10/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestQueryTypeAliasRegistration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestQueryTypeAliasRegistration.java?ref=0291158f589290114dc031614f9595e81bc30b10","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestQueryTypeAliasRegistration extends SingleEMFTestCase {\n+    private final int threads = 100;\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(MdrTestEntity.class);\n+        assertNotNull(emf);\n+        // Create the Entity which we're going to try to get MetaData for using\n+        // an alias. Do this to ensure that it has been registered to the PCRegistry.\n+        new MdrTestEntity();\n+    }\n+\n+    /**\n+     * This method tests a timing window where more than one thread requests MetaData using an alias\n+     * at the same time. All threads should get data back and no threads should receive an\n+     * exception.\n+     */\n+    public void testMultiThreadGetMetaDataAlias() throws Exception {\n+        try {\n+            List<Worker> workers = new ArrayList<Worker>();\n+            Set<Exception> exceptions = new HashSet<Exception>();\n+            for (int i = 0; i < threads; i++) {\n+                Worker w = new Worker(emf);\n+                workers.add(w);\n+            }\n+            for (Worker w : workers) {\n+                w.start();\n+            }\n+            for (Worker w : workers) {\n+                w.join();\n+                Exception e = w.getException();\n+                if (e != null) {\n+                    exceptions.add(w.getException());\n+                }\n+            }\n+            assertTrue(\"Caught \"  + exceptions.toString(), exceptions.size() == 0);\n+        } finally {\n+            if (emf != null) {\n+                emf.close();\n+            }\n+        }\n+    }\n+\n+    class Worker extends Thread {\n+        OpenJPAEntityManagerFactorySPI emf;\n+        OpenJPAEntityManagerSPI em;\n+        MetaDataRepository repo;\n+        Exception ex;\n+\n+        Worker(EntityManagerFactory e) {\n+            emf = (OpenJPAEntityManagerFactorySPI) e;\n+            // Create an EM here because that triggers registering the MDR as a class registration\n+            // listener with the PCRegistry.\n+            em = emf.createEntityManager();\n+            repo = em.getConfiguration().getMetaDataRepositoryInstance();\n+        }\n+\n+        Exception getException() {\n+            return ex;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                repo.getMetaData(\"MdrTestEntity\", Thread.currentThread().getContextClassLoader(), true);\n+            } catch (Exception e) {\n+                ex = e;\n+                e.printStackTrace();\n+            } finally {\n+                em.close();\n+            }\n+        }\n+    }\n+}"}]}

