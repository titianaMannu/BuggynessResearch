{"sha":"037a45d7e4a7b57146b33c70598b9376374f21de","node_id":"MDY6Q29tbWl0MjA2MzY0OjAzN2E0NWQ3ZTRhN2I1NzE0NmIzM2M3MDU5OGI5Mzc2Mzc0ZjIxZGU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-19T01:03:35Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-19T01:03:35Z"},"message":"Add visitor pattern to query expression trees, and redo a couple of our existing\ntree interrogation methods to use it.  This will allow us to add more \nvalidations at query compilation time (we're missing some that are required for\nJDO 2, for example) without having to expand the API of every query \nexpression/value implementation, in addition to just being more flexible \noverall.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@432778 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b138c3e7d72c4b2902658b270912ca902c1a5ee0","url":"https://api.github.com/repos/apache/openjpa/git/trees/b138c3e7d72c4b2902658b270912ca902c1a5ee0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/037a45d7e4a7b57146b33c70598b9376374f21de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/037a45d7e4a7b57146b33c70598b9376374f21de","html_url":"https://github.com/apache/openjpa/commit/037a45d7e4a7b57146b33c70598b9376374f21de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/037a45d7e4a7b57146b33c70598b9376374f21de/comments","author":null,"committer":null,"parents":[{"sha":"eb2b5e65516d55cb7fd75c92f7a70c0216f28104","url":"https://api.github.com/repos/apache/openjpa/commits/eb2b5e65516d55cb7fd75c92f7a70c0216f28104","html_url":"https://github.com/apache/openjpa/commit/eb2b5e65516d55cb7fd75c92f7a70c0216f28104"}],"stats":{"total":1103,"additions":589,"deletions":514},"files":[{"sha":"171598b502eff7f750d6f582043a6153ba2e5fa3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -19,17 +19,22 @@\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n- * Aggregate listener that evaluates to a value.\n+ * Abstract value for easy extension.\n  *\n  * @author Marc Prud'hommeaux\n  */\n abstract class AbstractVal\n     implements Val {\n \n-    private static final String TRUE = \"1 = 1\";\n-    private static final String FALSE = \"1 <> 1\";\n+    protected static final String TRUE = \"1 = 1\";\n+    protected static final String FALSE = \"1 <> 1\";\n+\n+    public boolean isVariable() {\n+        return false;\n+    }\n \n     public void appendIsEmpty(SQLBuffer sql, Select sel, JDBCStore store,\n         Object[] params, JDBCFetchConfiguration fetch) {\n@@ -57,5 +62,10 @@ public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n         Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(\"1\");\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"153ff450399922e0c46a7738f8cf02564883951f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -34,8 +35,7 @@\n  * @author Abe White\n  */\n class Aggregate\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     private final JDBCAggregateListener _listener;\n     private final Val _arg;\n@@ -145,12 +145,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        if (_arg != null)\n-            return _arg.hasVariable(var);\n-        return false;\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         if (_arg != null)\n@@ -189,4 +183,11 @@ public void appendTo(SQLBuffer sql, int index, Select sel, JDBCStore store,\n             new FilterValueImpl(_arg, sel, store, params, fetch)\n         };\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        if (_arg != null)\n+            _arg.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"2bb61de77f61713575833b2d63cbc7ed2a1e8cfc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Combines two expressions.\n@@ -81,11 +82,10 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return _exp1.hasContainsExpression() || _exp2.hasContainsExpression();\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _exp1.hasVariable(var) || _exp2.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _exp1.acceptVisit(visitor);\n+        _exp2.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"c7dff03ffba42177070cf1679c61875de38f6d7a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.Arguments;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.meta.ClassMetaData;\n \n@@ -31,7 +32,8 @@\n  * @author Abe White\n  */\n public class Args\n-    implements Val, Arguments {\n+    extends AbstractVal\n+    implements Arguments {\n \n     private final Val[] _args;\n     private Joins _joins = null;\n@@ -130,13 +132,6 @@ public Object load(Result res, JDBCStore store,\n         return null;\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        for (int i = 0; i < _args.length; i++)\n-            if (_args[i].hasVariable(var))\n-                return true;\n-        return false;\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         for (int i = 0; i < _args.length; i++)\n@@ -175,4 +170,11 @@ public void appendIsNull(SQLBuffer sql, Select sel,\n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        for (int i = 0; i < _args.length; i++)\n+            _args[i].acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"9222dbf2aa3b75ff57e8aeb21a94bf8541a230bf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Combines a bind variable expression with another.\n@@ -69,11 +70,10 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return true;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _exp.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _bind.acceptVisit(visitor);\n+        _exp.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"2dd6c2bb9a527fc589ff349745f75147bd541342","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Binds a variable to a value. Typically, the {@link #initialize} and\n@@ -71,11 +72,9 @@ public Joins getJoins() {\n         return _var.getJoins();\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _var == var;\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _var.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"2ff0965f465a563c170b6ea2daa234ef075d973a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -108,14 +109,6 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _val1.hasVariable(var) || _val2.hasVariable(var);\n-    }\n-\n     /**\n      * Append the SQL for the comparison.\n      */\n@@ -131,4 +124,11 @@ protected abstract void appendTo(SQLBuffer buf, Select sel,\n     protected boolean isDirectComparison() {\n         return true;\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"4a9efaaed3a65b8f46806c1e71e5388a73697710","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -91,11 +92,10 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _val1.hasVariable(var) || _val2.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"14149b8ab762e3674adaf186d958fad487d3de98","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -35,8 +36,7 @@\n  * @author Marc Prud'hommeaux\n  */\n class Concat\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     private final Val _val1;\n     private final Val _val2;\n@@ -137,10 +137,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return _val1.hasVariable(var) || _val2.hasVariable(var);\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         _val1.calculateValue(sel, store, params, null, fetch);\n@@ -167,5 +163,12 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n         _val2.appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(_part3);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"59dbf2000d3066ed434761d52f185e581030757c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","status":"modified","additions":12,"deletions":19,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -38,7 +38,8 @@\n  * @author Abe White\n  */\n abstract class Const\n-    implements Val, Constant {\n+    extends AbstractVal\n+    implements Constant {\n \n     private ClassMetaData _meta = null;\n     private Column[] _cols = null;\n@@ -51,10 +52,6 @@ public void setMetaData(ClassMetaData meta) {\n         _meta = meta;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     /**\n      * Return the column for the value at the specified index, or null.\n      */\n@@ -152,10 +149,6 @@ public Object load(Result res, JDBCStore store,\n         return Filters.convert(res.getObject(this, code, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return false;\n-    }\n-\n     public int length() {\n         return 1;\n     }\n@@ -164,22 +157,22 @@ public void appendIsEmpty(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         Object obj = getValue();\n         if (obj instanceof Collection && ((Collection) obj).isEmpty())\n-            sql.append(\"1 = 1\");\n+            sql.append(TRUE);\n         else if (obj instanceof Map && ((Map) obj).isEmpty())\n-            sql.append(\"1 = 1\");\n+            sql.append(TRUE);\n         else\n-            sql.append(\"1 <> 1\");\n+            sql.append(FALSE);\n     }\n \n     public void appendIsNotEmpty(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         Object obj = getValue();\n         if (obj instanceof Collection && ((Collection) obj).isEmpty())\n-            sql.append(\"1 <> 1\");\n+            sql.append(FALSE);\n         else if (obj instanceof Map && ((Map) obj).isEmpty())\n-            sql.append(\"1 <> 1\");\n+            sql.append(FALSE);\n         else\n-            sql.append(\"1 = 1\");\n+            sql.append(TRUE);\n     }\n \n     public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n@@ -196,16 +189,16 @@ else if (obj instanceof Map)\n     public void appendIsNull(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (getSQLValue() == null)\n-            sql.append(\"1 = 1\");\n+            sql.append(TRUE);\n         else\n-            sql.append(\"1 <> 1\");\n+            sql.append(FALSE);\n     }\n \n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (getSQLValue() != null)\n-            sql.append(\"1 = 1\");\n+            sql.append(TRUE);\n         else\n-            sql.append(\"1 <> 1\");\n+            sql.append(FALSE);\n     }\n }"},{"sha":"2b7811800831cce4f89ad2aed1cb2f5ea1837bfe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Tests whether a value is an instance of a class.\n@@ -67,11 +68,9 @@ public Joins getJoins() {\n         return _const.getJoins();\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _const.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _const.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"52688597c319f06e20ec6d88830be65338763b8f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n \n@@ -175,4 +176,10 @@ public void clearParameters() {\n         _val = null;\n         _sqlVal = null;\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _constant.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"4f2a657ec6070553321c9d80a91854c150f3a80c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -59,8 +59,4 @@ public void initialize(Select sel, JDBCStore store,\n     protected boolean isDirectComparison() {\n         return false;\n     }\n-\n-    public boolean hasContainsExpression() {\n-        return true;\n-    }\n }"},{"sha":"722f382235dfd731b249b6ec9f4e6de93946cbc5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -35,7 +35,6 @@ public Count(Val val) {\n \n     public void initialize(Select sel, JDBCStore store, boolean nullTest) {\n         super.initialize(sel, store, nullTest);\n-\n         // join into related object if present\n         if (getVal()instanceof PCPath)\n             ((PCPath) getVal()).joinRelation();"},{"sha":"2b970370a18371ab2c7a955d3e7d86220acbd16a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * An empty expression.\n@@ -47,11 +48,8 @@ public Joins getJoins() {\n         return null;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return false;\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        visitor.exit(this);\n     }\n }"},{"sha":"db4ca2ed2ad76916162e184f26ba4ce4c85271ac","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Test if one string ends with another.\n@@ -116,12 +117,11 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _val1.hasVariable(var) || _val2.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n \n     /**"},{"sha":"067b17ac4cbee2d1ed5b35ffca02725dd0145a7e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -69,15 +69,4 @@ public void selectColumns(Select sel, JDBCStore store,\n      * that common joins are moved up the expression tree.\n      */\n     public Joins getJoins();\n-\n-    /**\n-     * Return true if this expression is or is made up of a contains expression.\n-     */\n-    public boolean hasContainsExpression();\n-\n-    /**\n-     * Return true if the expression or any subexpression uses the given\n-     * variable.\n-     */\n-    public boolean hasVariable(Variable var);\n }"},{"sha":"dad46f8c95503c800d1afe3574a98dc9aa82a133","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -159,11 +160,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return (_target != null && _target.hasVariable(var))\n-            || (_arg != null && _arg.hasVariable(var));\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         if (_target != null)\n@@ -209,6 +205,15 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n         };\n     }\n \n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter((Exp) this);\n+        if (_target != null)\n+            _target.acceptVisit(visitor);\n+        if (_arg != null)\n+            _arg.acceptVisit(visitor);\n+        visitor.exit((Exp) this);\n+    }\n+\n     //////////////////////\n     // Exp implementation\n     //////////////////////\n@@ -225,8 +230,4 @@ public void appendTo(SQLBuffer sql, Select sel, JDBCStore store,\n         sel.append(sql, getJoins());\n         clearParameters();\n     }\n-\n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n }"},{"sha":"75b8e4e4107eb5bec85d694a29a4de0b86eee722","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.ApplicationIds;\n@@ -41,8 +42,7 @@\n  * @author Abe White\n  */\n class GetObjectId\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (GetObjectId.class);\n@@ -69,10 +69,6 @@ public void setMetaData(ClassMetaData meta) {\n         _meta = meta;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return Object.class;\n     }\n@@ -159,10 +155,6 @@ public Object load(Result res, JDBCStore store,\n         return _path.load(res, store, true, fetch);\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return _path.hasVariable(var);\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         _path.calculateValue(sel, store, params, null, fetch);\n@@ -180,5 +172,11 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         _path.appendTo(sql, index, sel, store, params, fetch);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _path.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"3f66292f706055f646fd5935bed50ad6ada85ffa","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -0,0 +1,29 @@\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import org.apache.openjpa.kernel.exps.AbstractExpressionVisitor;\n+import org.apache.openjpa.kernel.exps.Expression;\n+import org.apache.openjpa.kernel.exps.Value;\n+\n+/**\n+ * Determines whether the visited expressions include a \"contains\" expression.\n+ * \n+ * @author Abe White\n+ */\n+class HasContainsExpressionVisitor \n+    extends AbstractExpressionVisitor {\n+\n+    private boolean _found = false;\n+\n+    /**\n+     * Whether a contains expression has been found.\n+     */\n+    public boolean foundContainsExpression() {\n+        return _found;\n+    }\n+    \n+    public void enter(Expression exp) {\n+        if (!_found)\n+            _found = exp instanceof ContainsExpression \n+                || exp instanceof BindVariableAndExpression;\n+    }\n+} "},{"sha":"7303faa486205517bb2215bcfbd19dd75a7894ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Tests whether a value is IN a collection.\n@@ -158,18 +159,17 @@ public Joins getJoins() {\n         return _val.getJoins();\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _const.hasVariable(var) || _val.hasVariable(var);\n-    }\n-\n     /**\n      * Return the collection to test for containment with.\n      */\n     protected Collection getCollection() {\n         return (Collection) _const.getValue();\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        _const.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"7a8daf77055799167f75bcea8c4b8da3cb37c3c1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Tests whether a value is IN a subquery.\n@@ -69,11 +70,10 @@ public Joins getJoins() {\n         return _val.getJoins();\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _val.hasVariable(var) || _sub.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        _sub.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"ebe192e1be37480a9ff085cb8633070c860c7094","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -33,8 +34,7 @@\n  * @author Abe White\n  */\n class IndexOf\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     private final Val _val1;\n     private final Val _val2;\n@@ -123,10 +123,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return _val1.hasVariable(var) || _val2.hasVariable(var);\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         _val1.calculateValue(sel, store, params, null, fetch);\n@@ -158,5 +154,12 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n \n         store.getDBDictionary().indexOf(sql, str, search, start);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"70e394aedae7c4cff9130ce919ef10905bbf9151","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.JavaTypes;\n \n /**\n@@ -143,12 +144,10 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _path.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _path.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }\n "},{"sha":"b4eeeda9e13d04da278e9a3062ce6cdce4f0e3e2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Tests whether the given value is empty.\n@@ -61,12 +62,10 @@ public void selectColumns(Select sel, JDBCStore store,\n     public Joins getJoins() {\n         return _val.getJoins();\n     }\n-\n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _val.hasVariable(var);\n+    \n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"c95478efd1fbaef710213797dddeab6b299d0fed","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Tests whether the given value is not empty.\n@@ -62,11 +63,9 @@ public Joins getJoins() {\n         return _val.getJoins();\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _val.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"8e55b8e4e6e52bda502ce434a480d079f2309ddd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -214,7 +214,10 @@ public Expression or(Expression exp1, Expression exp2) {\n \n     public Expression not(Expression exp) {\n         Exp e = (Exp) exp;\n-        if (e.hasContainsExpression())\n+        HasContainsExpressionVisitor visitor = \n+            new HasContainsExpressionVisitor();\n+        e.acceptVisit(visitor);\n+        if (visitor.foundContainsExpression())\n             return new NotContainsExpression(e);\n         return new NotExpression(e);\n     }"},{"sha":"132c38dc4fa508bcd2d4a6562d74d08d8fa78fb5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCStringContains.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCStringContains.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCStringContains.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCStringContains.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -26,8 +26,7 @@\n  * Tests if the target contains the given argument. The argument must be\n  * a constant.\n  *  Examples:<br />\n- * <code> \"address.street.ext:stringContains (\\\"main\\\")\"\n- * </code>\n+ * <code>\"address.street.ext:stringContains (\\\"main\\\")\"</code>\n  *\n  * @nojavadoc\n  * @deprecated Use <code>matches()</code> instead."},{"sha":"bb5c9cfa9d7c99a9adcf2c38ce2272a526d69aee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCWildcardMatch.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCWildcardMatch.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCWildcardMatch.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCWildcardMatch.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,8 +27,7 @@\n  * argument. The wildcard '?' is used to represent any single character,\n  * while '*' is used to represent any series of 0 or more characters.\n  *  Examples:<br />\n- * <code> \"address.street.ext:wildcardMatch (\\\"?ain*reet\\\")\"\n- * </code>\n+ * <code>\"address.street.ext:wildcardMatch (\\\"?ain*reet\\\")\"</code>\n  *\n  * @nojavadoc\n  * @deprecated Use <code>matches()</code> instead."},{"sha":"ddda5fb958b3d7450e0d759d4b2acb957317fcda","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import serp.util.Strings;\n \n /**\n@@ -123,11 +124,10 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _val.hasVariable(var) || _const.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        _const.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"0636342b96b166a78adceda2bea1bbd7f015badd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -33,8 +34,7 @@\n  * @author Abe White\n  */\n class Math\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     public static final String ADD = \"+\";\n     public static final String SUBTRACT = \"-\";\n@@ -134,10 +134,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return _val1.hasVariable(var) || _val2.hasVariable(var);\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         _val1.calculateValue(sel, store, params, _val2, fetch);\n@@ -159,5 +155,12 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n             new FilterValueImpl(_val1, sel, store, params, fetch),\n             new FilterValueImpl(_val2, sel, store, params, fetch));\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"8989c8e1eb45b111904b3b292b8b8731bd549c70","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Negates a contains expression using a subselect to make sure no\n@@ -76,11 +77,9 @@ public Joins getJoins() {\n         return null;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _exp.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _exp.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"56806e3fef173a264c36e84cca64527af69e42ee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Negates an expression.\n@@ -63,11 +64,9 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return _exp.hasContainsExpression();\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _exp.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _exp.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"6b681d67d237eb25235844306cc0644dc5c968cd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -24,6 +24,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n \n /**\n  * Combines two expressions.\n@@ -97,11 +98,10 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return _exp1.hasContainsExpression() || _exp2.hasContainsExpression();\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _exp1.hasVariable(var) || _exp2.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _exp1.acceptVisit(visitor);\n+        _exp2.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"7316d1224d1a213ad0a3059b522ebc5d36692b57","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -44,6 +44,7 @@\n  * @author Abe White\n  */\n class PCPath\n+    extends AbstractVal\n     implements JDBCPath {\n \n     private static final int PATH = 0;\n@@ -543,6 +544,9 @@ Object load(Result res, JDBCStore store, boolean pks,\n         return ret;\n     }\n \n+    /**\n+     * Whether the given variable appears in this path.\n+     */\n     public boolean hasVariable(Variable var) {\n         if (_actions == null)\n             return false;\n@@ -585,15 +589,15 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n     public void appendIsEmpty(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n-            sql.append(\"1 <> 1\");\n+            sql.append(FALSE);\n         else\n             _field.appendIsEmpty(sql, sel, _joins);\n     }\n \n     public void appendIsNotEmpty(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n-            sql.append(\"1 <> 1\");\n+            sql.append(FALSE);\n         else\n             _field.appendIsNotEmpty(sql, sel, _joins);\n     }\n@@ -609,15 +613,15 @@ public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n     public void appendIsNull(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n-            sql.append(\"1 <> 1\");\n+            sql.append(FALSE);\n         else\n             _field.appendIsNull(sql, sel, _joins);\n     }\n \n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n-            sql.append(\"1 = 1\");\n+            sql.append(TRUE);\n         else\n             _field.appendIsNotNull(sql, sel, _joins);\n     }"},{"sha":"4409dd5235c9a299ca6c3182e3cad017d2ae2b1c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLEmbed.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SQLEmbed.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,8 +27,7 @@\n  * Simple listener which embeds its SQL argument into the query. Listens\n  * on <code>sql</code>.\n  *  Example:<br />\n- * <code> \"price &lt; sql(\\\"(SELECT AVG (PRICE) FROM PRODUCT_TABLE)\\\")\"\n- * </code>\n+ * <code>\"price &lt; sql(\\\"(SELECT AVG (PRICE) FROM PRODUCT_TABLE)\\\")\"</code>\n  *\n  * @nojavadoc\n  */"},{"sha":"261af2d74dae68ace2c7ab6e90bef11d4e6482f7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -205,9 +205,12 @@ else if ((exps.distinct & exps.DISTINCT_FALSE) != 0)\n     private void initializeJoins(Select sel, JDBCStore store,\n         QueryExpressions exps, Object[] params) {\n         Map contains = null;\n-        if (((Exp) exps.filter).hasContainsExpression()\n-            || (exps.having != null\n-            && ((Exp) exps.having).hasContainsExpression()))\n+        HasContainsExpressionVisitor visitor = \n+            new HasContainsExpressionVisitor();\n+        exps.filter.acceptVisit(visitor);\n+        if (!visitor.foundContainsExpression() && exps.having != null)\n+            exps.having.acceptVisit(visitor);\n+        if (visitor.foundContainsExpression())\n             contains = new HashMap(7);\n \n         // initialize filter and having expressions"},{"sha":"3a5edecf868f6554abe46bb3819ea75714f7b921","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,8 +27,7 @@\n  * @author Marc Prud'hommeaux\n  */\n class Size\n-    extends UnaryOp\n-    implements Val {\n+    extends UnaryOp {\n \n     public Size(Val val) {\n         super(val);"},{"sha":"ebd8ea32dde30c89bcb4058fe9d2102b5389c0cb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import serp.util.Numbers;\n \n /**\n@@ -117,12 +118,11 @@ public Joins getJoins() {\n         return _joins;\n     }\n \n-    public boolean hasContainsExpression() {\n-        return false;\n-    }\n-\n-    public boolean hasVariable(Variable var) {\n-        return _val1.hasVariable(var) || _val2.hasVariable(var);\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n \n     /**"},{"sha":"d9d78503aa19b329aace9ec6c0b90e2d00b49f0b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -33,8 +34,7 @@\n  * @author Marc Prud'hommeaux\n  */\n abstract class StringFunction\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     final Val _val;\n     ClassMetaData _meta = null;\n@@ -111,10 +111,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return _val.hasVariable(var);\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         _val.calculateValue(sel, store, params, null, fetch);\n@@ -134,5 +130,11 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n         _val.appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(_post);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"90e3271e3fe2b571983b87b4a22af6c2f1f5f659","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","status":"modified","additions":16,"deletions":30,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -36,7 +37,8 @@\n  * @author Abe White\n  */\n class SubQ\n-    implements Val, Subquery {\n+    extends AbstractVal\n+    implements Subquery {\n \n     private final ClassMapping _candidate;\n     private final boolean _subs;\n@@ -155,25 +157,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        for (int i = 0; i < _exps.projections.length; i++)\n-            if (((Val) _exps.projections[i]).hasVariable(var))\n-                return true;\n-        if (_exps.filter != null)\n-            if (((Exp) _exps.filter).hasVariable(var))\n-                return true;\n-        for (int i = 0; i < _exps.grouping.length; i++)\n-            if (((Val) _exps.grouping[i]).hasVariable(var))\n-                return true;\n-        if (_exps.having != null)\n-            if (((Exp) _exps.having).hasVariable(var))\n-                return true;\n-        for (int i = 0; i < _exps.ordering.length; i++)\n-            if (((Val) _exps.ordering[i]).hasVariable(var))\n-                return true;\n-        return false;\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n     }\n@@ -222,15 +205,18 @@ public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n         appendTo(sql, 0, sel, store, params, fetch, true);\n     }\n \n-    public void appendIsNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n-        appendTo(sql, 0, sel, store, params, fetch);\n-        sql.append(\" IS NULL\");\n-    }\n-\n-    public void appendIsNotNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n-        appendTo(sql, 0, sel, store, params, fetch);\n-        sql.append(\" IS NOT NULL\");\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        for (int i = 0; i < _exps.projections.length; i++)\n+            _exps.projections[i].acceptVisit(visitor);\n+        if (_exps.filter != null)\n+            _exps.filter.acceptVisit(visitor);\n+        for (int i = 0; i < _exps.grouping.length; i++)\n+            _exps.grouping[i].acceptVisit(visitor);\n+        if (_exps.having != null)\n+            _exps.having.acceptVisit(visitor);\n+        for (int i = 0; i < _exps.ordering.length; i++)\n+            _exps.ordering[i].acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"16806b81e733ec054d1a3817f4a2cc6a0b59ba08","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -33,8 +34,7 @@\n  * @author Abe White\n  */\n class Substring\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     private final Val _val1;\n     private final Val _val2;\n@@ -119,10 +119,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return _val1.hasVariable(var) || _val2.hasVariable(var);\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         _val1.calculateValue(sel, store, params, null, fetch);\n@@ -153,5 +149,12 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n \n         store.getDBDictionary().substring(sql, str, start, end);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"eca0e7a12222bf6e2efe64c8dc80596e24fe92bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.kernel.exps.Literal;\n import org.apache.openjpa.meta.ClassMetaData;\n \n@@ -36,8 +37,7 @@\n  * @author Marc Prud'hommeaux\n  */\n class Trim\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     private final Val _val;\n     private final Val _trimChar;\n@@ -133,10 +133,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return _val.hasVariable(var);\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         _val.calculateValue(sel, store, params, null, fetch);\n@@ -192,5 +188,12 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n             }\n         }\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        _trimChar.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"8f4d933ed40e5cecef26483d9114f9be2398c008","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -33,8 +34,7 @@\n  * @author Abe White\n  */\n abstract class UnaryOp\n-    extends AbstractVal\n-    implements Val {\n+    extends AbstractVal {\n \n     private final Val _val;\n     private ClassMetaData _meta = null;\n@@ -123,10 +123,6 @@ public Object load(Result res, JDBCStore store,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return _val.hasVariable(var);\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         _val.calculateValue(sel, store, params, null, fetch);\n@@ -167,5 +163,11 @@ protected Class getType(Class c) {\n      * Return the name of this operator.\n      */\n     protected abstract String getOperator();\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"639d2f9290632a79c747b6695dad5d612a616af1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -96,11 +96,6 @@ public Object load(Result res, JDBCStore store,\n         JDBCFetchConfiguration fetch)\n         throws SQLException;\n \n-    /**\n-     * Return true if this value uses the given variable.\n-     */\n-    public boolean hasVariable(Variable var);\n-\n     /**\n      * Calculate and cache the SQL for this value. This method is called\n      * before <code>length</code> or any <code>append</code> methods."},{"sha":"a0d0a63ea7f25a5ecbabaeb982351c543029d9de","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n@@ -37,7 +38,7 @@\n  * @author Abe White\n  */\n class Variable\n-    implements Val {\n+    extends AbstractVal {\n \n     private final String _name;\n     private final Class _type;\n@@ -143,10 +144,6 @@ public Object load(Result res, JDBCStore store,\n         return null;\n     }\n \n-    public boolean hasVariable(Variable var) {\n-        return this == var;\n-    }\n-\n     public void calculateValue(Select sel, JDBCStore store,\n         Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         if (_path != null)\n@@ -185,4 +182,11 @@ public void appendIsNull(SQLBuffer sql, Select sel,\n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n         JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        if (_path != null)\n+            _path.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"2882ea8d9a1f2c26160343f626481bf224962f13","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":25,"deletions":15,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -23,6 +23,7 @@\n \n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.kernel.exps.AbstractExpressionVisitor;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n@@ -396,34 +397,23 @@ public InMemoryExecutor(ExpressionStoreQuery q,\n             if (_exps[0].projections.length == 0)\n                 _projTypes = StoreQuery.EMPTY_CLASSES;\n             else {\n+                AssertNoVariablesExpressionVisitor novars = new\n+                    AssertNoVariablesExpressionVisitor(q.getContext());\n                 _projTypes = new Class[_exps[0].projections.length];\n                 for (int i = 0; i < _exps[0].projections.length; i++) {\n                     _projTypes[i] = _exps[0].projections[i].getType();\n                     assertNotContainer(_exps[0].projections[i], q);\n-                    assertNotVariable((Val) _exps[0].projections[i],\n-                        q.getContext());\n+                    _exps[0].projections[i].acceptVisit(novars);\n                 }\n                 for (int i = 0; i < _exps[0].grouping.length; i++)\n-                    assertNotVariable((Val) _exps[0].grouping[i],\n-                        q.getContext());\n+                    _exps[0].grouping[i].acceptVisit(novars);\n             }\n         }\n \n         QueryExpressions[] getQueryExpressions() {\n             return _exps;\n         }\n \n-        /**\n-         * We can't handle in-memory projections or grouping that uses\n-         * variables.\n-         */\n-        private static void assertNotVariable(Val val, QueryContext ctx) {\n-            // we can't handle in-mem results that use variables\n-            if (val.hasVariables())\n-                throw new UnsupportedException(_loc.get(\"inmem-agg-proj-var\",\n-                    ctx.getCandidateType(), ctx.getQueryString()));\n-        }\n-\n         public ResultObjectProvider executeQuery(StoreQuery q,\n             Object[] params, boolean lrs, long startIdx, long endIdx) {\n             // execute in memory for candidate collection;\n@@ -517,6 +507,26 @@ public Object getOrderingValue(StoreQuery q, Object[] params,\n         public Class[] getProjectionTypes(StoreQuery q) {\n             return _projTypes;\n         }\n+\n+        /**\n+         * Throws an exception if a variable is found.\n+         */\n+        private static class AssertNoVariablesExpressionVisitor \n+            extends AbstractExpressionVisitor {\n+\n+            private final QueryContext _ctx;\n+\n+            public AssertNoVariablesExpressionVisitor(QueryContext ctx) {\n+                _ctx = ctx;\n+            }\n+\n+            public void enter(Value val) {\n+                if (!val.isVariable())\n+                    return;\n+                throw new UnsupportedException(_loc.get(\"inmem-agg-proj-var\", \n+                    _ctx.getCandidateType(), _ctx.getQueryString()));\n+            }\n+        }\n     }\n \n     /**"},{"sha":"7c830ad9058694885c206a8247ae4f1fd097ce67","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -90,8 +90,8 @@ public boolean proxy(boolean reset, boolean replaceNull) {\n                 if (proxy == null) {\n                     proxy = (Proxy) _sm.newFieldProxy(field);\n                     if (objval != null)\n-                        ((Calendar) proxy)\n-                            .setTime(((Calendar) objval).getTime());\n+                        ((Calendar) proxy).setTime(((Calendar) objval).\n+                            getTime());\n                     ret = true;\n                 }\n                 break;"},{"sha":"cf0c569664ca4e5b45d67594c29c71db2ad6264c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionVisitor.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionVisitor.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -0,0 +1,24 @@\n+package org.apache.openjpa.kernel.exps;\n+\n+\n+/**\n+ * No-op abstract visitor meant for easy extension.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public abstract class AbstractExpressionVisitor \n+    implements ExpressionVisitor {\n+\n+    public void enter(Expression exp) {\n+    }\n+\n+    public void exit(Expression exp) {\n+    }\n+\n+    public void enter(Value val) {\n+    }\n+\n+    public void exit(Value val) {\n+    }\n+}"},{"sha":"2ce728ee042aa4caa75997b64a72af6ae3ec4b0f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -43,21 +43,13 @@ public Aggregate(AggregateListener listener, Val arg) {\n         _arg = arg;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return _listener.getType(getArgTypes());\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return (_arg == null) ? false : _arg.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         if (candidate == null)\n@@ -88,4 +80,11 @@ protected Collection eval(Collection candidates, Object orig,\n             return ((Args) _arg).getTypes();\n         return new Class[]{ _arg.getType() };\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        if (_arg != null)\n+            _arg.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"4a9fe80042416ac334712079ef65d707d239931e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -42,21 +42,13 @@ public AggregateVal(Val val) {\n         _val = val;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return getType(_val.getType());\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         if (candidate == null)\n@@ -85,4 +77,10 @@ protected Collection eval(Collection candidates, Object orig,\n      * Aggregate the given values.\n      */\n     protected abstract Object operate(Collection os, Class c);\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"8b8abd42a892f301814b60700a00e9e96d6a0301","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AndExpression.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AndExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -57,5 +57,12 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n         return _exp1.evaluate(candidates, ctx, params)\n             && _exp2.evaluate(candidates, ctx, params);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _exp1.acceptVisit(visitor);\n+        _exp2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"f5dc9ecb743e079fb756c45adf5604df5d793e03","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Args.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Args.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -49,10 +49,6 @@ public Args(Value val1, Value val2) {\n         return (Value[]) _args.toArray(new Value[_args.size()]);\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return Object[].class;\n     }\n@@ -67,18 +63,18 @@ public Class getType() {\n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        for (int i = 0; i < _args.size(); i++)\n-            if (((Val) _args.get(i)).hasVariables())\n-                return true;\n-        return false;\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object[] vals = new Object[_args.size()];\n         for (int i = 0; i < _args.size(); i++)\n             vals[i] = ((Val) _args.get(i)).eval(candidate, orig, ctx, params);\n         return vals;\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        for (int i = 0; i < _args.size(); i++)\n+            ((Val) _args.get(i)).acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"29b1bfb2d485d9bdad3fecd2da9c7ae6726be763","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableExpression.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -79,5 +79,12 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n         Object obj = candidates.iterator().next();\n         return eval(obj, obj, ctx, params);\n \t}\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _var.acceptVisit(visitor);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"7a553d9385fd388a30f56b0d33fee45c15ed9ef7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BoundVariable.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BoundVariable.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BoundVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BoundVariable.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -63,10 +63,6 @@ public void setImplicitType(Class type) {\n         _type = type;\n     }\n \n-    public boolean hasVariables() {\n-        return true;\n-    }\n-\n     /**\n      * Cast this value to the given type.\n      */"},{"sha":"cc506730491f639af3cd03b43008233dec6ae1bf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -48,10 +48,6 @@ public void get(FieldMetaData field, boolean nullTraversal) {\n         _actions.add(new Traversal(field, nullTraversal));\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         if (_actions == null)\n             return getCandidateType();\n@@ -73,10 +69,6 @@ protected Class getCandidateType() {\n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return false;\n-    }\n-\n     public FieldMetaData last() {\n         if (_actions == null)\n             return null;"},{"sha":"a0d03e220d9adebe789a1d6dd9dff3a1678e5aed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Cast.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Cast.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Cast.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Cast.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -41,21 +41,13 @@ public Cast(Val val, Class cast) {\n         _cast = cast;\n     }\n \n-    public boolean isVariable() {\n-        return _val.isVariable();\n-    }\n-\n     public Class getType() {\n         return _cast;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         return Filters.convert(_val.eval(candidate, orig, ctx, params), _cast);\n@@ -72,4 +64,10 @@ protected Collection eval(Collection candidates, Object orig,\n             casts.add(Filters.convert(itr.next(), _cast));\n         return casts;\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"db1e89de3d80fa9d7da3bebe7541dc9113fd9cf8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CompareExpression.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CompareExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CompareExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CompareExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -72,4 +72,11 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n      * Compare the two values.\n      */\n     protected abstract boolean compare(Object o1, Object o2);\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"f696576f36746c1d4a1fa6bf2a13f1efbf0f498c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -37,21 +37,13 @@ public Concat(Val val, Val args) {\n         _args = args;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return String.class;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables() || _args.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object str = _val.eval(candidate, orig, ctx, params);\n@@ -66,5 +58,12 @@ protected Object eval(Object candidate, Object orig,\n \n         return cat.toString();\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        _args.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"ca8799d60f5da1fac9cbf0d34c698c9826567062","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsExpression.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -70,5 +70,12 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n     protected Collection getCollection(Object obj) {\n         return (Collection) obj;\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"a75d01ebd7335757f7e1ea95924b0a0400a838d2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -27,14 +27,6 @@\n class CurrentDate\n     extends Val {\n \n-    public boolean hasVariables() {\n-        return false;\n-    }\n-\n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return Date.class;\n     }"},{"sha":"f08d09b7adb9f4221dbd033326596a24284b52f0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -38,29 +38,19 @@ public Distinct(Val val) {\n         _val = val;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return Collection.class;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         if (candidate == null)\n             candidate = Collections.EMPTY_LIST;\n-        \n         Collection arg = candidate instanceof Collection\n             ? (Collection) candidate : Collections.singleton(candidate);\n-\n         return eval(arg, orig, ctx, params).iterator().next();\n     }\n \n@@ -69,5 +59,11 @@ protected Collection eval(Collection candidates, Object orig,\n         Collection args = _val.eval(candidates, orig, ctx, params);\n         return new HashSet(args);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"70d2ca0d91dbae8b0cd3382da3bea9f6218d6257","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Exp.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Exp.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Exp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Exp.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -71,4 +71,9 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n         Object[] params) {\n         return true;\n \t}\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"e760560e7be0c21410192be5460b0b566e1f5cc3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -16,11 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * Marker interface for a set of conditions that must be met for the query\n+ * Interface for a set of conditions that must be met for the query\n  * to be true.\n  *\n  * @author Abe White\n  */\n public interface Expression {\n \n+    /**\n+     * Accept a visit from a tree visitor.\n+     */\n+    public void acceptVisit(ExpressionVisitor visitor);\n }"},{"sha":"28dcacfab7458eeefaf7371af1da146c1ec7c34f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionVisitor.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionVisitor.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -0,0 +1,31 @@\n+package org.apache.openjpa.kernel.exps;\n+\n+\n+/**\n+ * Visits nodes of a query expression tree.\n+ *\n+ * @author Abe White\n+ */\n+public interface ExpressionVisitor {\n+\n+    /**\n+     * Enter an expression.  The expression will then invoke visits on its\n+     * components.\n+     */\n+    public void enter(Expression exp);\n+\n+    /**\n+     * Leave an expression.\n+     */\n+    public void exit(Expression exp);\n+\n+    /**\n+     * Enter a value.  The value will then invoke visits on its components.\n+     */\n+    public void enter(Value val);\n+\n+    /**\n+     * Leave a value.\n+     */\n+    public void exit(Value val);\n+}"},{"sha":"a6a767bc480d533cd5c5c1489a39d0561bbe6dec","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Extension.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Extension.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Extension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Extension.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -39,10 +39,6 @@ public Extension(FilterListener listener, Val target, Val arg) {\n         _arg = arg;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         Class targetClass = (_target == null) ? null : _target.getType();\n         return _listener.getType(targetClass, getArgTypes());\n@@ -51,11 +47,6 @@ public Class getType() {\n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _target != null && _target.hasVariables()\n-            || _arg != null && _arg.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object target = null;\n@@ -86,5 +77,14 @@ protected Object eval(Object candidate, Object orig,\n             return (Object[]) arg;\n         return new Object[]{ arg };\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        if (_target != null)\n+            _target.acceptVisit(visitor);\n+        if (_arg != null)\n+            _arg.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"21279b66d6be52ec9972abb06c33b6ebcb4232d7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetObjectId.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetObjectId.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -34,23 +34,21 @@ public GetObjectId(Val val) {\n         _val = val;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return Object.class;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         return ctx.getObjectId(_val.eval(candidate, orig, ctx, params));\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"204492c4f3160c2f7dd7e4605ca22e439eb5635b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -38,21 +38,13 @@ public IndexOf(Val val, Val args) {\n         _args = args;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return int.class;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables() || _args.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object str = _val.eval(candidate, orig, ctx, params);\n@@ -66,4 +58,11 @@ protected Object eval(Object candidate, Object orig,\n             idx = str.toString().indexOf(arg.toString());\n         return Numbers.valueOf(idx);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        _args.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"515fc8df7cfefe25adfa255cdc4df9654a8648a9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InstanceofExpression.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InstanceofExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -57,4 +57,10 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n         Object o = (c == null || c.isEmpty()) ? null : c.iterator().next();\n         return _cls.isInstance(o);\n \t}\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"10c033bdb70cdd1a1589dd845454f8d12885fb39","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IsEmptyExpression.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IsEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IsEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IsEmptyExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -63,5 +63,11 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n             return ((Map) obj).isEmpty();\n         return false;\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"c8b0c1cbaaf556fedfd04c7b33be31eae1609d8a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Lit.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Lit.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -38,10 +38,6 @@ public Lit(Object val, int ptype) {\n         _ptype = ptype;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Object getValue() {\n         return _val;\n     }\n@@ -66,10 +62,6 @@ public void setImplicitType(Class type) {\n         _val = Filters.convert(_val, type);\n     }\n \n-    public boolean hasVariables() {\n-        return false;\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         return _val;"},{"sha":"ead4b35f4507abf3ffd389f9e58e1bb598034938","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MathVal.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MathVal.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MathVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MathVal.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -37,10 +37,6 @@ public MathVal(Val val1, Val val2) {\n         _val2 = val2;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         Class c1 = _val1.getType();\n         Class c2 = _val2.getType();\n@@ -50,10 +46,6 @@ public Class getType() {\n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val1.hasVariables() || _val2.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object o1 = _val1.eval(candidate, orig, ctx, params);\n@@ -66,4 +58,11 @@ protected Object eval(Object candidate, Object orig,\n      */\n     protected abstract Object operate(Object o1, Class c1, Object o2,\n         Class c2);\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val1.acceptVisit(visitor);\n+        _val2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"3f1afdde2f90d5d53edfa4e0d55b5c24cb849c59","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotExpression.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -45,5 +45,11 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n         Object[] params) {\n         return !_exp.evaluate(candidates, ctx, params);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _exp.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"fbb941c95a92aa45cc8a3d4392021ee124d44762","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Null.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Null.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Null.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Null.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -25,14 +25,6 @@\n class Null\n     extends Val {\n \n-    public boolean hasVariables() {\n-        return false;\n-    }\n-\n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return Object.class;\n     }"},{"sha":"4ce90577c3798b2101a6d1b484b5cf8a0610d515","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/OrExpression.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/OrExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/OrExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/OrExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -49,5 +49,12 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n         return _exp1.evaluate(candidates, ctx, params)\n             || _exp2.evaluate(candidates, ctx, params);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _exp1.acceptVisit(visitor);\n+        _exp2.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"53bd530e70b482a378a65b1a32cad5830f1339d4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Param.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Param.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -42,10 +42,6 @@ public String getParameterName() {\n         return _name;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return _type;\n     }\n@@ -54,10 +50,6 @@ public void setImplicitType(Class type) {\n         _type = type;\n     }\n \n-    public boolean hasVariables() {\n-        return false;\n-    }\n-\n     public void setIndex(int index) {\n         _index = index;\n     }"},{"sha":"b6a8c8dd39fdf3238f771336b6149e837853d429","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -19,6 +19,7 @@\n \n /**\n  * A path represents a traversal into fields of a candidate object.\n+ * Equivalent paths should compare equal.\n  *\n  * @author Abe White\n  */"},{"sha":"23922e8792a5e1ebe61c52313bd4ff56cdf42cd7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -36,10 +36,6 @@ public StringLength(Val val) {\n         _val = val;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         if (_cast != null)\n             return _cast;\n@@ -50,10 +46,6 @@ public void setImplicitType(Class type) {\n         _cast = type;\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object eval = _val.eval(candidate, orig, ctx, params);\n@@ -62,5 +54,11 @@ protected Object eval(Object candidate, Object orig,\n \n         return Numbers.valueOf(eval.toString().length());\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"fc58671c81dd030eb3389d0c167df235be7b59a5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -46,10 +46,6 @@ public void setQueryExpressions(QueryExpressions q, long startIdx,\n         long endIdx) {\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return _type;\n     }\n@@ -58,10 +54,6 @@ public void setImplicitType(Class type) {\n         _type = type;\n     }\n \n-    public boolean hasVariables() {\n-        return false;\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         throw new UnsupportedException(_loc.get(\"in-mem-subquery\"));"},{"sha":"668fccdf28f9e3ffc9d1e1c541ff4efd7c2dc10e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Substring.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Substring.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -37,21 +37,13 @@ public Substring(Val val, Val args) {\n         _args = args;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return String.class;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables() || _args.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object str = _val.eval(candidate, orig, ctx, params);\n@@ -63,4 +55,11 @@ protected Object eval(Object candidate, Object orig,\n         }\n         return str.toString().substring(((Number) arg).intValue());\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        _args.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"1f3f05c76e8cefb21e41352eb801767b019547c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/This.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/This.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/This.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/This.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -25,14 +25,6 @@\n class This\n     extends Val {\n \n-    public boolean hasVariables() {\n-        return false;\n-    }\n-\n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public void setImplicitType(Class type) {\n     }\n "},{"sha":"6bb545a1b9ba028d30b41f7346e616cea4f799b6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToLowerCase.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToLowerCase.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -34,24 +34,21 @@ public ToLowerCase(Val val) {\n         _val = val;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return String.class;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n-        return _val.eval(candidate, orig, ctx, params).toString().\n-            toLowerCase();\n+        return _val.eval(candidate, orig, ctx, params).toString().toLowerCase();\n+    }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n     }\n }"},{"sha":"cdcd39390bb3495c33132418f675e919bcf9c120","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToUpperCase.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToUpperCase.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -34,24 +34,22 @@ public ToUpperCase(Val val) {\n         _val = val;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return String.class;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         return _val.eval(candidate, orig, ctx, params).toString().\n             toUpperCase();\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"6d3bebf45e24c70055e369c58c1dd67105158cef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Trim.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Trim.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -38,31 +38,21 @@ public Trim(Val val, Val trimChar, Boolean where) {\n         _where = where;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return String.class;\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object eval = _val.eval(candidate, orig, ctx, params);\n-\n         if (eval == null)\n             return null;\n \n         String toTrim = _trimChar.eval(candidate, orig, ctx, params).\n             toString();\n-\n         String str = eval.toString();\n \n         // null indicates both, TRUE indicates leading\n@@ -76,8 +66,14 @@ protected Object eval(Object candidate, Object orig,\n             while (str.endsWith(toTrim))\n                 str = str.substring(0, str.length() - toTrim.length());\n         }\n-\n         return str;\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        _trimChar.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "},{"sha":"59f743fca3e741d9f135faa3e04dac06513a3b3b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnaryMathVal.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnaryMathVal.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnaryMathVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnaryMathVal.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -34,21 +34,13 @@ public UnaryMathVal(Val val) {\n         _val = val;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n-    }\n-\n     public Class getType() {\n         return getType(_val.getType());\n     }\n \n     public void setImplicitType(Class type) {\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object o1 = _val.eval(candidate, orig, ctx, params);\n@@ -65,4 +57,10 @@ protected Object eval(Object candidate, Object orig,\n      * Return the result of this mathematical operation on the given value.\n      */\n     protected abstract Object operate(Object o, Class c);\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"24a1681a1eb786d2f135d8406961adafcbbf5d43","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -58,10 +58,6 @@ public void setValue(Object value) {\n         _val = value;\n     }\n \n-    public boolean hasVariables() {\n-        return true;\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         return _val;"},{"sha":"b6af639a3f8bfbd9799bb930d4ce92405c52f0f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -66,11 +66,6 @@ public final Object evaluate(Collection candidates, Object orig,\n         }\n     }\n \n-    /**\n-     * Return true if this value involves the use of variables.\n-     */\n-    public abstract boolean hasVariables();\n-\n     /**\n      * Return this value for the given candidate.\n      */\n@@ -103,4 +98,13 @@ public ClassMetaData getMetaData() {\n     public void setMetaData(ClassMetaData meta) {\n         _meta = meta;\n \t}\n+\n+    public boolean isVariable() {\n+        return false;\n+    }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"70a7216a02b4a66f83f7fdaad0e3ded86ec17f9a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValExpression.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValExpression.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValExpression.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -48,4 +48,10 @@ protected boolean eval(Collection candidates, StoreContext ctx,\n         Object o = (c == null || c.isEmpty()) ? null : c.iterator().next();\n         return o != null && ((Boolean) o).booleanValue();\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }"},{"sha":"b5dc778912abbd9548305985e9ebe0a5a93c0f7e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -52,4 +52,9 @@\n      * Associate a persistent type with this value.\n      */\n     public void setMetaData(ClassMetaData meta);\n+\n+    /**\n+     * Accept a visit from a tree visitor.\n+     */\n+    public void acceptVisit(ExpressionVisitor visitor);\n }"},{"sha":"36800c1f881d21957595bef5ea22da1c8bcc16dc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValuePath.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValuePath.java","raw_url":"https://github.com/apache/openjpa/raw/037a45d7e4a7b57146b33c70598b9376374f21de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValuePath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValuePath.java?ref=037a45d7e4a7b57146b33c70598b9376374f21de","patch":"@@ -38,15 +38,17 @@ public Class getCandidateType() {\n         return _val.getType();\n     }\n \n-    public boolean hasVariables() {\n-        return _val.hasVariables();\n-    }\n-\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         // evaluate with the value's value\n         return super.eval(_val.eval(candidate, orig, ctx, params), orig,\n             ctx, params);\n     }\n+\n+    public void acceptVisit(ExpressionVisitor visitor) {\n+        visitor.enter(this);\n+        _val.acceptVisit(visitor);\n+        visitor.exit(this);\n+    }\n }\n "}]}

