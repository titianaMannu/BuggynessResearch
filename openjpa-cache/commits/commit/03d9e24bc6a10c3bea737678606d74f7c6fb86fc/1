{"sha":"03d9e24bc6a10c3bea737678606d74f7c6fb86fc","node_id":"MDY6Q29tbWl0MjA2MzY0OjAzZDllMjRiYzZhMTBjM2JlYTczNzY3ODYwNmQ3NGY3YzZmYjg2ZmM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-06-30T01:05:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-06-30T01:05:16Z"},"message":"OPENJPA-1061 merging patch provided by Jody Grassel to trunk\n\tmodified:   openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java\n\tmodified:   openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@789519 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60fe250a0c124b0b747c664091c52d47b44ad29f","url":"https://api.github.com/repos/apache/openjpa/git/trees/60fe250a0c124b0b747c664091c52d47b44ad29f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/03d9e24bc6a10c3bea737678606d74f7c6fb86fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/03d9e24bc6a10c3bea737678606d74f7c6fb86fc","html_url":"https://github.com/apache/openjpa/commit/03d9e24bc6a10c3bea737678606d74f7c6fb86fc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/03d9e24bc6a10c3bea737678606d74f7c6fb86fc/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1fce44737bd0cd696fb8b904aafb1dd663093d11","url":"https://api.github.com/repos/apache/openjpa/commits/1fce44737bd0cd696fb8b904aafb1dd663093d11","html_url":"https://github.com/apache/openjpa/commit/1fce44737bd0cd696fb8b904aafb1dd663093d11"}],"stats":{"total":144,"additions":120,"deletions":24},"files":[{"sha":"a1c9a90c8f70af23ef56bc5e3f2e0e655060e2b0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":44,"deletions":24,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/03d9e24bc6a10c3bea737678606d74f7c6fb86fc/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/03d9e24bc6a10c3bea737678606d74f7c6fb86fc/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=03d9e24bc6a10c3bea737678606d74f7c6fb86fc","patch":"@@ -153,12 +153,12 @@\n             try {\n                 auxEnhancers.add(AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(classes[i])));\n-\t\t    } catch (Throwable t) {\n+            } catch (Throwable t) {\n                 // aux enhancer may rely on non-existant spec classes, etc\n-\t\t    }\n-\t\t}\n-    \t_auxEnhancers = (AuxiliaryEnhancer[]) auxEnhancers.toArray\n-            (new AuxiliaryEnhancer[auxEnhancers.size()]);\n+            }\n+        }\n+        _auxEnhancers = (AuxiliaryEnhancer[]) auxEnhancers.toArray\n+        (new AuxiliaryEnhancer[auxEnhancers.size()]);\n     }\n \n     private BCClass _pc;\n@@ -1138,9 +1138,15 @@ private void addPCMethods()\n             addCopyKeyFieldsToObjectIdMethod(false);\n             addCopyKeyFieldsFromObjectIdMethod(true);\n             addCopyKeyFieldsFromObjectIdMethod(false);\n+            if (_meta.hasAbstractPKField() == true) { \n+                addGetIDOwningClass();\n+            }\n             addNewObjectIdInstanceMethod(true);\n             addNewObjectIdInstanceMethod(false);\n         }\n+        else if (_meta.hasPKFieldsFromAbstractClass()){ \n+            addGetIDOwningClass();\n+        }\n     }\n \n     /**\n@@ -2536,25 +2542,27 @@ private void addNewObjectIdInstanceMethod(boolean obj)\n             // new ObjectId (cls, oid)\n             code.anew().setType(ObjectId.class);\n             code.dup();\n-            if(_meta.isEmbeddedOnly()) {\n+            if(_meta.isEmbeddedOnly() || _meta.hasAbstractPKField() == true) {\n                 code.aload().setThis();\n-                code.invokevirtual().setMethod(Object.class, \"getClass\",\n-                        Class.class, null);\n-            }else\n+                code.invokevirtual().setMethod(PRE + \"GetIDOwningClass\",\n+                    Class.class, null);\n+            } else {\n                 code.classconstant().setClass(getType(_meta));\n+            }\n         }\n \n         // new <oid class> ();\n         code.anew().setType(oidType);\n         code.dup();\n         if (_meta.isOpenJPAIdentity() || (obj && usesClsString ==\n                     Boolean.TRUE)) {\n-            if(_meta.isEmbeddedOnly()) {\n+            if(_meta.isEmbeddedOnly() || _meta.hasAbstractPKField() == true ) {\n                 code.aload().setThis();\n-                code.invokevirtual().setMethod(Object.class, \"getClass\",\n-                        Class.class, null);\n-            }else\n+                code.invokevirtual().setMethod(PRE + \"GetIDOwningClass\",\n+                    Class.class, null);\n+            }else {\n                 code.classconstant().setClass(getType(_meta));\n+            }\n         }\n         if (obj) {\n             code.aload().setParam(0);\n@@ -4613,15 +4621,27 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n         public File directory = null;\n         public boolean addDefaultConstructor = true;\n         public boolean tmpClassLoader = true;\n-\t\tpublic boolean enforcePropertyRestrictions = false;\n-\t}\n-\n-\t/**\n- \t * Plugin interface for additional enhancement.\n-\t */\n-\tpublic static interface AuxiliaryEnhancer\n-\t{\n-\t\tpublic void run (BCClass bc, ClassMetaData meta);\n-\t\tpublic boolean skipEnhance(BCMethod m);\n-\t}\n+        public boolean enforcePropertyRestrictions = false;\n+    }\n+\n+    /**\n+     * Plugin interface for additional enhancement.\n+     */\n+    public static interface AuxiliaryEnhancer\n+    {\n+        public void run (BCClass bc, ClassMetaData meta);\n+        public boolean skipEnhance(BCMethod m);\n+    }\n+    \n+    private void addGetIDOwningClass() throws NoSuchMethodException {\n+        BCMethod method = _pc.declareMethod(PRE + \"GetIDOwningClass\", \n+            Class.class, null);\n+        Code code = method.getCode(true);\n+        \n+        code.classconstant().setClass(getType(_meta));\n+        code.areturn();\n+        \n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+    }\n }"},{"sha":"28ecd7181128cbf97ba383b44a2df34b4c3f51a4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/03d9e24bc6a10c3bea737678606d74f7c6fb86fc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/03d9e24bc6a10c3bea737678606d74f7c6fb86fc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=03d9e24bc6a10c3bea737678606d74f7c6fb86fc","patch":"@@ -208,6 +208,8 @@\n     private boolean _intercepting = false;\n     private Boolean _useIdClassFromParent = null;\n     private boolean _abstract = false;\n+    private Boolean _hasAbstractPKField = null;\n+    private Boolean _hasPKFieldsFromAbstractClass = null;\n     \n     /**\n      * Constructor. Supply described type and repository.\n@@ -2593,4 +2595,78 @@ private boolean isCacheable(String candidateCacheName) {\n         }\n         return rval;\n     }\n+    \n+    /**\n+     * Convenience method to determine if the pcType modeled by\n+     * this ClassMetaData object is both abstract and declares PKFields. This\n+     * method is used by the PCEnhancer to determine if special handling is\n+     * required.\n+     *\n+     * @return\n+     */\n+    public boolean hasAbstractPKField() {\n+        if (_hasAbstractPKField != null) {\n+            return _hasAbstractPKField.booleanValue();\n+        }\n+\n+        // Default to false, set to true only if this type is abstract and\n+        // declares a PKField.\n+        _hasAbstractPKField = Boolean.FALSE;\n+\n+        if (isAbstract() == true) {\n+            FieldMetaData[] declaredFields = getDeclaredFields();\n+            if (declaredFields != null && declaredFields.length != 0) {\n+                for (FieldMetaData fmd : declaredFields) {\n+                    if (fmd.isPrimaryKey()) {\n+                        _hasAbstractPKField = Boolean.TRUE;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return _hasAbstractPKField.booleanValue();\n+    }\n+    \n+    /**\n+     * Convenience method to determine if this type is a direct\n+     * decendent of an abstract type declaring PKFields. Returns true if there\n+     * are no pcTypes mapped to a table between this type and an abstract pcType\n+     * declaring PKFields. Returns false if there no such abstract pcTypes in\n+     * the inheritance hierarchy or if there are any pcTypes mapped to tables in\n+     * between the type represented by this ClassMetaData object and the\n+     * abstract pcType declaring PKFields.\n+     *\n+     * @return\n+     */\n+    public boolean hasPKFieldsFromAbstractClass() {\n+        if (_hasPKFieldsFromAbstractClass != null) {\n+            return _hasPKFieldsFromAbstractClass.booleanValue();\n+        }\n+\n+        // Default to FALSE, until proven true.\n+        _hasPKFieldsFromAbstractClass = Boolean.FALSE;\n+\n+        FieldMetaData[] pkFields = getPrimaryKeyFields();\n+        for (FieldMetaData fmd : pkFields) {\n+            ClassMetaData fmdDMDA = fmd.getDeclaringMetaData();\n+            if (fmdDMDA.isAbstract()) {\n+                ClassMetaData cmd = getPCSuperclassMetaData();\n+                while (cmd != fmdDMDA) {\n+                    if (fmdDMDA.isAbstract()) {\n+                        cmd = cmd.getPCSuperclassMetaData();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+                if (cmd == fmdDMDA) {\n+                    _hasPKFieldsFromAbstractClass = Boolean.TRUE;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return _hasPKFieldsFromAbstractClass.booleanValue();\n+    }\n+\n }"}]}

