{"sha":"043b0596b888f03b8ac25cdd694a05026b870dc8","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0M2IwNTk2Yjg4OGYwM2I4YWMyNWNkZDY5NGEwNTAyNmI4NzBkYzg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-02T00:07:58Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-02T00:07:58Z"},"message":"OPENJPA-485: Add test\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@681911 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"22d5346dc731c9214490ca561bc1c6184a2d094f","url":"https://api.github.com/repos/apache/openjpa/git/trees/22d5346dc731c9214490ca561bc1c6184a2d094f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/043b0596b888f03b8ac25cdd694a05026b870dc8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/043b0596b888f03b8ac25cdd694a05026b870dc8","html_url":"https://github.com/apache/openjpa/commit/043b0596b888f03b8ac25cdd694a05026b870dc8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/043b0596b888f03b8ac25cdd694a05026b870dc8/comments","author":null,"committer":null,"parents":[{"sha":"6d8a5879847076701ea01abd98b004d0e1836530","url":"https://api.github.com/repos/apache/openjpa/commits/6d8a5879847076701ea01abd98b004d0e1836530","html_url":"https://github.com/apache/openjpa/commit/6d8a5879847076701ea01abd98b004d0e1836530"}],"stats":{"total":131,"additions":131,"deletions":0},"files":[{"sha":"a74d05310b0a0393def23331d0c9ee9f9b3a6bba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestOrderByQuery.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/043b0596b888f03b8ac25cdd694a05026b870dc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestOrderByQuery.java","raw_url":"https://github.com/apache/openjpa/raw/043b0596b888f03b8ac25cdd694a05026b870dc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestOrderByQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestOrderByQuery.java?ref=043b0596b888f03b8ac25cdd694a05026b870dc8","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.IndoorGame;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Scrabble;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Chess;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Game;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests ORDER BY clause can work with TABLE_PER_CLASS strategy.\r\n+ *  \r\n+ * Further details can be found in\r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-485\">OPENJPA-485</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestOrderByQuery extends SingleEMFTestCase {   \r\n+    public void setUp() {\r\n+    \tsuper.setUp(DROP_TABLES, Game.class, IndoorGame.class, \r\n+    \t\t\tScrabble.class, Chess.class);\r\n+\t\ttry {\r\n+\t\t\tcreateData();\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tthrow new RuntimeException(e);\r\n+\t\t}\r\n+    }\r\n+    \r\n+\tvoid createData() throws Exception {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tClass[] classes = { Game.class, IndoorGame.class, Scrabble.class,\r\n+\t\t\t\tChess.class };\r\n+\t\tfor (Class cls : classes) {\r\n+\t\t\tfor (int i = 1; i <= 4; i++) {\r\n+\t\t\t\tGame p = (Game) cls.newInstance();\r\n+\t\t\t\tp.setName(cls.getSimpleName() + \"-\" + i);\r\n+\t\t\t\tem.persist(p);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+    \r\n+    public void testOrderByQueryAscending() {\r\n+    \tString jpql = \"SELECT p FROM Game p ORDER BY p.name ASC\";\r\n+    \tEntityManager em = emf.createEntityManager();\r\n+    \t\r\n+    \tList<Game> persons = em.createQuery(jpql).getResultList();\r\n+    \tassertOrdering(getNames(persons), true);\r\n+    }\r\n+    \r\n+    public void testOrderByQueryDescending() {\r\n+    \tString jpql = \"SELECT p FROM Game p ORDER BY p.name DESC\";\r\n+    \tEntityManager em = emf.createEntityManager();\r\n+    \t\r\n+    \tList<Game> persons = em.createQuery(jpql).getResultList();\r\n+    \tassertOrdering(getNames(persons), false);\r\n+    }\r\n+    \r\n+    public void testOrderByQueryProjectionAscending() {\r\n+    \tString jpql = \"SELECT p.name FROM Game p ORDER BY p.name ASC\";\r\n+    \tEntityManager em = emf.createEntityManager();\r\n+    \t\r\n+    \tList<String> names = em.createQuery(jpql).getResultList();\r\n+    \tassertOrdering(names.toArray(new String[names.size()]), true);\r\n+    }\r\n+    \r\n+    public void testOrderByQueryProjectionDescending() {\r\n+    \tString jpql = \"SELECT p.name FROM Game p ORDER BY p.name DESC\";\r\n+    \tEntityManager em = emf.createEntityManager();\r\n+    \t\r\n+    \tList<String> names = em.createQuery(jpql).getResultList();\r\n+    \tassertOrdering(names.toArray(new String[names.size()]), false);\r\n+    }\r\n+    \r\n+\r\n+    \r\n+    public String[] getNames(List<Game> persons) {\r\n+    \tassertNotNull(persons);\r\n+    \tString[] names = new String[persons.size()];\r\n+    \tint i = 0;\r\n+    \tfor (Game p : persons) {\r\n+    \t\tnames[i++] = p.getName();\r\n+    \t}\r\n+    \treturn names;\r\n+    }\r\n+\r\n+    public void assertOrdering(String[] names, boolean ascending) {\r\n+    \tassertNotNull(names);\r\n+    \tassertTrue(names.length>0);\r\n+    \tfor (int i=1; i<names.length; i++) {\r\n+    \t\tif (ascending) {\r\n+    \t\t\tassertTrue(names[i].compareTo(names[i-1]) >= 0);\r\n+    \t\t} else {\r\n+    \t\t\tassertTrue(names[i].compareTo(names[i-1]) <= 0);\r\n+    \t\t}\r\n+    \t}\r\n+    }\r\n+}\r"}]}

