{"sha":"04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0OTAwZmU4NWM5MGI4NmUwYmVjYjViMmNiNTliYTRkMDhhZTRjZjg=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2008-12-18T20:39:06Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2008-12-18T20:39:06Z"},"message":"OPENJPA-819 Committing fix for NPE and corresponding test case contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@727813 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"985ca204e81147d4c6bbe1f11403a2d74375958d","url":"https://api.github.com/repos/apache/openjpa/git/trees/985ca204e81147d4c6bbe1f11403a2d74375958d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","html_url":"https://github.com/apache/openjpa/commit/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/comments","author":null,"committer":null,"parents":[{"sha":"78dda5c2b720872d3898b47f6af18f01f25746f1","url":"https://api.github.com/repos/apache/openjpa/commits/78dda5c2b720872d3898b47f6af18f01f25746f1","html_url":"https://github.com/apache/openjpa/commit/78dda5c2b720872d3898b47f6af18f01f25746f1"}],"stats":{"total":135,"additions":132,"deletions":3},"files":[{"sha":"d7a10545ccb73103ac280d068f4619e03c5fbbe7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","patch":"@@ -43,6 +43,7 @@\n import org.apache.openjpa.util.GeneratedClasses;\r\n import org.apache.openjpa.util.ImplHelper;\r\n import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n import org.apache.openjpa.util.UserException;\r\n import serp.bytecode.BCClass;\r\n \r\n@@ -133,10 +134,16 @@ public void write(BCClass bc) throws IOException {\n \r\n             // set this before enhancement as well as after since enhancement\r\n             // uses a different metadata repository, and the metadata config\r\n-            // matters in the enhancement contract. Don't do any warning here,\r\n+            // matters in the enhancement contract. In order to avoid a \r\n+            // NullPointerException, check for no metadata and throw an\r\n+            // exception if none exists. Otherwise, don't do any warning here,\r\n             // since we'll issue warnings when we do the final metadata\r\n             // reconfiguration at the end of this method.\r\n-            configureMetaData(enhancer.getMetaData(), conf, redefine, false);\r\n+            ClassMetaData meta = enhancer.getMetaData();\r\n+            if (meta == null) {\r\n+                throw new MetaDataException(_loc.get(\"no-meta\", cls)).setFatal(true);\r\n+            }\r\n+            configureMetaData(meta, conf, redefine, false);\r\n \r\n             unspecified = collectRelatedUnspecifiedTypes(enhancer.getMetaData(),\r\n                 classes, unspecified);\r"},{"sha":"bfcedb60512b0d27333fb64f9aa8e7c32bd6b5b7","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","patch":"@@ -16,7 +16,9 @@\n # under the License.  \n \n copy-no-oid: Cannot copy identity for abstract type \"{0}\".\n-no-meta: No registered metadata for type \"{0}\".\n+no-meta: No registered metadata for type \"{0}\". This can happen if this \\\n+    class has not been annotated as a persistent entity or specified in the \\\n+    persistence unit (ex: in the orm.xml). \n bad-getter: Missing getter for property \"{1}\" in type \"{0}\". \n bad-setter: Missing setter for property \"{1}\" in type \"{0}\". \n bad-field: Missing field for property \"{1}\" in type \"{0}\"."},{"sha":"b21fd2428c5870250f9fa4c337bd391b6f199533","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java","raw_url":"https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+// This class specifically does NOT have @Entity specified for it since it is\n+// used by the TestMissingMetaData test case.\n+public class Animal {\n+    private String name;\n+    \n+    public Animal() {\n+    }\n+}"},{"sha":"7286f85f09a392c8926130d19e52870bf616aa6b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+// This test case extends TestCase directly instead of SingleEMTestCase with the\n+// corresponding setup() method because that scheme goes down a different code\n+// path and doesn't test the intended code change.\n+public class TestMissingMetaData extends TestCase {\n+    private OpenJPAEntityManagerFactory emf;\n+\n+    public void setUp() {\n+        // This test case uses a different persistence xml file because\n+        // modifying the current persistence.xml file with a bad class would\n+        // cause the TestEnhancementWithMultiplePUs test case to fail.\n+        emf = OpenJPAPersistence.createEntityManagerFactory(\n+            \"test-missing-metadata\", \"persistence2.xml\");\n+    }\n+    \n+    public void testMissingMetaData() {\n+        String msg =\n+            \"No registered metadata for type \" +\n+            \"\\\"class org.apache.openjpa.persistence.simple.Animal\\\".\";\n+        try {\n+            emf.createEntityManager();\n+            fail(\"didn't receive expected ArgumentException - \" + msg);\n+        } catch (Exception e) {\n+            assertEquals(ArgumentException.class,e.getClass());\n+            assertTrue(e.getMessage().startsWith(msg));\n+        }\n+    }\n+    \n+    public void tearDown() {\n+        emf.close();\n+    }\n+    \n+    public static void main(String[] args) {\n+        TestRunner.run(TestMissingMetaData.class);\n+\n+    }\n+\n+}"},{"sha":"5b1994e6582039befe90490b7eab37ac02c9f373","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml","raw_url":"https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8","patch":"@@ -0,0 +1,28 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\">\n+    \n+    <persistence-unit name=\"test-missing-metadata\">\n+    \t<class>org.apache.openjpa.persistence.simple.Animal</class>\n+    </persistence-unit>\n+    \n+</persistence>"}]}

