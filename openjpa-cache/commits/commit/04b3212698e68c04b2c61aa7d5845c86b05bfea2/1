{"sha":"04b3212698e68c04b2c61aa7d5845c86b05bfea2","node_id":"MDY6Q29tbWl0MjA2MzY0OjA0YjMyMTI2OThlNjhjMDRiMmM2MWFhN2Q1ODQ1Yzg2YjA1YmZlYTI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-11T17:59:38Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-11T17:59:38Z"},"message":"OPENJPA-360 SQL FOR UPDATE OF incorrectly generated for DB2 UDB version8.1 or earlier and DB2 ISeries V5R3 or earlier.\nThese  DB2 version also require the \"optimize for <n> row\" clause appear before FOR UPDATE clause.\nDue to this requirement, the OPTIMIZE clause will  appear before FOR UPDATE clause for all DB2 versions.\nAlso fixed the affected testcases.\nSame fix retrofit to OpenJPA 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@574653 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e1c1186d5c097e4415b92fb0b08355426c93ec0","url":"https://api.github.com/repos/apache/openjpa/git/trees/4e1c1186d5c097e4415b92fb0b08355426c93ec0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/04b3212698e68c04b2c61aa7d5845c86b05bfea2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/04b3212698e68c04b2c61aa7d5845c86b05bfea2","html_url":"https://github.com/apache/openjpa/commit/04b3212698e68c04b2c61aa7d5845c86b05bfea2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/04b3212698e68c04b2c61aa7d5845c86b05bfea2/comments","author":null,"committer":null,"parents":[{"sha":"25936c82e851d834cb34ebd227f34f15577b2cf1","url":"https://api.github.com/repos/apache/openjpa/commits/25936c82e851d834cb34ebd227f34f15577b2cf1","html_url":"https://github.com/apache/openjpa/commit/25936c82e851d834cb34ebd227f34f15577b2cf1"}],"stats":{"total":202,"additions":88,"deletions":114},"files":[{"sha":"ddc6a3f69aec36d234292588e398d91327f1cf35","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":27,"deletions":29,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=04b3212698e68c04b2c61aa7d5845c86b05bfea2","patch":"@@ -50,12 +50,12 @@\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n     protected int db2ServerType = 0;\r\n-    protected static final int db2ISeriesV5R3OrEarlier = 1;\r\n-    protected static final int db2UDBV81OrEarlier = 2;\r\n-    protected static final int db2ZOSV8xOrLater = 3;\r\n-    protected static final int db2UDBV82OrLater = 4;\r\n-    protected static final int db2ISeriesV5R4OrLater = 5;\r\n-\tprivate static final String forUpdateOfClause = \"FOR UPDATE OF\";\r\n+    public static final int db2ISeriesV5R3OrEarlier = 1;\r\n+    public static final int db2UDBV81OrEarlier = 2;\r\n+    public static final int db2ZOSV8xOrLater = 3;\r\n+    public static final int db2UDBV82OrLater = 4;\r\n+    public static final int db2ISeriesV5R4OrLater = 5;\r\n+\tprivate static final String forUpdate = \"FOR UPDATE\";\r\n     private static final String withRSClause = \"WITH RS\";\r\n     private static final String withRRClause = \"WITH RR\";\r\n     private static final String useKeepUpdateLockClause\r\n@@ -286,9 +286,12 @@ else if (isDB2UDBV82OrLater())\n      * updateClause and isolationLevel hints\r\n      */\r\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\r\n-        boolean forUpdate) {\r\n+        boolean isForUpdate) {\r\n         int isolationLevel;\r\n-        StringBuffer forUpdateString = new StringBuffer();\r\n+        // For db2UDBV81OrEarlier and db2ISeriesV5R3OrEarlier:\r\n+        // \"optimize for\" clause appears before \"for update\" clause.\r\n+        StringBuffer forUpdateString = new StringBuffer(\r\n+            getOptimizeClause(fetch));\r\n         try {\r\n             // Determine the isolationLevel; the fetch\r\n             // configuration data overrides the persistence.xml value\r\n@@ -297,16 +300,15 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n             else\r\n                 isolationLevel = conf.getTransactionIsolationConstant();\r\n \r\n-            if (forUpdate) {\r\n+            if (isForUpdate) {\r\n                 switch(db2ServerType) {\r\n                 case db2ISeriesV5R3OrEarlier:\r\n                 case db2UDBV81OrEarlier:\r\n-                    if (isolationLevel ==\r\n-                        Connection.TRANSACTION_READ_UNCOMMITTED) {\r\n-                        forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(forUpdateOfClause);\r\n-                    } else\r\n-                        forUpdateString.append(\" \").append(forUpdateOfClause);\r\n+                    if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE)\r\n+                        forUpdateString.append(\" \").append(forUpdateClause);\r\n+                    else \r\n+                        forUpdateString.append(\" \").append(forUpdate)\r\n+                            .append(\" \").append(withRSClause);\r\n                     break;\r\n                 case db2ZOSV8xOrLater:\r\n                 case db2UDBV82OrLater:\r\n@@ -341,7 +343,7 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         return forUpdateString.toString();\r\n     }\r\n \r\n-    public boolean isDB2UDBV82OrLater() throws SQLException {\r\n+    public boolean isDB2UDBV82OrLater() {\r\n         boolean match = false;\r\n         if ((databaseProductVersion.indexOf(\"SQL\") != -1\r\n             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n@@ -350,8 +352,7 @@ public boolean isDB2UDBV82OrLater() throws SQLException {\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ZOSV8xOrLater()\r\n-       throws SQLException {\r\n+    public boolean isDB2ZOSV8xOrLater() {\r\n        boolean match = false;\r\n        if ((databaseProductVersion.indexOf(\"DSN\") != -1\r\n            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n@@ -360,25 +361,23 @@ public boolean isDB2ZOSV8xOrLater()\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R3OrEarlier()\r\n-       throws SQLException {\r\n+    public boolean isDB2ISeriesV5R3OrEarlier() {\r\n        boolean match = false;\r\n        if (databaseProductName.indexOf(\"AS\") != -1\r\n            && ((maj == 5 && min <=3) || maj < 5))\r\n            match = true;\r\n        return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R4OrLater()\r\n-       throws SQLException {\r\n+    public boolean isDB2ISeriesV5R4OrLater() {\r\n        boolean match = false;\r\n        if (databaseProductName.indexOf(\"AS\") != -1\r\n            && (maj >=6 || (maj == 5 && min >=4)))\r\n            match = true;\r\n       return match;\r\n     }\r\n \r\n-    public boolean isDB2UDBV81OrEarlier() throws SQLException {\r\n+    public boolean isDB2UDBV81OrEarlier() {\r\n         boolean match = false;\r\n         if ((databaseProductVersion.indexOf(\"SQL\") != -1 \r\n            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n@@ -438,17 +437,16 @@ private void getProductVersionMajorMinor() {\n         }\r\n     }\r\n \r\n-    public SQLBuffer toSelect(Select sel, boolean forUpdate,\r\n-        JDBCFetchConfiguration fetch) {\r\n-        SQLBuffer buf = super.toSelect(sel, forUpdate, fetch);\r\n-\r\n-        if (sel.getExpectedResultCount() > 0) {\r\n+    protected String getOptimizeClause(JDBCFetchConfiguration fetch) {\r\n+        if (sel != null && sel.getExpectedResultCount() > 0) {\r\n+            StringBuffer buf = new StringBuffer();\r\n             buf.append(\" \").append(optimizeClause).append(\" \")\r\n                 .append(String.valueOf(sel.getExpectedResultCount()))\r\n                 .append(\" \").append(rowClause);\r\n+            return buf.toString();\r\n         }\r\n \r\n-        return buf;\r\n+        return \"\";\r\n     }\r\n \r\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\r"},{"sha":"de77e261290a100cab0a201442e20e57c899eb0c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=04b3212698e68c04b2c61aa7d5845c86b05bfea2","patch":"@@ -319,6 +319,7 @@\n     private Method _setBytes = null;\n     private Method _setString = null;\n     private Method _setCharStream = null;\n+    protected transient Select sel = null;\n \n     public DBDictionary() {\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n@@ -1982,6 +1983,7 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n      */\n     public SQLBuffer toSelect(Select sel, boolean forUpdate,\n         JDBCFetchConfiguration fetch) {\n+        this.sel = sel;\n         sel.addJoinClassConditions();\n         boolean update = forUpdate && sel.getFromSelect() == null;\n         SQLBuffer select = getSelects(sel, false, update);\n@@ -2192,11 +2194,11 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n      * updateClause and isolationLevel hints\n      */\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n-        boolean forUpdate) {\n+        boolean isForUpdate) {\n         if (fetch != null && fetch.getIsolation() != -1) {\n             throw new InvalidStateException(_loc.get(\n                 \"isolation-level-config-not-supported\", getClass().getName()));\n-        } else if (forUpdate && !simulateLocking) {\n+        } else if (isForUpdate && !simulateLocking) {\n             assertSupport(supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n             return forUpdateClause;\n         } else {\n@@ -3893,5 +3895,4 @@ public String getVersionColumn(Column column, String tableAlias) {\n     public String getCastFunction(Val val, String func) {\n         return func;\n     }\n-   \n }"},{"sha":"41c0298fb2d6920bedffee052d518482974b6674","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":21,"deletions":47,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=04b3212698e68c04b2c61aa7d5845c86b05bfea2","patch":"@@ -81,37 +81,23 @@ public void testIsolationLevelOverride(boolean useHintsAndQueries,\n \n                 q.getResultList();\n                 if (dict instanceof DB2Dictionary) {\n-                    if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n-                        || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n+                    int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                    if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                        || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField, \"\n-                            + \"t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                            + \" FOR UPDATE OF\");\n+                        assertContainsSQL(\" FOR UPDATE\");\n                     }\n                     // it is DB2 v82 or later\n-                    else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n-                        || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n+                    else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                        || db2server == DB2Dictionary.db2UDBV82OrLater) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField, \"\n-                            + \"t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                            + \" FOR READ ONLY WITH RR USE AND KEEP \" \n+                        assertContainsSQL(\" FOR READ ONLY WITH RR USE AND KEEP \" \n                             + \"UPDATE LOCKS\");\n                     }\n-                    else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n+                    else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField, \"\n-                            + \"t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                            + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE \" \n-                            + \"LOCKS\");\n+                        assertContainsSQL(\" FOR READ ONLY WITH RR USE AND KEEP\" \n+                            + \" EXCLUSIVE LOCKS\");\n                     }    \n                     else {\n                         fail(\"OpenJPA currently only supports \" \n@@ -124,37 +110,25 @@ else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n                     .setIsolation(IsolationLevel.SERIALIZABLE);\n                 em.find(AllFieldTypes.class, 0);\n                 if (dict instanceof DB2Dictionary ) {\n-                    if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n-                        || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n+                    int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                    if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                        || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField,\"\n-                            + \" t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                            + \" FOR UPDATE OF optimize for 1 row\");\n+                        assertContainsSQL(\" optimize for 1 row FOR UPDATE\");\n                     }\n                     // it is DB2 v82 or later\n-                    else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n-                        || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n+                    else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                        || db2server == DB2Dictionary.db2UDBV82OrLater) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField,\"\n-                            + \" t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        assertContainsSQL(\" optimize for 1 row\"\n                             + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\" \n-                            + \" optimize for 1 row\");\n+                            );\n                     }\n-                    else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n+                    else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n                         assertEquals(1, sql.size());\n-                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                            + \" t0.floatField, t0.intField, t0.longField,\"\n-                            + \" t0.shortField, t0.stringField FROM \"\n-                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        assertContainsSQL(\" optimize for 1 row\"\n                             + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE\" \n-                            + \" LOCKS optimize for 1 row\");\n+                            + \" LOCKS\");\n                     }    \n                     else {\n                         fail(\"OpenJPA currently only supports per-query\" "},{"sha":"c8ba92349078a8b2061d2a480a987da3900919db","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","raw_url":"https://github.com/apache/openjpa/raw/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java?ref=04b3212698e68c04b2c61aa7d5845c86b05bfea2","patch":"@@ -81,22 +81,14 @@ public void testOptimizeForClause(boolean hint,\n                }     \r\n                if (dict instanceof DB2Dictionary) {\r\n                    assertEquals(1, sql.size());\r\n-                   assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\" +\r\n-                       \" t0.charField, t0.dateField, t0.doubleField, \" +\r\n-                       \"t0.floatField, t0.intField, t0.longField, \" +\r\n-                       \"t0.shortField, t0.stringField FROM AllFieldTypes \" +\r\n-                       \"t0 WHERE \\\\(t0.intField = \\\\?\\\\)  optimize for 8 row\");\r\n+                   assertContainsSQL(\" optimize for 8 row\");\r\n                }\r\n             }\r\n             else {\r\n                  em.find(AllFieldTypes.class, 0);\r\n                  if (dict instanceof DB2Dictionary ) {\r\n                     assertEquals(1, sql.size());\r\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \" +\r\n-                        \"t0.charField, t0.dateField, t0.doubleField, \" +\r\n-                        \"t0.floatField, t0.intField, t0.longField, \" +\r\n-                        \"t0.shortField, t0.stringField FROM AllFieldTypes\" +\r\n-                        \" t0 WHERE t0.id = \\\\?  optimize for 1 row\");\r\n+                    assertContainsSQL(\" optimize for 1 row\");\r\n                 }\r\n                    \r\n             }\r"},{"sha":"8195982e15e28207be7013b1b703136086379406","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"modified","additions":19,"deletions":25,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=04b3212698e68c04b2c61aa7d5845c86b05bfea2","patch":"@@ -33,7 +33,14 @@\n     extends SQLListenerTestCase {\n \n     public void setUp() {\n-        setUp(AllFieldTypes.class,\n+        setUp(\n+//                \"openjpa.ConnectionDriverName\", \n+//                \"org.apache.commons.dbcp.BasicDataSource\",\n+                \n+                \"openjpa.ConnectionProperties\",\n+                \"DriverClassName=com.ibm.db2.jcc.DB2Driver,Url=jdbc:db2:demodb\"\n+                ,\"openjpa.jdbc.SynchronizeMappings\",\n+                AllFieldTypes.class,\n             \"openjpa.Optimistic\", \"false\",\n             \"openjpa.LockManager\", \"pessimistic\",\n             \"openjpa.ReadLockLevel\", \"none\");\n@@ -57,37 +64,24 @@ public void testSelectForUpdateOverride() {\n             em.find(AllFieldTypes.class, 0);\n             assertEquals(1, sql.size());\n             if (dict instanceof DB2Dictionary) {\n-                if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n-                    || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n+                int db2server = ((DB2Dictionary) dict).getDb2ServerType();\n+                if (db2server == DB2Dictionary.db2ISeriesV5R3OrEarlier\n+                    || db2server == DB2Dictionary.db2UDBV81OrEarlier) {\n                     assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                        + \" FOR UPDATE OF optimize for 1 row\");\n+                    assertContainsSQL(\" optimize for 1 row FOR UPDATE\");\n                 }\n                 // it is DB2 v82 or later\n-                else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n-                    || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n+                else if (db2server == DB2Dictionary.db2ZOSV8xOrLater\n+                    || db2server == DB2Dictionary.db2UDBV82OrLater) {\n                     assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                        + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\" \n-                        + \" optimize for 1 row\");\n+                    assertContainsSQL(\" optimize for 1 row\"\n+                        + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\");\n                 }\n-                else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n+                else if (db2server == DB2Dictionary.db2ISeriesV5R4OrLater) {\n                     assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                    assertContainsSQL(\" optimize for 1 row\"\n                         + \" FOR READ ONLY WITH RS USE AND KEEP EXCLUSIVE LOCKS\"\n-                        + \" optimize for 1 row\");\n+                        );\n                 }    \n                 else {\n                     fail(\"OpenJPA currently only supports per-query isolation \" "},{"sha":"f091b7ec5b6731359193bc1624bc1c3e1351c019","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/04b3212698e68c04b2c61aa7d5845c86b05bfea2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java?ref=04b3212698e68c04b2c61aa7d5845c86b05bfea2","patch":"@@ -78,6 +78,21 @@ public void assertNotSQL(String sqlExp) {\n                 + \" should not have been executed in SQL statements: \" + sql);\n     }\n \n+    /**\n+     * Confirm that the executed SQL String contains the specified sqlExp.\n+     *\n+     * @param sqlExp the SQL expression. E.g., \"SELECT BADCOLUMN .*\"\n+     */\n+    public void assertContainsSQL(String sqlExp) {\n+        for (String statement : sql) {\n+            if (statement.contains(sqlExp))\n+                return;\n+        }\n+\n+        fail(\"Expected regular expression <\" + sqlExp + \"> to be\"\n+            + \" contained in SQL statements: \" + sql);\n+    }\n+\n     public class Listener\n         extends AbstractJDBCListener {\n "}]}

