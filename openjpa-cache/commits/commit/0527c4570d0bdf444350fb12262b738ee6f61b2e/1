{"sha":"0527c4570d0bdf444350fb12262b738ee6f61b2e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1MjdjNDU3MGQwYmRmNDQ0MzUwZmIxMjI2MmI3MzhlZTZmNjFiMmU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-02-05T21:18:31Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-02-05T21:18:31Z"},"message":"OPENJPA-2467: Fix detection of property access method names. Patch contributed by Dalia Abo Sheasha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1564931 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e95a18f15e0d9cf5f741515b72e27bfe32e46cff","url":"https://api.github.com/repos/apache/openjpa/git/trees/e95a18f15e0d9cf5f741515b72e27bfe32e46cff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0527c4570d0bdf444350fb12262b738ee6f61b2e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0527c4570d0bdf444350fb12262b738ee6f61b2e","html_url":"https://github.com/apache/openjpa/commit/0527c4570d0bdf444350fb12262b738ee6f61b2e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0527c4570d0bdf444350fb12262b738ee6f61b2e/comments","author":null,"committer":null,"parents":[{"sha":"bcf46e516c7aab1b7a1412340c09d01101b96fd3","url":"https://api.github.com/repos/apache/openjpa/commits/bcf46e516c7aab1b7a1412340c09d01101b96fd3","html_url":"https://github.com/apache/openjpa/commit/bcf46e516c7aab1b7a1412340c09d01101b96fd3"}],"stats":{"total":596,"additions":588,"deletions":8},"files":[{"sha":"f0ff6ac30cc45ef8dce71d21ed54df354449a28c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java?ref=0527c4570d0bdf444350fb12262b738ee6f61b2e","patch":"@@ -398,14 +398,24 @@ else if (fmd.getDeclaredTypeCode() == JavaTypes.COLLECTION ||\n                 code.append(\"is\");\n             else\n                 code.append(\"get\");\n-            code.append(capFieldName).parens();\n+            if (fieldName.length() > 1 && Character.isLowerCase(fieldName.charAt(0))\n+                && Character.isUpperCase(fieldName.charAt(1))) {\n+                code.append(fieldName).parens();\n+            } else {\n+                code.append(capFieldName).parens();\n+            }\n             code.openBrace(2).endl();\n             code.tab(2).append(\"return \").append(fieldName).\n                 append(\";\").endl();\n             code.closeBrace(2).afterSection();\n \n             // setter\n-            code.tab().append(\"public void set\").append(capFieldName);\n+            if (fieldName.length() > 1 && Character.isLowerCase(fieldName.charAt(0))\n+                && Character.isUpperCase(fieldName.charAt(1))) {\n+                code.tab().append(\"public void set\").append(fieldName);\n+            } else {\n+                code.tab().append(\"public void set\").append(capFieldName);\n+            }\n             code.openParen(true).append(fieldType).append(paramType).\n                 append(\" \").append(propertyName).closeParen();\n             code.openBrace(2).endl();"},{"sha":"e6f592f24fccfcd6639377e4148c08e3187471c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=0527c4570d0bdf444350fb12262b738ee6f61b2e","patch":"@@ -806,7 +806,7 @@ private void addAttributeTranslation() {\n      * Return the name of the setter method for the given field.\n      */\n     private static String getSetterName(FieldMetaData fmd) {\n-        return \"set\" + StringUtils.capitalize(fmd.getName());\n+        return fmd.getSetterName();\n     }\n \n     /**"},{"sha":"9765de30f8b5bcc261335278cbcd95e36533e99e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=0527c4570d0bdf444350fb12262b738ee6f61b2e","patch":"@@ -123,6 +123,19 @@ public static Method findGetter(Class cls, String prop, boolean mustExist) {\n                         || m.getReturnType() == Boolean.class)) {\n                         setGetterMethod(cls, prop, m);\n                         return m;\n+                    } else {\n+                        m = getDeclaredMethod(c, \"get\" + prop, null);\n+                        if (m != null) {\n+                            setGetterMethod(cls, prop, m);\n+                            return m;\n+                        } else {\n+                            m = getDeclaredMethod(c, \"is\" + prop, null);\n+                            if (m != null \n+                                    && (m.getReturnType() == boolean.class || m.getReturnType() == Boolean.class)) {\n+                                setGetterMethod(cls, prop, m);\n+                                return m;\n+                            }\n+                        }\n                     }\n                 }\n             }"},{"sha":"4e5824dd4c3e85b633796833bde375c00803f81b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=0527c4570d0bdf444350fb12262b738ee6f61b2e","patch":"@@ -2446,4 +2446,26 @@ public boolean getUseSchemaElement() {\n     public void setUseSchemaElement(boolean _useSchemaElement) {\n         this._useSchemaElement = _useSchemaElement;\n     }\n+\n+    public String getSetterName() {\n+        String setterName = \"set\" + StringUtils.capitalize(_name);\n+        if (_name.length() > 1 && Character.isLowerCase(_name.charAt(0)) && Character.isUpperCase(_name.charAt(1))) {\n+            // We have the special case where the first char is lower, and the\n+            // following char is capital. We need to support using the\n+            // setaStart() (correct) and setAStart() (incorrect -- old way)\n+            Class<?> type = getDeclaringMetaData().getDescribedType();\n+            setterName = \"set\" + _name;\n+            try {\n+                type.getDeclaredMethod(setterName, getType());\n+                return setterName;\n+            } catch (Exception e) {\n+            }\n+            setterName = \"set\" + StringUtils.capitalize(_name);\n+            try {\n+                type.getDeclaredMethod(setterName, getType());\n+            } catch (Exception e) {\n+            }\n+        }\n+        return setterName;\n+    }\n }"},{"sha":"8281172b1782c11a50171e37e3d41e101ff6d346","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/PropertyAccessCapitalization.java","status":"added","additions":217,"deletions":0,"changes":217,"blob_url":"https://github.com/apache/openjpa/blob/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/PropertyAccessCapitalization.java","raw_url":"https://github.com/apache/openjpa/raw/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/PropertyAccessCapitalization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/PropertyAccessCapitalization.java?ref=0527c4570d0bdf444350fb12262b738ee6f61b2e","patch":"@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.access;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"CAPITALIZATION_TABLE\")\n+public class PropertyAccessCapitalization {\n+    private long id;\n+    private int word;\n+    private int aWord;\n+    private int aaWord;\n+    private int aaaWord;\n+    private int CAPITAL;\n+    private int aCAPITAL;\n+    private int Another;\n+    private int a1;\n+    private int B1;\n+    private int a;\n+    private int B;\n+    private boolean aBoolean;\n+    private boolean BBoolean;\n+    private boolean BOOLEAN;\n+    private boolean Bool;\n+\n+    public int getaCAPITAL() {\n+        return aCAPITAL;\n+    }\n+\n+    public void setaCAPITAL(int aCAPITAL) {\n+        this.aCAPITAL = aCAPITAL;\n+    }\n+\n+    public int getA1() {\n+        return a1;\n+    }\n+\n+    public void setA1(int a1) {\n+        this.a1 = a1;\n+    }\n+\n+    public int getA() {\n+        return a;\n+    }\n+\n+    public void setA(int a) {\n+        this.a = a;\n+    }\n+\n+    @Id\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public int getWord() {\n+        return word;\n+    }\n+\n+    public void setWord(int word) {\n+        this.word = word;\n+    }\n+\n+    public int getaWord() {\n+        return aWord;\n+    }\n+\n+    public void setaWord(int aWord) {\n+        this.aWord = aWord;\n+    }\n+\n+    public int getAaWord() {\n+        return aaWord;\n+    }\n+\n+    public void setAaWord(int aaWord) {\n+        this.aaWord = aaWord;\n+    }\n+\n+    public int getAaaWord() {\n+        return aaaWord;\n+    }\n+\n+    public void setAaaWord(int aaaWord) {\n+        this.aaaWord = aaaWord;\n+    }\n+\n+    public int getCAPITAL() {\n+        return CAPITAL;\n+    }\n+\n+    public void setCAPITAL(int cAPITAL) {\n+        CAPITAL = cAPITAL;\n+    }\n+\n+    public int getB1() {\n+        return B1;\n+    }\n+\n+    public void setB1(int b1) {\n+        B1 = b1;\n+    }\n+\n+    public int getB() {\n+        return B;\n+    }\n+\n+    public void setB(int b) {\n+        B = b;\n+    }\n+\n+    public int getAnother() {\n+        return Another;\n+    }\n+\n+    public void setAnother(int another) {\n+        Another = another;\n+    }\n+\n+    public boolean isaBoolean() {\n+        return aBoolean;\n+    }\n+\n+    public void setaBoolean(boolean aBoolean) {\n+        this.aBoolean = aBoolean;\n+    }\n+\n+    public boolean isBBoolean() {\n+        return BBoolean;\n+    }\n+\n+    public void setBBoolean(boolean bBoolean) {\n+        BBoolean = bBoolean;\n+    }\n+\n+    public boolean isBOOLEAN() {\n+        return BOOLEAN;\n+    }\n+\n+    public void setBOOLEAN(boolean bOOLEAN) {\n+        BOOLEAN = bOOLEAN;\n+    }\n+\n+    public boolean isBool() {\n+        return Bool;\n+    }\n+\n+    public void setBool(boolean bool) {\n+        Bool = bool;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        PropertyAccessCapitalization other = (PropertyAccessCapitalization) obj;\n+        if (getAnother() != other.getAnother())\n+            return false;\n+        if (getB() != other.getB())\n+            return false;\n+        if (getB1() != other.getB1())\n+            return false;\n+        if (isBBoolean() != other.isBBoolean())\n+            return false;\n+        if (isBOOLEAN() != other.isBOOLEAN())\n+            return false;\n+        if (isBool() != other.isBool())\n+            return false;\n+        if (getCAPITAL() != other.getCAPITAL())\n+            return false;\n+        if (getA() != other.getA())\n+            return false;\n+        if (getA1() != other.getA1())\n+            return false;\n+        if (isaBoolean() != other.isaBoolean())\n+            return false;\n+        if (getaCAPITAL() != other.getaCAPITAL())\n+            return false;\n+        if (getaWord() != other.getaWord())\n+            return false;\n+        if (getAaWord() != other.getAaWord())\n+            return false;\n+        if (getAaaWord() != other.getAaaWord())\n+            return false;\n+        if (getId() != other.getId())\n+            return false;\n+        if (getWord() != other.getWord())\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"bedbe4928d6e2c1e3428969bef79a09dd4012455","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/PropertyAccessCapitalizationOldBehavior.java","status":"added","additions":220,"deletions":0,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/PropertyAccessCapitalizationOldBehavior.java","raw_url":"https://github.com/apache/openjpa/raw/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/PropertyAccessCapitalizationOldBehavior.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/PropertyAccessCapitalizationOldBehavior.java?ref=0527c4570d0bdf444350fb12262b738ee6f61b2e","patch":"@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.access;\n+\n+import javax.persistence.Access;\n+import javax.persistence.AccessType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"CAPITALIZATION_OLD_BEHAVIOR_TABLE\")\n+@Access(AccessType.PROPERTY)\n+public class PropertyAccessCapitalizationOldBehavior {\n+    private long id;\n+    private int word;\n+    private int aWord;\n+    private int aaWord;\n+    private int aaaWord;\n+    private int CAPITAL;\n+    private int aCAPITAL;\n+    private int Another;\n+    private int a1;\n+    private int B1;\n+    private int a;\n+    private int B;\n+    private boolean aBoolean;\n+    private boolean BBoolean;\n+    private boolean BOOLEAN;\n+    private boolean Bool;\n+\n+    public int getAWord() {\n+        return aWord;\n+    }\n+\n+    public void setAWord(int aWord) {\n+        this.aWord = aWord;\n+    }\n+\n+    @Id\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public int getWord() {\n+        return word;\n+    }\n+\n+    public void setWord(int word) {\n+        this.word = word;\n+    }\n+\n+    public int getAaWord() {\n+        return aaWord;\n+    }\n+\n+    public void setAaWord(int aaWord) {\n+        this.aaWord = aaWord;\n+    }\n+\n+    public int getAaaWord() {\n+        return aaaWord;\n+    }\n+\n+    public void setAaaWord(int aaaWord) {\n+        this.aaaWord = aaaWord;\n+    }\n+\n+    public int getCAPITAL() {\n+        return CAPITAL;\n+    }\n+\n+    public void setCAPITAL(int cAPITAL) {\n+        CAPITAL = cAPITAL;\n+    }\n+\n+    public int getACAPITAL() {\n+        return aCAPITAL;\n+    }\n+\n+    public void setACAPITAL(int aCAPITAL) {\n+        this.aCAPITAL = aCAPITAL;\n+    }\n+\n+    public int getA1() {\n+        return a1;\n+    }\n+\n+    public void setA1(int a1) {\n+        this.a1 = a1;\n+    }\n+\n+    public int getA() {\n+        return a;\n+    }\n+\n+    public void setA(int a) {\n+        this.a = a;\n+    }\n+\n+    public int getB1() {\n+        return B1;\n+    }\n+\n+    public void setB1(int b1) {\n+        B1 = b1;\n+    }\n+\n+    public int getB() {\n+        return B;\n+    }\n+\n+    public void setB(int b) {\n+        B = b;\n+    }\n+\n+    public int getAnother() {\n+        return Another;\n+    }\n+\n+    public void setAnother(int another) {\n+        Another = another;\n+    }\n+\n+    public boolean isABoolean() {\n+        return aBoolean;\n+    }\n+\n+    public void setABoolean(boolean aBoolean) {\n+        this.aBoolean = aBoolean;\n+    }\n+\n+    public boolean isBBoolean() {\n+        return BBoolean;\n+    }\n+\n+    public void setBBoolean(boolean bBoolean) {\n+        BBoolean = bBoolean;\n+    }\n+\n+    public boolean isBOOLEAN() {\n+        return BOOLEAN;\n+    }\n+\n+    public void setBOOLEAN(boolean bOOLEAN) {\n+        BOOLEAN = bOOLEAN;\n+    }\n+\n+    public boolean isBool() {\n+        return Bool;\n+    }\n+\n+    public void setBool(boolean bool) {\n+        Bool = bool;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        PropertyAccessCapitalizationOldBehavior other = (PropertyAccessCapitalizationOldBehavior) obj;\n+        if (getAnother() != other.getAnother())\n+            return false;\n+        if (getB() != other.getB())\n+            return false;\n+        if (getB1() != other.getB1())\n+            return false;\n+        if (isBBoolean() != other.isBBoolean())\n+            return false;\n+        if (isBOOLEAN() != other.isBOOLEAN())\n+            return false;\n+        if (isBool() != other.isBool())\n+            return false;\n+        if (getCAPITAL() != other.getCAPITAL())\n+            return false;\n+        if (getA() != other.getA())\n+            return false;\n+        if (getA1() != other.getA1())\n+            return false;\n+        if (isABoolean() != other.isABoolean())\n+            return false;\n+        if (getACAPITAL() != other.getACAPITAL())\n+            return false;\n+        if (getAWord() != other.getAWord())\n+            return false;\n+        if (getAaWord() != other.getAaWord())\n+            return false;\n+        if (getAaaWord() != other.getAaaWord())\n+            return false;\n+        if (getId() != other.getId())\n+            return false;\n+        if (getWord() != other.getWord())\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"fc2d4644c2abedb52444be545422d52578ccd615","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestPropertyAccessCapitalization.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestPropertyAccessCapitalization.java","raw_url":"https://github.com/apache/openjpa/raw/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestPropertyAccessCapitalization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestPropertyAccessCapitalization.java?ref=0527c4570d0bdf444350fb12262b738ee6f61b2e","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.access;\n+\n+import java.util.Random;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestPropertyAccessCapitalization extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(DROP_TABLES, PropertyAccessCapitalization.class, PropertyAccessCapitalizationOldBehavior.class);\n+    }\n+\n+    public void testCorrectCapitalization() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        PropertyAccessCapitalization entity = new PropertyAccessCapitalization();\n+        Random r = new Random();\n+        entity.setId(r.nextInt());\n+        entity.setWord(r.nextInt());\n+        entity.setaWord(r.nextInt());\n+        entity.setAaWord(r.nextInt());\n+        entity.setAaaWord(r.nextInt());\n+        entity.setCAPITAL(r.nextInt());\n+        entity.setaCAPITAL(r.nextInt());\n+        entity.setAnother(r.nextInt());\n+        entity.setA1(r.nextInt());\n+        entity.setB1(r.nextInt());\n+        entity.setA(r.nextInt());\n+        entity.setB(r.nextInt());\n+        entity.setaBoolean(true);\n+        entity.setBBoolean(true);\n+        entity.setBOOLEAN(true);\n+        entity.setBool(true);\n+\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        PropertyAccessCapitalization persistentEntity = em.find(PropertyAccessCapitalization.class, entity.getId());\n+        assertEquals(entity, persistentEntity);\n+    }\n+\n+    public void testOldCapitalization() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        PropertyAccessCapitalizationOldBehavior entity = new PropertyAccessCapitalizationOldBehavior();\n+        Random r = new Random();\n+        entity.setId(r.nextInt());\n+        entity.setWord(r.nextInt());\n+        entity.setAWord(r.nextInt());\n+        entity.setAaWord(r.nextInt());\n+        entity.setAaaWord(r.nextInt());\n+        entity.setCAPITAL(r.nextInt());\n+        entity.setACAPITAL(r.nextInt());\n+        entity.setAnother(r.nextInt());\n+        entity.setA1(r.nextInt());\n+        entity.setB1(r.nextInt());\n+        entity.setA(r.nextInt());\n+        entity.setB(r.nextInt());\n+        entity.setABoolean(true);\n+        entity.setBBoolean(true);\n+        entity.setBOOLEAN(true);\n+        entity.setBool(true);\n+\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        PropertyAccessCapitalizationOldBehavior persistentEntity =\n+            em.find(PropertyAccessCapitalizationOldBehavior.class, entity.getId());\n+        assertEquals(entity, persistentEntity);\n+    }\n+}"},{"sha":"2b8e61fcee9b256b0234aa224a19032ce45551d3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/0527c4570d0bdf444350fb12262b738ee6f61b2e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=0527c4570d0bdf444350fb12262b738ee6f61b2e","patch":"@@ -609,12 +609,16 @@ else if (member instanceof Method) {\n                     return false;\n             }            \n             try {\n+                String setterName; \n+                if (member.getName().startsWith(\"is\")) {\n+                    setterName = \"set\" + member.getName().substring(2);\n+                } else {\n+                    setterName = \"set\" + member.getName().substring(3);\n+                }\n                 // check for setters for methods\n-                Method setter = (Method) AccessController.doPrivileged(\n-                    J2DoPrivHelper.getDeclaredMethodAction(\n-                        meta.getDescribedType(), \"set\" +\n-                        StringUtils.capitalize(name), new Class[] { \n-                            ((Method) member).getReturnType() }));\n+                Method setter =\n+                    (Method) AccessController.doPrivileged(J2DoPrivHelper.getDeclaredMethodAction(\n+                        meta.getDescribedType(), setterName, new Class[] { ((Method) member).getReturnType() }));\n                 if (setter == null && !isAnnotatedTransient(member)) {\n                     logNoSetter(meta, name, null);\n                     return false;"}]}

