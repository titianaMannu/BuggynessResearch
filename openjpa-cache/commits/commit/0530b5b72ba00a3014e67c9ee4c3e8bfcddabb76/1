{"sha":"0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1MzBiNWI3MmJhMDBhMzAxNGU2N2M5ZWU0YzNlOGJmY2RkYWJiNzY=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2018-11-01T20:06:41Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2018-11-01T20:06:41Z"},"message":"OPENJPA-2755 OPENJPA-2555 support fractions of a second\n\nFor now just in MySQL. Should also get added to PostgreSQL.\nTxs also to Ancoron Luciferis for a patch which also\ngave some important input!","tree":{"sha":"105080eb5771936b21c3d775226914415c622724","url":"https://api.github.com/repos/apache/openjpa/git/trees/105080eb5771936b21c3d775226914415c622724"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76","html_url":"https://github.com/apache/openjpa/commit/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","url":"https://api.github.com/repos/apache/openjpa/commits/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","html_url":"https://github.com/apache/openjpa/commit/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e"}],"stats":{"total":156,"additions":127,"deletions":29},"files":[{"sha":"888e35ac966f9bcedf607250aa035c6315b206d4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76","patch":"@@ -432,7 +432,7 @@\n     /**\n      * set of types that only accept a single precision...\n      */\n-    protected final Set<String> fractionalTypeNameSet = new HashSet<>();\n+    public final Set<String> fractionalTypeNameSet = new HashSet<>();\n \n     /**\n      * Default amount of digits for fractional Types."},{"sha":"dc01b06ffb8fd3ca426ea57cdda0e697ccc2824f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","status":"modified","additions":72,"deletions":10,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","raw_url":"https://github.com/apache/openjpa/raw/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java?ref=0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76","patch":"@@ -35,6 +35,8 @@\n import java.util.List;\n import java.util.Locale;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\n@@ -45,6 +47,7 @@\n     private Date _date = null;\n     private Date _before = null;\n     private Date _after = null;\n+    private final Timestamp referenceTst = new Timestamp(10000000000L);\n \n     /**\n      * Creates a new instance of TestDateQueries\n@@ -74,12 +77,18 @@ public void setUp()\n         test.setTestDate(_date);\n \n         // prepare scale test fields\n-        Timestamp tst = new Timestamp(1000000000L);\n-        tst.setNanos(123456789);\n-        test.setTestDateMaxScale(tst);\n-        test.setTestDateScale0(tst);\n-        test.setTestDateScale3(tst);\n-        test.setTestDateScale6(tst);\n+        Timestamp tst = new Timestamp(referenceTst.getTime());\n+\n+        // we stay under 5 to avoid rounding issues with some databases\n+        tst.setNanos(123412341);\n+\n+        test.setTestTstMaxScale(tst);\n+        test.setTestTstScale0(tst);\n+        test.setTestTstScale3(tst);\n+        test.setTestTstScale6(tst);\n+        test.setTestDateMaxScale(new Date(tst.getTime()));\n+        test.setTestDateScale0(new Date(tst.getTime()));\n+        test.setTestDateScale3(new Date(tst.getTime()));\n \n         _pm.persist(test);\n \n@@ -108,18 +117,71 @@ public void testNotEquals() {\n     }\n \n     public void testDateScale() {\n-        Timestamp referenceTst = new Timestamp(1000000000L);\n+        DBDictionary dbDictionary = ((JDBCConfiguration) _pm.getConfiguration()).getDBDictionaryInstance();\n+        if (!dbDictionary.fractionalTypeNameSet.contains(dbDictionary.timestampTypeName)) {\n+            getLog().info(\"skipping testDateScale because DB doesn't support different fractions in timestamps\");\n+            return;\n+        }\n \n         Collection vals = executeQuery(\"testDate = :date\");\n         AllFieldTypesTest aft = (AllFieldTypesTest) vals.iterator().next();\n         assertNotNull(aft);\n \n-        long time = aft.getTestDateMaxScale().getTime();\n-        long nanos = aft.getTestDateMaxScale().getNanos();\n+        long time = aft.getTestTstMaxScale().getTime();\n+        long nanos = aft.getTestTstMaxScale().getNanos();\n \n         // cut of the ms\n-        assertEquals(referenceTst, time - (time%1000));\n+        assertEquals(referenceTst.getTime(), time - (time % 1000));\n+\n+        // we have to do some guessing as not every database\n+        // is able to store fractions of a second.\n+        int maxDigitsFromDb = getNonZeroDigits(nanos);\n+        if (maxDigitsFromDb >= 3) {\n+            {\n+                time = aft.getTestTstScale0().getTime();\n+                nanos = aft.getTestTstScale0().getNanos();\n+                assertEquals(referenceTst.getTime(), time - (time % 1000));\n+                assertEquals(0, getNonZeroDigits(nanos));\n+            }\n+\n+            {\n+                time = aft.getTestDateScale0().getTime();\n+                assertEquals(referenceTst.getTime(), time - (time % 1000));\n+            }\n+\n+            {\n+                time = aft.getTestTstScale3().getTime();\n+                nanos = aft.getTestTstScale3().getNanos();\n+                assertEquals(referenceTst.getTime(), time - (time % 1000));\n+                assertEquals(3, getNonZeroDigits(nanos));\n+            }\n+\n+            {\n+                time = aft.getTestDateMaxScale().getTime();\n+                assertEquals(referenceTst.getTime() + 123, time);\n+            }\n+\n+            {\n+                time = aft.getTestDateScale3().getTime();\n+                assertEquals(referenceTst.getTime() + 123, time);\n+            }\n+\n+        }\n+\n+        if (maxDigitsFromDb >= 6) {\n+            time = aft.getTestTstScale6().getTime();\n+            nanos = aft.getTestTstScale6().getNanos();\n+            assertEquals(referenceTst.getTime(), time - (time % 1000));\n+            assertEquals(6, getNonZeroDigits(nanos));\n+        }\n+    }\n+\n+    private int getNonZeroDigits(long val) {\n+        String sval = Long.toString(val);\n+        int digits = 0;\n+        for (; digits < sval.length() && sval.charAt(digits) != '0'; digits++);\n \n+        return digits;\n     }\n \n     public void testBefore() {"},{"sha":"22d09b56e83e4886bdbe96024aad8881fbc45715","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","status":"modified","additions":54,"deletions":18,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","raw_url":"https://github.com/apache/openjpa/raw/0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java?ref=0530b5b72ba00a3014e67c9ee4c3e8bfcddabb76","patch":"@@ -66,18 +66,31 @@\n \n     @Temporal(TemporalType.TIMESTAMP)\n     @Column(scale=-1)\n-    private Timestamp testDateScale0;\n+    private Timestamp testTstScale0;\n \n     @Temporal(TemporalType.TIMESTAMP)\n     @Column(scale=3)\n-    private Timestamp testDateScale3;\n+    private Timestamp testTstScale3;\n \n     @Temporal(TemporalType.TIMESTAMP)\n     @Column(scale=6)\n-    private Timestamp testDateScale6;\n+    private Timestamp testTstScale6;\n \n     @Temporal(TemporalType.TIMESTAMP)\n-    private Timestamp testDateMaxScale;\n+    private Timestamp testTstMaxScale;\n+\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @Column(scale=-1)\n+    private Date testDateScale0;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @Column(scale=3)\n+    private Date testDateScale3;\n+\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date testDateMaxScale;\n \n     private Object testObject;\n     private BigInteger testBigInteger;\n@@ -208,38 +221,61 @@ public void setTestBigDecimal(BigDecimal testBigDecimal) {\n         this.testBigDecimal = testBigDecimal;\n     }\n \n-    public Timestamp getTestDateScale0() {\n-        return testDateScale0;\n+    public Timestamp getTestTstScale0() {\n+        return testTstScale0;\n     }\n \n-    public void setTestDateScale0(Timestamp testDateScale0) {\n-        this.testDateScale0 = testDateScale0;\n+    public void setTestTstScale0(Timestamp testTstScale0) {\n+        this.testTstScale0 = testTstScale0;\n     }\n \n-    public Timestamp getTestDateScale3() {\n-        return testDateScale3;\n+    public Timestamp getTestTstScale3() {\n+        return testTstScale3;\n     }\n \n-    public void setTestDateScale3(Timestamp testDateScale3) {\n-        this.testDateScale3 = testDateScale3;\n+    public void setTestTstScale3(Timestamp testTstScale3) {\n+        this.testTstScale3 = testTstScale3;\n     }\n \n-    public Timestamp getTestDateScale6() {\n-        return testDateScale6;\n+    public Timestamp getTestTstScale6() {\n+        return testTstScale6;\n     }\n \n-    public void setTestDateScale6(Timestamp testDateScale6) {\n-        this.testDateScale6 = testDateScale6;\n+    public void setTestTstScale6(Timestamp testTstScale6) {\n+        this.testTstScale6 = testTstScale6;\n     }\n \n-    public Timestamp getTestDateMaxScale() {\n+    public Timestamp getTestTstMaxScale() {\n+        return testTstMaxScale;\n+    }\n+\n+    public void setTestTstMaxScale(Timestamp testTstMaxScale) {\n+        this.testTstMaxScale = testTstMaxScale;\n+    }\n+\n+    public Date getTestDateMaxScale() {\n         return testDateMaxScale;\n     }\n \n-    public void setTestDateMaxScale(Timestamp testDateMaxScale) {\n+    public void setTestDateMaxScale(Date testDateMaxScale) {\n         this.testDateMaxScale = testDateMaxScale;\n     }\n \n+    public Date getTestDateScale0() {\n+        return testDateScale0;\n+    }\n+\n+    public void setTestDateScale0(Date testDateScale0) {\n+        this.testDateScale0 = testDateScale0;\n+    }\n+\n+    public Date getTestDateScale3() {\n+        return testDateScale3;\n+    }\n+\n+    public void setTestDateScale3(Date testDateScale3) {\n+        this.testDateScale3 = testDateScale3;\n+    }\n \n     public void randomize(boolean objects, boolean blobs) {\n         testint = AbstractTestCase.randomInt().intValue();"}]}

