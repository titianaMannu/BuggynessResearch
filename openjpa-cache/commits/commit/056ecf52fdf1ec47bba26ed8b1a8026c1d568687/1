{"sha":"056ecf52fdf1ec47bba26ed8b1a8026c1d568687","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1NmVjZjUyZmRmMWVjNDdiYmEyNmVkOGIxYTgwMjZjMWQ1Njg2ODc=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-03T00:48:59Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-03T00:48:59Z"},"message":"Exception translation when a managed transaction completion even causes an \nerror.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@491994 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dde18c3d8d747a566dc230eb225fce5410fd472a","url":"https://api.github.com/repos/apache/openjpa/git/trees/dde18c3d8d747a566dc230eb225fce5410fd472a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/056ecf52fdf1ec47bba26ed8b1a8026c1d568687","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/056ecf52fdf1ec47bba26ed8b1a8026c1d568687","html_url":"https://github.com/apache/openjpa/commit/056ecf52fdf1ec47bba26ed8b1a8026c1d568687","comments_url":"https://api.github.com/repos/apache/openjpa/commits/056ecf52fdf1ec47bba26ed8b1a8026c1d568687/comments","author":null,"committer":null,"parents":[{"sha":"a255da6f654abbe8e70783a0b492bf64656cc2a1","url":"https://api.github.com/repos/apache/openjpa/commits/a255da6f654abbe8e70783a0b492bf64656cc2a1","html_url":"https://github.com/apache/openjpa/commit/a255da6f654abbe8e70783a0b492bf64656cc2a1"}],"stats":{"total":19,"additions":14,"deletions":5},"files":[{"sha":"daa053424c591b8e79736c4f659ecd456dde0075","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/056ecf52fdf1ec47bba26ed8b1a8026c1d568687/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/056ecf52fdf1ec47bba26ed8b1a8026c1d568687/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=056ecf52fdf1ec47bba26ed8b1a8026c1d568687","patch":"@@ -1757,11 +1757,11 @@ public void beforeCompletion() {\n         } catch (OpenJPAException ke) {\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"end-trans-error\"), ke);\n-            throw ke;\n+            throw translateManagedCompletionException(ke);\n         } catch (RuntimeException re) {\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"end-trans-error\"), re);\n-            throw new StoreException(re);\n+            throw translateManagedCompletionException(new StoreException(re));\n         } finally {\n             endOperation();\n         }\n@@ -1789,11 +1789,11 @@ public void afterCompletion(int status) {\n         } catch (OpenJPAException ke) {\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"end-trans-error\"), ke);\n-            throw ke;\n+            throw translateManagedCompletionException(ke);\n         } catch (RuntimeException re) {\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"end-trans-error\"), re);\n-            throw new StoreException(re);\n+            throw translateManagedCompletionException(new StoreException(re));\n         } finally {\n             _flags &= ~FLAG_ACTIVE;\n             _flags &= ~FLAG_FLUSHED;\n@@ -1813,6 +1813,15 @@ public void afterCompletion(int status) {\n         }\n     }\n \n+    /**\n+     * If we're in a managed transaction, use our implicit behavior exception\n+     * translator to translate before/afterCompletion callback errors.\n+     */\n+    private RuntimeException translateManagedCompletionException\n+        (RuntimeException re) {\n+        return (!_managed || _extrans == null) ? re : _extrans.translate(re);\n+    }\n+\n     /**\n      * Flush safely, catching reentrant calls.\n      */"},{"sha":"2f3b96d89bf8170e7d545c472ec33649ca75962c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/056ecf52fdf1ec47bba26ed8b1a8026c1d568687/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/056ecf52fdf1ec47bba26ed8b1a8026c1d568687/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=056ecf52fdf1ec47bba26ed8b1a8026c1d568687","patch":"@@ -48,7 +48,7 @@ public RuntimeException translate(RuntimeException re) {\n      * and {@link NonUniqueResultException} in accordance with\n      * section 3.7 of the EJB 3.0 specification.\n      */\n-    static RuntimeExceptionTranslator getRollbackTranslator\n+    public static RuntimeExceptionTranslator getRollbackTranslator\n         (final OpenJPAEntityManager em) {\n         return new RuntimeExceptionTranslator() {\n             private boolean throwing = false;"}]}

