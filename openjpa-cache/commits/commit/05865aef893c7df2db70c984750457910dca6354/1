{"sha":"05865aef893c7df2db70c984750457910dca6354","node_id":"MDY6Q29tbWl0MjA2MzY0OjA1ODY1YWVmODkzYzdkZjJkYjcwYzk4NDc1MDQ1NzkxMGRjYTYzNTQ=","commit":{"author":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-16T17:39:57Z"},"committer":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-16T17:39:57Z"},"message":"Remove warning from enhancing impl generated classes and optimize \nclass / interface interaction\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@446904 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c4d16c6e8c2794f3ce45892e2324d76fa6e8f86","url":"https://api.github.com/repos/apache/openjpa/git/trees/0c4d16c6e8c2794f3ce45892e2324d76fa6e8f86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/05865aef893c7df2db70c984750457910dca6354","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/05865aef893c7df2db70c984750457910dca6354","html_url":"https://github.com/apache/openjpa/commit/05865aef893c7df2db70c984750457910dca6354","comments_url":"https://api.github.com/repos/apache/openjpa/commits/05865aef893c7df2db70c984750457910dca6354/comments","author":null,"committer":null,"parents":[{"sha":"d746a3fd7cebeb045abc3cc699e8fc8ba306fc5f","url":"https://api.github.com/repos/apache/openjpa/commits/d746a3fd7cebeb045abc3cc699e8fc8ba306fc5f","html_url":"https://github.com/apache/openjpa/commit/d746a3fd7cebeb045abc3cc699e8fc8ba306fc5f"}],"stats":{"total":72,"additions":69,"deletions":3},"files":[{"sha":"e7785465b6a1b48972118caae60f6fb81d6be251","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/05865aef893c7df2db70c984750457910dca6354/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/05865aef893c7df2db70c984750457910dca6354/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=05865aef893c7df2db70c984750457910dca6354","patch":"@@ -1904,7 +1904,7 @@ private void enhanceClass() {\n                 method.makeProtected();\n                 access = \"protected\";\n             }\n-            if (_log.isWarnEnabled())\n+            if (!_meta.getDescribedType().isInterface() && _log.isWarnEnabled())\n                 _log.warn(_loc.get(\"enhance-adddefaultconst\", type, access));\n         }\n     }"},{"sha":"f04ee38859e826bf462e07516a7fc685396baadb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/05865aef893c7df2db70c984750457910dca6354/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/05865aef893c7df2db70c984750457910dca6354/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=05865aef893c7df2db70c984750457910dca6354","patch":"@@ -142,6 +142,7 @@\n     private Boolean _embedded = null;\n     private Boolean _interface = null;\n     private Class _impl = null;\n+    private List _interfaces = null;\n     private Map _ifaceMap = new HashMap();\n     private int _identity = ID_UNKNOWN;\n     private int _idStrategy = ValueStrategies.NONE;\n@@ -697,6 +698,38 @@ public void setInterfaceImpl(Class impl) {\n         _impl = impl;\n     }\n \n+    /**\n+     * Return all explicitly declared interfaces this class implements.\n+     */\n+    public Class[] getDeclaredInterfaces() {\n+        if (_interfaces == null)\n+            return _repos.EMPTY_CLASSES;\n+\n+        return (Class[]) _interfaces.toArray(new Class[_interfaces.size()]);\n+    }\n+\n+    /**\n+     * Explicitly declare the given interface among the ones this\n+     * class implements.\n+     */\n+    public void addDeclaredInterface(Class iface) {\n+        if (_interfaces == null)\n+            _interfaces = new ArrayList();\n+        if (!iface.isInterface())\n+            throw new MetaDataException(_loc.get(\"declare-non-interface\",\n+                this, iface));\n+        _interfaces.add(iface);\n+    }\n+\n+    /**\n+     * Remove the given interface from the declared list.\n+     */\n+    public boolean removeDeclaredInterface(Class iface) {\n+        if (_interfaces == null)\n+            return false;\n+        return _interfaces.remove(iface);\n+    }\n+\n     /**\n      * Alias properties from the given interface during  queries to\n      * the local field.\n@@ -728,6 +761,18 @@ public String getInterfacePropertyAlias(Class iface, String orig) {\n         }\n     }\n     \n+    /**\n+     * Return all aliases property named for the given interface.\n+     */\n+    public String[] getInterfaceAliasedProperties(Class iface) {\n+        synchronized (_ifaceMap) {\n+            Map fields = (Map) _ifaceMap.get(iface);\n+            if (fields == null)\n+                return new String[0];\n+            return (String[]) fields.keySet().toArray(new String[0]);\n+        }\n+    }\n+    \n     /**\n      * Return the number of fields that use impl or intermediate data, in\n      * order to create a compacted array for storage of said data.\n@@ -1610,6 +1655,13 @@ protected void resolveMeta(boolean runtime) {\n         // resolve lifecycle metadata now to prevent lazy threading problems\n         _lifeMeta.resolve();\n \n+        // record implements in the repository\n+        if (_interfaces != null) {\n+            for (Iterator it = _interfaces.iterator(); it.hasNext();) {\n+                _repos.addDeclaredInterfaceImpl(this, (Class) it.next());\n+            }\n+        }\n+\n         // resolve fetch groups\n         if (_fgMap != null)\n             for (Iterator itr = _fgMap.values().iterator(); itr.hasNext();)"},{"sha":"2d5dbd11b6eaceebfcf0f895b405d21b4f398250","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/05865aef893c7df2db70c984750457910dca6354/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/05865aef893c7df2db70c984750457910dca6354/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=05865aef893c7df2db70c984750457910dca6354","patch":"@@ -865,9 +865,23 @@ public synchronized boolean removeMetaData(Class cls) {\n     /**\n      * Add the given metadata as declared interface implementation.\n      */\n-    public void addDeclaredInterfaceImpl(ClassMetaData meta, Class iface) {\n+    void addDeclaredInterfaceImpl(ClassMetaData meta, Class iface) {\n         synchronized (_impls) {\n-            addToCollection(_impls, iface, meta.getDescribedType(), false);\n+            boolean supDec = false;\n+            Collection vals = (Collection) _impls.get(iface);\n+            \n+            // check to see if the superclass already declares to avoid dups\n+            if (vals != null) {\n+                ClassMetaData sup = meta.getPCSuperclassMetaData();\n+                while (vals != null && sup != null && !supDec) {\n+                    supDec = vals.contains(sup.getDescribedType());\n+                    sup = sup.getPCSuperclassMetaData();\n+                }\n+                if (supDec)\n+                    return;\n+            }\n+\n+            addToCollection(_impls, iface, meta.getDescribedType(), true);\n         }\n     }\n "}]}

