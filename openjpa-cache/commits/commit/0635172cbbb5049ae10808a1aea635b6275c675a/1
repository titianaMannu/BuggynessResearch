{"sha":"0635172cbbb5049ae10808a1aea635b6275c675a","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2MzUxNzJjYmJiNTA0OWFlMTA4MDhhMWFlYTYzNWI2Mjc1YzY3NWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-24T18:37:52Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-24T18:37:52Z"},"message":"Set proper return type on evaluated expression.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@883808 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"312a8ef8ce306159231b7389b539df19de0ac069","url":"https://api.github.com/repos/apache/openjpa/git/trees/312a8ef8ce306159231b7389b539df19de0ac069"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0635172cbbb5049ae10808a1aea635b6275c675a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0635172cbbb5049ae10808a1aea635b6275c675a","html_url":"https://github.com/apache/openjpa/commit/0635172cbbb5049ae10808a1aea635b6275c675a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0635172cbbb5049ae10808a1aea635b6275c675a/comments","author":null,"committer":null,"parents":[{"sha":"f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","url":"https://api.github.com/repos/apache/openjpa/commits/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a","html_url":"https://github.com/apache/openjpa/commit/f6a6ee15f23f7bf7d99d33a3c904985b1ef8e98a"}],"stats":{"total":54,"additions":33,"deletions":21},"files":[{"sha":"6f5a0a165d60fbd3ac7a23d1407cf27cc0b465d9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":33,"deletions":21,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/0635172cbbb5049ae10808a1aea635b6275c675a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/0635172cbbb5049ae10808a1aea635b6275c675a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=0635172cbbb5049ae10808a1aea635b6275c675a","patch":"@@ -281,7 +281,9 @@ public  Abs(Expression<X> x) {\n \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return factory.abs(Expressions.toValue(e, factory, q));\n+            Value value = factory.abs(Expressions.toValue(e, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -321,7 +323,9 @@ public  Avg(Expression<?> x) {\n \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return factory.avg(Expressions.toValue(e, factory, q));\n+            Value value = factory.avg(Expressions.toValue(e, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         @Override\n@@ -337,7 +341,9 @@ public  Sqrt(Expression<? extends Number> x) {\n \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return factory.sqrt(Expressions.toValue(e, factory, q));\n+            Value value = factory.sqrt(Expressions.toValue(e, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -352,7 +358,9 @@ public  Max(Expression<X> x) {\n \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return factory.max(Expressions.toValue(e, factory, q));\n+            Value value = factory.max(Expressions.toValue(e, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -367,7 +375,9 @@ public  Min(Expression<X> x) {\n \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return factory.min(Expressions.toValue(e, factory, q));\n+            Value value = factory.min(Expressions.toValue(e, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -649,11 +659,13 @@ public Sum(Number x, Expression<? extends Number> y) {\n         \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return (e2 == null) \n+            Value value= (e2 == null) \n             ?   factory.sum(Expressions.toValue(e1, factory, q))\n             :   factory.add(\n                    Expressions.toValue(e1, factory, q), \n                    Expressions.toValue(e2, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         @Override\n@@ -705,9 +717,11 @@ public Diff(Number x, Expression<? extends Number> y) {\n         \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return factory.subtract(\n+            Value value = factory.subtract(\n                 Expressions.toValue(e1, factory, q), \n                 Expressions.toValue(e2, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         @Override\n@@ -732,9 +746,11 @@ public Quotient(Number x, Expression<? extends Number> y) {\n         \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return factory.divide(\n+            Value value = factory.divide(\n                 Expressions.toValue(e1, factory, q), \n                 Expressions.toValue(e2, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         @Override\n@@ -756,9 +772,11 @@ public  Mod(Integer x, Expression<Integer> y) {\n \n         @Override\n         public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-            return factory.mod(\n+            Value value = factory.mod(\n                 Expressions.toValue(e1, factory, q), \n                 Expressions.toValue(e2, factory, q));\n+            value.setImplicitType(getJavaType());\n+            return value;\n         }\n         \n         @Override\n@@ -1277,8 +1295,7 @@ public Coalesce(Class<T> cls) {\n         }\n         \n         @Override\n-        public org.apache.openjpa.kernel.exps.Value toValue(\n-            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        public org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             Value[] vs = new Value[values.size()];\n             int i = 0;\n             for (Expression<?> e : values)\n@@ -1312,8 +1329,7 @@ public Nullif(Expression<T> x, T y) {\n         }\n \n         @Override\n-        public org.apache.openjpa.kernel.exps.Value toValue(\n-            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        public org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             Value value1 = Expressions.toValue((ExpressionImpl<?>)val1, factory, q); \n             Value value2 = Expressions.toValue((ExpressionImpl<?>)val2, factory, q); \n             return factory.nullIfExpression(value1, value2);\n@@ -1495,8 +1511,7 @@ public Case(Class<T> cls) {\n         }\n \n         @Override\n-        public org.apache.openjpa.kernel.exps.Value toValue(\n-            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        public org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             int size = whens.size();\n             org.apache.openjpa.kernel.exps.Expression[] exps = new org.apache.openjpa.kernel.exps.Expression[size];\n             for (int i = 0; i < size; i++) {\n@@ -1575,8 +1590,7 @@ public SimpleCase(Expression<C> expr) {\n         }\n \n         @Override\n-        public org.apache.openjpa.kernel.exps.Value toValue(\n-                ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        public org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             Value caseOperandExpr = Expressions.toValue((ExpressionImpl<?>)caseOperand, factory, q);\n             int size = whens.size();\n             org.apache.openjpa.kernel.exps.Expression[] exps = new org.apache.openjpa.kernel.exps.Expression[size];\n@@ -1769,8 +1783,7 @@ public CastAs(Class<Y> cast, ExpressionImpl<?> actual) {\n         }\n         \n         @Override\n-        public org.apache.openjpa.kernel.exps.Value toValue(\n-          ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        public org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             org.apache.openjpa.kernel.exps.Value e = actual.toValue(factory, q);\n             e.setImplicitType(getJavaType());\n             return e;\n@@ -1799,8 +1812,7 @@ public ListArgument(Class<T> cls, ExpressionImpl<?>... args) {\n         }\n         \n         @Override\n-        public org.apache.openjpa.kernel.exps.Arguments toValue(\n-          ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        public org.apache.openjpa.kernel.exps.Arguments toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             org.apache.openjpa.kernel.exps.Value[] kvs = new org.apache.openjpa.kernel.exps.Value[_args.length];\n             int i = 0;\n             for (ExpressionImpl<?> arg : _args) {"}]}

