{"sha":"06bd0d64e7538fd2d682cc0eadb4767dac8f449b","node_id":"MDY6Q29tbWl0MjA2MzY0OjA2YmQwZDY0ZTc1MzhmZDJkNjgyY2MwZWFkYjQ3NjdkYWM4ZjQ0OWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:53:29Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-13T20:53:29Z"},"message":"OPENJPA-1143: further clean up testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804024 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bbef2c51cfe95d253e8b87cef560d8978a21efe","url":"https://api.github.com/repos/apache/openjpa/git/trees/5bbef2c51cfe95d253e8b87cef560d8978a21efe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/06bd0d64e7538fd2d682cc0eadb4767dac8f449b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/06bd0d64e7538fd2d682cc0eadb4767dac8f449b","html_url":"https://github.com/apache/openjpa/commit/06bd0d64e7538fd2d682cc0eadb4767dac8f449b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/06bd0d64e7538fd2d682cc0eadb4767dac8f449b/comments","author":null,"committer":null,"parents":[{"sha":"222e01d2f3215aafd876380e3ac270c37252a95d","url":"https://api.github.com/repos/apache/openjpa/commits/222e01d2f3215aafd876380e3ac270c37252a95d","html_url":"https://github.com/apache/openjpa/commit/222e01d2f3215aafd876380e3ac270c37252a95d"}],"stats":{"total":42,"additions":13,"deletions":29},"files":[{"sha":"2799720b7f441a9b9944dcc96ae9c1303b32b48c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","status":"modified","additions":13,"deletions":29,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/06bd0d64e7538fd2d682cc0eadb4767dac8f449b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/06bd0d64e7538fd2d682cc0eadb4767dac8f449b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java?ref=06bd0d64e7538fd2d682cc0eadb4767dac8f449b","patch":"@@ -35,8 +35,6 @@\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.Subquery;\n \n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-import org.apache.openjpa.persistence.OpenJPAQuery;\n import org.apache.openjpa.persistence.embed.Company1;\n import org.apache.openjpa.persistence.embed.Company1_;\n import org.apache.openjpa.persistence.embed.Company2;\n@@ -46,7 +44,6 @@\n import org.apache.openjpa.persistence.embed.Department2;\n import org.apache.openjpa.persistence.embed.Department3;\n import org.apache.openjpa.persistence.embed.Division;\n-import org.apache.openjpa.persistence.embed.Division_;\n import org.apache.openjpa.persistence.embed.Embed;\n import org.apache.openjpa.persistence.embed.Embed_;\n import org.apache.openjpa.persistence.embed.Embed_Coll_Embed;\n@@ -100,30 +97,23 @@\n \n \n public class TestEmbeddableCriteria extends EmbeddableDomainTestCase {\n-    @AllowFailure(message= \"JPQL works because projection/result class is null, but Criteria can be written using \" \n-                         + \"projection explictly. That makes it fail in AbstractExpression.assertNotContainer\" \n-                         + \"because the project is a collection\")\n     public void testEmbeddableQuery1() {\n         String jpql = \"select e from EntityA_Coll_String a, in (a.nickNames) e order by a.id\";\n-        \n-        CriteriaQuery<Set> q = cb.createQuery(Set.class);\n+        CriteriaQuery<String> q = cb.createQuery(String.class);\n         Root<EntityA_Coll_String> a = q.from(EntityA_Coll_String.class);\n         Join<EntityA_Coll_String, String> e = a.join(EntityA_Coll_String_.nickNames);\n-        q.select(a.get(EntityA_Coll_String_.nickNames));\n+        q.select(e);\n         q.orderBy(cb.asc(a.get(EntityA_Coll_String_.id)));\n         \n         assertEquivalence(q, jpql);\n     }\n     \n-    @AllowFailure(message= \"JPQL works because projection/result class is null, but Criteria can be written using \" \n-        + \"projection explictly. That makes it fail in AbstractExpression.assertNotContainer\" \n-        + \"because the project is a collection\")\n     public void testEmbeddableQuery3() {\n         String jpql = \"select e from EntityA_Coll_String a, in (a.nickNames) e order by e\";\n-        CriteriaQuery<Set> q = cb.createQuery(Set.class);\n+        CriteriaQuery<String> q = cb.createQuery(String.class);\n         Root<EntityA_Coll_String> a = q.from(EntityA_Coll_String.class);\n         Join<EntityA_Coll_String, String> e = a.join(EntityA_Coll_String_.nickNames);\n-        q.select(a.get(EntityA_Coll_String_.nickNames));\n+        q.select(e);\n         q.orderBy(cb.asc(e));\n         \n         assertEquivalence(q, jpql);\n@@ -1389,7 +1379,6 @@ public void testEmbeddableQuery102() {\n         assertEquivalence(q, jpql);\n     }\n     \n-    @AllowFailure(message = \"JPQL has redundant table join\")\n     public void testEmbeddableQuery103() {\n         String jpql = \"select d from Department1 d where d.deptId < ANY \" +\n                 \" (select KEY(e) from in(d.empMap) e) order by d\";\n@@ -1520,25 +1509,23 @@ public void testEmbeddableQuery112() {\n         assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n     }\n     \n-    @AllowFailure(message=\"MapJoin varaible getting registered more than once\")\n     public void testEmbeddableQuery113() {\n         String jpql = \"select i from Item1 i where exists (select e from Item1 i, in(i.images) e\" +\n                 \" where :image = KEY(e)) order by i\";\n         CriteriaQuery<Item1> q = cb.createQuery(Item1.class);\n         Root<Item1> i = q.from(Item1.class);\n-        Subquery<Map> sq = q.subquery(Map.class);\n+        Subquery<String> sq = q.subquery(String.class);\n         Root<Item1> i1 = sq.from(Item1.class);\n         MapJoin<Item1, String, String> e = i1.join(Item1_.images);\n-//        sq.select(i1.get(Item1_.images).as(Map.class));\n+        sq.select(e);\n         q.select(i);\n         ParameterExpression<String> param1 = cb.parameter(String.class, \"image\");\n-        sq.where(cb.equal(param1, cb.any(sq)));\n+        sq.where(cb.equal(param1, e.key()));\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(i));\n         assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n     }\n      \n-    @AllowFailure(message=\"MapJoin varaible getting registered more than once\")\n     public void testEmbeddableQuery114() {\n         String jpql = \"select i from Item2 i where :image = any (select KEY(e) from Item2 i, in(i.images) e) \" +\n                 \" order by i\";\n@@ -1550,25 +1537,23 @@ public void testEmbeddableQuery114() {\n         sq.select(e.key());\n         q.select(i);\n         ParameterExpression<String> param1 = cb.parameter(String.class, \"image\");\n-        sq.where(cb.equal(param1, cb.any(sq)));\n-        q.where(cb.exists(sq));\n+        q.where(cb.equal(param1, cb.any(sq)));\n         q.orderBy(cb.asc(i));\n         assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n     }\n     \n-    @AllowFailure(message=\"MapJoin varaible getting registered more than once\")\n     public void testEmbeddableQuery115() {\n         String jpql = \"select i from Item2 i where exists (select e from Item2 i, in(i.images) e\" +\n                 \"   where :image = KEY(e)) order by i\";\n         CriteriaQuery<Item2> q = cb.createQuery(Item2.class);\n         Root<Item2> i = q.from(Item2.class);\n-        Subquery<Map> sq = q.subquery(Map.class);\n+        Subquery<String> sq = q.subquery(String.class);\n         Root<Item2> i1 = sq.from(Item2.class);\n         MapJoin<Item2, String, String> e = i1.join(Item2_.images);\n-        sq.select(i1.get(Item2_.images).as(Map.class));\n+        sq.select(e);\n         q.select(i);\n         ParameterExpression<String> param1 = cb.parameter(String.class, \"image\");\n-        sq.where(cb.equal(param1, cb.any(sq)));\n+        sq.where(cb.equal(param1, e.key()));\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(i));\n         assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n@@ -1590,16 +1575,15 @@ public void testEmbeddableQuery116() {\n         assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n     }\n     \n-    @AllowFailure(message=\"extra join in SubQuery\")\n     public void testEmbeddableQuery117() {\n         String jpql = \"select i from Item3 i where exists (select e from Item3 i, in(i.images) e\" +\n                 \" where :image = KEY(e)) order by i\";\n         CriteriaQuery<Item3> q = cb.createQuery(Item3.class);\n         Root<Item3> i = q.from(Item3.class);\n-        Subquery<Map> sq = q.subquery(Map.class);\n+        Subquery<String> sq = q.subquery(String.class);\n         Root<Item3> i1 = sq.from(Item3.class);\n         MapJoin<Item3, String, String> e = i1.join(Item3_.images);\n-        sq.select(i1.get(Item3_.images).as(Map.class));\n+        sq.select(e);\n         q.select(i);\n         ParameterExpression<String> param1 = cb.parameter(String.class, \"image\");\n         sq.where(cb.equal(param1, e.key()));"}]}

