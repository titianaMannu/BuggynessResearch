{"sha":"071e698899dda1d7734af04d35e8b138e529f0e2","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3MWU2OTg4OTlkZGExZDc3MzRhZjA0ZDM1ZThiMTM4ZTUyOWYwZTI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-27T20:53:53Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-27T20:53:53Z"},"message":"OPENJPA-1597 Revert code added to DetachManager to unproxy objects when detached in-place.  Updated tests to verify old behavior of detached entites still having  references, but that they are removed during serialization.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@928271 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"024cda644f32845a0a9e0a0042218365c857898c","url":"https://api.github.com/repos/apache/openjpa/git/trees/024cda644f32845a0a9e0a0042218365c857898c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/071e698899dda1d7734af04d35e8b138e529f0e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/071e698899dda1d7734af04d35e8b138e529f0e2","html_url":"https://github.com/apache/openjpa/commit/071e698899dda1d7734af04d35e8b138e529f0e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/071e698899dda1d7734af04d35e8b138e529f0e2/comments","author":null,"committer":null,"parents":[{"sha":"5655a9b4625b8ee573c75da082b1d3344e2ecad0","url":"https://api.github.com/repos/apache/openjpa/commits/5655a9b4625b8ee573c75da082b1d3344e2ecad0","html_url":"https://github.com/apache/openjpa/commit/5655a9b4625b8ee573c75da082b1d3344e2ecad0"}],"stats":{"total":629,"additions":431,"deletions":198},"files":[{"sha":"fbff958b8bcf749367dd8888a2a72cea5b51059d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -66,6 +66,7 @@\n     private boolean _isNonDefaultMappingAllowed = false;\n     private boolean _reorderMetaDataResolution = true;\n     private boolean _reloadOnDetach = false;\n+    private boolean _ignoreDetachedStateFieldForProxySerialization = false;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -295,6 +296,39 @@ public boolean getFlushBeforeDetach() {\n         return _flushBeforeDetach;\n     }\n \n+    /**\n+     * Whether OpenJPA should ignore the DetachedStateField value when\n+     * determining if our Proxy classes should be removed during serialization.\n+     * <P>Starting with version 2.0.0, when the DetachedStateFiled==true, the\n+     * build time $proxy classes will not be removed.\n+     * <P>Prior to version 2.0.0, the DetachedStateFiled was not used and\n+     * the $proxy classes were not being removed during serialization after\n+     * the Persistence context was cleared.\n+     * \n+     * @param ignoreDSF if true the old Proxy serialization behavior will be used.\n+     * \n+     * @since 2.0.0\n+     */\n+    public void setIgnoreDetachedStateFieldForProxySerialization(boolean ignoreDSF) {\n+        _ignoreDetachedStateFieldForProxySerialization = ignoreDSF;\n+    }\n+    \n+    /**\n+     * Whether OpenJPA should ignore the DetachedStateField value when\n+     * determining if our Proxy classes should be removed during serialization.\n+     * <P>Starting with version 2.0.0, when the DetachedStateFiled==true, the\n+     * build time $proxy classes will not be removed.\n+     * <P>Prior to version 2.0.0, the DetachedStateFiled was not used and\n+     * the $proxy classes were not being removed during serialization after\n+     * the Persistence context was cleared.\n+     * \n+     * @since 2.0.0\n+     * @return true if the old Proxy serialization will be used, otherwise false.\n+     */\n+    public boolean getIgnoreDetachedStateFieldForProxySerialization() {\n+        return _ignoreDetachedStateFieldForProxySerialization;\n+    }\n+\n     /**\n      * Whether OpenJPA should flush changes before detaching or serializing an\n      * entity. In JPA this is usually false, but other persistence frameworks"},{"sha":"33c6761e309b7432a691b9e082cf96c3784a49f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -708,10 +708,8 @@ public void storeObjectField(int field, Object curVal) {\n          * Set the owner of the field's proxy to the detached state manager.\n          */\n         private Object reproxy(Object obj, int field) {\n-            if (obj != null && _detSM != null && obj instanceof Proxy) {\n+            if (obj != null && _detSM != null && obj instanceof Proxy)\n                 ((Proxy) obj).setOwner(_detSM, field);\n-                return ((Proxy) obj).copy(obj); \n-            }\n             return obj;\n         }\n "},{"sha":"1c58524f31ba0951ef91342b28f7dfa2b434956d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -25,6 +25,7 @@\n import java.util.Collection;\n import java.util.Map;\n \n+import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -62,6 +63,7 @@\n     private final Object _oid;\n     private final Object _version;\n     private final ReentrantLock _lock;\n+    private final boolean _useDSFForUnproxy;   // old releases will default to FALSE, which is the old behavior\n \n     /**\n      * Constructor.\n@@ -89,6 +91,14 @@ public DetachedStateManager(PersistenceCapable pc, OpenJPAStateManager sm,\n             _lock = new ReentrantLock();\n         else\n             _lock = null;\n+        if (sm.getContext() != null && sm.getContext().getConfiguration() != null) {\n+            Compatibility compat = sm.getContext().getConfiguration().getCompatibilityInstance();\n+            if (compat != null && !compat.getIgnoreDetachedStateFieldForProxySerialization())\n+                _useDSFForUnproxy = true;      // new 2.0 behavior\n+            else\n+                _useDSFForUnproxy = false;\n+        } else\n+            _useDSFForUnproxy = false;\n     }\n \n     /////////////////////////////////\n@@ -731,6 +741,15 @@ public BitSet getDirty() {\n         return _dirty;\n     }\n \n+    /**\n+     * Should DetachedStateField be used by Proxies to determine when to remove\n+     * $proxy wrappers during serialization.\n+     * @since 2.0.0\n+     */\n+    public boolean getUseDSFForUnproxy() {\n+        return _useDSFForUnproxy;\n+    }\n+\n     public BitSet getFlushed() {\n         throw new UnsupportedOperationException();\n     }"},{"sha":"ca944ae78d7b8dc056fa8c573db4975968387323","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","status":"modified","additions":52,"deletions":14,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -20,6 +20,8 @@\n \n import java.security.AccessController;\n \n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.kernel.DetachedStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -85,10 +87,18 @@ public static Object writeReplace(Proxy proxy, boolean detachable) {\n          *   1) No Proxy, then return as-is\n          *   2) Runtime created proxy (!detachable), then unproxy\n          *   3) No StateManager (DetachedStateField==false), then return as-is\n-         *   4) If detached, then unproxy\n-         *   5) If ClassMetaData exists and DetachedStateField != TRUE\n-         *      (default of DetachedStateField==transient), then unproxy\n-         *   6) Else, return as-is\n+         *   Get the new IgnoreDetachedStateFieldForProxySerialization\n+         *      Compatibility flag from either the metadata/configuration if\n+         *      this is a normal StateManager, otherwise use the new flag\n+         *      added to the DetachedStateManager\n+         *   4) If new 2.0 behavior\n+         *      4a) If ClassMetaData exists and DetachedStateField == TRUE\n+         *          then do not remove the proxy and return as-is\n+         *      4b) Else, using DetachedStateField of transient(default) or\n+         *          false, so unproxy \n+         *   5) If 1.0 app or requested old 1.0 behavior\n+         *      5a) If detached, then do not unproxy and return as-is\n+         *      5b) Else, unproxy\n          * \n          * Original code -\n          *   1) Runtime created proxy (!detachable), then unproxy\n@@ -111,19 +121,47 @@ public static Object writeReplace(Proxy proxy, boolean detachable) {\n         } else if (proxy.getOwner() == null) {\n             // no StateManager (DetachedStateField==false), so no $proxy to remove\n             return proxy;\n-        } else if (proxy.getOwner().isDetached()) {\n-            // already detached, so remove any $proxy\n-            return proxy.copy(proxy);\n         } else {\n             // using a StateManager, so determine what DetachedState is being used\n-            OpenJPAStateManager sm = proxy.getOwner();  // !null checked for above\n-            ClassMetaData meta = sm.getMetaData();      // if null, no proxies?\n-            if ((meta != null) && (!Boolean.TRUE.equals(meta.usesDetachedState()))) {\n-                // configured to use transient (null) or no (FALSE) StateManger, so remove any $proxy\n-                return proxy.copy(proxy);\n+            OpenJPAStateManager sm = proxy.getOwner();  // null checked for above\n+            ClassMetaData meta = null;          // if null, no proxies?\n+            boolean useDSFForUnproxy = false;   // default to false for old 1.0 behavior\n+\n+            // DetachedStateMnager has no context or metadata, so we can't get configuration settings\n+            if (!proxy.getOwner().isDetached()) {\n+                Compatibility compat = null;\n+                meta = sm.getMetaData();\n+                if (meta != null) {\n+                    compat = meta.getRepository().getConfiguration().getCompatibilityInstance();\n+                } else if (sm.getContext() != null && sm.getContext().getConfiguration() != null) {\n+                    compat = sm.getContext().getConfiguration().getCompatibilityInstance();\n+                } else {\n+                    // no-op - using a StateManager, but no Compatibility settings available\n+                }\n+                if (compat != null) {\n+                    // new 2.0 behavior of using DetachedStateField to determine unproxy during serialization\n+                    useDSFForUnproxy = !compat.getIgnoreDetachedStateFieldForProxySerialization();\n+                }\n+            } else {\n+                // Using a DetachedStateManager, so use the new flag since there is no context or metadata\n+                useDSFForUnproxy = ((DetachedStateManager)sm).getUseDSFForUnproxy();\n+            }\n+            \n+            if (useDSFForUnproxy) {\n+                // use new 2.0 behavior\n+                if ((meta != null) && (Boolean.TRUE.equals(meta.usesDetachedState()))) {\n+                    // configured to always use and serialize a StateManger, so keep any $proxy\n+                    return proxy;\n+                } else {\n+                    // already detached or using DetachedStateField==false or transient, so remove any $proxy\n+                    return proxy.copy(proxy);\n+                }\n             } else {\n-                // DetachedStateField==true, which means to keep the SM and $proxy in the serialized objects\n-                return proxy;\n+                // use old 1.0 behavior\n+                if (proxy.getOwner().isDetached())\n+                    return proxy;\n+                else\n+                    return proxy.copy(proxy);\n             }\n         }\n     }"},{"sha":"73109aa4b8db6018f6e92e5918c2b662c01d8ea8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -71,6 +71,7 @@ public void testJPA1CompatibilityOptions() {\n         Compatibility compat = emf1.getConfiguration().getCompatibilityInstance();\n         assertTrue(compat.getFlushBeforeDetach());\n         assertTrue(compat.getCopyOnDetach());\n+        assertTrue(compat.getIgnoreDetachedStateFieldForProxySerialization());\n         assertTrue(compat.getPrivatePersistentProperties());\n         assertFalse(compat.isAbstractMappingUniDirectional());\n         assertFalse(compat.isNonDefaultMappingAllowed());\n@@ -92,6 +93,7 @@ public void testJPA2CompatibilityOptions() {\n         Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n         assertFalse(compat.getFlushBeforeDetach());\n         assertFalse(compat.getCopyOnDetach());\n+        assertFalse(compat.getIgnoreDetachedStateFieldForProxySerialization());\n         assertFalse(compat.getPrivatePersistentProperties());\n         assertTrue(compat.isAbstractMappingUniDirectional());\n         assertTrue(compat.isNonDefaultMappingAllowed());"},{"sha":"a2a0089bafd3b321793fb1ca2b7f3e2c9b3b9209","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -57,6 +57,7 @@ public void testJPA1CompatibilityOptions() {\n         Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n         assertTrue(compat.getFlushBeforeDetach());\n         assertTrue(compat.getCopyOnDetach());\n+        assertTrue(compat.getIgnoreDetachedStateFieldForProxySerialization());\n         assertTrue(compat.getPrivatePersistentProperties());\n         String vMode = emf.getConfiguration().getValidationMode();\n         assertEquals(\"NONE\", vMode);\n@@ -65,7 +66,6 @@ public void testJPA1CompatibilityOptions() {\n         assertEquals(spec.getVersion(), 1);\n         \n         emf.close();\n-\n     }\n \n     /*\n@@ -82,6 +82,7 @@ public void testJPA2CompatibilityOptions() {\n         Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n         assertFalse(compat.getFlushBeforeDetach());\n         assertFalse(compat.getCopyOnDetach());\n+        assertFalse(compat.getIgnoreDetachedStateFieldForProxySerialization());\n         assertFalse(compat.getPrivatePersistentProperties());\n         String vMode = emf.getConfiguration().getValidationMode();\n         assertEquals(\"AUTO\", vMode);"},{"sha":"5f0e07155ee373058b637f9efee671f1d815bb99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","status":"modified","additions":218,"deletions":57,"changes":275,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -28,34 +28,19 @@\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestDetachNoProxy extends SingleEMFTestCase {\n     \n     private static final int numEntities = 3;\n     private static final String PROXY = new String(\"$proxy\");\n-    private Log log;\n+    private Log _log;\n     \n     public void setUp() {\n         setUp(DROP_TABLES, Entity20.class);\n-        log = emf.getConfiguration().getLog(\"test\");\n-        \n-        // check and set Compatibility values to new 2.0 values\n-        Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n-        assertNotNull(compat);\n-        if (log.isTraceEnabled()) {\n-            log.trace(\"Before set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n-            log.trace(\"Before set, CopyOnDetach=\" + compat.getCopyOnDetach());\n-            log.trace(\"Before set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n-        }\n-        compat.setFlushBeforeDetach(false);\n-        compat.setCopyOnDetach(false);\n-        compat.setCascadeWithDetach(false);\n-        if (log.isTraceEnabled()) {\n-            log.trace(\"After set, FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n-            log.trace(\"After set, CopyOnDetach=\" + compat.getCopyOnDetach());\n-            log.trace(\"After set, CascadeWithDetach=\" + compat.getCascadeWithDetach());\n-        }\n+        _log = emf.getConfiguration().getLog(\"test\");\n         createEntities(numEntities);\n     }\n     \n@@ -74,53 +59,88 @@ private void createEntities(int count) {\n     /* \n      * Verify that an in-place detached entity does not use the proxy classes.\n      */\n-    public void testDetach() {\n-        if (log.isTraceEnabled())\n-            log.trace(\"***** testDetach() *****\");\n+    public void testDetach20() {\n         Integer id = new Integer(0);\n-        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2New\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testDetach20() *****\");\n         \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n         em.clear();\n+        \n         Entity20 e20 = em.find(Entity20.class, id);\n         if (log.isTraceEnabled())\n-            log.trace(\"** after find\");\n+            log.trace(\"** testDetach20() - after find\");\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n         verifySerializable(e20, true, false);\n         \n         // new openjpa-2.0.0 behavior, where detach() doesn't return updated entity, but does it in-place\n         em.detach(e20);\n         if (log.isTraceEnabled())\n-            log.trace(\"** after detach\");\n+            log.trace(\"** testDetach20() - after detach\");\n         // in-place updated entity should not have any proxy classes and should be detached\n         assertFalse(em.contains(e20));\n         assertTrue(em.isDetached(e20));\n-        verifySerializable(e20, false, false);\n+        verifySerializable(e20, true, false);\n                \n         em.close();\n+        emf2.close();\n     }\n \n     /* \n      * Verify that a detachCopy() returned entity does not contain any proxy classes.\n      */\n-    public void testDetachCopy() {\n-        if (log.isTraceEnabled())\n-            log.trace(\"***** testDetachCopy() *****\");\n+    public void testDetachCopy20() {\n         Integer id = new Integer(0);\n-        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2New\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testDetachCopy20() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n         em.clear();\n \n         Entity20 e20 = em.find(Entity20.class, id);\n         if (log.isTraceEnabled())\n-            log.trace(\"** after find\");\n+            log.trace(\"** testDetachCopy20() - after find\");\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n         verifySerializable(e20, true, false);\n         \n         // Test new detachCopy() method added in 2.0.0\n         Entity20 e20copy = em.detachCopy(e20);\n         if (log.isTraceEnabled())\n-            log.trace(\"** after detachCopy\");\n+            log.trace(\"** TestDetachCopy20() - after detachCopy\");\n         // verify e20 is same as above\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n@@ -131,23 +151,41 @@ public void testDetachCopy() {\n         verifySerializable(e20copy, false, false);\n         \n         em.close();\n+        emf2.close();\n     }\n \n     /*\n      * Verify that in-place detachAll entities do not use the proxy classes.\n      */\n-    public void testDetachAll() {\n+    public void testDetachAll20() {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2New\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n         if (log.isTraceEnabled())\n-            log.trace(\"***** testDetachAll() *****\");\n-        OpenJPAEntityManager em = emf.createEntityManager();\n+            log.trace(\"***** testDetachAll20() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n         em.clear();\n \n         ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n         for (int i=0; i<numEntities; i++) {\n             Entity20 e20 = em.find(Entity20.class, new Integer(i));\n             e20List.add(e20);\n             if (log.isTraceEnabled())\n-                log.trace(\"** after find Entity20(\" + i + \")\");\n+                log.trace(\"** testDetachAll20() - after find Entity20(\" + i + \")\");\n             assertTrue(em.contains(e20));\n             assertFalse(em.isDetached(e20));\n             verifySerializable(e20, true, false);            \n@@ -159,32 +197,104 @@ public void testDetachAll() {\n         em.detachAll(e20List.get(0), e20List.get(1), e20List.get(2));\n         for (int i=0; i<numEntities; i++) {\n             if (log.isTraceEnabled())\n-                log.trace(\"** after EM.detachAll() verify e20List(\" + i + \")\");\n+                log.trace(\"** testDetachAll20() - after EM.detachAll() verify e20List(\" + i + \")\");\n             Entity20 e20 = e20List.get(i);\n             // entity should not have any proxy classes (in-place updated) and is detached\n             assertFalse(em.contains(e20));\n             assertTrue(em.isDetached(e20));\n-            verifySerializable(e20, false, false);\n+            verifySerializable(e20, true, false);\n         }\n \n         em.close();\n+        emf2.close();\n     }\n \n     /*\n-     * Verify that after EM.clear() entities still contain proxy classes.\n+     * Verify that after EM.clear() entities still contain proxy classes for 1.0 apps.\n      */\n-    public void testClear() {\n+    public void testClear10Compat() {\n+        OpenJPAEntityManagerFactorySPI emf1 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy1Compat\", \"org/apache/openjpa/persistence/detach/persistence1.xml\");\n+        assertNotNull(emf1);\n+\n+        Log log = emf1.getConfiguration().getLog(\"test\");\n         if (log.isTraceEnabled())\n-            log.trace(\"***** testClear() *****\");\n-        OpenJPAEntityManager em = emf.createEntityManager();\n+            log.trace(\"***** testClear10Compat() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf1.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf1.createEntityManager();\n+        em.clear();\n+\n+        ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n+        for (int i=0; i<numEntities; i++) {\n+            Entity20 e20 = em.find(Entity20.class, new Integer(i));\n+            e20List.add(e20);\n+            if (log.isTraceEnabled())\n+                log.trace(\"** testClear10Compat() - after find Entity20(\" + i + \")\");\n+            assertTrue(em.contains(e20));\n+            assertFalse(em.isDetached(e20));\n+            verifySerializable(e20, true, false);            \n+        }\n+\n+        em.clear();\n+\n+        for (int i=0; i<numEntities; i++) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"** testClear10Compat() - after EM.clear() verify Entity20(\" + i + \")\");\n+            Entity20 e20 = e20List.get(i);\n+            assertFalse(em.contains(e20));\n+            assertTrue(em.isDetached(e20));\n+            // Old 1.0/1.2 Behavior -\n+            //   the $proxy classes are not removed during serialization\n+            verifySerializable(e20, true, true);\n+        }\n+\n+        em.close();\n+        emf1.close();\n+    }\n+\n+    /*\n+     * Verify that after EM.clear() entities still contain proxy classes for 1.0 apps.\n+     */\n+    public void testClear20Compat() {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2Compat\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testClear20Compat() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n         em.clear();\n \n         ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n         for (int i=0; i<numEntities; i++) {\n             Entity20 e20 = em.find(Entity20.class, new Integer(i));\n             e20List.add(e20);\n             if (log.isTraceEnabled())\n-                log.trace(\"** after find Entity20(\" + i + \")\");\n+                log.trace(\"** testClear20Compat() - after find Entity20(\" + i + \")\");\n             assertTrue(em.contains(e20));\n             assertFalse(em.isDetached(e20));\n             verifySerializable(e20, true, false);            \n@@ -194,19 +304,70 @@ public void testClear() {\n \n         for (int i=0; i<numEntities; i++) {\n             if (log.isTraceEnabled())\n-                log.trace(\"** after EM.clear() verify Entity20(\" + i + \")\");\n+                log.trace(\"** testClear20Compat() - after EM.clear() verify Entity20(\" + i + \")\");\n             Entity20 e20 = e20List.get(i);\n             assertFalse(em.contains(e20));\n             assertTrue(em.isDetached(e20));\n-            // entity should still have proxy classes and is detached,\n-            // Old 1.2.x Behavior -\n+            // Old 1.0/1.2 Behavior -\n             //   the $proxy classes are not removed during serialization\n-            // verifySerializable(e20, true, true);\n+            verifySerializable(e20, true, true);\n+        }\n+\n+        em.close();\n+        emf2.close();\n+    }\n+\n+    /*\n+     * Verify that after EM.clear() entities do not contain proxy classes for 2.0 apps.\n+     */\n+    public void testClear20New() {\n+        OpenJPAEntityManagerFactorySPI emf2 = \n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n+            \"NoProxy2New\", \"org/apache/openjpa/persistence/detach/persistence2.xml\");\n+        assertNotNull(emf2);\n+\n+        Log log = emf2.getConfiguration().getLog(\"test\");\n+        if (log.isTraceEnabled())\n+            log.trace(\"***** testClear20New() *****\");\n+        \n+        if (log.isTraceEnabled()) {\n+            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n+            assertNotNull(compat);\n+            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n+            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n+            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n+        }\n+\n+        OpenJPAEntityManager em = emf2.createEntityManager();\n+        em.clear();\n+\n+        ArrayList<Entity20> e20List = new ArrayList<Entity20>(numEntities);\n+        for (int i=0; i<numEntities; i++) {\n+            Entity20 e20 = em.find(Entity20.class, new Integer(i));\n+            e20List.add(e20);\n+            if (log.isTraceEnabled())\n+                log.trace(\"** testClear20New() - after find Entity20(\" + i + \")\");\n+            assertTrue(em.contains(e20));\n+            assertFalse(em.isDetached(e20));\n+            verifySerializable(e20, true, false);            \n+        }\n+\n+        em.clear();\n+\n+        for (int i=0; i<numEntities; i++) {\n+            if (log.isTraceEnabled())\n+                log.trace(\"** testClear20New() - after EM.clear() verify Entity20(\" + i + \")\");\n+            Entity20 e20 = e20List.get(i);\n+            assertFalse(em.contains(e20));\n+            assertTrue(em.isDetached(e20));\n             // OPENJPA-1097 New behavior - $proxy classes are removed\n             verifySerializable(e20, true, false);\n         }\n \n         em.close();\n+        emf2.close();\n     }\n \n     /**\n@@ -225,8 +386,8 @@ private void verifySerializable(Entity20 e20, boolean usesProxyBefore,\n         ObjectOutputStream oos = null;\n         byte[] e20bytes = null;\n         \n-        if (log.isTraceEnabled())\n-            log.trace(\"verifySerializable() - before serialize\");\n+        if (_log.isTraceEnabled())\n+            _log.trace(\"verifySerializable() - before serialize\");\n         verifyEntities(e20, usesProxyBefore);\n \n         // first serialize\n@@ -251,8 +412,8 @@ private void verifySerializable(Entity20 e20, boolean usesProxyBefore,\n         try {\n             ois = new ObjectInputStream(bais);\n             e20new = (Entity20) ois.readObject();\n-            if (log.isTraceEnabled())\n-                log.trace(\"verifySerializable() - after deserialize\");\n+            if (_log.isTraceEnabled())\n+                _log.trace(\"verifySerializable() - after deserialize\");\n             verifyEntities(e20new, usesProxyAfter);\n         } catch (IOException e) {\n             fail(e.toString());\n@@ -269,8 +430,8 @@ private void verifySerializable(Entity20 e20, boolean usesProxyBefore,\n     }\n \n     private void verifyEntities(Entity20 e20, boolean usesProxy) {\n-        if (log.isTraceEnabled()) {\n-            log.trace(\"verifyEntities() - asserting expected proxy usage is \" + usesProxy);\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"verifyEntities() - asserting expected proxy usage is \" + usesProxy);\n             printClassNames(e20);\n         }\n         assertTrue(\"Expected sqlDate endsWith($proxy) to return \" + usesProxy,\n@@ -283,10 +444,10 @@ private void verifyEntities(Entity20 e20, boolean usesProxy) {\n     }\n     \n     private void printClassNames(Entity20 e20) {\n-        if (log.isTraceEnabled()) {\n-            log.trace(\"sqlDate = \" + e20.getDate().getClass().getCanonicalName());\n-            log.trace(\"sqlTime = \" + e20.getTime().getClass().getCanonicalName());\n-            log.trace(\"sqlTimestamp = \" + e20.getTimestamp().getClass().getCanonicalName());\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"sqlDate = \" + e20.getDate().getClass().getCanonicalName());\n+            _log.trace(\"sqlTime = \" + e20.getTime().getClass().getCanonicalName());\n+            _log.trace(\"sqlTimestamp = \" + e20.getTimestamp().getClass().getCanonicalName());\n         }\n     }\n }"},{"sha":"a14f4dda097572808ac08b234c0631941825d591","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","status":"modified","additions":9,"deletions":67,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -21,7 +21,9 @@\n import java.math.BigDecimal;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.UUID;\n \n import javax.persistence.EntityManager;\n@@ -75,7 +77,6 @@ public void setUp() {\n     /* \n      * Test default 1.0 compatibility behavior, which should pass AS-IS\n      */\n-    @AllowFailure(message=\"Will fail until OPENJPA-1597 is fixed\")\n     public void testAnnuity1Compat() throws Exception {\n         OpenJPAEntityManagerFactorySPI emf1 = \n             (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n@@ -91,6 +92,8 @@ public void testAnnuity1Compat() throws Exception {\n             log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n             log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n             log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n         }\n \n         try {\n@@ -103,9 +106,8 @@ public void testAnnuity1Compat() throws Exception {\n     }\n     \n     /* \n-     * Test 2.0 behavior with Compatibility flag and DetachedStateField=true, which should PASS\n+     * Test default 2.0 compatibility behavior, which should PASS\n      */\n-    @AllowFailure(message=\"Will fail until OPENJPA-1597 is fixed\")\n     public void testAnnuity2Compat() throws Exception {\n         OpenJPAEntityManagerFactorySPI emf2 = \n             (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n@@ -121,6 +123,8 @@ public void testAnnuity2Compat() throws Exception {\n             log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n             log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n             log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n+            log.trace(\"IgnoreDetachedStateFieldForProxySerialization=\" +\n+                compat.getIgnoreDetachedStateFieldForProxySerialization());\n         }\n \n         try {\n@@ -132,69 +136,6 @@ public void testAnnuity2Compat() throws Exception {\n         }\n     }\n     \n-    /* \n-     * Test 2.0 behavior with DetachedStateField=true, which should FAIL\n-     */\n-    public void testAnnuity2Fail() throws Exception {\n-        OpenJPAEntityManagerFactorySPI emf2 = \n-            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n-            \"Annuity2Fail\", \"org/apache/openjpa/persistence/proxy/persistence2.xml\");\n-        assertNotNull(emf2);\n-\n-        Log log = emf2.getConfiguration().getLog(\"test\");\n-\n-        if (log.isTraceEnabled()) {\n-            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n-            assertNotNull(compat);\n-            log.trace(\"started testAnnuity2Fail()\");\n-            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n-            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n-            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n-        }\n-\n-        try {\n-            execute(emf2);\n-            fail(\"testAnuity2Fail() should have caused an execption!\");\n-        } catch (RuntimeException e) {\n-            if (e.getMessage().startsWith(\"Annuity:\")) {\n-                // no-op caught our expected exception\n-            } else {\n-                fail(\"testAnuity2Fail() caught an unexpected execption!\" + e);\n-            }\n-        } finally {\n-            emf2.close();\n-        }\n-    }\n-    \n-    /* \n-     * Test default 2.0 behavior with DetachedStateField=transient, which should PASS\n-     */\n-    public void testAnnuity2New() throws Exception {\n-        OpenJPAEntityManagerFactorySPI emf2 = \n-            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\n-            \"Annuity2New\", \"org/apache/openjpa/persistence/proxy/persistence2.xml\");\n-        assertNotNull(emf2);\n-\n-        Log log = emf2.getConfiguration().getLog(\"test\");\n-\n-        if (log.isTraceEnabled()) {\n-            Compatibility compat = emf2.getConfiguration().getCompatibilityInstance();\n-            assertNotNull(compat);\n-            log.trace(\"started testAnnuity2New()\");\n-            log.trace(\"FlushBeforeDetach=\" + compat.getFlushBeforeDetach());\n-            log.trace(\"CopyOnDetach=\" + compat.getCopyOnDetach());\n-            log.trace(\"CascadeWithDetach=\" + compat.getCascadeWithDetach());\n-        }\n-\n-        try {\n-            execute(emf2);\n-        } catch (RuntimeException e) {\n-            fail(\"testAnuity2New() should not have caused an execption!\" + e);\n-        } finally {\n-            emf2.close();\n-        }\n-    }\n-    \n     private void execute(OpenJPAEntityManagerFactorySPI myEMF) throws Exception {\n         Log log = myEMF.getConfiguration().getLog(\"test\");\n         //EntityManager em = myEMF.createEntityManager();\n@@ -613,7 +554,8 @@ private void assertPayorsEqual(List<IPayor> payors, List<IPayor> payors2, String\n         if (payors == null)\n             throw new RuntimeException(\"Annuity: IPayor list not the same (payors was null)!\");\n         if (payors.size() != payors2.size())\n-            throw new RuntimeException(\"Annuity: IPayor list not the same (payors size not the same)!\");\n+            throw new RuntimeException(\"Annuity: IPayor list not the same (payors size not the same)! payors=\" +\n+                payors.toArray().toString() + \", payors2=\" + payors2.toString());\n         for (int i = 0; i < payors.size(); i++) {\n             IPayor payor = payors.get(i);\n             boolean found = false;"},{"sha":"5dbc1ae67c3bda2fe40f7d47be98ab20282cdb51","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence1.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence1.xml","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence1.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence1.xml?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n+\n+    <persistence-unit name=\"NoProxy1Compat\">\n+        <class>org.apache.openjpa.persistence.detach.Entity20</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+</persistence>"},{"sha":"b768a65e42841f70a4c1a6308db172d916409810","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence2.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence2.xml","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/detach/persistence2.xml?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">\n+\n+    <!-- \n+         This is the new PU for 2.0, which takes the default 2.0 \n+         behavior of removing $proxy for default DetachedStateField=transient\n+    -->\n+    <persistence-unit name=\"NoProxy2New\">\n+        <class>org.apache.openjpa.persistence.detach.Entity20</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+\n+    <!-- \n+         This is the original PU from 1.0, but running as a 2.0 app\n+         with the new Compatibility flag set to use the old 1.0 behavior,\n+         which is to not remove $proxy after calling EM.clear()\n+    -->\n+    <persistence-unit name=\"NoProxy2Compat\">\n+        <class>org.apache.openjpa.persistence.detach.Entity20</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <properties>\t\t\t\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema(ForeignKeys=true)\" />\n+            <property name=\"openjpa.Compatibility\"\n+                value=\"IgnoreDetachedStateFieldForProxySerialization=true\" />\n+        </properties>\n+    </persistence-unit>\n+\n+</persistence>"},{"sha":"3e8ddd4b9cb41151ef86154cec79b6cdd6ab8ef3","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","status":"modified","additions":4,"deletions":56,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/proxy/persistence2.xml?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -26,58 +26,6 @@\n     <!-- \n          This is the original PU from 1.0, but running as a 2.0 app\n     -->\n-    <persistence-unit name=\"Annuity2Fail\">\n-        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n-        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n-        <properties>\t\t\t\n-            <property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\" />\n-            <!-- <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\"/> -->\n-            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n-                value=\"buildSchema(ForeignKeys=true)\"/>\n-        </properties>\n-    </persistence-unit>\n-\n-    <!--\n-         This is the original PU from 1.0, but with the DetachedStateField\n-         override removed, which will cause a transient one to be used\n-         and the tests will pass.\n-    -->\n-    <persistence-unit name=\"Annuity2New\">\n-        <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityHolder</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.AnnuityPersistebleObject</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Contact</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.EquityAnnuity</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.FixedAnnuity</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Payor</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Payout</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Person</class>\n-        <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n-        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n-        <properties>\t\t\t\n-            <!-- <property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\" /> -->\n-            <!-- <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\"/> -->\n-            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n-                value=\"buildSchema(ForeignKeys=true)\"/>\n-        </properties>\n-    </persistence-unit>\n-\n-    <!-- \n-         This is the original PU from 1.0, but running as a 2.0 app\n-         with the new Compatibility flag set to use the old 1.0 behavior,\n-         so the tests will pass.\n-    -->\n     <persistence-unit name=\"Annuity2Compat\">\n         <class>org.apache.openjpa.persistence.proxy.entities.Address</class>\n         <class>org.apache.openjpa.persistence.proxy.entities.Annuity</class>\n@@ -92,11 +40,11 @@\n         <class>org.apache.openjpa.persistence.proxy.entities.Rider</class>\n         <exclude-unlisted-classes>true</exclude-unlisted-classes>\n         <properties>\t\t\t\n-            <!-- <property name=\"openjpa.Compatibility.xxxxx\" value=\"true)\" /> -->\n-            <property name=\"openjpa.DetachState\" value=\"fgs(DetachedStateField=true)\" />\n-            <!-- <property name=\"openjpa.jdbc.Schema\" value=\"EJB30\"/> -->\n+            <property name=\"openjpa.DetachState\"\n+                value=\"fgs(DetachedStateField=true)\" />\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n-                value=\"buildSchema(ForeignKeys=true)\"/>\n+                value=\"buildSchema(ForeignKeys=true)\" />\n         </properties>\n     </persistence-unit>\n+\n </persistence>"},{"sha":"9c74950e9bbc496cddf078fe204659cf16c0ef84","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/071e698899dda1d7734af04d35e8b138e529f0e2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=071e698899dda1d7734af04d35e8b138e529f0e2","patch":"@@ -287,6 +287,7 @@ public boolean afterSpecificationSet(Configuration c) {\n             compatibility.setFlushBeforeDetach(true);\n             compatibility.setCopyOnDetach(true);\n             compatibility.setPrivatePersistentProperties(true);\n+            compatibility.setIgnoreDetachedStateFieldForProxySerialization(true);\n             // Disable bean validation for spec level < 2 configurations\n             conf.validationMode.set(String.valueOf(ValidationMode.NONE));\n         } else {"}]}

