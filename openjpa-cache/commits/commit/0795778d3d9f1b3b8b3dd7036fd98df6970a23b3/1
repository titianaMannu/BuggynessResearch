{"sha":"0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3OTU3NzhkM2Q5ZjFiM2I4YjNkZDcwMzZmZDk4ZGY2OTcwYTIzYjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T21:32:29Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-28T21:32:29Z"},"message":"OPENJPA-1013: Visitor pattern for collecting declared parameters. Editing with parameters. Search within result usage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@809036 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e81810674fc21aed115d2a2ddfb3945912a2bc4c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e81810674fc21aed115d2a2ddfb3945912a2bc4c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","html_url":"https://github.com/apache/openjpa/commit/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/comments","author":null,"committer":null,"parents":[{"sha":"fe44661dc2614e44953e0d9aaba56e89954ccab5","url":"https://api.github.com/repos/apache/openjpa/commits/fe44661dc2614e44953e0d9aaba56e89954ccab5","html_url":"https://github.com/apache/openjpa/commit/fe44661dc2614e44953e0d9aaba56e89954ccab5"}],"stats":{"total":261,"additions":219,"deletions":42},"files":[{"sha":"e00c4ba9e0661bf8c4672e9a1e111b27cd833b39","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java?ref=0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","patch":"@@ -118,6 +118,7 @@ protected OpenJPAEntityManagerFactorySPI createNamedEMF(final String pu, Object.\n \n     protected Map<String, Object> getPropertiesMap(Object... props) {\n         Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"openjpa.DynamicEnhancementAgent\", \"false\");\n         List<Class<?>> types = new ArrayList<Class<?>>();\n         boolean prop = false;\n "},{"sha":"b3a4cde8148736b3e905eb129d85f89be16db7c5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","patch":"@@ -174,7 +174,7 @@ protected void evalGrouping(QueryExpressions exps, ExpressionFactory factory, Cr\n             exps.grouping[i] = Expressions.toValue((ExpressionImpl<?>)groupBy, factory, featureSelection, q);;\n         }\n \n-        exps.having = having == null ? factory.emptyExpression() : having.toKernelExpression(factory, featureSelection, q);\n+        exps.having = having == null ? null : having.toKernelExpression(factory, featureSelection, q);\n     }\n \n     protected void evalDistinct(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {"},{"sha":"a1f27740435ee800040d63e2598436d6665f7d1e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":46,"deletions":16,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","patch":"@@ -28,7 +28,6 @@\n import java.util.Set;\n import java.util.Stack;\n import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.CopyOnWriteArraySet;\n \n import javax.persistence.criteria.AbstractQuery;\n import javax.persistence.criteria.CriteriaQuery;\n@@ -80,7 +79,7 @@\n     private Boolean             _distinct;\n     private SubqueryImpl<?>     _delegator;\n     private final Class<T>      _resultClass;\n-    \n+    private boolean             _compiled;\n \n     // AliasContext\n     private int aliasCount = 0;\n@@ -190,21 +189,8 @@ public MetamodelImpl getMetamodel() {\n \n     /**\n      * Registers the given parameter.\n-     * On registration, an unnamed parameter is assigned an auto-generated \n-     * name. \n-     * \n      */\n-    public void registerParameter(ParameterExpressionImpl<?> p) {\n-        if (_delegator != null) {\n-            CriteriaQueryImpl<?> owner = _delegator.getInnermostParent();\n-            if (owner != this) {\n-                owner.registerParameter(p);\n-            } \n-        } \n-        registerParameterInternal(p);\n-    }\n-    \n-    private void registerParameterInternal(ParameterExpressionImpl<?> p) {\n+    void registerParameter(ParameterExpressionImpl<?> p) {\n         if (_params == null)\n             _params = new LinkedMap/*<ParameterExpression<?>, Class<?>*/();\n         if (!_params.containsKey(p)) {\n@@ -214,6 +200,7 @@ private void registerParameterInternal(ParameterExpressionImpl<?> p) {\n     }\n     \n     public Set<ParameterExpression<?>> getParameters() {\n+        collectParameters(new CriteriaExpressionVisitor.ParameterVisitor(this));\n         return _params == null ? Collections.EMPTY_SET : _params.keySet();\n     }\n \n@@ -266,11 +253,21 @@ private void registerParameterInternal(ParameterExpressionImpl<?> p) {\n     }\n \n     public CriteriaQuery<T> where(Expression<Boolean> restriction) {\n+        invalidateCompilation();\n+        if (restriction == null) {\n+            _where = null;\n+            return this;\n+        }\n         _where = new PredicateImpl().add(restriction);\n         return this;\n     }\n \n     public CriteriaQuery<T> where(Predicate... restrictions) {\n+        invalidateCompilation();\n+        if (restrictions == null) {\n+            _where = null;\n+            return this;\n+        }\n         _where = new PredicateImpl();\n         for (Predicate p : restrictions)\n         \t_where.add(p);\n@@ -340,6 +337,7 @@ public Boolean getDistinct() {\n      * Empty map if no parameter has been declared. \n      */\n     public LinkedMap getParameterTypes() {\n+        collectParameters(new CriteriaExpressionVisitor.ParameterVisitor(this));\n         return _params == null ? StoreQuery.EMPTY_PARAMS : _params;\n     }\n     \n@@ -562,5 +560,37 @@ protected boolean isDefaultProjection() {\n         }\n         return false;\n     }\n+    \n+    void invalidateCompilation() {\n+        _compiled = false;\n+        _params   = null;\n+    }\n+    \n+    /**\n+     * Compiles to verify that at least one root is defined, a selection term is present\n+     * and, most importantly, collects all the parameters so that they can be bound to\n+     * the executable query. \n+     */\n+    public void compile() {\n+        if (_compiled)\n+            return;\n+        assertRoot();\n+        assertSelection();\n+        collectParameters(new CriteriaExpressionVisitor.ParameterVisitor(this));\n+        _compiled = true;\n+    }\n+    \n+    private void collectParameters(CriteriaExpressionVisitor visitor) {\n+        if (_compiled)\n+            return;\n+        if (_where != null) {\n+            _where.acceptVisit(visitor);\n+        }\n+        if (_subqueries != null) {\n+            for (Subquery<?> subq : _subqueries) {\n+                ((SubqueryImpl<?>)subq).getDelegate().collectParameters(visitor);\n+            }\n+        }\n+    }\n \n }"},{"sha":"8746d1a1dbe8ac9c6cc78677a684cb8886fbc64a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java?ref=0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","patch":"@@ -37,15 +37,22 @@\n  * @param <X> the type of the value this expression represents.\n  */\n public abstract class ExpressionImpl<X> extends SelectionImpl<X> \n-    implements Expression<X> {\n-\n-    abstract Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q);\n+    implements CriteriaExpression<X> {\n+    abstract org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n+            CriteriaQueryImpl<?> q);\n     \n     org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection,\n         CriteriaQueryImpl<?> q) {\n         return factory.asExpression(toValue(factory, featureSelection, q));\n     }\n     \n+    public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+        if (!visitor.isVisited(this)) {\n+            visitor.enter(this);\n+            visitor.exit(this);\n+        }\n+    }\n+    \n \n     /**\n      * @param cls the type of the evaluated result of the expression"},{"sha":"3bc117433db4d7db2a9ac66bb3948a34c7da9cdd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":153,"deletions":22,"changes":175,"blob_url":"https://github.com/apache/openjpa/blob/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","patch":"@@ -63,6 +63,15 @@ static void setImplicitTypes(Value v1, Value v2, Class<?> expected, CriteriaQuer\n          JPQLExpressionBuilder.setImplicitTypes(v1, v2, expected, q.getMetamodel(), \n              q.getParameterTypes(), q.toString());\n      }\n+     \n+     static void acceptVisit(CriteriaExpressionVisitor visitor, Expression<?>...exprs) {\n+         if (exprs == null)\n+             return;\n+         for (Expression<?> e : exprs) {\n+             if (e != null)\n+                 ((ExpressionImpl<?>)e).acceptVisit(visitor);\n+         }\n+     }\n     \n     /**\n      * Unary Functional Expression applies a unary function on a input operand Expression.\n@@ -82,6 +91,11 @@ public UnaryFunctionalExpression(Class<X> t, Expression<?> e) {\n         public UnaryFunctionalExpression(Expression<X> e) {\n             this(e.getJavaType(), e);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, e);\n+        }\n     }\n     \n     /**\n@@ -101,6 +115,11 @@ public BinarayFunctionalExpression(Class<X> t, Expression<?> x, Expression<?> y)\n             e1 = (ExpressionImpl<?>)x;\n             e2 = (ExpressionImpl<?>)y;\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, e1, e2);\n+        }\n     }\n     \n     /**\n@@ -122,6 +141,11 @@ public FunctionalExpression(Class<X> t, Expression<?>... args) {\n                 this.args[i] = (ExpressionImpl<?>)args[i];\n             }\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, args);\n+        }\n     }\n    \n     /**\n@@ -143,6 +167,11 @@ public BinaryLogicalExpression(Expression<?> x, Expression<?> y) {\n         public PredicateImpl clone() {\n             return new BinaryLogicalExpression(e1, e2);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, e1, e2);\n+        }\n     }\n     \n     \n@@ -333,6 +362,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 from == null ? null : from.toValue(factory, featureSelection, q), \n                 len == null ? null : len.toValue(factory, featureSelection, q));\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, from, len);\n+        }\n     }\n \n     public static class Locate extends ExpressionImpl<Integer> {\n@@ -376,6 +410,11 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                                              factory.newLiteral(Integer.valueOf(1), Literal.TYPE_NUMBER)))),\n                                              factory.newLiteral(Integer.valueOf(1), Literal.TYPE_NUMBER));\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, pattern, from, path);\n+        }\n     }\n     \n     public static class Trim extends BinarayFunctionalExpression<String> {\n@@ -721,19 +760,15 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             }\n             return factory.newLiteral(value, literalType);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            if (arg instanceof CriteriaExpression) {\n+                ((CriteriaExpression<?>)arg).acceptVisit(visitor);\n+            }\n+        }\n     }\n     \n-//    public static class TypeConstant<X> extends Constant<X> {\n-//        public TypeConstant(X x) {\n-//            super((Class<X>)x.getClass(),x);\n-//        }\n-//        \n-//        @Override\n-//        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-//            return factory.newTypeLiteral(arg, Literal.TYPE_CLASS);\n-//        }\n-//    }\n-    \n     public static class IsEmpty extends PredicateImpl {\n         final ExpressionImpl<?> collection;\n         public IsEmpty(Expression<?> collection) {\n@@ -752,6 +787,11 @@ public PredicateImpl clone() {\n             Value val = Expressions.toValue(collection, factory, featureSelection, q);\n             return (isNegated()) ? factory.not(factory.isEmpty(val)) : factory.isEmpty(val);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, collection);\n+        }\n     }\n     \n     public static class IsNotEmpty extends PredicateImpl {\n@@ -772,6 +812,11 @@ public PredicateImpl clone() {\n             Value val = Expressions.toValue(collection, factory, featureSelection, q);\n             return (isNegated()) ? factory.isEmpty(val) : factory.isNotEmpty(val);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, collection);\n+        }\n     }\n \n     \n@@ -820,6 +865,11 @@ public PredicateImpl clone() {\n                 Expressions.toValue(element, factory, featureSelection, q));\n             return _negated ? factory.not(contains) : contains;\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, collection, element);\n+        }\n     }\n     \n     public static class Like extends PredicateImpl {\n@@ -875,6 +925,11 @@ public PredicateImpl clone() {\n                 Expressions.toValue(pattern, factory, featureSelection, q), \n                 MATCH_SINGLECHAR, MATCH_MULTICHAR, escapeStr);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, str, pattern, escapeChar);\n+        }\n     }\n     \n     public static class Coalesce<T> extends ExpressionImpl<T> implements QueryBuilder.Coalesce<T> {\n@@ -903,6 +958,11 @@ public Coalesce(Class<T> cls) {\n                 vs[i++] = Expressions.toValue((ExpressionImpl<?>)e, factory, featureSelection, q);\n             return factory.coalesceExpression(vs);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, values.toArray(new ExpressionImpl[values.size()]));\n+        }\n     }\n     \n     public static class Nullif<T> extends ExpressionImpl<T> {\n@@ -928,6 +988,11 @@ public Nullif(Expression<T> x, T y) {\n             Value value2 = Expressions.toValue((ExpressionImpl<?>)val2, factory, featureSelection, q); \n             return factory.nullIfExpression(value1, value2);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, val1, val2);\n+        }\n     }\n \n     public static class IsNull extends PredicateImpl {\n@@ -949,6 +1014,11 @@ public PredicateImpl negate() {\n                 Expressions.toValue(e, factory, featureSelection, q), \n                 factory.getNull());\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, e);\n+        }\n     }\n     \n     public static class IsNotNull extends PredicateImpl {\n@@ -970,6 +1040,11 @@ public PredicateImpl negate() {\n                 Expressions.toValue(e, factory, featureSelection, q), \n                 factory.getNull());\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, e);\n+        }\n     }\n     \n     \n@@ -1030,6 +1105,11 @@ public In(Expression<?> e) {\n             \n             return factory.and(inExpr, notNull.toKernelExpression(factory, featureSelection, q));\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, e);\n+        }\n     }\n     \n     public static class Case<T> extends ExpressionImpl<T> implements QueryBuilder.Case<T> {\n@@ -1075,6 +1155,13 @@ public Case(Class<T> cls) {\n             Value other = Expressions.toValue((ExpressionImpl<?>)otherwise, factory, featureSelection, q);\n             return factory.generalCaseExpression(exps, other);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, thens.toArray(new ExpressionImpl[thens.size()]));\n+            Expressions.acceptVisit(visitor, whens.toArray(new ExpressionImpl[whens.size()]));\n+            Expressions.acceptVisit(visitor, otherwise);\n+        }\n     }\n \n     public static class SimpleCase<C,R> extends ExpressionImpl<R> implements QueryBuilder.SimpleCase<C,R> {\n@@ -1130,6 +1217,13 @@ public SimpleCase(Expression<C> expr) {\n             Value other = Expressions.toValue((ExpressionImpl<?>)otherwise, factory, featureSelection, q);\n             return factory.simpleCaseExpression(caseOperandExpr, exps, other);\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, thens.toArray(new ExpressionImpl[thens.size()]));\n+            Expressions.acceptVisit(visitor, whens.toArray(new ExpressionImpl[whens.size()]));\n+            Expressions.acceptVisit(visitor, otherwise, caseOperand);\n+        }\n     }\n \n     public static class Lower extends UnaryFunctionalExpression<String> {\n@@ -1167,13 +1261,39 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             return factory.stringLength(Expressions.toValue(e, factory, featureSelection, q));\n         }\n     }\n-     \n-    public static class Exists<X> extends PredicateImpl {\n+    \n+    public static abstract class SubqueryPredicate<X> extends PredicateImpl {\n         final SubqueryImpl<X> e;\n-        public Exists(Subquery<X> x) {\n+        \n+        public SubqueryPredicate(Subquery<X> x) {\n             super();\n             e = (SubqueryImpl<X>)x;\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, e);\n+        }\n+    }\n+     \n+    public static abstract class SubqueryExpression<X> extends ExpressionImpl<X> {\n+        final SubqueryImpl<X> e;\n+        \n+        public SubqueryExpression(Subquery<X> x) {\n+            super(x.getJavaType());\n+            e = (SubqueryImpl<X>)x;\n+        }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            if (e != null) e.acceptVisit(visitor);\n+        }\n+    }\n+\n+    public static class Exists<X> extends SubqueryPredicate<X> {\n+        public Exists(Subquery<X> x) {\n+            super(x);\n+        }\n \n         @Override\n         public PredicateImpl clone() {\n@@ -1189,11 +1309,9 @@ public PredicateImpl clone() {\n         }        \n     }\n     \n-    public static class All<X> extends ExpressionImpl<X> {\n-        final SubqueryImpl<X> e;\n+    public static class All<X> extends SubqueryExpression<X> {\n         public All(Subquery<X> x) {\n-            super(x.getJavaType());\n-            e = (SubqueryImpl<X>)x;\n+            super(x);\n         }\n         \n         @Override\n@@ -1203,11 +1321,9 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n         }\n     }\n \n-    public static class Any<X> extends ExpressionImpl<X> {\n-        final SubqueryImpl<X> e;\n+    public static class Any<X> extends SubqueryExpression<X> {\n         public Any(Subquery<X> x) {\n-            super(x.getJavaType());\n-            e = (SubqueryImpl<X>)x;\n+            super(x);\n         }\n         \n         @Override\n@@ -1233,6 +1349,11 @@ public PredicateImpl clone() {\n           ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n             return factory.not(super.toKernelExpression(factory, featureSelection, q));\n         }        \n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, e);\n+        }\n     }\n     \n     public static class CastAs<Y> extends ExpressionImpl<Y> {\n@@ -1249,6 +1370,11 @@ public CastAs(Class<Y> cast, ExpressionImpl<?> actual) {\n             e.setImplicitType(getJavaType());\n             return e;\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, actual);\n+        }\n     }\n     \n     /**\n@@ -1275,6 +1401,11 @@ public ListArgument(Class<T> cls, ExpressionImpl<?>... args) {\n             e.setImplicitType(getJavaType());\n             return e;\n         }\n+        \n+        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+            super.acceptVisit(visitor);\n+            Expressions.acceptVisit(visitor, _args);\n+        }\n     }\n \n }"},{"sha":"a46c1523c459e3685b711101446f4bd1134b03dd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0795778d3d9f1b3b8b3dd7036fd98df6970a23b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=0795778d3d9f1b3b8b3dd7036fd98df6970a23b3","patch":"@@ -124,6 +124,14 @@ public PredicateImpl clone() {\n         return _negated ? factory.not(result) : result;\n     }\n \n+    public void acceptVisit(CriteriaExpressionVisitor visitor) {\n+        if (_exps == null)\n+            return;\n+        for (Expression<?> e : _exps) {\n+            ((ExpressionImpl<?>)e).acceptVisit(visitor);\n+        }\n+    }\n+    \n     public static class And extends PredicateImpl {\n         public And(Expression<Boolean> x, Expression<Boolean> y) {\n             super(BooleanOperator.AND);"}]}

