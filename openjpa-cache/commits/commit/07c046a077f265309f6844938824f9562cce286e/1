{"sha":"07c046a077f265309f6844938824f9562cce286e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA3YzA0NmEwNzdmMjY1MzA5ZjY4NDQ5Mzg4MjRmOTU2MmNjZTI4NmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-08T01:03:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-08T01:03:43Z"},"message":"Oops; earlier refactoring was not complete.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@609825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"229cc3d196e4a7c04cd9adf25201b06fca21da2c","url":"https://api.github.com/repos/apache/openjpa/git/trees/229cc3d196e4a7c04cd9adf25201b06fca21da2c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/07c046a077f265309f6844938824f9562cce286e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/07c046a077f265309f6844938824f9562cce286e","html_url":"https://github.com/apache/openjpa/commit/07c046a077f265309f6844938824f9562cce286e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/07c046a077f265309f6844938824f9562cce286e/comments","author":null,"committer":null,"parents":[{"sha":"26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c","url":"https://api.github.com/repos/apache/openjpa/commits/26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c","html_url":"https://github.com/apache/openjpa/commit/26ef9ddabbb3deb3f7fb8f8145ddc3131ec51e5c"}],"stats":{"total":134,"additions":97,"deletions":37},"files":[{"sha":"1f6fa4088a1255d9f3a3c07e41d3ff5acacd5c60","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","status":"modified","additions":26,"deletions":22,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/07c046a077f265309f6844938824f9562cce286e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","raw_url":"https://github.com/apache/openjpa/raw/07c046a077f265309f6844938824f9562cce286e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java?ref=07c046a077f265309f6844938824f9562cce286e","patch":"@@ -44,28 +44,7 @@\n     private final BrokerFactory factory;\r\n     private final OpenJPAConfiguration conf;\r\n     private final boolean devpath;\r\n-    private final Log log;\r\n-\r\n-    /**\r\n-     * @deprecated logging is routed to the logging system now.\r\n-     */\r\n-    public MetaDataCacheMaintenance(BrokerFactory factory, boolean devpath,\r\n-        boolean verbose) {\r\n-        this(factory, devpath);\r\n-    }\r\n-\r\n-    /**\r\n-     * @param factory The {@link BrokerFactory} for which cached metadata\r\n-     * should be built.\r\n-     * @param devpath Whether or not to scan the development environment paths\r\n-     * to find persistent types to store.\r\n-     */\r\n-    public MetaDataCacheMaintenance(BrokerFactory factory, boolean devpath) {\r\n-        this.factory = factory;\r\n-        this.conf = factory.getConfiguration();\r\n-        this.devpath = devpath;\r\n-        this.log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\r\n-    }\r\n+    private Log log;\r\n \r\n     public static void main(String[] args) {\r\n         Options opts = new Options();\r\n@@ -92,6 +71,31 @@ else if (\"dump\".equals(args[0]))\n         }\r\n     }\r\n \r\n+    /**\r\n+     * @deprecated logging is routed to the logging system now.\r\n+     */\r\n+    public MetaDataCacheMaintenance(BrokerFactory factory, boolean devpath,\r\n+        boolean verbose) {\r\n+        this(factory, devpath);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param factory The {@link BrokerFactory} for which cached metadata\r\n+     * should be built.\r\n+     * @param devpath Whether or not to scan the development environment paths\r\n+     * to find persistent types to store.\r\n+     */\r\n+    public MetaDataCacheMaintenance(BrokerFactory factory, boolean devpath) {\r\n+        this.factory = factory;\r\n+        this.conf = factory.getConfiguration();\r\n+        this.devpath = devpath;\r\n+        this.log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\r\n+    }\r\n+\r\n+    public void setLog(Log log) {\r\n+        this.log = log;\r\n+    }\r\n+\r\n     private static int usage() {\r\n         System.err.println(\"Usage: java MetaDataCacheMaintenance \"\r\n             + \"[-scanDevPath t|f] store | dump\");\r"},{"sha":"462bcd5e5e153850c16b994f728e8f0fe7f80251","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","status":"modified","additions":71,"deletions":15,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/07c046a077f265309f6844938824f9562cce286e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","raw_url":"https://github.com/apache/openjpa/raw/07c046a077f265309f6844938824f9562cce286e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java?ref=07c046a077f265309f6844938824f9562cce286e","patch":"@@ -31,6 +31,7 @@\n import org.apache.openjpa.persistence.query.NamedQueryEntity;\r\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n+import org.apache.openjpa.lib.log.Log;\r\n \r\n public class TestCacheMarshallerEndToEnd\r\n     extends PersistenceTestCase {\r\n@@ -75,22 +76,13 @@ public void testCacheMarshallerEndToEnd()\n             emf.getConfiguration(), MetaDataCacheMaintenance.class.getName());\r\n         cm.getOutputFile().delete();\r\n         MetaDataCacheMaintenance maint = new MetaDataCacheMaintenance(\r\n-            JPAFacadeHelper.toBrokerFactory(emf), false, true);\r\n-        final List<String> lines = new ArrayList<String>();\r\n-        PrintStream out = new PrintStream(new ByteArrayOutputStream()) {\r\n-            public void println(String line) {\r\n-                lines.add(line);\r\n-            }\r\n-\r\n-            public void println(Object line) {\r\n-                println(line.toString());\r\n-            }\r\n-        };\r\n-        maint.setOutputStream(out);\r\n+            JPAFacadeHelper.toBrokerFactory(emf), false);\r\n+        LogImpl log = new LogImpl();\r\n+        maint.setLog(log);\r\n         maint.store();\r\n-        assertContains(lines, \"    \" + AllFieldTypes.class.getName());\r\n-        assertContains(lines, \"    \" + NamedQueryEntity.class.getName());\r\n-        assertContains(lines, \"    NamedQueryEntity.namedQuery\");\r\n+        assertContains(log.lines, \"    \" + AllFieldTypes.class.getName());\r\n+        assertContains(log.lines, \"    \" + NamedQueryEntity.class.getName());\r\n+        assertContains(log.lines, \"    NamedQueryEntity.namedQuery\");\r\n         emf.close();\r\n \r\n         emf = createEMF(LOAD_PROPS);\r\n@@ -112,4 +104,68 @@ private void assertContains(List<String> lines, String prefix) {\n         fail(\"should contain a line starting with \" + prefix\r\n             + \": \" + lines);\r\n     }\r\n+\r\n+    private class LogImpl implements Log {\r\n+        private List<String> lines = new ArrayList<String>();\r\n+\r\n+        public boolean isTraceEnabled() {\r\n+            return true;\r\n+        }\r\n+\r\n+        public boolean isInfoEnabled() {\r\n+            return true;\r\n+        }\r\n+\r\n+        public boolean isWarnEnabled() {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public boolean isErrorEnabled() {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public boolean isFatalEnabled() {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public void trace(Object o) {\r\n+            lines.add(o.toString());\r\n+        }\r\n+\r\n+        public void trace(Object o, Throwable t) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public void info(Object o) {\r\n+            lines.add(o.toString());\r\n+        }\r\n+\r\n+        public void info(Object o, Throwable t) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public void warn(Object o) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public void warn(Object o, Throwable t) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public void error(Object o) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public void error(Object o, Throwable t) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public void fatal(Object o) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+\r\n+        public void fatal(Object o, Throwable t) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+    }\r\n }\r"}]}

