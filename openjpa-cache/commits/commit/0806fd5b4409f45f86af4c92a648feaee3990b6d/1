{"sha":"0806fd5b4409f45f86af4c92a648feaee3990b6d","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4MDZmZDViNDQwOWY0NWY4NmFmNGM5MmE2NDhmZWFlZTM5OTBiNmQ=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-09T17:06:23Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-04-09T17:06:23Z"},"message":"OPENJPA-208 Added NoResultException and NonUniqueResultException to kernel to allow the identification of the case where a unique result was selected by either none or too many were found\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@526834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"261f4b6807922508757f094124c8da5fe7952db4","url":"https://api.github.com/repos/apache/openjpa/git/trees/261f4b6807922508757f094124c8da5fe7952db4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0806fd5b4409f45f86af4c92a648feaee3990b6d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0806fd5b4409f45f86af4c92a648feaee3990b6d","html_url":"https://github.com/apache/openjpa/commit/0806fd5b4409f45f86af4c92a648feaee3990b6d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0806fd5b4409f45f86af4c92a648feaee3990b6d/comments","author":null,"committer":null,"parents":[{"sha":"82c71f6dcec66e480f9414e277ddfe22b783926a","url":"https://api.github.com/repos/apache/openjpa/commits/82c71f6dcec66e480f9414e277ddfe22b783926a","html_url":"https://github.com/apache/openjpa/commit/82c71f6dcec66e480f9414e277ddfe22b783926a"}],"stats":{"total":128,"additions":108,"deletions":20},"files":[{"sha":"1156fceb4d043be3dad64a0507b2778dd2ffcc27","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=0806fd5b4409f45f86af4c92a648feaee3990b6d","patch":"@@ -51,6 +51,8 @@\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.NonUniqueResultException;\n+import org.apache.openjpa.util.NoResultException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n@@ -1279,10 +1281,10 @@ private Object singleResult(ResultObjectProvider rop,\n             if (next) {\n                 single = rop.getResultObject();\n                 if (range.end != range.start + 1 && rop.next())\n-                    throw new InvalidStateException(_loc.get(\"not-unique\",\n+                    throw new NonUniqueResultException(_loc.get(\"not-unique\",\n                         _class, _query));\n             } else if (_unique == Boolean.TRUE)\n-                throw new InvalidStateException(_loc.get(\"no-result\", \n+                throw new NoResultException(_loc.get(\"no-result\", \n                     _class, _query));\n \n             // if unique set to false, use collection"},{"sha":"3c188d2571139c0c34e0ba3cc1a228d6fc00e1b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/NoResultException.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoResultException.java","raw_url":"https://github.com/apache/openjpa/raw/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoResultException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoResultException.java?ref=0806fd5b4409f45f86af4c92a648feaee3990b6d","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.util;\n+\n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n+/**\n+ * Exception type thrown when a query was configured to return\n+ * a single result, and no result was found.\n+ *\n+ * @since 0.9.7\n+ * @author Marc Prud'hommeaux\n+ */\n+public class NoResultException\n+    extends InvalidStateException {\n+\n+    public NoResultException(Message msg) {\n+        super(msg);\n+    }\n+\n+    public NoResultException(Message msg, Object failed) {\n+        super(msg);\n+        setFailedObject(failed);\n+    }\n+\n+    public int getSubtype() {\n+        return NO_RESULT;\n+    }\n+}\n+"},{"sha":"242c9e6e79d26070af67fa13a0175bc0498dddce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/NonUniqueResultException.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-kernel/src/main/java/org/apache/openjpa/util/NonUniqueResultException.java","raw_url":"https://github.com/apache/openjpa/raw/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-kernel/src/main/java/org/apache/openjpa/util/NonUniqueResultException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/NonUniqueResultException.java?ref=0806fd5b4409f45f86af4c92a648feaee3990b6d","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.util;\n+\n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n+/**\n+ * Exception type thrown when a query was configured to return\n+ * a single result, and multiple results were found.\n+ *\n+ * @since 0.9.7\n+ * @author Marc Prud'hommeaux\n+ */\n+public class NonUniqueResultException\n+    extends InvalidStateException {\n+\n+    public NonUniqueResultException(Message msg) {\n+        super(msg);\n+    }\n+\n+    public NonUniqueResultException(Message msg, Object failed) {\n+        super(msg);\n+        setFailedObject(failed);\n+    }\n+\n+    public int getSubtype() {\n+        return NON_UNIQUE_RESULT;\n+    }\n+}\n+"},{"sha":"f44573d847dddc3f2099e3bbf7eab74fec105681","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","raw_url":"https://github.com/apache/openjpa/raw/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java?ref=0806fd5b4409f45f86af4c92a648feaee3990b6d","patch":"@@ -30,6 +30,8 @@\n     public static final int INVALID_STATE = 2;\n     public static final int NO_TRANSACTION = 3;\n     public static final int CALLBACK = 4;\n+    public static final int NO_RESULT = 5;\n+    public static final int NON_UNIQUE_RESULT = 6;\n \n     public UserException() {\n     }"},{"sha":"1f8339abc9cc18186b10709f22da01154d4c89c7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=0806fd5b4409f45f86af4c92a648feaee3990b6d","patch":"@@ -173,6 +173,16 @@ private static Exception translateUserException(OpenJPAException ke) {\n                         (ke.getMessage(), getNestedThrowables(ke),\n                             getFailedObject(ke), ke.isFatal());\n                 break;\n+            case UserException.NO_RESULT:\n+                e = new org.apache.openjpa.persistence.NoResultException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+                break;\n+            case UserException.NON_UNIQUE_RESULT:\n+                e = new org.apache.openjpa.persistence.NonUniqueResultException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+                break;\n             case UserException.INVALID_STATE:\n                 e = new org.apache.openjpa.persistence.InvalidStateException\n                     (ke.getMessage(), getNestedThrowables(ke),"},{"sha":"5def7405778e31caecfdaca621c7a5468eb5b8e8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":6,"deletions":18,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0806fd5b4409f45f86af4c92a648feaee3990b6d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=0806fd5b4409f45f86af4c92a648feaee3990b6d","patch":"@@ -281,26 +281,14 @@ public List getResultList() {\n      */\n     public Object getSingleResult() {\n         _em.assertNotCloseInvoked();\n-        Object ob = execute();\n-        if (!(ob instanceof List))\n-            return ob;\n-\n-        List res = (List) ob;\n+        // temporarily set query to unique so that a single result is validated\n+        // and returned; unset again in case the user executes query again\n+        // via getResultList\n+        _query.setUnique(true);\n         try {\n-            // don't use size() b/c can be inefficient under some LRS settings\n-            Iterator itr = res.iterator();\n-            if (!itr.hasNext())\n-                throw new NoResultException(_loc.get(\"no-results\",\n-                    _query.getQueryString()).getMessage(), null, null, false);\n-\n-            Object ret = itr.next();\n-            if (itr.hasNext())\n-                throw new NonUniqueResultException(_loc.get(\"mult-results\",\n-                    _query.getQueryString()).getMessage(), null, null, false);\n-\n-            return ret;\n+            return execute();\n         } finally {\n-            OpenJPAPersistence.close(res);\n+            _query.setUnique(false);\n         }\n     }\n "}]}

