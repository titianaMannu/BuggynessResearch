{"sha":"0836fba1588af1a9c4f1544bd123a3333fcd4a6d","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4MzZmYmExNTg4YWYxYTljNGYxNTQ0YmQxMjNhMzMzM2ZjZDRhNmQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-11-08T20:10:45Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-11-08T20:10:45Z"},"message":"OPENJPA-1762: lock join table when pessimistic scope is set to EXTENDED\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1032686 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e5399218692c5f9e0e856ef9e4805264779e50cf","url":"https://api.github.com/repos/apache/openjpa/git/trees/e5399218692c5f9e0e856ef9e4805264779e50cf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0836fba1588af1a9c4f1544bd123a3333fcd4a6d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0836fba1588af1a9c4f1544bd123a3333fcd4a6d","html_url":"https://github.com/apache/openjpa/commit/0836fba1588af1a9c4f1544bd123a3333fcd4a6d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0836fba1588af1a9c4f1544bd123a3333fcd4a6d/comments","author":null,"committer":null,"parents":[{"sha":"3c52abb73d84b4951c1db8e401583975f7d3793b","url":"https://api.github.com/repos/apache/openjpa/commits/3c52abb73d84b4951c1db8e401583975f7d3793b","html_url":"https://github.com/apache/openjpa/commit/3c52abb73d84b4951c1db8e401583975f7d3793b"}],"stats":{"total":15,"additions":12,"deletions":3},"files":[{"sha":"51e25032145f589433055116b7b4fc56ea16beea","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0836fba1588af1a9c4f1544bd123a3333fcd4a6d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/0836fba1588af1a9c4f1544bd123a3333fcd4a6d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=0836fba1588af1a9c4f1544bd123a3333fcd4a6d","patch":"@@ -34,6 +34,7 @@\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.LockScopes;\n import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n@@ -128,7 +129,8 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n \n         List<SQLBuffer> sqls = getLockRows(dict, id, mapping, fetch, _store.getSQLFactory()); \n-        lockJoinTables(sqls, dict, id, mapping, fetch, _store.getSQLFactory());\n+        if (ctx.getFetchConfiguration().getLockScope() == LockScopes.LOCKSCOPE_EXTENDED)\n+            lockJoinTables(sqls, dict, id, mapping, fetch, _store.getSQLFactory());\n \n         ensureStoreManagerTransaction();\n         Connection conn = _store.getConnection();"},{"sha":"83d28ae350addcc8ebd56f3cfd70747a7693e9be","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0836fba1588af1a9c4f1544bd123a3333fcd4a6d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0836fba1588af1a9c4f1544bd123a3333fcd4a6d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=0836fba1588af1a9c4f1544bd123a3333fcd4a6d","patch":"@@ -43,6 +43,7 @@\n import javax.persistence.EntityManager;\n import javax.persistence.FlushModeType;\n import javax.persistence.LockModeType;\n+import javax.persistence.PessimisticLockScope;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import javax.persistence.criteria.CriteriaQuery;\n@@ -1682,8 +1683,14 @@ private void configureCurrentFetchPlan(FetchPlan fetch, Map<String, Object> prop\n             LockModeType lock, boolean requiresTxn) {\n         // handle properties in map first\n         if (properties != null) {\n-            for (Map.Entry<String, Object> entry : properties.entrySet())\n-                fetch.setHint(entry.getKey(), entry.getValue());\n+            for (Map.Entry<String, Object> entry : properties.entrySet()) {\n+                String key = entry.getKey();\n+                Object value = entry.getValue();\n+                if (key.equals(\"javax.persistence.lock.scope\")) {\n+                    fetch.setLockScope((PessimisticLockScope)value);\n+                } else\n+                    fetch.setHint(key, value);\n+            }\n         }\n         // override with the specific lockMode, if needed.\n         if (lock != null && lock != LockModeType.NONE) {"}]}

