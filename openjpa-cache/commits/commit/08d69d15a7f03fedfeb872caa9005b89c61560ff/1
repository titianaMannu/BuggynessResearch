{"sha":"08d69d15a7f03fedfeb872caa9005b89c61560ff","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4ZDY5ZDE1YTdmMDNmZWRmZWI4NzJjYWE5MDA1Yjg5YzYxNTYwZmY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-10T20:56:32Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-10T20:56:32Z"},"message":"Vertical inheritance with eager fetching fixes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@462560 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afa1000f9a6a5fb36bfa273d166a69b73bd909f2","url":"https://api.github.com/repos/apache/openjpa/git/trees/afa1000f9a6a5fb36bfa273d166a69b73bd909f2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/08d69d15a7f03fedfeb872caa9005b89c61560ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/08d69d15a7f03fedfeb872caa9005b89c61560ff","html_url":"https://github.com/apache/openjpa/commit/08d69d15a7f03fedfeb872caa9005b89c61560ff","comments_url":"https://api.github.com/repos/apache/openjpa/commits/08d69d15a7f03fedfeb872caa9005b89c61560ff/comments","author":null,"committer":null,"parents":[{"sha":"b42c74b6cbc96172399e76632d902ac3236f70f7","url":"https://api.github.com/repos/apache/openjpa/commits/b42c74b6cbc96172399e76632d902ac3236f70f7","html_url":"https://github.com/apache/openjpa/commit/b42c74b6cbc96172399e76632d902ac3236f70f7"}],"stats":{"total":43,"additions":32,"deletions":11},"files":[{"sha":"db84dbf4da32bb9566b145f4907e5b91801b32d2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/08d69d15a7f03fedfeb872caa9005b89c61560ff/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/08d69d15a7f03fedfeb872caa9005b89c61560ff/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java?ref=08d69d15a7f03fedfeb872caa9005b89c61560ff","patch":"@@ -383,10 +383,7 @@ private void executeEagerSelects(ClassMapping mapping, BitSet paged,\n                         (_page[j]), store, fetch, res);\n             } finally {\n                 if (res instanceof Closeable)\n-                    try {\n-                        ((Closeable) res).close();\n-                    } catch (Exception e) {\n-                    }\n+                    try { ((Closeable) res).close(); } catch (Exception e) {}\n             }\n         }\n     }"},{"sha":"6dfa8474e58ba28a89ff97ff6c862278c2e9e0bd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/08d69d15a7f03fedfeb872caa9005b89c61560ff/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/08d69d15a7f03fedfeb872caa9005b89c61560ff/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=08d69d15a7f03fedfeb872caa9005b89c61560ff","patch":"@@ -40,6 +40,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ChangeTracker;\n+import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.Proxies;\n import org.apache.openjpa.util.Proxy;\n@@ -85,8 +86,16 @@ protected Object loadElement(OpenJPAStateManager sm, JDBCStore store,\n \n     protected Joins join(Joins joins, ClassMapping elem) {\n         ValueMapping vm = field.getElementMapping();\n-        return joins.joinRelation(field.getName(), vm.getForeignKey(elem), \n-            elem, vm.getSelectSubclasses(), true, true);\n+        ForeignKey fk = vm.getForeignKey(elem);\n+        ClassMapping owner = field.getDefiningMapping();\n+        while (fk.getPrimaryKeyTable() != owner.getTable()) {\n+            joins = owner.joinSuperclass(joins, false);\n+            owner = owner.getJoinablePCSuperclassMapping(); \n+            if (owner == null)\n+                throw new InternalException();\n+        }\n+        return joins.joinRelation(field.getName(), fk, elem, \n+            vm.getSelectSubclasses(), true, true);\n     }\n \n     protected Joins joinElementRelation(Joins joins, ClassMapping elem) {"},{"sha":"749ad74fc6bb29fedb4a9fd2ff46694af0f6957d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":20,"deletions":5,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/08d69d15a7f03fedfeb872caa9005b89c61560ff/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/08d69d15a7f03fedfeb872caa9005b89c61560ff/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=08d69d15a7f03fedfeb872caa9005b89c61560ff","patch":"@@ -1121,6 +1121,15 @@ private void whereForeignKey(ForeignKey fk, Object oid,\n             (mapping.getPrimaryKeyColumns(), fk.getPrimaryKeyColumns())) {\n             if (joins == null)\n                 joins = newJoins();\n+            // traverse to foreign key target mapping\n+            while (mapping.getTable() != fk.getPrimaryKeyTable()) {\n+                if (joins == null)\n+                    joins = newJoins();\n+                joins = mapping.joinSuperclass(joins, false);\n+                mapping = mapping.getJoinablePCSuperclassMapping();\n+                if (mapping == null)\n+                    throw new InternalException();\n+            }\n             joins = joins.join(fk, false, false);\n             wherePrimaryKey(oid, mapping, joins, store);\n             return;\n@@ -1159,8 +1168,7 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n         int count = 0;\n         for (int i = 0; i < toCols.length; i++, count++) {\n             if (pks == null)\n-                val = (oid == null) ? null\n-                    : Numbers.valueOf(((Id) oid).getId());\n+                val = (oid == null) ? null : Numbers.valueOf(((Id)oid).getId());\n             else {\n                 // must be app identity; use pk index to get correct pk value\n                 join = mapping.assertJoinable(toCols[i]);\n@@ -2556,9 +2564,19 @@ private Joins join(String name, ForeignKey fk, ClassMapping target,\n             // the joins will all be done in the from select\n             boolean createJoin = _sel._from == null;\n             Table table1 = null;\n+            Table table2 = null;\n             int alias1 = -1;\n             if (createJoin) {\n                 table1 = (inverse) ? fk.getPrimaryKeyTable() : fk.getTable();\n+                table2 = (inverse) ? fk.getTable() : fk.getPrimaryKeyTable();\n+                if (target != null) {\n+                    while (target.getTable() != table2) {\n+                        target.joinSuperclass(this, false);\n+                        target = target.getJoinablePCSuperclassMapping();\n+                        if (target == null)\n+                            throw new InternalException();\n+                    }\n+                }\n                 alias1 = _sel.getTableIndex(table1, this, true);\n             }\n \n@@ -2572,10 +2590,7 @@ private Joins join(String name, ForeignKey fk, ClassMapping target,\n             _outer = outer;\n \n             if (createJoin) {\n-                Table table2 = (inverse) ? fk.getTable()\n-                    : fk.getPrimaryKeyTable();\n                 int alias2 = _sel.getTableIndex(table2, this, true);\n-\n                 Join j = new Join(table1, alias1, table2, alias2, fk, inverse);\n                 j.setType((outer) ? Join.TYPE_OUTER : Join.TYPE_INNER);\n "}]}

