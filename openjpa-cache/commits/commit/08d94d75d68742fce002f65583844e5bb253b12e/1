{"sha":"08d94d75d68742fce002f65583844e5bb253b12e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA4ZDk0ZDc1ZDY4NzQyZmNlMDAyZjY1NTgzODQ0ZTViYjI1M2IxMmU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-10-17T18:35:03Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-10-17T18:35:03Z"},"message":"OPENJPA-2533: Reorder MetaDataRepository call to fix a bug in orm resloution.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1632647 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"982aa52eac8b3467f5aa86878291f717e3699dae","url":"https://api.github.com/repos/apache/openjpa/git/trees/982aa52eac8b3467f5aa86878291f717e3699dae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/08d94d75d68742fce002f65583844e5bb253b12e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/08d94d75d68742fce002f65583844e5bb253b12e","html_url":"https://github.com/apache/openjpa/commit/08d94d75d68742fce002f65583844e5bb253b12e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/08d94d75d68742fce002f65583844e5bb253b12e/comments","author":null,"committer":null,"parents":[{"sha":"078da9d00fa3c27e64f61bcc1232de3ba6421584","url":"https://api.github.com/repos/apache/openjpa/commits/078da9d00fa3c27e64f61bcc1232de3ba6421584","html_url":"https://github.com/apache/openjpa/commit/078da9d00fa3c27e64f61bcc1232de3ba6421584"}],"stats":{"total":183,"additions":168,"deletions":15},"files":[{"sha":"2704ff3f0c7aaf223f112c40db89686745787589","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=08d94d75d68742fce002f65583844e5bb253b12e","patch":"@@ -2000,17 +2000,16 @@ private void resolveAll(ClassLoader envLoader) {\n     private QueryMetaData getQueryMetaDataInternal(Class<?> cls, String name, ClassLoader envLoader) {\n         if (name == null)\n             return null;\n-        QueryMetaData qm = null;\n-        if (cls == null) {\n-            qm = searchQueryMetaDataByName(name);\n-            if (qm != null)\n-                return qm;\n-        }\n+\n         // check cache\n-        qm = (QueryMetaData) _queries.get(name);\n+        QueryMetaData qm = (QueryMetaData) _queries.get(name);\n         if (qm != null)\n             return qm;\n \n+        // see if factory can figure out a scope for this query\n+        if (cls == null)\n+            cls = _factory.getQueryScope(name, envLoader);\n+        \n         // get metadata for class, which will find queries in metadata file\n         if (cls != null && getMetaData(cls, envLoader, false) != null) {\n             qm = _queries.get(name);\n@@ -2019,13 +2018,9 @@ private QueryMetaData getQueryMetaDataInternal(Class<?> cls, String name, ClassL\n         }\n         if ((_sourceMode & MODE_QUERY) == 0)\n             return null;\n-\n-        // see if factory can figure out a scope for this query\n-        if (cls == null)\n-            cls = _factory.getQueryScope(name, envLoader);\n-\n+        \n         // not in cache; load\n-        _factory.load(cls, MODE_QUERY, envLoader);\n+        _factory.load(cls, MODE_QUERY , envLoader);\n         return _queries.get(name);\n     }\n "},{"sha":"8a169e5e0f366521dc95e27206f6a5ae925ac33b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/xml/TableNameInXmlEntity.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/xml/TableNameInXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/xml/TableNameInXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/xml/TableNameInXmlEntity.java?ref=08d94d75d68742fce002f65583844e5bb253b12e","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.xml;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQuery;\n+\n+@Entity\n+@NamedQuery(name = \"TableNameInXmlEntity.findAll\", query = \"SELECT t FROM TableNameInXmlEntity t\")\n+public class TableNameInXmlEntity implements Serializable {\n+\n+    private static final long serialVersionUID = 4508346087020196429L;\n+\n+    @Id\n+    private int myid;\n+\n+    String a, b, c;\n+\n+    public void setMyid(int myid) {\n+        this.myid = myid;\n+    }\n+\n+    public int getMyid() {\n+        return myid;\n+    }\n+}"},{"sha":"1cb7278918fc589a6034dfa7dde130268eadd205","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/xml/TestTableNameInXml.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/xml/TestTableNameInXml.java","raw_url":"https://github.com/apache/openjpa/raw/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/xml/TestTableNameInXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/xml/TestTableNameInXml.java?ref=08d94d75d68742fce002f65583844e5bb253b12e","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.xml;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestTableNameInXml extends SQLListenerTestCase {\n+\n+    String containsSQL = \" FROM TableNameInXml \";\n+    String notContainsSQL = \" FROM TableNameInXmlEntity \";\n+\n+    public void setUp() {\n+        super.setUp(TableNameInXmlEntity.class);\n+    }\n+\n+    /*\n+     * The SQL generated in this test should contain \"FROM TableNameInXml\" since the table name is defined in XML.\n+     */\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query q = em.createQuery(\"SELECT t FROM TableNameInXmlEntity t\");\n+        q.getResultList();\n+        assertContainsSQL(containsSQL);\n+        assertNotSQL(notContainsSQL);\n+\n+        em.close();\n+    }\n+\n+    /*\n+     * The SQL generated in this test should contain \"FROM TableNameInXml\" since the table name is defined in XML. Prior\n+     * to OPENJPA-2533, the table name in XML was not being picked up.\n+     */\n+    public void testNamedQuery() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query q = em.createNamedQuery(\"TableNameInXmlEntity.findAll\");\n+        q.getResultList();\n+        assertContainsSQL(containsSQL);\n+        assertNotSQL(notContainsSQL);\n+\n+        em.close();\n+    }\n+\n+    /*\n+     * The SQL generated in this test should contain \"FROM TableNameInXml\" since the table name is defined in XML. This\n+     * test works because the named query is executed second.\n+     */\n+    public void testBoth() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query q = em.createQuery(\"SELECT t FROM TableNameInXmlEntity t\");\n+        q.getResultList();\n+\n+        q = em.createNamedQuery(\"TableNameInXmlEntity.findAll\");\n+        q.getResultList();\n+        assertContainsSQL(containsSQL);\n+        assertNotSQL(notContainsSQL);\n+\n+        em.close();\n+    }\n+\n+    protected String getPersistenceUnitName() {\n+        return \"TableNameInXml-PU\";\n+    }\n+}"},{"sha":"bcb104ea6ebd07aca6a91520db6789f03b6fb36d","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=08d94d75d68742fce002f65583844e5bb253b12e","patch":"@@ -497,7 +497,13 @@\n                 value=\"buildSchema(ForeignKeys=true)\"/>\n                 \n     </properties>\n-        \n-    </persistence-unit>      \n+</persistence-unit>\n+\n+\t<persistence-unit name=\"TableNameInXml-PU\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<mapping-file>META-INF/table-orm.xml</mapping-file>\n+\t\t<properties>\n+\t\t\t<property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+\t\t</properties>\n+\t</persistence-unit>      \n \n </persistence>\n\\ No newline at end of file"},{"sha":"7a4e977e4bbb7066950e62cbd6f9b16a86ceb055","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/table-orm.xml","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-persistence-jdbc/src/test/resources/META-INF/table-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/08d94d75d68742fce002f65583844e5bb253b12e/openjpa-persistence-jdbc/src/test/resources/META-INF/table-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/table-orm.xml?ref=08d94d75d68742fce002f65583844e5bb253b12e","patch":"@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor \n+\tlicense agreements. See the NOTICE file distributed with this work for additional \n+\tinformation regarding copyright ownership. The ASF licenses this file to \n+\tyou under the Apache License, Version 2.0 (the \"License\"); you may not use \n+\tthis file except in compliance with the License. You may obtain a copy of \n+\tthe License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n+\tby applicable law or agreed to in writing, software distributed under the \n+\tLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n+\tOF ANY KIND, either express or implied. See the License for the specific \n+\tlanguage governing permissions and limitations under the License. -->\n+<entity-mappings version=\"2.0\"\n+\txmlns=\"http://java.sun.com/xml/ns/persistence/orm\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\">\n+\t<entity\n+\t\tclass=\"org.apache.openjpa.persistence.jdbc.query.xml.TableNameInXmlEntity\">\n+\t\t<table name=\"TableNameInXml\" />\n+\t\t<named-query name=\"query-in-xml\">\n+\t\t\t<query>SELECT t FROM TableNameInXmlEntity t</query>\n+\t\t</named-query>\n+\t</entity>\n+</entity-mappings>"}]}

