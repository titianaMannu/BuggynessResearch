{"sha":"092e70e0ac381227bcf55974000a48203cecd980","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5MmU3MGUwYWMzODEyMjdiY2Y1NTk3NDAwMGE0ODIwM2NlY2Q5ODA=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2013-10-28T17:43:21Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2013-10-28T17:43:21Z"},"message":"OPENJPA-2018 fix handling of Arrays in Select IN statements\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1536439 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b0e5983154e5dbecbe6c87d2e21daeafba3bc842","url":"https://api.github.com/repos/apache/openjpa/git/trees/b0e5983154e5dbecbe6c87d2e21daeafba3bc842"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/092e70e0ac381227bcf55974000a48203cecd980","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/092e70e0ac381227bcf55974000a48203cecd980","html_url":"https://github.com/apache/openjpa/commit/092e70e0ac381227bcf55974000a48203cecd980","comments_url":"https://api.github.com/repos/apache/openjpa/commits/092e70e0ac381227bcf55974000a48203cecd980/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"a28818b7d55ab8eed5e2440c03c63eed4419761c","url":"https://api.github.com/repos/apache/openjpa/commits/a28818b7d55ab8eed5e2440c03c63eed4419761c","html_url":"https://github.com/apache/openjpa/commit/a28818b7d55ab8eed5e2440c03c63eed4419761c"}],"stats":{"total":66,"additions":54,"deletions":12},"files":[{"sha":"700b3c02907ce7ce3d7f5b0d281c185d3208e7b5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/092e70e0ac381227bcf55974000a48203cecd980/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","raw_url":"https://github.com/apache/openjpa/raw/092e70e0ac381227bcf55974000a48203cecd980/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java?ref=092e70e0ac381227bcf55974000a48203cecd980","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.kernel.exps;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n@@ -213,10 +214,16 @@ public void selectColumns(Select sel, ExpContext ctx, ExpState state,\n     protected Collection getCollection(ExpContext ctx, ExpState state) {\n         Object val = _const.getValue(ctx, state);\n \n-        // wrap non-Collection parameters in a Collections so the query\n-        // lanuage can permit varargs \"in\" clauses\n-        if (!(val instanceof Collection))\n+        if (val != null && val.getClass().isArray()) {\n+            // arrays need to re-packaged into Collections to\n+            // have a single way of handling all this\n+            val = Arrays.asList((Object[]) val);\n+        }\n+        else if (!(val instanceof Collection)) {\n+            // wrap non-Collection parameters in a Collections so the query\n+            // lanuage can permit varargs \"in\" clauses\n             val = Collections.singleton(val);\n+        }\n \n         return (Collection) val;\n     }"},{"sha":"e07b21291a6fcd16853db36e837397c95a99553d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","status":"modified","additions":43,"deletions":2,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/092e70e0ac381227bcf55974000a48203cecd980/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","raw_url":"https://github.com/apache/openjpa/raw/092e70e0ac381227bcf55974000a48203cecd980/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java?ref=092e70e0ac381227bcf55974000a48203cecd980","patch":"@@ -29,6 +29,10 @@\n import java.util.Collection;\n import java.util.List;\n \n+/**\n+ * This test verifies that select IN statements with\n+ * arrays and Collections are fine.\n+ */\n public class OpenJPA2018Test extends SingleEMTestCase\n {\n \n@@ -52,7 +56,7 @@ public void testInCriteriaWithArray() {\n \n             TypedQuery<User2018> query = em.createQuery(criteria);\n             for (ParameterExpression parameter : criteria.getParameters()) {\n-                query.setParameter(parameter, new Long[] { user.id });\n+                query.setParameter(parameter, new Long[] { user.id, 123456789L });\n             }\n \n             List<User2018> result = query.getResultList();\n@@ -62,6 +66,24 @@ public void testInCriteriaWithArray() {\n         }\n     }\n \n+    public void testInJpqlWithArray() {\n+        em.getTransaction().begin();\n+        try {\n+            User2018 user = new User2018();\n+            em.persist(user);\n+            em.flush();\n+\n+            TypedQuery<User2018> query = em.createQuery(\"select u from User2018 as u where u.id in (:userIds)\",\n+                                                        User2018.class);\n+            query.setParameter(\"userIds\", new Long[] { user.id, 123456789L });\n+\n+            List<User2018> result = query.getResultList();\n+            assertTrue(!result.isEmpty());\n+        } finally {\n+            em.getTransaction().commit();\n+        }\n+    }\n+\n     public void testInCriteriaWithCollection() {\n         em.getTransaction().begin();\n         try {\n@@ -77,7 +99,7 @@ public void testInCriteriaWithCollection() {\n \n             TypedQuery<User2018> query = em.createQuery(criteria);\n             for (ParameterExpression parameter : criteria.getParameters()) {\n-                query.setParameter(parameter, Arrays.asList(user.id));\n+                query.setParameter(parameter, Arrays.asList(user.id, 123456789L));\n             }\n \n             List<User2018> result = query.getResultList();\n@@ -87,6 +109,25 @@ public void testInCriteriaWithCollection() {\n         }\n     }\n \n+    public void testInJpqlWithCollection() {\n+        em.getTransaction().begin();\n+        try {\n+            User2018 user = new User2018();\n+            em.persist(user);\n+            em.flush();\n+\n+            TypedQuery<User2018> query = em.createQuery(\"select u from User2018 as u where u.id in (:userIds)\",\n+                    User2018.class);\n+            query.setParameter(\"userIds\", Arrays.asList(user.id, 123456789L));\n+\n+            List<User2018> result = query.getResultList();\n+            assertTrue(!result.isEmpty());\n+        } finally {\n+            em.getTransaction().commit();\n+        }\n+    }\n+\n+\n     public void testId() {\n         em.getTransaction().begin();\n         try {"},{"sha":"8b0c55c394847e2c953dfa4b63f9bdf92704c8b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/092e70e0ac381227bcf55974000a48203cecd980/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/092e70e0ac381227bcf55974000a48203cecd980/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=092e70e0ac381227bcf55974000a48203cecd980","patch":"@@ -302,9 +302,6 @@ public void testFetchJoins() {\n     }\n \n     public void testJoinedPathInProjection() {\n-        String jpql1 = \"SELECT p.vendor FROM Employee e JOIN e.contactInfo.phones p \"\n-                     + \"WHERE e.contactInfo.address.zipCode = '95054'\";\n-\n         String jpql = \"SELECT p.vendor FROM Employee e JOIN e.contactInfo c JOIN c.phones p \"\n                     + \"WHERE c.address.zipCode = '95054'\";\n \n@@ -319,9 +316,6 @@ public void testJoinedPathInProjection() {\n     }\n \n     public void testKeyExpression() {\n-//        String jpql =\n-//            \"SELECT i.name, p FROM Item i JOIN i.photos p WHERE KEY(p) \"\n-//            + \"LIKE '%egret%'\";\n         String jpql = \"select i.name, VALUE(p) from Item i join i.photos p where KEY(p) like 'egret'\";\n \n         CriteriaQuery<Tuple> q = cb.createTupleQuery();\n@@ -431,7 +425,7 @@ public void testSizeExpression() {\n \n     public void testCaseExpression() {\n         String jpql = \"SELECT e.name, CASE \" \n-        \t\t+ \"WHEN e.rating = 1 THEN e.salary * 1.1 \"\n+            + \"WHEN e.rating = 1 THEN e.salary * 1.1 \"\n                 + \"WHEN e.rating = 2 THEN e.salary * 1.2 \"\n                 + \"ELSE e.salary * 1.01 END \"\n             + \"FROM Employee e WHERE e.department.name = 'Engineering'\";"}]}

