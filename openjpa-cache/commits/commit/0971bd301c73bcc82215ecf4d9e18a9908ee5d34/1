{"sha":"0971bd301c73bcc82215ecf4d9e18a9908ee5d34","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5NzFiZDMwMWM3M2JjYzgyMjE1ZWNmNGQ5ZTE4YTk5MDhlZTVkMzQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2011-03-16T18:48:11Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2011-03-16T18:48:11Z"},"message":"OPENJPA-1787 Fixed VLEM hasUpdateListeners & hasPersistListeners methods and added additional validation test cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1082259 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"16a059eef974ae44e2825e62e7167af83137040b","url":"https://api.github.com/repos/apache/openjpa/git/trees/16a059eef974ae44e2825e62e7167af83137040b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0971bd301c73bcc82215ecf4d9e18a9908ee5d34","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0971bd301c73bcc82215ecf4d9e18a9908ee5d34","html_url":"https://github.com/apache/openjpa/commit/0971bd301c73bcc82215ecf4d9e18a9908ee5d34","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0971bd301c73bcc82215ecf4d9e18a9908ee5d34/comments","author":null,"committer":null,"parents":[{"sha":"621c52065eaac92fd989ff33e0d8fe72b567096c","url":"https://api.github.com/repos/apache/openjpa/commits/621c52065eaac92fd989ff33e0d8fe72b567096c","html_url":"https://github.com/apache/openjpa/commit/621c52065eaac92fd989ff33e0d8fe72b567096c"}],"stats":{"total":208,"additions":206,"deletions":2},"files":[{"sha":"f968b8a64fb67710fc5171bdb5ad021e6cfbca8e","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","status":"modified","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/0971bd301c73bcc82215ecf4d9e18a9908ee5d34/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","raw_url":"https://github.com/apache/openjpa/raw/0971bd301c73bcc82215ecf4d9e18a9908ee5d34/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java?ref=0971bd301c73bcc82215ecf4d9e18a9908ee5d34","patch":"@@ -43,6 +43,12 @@\n  *     the default group.\n  * 1d) Verify validation for constraints using non-default validation groups \n  *     does not occur.\n+ * 1e) PrePersist does not validate with no validation group defined.\n+ * 1f) PreUpdate does not validate when no validation group defined.\n+ * 1g) PreUpdate only called when a pre-update validation group defined \n+ *     (ie. per-persist and pre-remove are disabled).\n+ * 1h) PrePersist only called when pre-persist validation group defined\n+ *     (ie. per-persist and pre-remove are disabled).\n  *    \n  * Verify validation occurs when specific validation groups are specified:\n  * 2a) Specify a non-default group for all lifecycle events.\n@@ -105,6 +111,182 @@ public void testSpecifiedDefaultPreRemoveFlush() {\n         verifySpecifiedDefaultPreRemove(false);\n     }\n     \n+    /** \n+     * 1e) PrePersist does not validate with no validation group defined.\n+     */\n+    public void testPersistNoValidationGroup() {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"no-pre-persist-default-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            DefGrpEntity dge = new DefGrpEntity();\n+            dge.setDgName(null);  // If default group was enabled for pre-persist, this would cause a CVE.\n+            try {\n+                em.getTransaction().begin();\n+                em.persist(dge);\n+                em.getTransaction().commit();\n+            } catch (ConstraintViolationException e) {\n+                fail(\"A ConstraintViolationException should not have been thrown \" +\n+                \"on pre-persist\");\n+            } finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+        } finally {\n+            closeEM(em);\n+            closeEMF(emf);\n+        }\n+    }\n+    \n+    /**\n+     *  1f) PreUpdate does not validate when no validation group defined.\n+     */\n+    public void testUpdateNoValidationGroup() {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"no-pre-update-default-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            DefGrpEntity dge = new DefGrpEntity();\n+            dge.setDgName(\"NotNull\");\n+            try {\n+                em.getTransaction().begin();\n+                em.persist(dge);\n+                em.getTransaction().commit();\n+            } catch (ConstraintViolationException e) {\n+                fail(\"A ConstraintViolationException should not have been thrown \" +\n+                \"on pre-persist\");\n+            } \n+            try {\n+                em.getTransaction().begin();\n+                dge.setDgName(null);\n+                em.getTransaction().commit();\n+            } catch (ConstraintViolationException e) {\n+                fail(\"A ConstraintViolationException should not have been thrown \" +\n+                \"on pre-update\");\n+            } finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+        } finally {\n+            closeEM(em);\n+            closeEMF(emf);\n+        }\n+    }\n+\n+    /** \n+     * 1g) PreUpdate only called when a pre-update validation group defined \n+     *     (ie. per-persist and pre-remove are disabled).\n+     */\n+    public void testUpdateOnlyValidationGroup() {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"no-pre-persist-default-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            DefGrpEntity dge = new DefGrpEntity();\n+            dge.setDgName(null);  // If default group enabled for pre-persist, this would cause a CVE.\n+            try {\n+                em.getTransaction().begin();\n+                em.persist(dge);\n+                em.getTransaction().commit();\n+            } catch (ConstraintViolationException e) {\n+                fail(\"A ConstraintViolationException should not have been thrown \" +\n+                \"on pre-persist\");\n+            } \n+            try {\n+                em.getTransaction().begin();\n+                dge.setDgName(\"NotNull\");\n+                dge.setDgName(null);\n+                em.getTransaction().commit();\n+                fail(\"A ConstraintViolationException should have been thrown \" +\n+                \"on pre-update\");\n+            } catch (ConstraintViolationException e) {\n+                // expected\n+            } \n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+        } finally {\n+            closeEM(em);\n+            closeEMF(emf);\n+        }\n+    }\n+    /**\n+     *  1h) PrePersist only called when pre-persist validation group defined\n+     *      (ie. per-persist and pre-remove are disabled).\n+     */\n+    public void testPersistOnlyValidationGroup() {\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"no-pre-update-default-validation-group\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+        assertNotNull(emf);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            DefGrpEntity dge = new DefGrpEntity();\n+            dge.setDgName(null);\n+            try {\n+                em.getTransaction().begin();\n+                em.persist(dge);\n+                em.getTransaction().commit();\n+                fail(\"A ConstraintViolationException should have been thrown \" +\n+                \"on pre-persist\");\n+            } catch (ConstraintViolationException e) {\n+                // Expected\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+            // Fix the entity, persist with no CVE\n+            try {\n+                em.getTransaction().begin();\n+                dge.setDgName(\"NotNull\");\n+                em.getTransaction().commit();\n+            } catch (Exception e) {\n+                fail(\"An Exception should not have been thrown \" +\n+                \"on update\");\n+            }\n+            // Update the entity with null value, should not case a CVE\n+            try {\n+                em.getTransaction().begin();\n+                dge.setDgName(null);\n+                em.getTransaction().commit();\n+            } catch (ConstraintViolationException e) {\n+                fail(\"A ConstraintViolationException should not have been thrown \" +\n+                \"on pre-update\");\n+            } \n+            finally {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+            }\n+            \n+        } finally {\n+            closeEM(em);\n+            closeEMF(emf);\n+        }\n+    }\n+    \n     /**\n      * 2a) verify non-default validation group for all lifecycle events on\n      * commit.  default validation group constraints should not validate"},{"sha":"e8e94863944539abb845e726c6c967de626a309a","filename":"openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/0971bd301c73bcc82215ecf4d9e18a9908ee5d34/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/0971bd301c73bcc82215ecf4d9e18a9908ee5d34/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml?ref=0971bd301c73bcc82215ecf4d9e18a9908ee5d34","patch":"@@ -100,6 +100,28 @@\n         </properties>        \n     </persistence-unit>\n \n+    <persistence-unit name=\"no-pre-persist-default-validation-group\">\n+        <class>org.apache.openjpa.integration.validation.DefGrpEntity</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/>\n+            <property name=\"javax.persistence.validation.group.pre-persist\"\n+                value=\"\"/>\n+        </properties>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"no-pre-update-default-validation-group\">\n+        <class>org.apache.openjpa.integration.validation.DefGrpEntity</class>\n+        <validation-mode>CALLBACK</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/>\n+            <property name=\"javax.persistence.validation.group.pre-update\"\n+                value=\"\"/>\n+        </properties>\n+    </persistence-unit>\n+\n     <persistence-unit name=\"non-default-validation-group\">\n         <class>org.apache.openjpa.integration.validation.NonDefGrpEntity</class>\n         <validation-mode>CALLBACK</validation-mode>"},{"sha":"d38f885de63ee84028d250b2e9096bbabee4da39","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0971bd301c73bcc82215ecf4d9e18a9908ee5d34/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/0971bd301c73bcc82215ecf4d9e18a9908ee5d34/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java?ref=0971bd301c73bcc82215ecf4d9e18a9908ee5d34","patch":"@@ -75,7 +75,7 @@ public boolean hasUpdateListeners(Object source, ClassMetaData meta) {\n         if (_validator == null) {            \n             return super.hasUpdateListeners(source, meta);\n         }\n-        return _validator.validating(source, LifecycleEvent.BEFORE_PERSIST) ||\n+        return _validator.validating(source, LifecycleEvent.BEFORE_UPDATE) ||\n             super.hasUpdateListeners(source, meta);\n     }\n \n@@ -84,7 +84,7 @@ public boolean hasPersistListeners(Object source, ClassMetaData meta) {\n         if (_validator == null) {            \n             return super.hasPersistListeners(source, meta);\n         }\n-        return _validator.validating(source, LifecycleEvent.BEFORE_UPDATE) ||\n+        return _validator.validating(source, LifecycleEvent.BEFORE_PERSIST) ||\n             super.hasPersistListeners(source, meta);        \n     }\n "}]}

