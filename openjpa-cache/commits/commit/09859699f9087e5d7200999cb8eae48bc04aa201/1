{"sha":"09859699f9087e5d7200999cb8eae48bc04aa201","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5ODU5Njk5ZjkwODdlNWQ3MjAwOTk5Y2I4ZWFlNDhiYzA0YWEyMDE=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-04-28T19:14:40Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-04-28T19:14:40Z"},"message":"OpenJPA-1002: fixed select range for Oracle drivers, patch submitted by Amy Yang and Ravi Palacherla\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@769505 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f8bbc39df8639aaf3f3ea477e628175dadd4f6d","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f8bbc39df8639aaf3f3ea477e628175dadd4f6d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/09859699f9087e5d7200999cb8eae48bc04aa201","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/09859699f9087e5d7200999cb8eae48bc04aa201","html_url":"https://github.com/apache/openjpa/commit/09859699f9087e5d7200999cb8eae48bc04aa201","comments_url":"https://api.github.com/repos/apache/openjpa/commits/09859699f9087e5d7200999cb8eae48bc04aa201/comments","author":null,"committer":null,"parents":[{"sha":"d86b15e30d60b33bb64acff76077b004446bc68d","url":"https://api.github.com/repos/apache/openjpa/commits/d86b15e30d60b33bb64acff76077b004446bc68d","html_url":"https://github.com/apache/openjpa/commit/d86b15e30d60b33bb64acff76077b004446bc68d"}],"stats":{"total":172,"additions":138,"deletions":34},"files":[{"sha":"405e61e3075fcba4bb75e53e2f6659e1eaa82e3b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":35,"deletions":33,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/09859699f9087e5d7200999cb8eae48bc04aa201/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/09859699f9087e5d7200999cb8eae48bc04aa201/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=09859699f9087e5d7200999cb8eae48bc04aa201","patch":"@@ -370,7 +370,7 @@\n     public int batchLimit = NO_BATCH;\n     \n     public final Map<Integer,Set<String>> sqlStateCodes = \n-    \tnew HashMap<Integer, Set<String>>();\n+        new HashMap<Integer, Set<String>>();\n                                               \n     public DBDictionary() {\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n@@ -1727,14 +1727,14 @@ protected String appendSize(Column col, String typeName) {\n      *                  size clause will be inserted appropriately.   \n      */\n     protected String insertSize(String typeName, String size) {\n-    \tif (StringUtils.isEmpty(size)) {\n+        if (StringUtils.isEmpty(size)) {\n             int idx = typeName.indexOf(\"{0}\");\n             if (idx != -1) {\n                 return typeName.substring(0, idx);\n             }\n             return typeName;\n         }\n-    \t\n+        \n         int idx = typeName.indexOf(\"{0}\");\n         if (idx != -1) {\n             // replace '{0}' with size\n@@ -1883,7 +1883,7 @@ public SQLBuffer toSelectCount(Select sel) {\n         from.append(\"(\");\n         from.append(toSelect(subSelect, null, subFrom, where,\n             sel.getGrouping(), sel.getHaving(), null, sel.isDistinct(),\n-            false, sel.getStartIndex(), sel.getEndIndex(), true));\n+            false, sel.getStartIndex(), sel.getEndIndex(), true, sel));\n         from.append(\")\");\n         if (requiresAliasForSubselect)\n             from.append(\" \").append(Select.FROM_SELECT_ALIAS);\n@@ -2076,7 +2076,7 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n \n             Val val = (Val) next.getValue();\n             if (val == null)\n-            \tval = new Null();\n+                val = new Null();\n             Column col = fmd.getColumns()[0];\n             if (allowAlias) {\n               sql.append(sel.getColumnAlias(col));\n@@ -2371,11 +2371,12 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n     /**\n      * Combine the given components into a SELECT statement.\n      */\n-    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+    protected SQLBuffer toSelect(SQLBuffer selects,\n+        JDBCFetchConfiguration fetch,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n         boolean distinct, boolean forUpdate, long start, long end,\n-        boolean subselect) {\n+        boolean subselect, Select sel) {\n         return toOperation(getSelectOperation(fetch), selects, from, where,\n             group, having, order, distinct, start, end,\n             getForUpdateClause(fetch, forUpdate, null), subselect);\n@@ -2395,7 +2396,8 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n     /**\n      * Combine the given components into a SELECT statement.\n      */\n-    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+    protected SQLBuffer toSelect(SQLBuffer selects, \n+        JDBCFetchConfiguration fetch,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n         boolean distinct, boolean forUpdate, long start, long end,\n@@ -3103,7 +3105,7 @@ protected String makeNameValid(String name, NameSet set, int maxLen,\n     public String[] getCreateTableSQL(Table table) {\n         StringBuffer buf = new StringBuffer();\n         String tableName = checkNameLength(getFullName(table, false), \n-        \t\tmaxTableNameLength, \"long-table-name\");\n+                maxTableNameLength, \"long-table-name\");\n         buf.append(\"CREATE TABLE \").append(tableName);\n         if (supportsComments && table.hasComment()) {\n             buf.append(\" \");\n@@ -3178,7 +3180,7 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n         StringBuffer buf = new StringBuffer();\n         buf.append(\"CREATE SEQUENCE \");\n         String seqName = checkNameLength(getFullName(seq), maxTableNameLength, \n-        \t\t\"long-seq-name\");\n+                \"long-seq-name\");\n         buf.append(seqName);\n         if (seq.getInitialValue() != 0)\n             buf.append(\" START WITH \").append(seq.getInitialValue());\n@@ -3318,7 +3320,7 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n     protected String getDeclareColumnSQL(Column col, boolean alter) {\n         StringBuffer buf = new StringBuffer();\n         String columnName = checkNameLength(col.getName(), maxColumnNameLength, \n-        \t\t\"long-column-name\");\n+                \"long-column-name\");\n         buf.append(columnName).append(\" \");\n         buf.append(getTypeName(col));\n \n@@ -3499,7 +3501,7 @@ public boolean supportsUpdateAction(int action) {\n     /**\n      * Return the declaration SQL for the given unique constraint. This\n      * method is used from within {@link #getCreateTableSQL}.\n-     * Returns\t<code>CONSTRAINT &lt;name&gt; UNIQUE (&lt;col list&gt;)</code>\n+     * Returns <code>CONSTRAINT &lt;name&gt; UNIQUE (&lt;col list&gt;)</code>\n      * by default.\n      */\n     protected String getUniqueConstraintSQL(Unique unq) {\n@@ -3510,7 +3512,7 @@ protected String getUniqueConstraintSQL(Unique unq) {\n         if (unq.getName() != null\n             && CONS_NAME_BEFORE.equals(constraintNameMode))\n             buf.append(\"CONSTRAINT \").append(checkNameLength(unq.getName(), \n-            \tmaxConstraintNameLength, \"long-constraint-name\")).append(\" \");\n+                maxConstraintNameLength, \"long-constraint-name\")).append(\" \");\n         buf.append(\"UNIQUE \");\n         if (unq.getName() != null && CONS_NAME_MID.equals(constraintNameMode))\n             buf.append(unq.getName()).append(\" \");\n@@ -4163,22 +4165,22 @@ public void endConfiguration() {\n         if (stream == null) { // User supplied dictionary but no error codes xml\n             // use default\n             stream = DBDictionary.class.getResourceAsStream(rsrc);\n-        \tdictionaryClassName = getClass().getSuperclass().getName();\n+            dictionaryClassName = getClass().getSuperclass().getName();\n         }\n         codeReader.parse(stream, dictionaryClassName, this);\n     }\n     \n     public void addErrorCode(int errorType, String errorCode) {\n-    \tif (errorCode == null || errorCode.trim().length() == 0)\n-    \t\treturn;\n-\t\tSet<String> codes = sqlStateCodes.get(errorType);\n-    \tif (codes == null) {\n-    \t\tcodes = new HashSet<String>();\n-    \t\tcodes.add(errorCode.trim());\n-    \t\tsqlStateCodes.put(errorType, codes);\n-    \t} else {\n-    \t\tcodes.add(errorCode.trim());\n-    \t}\n+        if (errorCode == null || errorCode.trim().length() == 0)\n+            return;\n+        Set<String> codes = sqlStateCodes.get(errorType);\n+        if (codes == null) {\n+            codes = new HashSet<String>();\n+            codes.add(errorCode.trim());\n+            sqlStateCodes.put(errorType, codes);\n+        } else {\n+            codes.add(errorCode.trim());\n+        }\n     }\n     \n     /**\n@@ -4331,11 +4333,11 @@ public void handleWarning(SQLWarning warning)\n      */\n     public OpenJPAException newStoreException(String msg, SQLException[] causes,\n         Object failed) {\n-    \tif (causes != null && causes.length > 0) {\n-    \t\tOpenJPAException ret = narrow(msg, causes[0]);\n-    \t\tret.setFailedObject(failed).setNestedThrowables(causes);\n-    \t\treturn ret;\n-    \t}\n+        if (causes != null && causes.length > 0) {\n+            OpenJPAException ret = narrow(msg, causes[0]);\n+            ret.setFailedObject(failed).setNestedThrowables(causes);\n+            return ret;\n+        }\n         return new StoreException(msg).setFailedObject(failed).\n             setNestedThrowables(causes);\n     }\n@@ -4718,9 +4720,9 @@ public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n      * given message key otherwise returns the same name.\n      */\n     final String checkNameLength(String name, int length, String msgKey) {\n-    \tif (name.length() > length)\n-    \t\tthrow new UserException(_loc.get(msgKey, name, name.length(), \n-    \t\t\t\tlength));\n-    \treturn name;\n+        if (name.length() > length)\n+            throw new UserException(_loc.get(msgKey, name, name.length(), \n+                    length));\n+        return name;\n     }\n }\n\\ No newline at end of file"},{"sha":"9dec01ed3af5921b3b88b2edf153585bb46a73c2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/09859699f9087e5d7200999cb8eae48bc04aa201/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/09859699f9087e5d7200999cb8eae48bc04aa201/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=09859699f9087e5d7200999cb8eae48bc04aa201","patch":"@@ -360,7 +360,16 @@ public SQLBuffer toNativeJoin(Join join) {\n         return buf;\n     }\n \n-    public SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n+    protected SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n+        SQLBuffer tables, SQLBuffer where, SQLBuffer group,\n+        SQLBuffer having, SQLBuffer order,\n+        boolean distinct, boolean forUpdate, long start, long end,\n+        boolean subselect, Select sel) {\n+        return toSelect(select, fetch, tables, where, group, having, order,\n+            distinct, forUpdate, start, end, sel);\n+    }\n+\n+    protected SQLBuffer toSelect(SQLBuffer select, JDBCFetchConfiguration fetch,\n         SQLBuffer tables, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n         boolean distinct, boolean forUpdate, long start, long end,"},{"sha":"91c3c0584479fa1af08fded19d72d7fa8bbe4d3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRangeQuery.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/09859699f9087e5d7200999cb8eae48bc04aa201/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRangeQuery.java","raw_url":"https://github.com/apache/openjpa/raw/09859699f9087e5d7200999cb8eae48bc04aa201/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRangeQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRangeQuery.java?ref=09859699f9087e5d7200999cb8eae48bc04aa201","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.jdbc.common.apps.EagerOuterJoinPC;\n+\n+\n+public class TestRangeQuery extends \n+        org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest {\n+\n+    /** Creates a new instance of TestRangeQuery */\n+    public TestRangeQuery(String name) {\n+        super(name);\n+    }\n+\n+    public boolean skipTest() {\n+        DBDictionary dict = ((JDBCConfiguration) getConfiguration()).\n+                getDBDictionaryInstance();\n+        return !dict.supportsSubselect;\n+    }\n+\n+    public void setUp() {\n+\n+       deleteAll(HelperPC.class);\n+       deleteAll(EagerOuterJoinPC2.class);\n+       deleteAll(EagerOuterJoinPC.class);\n+    }\n+\n+    public void testQueryRange() {\n+        insertManyStringList();\n+\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) em.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        fetch.setFetchBatchSize(3);\n+        OpenJPAQuery q = em.createQuery(JPQLParser.LANG_JPQL,\n+                \"select x from EagerOuterJoinPC x order by x.name asc\");\n+        q.setFirstResult(5).setMaxResults(15);\n+\n+        List results = (List) q.getResultList();\n+        assertEquals(5, results.size());\n+\n+        for (int i = 0; i < results.size(); i++) {\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\n+            assertEquals(String.valueOf(i + 5), pc.getName());\n+        }\n+        q.closeAll();\n+        em.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void insertManyStringList() {\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(em);;\n+        for (int i = 0; i < 10; i++) {\n+            EagerOuterJoinPC pc = new EagerOuterJoinPC();\n+            pc.setName(String.valueOf(i));\n+            pc.getStringList().add(i + \".1\");\n+            pc.getStringList().add(i + \".2\");\n+            em.persist(pc);\n+        }\n+        endTx(em);;\n+        em.close();\n+    }\n+}"},{"sha":"bfdc02f2d029a79ce2acafde36b0e3df42a42688","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/09859699f9087e5d7200999cb8eae48bc04aa201/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/09859699f9087e5d7200999cb8eae48bc04aa201/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml?ref=09859699f9087e5d7200999cb8eae48bc04aa201","patch":"@@ -39,5 +39,6 @@\n \t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC4</class>\n \t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.InvertA</class>\n         <class>org.apache.openjpa.persistence.jdbc.common.apps.InvertB</class>\n+        <class>org.apache.openjpa.persistence.jdbc.common.apps.EagerOuterJoinPC</class>\n \t</persistence-unit>\n </persistence>"}]}

