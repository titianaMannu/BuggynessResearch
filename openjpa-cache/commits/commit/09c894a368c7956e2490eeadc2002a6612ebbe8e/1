{"sha":"09c894a368c7956e2490eeadc2002a6612ebbe8e","node_id":"MDY6Q29tbWl0MjA2MzY0OjA5Yzg5NGEzNjhjNzk1NmUyNDkwZWVhZGMyMDAyYTY2MTJlYmJlOGU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-10-15T23:21:30Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-10-15T23:21:30Z"},"message":"OPENJPA-403. Assuming that ignoring the new code is sufficient in cases where the fetch configuration is unavailable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@584972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8085659a32cd5751c41e028a8d6673c9dc8d2df2","url":"https://api.github.com/repos/apache/openjpa/git/trees/8085659a32cd5751c41e028a8d6673c9dc8d2df2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/09c894a368c7956e2490eeadc2002a6612ebbe8e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/09c894a368c7956e2490eeadc2002a6612ebbe8e","html_url":"https://github.com/apache/openjpa/commit/09c894a368c7956e2490eeadc2002a6612ebbe8e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/09c894a368c7956e2490eeadc2002a6612ebbe8e/comments","author":null,"committer":null,"parents":[{"sha":"716b008346b7511e9d1da43ef25d1a8e170955f8","url":"https://api.github.com/repos/apache/openjpa/commits/716b008346b7511e9d1da43ef25d1a8e170955f8","html_url":"https://github.com/apache/openjpa/commit/716b008346b7511e9d1da43ef25d1a8e170955f8"}],"stats":{"total":62,"additions":61,"deletions":1},"files":[{"sha":"0e331c75d2a48c6e2fa8baff9b99871def11c1e9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/09c894a368c7956e2490eeadc2002a6612ebbe8e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/09c894a368c7956e2490eeadc2002a6612ebbe8e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=09c894a368c7956e2490eeadc2002a6612ebbe8e","patch":"@@ -456,7 +456,7 @@ private BitSet getUnloadedInternal(FetchConfiguration fetch, int mode,\n             // post process for the fetchGroup: if there is a\n             // fetchgroup field, then go to the FetchConfiguration\n             // to get the required fetch fields.\n-            if (fgs != null) {\n+            if (fgs != null && fetch != null) {\n                 if (fields == null)\n                     fields = new BitSet(fmds.length);\n                 BitSet fgFields = fetch.requiresFetch(fgs, fmds);"},{"sha":"684e6b02eec8829c1fbcefcdb2ba5f96e03218d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/09c894a368c7956e2490eeadc2002a6612ebbe8e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","raw_url":"https://github.com/apache/openjpa/raw/09c894a368c7956e2490eeadc2002a6612ebbe8e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java?ref=09c894a368c7956e2490eeadc2002a6612ebbe8e","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.lifecycle;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.enhance.UnenhancedPropertyAccess;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.PCState;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestPessimisticPNonTransToPDirty\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(UnenhancedPropertyAccess.class, CLEAR_TABLES);\r\n+\r\n+        UnenhancedPropertyAccess o = new UnenhancedPropertyAccess();\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testPNonTransToPDirty() {\r\n+        em.setOptimistic(false);\r\n+        UnenhancedPropertyAccess o = (UnenhancedPropertyAccess)\r\n+            em.createQuery(\"select o from UnenhancedPropertyAccess o\")\r\n+                .getSingleResult();\r\n+        em.getTransaction().begin();\r\n+        try {\r\n+            Broker b = JPAFacadeHelper.toBroker(em);\r\n+            OpenJPAStateManager sm = b.getStateManager(o);\r\n+            assertEquals(PCState.PNONTRANS, sm.getPCState());\r\n+            o.setLazyField(\"foo\");\r\n+            assertEquals(PCState.PDIRTY, sm.getPCState());\r\n+        } finally {\r\n+                em.getTransaction().rollback();\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file"}]}

