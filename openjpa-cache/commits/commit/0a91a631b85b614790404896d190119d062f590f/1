{"sha":"0a91a631b85b614790404896d190119d062f590f","node_id":"MDY6Q29tbWl0MjA2MzY0OjBhOTFhNjMxYjg1YjYxNDc5MDQwNDg5NmQxOTAxMTlkMDYyZjU5MGY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-06-17T18:30:35Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-06-17T18:30:35Z"},"message":"OPENJPA-2506: Update JPAFacadeHelper to properly create an OpenJPA identity object. Patch contributed by Dalia Abo Sheasha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1603251 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8e5ae6573e2f933323b41d3b0e1b4a65f0d83224","url":"https://api.github.com/repos/apache/openjpa/git/trees/8e5ae6573e2f933323b41d3b0e1b4a65f0d83224"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0a91a631b85b614790404896d190119d062f590f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0a91a631b85b614790404896d190119d062f590f","html_url":"https://github.com/apache/openjpa/commit/0a91a631b85b614790404896d190119d062f590f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0a91a631b85b614790404896d190119d062f590f/comments","author":null,"committer":null,"parents":[{"sha":"da48a0ad537df1e824471fa80c77062f77030ce4","url":"https://api.github.com/repos/apache/openjpa/commits/da48a0ad537df1e824471fa80c77062f77030ce4","html_url":"https://github.com/apache/openjpa/commit/da48a0ad537df1e824471fa80c77062f77030ce4"}],"stats":{"total":506,"additions":437,"deletions":69},"files":[{"sha":"e5ed9cf67cc4e6187b82883720f3ca1170d9d8cb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0a91a631b85b614790404896d190119d062f590f/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/0a91a631b85b614790404896d190119d062f590f/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=0a91a631b85b614790404896d190119d062f590f","patch":"@@ -169,6 +169,7 @@\n     ////////////////////////////////////////////////////////////////////\n \n     private Class<?> _objectId = null;\n+    private Class<?> _idClass = null;\n     private Boolean _objectIdShared = null;\n     private Boolean _openjpaId = null;\n     private Boolean _extent = null;\n@@ -579,6 +580,7 @@ public void setObjectIdType(Class<?> cls, boolean shared) {\n             setIdentityType(ID_APPLICATION);\n             if (!OpenJPAId.class.isAssignableFrom(cls)) {\n                 _objectId = cls;\n+                _idClass = cls;\n                 _objectIdShared = (shared) ? Boolean.TRUE : Boolean.FALSE;\n             }\n         }\n@@ -2511,6 +2513,7 @@ public void copy(ClassMetaData meta) {\n         // lazy data\n         _super = meta.getPCSuperclass();\n         _objectId = meta.getObjectIdType();\n+        _idClass = meta.getIdClass();\n         _extent = (meta.getRequiresExtent()) ? Boolean.TRUE : Boolean.FALSE;\n         _embedded = (meta.isEmbeddedOnly()) ? Boolean.TRUE : Boolean.FALSE;\n         _embeddable = meta._embeddable;\n@@ -2841,4 +2844,11 @@ public boolean getUseSchemaElement() {\n     public void setUseSchemaElement(boolean useSchemaElement) {\n         this._useSchemaElement = useSchemaElement;\n     }\n+\n+    /**\n+     * The class specified with the @IdClass annotation if used\n+     */\n+    public Class<?> getIdClass() {\n+        return _idClass;\n+    }\n }"},{"sha":"04a4cd5b1dbc8bf9fd9cf7114cd4c22d997eb067","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestJPAFacadeHelper.java","status":"modified","additions":370,"deletions":17,"changes":387,"blob_url":"https://github.com/apache/openjpa/blob/0a91a631b85b614790404896d190119d062f590f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestJPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/0a91a631b85b614790404896d190119d062f590f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestJPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestJPAFacadeHelper.java?ref=0a91a631b85b614790404896d190119d062f590f","patch":"@@ -18,9 +18,16 @@\n  */\n package org.apache.openjpa.persistence.util;\n \n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Date;\n import java.util.ArrayList;\n import java.util.Collection;\n \n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n@@ -35,23 +42,39 @@\n import org.apache.openjpa.persistence.derivedid.EDSQLDateID;\n import org.apache.openjpa.persistence.derivedid.EDateID;\n import org.apache.openjpa.persistence.derivedid.ESQLDateID;\n+import org.apache.openjpa.persistence.enhance.identity.Book;\n+import org.apache.openjpa.persistence.enhance.identity.BookId;\n+import org.apache.openjpa.persistence.enhance.identity.Library;\n+import org.apache.openjpa.persistence.enhance.identity.MedicalHistory4;\n+import org.apache.openjpa.persistence.enhance.identity.Page;\n+import org.apache.openjpa.persistence.enhance.identity.Person4;\n+import org.apache.openjpa.persistence.enhance.identity.PersonId4;\n+import org.apache.openjpa.persistence.identity.BooleanIdEntity;\n+import org.apache.openjpa.persistence.identity.DoubleObjIdEntity;\n+import org.apache.openjpa.persistence.identity.FloatIdEntity;\n+import org.apache.openjpa.persistence.identity.SQLBigDecimalIdEntity;\n+import org.apache.openjpa.persistence.identity.SQLBigIntegerIdEntity;\n+import org.apache.openjpa.persistence.identity.SQLDateIdEntity;\n+import org.apache.openjpa.persistence.identity.StringIdEntity;\n+import org.apache.openjpa.persistence.identity.entityasidentity.Person;\n import org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.CompositeId;\n import org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.EntityWithCompositeId;\n import org.apache.openjpa.persistence.relations.BasicEntity;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n import org.apache.openjpa.util.Id;\n-import org.apache.openjpa.util.LongId;\n-import org.apache.openjpa.util.ObjectId;\n import org.apache.openjpa.util.UserException;\n \n public class TestJPAFacadeHelper extends SingleEMFTestCase {\n     MetaDataRepository repo = null;\n \n     public void setUp() {\n-        setUp(EmbeddedIdEntity.class, EmbeddedIdClass.class, EBigDecimalID.class, EDBigDecimalID.class,\n+        setUp(CLEAR_TABLES, EmbeddedIdEntity.class, EmbeddedIdClass.class, EBigDecimalID.class, EDBigDecimalID.class,\n             EBigIntegerID.class, EDBigIntegerID.class, EDateID.class, EDDateID.class, ESQLDateID.class,\n-            EDSQLDateID.class, EntityWithCompositeId.class, AllFieldTypes.class, BasicEntity.class);\n+            EDSQLDateID.class, EntityWithCompositeId.class, AllFieldTypes.class, BasicEntity.class, Book.class,\n+            Library.class, Page.class, Person.class, DoubleObjIdEntity.class, FloatIdEntity.class,\n+            BooleanIdEntity.class, StringIdEntity.class, SQLBigIntegerIdEntity.class, SQLDateIdEntity.class,\n+            SQLBigDecimalIdEntity.class, MedicalHistory4.class, Person4.class, PersonId4.class);\n \n         repo = emf.getConfiguration().getMetaDataRepositoryInstance();\n     }\n@@ -63,10 +86,27 @@ public void testEmbeddedId() throws Exception {\n             fail(\"Didn't fail!\");\n         } catch (UserException re) {\n             // expected\n-\n         }\n+\n+        // Initialize and persist entity\n         EmbeddedIdClass id = new EmbeddedIdClass();\n-        assertEquals(ObjectId.class, JPAFacadeHelper.toOpenJPAObjectId(cmd, id).getClass());\n+        id.setPk1(1);\n+        id.setPk2(2);\n+        EmbeddedIdEntity entity = new EmbeddedIdEntity();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        // Find the entity and retrieve the objectId we use internally\n+        EmbeddedIdEntity persistedEntity = em.find(EmbeddedIdEntity.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n     }\n \n     public void testCompositeId() throws Exception {\n@@ -76,10 +116,25 @@ public void testCompositeId() throws Exception {\n             fail(\"Didn't fail!\");\n         } catch (UserException re) {\n             // expected\n-\n         }\n-        CompositeId id = new CompositeId(12, \"name\");\n-        assertEquals(ObjectId.class, JPAFacadeHelper.toOpenJPAObjectId(cmd, id).getClass());\n+        int intId = 1;\n+        String nameId = \"CompositeEntity\";\n+        EntityWithCompositeId entity = new EntityWithCompositeId();\n+        entity.setId(intId);\n+        entity.setName(nameId);\n+        CompositeId id = new CompositeId(intId, nameId);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        EntityWithCompositeId persistedEntity = em.find(EntityWithCompositeId.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n     }\n \n     public void testBasic() throws Exception {\n@@ -95,45 +150,343 @@ public void testBasic() throws Exception {\n             fail(\"Didn't fail!\");\n         } catch (UserException re) {\n             // expected\n-\n         }\n-        assertEquals(LongId.class, JPAFacadeHelper.toOpenJPAObjectId(cmd, Long.valueOf(1)).getClass());\n-        Object o = JPAFacadeHelper.toOpenJPAObjectId(cmd, Long.valueOf(1));\n+\n+        BasicEntity entity = new BasicEntity();\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        // Find the entity and retrieve the objectId we use internally\n+        BasicEntity persistedEntity = em.find(BasicEntity.class, entity.getId());\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, entity.getId()));\n+        Object o = JPAFacadeHelper.toOpenJPAObjectId(cmd, entity.getId());\n         assertEquals(o, JPAFacadeHelper.toOpenJPAObjectId(cmd, o));\n     }\n \n+    public void testIntegerId() {\n+        ClassMetaData cmd = repo.getMetaData(Person.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new Person());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        Integer id = Integer.valueOf(1);\n+        Person entity = new Person();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        Person persistedEntity = em.find(Person.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n+    public void testDoubleId() {\n+        ClassMetaData cmd = repo.getMetaData(DoubleObjIdEntity.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new DoubleObjIdEntity());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        Double id = Double.valueOf(1);\n+        DoubleObjIdEntity entity = new DoubleObjIdEntity();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        DoubleObjIdEntity persistedEntity = em.find(DoubleObjIdEntity.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n+    public void testFloatId() {\n+        ClassMetaData cmd = repo.getMetaData(FloatIdEntity.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new FloatIdEntity());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        Float id = Float.valueOf(1);\n+        FloatIdEntity entity = new FloatIdEntity();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        FloatIdEntity persistedEntity = em.find(FloatIdEntity.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n+    public void testBooleanId() {\n+        ClassMetaData cmd = repo.getMetaData(BooleanIdEntity.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new BooleanIdEntity());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        Boolean id = Boolean.valueOf(true);\n+        BooleanIdEntity entity = new BooleanIdEntity();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        BooleanIdEntity persistedEntity = em.find(BooleanIdEntity.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n+    public void testStringId() {\n+        ClassMetaData cmd = repo.getMetaData(StringIdEntity.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new StringIdEntity());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        String id = \"StringId\";\n+        StringIdEntity entity = new StringIdEntity();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        StringIdEntity persistedEntity = em.find(StringIdEntity.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n+    public void testBigIntegerId() {\n+        ClassMetaData cmd = repo.getMetaData(SQLBigIntegerIdEntity.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new SQLBigIntegerIdEntity());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        BigInteger id = BigInteger.valueOf(1);\n+        SQLBigIntegerIdEntity entity = new SQLBigIntegerIdEntity();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        SQLBigIntegerIdEntity persistedEntity = em.find(SQLBigIntegerIdEntity.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n+    public void testBigDecimalId() {\n+        ClassMetaData cmd = repo.getMetaData(SQLBigDecimalIdEntity.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new SQLBigDecimalIdEntity());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        BigDecimal id = BigDecimal.valueOf(1);\n+        SQLBigDecimalIdEntity entity = new SQLBigDecimalIdEntity();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        SQLBigDecimalIdEntity persistedEntity = em.find(SQLBigDecimalIdEntity.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n+    public void testDateId() {\n+        ClassMetaData cmd = repo.getMetaData(SQLDateIdEntity.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new SQLDateIdEntity());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        long time = ((long) (System.currentTimeMillis() / 1000)) * 1000;\n+        Date id = new Date(time);\n+        SQLDateIdEntity entity = new SQLDateIdEntity();\n+        entity.setId(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        SQLDateIdEntity persistedEntity = em.find(SQLDateIdEntity.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n     public void testDerivedId() throws Exception {\n         ClassMetaData cmd = repo.getMetaData(EDSQLDateID.class, null, true);\n         try {\n             JPAFacadeHelper.toOpenJPAObjectId(cmd, new EDSQLDateID());\n             fail(\"Didn't fail!\");\n         } catch (UserException re) {\n             // expected\n+        }\n+\n+        Date d = new Date(2014, 3, 26);\n+        ESQLDateID id = new ESQLDateID(d);\n+        EDSQLDateID entity = new EDSQLDateID(id);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(id);\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n \n+        EDSQLDateID persistedEntity = em.find(EDSQLDateID.class, d);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, d));\n+    }\n+\n+    public void testCompositeDerivedId() throws Exception {\n+        ClassMetaData cmd = repo.getMetaData(Book.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new Book());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n         }\n-        ESQLDateID id = new ESQLDateID();\n-        assertEquals(ObjectId.class, JPAFacadeHelper.toOpenJPAObjectId(cmd, id).getClass());\n+\n+        String bookName = \"Harry Potter\";\n+        String libName = \"Library Name\";\n+        Library entity = new Library();\n+        entity.setName(libName);\n+        Book book = new Book();\n+        book.setName(bookName);\n+        entity.addBook(book);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        BookId id = new BookId();\n+        id.setName(bookName);\n+        id.setLibrary(libName);\n+\n+        Book persistedEntity = em.find(Book.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n+    }\n+\n+    public void testCompositeDerivedEmbeddedId() {\n+        ClassMetaData cmd = repo.getMetaData(MedicalHistory4.class, null, true);\n+        try {\n+            JPAFacadeHelper.toOpenJPAObjectId(cmd, new MedicalHistory4());\n+            fail(\"Didn't fail!\");\n+        } catch (UserException re) {\n+            // expected\n+        }\n+\n+        PersonId4 id = new PersonId4(\"First\", \"Last\");\n+        Person4 person = new Person4();\n+        person.setId(id);\n+        MedicalHistory4 entity = new MedicalHistory4();\n+        entity.setPatient(person);\n+        entity.setName(\"MedicalHistory\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(person);\n+        em.persist(entity);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        MedicalHistory4 persistedEntity = em.find(MedicalHistory4.class, id);\n+        StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) persistedEntity).pcGetStateManager());\n+        Object oid = smi.getObjectId();\n+\n+        assertEquals(oid, JPAFacadeHelper.toOpenJPAObjectId(cmd, id));\n     }\n \n     public void testNoId() throws Exception {\n         ClassMetaData cmd = repo.getMetaData(AllFieldTypes.class, null, true);\n         try {\n-            // Don't parameterize this collection to force the JVM to use the \n+            // Don't parameterize this collection to force the JVM to use the\n             // ...(ClassMetaData meta, Collection<Object> oids) method sig.\n             Collection ids = new ArrayList<AllFieldTypes>();\n             ids.add(new AllFieldTypes());\n             JPAFacadeHelper.toOpenJPAObjectIds(cmd, ids);\n             fail(\"Didn't fail!\");\n         } catch (UserException re) {\n             // expected\n-\n         }\n         try {\n             JPAFacadeHelper.toOpenJPAObjectId(cmd, \"a\");\n             fail(\"Didn't fail!\");\n         } catch (UserException re) {\n             // expected\n-\n         }\n         OpenJPAEntityManagerSPI em = emf.createEntityManager();\n         em.getTransaction().begin();"},{"sha":"c836c58f341077a835ac973be0a06f4a02ca0233","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","status":"modified","additions":57,"deletions":52,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/0a91a631b85b614790404896d190119d062f590f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/0a91a631b85b614790404896d190119d062f590f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java?ref=0a91a631b85b614790404896d190119d062f590f","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.lang.reflect.Modifier;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.util.Arrays;\n@@ -26,22 +27,28 @@\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n \n+import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.BrokerImpl.StateManagerId;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.BigDecimalId;\n import org.apache.openjpa.util.BigIntegerId;\n import org.apache.openjpa.util.ByteId;\n import org.apache.openjpa.util.CharId;\n import org.apache.openjpa.util.DoubleId;\n import org.apache.openjpa.util.FloatId;\n+import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.Id;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.IntId;\n import org.apache.openjpa.util.LongId;\n import org.apache.openjpa.util.ObjectId;\n+import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.ShortId;\n import org.apache.openjpa.util.StringId;\n@@ -220,64 +227,62 @@ public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\n         if (oid instanceof OpenJPAId) {\n             return oid;\n         }\n+\n         Class<?> cls = meta.getDescribedType();\n-        Class<?> oidType = meta.getObjectIdType();\n         FieldMetaData[] pks = meta.getPrimaryKeyFields();\n \n-        Object expected = oidType;\n-        Object actual = oid.getClass();\n-\n-        // embedded id and derived id\n-        if (pks.length > 0 && (pks[0].isEmbedded() || pks[0].isTypePC())) {\n-            if (pks[0].getDeclaredType().equals(oid.getClass())) {\n-                return new ObjectId(cls, oid);\n-            }\n-            expected = pks[0].getDeclaredType();\n-        }\n-        if (oidType != null && oidType.equals(oid.getClass())) {\n-            // Check for compound id class\n-            return new ObjectId(cls, oid);\n-        }\n-        if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE) {\n-            // no id field\n-            try {\n+        Object expected = meta.getObjectIdType();\n+        try {\n+            switch (meta.getIdentityType()) {\n+            case ClassMetaData.ID_DATASTORE:\n+                if (oid instanceof String && ((String) oid).startsWith(StateManagerId.STRING_PREFIX))\n+                    return new StateManagerId((String) oid);\n                 return new Id(cls, ((Number) oid).longValue());\n-            } catch (ClassCastException cce) {\n-                // swallow, the proper exception will be thrown below\n-                expected = Number.class;\n-            }\n-        }\n-        if (pks.length > 0) {\n-            Class<?> pkType = pks[0].getDeclaredType();\n-            try {\n-                // Check for basic types, cast provided object to expected type. Catch CCE for invalid input\n-                if (pkType.equals(Byte.class) || pkType.equals(byte.class))\n-                    return new ByteId(cls, (Byte) oid);\n-                if (pkType.equals(Character.class) || pkType.equals(char.class))\n-                    return new CharId(cls, (Character) oid);\n-                if (pkType.equals(Double.class) || pkType.equals(double.class))\n-                    return new DoubleId(cls, (Double) oid);\n-                if (pkType.equals(Float.class) || pkType.equals(float.class))\n-                    return new FloatId(cls, (Float) oid);\n-                if (pkType.equals(Integer.class) || pkType.equals(int.class))\n-                    return new IntId(cls, (Integer) oid);\n-                if (pkType.equals(Long.class) || pkType.equals(long.class))\n-                    return new LongId(cls, (Long) oid);\n-                if (pkType.equals(Short.class) || pkType.equals(short.class))\n-                    return new ShortId(cls, (Short) oid);\n-                if (pkType.equals(String.class))\n-                    return new StringId(cls, (String) oid);\n-                if (pkType.equals(BigDecimal.class))\n-                    return new BigDecimalId(cls, (BigDecimal) oid);\n-                if (pkType.equals(BigInteger.class))\n-                    return new BigIntegerId(cls, (BigInteger) oid);\n-            } catch (ClassCastException cce) {\n-                // swallow, the proper exception will be thrown below\n-                expected = pkType;\n+            case ClassMetaData.ID_APPLICATION:\n+                if (ImplHelper.isAssignable(meta.getObjectIdType(), oid.getClass())) {\n+                    if (!meta.isOpenJPAIdentity() && meta.isObjectIdTypeShared())\n+                        return new ObjectId(cls, oid);\n+                    return oid;\n+                }\n+\n+                if (meta.getIdClass() == null) {\n+                    expected = pks[0].getDeclaredType();\n+                } else {\n+                    expected = meta.getIdClass();\n+                }\n+                // stringified app id?\n+                if (oid instanceof String\n+                    && !meta.getRepository().getConfiguration().getCompatibilityInstance().getStrictIdentityValues()\n+                    && !Modifier.isAbstract(cls.getModifiers()))\n+                    return PCRegistry.newObjectId(cls, (String) oid);\n+\n+                Object[] arr = (oid instanceof Object[]) ? (Object[]) oid : new Object[] { oid };\n+                Object rtrn = ApplicationIds.fromPKValues(arr, meta);\n+                if (rtrn != null && meta.getObjectIdType() != null) {\n+                    if (rtrn instanceof ObjectId) {\n+                        // embedded id and composite id with a derived id that\n+                        // uses an embedded id\n+                        if (pks.length > 0 && (pks[0].isEmbedded() || pks[0].isTypePC())) {\n+                            Class idClass = meta.getIdClass();\n+                            if (pks[0].getDeclaredType().equals(oid.getClass()) || idClass != null\n+                                && idClass.equals(oid.getClass())) {\n+                                return rtrn;\n+                            }\n+                        }\n+                    } else {\n+                        if (!(rtrn instanceof StringId) || rtrn instanceof StringId && oid instanceof String) {\n+                            return rtrn;\n+                        }\n+                    }\n+                }\n+            default:\n+                throw new UserException(_loc.get(\"invalid-oid\", new Object[] { expected, oid.getClass() }));\n             }\n+        } catch (RuntimeException re) {\n+            if (expected == null)\n+                throw new UserException(_loc.get(\"invalid-oid\", new Object[] { Number.class, oid.getClass() }));\n+            throw new UserException(_loc.get(\"invalid-oid\", new Object[] { expected, oid.getClass() }));\n         }\n-        // At this point we don't have a basic ID field, we don't have an embedded or composite id. fail.\n-        throw new UserException(_loc.get(\"invalid-oid\", new Object[] { expected, actual }));\n     }\n \n     /**"}]}

