{"sha":"0ac7140b82a35e8066c4b5e4765ba341a82fb410","node_id":"MDY6Q29tbWl0MjA2MzY0OjBhYzcxNDBiODJhMzVlODA2NmM0YjVlNDc2NWJhMzQxYTgyZmI0MTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-05-13T06:49:59Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-05-13T06:49:59Z"},"message":"[OPENJPA-2640] Applying provided patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1743607 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6ca540a3058704044be81f44d5b62c0c4c45fc71","url":"https://api.github.com/repos/apache/openjpa/git/trees/6ca540a3058704044be81f44d5b62c0c4c45fc71"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0ac7140b82a35e8066c4b5e4765ba341a82fb410","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0ac7140b82a35e8066c4b5e4765ba341a82fb410","html_url":"https://github.com/apache/openjpa/commit/0ac7140b82a35e8066c4b5e4765ba341a82fb410","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0ac7140b82a35e8066c4b5e4765ba341a82fb410/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5899205debfe796c56f10dd69d4f43c203c4399d","url":"https://api.github.com/repos/apache/openjpa/commits/5899205debfe796c56f10dd69d4f43c203c4399d","html_url":"https://github.com/apache/openjpa/commit/5899205debfe796c56f10dd69d4f43c203c4399d"}],"stats":{"total":24,"additions":16,"deletions":8},"files":[{"sha":"7f369786a6b433fca456d6dff41d5a1e7d834739","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0ac7140b82a35e8066c4b5e4765ba341a82fb410/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0ac7140b82a35e8066c4b5e4765ba341a82fb410/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=0ac7140b82a35e8066c4b5e4765ba341a82fb410","patch":"@@ -144,7 +144,7 @@ protected void synchronizeMappings(ClassLoader loader,\n \n         String props = Configurations.getProperties(action);\n         action = Configurations.getClassName(action);\n-        MappingTool tool = new MappingTool(conf, action, false);\n+        MappingTool tool = new MappingTool(conf, action, false, loader);\n         Configurations.configureInstance(tool, conf, props,\n             \"SynchronizeMappings\");\n "},{"sha":"8f176d999b421c5dd836dd089bbc3262631acba3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/0ac7140b82a35e8066c4b5e4765ba341a82fb410/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/0ac7140b82a35e8066c4b5e4765ba341a82fb410/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=0ac7140b82a35e8066c4b5e4765ba341a82fb410","patch":"@@ -109,6 +109,7 @@\n     private final String _action;\n     private final boolean _meta;\n     private final int _mode;\n+    private final ClassLoader _loader;\n     private final DBDictionary _dict;\n \n     private MappingRepository _repos = null;\n@@ -136,6 +137,13 @@\n      * Constructor. Supply configuration and action.\n      */\n     public MappingTool(JDBCConfiguration conf, String action, boolean meta) {\n+        this(conf, action, meta, null);\n+    }\n+\n+    /**\n+     * Constructor. Supply configuration and action.\n+     */\n+    public MappingTool(JDBCConfiguration conf, String action, boolean meta, ClassLoader loader) {\n         _conf = conf;\n         _log = conf.getLog(JDBCConfiguration.LOG_METADATA);\n         _meta = meta;\n@@ -154,6 +162,8 @@ else if (meta && ACTION_DROP.equals(_action))\n         else\n             _mode = MODE_MAPPING;\n \n+        _loader = loader;\n+        \n         _dict = _conf.getDBDictionaryInstance();\n     }\n \n@@ -627,7 +637,7 @@ else if (mapping.getIdentityStrategy() == ValueStrategies.NATIVE\n         for (int i = 0; i < fmds.length; i++) {\n             smd = fmds[i].getValueSequenceMetaData();\n             if (smd != null) {\n-                seq = smd.getInstance(null);\n+                seq = smd.getInstance(_loader);\n                 if (seq instanceof JDBCSeq)\n                     ((JDBCSeq) seq).addSchema(mapping, group);\n             } else if (fmds[i].getEmbeddedMapping() != null)\n@@ -936,7 +946,7 @@ public static void main(String[] arguments)\n             public boolean run(Options opts) throws IOException, SQLException {\n                 JDBCConfiguration conf = new JDBCConfigurationImpl();\n                 try {\n-                    return MappingTool.run(conf, args, opts);\n+                    return MappingTool.run(conf, args, opts, null);\n                 } finally {\n                     conf.close();\n                 }\n@@ -955,7 +965,7 @@ public boolean run(Options opts) throws IOException, SQLException {\n      * @see #main\n      */\n     public static boolean run(JDBCConfiguration conf, String[] args,\n-        Options opts)\n+        Options opts, ClassLoader loader)\n         throws IOException, SQLException {\n         // flags\n         Flags flags = new Flags();\n@@ -991,8 +1001,6 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             opts.setProperty(\"schemas\", schemas);\n \n         Configurations.populateConfiguration(conf, opts);\n-        ClassLoader loader = conf.getClassResolverInstance().\n-            getClassLoader(MappingTool.class, null);\n         if (flags.meta && ACTION_ADD.equals(flags.action))\n             flags.metaDataFile = Files.getFile(fileName, loader);\n         else\n@@ -1066,7 +1074,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n \n         MappingTool tool;\n         try {\n-            tool = new MappingTool(conf, flags.action, flags.meta);\n+            tool = new MappingTool(conf, flags.action, flags.meta, loader);\n         } catch (IllegalArgumentException iae) {\n             return false;\n         }"},{"sha":"ceca525ea84f285e9b8c5c00ef48f1670cf1b510","filename":"openjpa-tools/openjpa-maven-plugin/src/main/java/org/apache/openjpa/tools/maven/AbstractOpenJpaMappingToolMojo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0ac7140b82a35e8066c4b5e4765ba341a82fb410/openjpa-tools/openjpa-maven-plugin/src/main/java/org/apache/openjpa/tools/maven/AbstractOpenJpaMappingToolMojo.java","raw_url":"https://github.com/apache/openjpa/raw/0ac7140b82a35e8066c4b5e4765ba341a82fb410/openjpa-tools/openjpa-maven-plugin/src/main/java/org/apache/openjpa/tools/maven/AbstractOpenJpaMappingToolMojo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-tools/openjpa-maven-plugin/src/main/java/org/apache/openjpa/tools/maven/AbstractOpenJpaMappingToolMojo.java?ref=0ac7140b82a35e8066c4b5e4765ba341a82fb410","patch":"@@ -104,7 +104,7 @@ private void mappingTool(List<File> files) throws MojoExecutionException {\n                     public boolean run(Options opts) throws IOException, SQLException {\n                         JDBCConfiguration conf = new JDBCConfigurationImpl();\n                         try {\n-                            return MappingTool.run(conf, args, opts);\n+                            return MappingTool.run(conf, args, opts, Thread.currentThread().getContextClassLoader());\n                         } finally {\n                             conf.close();\n                         }"}]}

