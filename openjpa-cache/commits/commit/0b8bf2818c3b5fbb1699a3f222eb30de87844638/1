{"sha":"0b8bf2818c3b5fbb1699a3f222eb30de87844638","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiOGJmMjgxOGMzYjVmYmIxNjk5YTNmMjIyZWIzMGRlODc4NDQ2Mzg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-20T22:51:50Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-20T22:51:50Z"},"message":"OPENJPA-156. Applied Michael Dick's patch (thanks). Updated symbolic constant to use OpenJPA norms, changed references to external symbolic constants to use constants from the map impl being used, and reduced if-else statements for readability.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@509793 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4886416b340ee502f46993ed568bd4968327827d","url":"https://api.github.com/repos/apache/openjpa/git/trees/4886416b340ee502f46993ed568bd4968327827d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0b8bf2818c3b5fbb1699a3f222eb30de87844638","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0b8bf2818c3b5fbb1699a3f222eb30de87844638","html_url":"https://github.com/apache/openjpa/commit/0b8bf2818c3b5fbb1699a3f222eb30de87844638","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0b8bf2818c3b5fbb1699a3f222eb30de87844638/comments","author":null,"committer":null,"parents":[{"sha":"018cf3278a4f28f012bef3f8942273492404f737","url":"https://api.github.com/repos/apache/openjpa/commits/018cf3278a4f28f012bef3f8942273492404f737","html_url":"https://github.com/apache/openjpa/commit/018cf3278a4f28f012bef3f8942273492404f737"}],"stats":{"total":49,"additions":37,"deletions":12},"files":[{"sha":"920a3427d3f7e6ee0da8dcbcdbb9846c64d14604","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":37,"deletions":12,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/0b8bf2818c3b5fbb1699a3f222eb30de87844638/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/0b8bf2818c3b5fbb1699a3f222eb30de87844638/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=0b8bf2818c3b5fbb1699a3f222eb30de87844638","patch":"@@ -23,6 +23,7 @@\n import java.util.MissingResourceException;\n import java.util.Properties;\n import java.util.TreeSet;\n+\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n@@ -34,6 +35,9 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.ParseException;\n import org.apache.openjpa.lib.util.StringDistance;\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n+\n import serp.util.Strings;\n \n /**\n@@ -46,6 +50,12 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (Configurations.class);\n+    \n+    private static ConcurrentReferenceHashMap _loaders = new \n+        ConcurrentReferenceHashMap(ConcurrentReferenceHashMap.WEAK, \n+                ConcurrentReferenceHashMap.HARD);\n+\n+    private static final Object NULL_LOADER = \"null-loader\";\n \n     /**\n      * Return the class name from the given plugin string, or null if none.\n@@ -163,18 +173,33 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n         if (StringUtils.isEmpty(clsName))\n             return null;\n \n-        Class cls = null;\n-        try {\n-            cls = Strings.toClass(clsName, findDerivedLoader(conf, loader));\n-        } catch (RuntimeException re) {\n-            if (val != null)\n-                re = getCreateException(clsName, val, re);\n-            if (fatal)\n-                throw re;\n-            Log log = (conf == null) ? null : conf.getConfigurationLog();\n-            if (log != null && log.isErrorEnabled())\n-                log.error(_loc.get(\"plugin-creation-exception\", val), re);\n-            return null;\n+        Class cls = null; \n+\n+        // can't have a null reference in the map, so use symbolic \n+        // constant as key\n+        Object key = loader == null ? NULL_LOADER : loader;\n+        Map loaderCache = (Map) _loaders.get(key);\n+        if (loaderCache == null) { // We don't have a cache for this loader.\n+            loaderCache = new ConcurrentHashMap();\n+            _loaders.put(key, loaderCache);\n+        } else {  // We have a cache for this loader.\n+            cls = (Class) loaderCache.get(clsName);\n+        }\n+\n+        if (cls == null) { // we haven't cached this.\n+            try {\n+                cls = Strings.toClass(clsName, findDerivedLoader(conf, loader));\n+                loaderCache.put(clsName, cls);\n+            } catch (RuntimeException re) {\n+                if (val != null)\n+                    re = getCreateException(clsName, val, re);\n+                if (fatal)\n+                    throw re;\n+                Log log = (conf == null) ? null : conf.getConfigurationLog();\n+                if (log != null && log.isErrorEnabled())\n+                    log.error(_loc.get(\"plugin-creation-exception\", val), re);\n+                return null;\n+            }\n         }\n \n         try {"}]}

