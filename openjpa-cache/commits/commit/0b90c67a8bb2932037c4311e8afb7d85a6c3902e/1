{"sha":"0b90c67a8bb2932037c4311e8afb7d85a6c3902e","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiOTBjNjdhOGJiMjkzMjAzN2M0MzExZThhZmI3ZDg1YTZjMzkwMmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-03-08T09:34:52Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-03-08T09:34:52Z"},"message":"OPENJPA-71: resolved inefficiency with array types and AbstractPCData\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@515987 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4f5c0c49fa64edef84124755758c4924ca524483","url":"https://api.github.com/repos/apache/openjpa/git/trees/4f5c0c49fa64edef84124755758c4924ca524483"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0b90c67a8bb2932037c4311e8afb7d85a6c3902e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0b90c67a8bb2932037c4311e8afb7d85a6c3902e","html_url":"https://github.com/apache/openjpa/commit/0b90c67a8bb2932037c4311e8afb7d85a6c3902e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/comments","author":null,"committer":null,"parents":[{"sha":"69c34cd385cfd06409b8009af5c9a681233d26b1","url":"https://api.github.com/repos/apache/openjpa/commits/69c34cd385cfd06409b8009af5c9a681233d26b1","html_url":"https://github.com/apache/openjpa/commit/69c34cd385cfd06409b8009af5c9a681233d26b1"}],"stats":{"total":193,"additions":176,"deletions":17},"files":[{"sha":"a6a50d5ef462d7eecc9ecc029058a0304239f235","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":51,"deletions":16,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=0b90c67a8bb2932037c4311e8afb7d85a6c3902e","patch":"@@ -23,7 +23,6 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n \n@@ -45,6 +44,7 @@\n     implements PCData {\n \n     public static final Object NULL = new Object();\n+    private static final Object[] EMPTY_ARRAY = new Object[0];\n \n     /**\n      * Return the loaded field mask.\n@@ -97,12 +97,16 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n                 }\n                 return m2;\n             case JavaTypes.ARRAY:\n-                List l = (List) data;\n+                int length = Array.getLength(data);\n                 Object a = Array.newInstance(fmd.getElement().getDeclaredType(),\n-                    l.size());\n-                for (int i = 0; i < l.size(); i++) {\n-                    Array.set(a, i, toNestedField(sm, fmd.getElement(),\n-                        l.get(i), fetch, context));\n+                    length);\n+                if (isImmutableType(fmd.getElement())) {\n+                    System.arraycopy(data, 0, a, 0, length);\n+                } else {\n+                    for (int i = 0; i < length; i++) {\n+                        Array.set(a, i, toNestedField(sm, fmd.getElement(),\n+                            Array.get(data, i), fetch, context));\n+                    }\n                 }\n                 return a;\n             default:\n@@ -220,22 +224,53 @@ protected Object toData(FieldMetaData fmd, Object val, StoreContext ctx) {\n                 Object a = val;\n                 int length = Array.getLength(a);\n                 if (length == 0)\n-                    return Collections.EMPTY_LIST;\n-                List l = null;\n-                for (int i = 0; i < length; i++) {\n-                    val = toNestedData(fmd.getElement(), Array.get(a, i), ctx);\n-                    if (val == NULL)\n-                        return NULL;\n-                    if (l == null)\n-                        l = new ArrayList(length);\n-                    l.add(val);\n+                    return EMPTY_ARRAY;\n+\n+                Object dataArray = Array.newInstance(\n+                    fmd.getElement().getDeclaredType(), length);\n+                if (isImmutableType(fmd.getElement())) {\n+                    System.arraycopy(a, 0, dataArray, 0, length);\n+                } else {\n+                    for (int i = 0; i < length; i++) {\n+                        val = toNestedData(fmd.getElement(), Array.get(a, i),\n+                            ctx);\n+                        Array.set(dataArray, i, val);\n+                    }\n                 }\n-                return l;\n+                return dataArray;\n             default:\n                 return toNestedData(fmd, val, ctx);\n         }\n     }\n \n+    private boolean isImmutableType(ValueMetaData element) {\n+        switch (element.getDeclaredTypeCode()) {\n+            case JavaTypes.BOOLEAN:\n+            case JavaTypes.BYTE:\n+            case JavaTypes.CHAR:\n+            case JavaTypes.DOUBLE:\n+            case JavaTypes.FLOAT:\n+            case JavaTypes.INT:\n+            case JavaTypes.LONG:\n+            case JavaTypes.SHORT:\n+            case JavaTypes.STRING:\n+            case JavaTypes.NUMBER:\n+            case JavaTypes.BOOLEAN_OBJ:\n+            case JavaTypes.BYTE_OBJ:\n+            case JavaTypes.CHAR_OBJ:\n+            case JavaTypes.DOUBLE_OBJ:\n+            case JavaTypes.FLOAT_OBJ:\n+            case JavaTypes.INT_OBJ:\n+            case JavaTypes.LONG_OBJ:\n+            case JavaTypes.SHORT_OBJ:\n+            case JavaTypes.BIGDECIMAL:\n+            case JavaTypes.BIGINTEGER:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n     /**\n      * Transform the given nested value to a cachable value. Return\n      * {@link #NULL} if the value cannot be cached."},{"sha":"99aa7652dfe7282a399d7a1f2cc43109dcc85fe8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java?ref=0b90c67a8bb2932037c4311e8afb7d85a6c3902e","patch":"@@ -0,0 +1,99 @@\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Map;\n+import java.util.Arrays;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTest;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.kernel.PCData;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+public class TestArrayFieldsInDataCache\n+    extends SingleEMTest {\n+\n+    private static final String[] STRINGS = new String[]{ \"a\", \"b\", \"c\" };\n+    private static final int[] INTS = new int[]{ 1, 2, 3 };\n+\n+    private Object jpaOid;\n+    private Object internalOid;\n+\n+    public TestArrayFieldsInDataCache() {\n+        super(AllFieldTypes.class);\n+    }\n+\n+    @Override\n+    protected void setEMFProps(Map props) {\n+        super.setEMFProps(props);\n+        props.put(\"openjpa.DataCache\", \"true\");\n+        props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+    }\n+\n+    @Override\n+    protected boolean clearDatabaseInSetUp() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AllFieldTypes aft = new AllFieldTypes();\n+        aft.setArrayOfStrings(STRINGS);\n+        aft.setArrayOfInts(INTS);\n+        em.persist(aft);\n+        em.getTransaction().commit();\n+\n+        // get the external and internal forms of the ID for cache\n+        // interrogation and data validation\n+        jpaOid = OpenJPAPersistence.cast(em).getObjectId(aft);\n+        internalOid = OpenJPAPersistence.toBroker(em).getObjectId(aft);\n+\n+        em.close();\n+    }\n+\n+    public void testArrayOfStrings() {\n+        // check that the data cache contains an efficient representation\n+        DataCache cache = OpenJPAPersistence.cast(emf).getStoreCache()\n+            .getDelegate();\n+        PCData data = cache.get(internalOid);\n+        ClassMetaData meta = OpenJPAPersistence.getMetaData(emf,\n+            AllFieldTypes.class);\n+        Object cachedFieldData =\n+            data.getData(meta.getField(\"arrayOfStrings\").getIndex());\n+        assertTrue(cachedFieldData.getClass().isArray());\n+        assertEquals(String.class,\n+            cachedFieldData.getClass().getComponentType());\n+\n+        // make sure that the returned results are correct\n+        em = emf.createEntityManager();\n+        AllFieldTypes aft = em.find(AllFieldTypes.class, jpaOid);\n+        assertTrue(Arrays.equals(STRINGS, aft.getArrayOfStrings()));\n+        assertNotSame(STRINGS, aft.getArrayOfStrings());\n+        em.close();\n+    }\n+\n+    public void testArrayOfInts() {\n+        // check that the data cache contains an efficient representation\n+        DataCache cache = OpenJPAPersistence.cast(emf).getStoreCache()\n+            .getDelegate();\n+        PCData data = cache.get(internalOid);\n+        ClassMetaData meta = OpenJPAPersistence.getMetaData(emf,\n+            AllFieldTypes.class);\n+        Object cachedFieldData =\n+            data.getData(meta.getField(\"arrayOfInts\").getIndex());\n+        assertTrue(cachedFieldData.getClass().isArray());\n+        assertEquals(int.class, cachedFieldData.getClass().getComponentType());\n+\n+        // make sure that the returned results are correct\n+        em = emf.createEntityManager();\n+        AllFieldTypes aft = em.find(AllFieldTypes.class, jpaOid);\n+        assertTrue(Arrays.equals(INTS, aft.getArrayOfInts()));\n+        assertNotSame(INTS, aft.getArrayOfInts());\n+        em.close();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"70fc7bfbceee75ba94e8004aab3a7169ee47276b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","raw_url":"https://github.com/apache/openjpa/raw/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java?ref=0b90c67a8bb2932037c4311e8afb7d85a6c3902e","patch":"@@ -20,6 +20,8 @@\n import java.util.Set;\n import javax.persistence.Entity;\n \n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n @Entity\n public class AllFieldTypes {\n \n@@ -36,6 +38,9 @@\n     private Set<String> setOfStrings = new HashSet<String>();\n     private String[] arrayOfStrings;\n \n+    @PersistentCollection\n+    private int[] arrayOfInts;\n+\n     public void setShortField(short shortField) {\n         this.shortField = shortField;\n     }\n@@ -131,5 +136,13 @@ public void setArrayOfStrings(String[] arrayOfStrings) {\n     public String[] getArrayOfStrings() {\n         return this.arrayOfStrings;\n     }\n+\n+    public void setArrayOfInts(int[] arrayOfInts) {\n+        this.arrayOfInts = arrayOfInts;\n+    }\n+\n+    public int[] getArrayOfInts() {\n+        return arrayOfInts;\n+    }\n }\n "},{"sha":"30c0dce7df1aa56c623a0bfbeeef5655585b8d60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java","raw_url":"https://github.com/apache/openjpa/raw/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java?ref=0b90c67a8bb2932037c4311e8afb7d85a6c3902e","patch":"@@ -65,6 +65,16 @@ protected void setEMFProps(Map props) {\n \n             props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + str + \")\");\n         }\n+\n+        if (clearDatabaseInSetUp()) {\n+            props.put(\"openjpa.jdbc.SynchronizeMappings\",\n+                \"buildSchema(ForeignKeys=true,\" +\n+                    \"SchemaAction='add,deleteTableContents')\");\n+        }\n+    }\n+\n+    protected boolean clearDatabaseInSetUp() {\n+        return false;\n     }\n \n     public void setUp() throws Exception {"},{"sha":"07f064ef4afb0a1e5f25640927e053d0c4e5f102","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","raw_url":"https://github.com/apache/openjpa/raw/0b90c67a8bb2932037c4311e8afb7d85a6c3902e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java?ref=0b90c67a8bb2932037c4311e8afb7d85a6c3902e","patch":"@@ -24,7 +24,9 @@\n import javax.persistence.FetchType;\n \n /**\n- * Metadata annotation for a persistent collection field.\n+ * Metadata annotation for a persistent collection field. This should be\n+ * used to annotate array field types as well as fields of type\n+ * {@link java.util.Collection}.\n  *\n  * @author Abe White\n  * @since 0.4.0"}]}

