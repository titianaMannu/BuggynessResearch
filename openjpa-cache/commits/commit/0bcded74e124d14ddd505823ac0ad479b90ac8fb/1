{"sha":"0bcded74e124d14ddd505823ac0ad479b90ac8fb","node_id":"MDY6Q29tbWl0MjA2MzY0OjBiY2RlZDc0ZTEyNGQxNGRkZDUwNTgyM2FjMGFkNDc5YjkwYWM4ZmI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-06-08T20:19:03Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-06-08T20:19:03Z"},"message":"OPENJPA-2010: Check line number and source file before logging duplicate meta data warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1133546 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac5c7fb1a98320ad6dfabf7abb093fafd54574b8","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac5c7fb1a98320ad6dfabf7abb093fafd54574b8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0bcded74e124d14ddd505823ac0ad479b90ac8fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0bcded74e124d14ddd505823ac0ad479b90ac8fb","html_url":"https://github.com/apache/openjpa/commit/0bcded74e124d14ddd505823ac0ad479b90ac8fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0bcded74e124d14ddd505823ac0ad479b90ac8fb/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"43b545eca415b965f3e7d7a91dedf1890323fa53","url":"https://api.github.com/repos/apache/openjpa/commits/43b545eca415b965f3e7d7a91dedf1890323fa53","html_url":"https://github.com/apache/openjpa/commit/43b545eca415b965f3e7d7a91dedf1890323fa53"}],"stats":{"total":154,"additions":116,"deletions":38},"files":[{"sha":"7e42e9b150e547df93b116f3266c29390e181da9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=0bcded74e124d14ddd505823ac0ad479b90ac8fb","patch":"@@ -529,11 +529,12 @@ else if (_dropMap != null)\n             if (_mappingWriter != null) {\n                 output = new HashMap<File, String>();\n                 File tmp = new File(\"openjpatmp\");\n-                for (int i = 0; i < mappings.length; i++)\n-                    mappings[i].setSource(tmp, SourceTracker.SRC_OTHER);\n-                for (int i = 0; i < queries.length; i++)\n-                    queries[i].setSource(tmp, queries[i].getSourceScope(),\n-                        SourceTracker.SRC_OTHER);\n+                for (int i = 0; i < mappings.length; i++) {\n+                    mappings[i].setSource(tmp, SourceTracker.SRC_OTHER, \"openjpatmp\");\n+                }\n+                for (int i = 0; i < queries.length; i++) {\n+                    queries[i].setSource(tmp, queries[i].getSourceScope(), SourceTracker.SRC_OTHER, \"openjpatmp\");\n+                }\n                 for (int i = 0; i < seqs.length; i++)\n                     seqs[i].setSource(tmp, seqs[i].getSourceScope(),\n                         SourceTracker.SRC_OTHER);\n@@ -708,7 +709,7 @@ private void addMeta(Class<?> cls) {\n                 && fmds[i].getDeclaredType() != Object.class)\n                 fmds[i].setDeclaredTypeCode(JavaTypes.PC);\n         }\n-        meta.setSource(_file, meta.getSourceType());\n+        meta.setSource(_file, meta.getSourceType(), _file == null ? \"\": _file.getPath() );\n         meta.setResolve(MODE_META, true);\n     }\n "},{"sha":"b9be0ad8bdc587c49e86ae327980e87231a299bc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=0bcded74e124d14ddd505823ac0ad479b90ac8fb","patch":"@@ -381,10 +381,11 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n             if (queries[i].getSourceMode() == MODE_QUERY\n                 || (mode & queries[i].getSourceMode()) == 0)\n                 continue;\n-            if (queries[i].getSourceFile() == null)\n-                queries[i].setSource(defaultSourceFile(queries[i],\n-                    clsNames), queries[i].getSourceScope(),\n-                    queries[i].getSourceType());\n+            if (queries[i].getSourceFile() == null) {\n+                File defaultFile = defaultSourceFile(queries[i], clsNames);\n+                queries[i].setSource(defaultFile, queries[i].getSourceScope(), queries[i].getSourceType(),\n+                    defaultFile == null ? \"\" : defaultFile.getPath());\n+            }\n             if ((AccessController.doPrivileged(\n                 J2DoPrivHelper.existsAction(queries[i].getSourceFile())))\n                 .booleanValue()) {\n@@ -423,9 +424,11 @@ private Set assignDefaultQueryFiles(QueryMetaData[] queries,\n         for (int i = 0; i < queries.length; i++) {\n             if (queries[i].getSourceMode() != MODE_QUERY)\n                 continue;\n-            if (queries[i].getSourceFile() == null)\n-                queries[i].setSource(defaultSourceFile(queries[i], clsNames),\n-                    queries[i].getSourceScope(), queries[i].getSourceType());\n+            if (queries[i].getSourceFile() == null) {\n+                File defaultFile = defaultSourceFile(queries[i], clsNames);\n+                queries[i].setSource(defaultFile, queries[i].getSourceScope(), queries[i].getSourceType(),\n+                    defaultFile == null ? \"\" : defaultFile.getPath());\n+            }\n             if ((AccessController.doPrivileged(\n                 J2DoPrivHelper.existsAction(queries[i].getSourceFile())))\n                 .booleanValue()) {\n@@ -522,7 +525,8 @@ protected File getSourceFile(ClassMetaData meta) {\n      * Set the current source file of the given metadata.\n      */\n     protected void setSourceFile(ClassMetaData meta, File sourceFile) {\n-        meta.setSource(sourceFile, meta.getSourceType());\n+        meta.setSource(sourceFile, meta.getSourceType(), sourceFile != null ? \n+            sourceFile.getPath() : \"\");\n     }\n \n     /**"},{"sha":"5f52a9bc215c8a26514225ff8aa6171beea5e371","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=0bcded74e124d14ddd505823ac0ad479b90ac8fb","patch":"@@ -145,6 +145,7 @@\n     private final ValueMetaData _owner;\n     private final LifecycleMetaData _lifeMeta = new LifecycleMetaData(this);\n     private File _srcFile = null;\n+    private String _srcName = null;\n     private int _srcType = SRC_OTHER;\n     private int _lineNum = 0;  \n     private int _colNum = 0;  \n@@ -2403,9 +2404,10 @@ public int getSourceType() {\n         return _srcType;\n     }\n \n-    public void setSource(File file, int srcType) {\n+    public void setSource(File file, int srcType, String srcName) {\n         _srcFile = file;\n         _srcType = srcType;\n+        _srcName = srcName;\n     }\n \n     public String getResourceName() {\n@@ -2757,5 +2759,9 @@ public Boolean getCacheEnabled() {\n             return _cacheEnabled;\n         return getPCSuperclassMetaData() != null ?  getPCSuperclassMetaData().getCacheEnabled() : null; \n     }\n+    \n+    public String getSourceName(){\n+        return _srcName; \n+    }\n }\n "},{"sha":"c913ce65a35739de2268716fe52e9c2ea7da8960","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","raw_url":"https://github.com/apache/openjpa/raw/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java?ref=0bcded74e124d14ddd505823ac0ad479b90ac8fb","patch":"@@ -175,7 +175,7 @@ private void add(Class cls) {\n                 && fmds[i].getDeclaredType() != Object.class)\n                 fmds[i].setDeclaredTypeCode(JavaTypes.PC);\n         }\n-        meta.setSource(_file, meta.getSourceType());\n+        meta.setSource(_file, meta.getSourceType(), _file == null ? \"\" : _file.getPath());\n         _flush = true;\n     }\n \n@@ -205,7 +205,7 @@ public void record() {\n                 output = new HashMap();\n                 File tmp = new File(\"openjpatmp\");\n                 for (int i = 0; i < metas.length; i++)\n-                    metas[i].setSource(tmp, metas[i].getSourceType());\n+                    metas[i].setSource(tmp, metas[i].getSourceType(), tmp.getPath());\n             }\n             if (!mdf.store(metas, new QueryMetaData[0],\n                 new SequenceMetaData[0], MODE_META, output))"},{"sha":"71b9aff910eae973f8ed1588090f08cb9381224a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java?ref=0bcded74e124d14ddd505823ac0ad479b90ac8fb","patch":"@@ -57,7 +57,8 @@\n     private List _hintVals;\n     private String _resultSetMappingName;\n     private int _lineNum;  \n-    private int _colNum;  \n+    private int _colNum;\n+    private String _srcName; \n \n     /**\n      * Construct with the given name.\n@@ -268,10 +269,11 @@ public int getSourceType() {\n         return _srcType;\n     }\n \n-    public void setSource(File file, Object scope, int srcType) {\n+    public void setSource(File file, Object scope, int srcType, String srcName) {\n         _file = file;\n         _scope = scope;\n         _srcType = srcType;\n+        _srcName = srcName;\n     }\n \n     public String getResourceName() {\n@@ -293,4 +295,8 @@ public int getColNumber() {\n     public void setColNumber(int colNum) {\n         _colNum = colNum;\n     }\n+    \n+    public String getSourceName() {\n+        return _srcName;\n+    }\n }"},{"sha":"11a00ee759de224f284865629e7548a605ea1c1a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=0bcded74e124d14ddd505823ac0ad479b90ac8fb","patch":"@@ -733,20 +733,27 @@ protected boolean handleUnknownClassAnnotation(ClassMetaData meta,\n      */\n     private ClassMetaData getMetaData() {\n         ClassMetaData meta = getRepository().getCachedMetaData(_cls);\n-        if (meta != null &&\n-            ((isMetaDataMode() && (meta.getSourceMode() & MODE_META) != 0) ||\n-                (isMappingMode() &&\n-                    (meta.getSourceMode() & MODE_MAPPING) != 0))) {\n-            if (_log.isWarnEnabled())\n+        if (meta != null\n+            && ((isMetaDataMode() \n+                && (meta.getSourceMode() & MODE_META) != 0) \n+                || (isMappingMode() && (meta.getSourceMode() & MODE_MAPPING) != 0) ) ) {\n+            if (_log.isWarnEnabled()) {\n                 _log.warn(_loc.get(\"dup-metadata\", _cls.getName()));\n+            }\n+            if(_log.isTraceEnabled()) { \n+                _log.trace(String.format(\n+                    \"MetaData originally obtained from file: %s under mode :%d with scope %s, and type :%d\",\n+                    meta.getSourceName(), meta.getSourceMode(), meta.getSourceScope(), meta.getSourceType()));\n+            }\n             return null;\n         }\n \n         if (meta == null) {\n             meta = getRepository().addMetaData(_cls, getAccessCode(_cls));\n             meta.setEnvClassLoader(_envLoader);\n             meta.setSourceMode(MODE_NONE);\n-            meta.setSource(getSourceFile(), SourceTracker.SRC_ANNOTATIONS);\n+            meta.setSource(getSourceFile(), SourceTracker.SRC_ANNOTATIONS, getSourceFile() == null ? \"\"\n+                : getSourceFile().getPath());\n         }\n         return meta;\n     }\n@@ -1825,7 +1832,7 @@ private void parseNamedQueries(AnnotatedElement el, NamedQuery... queries) {\n             }\n \n             meta.setSource(getSourceFile(), (el instanceof Class) ? el : null,\n-                SourceTracker.SRC_ANNOTATIONS);\n+                SourceTracker.SRC_ANNOTATIONS, getSourceFile() == null ? \"\" : getSourceFile().getPath());\n             if (isMetaDataMode())\n                 meta.setSourceMode(MODE_META);\n             else if (isMappingMode())\n@@ -1902,7 +1909,7 @@ else if (!void.class.equals(res))\n                 meta.addHint(hint.name(), hint.value());\n \n             meta.setSource(getSourceFile(), (el instanceof Class) ? el : null,\n-                SourceTracker.SRC_ANNOTATIONS);\n+                SourceTracker.SRC_ANNOTATIONS, getSourceFile() == null ? \"\" : getSourceFile().getPath());\n             if (isMetaDataMode())\n                 meta.setSourceMode(MODE_META);\n             else if (isMappingMode())"},{"sha":"1d2df1a1a005cb11ce3bbcee6841529dd4edba82","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":65,"deletions":11,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/0bcded74e124d14ddd505823ac0ad479b90ac8fb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=0bcded74e124d14ddd505823ac0ad479b90ac8fb","patch":"@@ -879,12 +879,20 @@ protected boolean startClass(String elem, Attributes attrs)\n             && ((isMetaDataMode() && (meta.getSourceMode() & MODE_META) != 0)\n             || (isMappingMode() && (meta.getSourceMode() & MODE_MAPPING) != 0)))\n         {\n-            if (log.isWarnEnabled())\n-                log.warn(_loc.get(\"dup-metadata\", _cls, getSourceName()));\n+            if(isDuplicateClass(meta)) { \n+                if (log.isWarnEnabled()) {\n+                    log.warn(_loc.get(\"dup-metadata\", _cls, getSourceName()));\n+                }\n+                if(log.isTraceEnabled()) { \n+                    log.trace(String.format(\n+                        \"MetaData originally obtained from source: %s under mode: %d with scope: %s, and type: %d\",\n+                        meta.getSourceName(), meta.getSourceMode(), meta.getSourceScope(), meta.getSourceType()));\n+                }\n+            }\n             _cls = null;\n             return false;\n         }\n-\n+        \n         int access = AccessCode.UNKNOWN;\n         if (meta == null) {\n             int accessCode = toAccessType(attrs.getValue(\"access\"));\n@@ -904,17 +912,20 @@ protected boolean startClass(String elem, Attributes attrs)\n             meta.setSourceMode(MODE_NONE);\n \n             // parse annotations first so XML overrides them\n-            if (_parser != null)\n+            if (_parser != null) {\n                 _parser.parse(_cls);\n+            }\n         }\n         access = meta.getAccessType();\n \n         boolean mappedSuper = \"mapped-superclass\".equals(elem);\n         boolean embeddable = \"embeddable\".equals(elem);\n+\n         if (isMetaDataMode()) {\n-            meta.setSource(getSourceFile(), SourceTracker.SRC_XML);\n-            meta.setSourceMode(MODE_META, true);\n             Locator locator = getLocation().getLocator();\n+            meta.setSource(getSourceFile(), SourceTracker.SRC_XML, locator != null ? locator.getSystemId() : \"\" );\n+            meta.setSourceMode(MODE_META, true);\n+        \n             if (locator != null) {\n                 meta.setLineNumber(locator.getLineNumber());\n                 meta.setColNumber(locator.getColumnNumber());\n@@ -1705,7 +1716,7 @@ protected boolean startNamedQuery(Attributes attrs)\n         Object cur = currentElement();\n         Object scope = (cur instanceof ClassMetaData)\n             ? ((ClassMetaData) cur).getDescribedType() : null;\n-        meta.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n+        meta.setSource(getSourceFile(), scope, SourceTracker.SRC_XML, locator == null ? \"\" : locator.getSystemId());\n         if (isMetaDataMode())\n             meta.setSourceMode(MODE_META);\n         else if (isMappingMode())\n@@ -1788,8 +1799,9 @@ protected boolean startNamedNativeQuery(Attributes attrs)\n             log.trace(_loc.get(\"parse-native-query\", name));\n \n         QueryMetaData meta = getRepository().getCachedQueryMetaData(null, name);\n-        if (meta != null && log.isWarnEnabled())\n+        if (meta != null && isDuplicateQuery(meta) ) {\n             log.warn(_loc.get(\"override-query\", name, currentLocation()));\n+        }\n \n         meta = getRepository().addQueryMetaData(null, name);\n         meta.setDefiningType(_cls);\n@@ -1809,10 +1821,9 @@ protected boolean startNamedNativeQuery(Attributes attrs)\n             meta.setResultSetMappingName(val);\n \n         Object cur = currentElement();\n-        Object scope = (cur instanceof ClassMetaData)\n-            ? ((ClassMetaData) cur).getDescribedType() : null;\n-        meta.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n+        Object scope = (cur instanceof ClassMetaData) ? ((ClassMetaData) cur).getDescribedType() : null;\n         Locator locator = getLocation().getLocator();\n+        meta.setSource(getSourceFile(), scope, SourceTracker.SRC_XML, locator == null ? \"\" : locator.getSystemId());\n         if (locator != null) {\n             meta.setLineNumber(locator.getLineNumber());\n             meta.setColNumber(locator.getColumnNumber());\n@@ -2190,4 +2201,47 @@ protected String normalizeSchemaName(String schName) {\n     protected String normalizeCatalogName(String catName) {\n         return catName;\n     }\n+\n+    /**\n+     * Determines whether the ClassMetaData has been resolved more than once. Compares the current sourceName and\n+     * linenumber to the ones used to originally resolve the metadata.\n+     * \n+     * @param meta The ClassMetaData to inspect.\n+     * @return true if the source was has already been resolved from a different location. Otherwise return false\n+     */\n+    protected boolean isDuplicateClass(ClassMetaData meta) {\n+        if (!StringUtils.equals(getSourceName(), meta.getSourceName())) {\n+            return true;\n+        }\n+\n+        if (getLineNum() != meta.getLineNumber()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Determines whether the QueryMetaData has been resolved more than once.\n+     * @param meta QueryMetaData that has already been resolved. \n+     * @return true if the QueryMetaData was defined in a different place - e.g. another line in orm.xml.\n+     */\n+    protected boolean isDuplicateQuery(QueryMetaData meta) { \n+        if(! StringUtils.equals(getSourceName(), meta.getSourceName())) {\n+            return true;\n+        }\n+        if(getLineNum() != meta.getLineNumber()) { \n+            return true;\n+        }\n+        return false; \n+            \n+    }\n+    \n+    private int getLineNum() { \n+        int lineNum = 0;\n+        Locator loc = getLocation().getLocator();\n+        if(loc != null ) {\n+            lineNum = loc.getLineNumber();\n+        }\n+        return lineNum;\n+    }\n }"}]}

