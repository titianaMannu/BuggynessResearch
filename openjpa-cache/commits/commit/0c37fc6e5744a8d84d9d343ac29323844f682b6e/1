{"sha":"0c37fc6e5744a8d84d9d343ac29323844f682b6e","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjMzdmYzZlNTc0NGE4ZDg0ZDlkMzQzYWMyOTMyMzg0NGY2ODJiNmU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-02-18T16:59:16Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-02-18T16:59:16Z"},"message":"OPENJPA-1943 - Apply query timeout value to pessimistic row lock statement execution.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1072061 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba000bb038f332ff293d8df80f37c1d04271b633","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba000bb038f332ff293d8df80f37c1d04271b633"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0c37fc6e5744a8d84d9d343ac29323844f682b6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0c37fc6e5744a8d84d9d343ac29323844f682b6e","html_url":"https://github.com/apache/openjpa/commit/0c37fc6e5744a8d84d9d343ac29323844f682b6e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0c37fc6e5744a8d84d9d343ac29323844f682b6e/comments","author":null,"committer":null,"parents":[{"sha":"cf4a80047e589c90d00de433a3e5d3008565fd07","url":"https://api.github.com/repos/apache/openjpa/commits/cf4a80047e589c90d00de433a3e5d3008565fd07","html_url":"https://github.com/apache/openjpa/commit/cf4a80047e589c90d00de433a3e5d3008565fd07"}],"stats":{"total":304,"additions":208,"deletions":96},"files":[{"sha":"1a27b090423046016ae0c2da93e99a68c5f5139f","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -47,7 +47,7 @@\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.SQLServerDictionary\">\n-\t\t<lock>1204,1205,1222,HY008</lock>\n+\t\t<lock>1204,1205,1222,HY008,40001</lock>\n \t\t<referential-integrity>544,2601,2627,8114,8115</referential-integrity>\n \t\t<object-exists>23000</object-exists>\n \t\t<object-not-found></object-not-found>"},{"sha":"c0144fa210eb4ee097b6087b13906b1c5e067442","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -455,10 +455,14 @@ public FetchConfiguration getFetchConfiguration() {\n     }\n \n     public FetchConfiguration pushFetchConfiguration() {\n+\t\treturn pushFetchConfiguration(null);\n+    }\n+\n+    public FetchConfiguration pushFetchConfiguration(FetchConfiguration fc) {\n         if (_fcs == null)\n             _fcs = new LinkedList<FetchConfiguration>();\n         _fcs.add(_fc);\n-        _fc = (FetchConfiguration) _fc.clone();\n+        _fc = (FetchConfiguration) (fc != null ? fc : _fc).clone();\n         return _fc;\n     }\n "},{"sha":"d0ff9b5013619b278be4982ae6d8f3e472fad9d4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -154,6 +154,14 @@ public FetchConfiguration pushFetchConfiguration() {\n         }\n     }\n \n+    public FetchConfiguration pushFetchConfiguration(FetchConfiguration fc) {\n+        try {\n+            return _broker.pushFetchConfiguration(fc);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public void popFetchConfiguration() {\n         try {\n             _broker.popFetchConfiguration();"},{"sha":"bb85627b054c3bf1851c2a300ad1f43f830aa23b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -73,6 +73,15 @@\n      */\n     public FetchConfiguration pushFetchConfiguration();\n \n+    /**\n+     * Pushes the fetch configuration argument onto a stack, and makes the new configuration\n+     * the active one.\n+     *\n+     * @since 2.1.1\n+     * @return the new fetch configuration\n+     */\n+    public FetchConfiguration pushFetchConfiguration(FetchConfiguration fc);\n+\n     /**\n      * Pops the fetch configuration from the top of the stack, making the\n      * next one down the active one. This returns void to avoid confusion,"},{"sha":"c892cbeb051f3ceeda17066f559cc01307c0e324","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -271,6 +271,12 @@ protected void closeAllOpenEMs(EntityManagerFactory emf) {\n         for (Broker b : ((AbstractBrokerFactory) JPAFacadeHelper.toBrokerFactory(emf)).getOpenBrokers()) {\n             if (b != null && !b.isClosed()) {\n                 EntityManager em = JPAFacadeHelper.toEntityManager(b);\n+                if( em.getTransaction().isActive() ) {\n+                \ttry {\n+\t\t\t\t\t\tem.getTransaction().rollback();\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t}\n+                }\n                 closeEM(em);\n             }\n         }"},{"sha":"7a8328fcccfa6cce677e62e975efd9b81244718a","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","status":"modified","additions":82,"deletions":30,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -684,41 +684,93 @@ private void launchCommonSequence(TestThread thisThread ) {\n                             }\n                         }\n                     }\n-                    String testExClass = null;\n-                    Throwable curThrowable = null;\n                     int threadId = threadToRun;\n                     if (args.length > 1) {\n                         threadId = (Integer) args[1];\n                     }\n-                    TestThread exThread = threads.get(threadId);\n-                    curThrowable = exThread.throwable;\n-                    testExClass = processException(curAction, curThrowable);\n-\n-                    boolean exMatched = false;\n-                    if (expectedExceptions != null\n-                        && expectedExceptions.size() > 0) {\n-                        for (Class<?> expectedException :\n-                            expectedExceptions) {\n-                            if (matchExpectedException(curAct, expectedException,\n-                                curThrowable)) {\n+                    if( threadId != -1 ) {\n+                    \t// test exception on a specific thread\n+                        String testExClass = null;\n+                        Throwable curThrowable = null;\n+                        boolean exMatched = false;\n+                        TestThread exThread = threads.get(threadId);\n+                        curThrowable = exThread.throwable;\n+                        testExClass = processException(exThread, curAction, curThrowable);\n+\n+                        if (expectedExceptions != null\n+                            && expectedExceptions.size() > 0) {\n+                            for (Class<?> expectedException :\n+                                expectedExceptions) {\n+                                if (matchExpectedException(curAct, expectedException,\n+                                    curThrowable)) {\n+                                    exMatched = true;\n+                                    break;\n+                                }\n+                            }\n+                        } else {\n+                            if (curThrowable == null) {\n                                 exMatched = true;\n-                                break;\n                             }\n                         }\n-                    } else {\n-                        if (curThrowable == null) {\n-                            exMatched = true;\n-                        }\n-                    }\n-                    if (!exMatched) {\n-                        log.trace(testExClass);\n-                        if (curThrowable != null) {\n-                            logStack(curThrowable);\n+                        if (!exMatched) {\n+                            log.trace(testExClass);\n+                            if (curThrowable != null) {\n+                                logStack(curThrowable);\n+                            }\n                         }\n+                        assertTrue(curAct + \":Expecting=\" + expectedExceptions\n+                            + \", Testing=\" + testExClass, exMatched);\n+                        exThread.throwable = null;\n+                    } else {\n+                    \t// test exception in any thread; used for deadlock exception testing since db server\n+                    \t// decides on which thread to terminate if deadlock is detected.\n+                        if (expectedExceptions == null || expectedExceptions.size() == 0) {\n+                        \t// Expecting no exception in all threads.\n+                        \tboolean noExMatched = true;\n+\t\t\t\t\t\t\tString aTestExClass = \"[\";\n+\t\t\t\t\t\t\tfor (TestThread aThread : threads) {\n+\t\t\t\t\t\t\t\tThrowable aThrowable = aThread.throwable;\n+\t\t\t\t\t\t\t\taTestExClass += processException(aThread, curAction, aThrowable) + \", \";\n+\t\t\t\t\t\t\t    if (aThrowable != null) {\n+\t\t\t\t\t\t\t    \tnoExMatched = false;\n+\t\t                            log.trace(aTestExClass);\n+\t                                logStack(aThrowable);\n+\t\t                            aThread.throwable = null;\n+\t\t\t\t\t\t\t    }\n+\t\t\t\t\t\t\t}\n+\t                        assertTrue(curAct + \":Expecting=[no exception]\"\n+\t                                + \", Testing=\" + aTestExClass + ']', noExMatched);\n+\t\t\t\t\t\t} else {\n+                        \t// Expecting any exception in any threads.\n+\t\t\t\t\t\t\tboolean aMatched = false;\n+\t\t\t\t\t\t\tString aTestExClass = \"[\";\n+\t\t\t\t\t\t\tfor (TestThread aThread : threads) {\n+\t\t\t\t\t\t\t\tThrowable aThrowable = aThread.throwable;\n+\t\t\t\t\t\t\t\taTestExClass += processException(aThread, curAction, aThrowable) + \", \";\n+\n+\t\t\t\t\t\t\t\tfor (Class<?> anExpectedException : expectedExceptions) {\n+\t\t\t\t\t\t\t\t\tif (matchExpectedException(curAct,\n+\t\t\t\t\t\t\t\t\t\t\tanExpectedException, aThrowable)) {\n+\t\t\t\t\t\t\t\t\t\taMatched = true;\n+\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tif (aMatched) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t                            if (aThrowable != null) {\n+\t\t                                logStack(aThrowable);\n+\t\t\t                            aThread.throwable = null;\n+\t\t                            }\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t                        if (!aMatched) {\n+\t                            log.trace(aTestExClass);\n+\t                        }\n+\t                        assertTrue(curAct + \":Expecting=\" + expectedExceptions\n+\t                            + \", Testing=\" + aTestExClass + \"]\", aMatched);\n+\t\t\t\t\t\t}\n                     }\n-                    assertTrue(curAct + \":Expecting=\" + expectedExceptions\n-                        + \", Testing=\" + testExClass, exMatched);\n-                    exThread.throwable = null;\n                     break;\n \n                 case WaitAllChildren:\n@@ -855,7 +907,7 @@ private void launchCommonSequence(TestThread thisThread ) {\n                     log.trace(\"finally: commit completed\");\n                 }\n                 } catch(Exception finalEx) {\n-                    String failStr = processException(curAction, finalEx);\n+                    String failStr = processException(thisThread, curAction, finalEx);\n                     log.trace(\"Fincally:\" + failStr);\n                 }\n             }\n@@ -881,11 +933,11 @@ private LockModeType getCanonical(LockModeType lockMode) {\n         return lockMode;\n     }\n \n-    private String processException(Act curAction, Throwable t) {\n-        String failStr = \"Caught exception: none\";\n+    private String processException(TestThread thread, Act curAction, Throwable t) {\n+        String failStr = \"[\" + thread.threadToRun + \"] Caught exception: none\";\n         if (t != null) {\n             getLog().trace(\n-                \"Caught exception: \" + t.getClass().getName() + \":\" + t);\n+            \t\t\"[\" + thread.threadToRun + \"] Caught exception: \" + t.getClass().getName() + \":\" + t);\n             logStack(t);\n             Throwable rootCause = t.getCause();\n             failStr = \"Failed on action '\" + curAction + \"' with exception \""},{"sha":"037e352074d9ec21a065b19c87af0afc47d3320b","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.lockmgr;\n \n import java.util.Arrays;\n+import java.util.HashMap;\n \n import javax.persistence.EntityManager;\n import javax.persistence.LockModeType;\n@@ -28,19 +29,27 @@\n  */\n public class TestMixedLockManagerDeadlock extends SequencedActionsTest {\n     private DBType dbType;\n+    private HashMap<DBType,Class<?>[]> expWriteLockExClasses;\n     \n     public void setUp() {\n         setSupportedDatabases(\n+                org.apache.openjpa.jdbc.sql.DB2Dictionary.class,\n                 org.apache.openjpa.jdbc.sql.DerbyDictionary.class,\n                 org.apache.openjpa.jdbc.sql.OracleDictionary.class,\n-                org.apache.openjpa.jdbc.sql.DB2Dictionary.class);\n+                org.apache.openjpa.jdbc.sql.SQLServerDictionary.class);\n         if (isTestsDisabled()) {\n             return;\n         }\n \n         setUp(LockEmployee.class\n             , \"openjpa.LockManager\", \"mixed\"\n         );\n+        expWriteLockExClasses = new HashMap<DBType,Class<?>[]>();\n+        expWriteLockExClasses.put(DBType.db2, null);\n+        expWriteLockExClasses.put(DBType.derby, ExpectingOptimisticLockExClass);\n+        expWriteLockExClasses.put(DBType.oracle, null);\n+        expWriteLockExClasses.put(DBType.sqlserver, ExpectingOptimisticLockExClass);\n+\n         commonSetUp();\n         EntityManager em = emf.createEntityManager();\n         dbType = getDBType(em);\n@@ -49,8 +58,7 @@ public void setUp() {\n     /* ======== Find dead lock exception test ============*/\n     public void testFindDeadLockException() {\n         commonFindTest(\"testFindDeadLockException\", LockModeType.READ, null); \n-        commonFindTest(\"testFindDeadLockException\", LockModeType.WRITE, dbType == DBType.oracle ? null\n-                : ExpectingOptimisticLockExClass);\n+        commonFindTest(\"testFindDeadLockException\", LockModeType.WRITE, expWriteLockExClasses.get(dbType));\n         commonFindTest(\"testFindDeadLockException\", LockModeType.PESSIMISTIC_WRITE, ExpectingAnyLockExClass);\n     }\n \n@@ -73,7 +81,7 @@ private void commonFindTest( String testName,\n             {Act.FindWithLock, 2, t1Lock},                        \n             \n             {Act.WaitAllChildren},\n-            {Act.TestException, 1, t1Exceptions},\n+            {Act.TestException, -1, t1Exceptions}, // test t1Exceptions in any thread\n             {Act.RollbackTx}\n         };\n         Object[][] thread1 = {\n@@ -94,10 +102,8 @@ private void commonFindTest( String testName,\n     /* ======== named query dead lock exception test ============*/\n     public void testNamedQueryDeadLockException() {\n         commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.READ, null);\n-        commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.WRITE, dbType == DBType.oracle ? null\n-                : ExpectingOptimisticLockExClass);\n-//      commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.PESSIMISTIC_FORCE_INCREMENT,\n-//      ExpectingAnyLockExClass);\n+        commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.WRITE, expWriteLockExClasses.get(dbType));\n+        commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.PESSIMISTIC_FORCE_INCREMENT, ExpectingAnyLockExClass);\n     }\n \n     private void commonNamedQueryTest( String testName, \n@@ -119,7 +125,7 @@ private void commonNamedQueryTest( String testName,\n             {Act.NamedQueryWithLock, \"findEmployeeById\", 2, t1Lock, \"openjpa.hint.IgnorePreparedQuery\", true},                        \n             \n             {Act.WaitAllChildren},\n-            {Act.TestException, 1, t1Exceptions},\n+            {Act.TestException, -1, t1Exceptions},\n \n             {Act.RollbackTx},\n             {Act.CloseEm}"},{"sha":"a74ac68496868f695eefff929febd1ec423266d7","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":22,"deletions":30,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -137,10 +137,7 @@ public void testFindAfterQueryWithPessimisticLocks() {\n             em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, hints);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n         } catch (Throwable e) {            \n-            if (!dict.supportsLockingWithMultipleTables)\n-                assertError(e, PessimisticLockException.class);\n-            else \n-                assertError(e, LockTimeoutException.class);\n+            assertError(e, PessimisticLockException.class, LockTimeoutException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -206,10 +203,7 @@ public void testFindAfterQueryOrderByWithPessimisticLocks() {\n             em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n         } catch (Exception e) {\n-            if (!dict.supportsLockingWithMultipleTables)\n-                assertError(e, PessimisticLockException.class);\n-            else\n-                assertError(e, LockTimeoutException.class);\n+            assertError(e, PessimisticLockException.class, LockTimeoutException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -276,10 +270,7 @@ public void testQueryAfterFindWithPessimisticLocks() {\n             assertTrue(\"Test department name = 'D20'\", q.get(0).getName().equals(\"D10\")\n                     || q.get(0).getName().equals(\"D20\"));\n         } catch (Exception ex) {\n-            if (!dict.supportsLockingWithMultipleTables)\n-                fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n-            else\n-                assertError(ex, QueryTimeoutException.class);\n+            assertError(ex, QueryTimeoutException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -304,10 +295,7 @@ public void testQueryAfterFindWithPessimisticLocks() {\n             List<Employee> q = query.getResultList();\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n         } catch (Exception e) {\n-            if (!dict.supportsLockingWithMultipleTables)\n-                assertError(e, PessimisticLockException.class);\n-            else\n-                assertError(e, QueryTimeoutException.class);\n+            assertError(e, PessimisticLockException.class, QueryTimeoutException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -342,10 +330,7 @@ public void testQueryOrderByAfterFindWithPessimisticLocks() {\n             assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n             assertEquals(\"Test department name = 'D20'\", q.get(0).getName(), \"D20\");\n         } catch (Exception ex) {\n-            if (!dict.supportsLockingWithMultipleTables)\n-                fail(\"Caught unexpected \" + ex.getClass().getName() + \":\" + ex.getMessage());\n-            else \n-                assertError(ex, QueryTimeoutException.class);\n+            assertError(ex, QueryTimeoutException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -370,10 +355,7 @@ public void testQueryOrderByAfterFindWithPessimisticLocks() {\n             List<?> q = query.getResultList();\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n         } catch (Exception e) {\n-            if (!dict.supportsLockingWithMultipleTables)\n-                assertError(e, PessimisticLockException.class);\n-            else \n-                assertError(e, QueryTimeoutException.class);\n+            assertError(e, PessimisticLockException.class, QueryTimeoutException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -505,12 +487,22 @@ public void testRefreshLockTimeout() {\n      * @param expeceted\n      *            type of the exception\n      */\n-    void assertError(Throwable actual, Class<? extends Throwable> expected) {\n-        if (!expected.isAssignableFrom(actual.getClass())) {\n-            actual.printStackTrace();\n-            throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \"\n-                    + expected.getName());\n-        }\n+    void assertError(Throwable actual, Class<? extends Throwable> ... expected) {\n+\t\tboolean matched = false;\n+\t\tString expectedNames = \"\";\n+\t\tfor (Class<? extends Throwable> aExpected : expected) {\n+\t\t\texpectedNames += aExpected.getName() + \", \";\n+\t\t\tif (aExpected.isAssignableFrom(actual.getClass())) {\n+\t\t\t\tmatched = true;\n+\t\t\t}\n+\t\t}\n+\t\tif (!matched) {\n+\t\t\tactual.printStackTrace();\n+\t\t\tthrow new AssertionFailedError(actual.getClass().getName()\n+\t\t\t\t\t+ \" was raised but expecting one of the following: [\"\n+\t\t\t\t\t+ expectedNames.substring(0, expectedNames.length() - 2) + \"]\");\n+\t\t}\n+\n         Object failed = getFailedObject(actual);\n         assertNotNull(\"Failed object is null\", failed);\n         assertNotEquals(\"null\", failed);"},{"sha":"3bc1fad19be12b21fa797c2abc4047216a40c2bf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -163,10 +163,14 @@ public FetchPlan getFetchPlan() {\n     }\n \n     public FetchPlan pushFetchPlan() {\n+\t\treturn pushFetchPlan(null);\n+    }\n+\n+    public FetchPlan pushFetchPlan(FetchConfiguration fc) {\n         assertNotCloseInvoked();\n         _broker.lock();\n         try {\n-            _broker.pushFetchConfiguration();\n+            _broker.pushFetchConfiguration(fc);\n             return getFetchPlan();\n         } finally {\n             _broker.unlock();"},{"sha":"e2ec97ff7c6c00ab4ad2ab3259def08251d116fa","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":55,"deletions":24,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c37fc6e5744a8d84d9d343ac29323844f682b6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=0c37fc6e5744a8d84d9d343ac29323844f682b6e","patch":"@@ -316,22 +316,26 @@ private Object execute() {\n \t\n \tpublic List getResultList() {\n \t\t_em.assertNotCloseInvoked();\n-\t\tObject ob = execute();\n-\t\tif (ob instanceof List) {\n-\t\t\tList ret = (List) ob;\n-\t\t\tif (ret instanceof ResultList) {\n-\t\t\t    RuntimeExceptionTranslator trans = PersistenceExceptions.getRollbackTranslator(_em);\n-\t\t\t    if (_query.isDistinct()) {\n-\t\t\t        return new DistinctResultList((ResultList) ret, trans);\n+\t\tboolean queryFetchPlanUsed = pushQueryFetchPlan();\n+\t\ttry {\n+\t\t    Object ob = execute();\n+\t\t    if (ob instanceof List) {\n+\t\t\t    List ret = (List) ob;\n+\t\t\t    if (ret instanceof ResultList) {\n+\t\t\t        RuntimeExceptionTranslator trans = PersistenceExceptions.getRollbackTranslator(_em);\n+\t\t\t        if (_query.isDistinct()) {\n+\t\t\t            return new DistinctResultList((ResultList) ret, trans);\n+\t\t\t        } else {\n+\t\t\t            return new DelegatingResultList((ResultList) ret, trans);\n+\t\t\t        }\n \t\t\t    } else {\n-\t\t\t        return new DelegatingResultList((ResultList) ret, trans);\n+\t\t\t\t    return ret;\n \t\t\t    }\n-\t\t\t} else {\n-\t\t\t\treturn ret;\n-\t\t\t}\n+\t\t    }\n+\t\t    return Collections.singletonList(ob);\n+\t\t} finally {\n+\t\t\tpopQueryFetchPlan(queryFetchPlanUsed);\n \t\t}\n-\n-\t\treturn Collections.singletonList(ob);\n \t}\n \n \t/**\n@@ -340,18 +344,45 @@ public List getResultList() {\n \tpublic X getSingleResult() {\n \t\t_em.assertNotCloseInvoked();\n         setHint(QueryHints.HINT_RESULT_COUNT, 1); // for DB2 optimization\n-\t\tList result = getResultList();\n-\t\tif (result == null || result.isEmpty())\n-            throw new NoResultException(_loc.get(\"no-result\", getQueryString())\n-                    .getMessage());\n-\t\tif (result.size() > 1)\n-            throw new NonUniqueResultException(_loc.get(\"non-unique-result\",\n-                    getQueryString(), result.size()).getMessage());\n+\t\tboolean queryFetchPlanUsed = pushQueryFetchPlan();\n \t\ttry {\n-\t\t    return (X)result.get(0);\n-\t\t} catch (Exception e) {\n-            throw new NoResultException(_loc.get(\"no-result\", getQueryString())\n-                .getMessage());\n+\t\t    List result = getResultList();\n+\t\t    if (result == null || result.isEmpty())\n+                throw new NoResultException(_loc.get(\"no-result\", getQueryString())\n+                        .getMessage());\n+\t\t    if (result.size() > 1)\n+                throw new NonUniqueResultException(_loc.get(\"non-unique-result\",\n+                        getQueryString(), result.size()).getMessage());\n+\t\t    try {\n+\t\t        return (X)result.get(0);\n+\t\t    } catch (Exception e) {\n+                throw new NoResultException(_loc.get(\"no-result\", getQueryString())\n+                    .getMessage());\n+\t\t    }\n+\t\t} finally {\n+\t\t\tpopQueryFetchPlan(queryFetchPlanUsed);\n+\t\t}\n+\t}\n+\n+\tprivate boolean pushQueryFetchPlan() {\n+\t\tboolean fcPushed = false;\n+\t\tif (_fetch != null && _hintHandler != null) {\n+\t\t\tswitch (_fetch.getReadLockMode()) {\n+\t\t\tcase PESSIMISTIC_READ:\n+\t\t\tcase PESSIMISTIC_WRITE:\n+\t\t\tcase PESSIMISTIC_FORCE_INCREMENT:\n+\t\t\t\t// push query fetch plan to em if pessisimistic lock and any\n+\t\t\t\t// hints are set\n+\t\t\t\t_em.pushFetchPlan(((FetchPlanImpl)_fetch).getDelegate());\n+\t\t\t\tfcPushed = true;\n+\t\t\t}\n+\t\t}\n+\t\treturn fcPushed;\n+\t}\n+\n+\tprivate void popQueryFetchPlan(boolean queryFetchPlanUsed) {\n+\t\tif (queryFetchPlanUsed) {\n+\t\t\t_em.popFetchPlan();\n \t\t}\n \t}\n "}]}

