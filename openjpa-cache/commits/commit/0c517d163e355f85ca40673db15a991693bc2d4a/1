{"sha":"0c517d163e355f85ca40673db15a991693bc2d4a","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjNTE3ZDE2M2UzNTVmODVjYTQwNjczZGIxNWE5OTE2OTNiYzJkNGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-03T21:55:29Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-03T21:55:29Z"},"message":"OPENJPA-244 committing on behalf of Albert\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552996 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e1001cf0c15158783b884647c149a9812ac0cd5","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e1001cf0c15158783b884647c149a9812ac0cd5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0c517d163e355f85ca40673db15a991693bc2d4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0c517d163e355f85ca40673db15a991693bc2d4a","html_url":"https://github.com/apache/openjpa/commit/0c517d163e355f85ca40673db15a991693bc2d4a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0c517d163e355f85ca40673db15a991693bc2d4a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"21909df2ecea737a475d2d18ec33712570dc832a","url":"https://api.github.com/repos/apache/openjpa/commits/21909df2ecea737a475d2d18ec33712570dc832a","html_url":"https://github.com/apache/openjpa/commit/21909df2ecea737a475d2d18ec33712570dc832a"}],"stats":{"total":2064,"additions":1713,"deletions":351},"files":[{"sha":"d2793752bd460e214a95828f21e544bea4eb6e16","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.ant;\n \n+import java.security.AccessController;\n+\n import org.apache.tools.ant.BuildException;\n import org.apache.tools.ant.types.EnumeratedAttribute;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -27,6 +29,7 @@\n import org.apache.openjpa.lib.ant.AbstractTask;\n import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.MultiLoaderClassResolver;\n \n@@ -183,7 +186,8 @@ protected void executeOn(String[] files)\n \n         MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n         resolver.addClassLoader(loader);\n-        resolver.addClassLoader(MappingTool.class.getClassLoader());\n+        resolver.addClassLoader((ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(MappingTool.class)));\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         conf.setClassResolver(resolver);\n "},{"sha":"ccd15ddb0602876c201c519159c541db883a04dc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","status":"modified","additions":18,"deletions":3,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,6 +20,9 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Properties;\n \n import org.apache.commons.lang.StringUtils;\n@@ -33,6 +36,7 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.tools.ant.types.EnumeratedAttribute;\n \n /**\n@@ -258,14 +262,25 @@ protected void executeOn(String[] files)\n         // load customizer properties\n         Properties customProps = new Properties();\n         File propsFile = Files.getFile(customizerProperties, loader);\n-        if (propsFile != null && propsFile.exists())\n-            customProps.load(new FileInputStream(propsFile));\n+        if (propsFile != null && ((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( propsFile ))).booleanValue() ) {\n+            FileInputStream fis = null;\n+            try {\n+                fis = (FileInputStream) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newFileInputStreamAction(propsFile));\n+            } catch( PrivilegedActionException pae ) {\n+                 throw (FileNotFoundException)pae.getException();\n+            }\n+            customProps.load(fis);\n+        }\n \n         // create and configure customizer\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         flags.customizer = (ReverseCustomizer) Configurations.\n             newInstance(customizerClass, conf, null,\n-                ReverseCustomizer.class.getClassLoader());\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(\n+                        ReverseCustomizer.class)));\n         if (flags.customizer != null)\n             flags.customizer.setConfiguration(customProps);\n "},{"sha":"24879512e3862fad09c23d5fd611f05d87f63f0d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,10 +19,13 @@\n package org.apache.openjpa.jdbc.conf;\n \n import java.lang.reflect.InvocationTargetException;\n+import java.security.AccessController;\n \n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n import serp.util.Strings;\n \n /**\n@@ -44,7 +47,9 @@ public Object newInstance(String clsName, Class type,\n         // since the MappingRepository takes a JDBConfiguration constructor,\n         // we need to manually perform the instantiation\n         try {\n-            Class cls = Strings.toClass(clsName, type.getClassLoader());\n+            Class cls = Strings.toClass(clsName,\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(type)));        \n             return cls.getConstructor(new Class[]{ JDBCConfiguration.class }).\n                 newInstance(new Object[]{ conf });\n         } catch (RuntimeException e) {"},{"sha":"5763869568452c92c324e8ad86675b6817d0aa74","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":48,"deletions":13,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.Types;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -70,6 +72,7 @@\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -446,12 +449,18 @@ else if (VerticalClassStrategy.ALIAS.equals(name))\n         try {\n             if (strat == null)\n                 strat = JavaTypes.classForName(name, cls,\n-                    ClassStrategy.class.getClassLoader());\n-            ClassStrategy strategy = (ClassStrategy) strat.newInstance();\n+                    (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            ClassStrategy.class)));\n+            ClassStrategy strategy = \n+                (ClassStrategy)AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(strat));\n             Configurations.configureInstance(strategy, getConfiguration(),\n                 props);\n             return strategy;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException)e).getException();\n             throw new MetaDataException(_loc.get(\"bad-cls-strategy\",\n                 cls, name), e);\n         }\n@@ -474,23 +483,29 @@ protected FieldStrategy namedStrategy(FieldMapping field,\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, field,\n-                FieldStrategy.class.getClassLoader());\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n             if (FieldStrategy.class.isAssignableFrom(c)) {\n-                FieldStrategy strat = (FieldStrategy) c.newInstance();\n+                FieldStrategy strat = (FieldStrategy)\n+                    AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(c));\n                 Configurations.configureInstance(strat, getConfiguration(),\n                     props);\n                 return strat;\n             }\n \n             // must be named handler\n             if (installHandlers) {\n-                ValueHandler vh = (ValueHandler) c.newInstance();\n+                ValueHandler vh = (ValueHandler)AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(c));\n                 Configurations.configureInstance(vh, getConfiguration(),\n                     props);\n                 field.setHandler(vh);\n             }\n             return new HandlerFieldStrategy();\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException )e).getException();\n             throw new MetaDataException(_loc.get(\"bad-field-strategy\",\n                 field, name), e);\n         }\n@@ -541,13 +556,18 @@ else if (SubclassJoinDiscriminatorStrategy.ALIAS.equals(name))\n             if (strat == null)\n                 strat = JavaTypes.classForName(name,\n                     discrim.getClassMapping(),\n-                    DiscriminatorStrategy.class.getClassLoader());\n+                    (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            DiscriminatorStrategy.class)));\n             DiscriminatorStrategy strategy = (DiscriminatorStrategy)\n-                strat.newInstance();\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(strat));\n             Configurations.configureInstance(strategy, getConfiguration(),\n                 props);\n             return strategy;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException )e).getException();\n             throw new MetaDataException(_loc.get(\"bad-discrim-strategy\",\n                 discrim.getClassMapping(), name), e);\n         }\n@@ -598,7 +618,9 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n             if (strat == null)\n                 strat = JavaTypes.classForName(name,\n                     version.getClassMapping(),\n-                    VersionStrategy.class.getClassLoader());\n+                    (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            VersionStrategy.class)));\n         } catch (Exception e) {\n             throw new MetaDataException(_loc.get(\"bad-version-strategy\",\n                 version.getClassMapping(), name), e);\n@@ -613,11 +635,15 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n     protected VersionStrategy instantiateVersionStrategy(Class strat,\n         Version version, String props) {\n         try {\n-            VersionStrategy strategy = (VersionStrategy) strat.newInstance();\n+            VersionStrategy strategy = (VersionStrategy)\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(strat));\n             Configurations.configureInstance(strategy, getConfiguration(),\n                 props);\n             return strategy;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException )e).getException();\n             throw new MetaDataException(_loc.get(\"bad-version-strategy\",\n                 version.getClassMapping(), strat + \"\"), e);\n         }\n@@ -914,11 +940,16 @@ private Object mappedStrategy(ValueMapping val, Class type,\n         String props = Configurations.getProperties(name);\n         name = Configurations.getClassName(name);\n         try {\n-            Object o = JavaTypes.classForName(name, val,\n-                FieldStrategy.class.getClassLoader()).newInstance();\n+            Class c = JavaTypes.classForName(name, val,\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n+            Object o = AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(c));\n             Configurations.configureInstance(o, getConfiguration(), props);\n             return o;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException )e).getException();\n             throw new MetaDataException(_loc.get(\"bad-mapped-strategy\",\n                 val, name), e);\n         }\n@@ -937,15 +968,19 @@ protected ValueHandler namedHandler(ValueMapping val) {\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, val,\n-                ValueHandler.class.getClassLoader());\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(ValueHandler.class)));\n             if (ValueHandler.class.isAssignableFrom(c)) {\n-                ValueHandler vh = (ValueHandler) c.newInstance();\n+                ValueHandler vh = (ValueHandler)AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(c));\n                 Configurations.configureInstance(vh, getConfiguration(),\n                     props);\n                 return vh;\n             }\n             return null; // named field strategy\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException )e).getException();\n             throw new MetaDataException(_loc.get(\"bad-value-handler\",\n                 val, name), e);\n         }"},{"sha":"b4ec8e7388b6fafd20a00b9395236135a7052c06","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,6 +22,8 @@\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.SQLException;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -51,6 +53,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n@@ -1075,9 +1078,12 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             Class[] types = Services.getImplementorClasses(ImportExport.class);\n             ImportExport[] instances = new ImportExport[types.length];\n             for (int i = 0; i < types.length; i++)\n-                instances[i] = (ImportExport) types[i].newInstance();\n+                instances[i] = (ImportExport)AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(types[i]));\n             return instances;\n         } catch (Throwable t) {\n+            if (t instanceof PrivilegedActionException)\n+                t = ((PrivilegedActionException)t).getException();\n             throw new InternalException(_loc.get(\"importexport-instantiate\"),t);\n         }\n     }"},{"sha":"ea170f311af5865c09e1823c4e8631117ba02c44","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,10 +21,13 @@\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.StringWriter;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.ArrayList;\n@@ -77,6 +80,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -1891,9 +1895,18 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n         File customFile = Files.getFile\n             (opts.removeProperty(\"customizerProperties\", \"cp\", null), null);\n         Properties customProps = new Properties();\n-        if (customFile != null && customFile.exists())\n-            customProps.load(new FileInputStream(customFile));\n-\n+        if (customFile != null && ((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( customFile ))).booleanValue()) {\n+            FileInputStream fis = null;\n+            try {\n+                fis = (FileInputStream) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newFileInputStreamAction(customFile));\n+            } catch( PrivilegedActionException pae ) {\n+                 throw (FileNotFoundException)pae.getException();\n+            }\n+            customProps.load(fis);\n+        }\n+        \n         // separate the properties for the customizer and code format\n         Options customOpts = new Options();\n         Options formatOpts = new Options();"},{"sha":"49090da7570827409f223eb55c846550b6587049","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.schema;\n \n+import java.security.AccessController;\n import java.sql.Connection;\n import java.sql.Driver;\n import java.sql.SQLException;\n@@ -39,6 +40,7 @@\n import org.apache.openjpa.lib.jdbc.JDBCListener;\n import org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.util.ImplHelper;\n@@ -110,7 +112,9 @@ public static DataSource newDataSource(JDBCConfiguration conf,\n             // see if their driver name is actually a data source\n             if (DataSource.class.isAssignableFrom(driverClass)) {\n                 return (DataSource) Configurations.newInstance(driver,\n-                    conf, props, DataSource.class.getClassLoader());\n+                    conf, props, (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            DataSource.class))); \n             }\n         }\n         catch (OpenJPAException ke) {"},{"sha":"f8cc7ae9db8dc27aa67b223325567d1c47b2d4de","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,11 +21,13 @@\n import java.io.File;\n import java.io.IOException;\n import java.net.URL;\n+import java.security.AccessController;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.util.GeneralException;\n \n /**\n@@ -77,7 +79,8 @@ public void endConfiguration() {\n     }\n \n     public SchemaGroup readSchema() {\n-        URL url = _loader.getResource(_fileName);\n+        URL url = (URL)AccessController.doPrivileged( \n+            J2DoPrivHelper.getResourceAction(_loader, _fileName)); \n         if (url == null)\n             return new SchemaGroup();\n "},{"sha":"d4938a94d7f44b4d630b3f03e91ff1f951099402","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.jdbc.schema;\n \n import java.io.PrintWriter;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.Connection;\n import java.sql.Driver;\n import java.sql.DriverManager;\n@@ -27,6 +29,7 @@\n import java.util.Properties;\n \n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.util.StoreException;\n \n /**\n@@ -166,12 +169,16 @@ private Driver getDriver() {\n         }\n \n         try {\n-            _driver = (Driver) Class.forName(_connectionDriverName,\n-                true, _classLoader).newInstance();\n+            Class c = Class.forName(_connectionDriverName,\n+                true, _classLoader);\n+            _driver = (Driver)AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(c));\n             return _driver;\n         } catch (Exception e) {\n             if (e instanceof RuntimeException)\n                 throw(RuntimeException) e;\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException)e).getException();\n             throw new StoreException(e);\n         }\n     }"},{"sha":"bf83fe76255e125743e31f1c11c0f214c4858f26","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.SQLException;\n@@ -27,6 +29,7 @@\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UserException;\n@@ -117,9 +120,15 @@ private static DBDictionary newDBDictionary(JDBCConfiguration conf,\n         String dclass, String props, Connection conn) {\n         DBDictionary dict = null;\n         try {\n-            dict = (DBDictionary) Class.forName(dclass, true,\n-                DBDictionary.class.getClassLoader()).newInstance();\n+            Class c = Class.forName(dclass, true,\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(\n+                        DBDictionary.class)));\n+            dict = (DBDictionary)AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(c));\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException)e).getException();\n             throw new UserException(e).setFatal(true);\n         }\n \n@@ -236,7 +245,7 @@ private static String dictionaryClassForString(String prod) {\n      */\n     public static String toString(DatabaseMetaData meta)\n         throws SQLException {\n-        String lineSep = System.getProperty(\"line.separator\");\n+        String lineSep = J2DoPrivHelper.getLineSeparator();\n         StringBuffer buf = new StringBuffer();\n         try {\n             buf.append(\"catalogSeparator: \")"},{"sha":"cd9556cc9be785e19946ce1db442fab35b7aa0d7","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,10 +19,12 @@\n package org.apache.openjpa.enhance;\n \n import java.lang.instrument.Instrumentation;\n+import java.security.AccessController;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.TemporaryClassLoader;\n import org.apache.openjpa.util.ClassResolver;\n@@ -54,8 +56,9 @@ public static void premain(String args, Instrumentation inst) {\n         conf.setConnectionDriverName(null);\n         conf.setConnectionFactoryName(null);\n         // set single class resolver\n-        final ClassLoader tmpLoader = new TemporaryClassLoader(Thread.\n-            currentThread().getContextClassLoader());\n+        final ClassLoader tmpLoader = new TemporaryClassLoader(\n+            (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction()));\n         conf.setClassResolver(new ClassResolver() {\n             public ClassLoader getClassLoader(Class context, ClassLoader env) {\n                 return tmpLoader;"},{"sha":"0c40146890b2514d4af79d8611ff937bc5b5a088","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.abstractstore;\n \n+import java.security.AccessController;\n import java.util.Map;\n import java.util.Properties;\n \n@@ -29,6 +30,7 @@\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -131,7 +133,9 @@ protected StoreManager newStoreManager() {\n     private static AbstractStoreManager createStoreManager(String cls,\n         String props) {\n         AbstractStoreManager store = (AbstractStoreManager) Configurations.\n-            newInstance(cls, AbstractStoreManager.class.getClassLoader());\n+            newInstance(cls, (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getClassLoaderAction(\n+                    AbstractStoreManager.class))); \n         Configurations.configureInstance(store, null, props,\n             PROP_ABSTRACT_STORE);\n         if (store == null)"},{"sha":"1edd8ad7525b61b2a30303c7c419969ba723e337","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,9 +20,12 @@\n \n import java.io.File;\n import java.io.InputStream;\n+import java.security.AccessController;\n import java.util.Properties;\n import java.util.StringTokenizer;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n /**\n  * This class contains version information for OpenJPA. It uses\n  * Ant's filter tokens to convert the template into a java\n@@ -110,7 +113,9 @@ public String toString() {\n \n         buf.append(\"java.class.path:\\n\");\n         StringTokenizer tok = new StringTokenizer\n-            (System.getProperty(\"java.class.path\"), File.pathSeparator);\n+            ((String)AccessController.doPrivileged( \n+                J2DoPrivHelper.getPropertyAction(\"java.class.path\")),\n+            File.pathSeparator);\n         while (tok.hasMoreTokens()) {\n             buf.append(\"\\t\").append(tok.nextToken());\n             buf.append(\"\\n\");\n@@ -132,6 +137,8 @@ public void appendOpenJPABanner(StringBuffer buf) {\n     }\n \n     private StringBuffer appendProperty(String prop, StringBuffer buf) {\n-        return buf.append(prop).append(\": \").append(System.getProperty(prop));\n+        return buf.append(prop).append(\": \")\n+            .append((String)AccessController.doPrivileged( \n+                J2DoPrivHelper.getPropertyAction(prop)));\n     }\n }"},{"sha":"95cd32d5c8e80e59ea3fd39942df1e7474d95989","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n \n import javax.naming.Context;\n import javax.naming.InitialContext;\n@@ -39,6 +40,7 @@\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.NoTransactionException;"},{"sha":"1193639e359b38da3cb5143b9a764c4b0d44cbfc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -24,6 +24,7 @@\n import java.io.PrintWriter;\n import java.io.Writer;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -44,6 +45,7 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.util.CodeFormat;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n@@ -438,8 +440,8 @@ public boolean run() {\n             // indent the entire code block one level to make it\n             // a propertly indented innder class\n             _code = code.getTab() + Strings.replace(_code,\n-                System.getProperty(\"line.separator\"),\n-                System.getProperty(\"line.separator\") + code.getTab());\n+                J2DoPrivHelper.getLineSeparator(),\n+                J2DoPrivHelper.getLineSeparator() + code.getTab());\n         }\n \n         return true;\n@@ -1417,9 +1419,11 @@ private static Class loadClass(Class context, String name,\n             name = Strings.getPackageName(context) + \".\" + name;\n \n         // first try with regular class loader\n-        ClassLoader loader = context.getClassLoader();\n+        ClassLoader loader = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(context)); \n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction()); \n         try {\n             return Class.forName(name, false, loader);\n         } catch (Throwable t) {"},{"sha":"b3f172b4d0ae6de6c10fad7c0174ea4cc74652a5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,8 +19,10 @@\n package org.apache.openjpa.enhance;\n \n import java.lang.reflect.Constructor;\n+import java.security.AccessController;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n import serp.bytecode.BCClass;\n@@ -95,7 +97,8 @@\n     // the project/classloader for the classes.\n     private final Project _project = new Project();\n     private final BCClassLoader _loader = new BCClassLoader(_project,\n-        DynamicStorage.class.getClassLoader());\n+        (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(DynamicStorage.class)));\n \n     /**\n      * Generate a generic {@link DynamicStorage} instance with the given"},{"sha":"08d045a4caad4ff44c719b41755adff8f68f7d35","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":101,"deletions":58,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -30,6 +30,8 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -50,6 +52,7 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.util.BytecodeWriter;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n@@ -130,11 +133,13 @@\n     static {\n         Class[] classes = Services.getImplementorClasses(\n             AuxiliaryEnhancer.class, \n-            AuxiliaryEnhancer.class.getClassLoader());\n+            (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getClassLoaderAction(AuxiliaryEnhancer.class)));\n         List auxEnhancers = new ArrayList(classes.length);\n         for (int i = 0; i < classes.length; i++) {\n             try {\n-                auxEnhancers.add(classes[i].newInstance());\n+                auxEnhancers.add(AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(classes[i])));\n \t\t    } catch (Throwable t) {\n                 // aux enhancer may rely on non-existant spec classes, etc\n \t\t    }\n@@ -479,16 +484,18 @@ private static String getSetterName(FieldMetaData fmd) {\n      * Package-protected and static for testing.\n      */\n     static BCField getReturnedField(BCMethod meth) {\n-        return findField(meth, new Code().xreturn().setType\n-            (meth.getReturnType()), false);\n+        return findField(meth, ((Code)AccessController.doPrivileged( \n+            J2DoPrivHelper.newCodeAction())).xreturn()\n+            .setType(meth.getReturnType()), false);\n     }\n \n     /**\n      * Return the field assigned in the given method, or null if none.\n      * Package-protected and static for testing.\n      */\n     static BCField getAssignedField(BCMethod meth) {\n-        return findField(meth, new Code().putfield(), true);\n+        return findField(meth, ((Code)AccessController.doPrivileged( \n+            J2DoPrivHelper.newCodeAction())).putfield(), true);\n     }\n \n     /**\n@@ -567,7 +574,7 @@ private void processViolations() {\n         if (_violations == null)\n             return;\n \n-        String sep = System.getProperty(\"line.separator\");\n+        String sep = J2DoPrivHelper.getLineSeparator();\n         StringBuffer buf = new StringBuffer();\n         for (Iterator itr = _violations.iterator(); itr.hasNext();) {\n             buf.append(itr.next());\n@@ -589,7 +596,8 @@ private void processViolations() {\n      */\n     private void replaceAndValidateFieldAccess() {\n         // create template putfield/getfield instructions to search for\n-        Code template = new Code();\n+        Code template = (Code)AccessController.doPrivileged( \n+            J2DoPrivHelper.newCodeAction());\n         Instruction put = template.putfield();\n         Instruction get = template.getfield();\n         Instruction stat = template.invokestatic();\n@@ -1193,51 +1201,73 @@ private void addMultipleFieldsMethodVersion(BCMethod single) {\n      */\n     private void addStockMethods()\n         throws NoSuchMethodException {\n-        // pcGetGenericContext\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"get\" + CONTEXTNAME, (Class[]) null));\n-\n-        // pcFetchObjectId\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"fetchObjectId\", (Class[]) null));\n-\n-        // pcIsDeleted\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isDeleted\", (Class[]) null));\n-\n-        // pcIsDirty\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isDirty\", (Class[]) null));\n-\n-        // pcIsNew\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isNew\", (Class[]) null));\n-\n-        // pcIsPersistent\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isPersistent\", (Class[]) null));\n-\n-        // pcIsTransactional\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"isTransactional\", (Class[]) null));\n-\n-        // pcSerializing\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod\n-            (\"serializing\", (Class[]) null));\n-\n-        // pcDirty\n-        translateFromStateManagerMethod(SMTYPE.getDeclaredMethod(\"dirty\",\n-            new Class[]{ String.class }));\n-\n-        // pcGetStateManager\n-        BCMethod meth = _pc.declareMethod(PRE + \"GetStateManager\",\n-            StateManager.class, null);\n-        Code code = meth.getCode(true);\n-        loadManagedInstance(code, false);\n-        code.getfield().setField(SM, StateManager.class);\n-        code.areturn();\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n+        try {\n+            // pcGetGenericContext\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"get\" + CONTEXTNAME, (Class[]) null)));\n+    \n+            // pcFetchObjectId\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"fetchObjectId\", (Class[]) null)));\n+    \n+            // pcIsDeleted\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isDeleted\", (Class[]) null)));\n+    \n+            // pcIsDirty\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isDirty\", (Class[]) null)));\n+    \n+            // pcIsNew\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isNew\", (Class[]) null)));\n+    \n+            // pcIsPersistent\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isPersistent\", (Class[]) null)));\n+    \n+            // pcIsTransactional\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"isTransactional\", (Class[]) null)));\n+    \n+            // pcSerializing\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"serializing\", (Class[]) null)));\n+    \n+            // pcDirty\n+            translateFromStateManagerMethod(\n+                (Method)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        SMTYPE, \"dirty\", new Class[]{ String.class })));\n+    \n+            // pcGetStateManager\n+            BCMethod meth = _pc.declareMethod(PRE + \"GetStateManager\",\n+                StateManager.class, null);\n+            Code code = meth.getCode(true);\n+            loadManagedInstance(code, false);\n+            code.getfield().setField(SM, StateManager.class);\n+            code.areturn();\n+            code.calculateMaxStack();\n+            code.calculateMaxLocals();\n+        } catch( PrivilegedActionException pae ) {\n+             throw (NoSuchMethodException)pae.getException();\n+        }\n     }\n \n     /**\n@@ -2160,7 +2190,15 @@ else if (type.equals(String.class))\n         // use reflection to return the right method\n         String name = prefix + typeName + \"Field\";\n         Class[] params = (Class[]) plist.toArray(new Class[plist.size()]);\n-        return owner.getDeclaredMethod(name, params);\n+        \n+        Method method = null;\n+        try {\n+            method = (Method) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodAction(owner, name, params));\n+        } catch( PrivilegedActionException pae ) {\n+             throw (NoSuchMethodException)pae.getException();\n+        }\n+        return method;\n     }\n \n     /**\n@@ -2459,7 +2497,8 @@ private void modifyWriteObjectMethod(BCMethod method, boolean full) {\n             code.vreturn();\n         }\n \n-        Instruction tmplate = new Code().vreturn();\n+        Instruction tmplate = ((Code)AccessController.doPrivileged( \n+            J2DoPrivHelper.newCodeAction())).vreturn();\n         JumpInstruction toret;\n         Instruction ret;\n         code.beforeFirst();\n@@ -2727,7 +2766,8 @@ private Code getOrCreateClassInitCode(boolean replaceLast) {\n         if (clinit != null) {\n             code = clinit.getCode(true);\n             if (replaceLast) {\n-                Code template = new Code();\n+                Code template = (Code)AccessController.doPrivileged( \n+                    J2DoPrivHelper.newCodeAction());\n                 code.searchForward(template.vreturn());\n                 code.previous();\n                 code.set(template.nop());\n@@ -2768,7 +2808,9 @@ private void addCloningCode() {\n         if (clone == null) {\n             // add clone support for base classes\n             // which also implement cloneable\n-            if (!_pc.isInstanceOf(Cloneable.class)\n+            if (!((Boolean)AccessController.doPrivileged( \n+                    J2DoPrivHelper.isInstanceOfAction( _pc, Cloneable.class )))\n+                    .booleanValue()\n                 || !superName.equals(Object.class.getName()))\n                 return;\n \n@@ -2796,8 +2838,9 @@ private void addCloningCode() {\n         }\n \n         // create template super.clone () instruction to match against\n-        Instruction template = new Code().invokespecial().setMethod\n-            (superName, \"clone\", Object.class.getName(), null);\n+        Instruction template = ((Code)AccessController.doPrivileged( \n+            J2DoPrivHelper.newCodeAction())).invokespecial()\n+            .setMethod(superName, \"clone\", Object.class.getName(), null);\n \n         // find calls to the template instruction; on match\n         // clone will be on stack"},{"sha":"bbd409a635c6a655dc05961467c49506f28c194e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,8 +23,10 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.GeneralException; \n import org.apache.openjpa.util.UserException; \n@@ -116,7 +118,8 @@ public static Method findSetter(Class cls, String prop, Class param,\n      */\n     private static Method getDeclaredMethod(Class cls, String name,\n         Class param) {\n-        Method[] methods = cls.getDeclaredMethods();\n+        Method[] methods = (Method[])AccessController.doPrivileged( \n+            J2DoPrivHelper.getDeclaredMethodsAction( cls ));\n         for (int i = 0 ; i < methods.length; i++) {\n     \t    if (name.equals(methods[i].getName())) {\n                 Class[] methodParams = methods[i].getParameterTypes();\n@@ -160,7 +163,8 @@ public static Field findField(Class cls, String name, boolean mustExist) {\n      * @since 0.9.8\n      */\n     private static Field getDeclaredField(Class cls, String name) {\n-        Field[] fields = cls.getDeclaredFields();\n+        Field[] fields = (Field[])AccessController.doPrivileged( \n+            J2DoPrivHelper.getDeclaredFieldsAction( cls ));\n         for (int i = 0 ; i < fields.length; i++) {\n     \t    if (name.equals(fields[i].getName()))\n \t\t        return fields[i];"},{"sha":"c44c224e77c0e5451a90afbecc3b2826c658f9c0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,7 +22,10 @@\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -60,8 +63,11 @@ public BeanLifecycleCallbacks(Class cls, Method method, boolean arg) {\n     \n     private Object newListener(Class cls) {\n         try {\n-            return cls.newInstance();\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(cls));\n         } catch (Throwable t) {\n+            if (t instanceof PrivilegedActionException)\n+                t = ((PrivilegedActionException )t).getException();            \n             throw new UserException(_loc.get(\"bean-constructor\",\n                 cls.getName()), t);\n         }"},{"sha":"b14fa0a15288859d813c8798e2ffb6a8518f8157","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,8 +23,10 @@\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n import java.util.Arrays;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -101,7 +103,8 @@ public String toString() {\n     protected static Method getMethod(Class cls, String method, Class[] args) {\n         Class currentClass = cls;\n         do {\n-            Method[] methods = currentClass.getDeclaredMethods();\n+            Method[] methods = (Method[])AccessController.doPrivileged( \n+                J2DoPrivHelper.getDeclaredMethodsAction( currentClass )); \n             for (int i = 0; i < methods.length; i++) {\n                 if (!method.equals(methods[i].getName()))\n                     continue;"},{"sha":"a1fbc6192b7749f105e2dd4c754c15d68372e89f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -41,6 +41,7 @@\n import org.apache.openjpa.event.RemoteCommitEventManager;\n import org.apache.openjpa.event.BrokerFactoryEvent;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n@@ -553,7 +554,7 @@ public void makeReadOnly() {\n                 log.info(getFactoryInitializationBanner());\n             if (log.isTraceEnabled()) {\n                 Map props = _conf.toProperties(true);\n-                String lineSep = System.getProperty(\"line.separator\");\n+                String lineSep = J2DoPrivHelper.getLineSeparator();\n                 StringBuffer buf = new StringBuffer();\n                 Map.Entry entry;\n                 for (Iterator itr = props.entrySet().iterator();"},{"sha":"c1584b9322956e182e8a73dea007110f31afb84d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,11 +20,13 @@\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n \n import org.apache.openjpa.conf.BrokerFactoryValue;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.OpenJPAException;\n@@ -113,7 +115,9 @@ private static BrokerFactory invokeFactory(ConfigurationProvider conf,\n         } catch (NoSuchMethodException nsme) {\n             // handle cases where there is a mismatch between loaders by falling\n             // back to the configuration's class loader for broker resolution\n-            cls = getFactoryClass(conf, conf.getClass().getClassLoader());\n+            cls = getFactoryClass(conf,\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(conf.getClass()))); \n             meth = cls.getMethod(methodName, FACTORY_ARGS); \n         }\n \n@@ -135,7 +139,8 @@ private static String getFactoryClassName(ConfigurationProvider conf,\n     private static Class getFactoryClass(ConfigurationProvider conf,\n         ClassLoader loader) {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction()); \n \n         Object cls = BrokerFactoryValue.get(conf);\n         if (cls instanceof Class)"},{"sha":"0a3ae33f4376fe4b4fbcbce3aec80a246e137856","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.util.AbstractCollection;\n import java.util.ArrayList;\n import java.util.BitSet;\n@@ -62,6 +63,7 @@\n import org.apache.openjpa.event.TransactionEventManager;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashMap;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n@@ -256,7 +258,8 @@ public void setAuthentication(String user, String pass) {\n     public void initialize(AbstractBrokerFactory factory,\n         DelegatingStoreManager sm, boolean managed, int connMode) {\n         _initializeWasInvoked = true;\n-        _loader = Thread.currentThread().getContextClassLoader();\n+        _loader = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getContextClassLoaderAction());\n         _jca = new JCAHelper();\n         _conf = factory.getConfiguration();\n         _compat = _conf.getCompatibilityInstance();\n@@ -4131,7 +4134,9 @@ public Object newInstance(Class cls) {\n         // 1.5 doesn't initialize classes without a true Class.forName\n         if (!PCRegistry.isRegistered(cls)) {\n             try {\n-                Class.forName(cls.getName(), true, cls.getClassLoader());\n+                Class.forName(cls.getName(), true, \n+                    (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(cls)));\n             } catch (Throwable t) {\n             }\n         }\n@@ -4270,8 +4275,12 @@ protected PersistenceCapable assertPersistenceCapable(Object obj) {\n             if (intfs[i].getName().equals(PersistenceCapable.class.getName())) {\n                 throw new UserException(_loc.get(\"pc-loader-different\",\n                     Exceptions.toString(obj),\n-                    PersistenceCapable.class.getClassLoader(),\n-                    intfs[i].getClassLoader())).setFailedObject(obj);\n+                    (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            PersistenceCapable.class)),\n+                    (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(intfs[i]))))\n+                    .setFailedObject(obj);\n             }\n         }\n "},{"sha":"985419e1b01393a78e297652aa4305020cf6ec17","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":23,"deletions":10,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.openjpa.kernel;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n@@ -31,10 +32,10 @@\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n import serp.util.Numbers;\n@@ -746,9 +747,12 @@ public static AggregateListener hintToAggregateListener(Object hint,\n         Exception cause = null;\n         if (hint instanceof String) {\n             try {\n-                return (AggregateListener) Class.forName((String) hint, true,\n-                    loader).newInstance();\n+                return (AggregateListener) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(\n+                        Class.forName((String) hint, true, loader)));\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException)e).getException();\n                 cause = e;\n             }\n         }\n@@ -781,10 +785,13 @@ public static AggregateListener hintToAggregateListener(Object hint,\n             AggregateListener[] aggs = new AggregateListener[clss.length];\n             try {\n                 for (int i = 0; i < clss.length; i++)\n-                    aggs[i] = (AggregateListener) Class.forName(clss[i], true,\n-                        loader).newInstance();\n+                    aggs[i] = (AggregateListener)AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(\n+                            Class.forName(clss[i], true, loader))); \n                 return aggs;\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException)e).getException();\n                 cause = e;\n             }\n         }\n@@ -806,9 +813,12 @@ public static FilterListener hintToFilterListener(Object hint,\n         Exception cause = null;\n         if (hint instanceof String) {\n             try {\n-                return (FilterListener) Class.forName((String) hint, true,\n-                    loader).newInstance();\n+                return (FilterListener)AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(\n+                        Class.forName((String) hint, true, loader))); \n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException)e).getException();\n                 cause = e;\n             }\n         }\n@@ -840,10 +850,13 @@ public static FilterListener hintToFilterListener(Object hint,\n             FilterListener[] filts = new FilterListener[clss.length];\n             try {\n                 for (int i = 0; i < clss.length; i++)\n-                    filts[i] = (FilterListener) Class.forName(clss[i], true,\n-                        loader).newInstance();\n+                    filts[i] = (FilterListener)AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(\n+                            Class.forName(clss[i], true, loader)));\n                 return filts;\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException)e).getException();\n                 cause = e;\n             }\n         }"},{"sha":"968e03097d382c74993c43d49ca8826d5ff3c601","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,12 +22,14 @@\n import java.io.ObjectOutput;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.BitSet;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n import org.apache.openjpa.enhance.Reflection;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -710,8 +712,12 @@ private Object getValue(int field) {\n     private void setValue(int field, Object val, boolean forceInst) {\n         if (_oid == null && forceInst) {\n             try {\n-                _oid = getMetaData().getDescribedType().newInstance();\n+                _oid = AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(\n+                        getMetaData().getDescribedType()));\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException)e).getException();\n                 throw new GeneralException(e);\n             }\n         } else if (_oid == null)"},{"sha":"7cff7e26f13d92e02f335574a0d3f2d337e2c9b5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.kernel;\n \n import java.io.Serializable;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -45,6 +46,7 @@\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n import org.apache.openjpa.lib.util.concurrent.ReentrantLock;\n@@ -1555,7 +1557,8 @@ public Class classForName(String name, String[] imports) {\n \n         // first check the aliases map in the MetaDataRepository\n         ClassLoader loader = (_class == null) ? _loader\n-            : _class.getClassLoader();\n+            : (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getClassLoaderAction(_class)); \n         ClassMetaData meta = _broker.getConfiguration().\n             getMetaDataRepositoryInstance().getMetaData(name, loader, false);\n         if (meta != null)"},{"sha":"d2192e90a01675fe36fa472d631d0f5d7a8ca214","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.HashMap;\n import java.util.Map;\n \n import org.apache.openjpa.kernel.exps.ExpressionParser;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Services;\n import org.apache.openjpa.util.InternalException;\n \n@@ -37,11 +40,16 @@\n     static {\n         // Load and cache all the query languages available in the system.\n         Class[] classes = Services.getImplementorClasses(\n-            ExpressionParser.class, ExpressionParser.class.getClassLoader());\n+            ExpressionParser.class,\n+            (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getClassLoaderAction(ExpressionParser.class)));\n         for (int i = 0; i < classes.length; i++) {\n             ExpressionParser ep;\n             try {\n-                ep = (ExpressionParser) classes[i].newInstance();\n+                ep = (ExpressionParser)AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(classes[i]));\n+            } catch( PrivilegedActionException pae ) {\n+                throw new InternalException(pae.getException());\n             } catch (InstantiationException e) {\n                 throw new InternalException(e);\n             } catch (IllegalAccessException e) {"},{"sha":"e6e2de913881ade65205e4ebc96a9ce0eef25536","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -24,6 +24,8 @@\n import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n@@ -34,6 +36,7 @@\n import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n@@ -231,7 +234,8 @@ private Object packUserType(Object[] result) {\n             if (_constructor != null)\n                 return _constructor.newInstance(result);\n \n-            Object user = _resultClass.newInstance();\n+            Object user = AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(_resultClass));\n             for (int i = 0; i < _aliases.length; i++) {\n                 if (_sets[i] instanceof Method) {\n                     Method meth = (Method) _sets[i];\n@@ -248,6 +252,9 @@ private Object packUserType(Object[] result) {\n             return user;\n         } catch (OpenJPAException ke) {\n             throw ke;\n+        } catch( PrivilegedActionException pae ) {\n+            throw new UserException(_loc.get(\"pack-instantiation-err\",\n+                _resultClass), pae.getException());\n         } catch (InstantiationException ie) {\n             throw new UserException(_loc.get(\"pack-instantiation-err\",\n                 _resultClass), ie);"},{"sha":"c96e1b30e6c197deb683a48ddec8ad83d08065d2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,6 +22,7 @@\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.math.BigDecimal;\n+import java.security.AccessController;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -43,6 +44,7 @@\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;"},{"sha":"b8271ecddeec2d1d594afc013d19b1c0ccfe669f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":36,"deletions":10,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,8 +20,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -47,6 +50,7 @@\n import org.apache.openjpa.lib.meta.ZipFileMetaDataIterator;\n import org.apache.openjpa.lib.meta.ZipStreamMetaDataIterator;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.UserException;\n@@ -93,7 +97,8 @@ public void setFiles(String files) {\n             File file;\n             for (int i = 0; i < strs.length; i++) {\n                 file = new File(strs[i]);\n-                if (file.exists())\n+                if (((Boolean)AccessController.doPrivileged( \n+                    J2DoPrivHelper.existsAction( file ))).booleanValue())\n                     this.files.add(file);\n             }\n         }\n@@ -372,7 +377,9 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n                 queries[i].setSource(defaultSourceFile(queries[i],\n                     clsNames), queries[i].getSourceScope(),\n                     queries[i].getSourceType());\n-            if (queries[i].getSourceFile().exists()) {\n+            if (((Boolean)AccessController.doPrivileged( \n+                J2DoPrivHelper.existsAction( queries[i].getSourceFile())))\n+                .booleanValue()) {\n                 if (files == null)\n                     files = new HashSet();\n                 files.add(queries[i].getSourceFile());\n@@ -383,7 +390,9 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n                 if (getSourceFile(seqs[i]) == null)\n                     setSourceFile(seqs[i], defaultSourceFile(seqs[i],\n                         clsNames));\n-                if (getSourceFile(seqs[i]).exists()) {\n+                if (((Boolean)AccessController.doPrivileged( \n+                    J2DoPrivHelper.existsAction(getSourceFile(seqs[i]))))\n+                    .booleanValue()) {\n                     if (files == null)\n                         files = new HashSet();\n                     files.add(getSourceFile(seqs[i]));\n@@ -409,7 +418,9 @@ private Set assignDefaultQueryFiles(QueryMetaData[] queries,\n             if (queries[i].getSourceFile() == null)\n                 queries[i].setSource(defaultSourceFile(queries[i], clsNames),\n                     queries[i].getSourceScope(), queries[i].getSourceType());\n-            if (queries[i].getSourceFile().exists()) {\n+            if (((Boolean)AccessController.doPrivileged( \n+                J2DoPrivHelper.existsAction( queries[i].getSourceFile() )))\n+                .booleanValue()) {\n                 if (files == null)\n                     files = new HashSet();\n                 files.add(queries[i].getSourceFile());\n@@ -665,9 +676,16 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                 } else if (url.getPath().endsWith(\".jar\")) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-jar-at-url\", url));\n-                    scan(new ZipStreamMetaDataIterator(\n-                        new ZipInputStream(url.openStream()),\n-                        newMetaDataFilter()), cparser, names, true, url);\n+                    try {\n+                        InputStream is = (InputStream)\n+                            AccessController.doPrivileged(\n+                                J2DoPrivHelper.openStreamAction(url));\n+                        scan(new ZipStreamMetaDataIterator(\n+                            new ZipInputStream(is),\n+                            newMetaDataFilter()), cparser, names, true, url);\n+                    } catch( PrivilegedActionException pae ) {\n+                        throw (IOException)pae.getException();\n+                    }\n                 } else {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-url\", url));\n@@ -685,14 +703,22 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n             for (Iterator itr = rsrcs.iterator(); itr.hasNext();) {\n                 rsrc = (String) itr.next();\n                 if (rsrc.endsWith(\".jar\")) {\n-                    url = loader.getResource(rsrc);\n+                    url = (URL)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getResourceAction(loader, rsrc)); \n                     if (url != null) {\n                         if (log.isTraceEnabled())\n                             log.trace(_loc.get(\"scanning-jar-stream-url\", url));\n-                        scan(new ZipStreamMetaDataIterator\n-                            (new ZipInputStream(url.openStream()),\n+                        try {\n+                            InputStream is = (InputStream)\n+                                AccessController.doPrivileged(\n+                                    J2DoPrivHelper.openStreamAction(url));\n+                            scan(new ZipStreamMetaDataIterator\n+                                (new ZipInputStream(is),\n                                 newMetaDataFilter()), cparser, names, true,\n                                 url);\n+                        } catch( PrivilegedActionException pae ) {\n+                            throw (IOException)pae.getException();\n+                        }\n                     }\n                 } else {\n                     if (log.isTraceEnabled())"},{"sha":"1a80302592ba6a8921cf0151c38e8eb61af14ce5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,11 +22,13 @@\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.OpenJPAException;\n@@ -185,7 +187,9 @@ private boolean populateFromPCRegistry(ClassMetaData meta) {\n             FieldMetaData fmd;\n             for (int i = 0; i < fieldNames.length; i ++) {\n                 if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n-                    member = cls.getDeclaredField(fieldNames[i]);\n+                    member = (Field)AccessController.doPrivileged(\n+                        J2DoPrivHelper.getDeclaredFieldAction(\n+                            cls,fieldNames[i])); \n                 else\n                     member = Reflection.findGetter(meta.getDescribedType(),\n                         fieldNames[i], true);\n@@ -200,6 +204,8 @@ private boolean populateFromPCRegistry(ClassMetaData meta) {\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException)e).getException();\n             throw new UserException(e);\n         }\n     }\n@@ -211,9 +217,13 @@ private void populateFromReflection(ClassMetaData meta) {\n         Member[] members;\n         boolean iface = meta.getDescribedType().isInterface();\n         if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD && !iface)\n-            members = meta.getDescribedType().getDeclaredFields();\n+            members = (Field[])AccessController.doPrivileged( \n+                J2DoPrivHelper.getDeclaredFieldsAction(\n+                    meta.getDescribedType())); \n         else\n-            members = meta.getDescribedType().getDeclaredMethods();\n+            members = (Method[])AccessController.doPrivileged( \n+                J2DoPrivHelper.getDeclaredMethodsAction(\n+                    meta.getDescribedType())); \n \n         int mods;\n         String name;\n@@ -313,12 +323,16 @@ public Member getBackingMember(FieldMetaData fmd) {\n             //### where the superclass uses a different access type\n             if (fmd.getDefiningMetaData().getAccessType() ==\n                 ClassMetaData.ACCESS_FIELD)\n-                return fmd.getDeclaringType().getDeclaredField(fmd.getName());\n+                return (Field) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredFieldAction(\n+                        fmd.getDeclaringType(), fmd.getName())); \n             return Reflection.findGetter(fmd.getDeclaringType(), fmd.getName(),\n                 true);\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException)e).getException();\n             throw new InternalException(e);\n         }\n     }"},{"sha":"71182ab41544a53210d2e77ad7e1b5334b0080ad","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,6 +22,7 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -42,6 +43,7 @@\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.SourceTracker;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.util.ByteId;\n@@ -843,7 +845,8 @@ public boolean isAccessibleField(String field) {\n         if (getDeclaredField(field) != null)\n             return true;\n         if (_staticFields == null) {\n-            Field[] fields = _type.getDeclaredFields();\n+            Field[] fields = (Field[])AccessController.doPrivileged( \n+                J2DoPrivHelper.getDeclaredFieldsAction( _type )); \n             Set names = new HashSet((int) (fields.length * 1.33 + 1));\n             for (int i = 0; i < fields.length; i++)\n                 if (Modifier.isStatic(fields[i].getModifiers()))"},{"sha":"affa5cb4ea385a8aec49d4dcc3407df0490e909a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -28,6 +28,8 @@\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n@@ -50,6 +52,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n@@ -1213,7 +1216,8 @@ public Object getFieldValue(Object val, StoreContext ctx) {\n \n         try {\n             if (val == null && getNullValue() == NULL_DEFAULT)\n-                return getDeclaredType().newInstance();\n+                return AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(getDeclaredType())); \n \n             // invoke either the constructor for the field type,\n             // or the static type.toField(val[, ctx]) method\n@@ -1246,6 +1250,8 @@ public Object getFieldValue(Object val, StoreContext ctx) {\n \n             if (e instanceof OpenJPAException)\n                 throw (OpenJPAException) e;\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException)e).getException();\n             throw new MetaDataException(_loc.get(\"factory-err\", this,\n                 Exceptions.toString(val), e.toString())).setCause(e);\n         }\n@@ -1956,22 +1962,23 @@ public void readExternal(ObjectInput in)\n             String memberName = (String) in.readObject();\n             try {\n                 if (isField)\n-                    _member = cls.getDeclaredField(memberName);\n+                    _member = (Field) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getDeclaredFieldAction(\n+                            cls,memberName)); \n                 else {\n                     Class[] parameterTypes = (Class[]) in.readObject();\n-                    _member = cls.getDeclaredMethod(memberName, parameterTypes);\n+                    _member = (Method) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getDeclaredMethodAction(\n+                            cls, memberName, parameterTypes));\n                 }\n             } catch (SecurityException e) {\n                 IOException ioe = new IOException(e.getMessage());\n                 ioe.initCause(e);\n                 throw ioe;\n-            } catch (NoSuchFieldException e) {\n-                IOException ioe = new IOException(e.getMessage());\n-                ioe.initCause(e);\n-                throw ioe;\n-            } catch (NoSuchMethodException e) {\n-                IOException ioe = new IOException(e.getMessage());\n-                ioe.initCause(e);\n+            } catch( PrivilegedActionException pae ) {\n+                IOException ioe = new IOException(\n+                    pae.getException().getMessage());\n+                ioe.initCause(pae);\n                 throw ioe;\n             }\n         }"},{"sha":"dfb4a03899e1718fef1b294928e8a8b5d810e22e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,6 +20,8 @@\n \n import java.lang.reflect.Method;\n import java.io.ByteArrayInputStream;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Set;\n import java.util.HashSet;\n import java.util.Map;\n@@ -28,6 +30,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PCEnhancer;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import serp.bytecode.BCClass;\n import serp.bytecode.BCClassLoader;\n@@ -74,16 +77,19 @@ public synchronized Class createImpl(ClassMetaData meta) {\n         if (impl != null)\n             return impl;\n \n-        ClassLoader parentLoader = iface.getClassLoader();\n+        ClassLoader parentLoader = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(iface)); \n         BCClassLoader loader = new BCClassLoader(_project, parentLoader);\n         BCClassLoader enhLoader = new BCClassLoader(_enhProject, parentLoader);\n         BCClass bc = _project.loadClass(getClassName(meta));\n         bc.declareInterface(iface);\n         ClassMetaData sup = meta.getPCSuperclassMetaData();\n         if (sup != null) {\n             bc.setSuperclass(sup.getInterfaceImpl());\n-            enhLoader = new BCClassLoader(_enhProject, \n-            \t\tsup.getInterfaceImpl().getClassLoader());\n+            enhLoader = new BCClassLoader(_enhProject,\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(\n+                        sup.getInterfaceImpl())));\n         }\n \n         FieldMetaData[] fields = meta.getDeclaredFields();\n@@ -164,7 +170,8 @@ private void addField (BCClass bc, Class iface, FieldMetaData fmd,\n      */\n     private void invalidateNonBeanMethods(BCClass bc, Class iface, \n         Set methods) {\n-        Method[] meths = iface.getDeclaredMethods();\n+        Method[] meths = (Method[])AccessController.doPrivileged( \n+            J2DoPrivHelper.getDeclaredMethodsAction( iface )); \n         BCMethod meth;\n         Code code;\n         Class type = _repos.getMetaDataFactory().getDefaults().\n@@ -198,9 +205,10 @@ protected final String getClassName(ClassMetaData meta) {\n      */\n     private static Method getMethodSafe(Class iface, String name, Class arg) {\n         try {\n-            return iface.getDeclaredMethod(name, arg == null ? null :\n-                new Class[]{arg});\n-        } catch (NoSuchMethodException e) {\n+            return (Method) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodAction(\n+                    iface, name, arg == null ? null : new Class[]{arg}));\n+        } catch( PrivilegedActionException pae ) {\n             throw new InternalException (_loc.get (\"interface-mismatch\", name));\n         }\n     }\n@@ -209,10 +217,11 @@ private static boolean isGetter(Class iface, FieldMetaData fmd) {\n         if (fmd.getType() != boolean.class && fmd.getType() != Boolean.class)\n             return true;\n         try {\n-            Method meth = iface.getDeclaredMethod(\"is\" + StringUtils.capitalize\n-                (fmd.getName()), (Class[]) null);\n+            Method meth = (Method) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodAction( iface, \"is\" +\n+                    StringUtils.capitalize(fmd.getName()), (Class[]) null));\n             return meth == null;\n-        } catch (NoSuchMethodException e) {}\n+        } catch (PrivilegedActionException pae) {}\n         return true;\n     }\n }"},{"sha":"bdb3f31d43cd671037f45a11ed707efce520389c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.meta;\n \n import java.io.Serializable;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -42,6 +43,7 @@\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Closeable;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n@@ -398,7 +400,9 @@ private ClassMetaData getMetaDataInternal(Class cls,\n             // class never registers itself with the system\n             if ((_validate & VALIDATE_RUNTIME) != 0) {\n                 try {\n-                    Class.forName(cls.getName(), true, cls.getClassLoader());\n+                    Class.forName(cls.getName(), true,\n+                        (ClassLoader)AccessController.doPrivileged( \n+                            J2DoPrivHelper.getClassLoaderAction(cls)));\n                 } catch (Throwable t) {\n                 }\n             }\n@@ -976,7 +980,8 @@ private void resolveIdentityClass(Object oid) {\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"resolve-identity\", oidClass));\n \n-        ClassLoader cl = oidClass.getClassLoader();\n+        ClassLoader cl = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(oidClass)); \n         String className;\n         while (oidClass != null && oidClass != Object.class) {\n             className = oidClass.getName();"},{"sha":"f4ce471124eb82da1df308c7c9dd26c0ecc183ec","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,6 +20,8 @@\n \n import java.io.File;\n import java.io.Serializable;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.SeqValue;\n@@ -28,6 +30,7 @@\n import org.apache.openjpa.lib.conf.PluginValue;\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.Closeable;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.util.MetaDataException;\n@@ -252,7 +255,8 @@ protected Seq instantiate(ClassLoader envLoader) {\n             String clsName = plugin.getClassName();\n \n             Class cls = Class.forName(clsName, true,\n-                Seq.class.getClassLoader());\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(Seq.class)));\n             StringBuffer props = new StringBuffer();\n             if (plugin.getProperties() != null)\n                 props.append(plugin.getProperties());\n@@ -262,7 +266,8 @@ protected Seq instantiate(ClassLoader envLoader) {\n             // interface or a factory class\n             Seq seq;\n             if (Seq.class.isAssignableFrom(cls)) {\n-                seq = (Seq) cls.newInstance();\n+                seq = (Seq) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(cls));\n                 Configurations.configureInstance(seq,\n                     _repos.getConfiguration(), props.toString());\n                 seq.setType(_type);\n@@ -275,6 +280,8 @@ protected Seq instantiate(ClassLoader envLoader) {\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n+            if (e instanceof PrivilegedActionException)\n+                e = ((PrivilegedActionException)e).getException();\n             throw new MetaDataException(_loc.get(\"cant-init-seq\", _name)).\n                 setCause(e);\n         }"},{"sha":"0f9dacec3412853bfc25f15554db0fd99212a2bf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,16 +20,18 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Date;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.FieldManager;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.kernel.ObjectIdStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -188,8 +190,11 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n             throw new UserException(_loc.get(\"objectid-abstract\", meta));\n         Object copy = null;\n         try {\n-            copy = oidType.newInstance();\n+            copy = AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(oidType));\n         } catch (Throwable t) {\n+            if (t instanceof PrivilegedActionException)\n+                t = ((PrivilegedActionException)t).getException();\n             throw new GeneralException(t);\n         }\n \n@@ -319,8 +324,11 @@ private static Object copy(Object oid, ClassMetaData meta,\n         Class oidType = oid.getClass();\n         Object copy = null;\n         try {\n-            copy = oidType.newInstance();\n+            copy = AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(oidType));\n         } catch (Throwable t) {\n+            if (t instanceof PrivilegedActionException)\n+                t = ((PrivilegedActionException)t).getException();\n             throw new GeneralException(t);\n         }\n "},{"sha":"91b8b85678c6fc2eb5225e5e6b80356455e47bc6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.util;\n \n+import java.security.AccessController;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n \n /**\n@@ -37,14 +40,16 @@ public ClassLoader getClassLoader(Class contextClass,\n         // class (the bootstrap loader is the parent of the system loader)\n         ClassLoader contextLoader = null;\n         if (contextClass != null) {\n-            contextLoader = contextClass.getClassLoader();\n+            contextLoader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getClassLoaderAction(contextClass)); \n             if (contextLoader == null)\n-                contextLoader = ClassLoader.getSystemClassLoader();\n+                contextLoader = (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getSystemClassLoaderAction()); \n         }\n \n         // if there is only one unique loader, just return it\n-        ClassLoader threadLoader = Thread.currentThread().\n-            getContextClassLoader();\n+        ClassLoader threadLoader = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getContextClassLoaderAction());\n         if ((contextLoader == null || contextLoader == threadLoader)\n             && (envLoader == null || envLoader == threadLoader))\n             return threadLoader;"},{"sha":"243976e691334f8db2cfd5ee71a9e90977eb2cf9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.openjpa.conf.OpenJPAVersion;\n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n \n /**\n@@ -41,7 +42,7 @@\n \n     public static final Throwable[] EMPTY_THROWABLES = new Throwable[0];\n \n-    static final String SEP = System.getProperty(\"line.separator\");\n+    static final String SEP = J2DoPrivHelper.getLineSeparator();\n \n     private static final OutputStream DEV_NULL = new OutputStream() {\n         public void write(int b) {"},{"sha":"8446604a77277235efcdbb44424b7118e8a86210","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.util;\n \n+import java.security.AccessController;\n+\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import serp.util.Numbers;\n \n@@ -75,7 +78,8 @@ public Id(String str, OpenJPAConfiguration conf, ClassLoader brokerLoader) {\n      */\n     public Id(String str, ClassLoader loader) {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n \n         if (str == null)\n             _id = 0L;"},{"sha":"34132d7dfb48fa74b86a36699d6bd4dd1e062579","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,14 +18,10 @@\n  */\n package org.apache.openjpa.util;\n \n-import java.io.ObjectStreamException;\n-import java.util.AbstractSet;\n-import java.util.Iterator;\n-import java.util.ListIterator;\n-import java.util.Map;\n-import java.util.Set;\n+import java.security.AccessController;\n \n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n@@ -52,9 +48,11 @@ public static boolean isOwner(Proxy proxy, OpenJPAStateManager sm,\n     public static void assertAllowedType(Object value, Class allowed) {\n         if (value != null && allowed != null && !allowed.isInstance(value)) {\n             throw new UserException(_loc.get(\"bad-elem-type\", new Object[]{\n-                allowed.getClassLoader(),\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(allowed)),\n                 allowed,\n-                value.getClass().getClassLoader(),\n+                (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(value.getClass())),\n                 value.getClass()\n             }));\n         }"},{"sha":"68d7eed12d9f7cfd619eb39bdf37c4e66fc02932","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":26,"deletions":7,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -25,6 +25,8 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -48,6 +50,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n@@ -84,8 +87,10 @@\n         _stdCollections.put(List.class, ArrayList.class);\n         if (JavaVersions.VERSION >= 5) {\n             try {\n-                Class queue = Class.forName(\"java.util.Queue\", false, \n-                    Collection.class.getClassLoader());\n+                Class queue = Class.forName(\"java.util.Queue\", false,\n+                    (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(\n+                            Collection.class)));\n                 _stdCollections.put(queue, LinkedList.class);\n             } catch (Throwable t) {\n                 // not really java 5 after all?\n@@ -492,10 +497,18 @@ private Proxy instantiateProxy(Class cls, Constructor cons, Object[] args) {\n             if (cons != null)\n                 return (Proxy) cls.getConstructor(cons.getParameterTypes()).\n                     newInstance(args);\n-            return (Proxy) cls.newInstance();\n+            return (Proxy) AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(cls));\n         } catch (InstantiationException ie) {\n             throw new UnsupportedException(_loc.get(\"cant-newinstance\", \n                 cls.getSuperclass().getName()));\n+        } catch( PrivilegedActionException pae ) {\n+            Exception e = pae.getException();\n+            if( e instanceof InstantiationException)\n+                throw new UnsupportedException(_loc.get(\"cant-newinstance\", \n+                    cls.getSuperclass().getName()));\n+            else\n+                throw new GeneralException(cls.getName()).setCause(e);\n         } catch (Throwable t) {\n             throw new GeneralException(cls.getName()).setCause(t);\n         }\n@@ -506,16 +519,21 @@ private Proxy instantiateProxy(Class cls, Constructor cons, Object[] args) {\n      * classes.\n      */\n     private static ClassLoader getMostDerivedLoader(Class c1, Class c2) {\n-        ClassLoader l1 = c1.getClassLoader();\n-        ClassLoader l2 = c2.getClassLoader();\n+        ClassLoader l1 = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(c1)); \n+        ClassLoader l2 = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(c2)); \n         if (l1 == l2)\n             return l1;\n         if (l1 == null)\n             return l2;\n         if (l2 == null)\n             return l1;\n         \n-        for (ClassLoader p = l1.getParent(); p != null; p = p.getParent())\n+        for (ClassLoader p = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getParentAction( l1 )); p != null;\n+                p = (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getParentAction( p )))\n             if (p == l2)\n                 return l1;\n         return l2;\n@@ -1570,7 +1588,8 @@ private static Constructor findComparatorConstructor(Class cls) {\n     public static void main(String[] args) \n         throws ClassNotFoundException, IOException {\n         File dir = Files.getClassFile(ProxyManagerImpl.class);\n-        dir = (dir == null) ? new File(System.getProperty(\"user.dir\"))\n+        dir = (dir == null) ? new File((String)AccessController.doPrivileged( \n+            J2DoPrivHelper.getPropertyAction(\"user.dir\")))\n             : dir.getParentFile();\n \n         Options opts = new Options();"},{"sha":"c688a3eee68fdc136aedeea1b5aab91913b626f9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -27,10 +27,12 @@\n import java.io.ObjectStreamClass;\n import java.io.OutputStream;\n import java.io.Serializable;\n+import java.security.AccessController;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n \n@@ -129,8 +131,8 @@ protected Class resolveClass(ObjectStreamClass desc)\n         }\n \n         protected void addContextClassLoaders(MultiClassLoader loader) {\n-            loader.addClassLoader(Thread.currentThread().\n-                getContextClassLoader());\n+            loader.addClassLoader((ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction()));\n         }\n     }\n "},{"sha":"dca27e5b7b26fc4f0dbae319f91722d9abe48872","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -14,11 +14,12 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.openjpa.lib.ant;\n \n import java.io.File;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n@@ -33,17 +34,18 @@\n import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Ant tasks all have a nested <code>&lt;config&rt;</code> tag, which uses\n  * the configuration as a bean-like task. E.g., you can do:\n- * \n- * <code> \n+ *\n+ * <code>\n  * &lt;mytask&rt;<br />\n- * &nbsp;&nbsp;&lt;config connectionUserName=\"foo\"/&rt;<br /> \n+ * &nbsp;&nbsp;&lt;config connectionUserName=\"foo\"/&rt;<br />\n  * &lt;/mytask&rt;\n- * </code> \n+ * </code>\n  *\n  * The default configuration for the system will be used if the\n  * <code>&lt;config&rt;</code> subtask is excluded.\n@@ -159,7 +161,8 @@ public void execute() throws BuildException {\n             _conf = newConfiguration();\n         if (_conf.getPropertiesResource() == null) {\n             ConfigurationProvider cp = ProductDerivations.loadDefaults\n-                (_conf.getClass().getClassLoader());\n+                ((ClassLoader)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getClassLoaderAction(_conf.getClass())));\n             if (cp != null)\n                 cp.setInto(_conf);\n         }\n@@ -188,7 +191,8 @@ public void execute() throws BuildException {\n                 File f = new File(dsFiles[j]);\n                 if (!f.isFile())\n                     f = new File(ds.getBasedir(), dsFiles[j]);\n-                files.add(f.getAbsolutePath());\n+                files.add((String)AccessController.doPrivileged(\n+                    J2DoPrivHelper.getAbsolutePathAction( f )));\n             }\n         }\n         return (String[]) files.toArray(new String[files.size()]);"},{"sha":"eb7e85165e428cc0accc52ae6fc42f6d7dcc38f3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -39,6 +39,7 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -57,6 +58,7 @@\n import org.apache.openjpa.lib.log.LogFactoryImpl;\n import org.apache.openjpa.lib.log.NoneLogFactory;\n import org.apache.openjpa.lib.util.Closeable;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n import org.apache.openjpa.lib.util.ParseException;\n@@ -99,7 +101,7 @@\n public class ConfigurationImpl\n     implements Configuration, Externalizable, ValueListener {\n \n-    private static final String SEP = System.getProperty(\"line.separator\");\n+    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n \n     private static final Localizer _loc = Localizer.forPackage\n         (ConfigurationImpl.class);\n@@ -163,15 +165,18 @@ public ConfigurationImpl(boolean loadGlobals) {\n      */\n     public boolean loadGlobals() {\n         MultiClassLoader loader = new MultiClassLoader();\n-        loader.addClassLoader(Thread.currentThread().getContextClassLoader());\n+        loader.addClassLoader((ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getContextClassLoaderAction()));\n         loader.addClassLoader(getClass().getClassLoader());\n         ConfigurationProvider provider = ProductDerivations.loadGlobals(loader);\n         if (provider != null)\n             provider.setInto(this);\n \n         // let system properties override other globals\n         try {\n-            fromProperties(new HashMap(System.getProperties()));\n+            fromProperties(new HashMap(\n+                (Properties)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getPropertiesAction())));\n         } catch (SecurityException se) {\n             // security manager might disallow\n         }"},{"sha":"3ef01c8de6f03dc3988737727a92ec1180979592","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -34,6 +36,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.exception.NestableRuntimeException;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.ParseException;\n@@ -206,8 +209,12 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n         }\n \n         try {\n-            return cls.newInstance();\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(cls));\n         } catch (Exception e) {\n+            if( e instanceof PrivilegedActionException) {\n+                e = ((PrivilegedActionException)e).getException();   \n+            }\n             RuntimeException re = new NestableRuntimeException(_loc.get\n                 (\"obj-create\", cls).getMessage(), e);\n             if (fatal)\n@@ -229,25 +236,33 @@ private static ClassLoader findDerivedLoader(Configuration conf,\n         // we always prefer the thread loader, because it's the only thing we\n         // can access that isn't bound to the OpenJPA classloader, unless\n         // the conf object is of a custom class\n-        ClassLoader ctxLoader = Thread.currentThread().getContextClassLoader();\n+        ClassLoader ctxLoader = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getContextClassLoaderAction());\n         if (loader == null) {\n             if (ctxLoader != null)\n                 return ctxLoader;\n             if (conf != null)\n-                return conf.getClass().getClassLoader();\n+                return (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n             return Configurations.class.getClassLoader();\n         }\n \n         for (ClassLoader parent = ctxLoader; parent != null; \n-            parent = parent.getParent()) {\n+            parent = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getParentAction( parent ))) {\n             if (parent == loader)\n                 return ctxLoader;\n         }\n         if (conf != null) {\n-            for (ClassLoader parent = conf.getClass().getClassLoader(); \n-                parent != null; parent = parent.getParent()) {\n+            for (ClassLoader parent = (ClassLoader)\n+                AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n+                parent != null; \n+                parent = (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getParentAction( parent ))) {\n                 if (parent == loader)\n-                    return conf.getClass().getClassLoader();\n+                    return (ClassLoader)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n             }\n         }\n         return loader;"},{"sha":"3dc4c67b39eddb00110983a5cc82730fca8b7973","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,8 +19,10 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.security.AccessController;\n \n import org.apache.commons.lang.ObjectUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n \n /**\n  * A {@link File} {@link Value}.\n@@ -57,7 +59,8 @@ public File get() {\n     }\n \n     protected String getInternalString() {\n-        return (value == null) ? null : value.getAbsolutePath();\n+        return (value == null) ? null : (String)AccessController.doPrivileged( \n+            J2DoPrivHelper.getAbsolutePathAction( value ));\n     }\n \n     protected void setInternalString(String val) {"},{"sha":"95cb4683717943e431814a5bc04236b37f326bdd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.security.AccessController;\n+\n import org.apache.commons.lang.ObjectUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n@@ -94,9 +97,11 @@ public Object newInstance(String clsName, Class type, Configuration conf,\n             boolean fatal) {\n         ClassLoader cl = (ClassLoader) _classloaderCache.get(type);\n         if (cl == null) {\n-            cl = type.getClassLoader();\n+            cl = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getClassLoaderAction(type));\n             if (cl == null) {  // System classloader is returned as null\n-                cl = ClassLoader.getSystemClassLoader();\n+                cl = (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getSystemClassLoaderAction()); \n             }\n             _classloaderCache.put(type, cl);\n         }"},{"sha":"05fc549b7578d79bf7e1e599866adc751f2a3834","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":22,"deletions":9,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -27,6 +29,7 @@\n import java.util.MissingResourceException;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Services;\n \n@@ -46,17 +49,22 @@\n     private static final Throwable[] _derivationErrors;\n     private static String[] _prefixes;\n     static {\n-        ClassLoader l = ProductDerivation.class.getClassLoader();\n+        ClassLoader l = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(ProductDerivation.class)); \n         _derivationNames = Services.getImplementors(ProductDerivation.class, l);\n         _derivationErrors = new Throwable[_derivationNames.length];\n         List derivations = new ArrayList(_derivationNames.length);\n         for (int i = 0; i < _derivationNames.length; i++) {\n             try {\n-                ProductDerivation d = (ProductDerivation) Class.\n-                    forName(_derivationNames[i], true, l).newInstance();\n+                ProductDerivation d = (ProductDerivation)\n+                    AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(\n+                            Class.forName(_derivationNames[i], true, l)));\n                 d.validate();\n                 derivations.add(d);\n             } catch (Throwable t) {\n+                if (t instanceof PrivilegedActionException)\n+                    t = ((PrivilegedActionException)t).getException();\n                 _derivationErrors[i] = t;\n             }\n         }\n@@ -227,7 +235,8 @@ public static ConfigurationProvider load(String resource, String anchor,\n         if (StringUtils.isEmpty(resource))\n             return null;\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n         // most specific to least\n@@ -257,7 +266,8 @@ public static ConfigurationProvider load(File file, String anchor,\n         if (file == null)\n             return null;\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n         // most specific to least\n@@ -271,9 +281,11 @@ public static ConfigurationProvider load(File file, String anchor,\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        reportErrors(errs, file.getAbsolutePath());\n-        throw new MissingResourceException(file.getAbsolutePath(), \n-            ProductDerivations.class.getName(), file.getAbsolutePath());\n+        String aPath = (String)AccessController.doPrivileged( \n+            J2DoPrivHelper.getAbsolutePathAction( file ));\n+        reportErrors(errs, aPath);\n+        throw new MissingResourceException(aPath, \n+            ProductDerivations.class.getName(), aPath);\n     }\n    \n     /**\n@@ -296,7 +308,8 @@ public static ConfigurationProvider loadGlobals(ClassLoader loader) {\n     private static ConfigurationProvider load(ClassLoader loader, \n        boolean globals) {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n         \n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;"},{"sha":"9b37a3ea5d549ecf246ca17de9f160757ba47088","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -45,6 +45,7 @@\n import java.util.List;\n \n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n \n /**\n  * A {@link ConnectionDecorator} that creates logging connections and\n@@ -55,7 +56,7 @@\n  */\n public class LoggingConnectionDecorator implements ConnectionDecorator {\n \n-    private static final String SEP = System.getProperty(\"line.separator\");\n+    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n \n     private static final int WARN_IGNORE = 0;\n     private static final int WARN_LOG_TRACE = 1;"},{"sha":"8eb5fa98c9a9b4d0134ce49340cc736b0f553d98","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,6 +23,8 @@\n import java.util.List;\n import java.util.StringTokenizer;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n /*\n  * Lots of this could be abstracted out into a word-wrapping class.\n  */\n@@ -46,7 +48,7 @@\n \n     private boolean multiLine = false;\n     private boolean doubleSpace = true;\n-    private String newline = System.getProperty(\"line.separator\");\n+    private String newline = J2DoPrivHelper.getLineSeparator();\n     private int lineLength = 72;\n     private String wrapIndent = \"        \";\n     private String clauseIndent = \"    \";\n@@ -152,7 +154,7 @@ public Object prettyPrint(Object sqlObject) {\n \n                 buf.append(prettyPrintLine(line));\n                 for (int i = 0; i < 1 + (getDoubleSpace() ? 1 : 0); i++)\n-                    buf.append(System.getProperty(\"line.separator\"));\n+                    buf.append(J2DoPrivHelper.getLineSeparator());\n             }\n \n             return buf.toString();"},{"sha":"ba1e4fa0d9e963a9f137381ef6af6446a2b60063","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -24,6 +24,8 @@\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n@@ -32,6 +34,7 @@\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.GenericConfigurable;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n@@ -57,7 +60,7 @@\n     public static final String STDOUT = \"stdout\";\n     public static final String STDERR = \"stderr\";\n \n-    private static final String NEWLINE = System.getProperty(\"line.separator\");\n+    private static final String NEWLINE = J2DoPrivHelper.getLineSeparator();\n \n     /**\n      * The time at which this factory was initialized.\n@@ -179,8 +182,15 @@ else if (STDERR.equals(file))\n         else {\n             File f = Files.getFile(file, null);\n             try {\n-                _out = new PrintStream(new FileOutputStream\n-                    (f.getCanonicalPath(), true));\n+                _out = new PrintStream((FileOutputStream)\n+                    AccessController.doPrivileged(\n+                        J2DoPrivHelper.newFileOutputStreamAction(\n+                            (String)AccessController.doPrivileged( \n+                                J2DoPrivHelper.getCanonicalPathAction( f )),\n+                            true)));\n+            } catch( PrivilegedActionException pae ) {\n+                throw new IllegalArgumentException(_loc.get(\"log-bad-file\",\n+                        file) + \" \" + pae.getException());\n             } catch (IOException ioe) {\n                 throw new IllegalArgumentException(_loc.get(\"log-bad-file\",\n                     file) + \" \" + ioe.toString());"},{"sha":"baa7402037e69f05607539ed00378022c6dbc479","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,6 +23,8 @@\n import java.io.OutputStream;\n import java.util.StringTokenizer;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n /**\n  * Many standard components log to {@link OutputStream}s.\n  * This wrapper class extends the {@link ByteArrayOutputStream}\n@@ -33,7 +35,7 @@\n  */\n public class LogOutputStream extends ByteArrayOutputStream {\n \n-    private static final String _sep = System.getProperty(\"line.separator\");\n+    private static final String _sep = J2DoPrivHelper.getLineSeparator();\n \n     private final int _level;\n     private final Log _log;"},{"sha":"b92686aea9dad9a22ec2dc560dc1382b8be17249","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n+import java.security.AccessController;\n+\n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n@@ -295,7 +298,8 @@ public static Class classForName(String name, String pkg,\n             return null;\n \n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n         boolean fullName = name.indexOf('.') != -1;\n         boolean noPackage = StringUtils.isEmpty(pkg);\n         try {"},{"sha":"d7e38fbbf1f0314c6432c5b0b12b40279d4a311a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,11 +21,14 @@\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.FileReader;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -36,6 +39,7 @@\n \n import org.apache.commons.lang.exception.NestableRuntimeException;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import serp.bytecode.lowlevel.ConstantPoolTable;\n import serp.util.Strings;\n@@ -210,7 +214,8 @@ public Map mapTypes(MetaDataIterator itr) {\n                 return new String[]{ getFromClassFile(file) };\n             if (arg.endsWith(\".java\"))\n                 return new String[]{ getFromJavaFile(file) };\n-            if (file.exists()) {\n+            if (((Boolean)AccessController.doPrivileged( \n+                J2DoPrivHelper.existsAction( file ))).booleanValue()) {\n                 Collection col = getFromMetaDataFile(file);\n                 return (String[]) col.toArray(new String[col.size()]);\n             }\n@@ -295,8 +300,11 @@ public Map mapTypeNames(MetaDataIterator itr) {\n     private String getFromClassFile(File file) throws IOException {\n         FileInputStream fin = null;\n         try {\n-            fin = new FileInputStream(file);\n+            fin = (FileInputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileInputStreamAction(file));\n             return getFromClass(fin);\n+        } catch( PrivilegedActionException pae ) {\n+            throw (FileNotFoundException)pae.getException();\n         } finally {\n             if (fin != null)\n                 try {"},{"sha":"fb2c132762d45586b625c3987c9799576257d3ce","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","status":"modified","additions":26,"deletions":5,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,12 +23,15 @@\n import java.io.InputStream;\n import java.net.URL;\n import java.net.URLDecoder;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.List;\n import java.util.NoSuchElementException;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n import serp.util.Strings;\n \n@@ -76,8 +79,14 @@ public ClassMetaDataIterator(Class cls, String suffix, ClassLoader loader,\n             multi.addClassLoader(multi.SYSTEM_LOADER);\n             multi.addClassLoader(multi.THREAD_LOADER);\n             multi.addClassLoader(getClass().getClassLoader());\n-            if (cls != null && cls.getClassLoader() != null)\n-                multi.addClassLoader(cls.getClassLoader());\n+            if (cls != null)\n+            {\n+                ClassLoader clsLoader = (ClassLoader)\n+                    AccessController.doPrivileged( \n+                        J2DoPrivHelper.getClassLoaderAction(cls));\n+                if (clsLoader != null)\n+                    multi.addClassLoader(clsLoader);\n+            }\n             loader = multi;\n         }\n         _loader = loader;\n@@ -145,7 +154,13 @@ public boolean hasNext() throws IOException {\n \n             _url = -1;\n             _urls.clear();\n-            e = _loader.getResources((String) _locs.get(_loc));\n+            try {\n+                e = (Enumeration)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getResourcesAction(\n+                        _loader, (String) _locs.get(_loc)));\n+            } catch( PrivilegedActionException pae ) {\n+                throw (IOException)pae.getException();\n+            }    \n             while (e.hasMoreElements())\n                 _urls.add(e.nextElement());\n         }\n@@ -161,15 +176,21 @@ public Object next() throws IOException {\n     public InputStream getInputStream() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n-        return ((URL) _urls.get(_url)).openStream();\n+        try {\n+            return (InputStream)AccessController.doPrivileged(\n+                J2DoPrivHelper.openStreamAction((URL) _urls.get(_url)));\n+        } catch( PrivilegedActionException pae ) {\n+            throw (IOException)pae.getException();\n+        }\n     }\n \n     public File getFile() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n         File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n             getFile()));\n-        return (file.exists()) ? file : null;\n+        return (((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( file ))).booleanValue()) ? file:null;\n     }\n \n     public void close() {"},{"sha":"6490029dbf5313e0968434535f0fe8272fe224a2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,9 +20,12 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.security.AccessController;\n import java.util.Properties;\n import java.util.zip.ZipFile;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n import serp.util.Strings;\n \n /**\n@@ -47,7 +50,8 @@ public ClasspathMetaDataIterator() throws IOException {\n      */\n     public ClasspathMetaDataIterator(String[] dirs, MetaDataFilter filter)\n         throws IOException {\n-        Properties props = System.getProperties();\n+        Properties props = (Properties)AccessController.doPrivileged( \n+            J2DoPrivHelper.getPropertiesAction()); \n         String path = props.getProperty(\"java.class.path\");\n         String[] tokens = Strings.split(path,\n             props.getProperty(\"path.separator\"), 0);\n@@ -57,7 +61,8 @@ public ClasspathMetaDataIterator(String[] dirs, MetaDataFilter filter)\n                 continue;\n \n             File file = new File(tokens[i]);\n-            if (!file.exists())\n+            if (!((Boolean)AccessController.doPrivileged( \n+                J2DoPrivHelper.existsAction( file ))).booleanValue())\n                 continue;\n             if (file.isDirectory())\n                 addIterator(new FileMetaDataIterator(file, filter));"},{"sha":"702581f464d9eb20bf44abd55ebed5c2deb88a10","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":21,"deletions":3,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,14 +21,18 @@\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n@@ -112,7 +116,14 @@ public Object next() throws IOException {\n     public InputStream getInputStream() throws IOException {\n         if (_file == null)\n             throw new IllegalStateException();\n-        return new FileInputStream(_file);\n+        FileInputStream fis = null;\n+        try {\n+            fis = (FileInputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileInputStreamAction(_file));\n+            return fis;\n+        } catch( PrivilegedActionException pae ) {\n+            throw (FileNotFoundException)pae.getException();\n+        }\n     }\n \n     public File getFile() {\n@@ -137,8 +148,15 @@ public String getName() {\n         }\n \n         public byte[] getContent() throws IOException {\n-            long len = _file.length();\n-            FileInputStream fin = new FileInputStream(_file);\n+            long len = ((Long)AccessController.doPrivileged( \n+                J2DoPrivHelper.lengthAction( _file ))).longValue();\n+            FileInputStream fin = null;\n+            try {\n+                fin = (FileInputStream) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newFileInputStreamAction(_file));\n+            } catch( PrivilegedActionException pae ) {\n+                 throw (FileNotFoundException)pae.getException();\n+            }\n             try {\n                 byte[] content;\n                 if (len <= 0 || len > Integer.MAX_VALUE) {"},{"sha":"83c482f5801e1a29b2ec92ec221ff6a835cf0d4f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","status":"modified","additions":21,"deletions":7,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,11 +23,14 @@\n import java.io.InputStream;\n import java.net.URL;\n import java.net.URLDecoder;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.List;\n import java.util.NoSuchElementException;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n \n /**\n@@ -61,11 +64,16 @@ public ResourceMetaDataIterator(String rsrc, ClassLoader loader)\n             loader = multi;\n         }\n \n-        Enumeration e = loader.getResources(rsrc);\n-        while (e.hasMoreElements()) {\n-            if (_urls == null)\n-                _urls = new ArrayList(3);\n-            _urls.add(e.nextElement());\n+        try {\n+            Enumeration e = (Enumeration)AccessController.doPrivileged( \n+                J2DoPrivHelper.getResourcesAction(loader, rsrc));\n+            while (e.hasMoreElements()) {\n+                if (_urls == null)\n+                    _urls = new ArrayList(3);\n+                _urls.add(e.nextElement());\n+            }\n+        } catch( PrivilegedActionException pae ) {\n+            throw (IOException)pae.getException();\n         }\n     }\n \n@@ -82,15 +90,21 @@ public Object next() {\n     public InputStream getInputStream() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n-        return ((URL) _urls.get(_url)).openStream();\n+        try {\n+            return (InputStream)AccessController.doPrivileged(\n+                J2DoPrivHelper.openStreamAction((URL) _urls.get(_url)));\n+        } catch( PrivilegedActionException pae ) {\n+            throw (IOException)pae.getException();\n+        }\n     }\n \n     public File getFile() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n         File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n             getFile()));\n-        return (file.exists()) ? file : null;\n+        return (((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( file ))).booleanValue()) ? file :null;\n     }\n \n     public void close() {"},{"sha":"f3db21f0ccd584c6d57ace4e8f8baa5bd6081fc5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n+import java.security.AccessController;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n@@ -30,7 +33,7 @@\n     private static final Localizer _loc =\n         Localizer.forPackage(SourceTrackers.class);\n \n-    private static final String SEP = System.getProperty(\"line.separator\");\n+    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n \n     /**\n      * Create a message appropriate for display to the user describing\n@@ -46,7 +49,9 @@ public static String getSourceLocationMessage(SourceTracker[] trackers) {\n         for (int i = 0; i < trackers.length; i++) {\n             sourceFilePath = (trackers[i].getSourceFile() == null ?\n                 _loc.get(\"source-tracker-file-unknown\").getMessage() :\n-                trackers[i].getSourceFile().getAbsolutePath());\n+                (String)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getAbsolutePathAction(\n+                        trackers[i].getSourceFile())));\n             buf.append(\"  \").append(_loc.get(\n                 \"source-trackers-location-line-item\",\n                 trackers[i].getResourceName(), sourceFilePath));"},{"sha":"be31eb4c7bf4dcf97aa00659f4ab9573bd886492","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,6 +23,10 @@\n import java.io.InputStream;\n import java.net.URL;\n import java.net.URLDecoder;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n \n /**\n  * Iterator over the metadata resource represented by a URL.\n@@ -59,7 +63,12 @@ public InputStream getInputStream() throws IOException {\n             throw new IllegalStateException();\n         if (_url == null)\n             return null;\n-        return _url.openStream();\n+        try {\n+            return (InputStream)AccessController.doPrivileged(\n+                J2DoPrivHelper.openStreamAction(_url));\n+        } catch( PrivilegedActionException pae ) {\n+            throw (IOException)pae.getException();\n+        }\n     }\n \n     public File getFile() {\n@@ -68,7 +77,8 @@ public File getFile() {\n         if (_url == null)\n             return null;\n         File file = new File(URLDecoder.decode(_url.getPath()));\n-        return (file.exists()) ? file : null;\n+        return (((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( file ))).booleanValue()) ? file:null;\n     }\n \n     public void close() {"},{"sha":"8f16abd23ae9b9848afe755d007ee769f4ea63f6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,6 +23,7 @@\n import java.io.InputStreamReader;\n import java.io.Reader;\n import java.net.URL;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -42,6 +43,7 @@\n import org.xml.sax.ext.LexicalHandler;\n import org.xml.sax.helpers.DefaultHandler;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -629,7 +631,8 @@ protected ClassLoader currentClassLoader() {\n         if (_loader != null)\n             return _loader;\n         if (_curLoader == null)\n-            _curLoader = Thread.currentThread().getContextClassLoader();\n+            _curLoader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n         return _curLoader;\n     }\n "},{"sha":"7d08e3d87ff09107d9b17c2f76535ebfcac68326","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","status":"modified","additions":17,"deletions":6,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,6 +23,8 @@\n import java.io.IOException;\n import java.io.StringWriter;\n import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -42,6 +44,7 @@\n import org.xml.sax.helpers.AttributesImpl;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.lib.xml.XMLWriter;\n@@ -135,8 +138,10 @@ protected File prepareWrite(File file) throws IOException {\n         File backup = Files.backup(file, false);\n         if (backup == null) {\n             File parent = file.getParentFile();\n-            if (parent != null && !parent.exists())\n-                parent.mkdirs();\n+            if (parent != null && !((Boolean)AccessController.doPrivileged( \n+                J2DoPrivHelper.existsAction( parent ))).booleanValue())\n+                AccessController.doPrivileged( \n+                    J2DoPrivHelper.mkdirsAction( parent ));\n         }\n         return backup;\n     }\n@@ -191,10 +196,16 @@ public void serialize(File file, int flags) throws IOException {\n             _log.info(_loc.get(\"ser-file\", file));\n \n         _backup = prepareWrite(file);\n-        FileWriter out = new FileWriter(file.getCanonicalPath(),\n-            (flags & APPEND) > 0);\n-        serialize(out, flags);\n-        out.close();\n+        try {\n+            FileWriter out = new FileWriter(\n+                (String)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getCanonicalPathAction( file )),\n+                (flags & APPEND) > 0);\n+            serialize(out, flags);\n+            out.close();\n+        } catch( PrivilegedActionException pae ) {\n+            throw (IOException)pae.getException();\n+        }\n     }\n \n     public void serialize(Writer out, int flags) throws IOException {"},{"sha":"ea75bdc821d363794bb0586a31ab24672112aa78","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -24,11 +24,15 @@\n import java.io.InputStream;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Enumeration;\n import java.util.NoSuchElementException;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipFile;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n /**\n  * Iterator over all metadata resources in a given zip file.\n  *\n@@ -54,7 +58,12 @@ public ZipFileMetaDataIterator(URL url, MetaDataFilter filter)\n         } else {\n             URLConnection con = url.openConnection();\n             con.setDefaultUseCaches(false);\n-            _file = (ZipFile) con.getContent();\n+            try {\n+                _file = (ZipFile) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getContentAction(con));\n+            } catch( PrivilegedActionException pae ) {\n+                 throw (IOException)pae.getException();\n+            }\n         }\n         _filter = filter;\n         _entries = (_file == null) ? null : _file.entries();"},{"sha":"1584679be84a10d3ce7c584b9c7d718e8e3740a1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -26,7 +26,7 @@\n  */\n public final class CodeFormat implements Cloneable {\n \n-    private static final String _sep = System.getProperty(\"line.separator\");\n+    private static final String _sep = J2DoPrivHelper.getLineSeparator();\n \n     private String _tab = \"\\t\";\n     private boolean _spaceBeforeParen = false;"},{"sha":"f8afee6b3677aae8483dced853bd6e929512f8a7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","status":"modified","additions":55,"deletions":22,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,6 +22,7 @@\n import java.io.BufferedOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.FileWriter;\n import java.io.IOException;\n@@ -30,6 +31,8 @@\n import java.io.Writer;\n import java.net.URL;\n import java.net.URLDecoder;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.exception.NestableRuntimeException;\n@@ -48,13 +51,17 @@\n      * the file does not exist or a backup could not be created, returns null.\n      */\n     public static File backup(File file, boolean copy) {\n-        if (file == null || !file.exists())\n+        if (file == null || !((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( file ))).booleanValue())\n             return null;\n \n         // create new file object copy so we don't modify the original\n-        File clone = new File(file.getAbsolutePath());\n-        File bk = new File(file.getAbsolutePath() + \"~\");\n-        if (!clone.renameTo(bk))\n+        String aPath = (String)AccessController.doPrivileged( \n+            J2DoPrivHelper.getAbsolutePathAction( file ));\n+        File clone = new File(aPath);\n+        File bk = new File(aPath + \"~\");\n+        if (!((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.renameToAction( clone, bk ))).booleanValue())\n             return null;\n         if (copy) {\n             try {\n@@ -76,14 +83,17 @@ public static File revert(File backup, boolean copy) {\n             return null;\n         if (!backup.getName().endsWith(\"~\"))\n             backup = new File(backup.getPath() + \"~\");\n-        if (!backup.exists())\n+        if (!((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( backup ))).booleanValue())\n             return null;\n \n         // create new file object copy so we don't modify the original\n-        String path = backup.getAbsolutePath();\n+        String path = (String)AccessController.doPrivileged( \n+            J2DoPrivHelper.getAbsolutePathAction( backup )); \n         File clone = new File(path);\n         File orig = new File(path.substring(0, path.length() - 1));\n-        if (!clone.renameTo(orig))\n+        if (!((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.renameToAction( clone, orig ))).booleanValue())\n             return null;\n         if (copy) {\n             try {\n@@ -122,7 +132,8 @@ private static File getClassFile(Class cls, String ext) {\n         if (innerIdx != -1)\n             name = name.substring(0, innerIdx);\n \n-        URL rsrc = cls.getResource(name + ext);\n+        URL rsrc = (URL)AccessController.doPrivileged( \n+            J2DoPrivHelper.getResourceAction(cls, name + ext)); \n         if (rsrc != null && rsrc.getProtocol().equals(\"file\"))\n             return new File(URLDecoder.decode(rsrc.getFile()));\n         return null;\n@@ -137,26 +148,34 @@ private static File getClassFile(Class cls, String ext) {\n      */\n     public static File getPackageFile(File base, String pkg, boolean mkdirs) {\n         if (base == null)\n-            base = new File(System.getProperty(\"user.dir\"));\n+            base = new File((String)AccessController.doPrivileged( \n+                J2DoPrivHelper.getPropertyAction(\"user.dir\")));\n         if (StringUtils.isEmpty(pkg)) {\n-            if (mkdirs && !base.exists())\n-                base.mkdirs();\n+            if (mkdirs && !((Boolean)AccessController.doPrivileged( \n+                J2DoPrivHelper.existsAction( base ))).booleanValue())\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.mkdirsAction( base ));\n             return base;\n         }\n \n         pkg = pkg.replace('.', File.separatorChar);\n         File file = null;\n         try {\n-            if (base.getCanonicalPath().endsWith(pkg))\n+            if (((String)AccessController.doPrivileged( \n+                J2DoPrivHelper.getCanonicalPathAction( base ))).endsWith(pkg))\n                 file = base;\n             else\n                 file = new File(base, pkg);\n+        } catch( PrivilegedActionException pae ) {\n+            throw new NestableRuntimeException(\n+                (IOException)pae.getException());\n         } catch (IOException ioe) {\n             throw new NestableRuntimeException(ioe);\n         }\n \n-        if (mkdirs && !file.exists())\n-            file.mkdirs();\n+        if (mkdirs && !((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( file ))).booleanValue())\n+            AccessController.doPrivileged(J2DoPrivHelper.mkdirsAction( file ));\n         return file;\n     }\n \n@@ -176,17 +195,21 @@ public static File getFile(String name, ClassLoader loader) {\n             return null;\n \n         File file = new File(name);\n-        if (file.exists())\n+        if (((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( file ))).booleanValue())\n             return file;\n \n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n-        URL url = loader.getResource(name);\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n+        URL url = (URL)AccessController.doPrivileged( \n+            J2DoPrivHelper.getResourceAction(loader, name)); \n         if (url != null) {\n             String urlFile = url.getFile();\n             if (urlFile != null) {\n                 File rsrc = new File(URLDecoder.decode(urlFile));\n-                if (rsrc.exists())\n+                if (((Boolean)AccessController.doPrivileged( \n+                    J2DoPrivHelper.existsAction( rsrc ))).booleanValue())\n                     return rsrc;\n             }\n         }\n@@ -231,7 +254,11 @@ public static OutputStream getOutputStream(String file,\n         if (\"stderr\".equals(file))\n             return System.err;\n         try {\n-            return new FileOutputStream(getFile(file, loader));\n+            return (FileOutputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileOutputStreamAction(\n+                    getFile(file, loader)));\n+        } catch( PrivilegedActionException pae ) {\n+            throw new NestableRuntimeException(pae.getException());\n         } catch (IOException ioe) {\n             throw new NestableRuntimeException(ioe);\n         }\n@@ -241,19 +268,25 @@ public static OutputStream getOutputStream(String file,\n      * Copy a file. Return false if <code>from</code> does not exist.\n      */\n     public static boolean copy(File from, File to) throws IOException {\n-        if (from == null || to == null || !from.exists())\n+        if (from == null || to == null ||\n+            !((Boolean)AccessController.doPrivileged( \n+                J2DoPrivHelper.existsAction( from ))).booleanValue())\n             return false;\n \n         FileInputStream in = null;\n         FileOutputStream out = null;\n         try {\n-            in = new FileInputStream(from);\n+            in = (FileInputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileInputStreamAction(from));\n             BufferedInputStream inbuf = new BufferedInputStream(in);\n-            out = new FileOutputStream(to);\n+            out = (FileOutputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileOutputStreamAction(to)); \n             BufferedOutputStream outbuf = new BufferedOutputStream(out);\n             for (int b; (b = inbuf.read()) != -1; outbuf.write(b)) ;\n             outbuf.flush();\n             return true;\n+        } catch( PrivilegedActionException pae ) {\n+            throw (FileNotFoundException)pae.getException();\n         } finally {\n             if (in != null)\n                 try {"},{"sha":"901408cbd3f48a5755cb41fd530adbd6e49e8351","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -578,7 +578,7 @@ public PropertyLine(String line) {\n         }\n \n         public void append(String newline) {\n-            line.append(System.getProperty(\"line.separator\"));\n+            line.append(J2DoPrivHelper.getLineSeparator());\n             line.append(newline);\n         }\n "},{"sha":"dd4efc26a24f3c88b9f28f19ffba6779bc56115f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"added","additions":622,"deletions":0,"changes":622,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -0,0 +1,622 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedExceptionAction;\n+import serp.bytecode.BCClass;\n+import serp.bytecode.Code;\n+\n+/**\n+ * Helper class to obtain the Privilege(Exception)Action object to perform\n+ * Java 2 doPrivilege security sensitive function call in the following\n+ * methods:\n+ * <ul>\n+ * <li>Class.getClassLoader\n+ * <li>Class.getDeclaredField\n+ * <li>Class.getDeclaredFields\n+ * <li>Class.getDeclaredMethod\n+ * <li>Class.getDeclaredMethods\n+ * <li>Class.getResource\n+ * <li>Class.newInstance\n+ * <li>ClassLoader.getParent\n+ * <li>ClassLoader.getResource\n+ * <li>ClassLoader.getResources\n+ * <li>ClassLoader.getSystemClassLoader\n+ * <li>File.exists\n+ * <li>File.getAbsolutePath\n+ * <li>File.getCanonicalPath\n+ * <li>File.length\n+ * <li>File.mkdirs\n+ * <li>File.renameTo\n+ * <li>FileInputStream new\n+ * <li>FileOutputStream new\n+ * <li>System.getProperties\n+ * <li>System.getProperty\n+ * <li>Thread.getContextClassLoader\n+ * <li>URL.openStream\n+ * <li>URLConnection.getContent\n+ * <li>serp.bytecode.Code new\n+ * <li>serp.bytecode.BCClass.isInstanceOf\n+ * </ul>\n+ * \n+ * If these methods are used, the following sample usage patterns should be\n+ * followed to ensure proper privilege is granted:\n+ * <xmp>\n+ * 1) No security risk method call. E.g.\n+ *  \n+ *    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n+ * \n+ * 2) Methods with no exception thrown. PrivilegedAction is returned from\n+ *    J2DoPrivHelper.*Action(). E.g.\n+ *      \n+ *    ClassLoader loader = (ClassLoader)AccessController.doPrivileged( \n+ *                             J2DoPrivHelper.getClassLoaderAction( clazz ));\n+ *                               \n+ *    ClassLoader loader = (ClassLoader) (System.getSecurityManager() == null)\n+ *                         ? clazz.getClassLoader()\n+ *                         : AccessController.doPrivileged( \n+ *                             J2DoPrivHelper.getClassLoaderAction( clazz ));\n+ * 3) Methods with exception thrown. PrivilegedExceptionAction is returned\n+ *    from J2DoPrivHelper.*Action(). E.g.\n+ *    \n+ *    try {\n+ *      method = (Method) AccessController.doPrivileged(\n+ *        J2DoPrivHelper.getDeclaredMethodAction(clazz, name, parameterType));\n+ *    } catch( PrivilegedActionException pae ) {\n+ *      throw (NoSuchMethodException)pae.getException();\n+ *    }\n+ *    \n+ *    try {\n+ *      method = ( System.getSecurityManager() == null )\n+ *        ? clazz.getDeclaredMethod(name,parameterType)\n+ *        : (Method) AccessController.doPrivileged(\n+ *            J2DoPrivHelper.getDeclaredMethodAction(\n+ *              clazz, name, parameterType));\n+ *    } catch( PrivilegedActionException pae ) {\n+ *        throw (NoSuchMethodException)pae.getException()\n+ *    }                               \n+ * </xmp> \n+ * @author Albert Lee\n+ */\n+\n+public abstract class J2DoPrivHelper {\n+    private static String lineSeparator = null;\n+    private static String pathSeparator = null;\n+\n+    /**\n+     * Return the value of the \"line.separator\" system property.\n+     * \n+     * Requires security policy: \n+     *   'permission java.util.PropertyPermission \"read\";'\n+     */\n+    public static final String getLineSeparator() {\n+        if (lineSeparator == null) {\n+            lineSeparator = (String) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return System.getProperty(\"line.separator\");\n+                        }\n+                    });\n+        }\n+        return lineSeparator;\n+    }\n+\n+    /**\n+     * Return the value of the \"path.separator\" system property.\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     */\n+    public static final String getPathSeparator() {\n+        if (pathSeparator == null) {\n+            pathSeparator = (String) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return System.getProperty(\"path.separator\");\n+                        }\n+                    });\n+        }\n+        return pathSeparator;\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for clazz.getClassloader().\n+     * \n+     * Notes: No doPrivilege wrapping is required in the caller if:\n+     *     \"the caller's class loader is not null and the caller's class loader\n+     *      is not the same as or an ancestor of the class loader for the class\n+     *      whose class loader is requested\". E.g.\n+     *      \n+     *         this.getClass().getClassLoader();\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return Classloader\n+     */\n+    public static final PrivilegedAction getClassLoaderAction(\n+        final Class clazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return clazz.getClassLoader();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for clazz.getDeclaredField().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     *   \n+     * @return Field\n+     * @exception NoSuchFieldException\n+     */\n+    public static final PrivilegedExceptionAction getDeclaredFieldAction(\n+        final Class clazz, final String name) {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws NoSuchFieldException {\n+                return clazz.getDeclaredField(name);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for class.getDeclaredFields().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     *   \n+     * @return Field[]\n+     */\n+    public static final PrivilegedAction getDeclaredFieldsAction(\n+        final Class clazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return clazz.getDeclaredFields();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for clazz.getDeclaredMethod().\n+     * \n+     * Requires security policy\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     *   \n+     * @return Method\n+     * @exception NoSuchMethodException\n+     */\n+    public static final PrivilegedExceptionAction getDeclaredMethodAction(\n+        final Class clazz, final String name, final Class[] parameterTypes) {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws NoSuchMethodException {\n+                return clazz.getDeclaredMethod(name, parameterTypes);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for clazz.getDeclaredMethods().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     *   \n+     * @return Method[]\n+     */\n+    public static final PrivilegedAction getDeclaredMethodsAction(\n+        final Class clazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return clazz.getDeclaredMethods();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for clazz.getResource().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return URL\n+     */\n+    public static final PrivilegedAction getResourceAction(\n+        final Class clazz, final String resource) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return clazz.getResource(resource);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for clazz.newInstance().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return Object\n+     * @exception IllegalAccessException\n+     * @exception InstantiationException\n+     */\n+    public static final PrivilegedExceptionAction newInstanceAction(\n+        final Class clazz) throws IllegalAccessException,\n+        InstantiationException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IllegalAccessException,\n+                    InstantiationException {\n+                return clazz.newInstance();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for loader.getParent().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return ClassLoader\n+     */\n+    public static final PrivilegedAction getParentAction(\n+        final ClassLoader loader) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return loader.getParent();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for loader.getResource().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return URL\n+     */\n+    public static final PrivilegedAction getResourceAction(\n+        final ClassLoader loader, final String resource) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return loader.getResource(resource);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for loader.getResources().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Enumeration\n+     * @exception IOException\n+     */\n+    public static final PrivilegedExceptionAction getResourcesAction(\n+        final ClassLoader loader, final String resource) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return loader.getResources(resource);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for ClassLoader.getSystemClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return ClassLoader\n+     */\n+    public static final PrivilegedAction getSystemClassLoaderAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return ClassLoader.getSystemClassLoader();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.exists().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction existsAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                try {\n+                    return f.exists() ? Boolean.TRUE : Boolean.FALSE;\n+                } catch (NullPointerException npe) {\n+                    return Boolean.FALSE;\n+                }\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.getAbsolutePath().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     *   \n+     * @return String\n+     */\n+    public static final PrivilegedAction getAbsolutePathAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.getAbsolutePath();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for f.getCanonicalPath().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     *   \n+     * @return String\n+     * @exception IOException\n+     */\n+    public static final PrivilegedExceptionAction getCanonicalPathAction(\n+        final File f) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return f.getCanonicalPath();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.length().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Long\n+     */\n+    public static final PrivilegedAction lengthAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new Long( f.length() );\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.mkdirs().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     *   \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction mkdirsAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.mkdirs() ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.renameTo().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     *   \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction renameToAction(final File from,\n+        final File to) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return from.renameTo(to) ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new FileInputStream().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return FileInputStream\n+     * @throws FileNotFoundException\n+     */\n+    public static final PrivilegedExceptionAction newFileInputStreamAction(\n+        final File f) throws FileNotFoundException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws FileNotFoundException {\n+                return new FileInputStream(f);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new FileOutputStream().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     * \n+     * @return FileOutputStream\n+     * @throws FileNotFoundException\n+     */\n+    public static final PrivilegedExceptionAction newFileOutputStreamAction(\n+        final File f) throws FileNotFoundException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws FileNotFoundException {\n+                return new FileOutputStream(f);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new FileOutputStream().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     * \n+     * @return FileOutputStream\n+     * @throws FileNotFoundException\n+     */\n+    public static final PrivilegedExceptionAction newFileOutputStreamAction(\n+        final String f, final boolean append) throws FileNotFoundException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws FileNotFoundException {\n+                return new FileOutputStream(f, append);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for System.getProperties().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     *   \n+     * @return Properties\n+     */\n+    public static final PrivilegedAction getPropertiesAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return System.getProperties();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for System.getProperty().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     *   \n+     * @return String\n+     */\n+    public static final PrivilegedAction getPropertyAction(final String name) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return System.getProperty(name);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for Thread.currentThread\n+     *   .getContextClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return ClassLoader\n+     */\n+    public static final PrivilegedAction getContextClassLoaderAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return Thread.currentThread().getContextClassLoader();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for url.openStream().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return InputStream\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction openStreamAction(\n+        final URL url) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return url.openStream();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object con.getContent().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return Object\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction getContentAction(\n+        final URLConnection con) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return con.getContent();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for new serp.bytecode.Code().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return serp.bytecode.Code\n+     */\n+    public static final PrivilegedAction newCodeAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new Code();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for bcClass.isInstanceOf().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction isInstanceOfAction(\n+        final BCClass bcClass, final Class clazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return bcClass.isInstanceOf(clazz) ? Boolean.TRUE\n+                    : Boolean.FALSE;\n+            }\n+        };\n+    }\n+}"},{"sha":"29a5e3d4e9c0b57825d653c796a2eeb407cfaaca","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n \n /**\n  * Utilities for dealing with different Java spec versions.\n@@ -45,7 +46,8 @@\n     private static Method INIT_CAUSE = null;\n \n     static {\n-        String specVersion = System.getProperty(\"java.specification.version\");\n+        String specVersion = (String)AccessController.doPrivileged( \n+            J2DoPrivHelper.getPropertyAction(\"java.specification.version\")); \n         if (\"1.2\".equals(specVersion))\n             VERSION = 2;\n         else if (\"1.3\".equals(specVersion))"},{"sha":"3eb3e0c4c76aa1510098d3eda2b6b823c3caa7a4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.lib.util;\n \n+import java.security.AccessController;\n import java.text.MessageFormat;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -99,7 +100,8 @@ public static Localizer forPackage(Class cls, Locale locale) {\n             return loc;\n         else {\n             loc = new Localizer(pkg, file, locale, \n-                cls == null ? null : cls.getClassLoader());\n+                cls == null ? null:(ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getClassLoaderAction(cls))); \n             _localizers.put(key, loc);\n             return loc;\n         }"},{"sha":"a2c53ec6d9473ff2abb4c57b62f52230b06e78e8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","status":"modified","additions":28,"deletions":13,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,6 +20,8 @@\n \n import java.io.IOException;\n import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.Iterator;\n@@ -46,7 +48,8 @@\n      * The standard system class loader.\n      */\n     public static final ClassLoader SYSTEM_LOADER =\n-        ClassLoader.getSystemClassLoader();\n+        (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getSystemClassLoaderAction());\n \n     private List _loaders = new ArrayList(5);\n \n@@ -82,7 +85,8 @@ public boolean containsClassLoader(ClassLoader loader) {\n         for (int i = 0; i < loaders.length; i++) {\n             loader = (ClassLoader) itr.next();\n             if (loader == THREAD_LOADER)\n-                loader = Thread.currentThread().getContextClassLoader();\n+                loader = (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getContextClassLoaderAction());\n             loaders[i] = loader;\n         }\n         return loaders;\n@@ -94,7 +98,8 @@ public boolean containsClassLoader(ClassLoader loader) {\n     public ClassLoader getClassLoader(int index) {\n         ClassLoader loader = (ClassLoader) _loaders.get(index);\n         if (loader == THREAD_LOADER)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n         return loader;\n     }\n \n@@ -201,7 +206,8 @@ protected Class findClass(String name) throws ClassNotFoundException {\n         for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n             loader = (ClassLoader) itr.next();\n             if (loader == THREAD_LOADER)\n-                loader = Thread.currentThread().getContextClassLoader();\n+                loader = (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getContextClassLoaderAction());\n             try {\n                 return Class.forName(name, false, loader);\n             } catch (Throwable t) {\n@@ -216,12 +222,14 @@ protected URL findResource(String name) {\n         for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n             loader = (ClassLoader) itr.next();\n             if (loader == THREAD_LOADER)\n-                loader = Thread.currentThread().getContextClassLoader();\n+                loader = (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getContextClassLoaderAction());\n \n             if (loader == null) // skip \n                 continue;\n \n-            rsrc = loader.getResource(name);\n+            rsrc = (URL)AccessController.doPrivileged( \n+                J2DoPrivHelper.getResourceAction(loader, name)); \n             if (rsrc != null)\n                 return rsrc;\n         }\n@@ -236,14 +244,21 @@ protected Enumeration findResources(String name) throws IOException {\n         for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n             loader = (ClassLoader) itr.next();\n             if (loader == THREAD_LOADER)\n-                loader = Thread.currentThread().getContextClassLoader();\n+                loader = (ClassLoader)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getContextClassLoaderAction());\n+            \n \n-            rsrcs = loader.getResources(name);\n-            while (rsrcs.hasMoreElements()) {\n-                rsrc = rsrcs.nextElement();\n-                if (!all.contains(rsrc))\n-                    all.addElement(rsrc);\n-            }\n+            try {\n+                rsrcs = (Enumeration)AccessController.doPrivileged( \n+                    J2DoPrivHelper.getResourcesAction(loader, name)); \n+                while (rsrcs.hasMoreElements()) {\n+                    rsrc = rsrcs.nextElement();\n+                    if (!all.contains(rsrc))\n+                        all.addElement(rsrc);\n+                }\n+            } catch( PrivilegedActionException pae ) {\n+                throw (IOException)pae.getException();\n+            }                \n         }\n         return all.elements();\n     }"},{"sha":"741e02a28dafc988c16d88374aeb710a9a7ce556","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,6 +22,8 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.LinkedList;\n@@ -31,6 +33,7 @@\n import java.util.TreeSet;\n \n import org.apache.commons.lang.StringUtils;\n+\n import serp.util.Strings;\n \n /**\n@@ -363,7 +366,12 @@ else if (params.length == setMeth.getParameterTypes().length\n             // inner instance and set it in object\n             if (inner == null && setter != null) {\n                 Class innerType = getType(setter)[0];\n-                inner = innerType.newInstance();\n+                try {\n+                    inner = AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(innerType));\n+                } catch( PrivilegedActionException pae ) {\n+                    throw pae.getException();\n+                }\n                 invoke(match[0], setter, new Object[]{ inner });\n             }\n             match[0] = inner;\n@@ -444,7 +452,12 @@ private Object stringToObject(String str, Class type) throws Exception {\n         }\n         if (!type.isAssignableFrom(subType))\n             throw err;\n-        return subType.newInstance();\n+        try {\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(subType));\n+        } catch( PrivilegedActionException pae ) {\n+            throw pae.getException();\n+        }\n     }\n \n     /**"},{"sha":"189056849b073db76149b13930a2d3639b85e6e4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -29,6 +29,7 @@\n import java.io.OutputStreamWriter;\n import java.io.Reader;\n import java.io.Writer;\n+import java.security.AccessController;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -45,7 +46,7 @@\n  */\n public class ParameterTemplate {\n \n-    private static final String SEP = System.getProperty(\"line.separator\");\n+    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n \n     private final StringBuffer _buf = new StringBuffer();\n     private final Map _params = new HashMap();\n@@ -210,7 +211,8 @@ public String toString() {\n                 if (_params.containsKey(param.toString()))\n                     copy.append(_params.get(param.toString()));\n                 else\n-                    copy.append(System.getProperty(param.toString()));\n+                    copy.append((String)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getPropertyAction(param.toString())));\n                 param = null;\n             } else if (param != null)\n                 param.append(ch);"},{"sha":"66dab07a63a38a4f23bed4d866af9ffb5418608f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,6 +23,7 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.URL;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.List;\n@@ -84,11 +85,13 @@\n     public static String[] getImplementors(String serviceName,\n         ClassLoader loader) {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n \n         try {\n             Set resourceList = new TreeSet();\n-            Enumeration resources = loader.getResources(PREFIX + serviceName);\n+            Enumeration resources = (Enumeration)AccessController.doPrivileged( \n+                J2DoPrivHelper.getResourcesAction(loader, PREFIX + serviceName)); \n             while (resources.hasMoreElements())\n                 addResources((URL) resources.nextElement(), resourceList);\n \n@@ -175,7 +178,8 @@ private static void addResources(URL url, Set set) throws IOException {\n     public static Class[] getImplementorClasses(String serviceName,\n         ClassLoader loader, boolean skipMissing) throws ClassNotFoundException {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n \n         String[] names = getImplementors(serviceName, loader);\n         if (names == null)"},{"sha":"9d8697ed8ea053a9a7112e2c8ef26cffe7ad0ccc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.security.AccessController;\n import java.util.Locale;\n import java.util.PropertyResourceBundle;\n import java.util.ResourceBundle;\n@@ -37,7 +38,8 @@ public ResourceBundle findResource(String name, Locale locale,\n         ClassLoader loader) {\n         String rsrc = name.replace('.', '/') + \".properties\";\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n \n         InputStream in = loader.getResourceAsStream(rsrc);\n         if (in != null) {"},{"sha":"ca469a18e5a09ac80685a23d5ad3908fc72a210d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,6 +21,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.security.AccessController;\n \n import serp.bytecode.lowlevel.ConstantPoolTable;\n "},{"sha":"0091499b2d3e018a041c0bd698161dac38f6a451","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.security.AccessController;\n import java.util.Locale;\n import java.util.PropertyResourceBundle;\n import java.util.ResourceBundle;\n@@ -39,7 +40,8 @@ public ResourceBundle findResource(String name, Locale locale,\n         ClassLoader loader) {\n         String rsrc = name.replace('.', '/') + \".properties\";\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n \n         InputStream in = loader.getResourceAsStream(rsrc);\n         if (in == null)"},{"sha":"f19321af4489662bae69ddedc490dfce5682cf76","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -31,6 +31,8 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n /**\n  * This class groups together the functionality of java.util.concurrent that\n  * cannot be fully and reliably implemented in backport, but for which some\n@@ -53,15 +55,12 @@\n     static {\n         NanoTimer timer = null;\n         try {\n-            String nanoTimerClassName = (String)\n-                AccessController.doPrivileged(new PrivilegedAction() {\n-                    public Object run() {\n-                        return System.getProperty(providerProp);\n-                    }\n-                });\n+            String nanoTimerClassName = (String)AccessController.doPrivileged( \n+                J2DoPrivHelper.getPropertyAction(providerProp)); \n             if (nanoTimerClassName != null) {\n                 Class cls = Class.forName(nanoTimerClassName);\n-                timer = (NanoTimer) cls.newInstance();\n+                timer = (NanoTimer)  AccessController.doPrivileged(\n+                    J2DoPrivHelper.newInstanceAction(cls)); \n             }\n         } catch (Exception e) {\n             System.err.println("},{"sha":"5f345645b9e87bdefef3067ee5c5d2b3dfd31624","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -22,6 +22,8 @@\n import java.io.IOException;\n import java.io.Writer;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n /**\n  * The XMLWriter is a writer type for pretty-printing XML.\n  * It assumes that the streamed XML will be given without any whitespace,\n@@ -32,7 +34,7 @@\n  */\n public class XMLWriter extends FilterWriter {\n \n-    private static String _endl = System.getProperty(\"line.separator\");\n+    private static String _endl = J2DoPrivHelper.getLineSeparator();\n \n     private int _lastChar = ' ';\n     private int _lastChar2 = ' ';"},{"sha":"ca7333debae767bcdfe8a02b0c517d8efa5dee64","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n+import java.security.AccessController;\n import java.util.Map;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n@@ -26,6 +27,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.PersistenceProductDerivation;\n \n@@ -50,7 +52,8 @@ public int getType() {\n     public void validate()\n         throws Exception {\n         // make sure JPA is available\n-        javax.persistence.EntityManagerFactory.class.getClassLoader();\n+        AccessController.doPrivileged(J2DoPrivHelper.getClassLoaderAction(\n+            javax.persistence.EntityManagerFactory.class));\n     }\n \n     @Override"},{"sha":"cb3ce54da987017da76f6f23faec6ab1e3a2ee04","filename":"openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -0,0 +1,82 @@\n+// Default Java 2 security policy required by OpenJPA.\n+\n+// ================================================================\n+// The following permissions are needed to invoke the 'test' target in OpenJPA maven build.\n+\n+grant CodeBase \"file:///${user.home}/.m2/repository/org/apache/derby/derby/-\" {\n+\n+    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"read,write,delete\";\n+    permission java.lang.RuntimePermission                          \"createClassLoader\";\n+    permission java.util.PropertyPermission     \"derby.*\",          \"read\";\n+};\n+\n+grant CodeBase \"file:///${test.basedir}/-\" {\n+\n+    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"read,write\";\n+    permission java.io.SerializablePermission                       \"enableSubstitution\";\n+    permission java.lang.RuntimePermission                          \"accessDeclaredMembers\";\n+    permission java.lang.RuntimePermission                          \"createClassLoader\";\n+    permission java.lang.RuntimePermission                          \"getClassLoader\";\n+    permission java.lang.RuntimePermission                          \"setIO\";\n+    permission java.lang.reflect.ReflectPermission                  \"suppressAccessChecks\";\n+    permission java.util.PropertyPermission     \"*\",                \"read,write\";\n+};\n+\n+grant CodeBase \"file:///${user.home}/.m2/repository/-\" {\n+\n+    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"read,write\";\n+    permission java.io.SerializablePermission                       \"enableSubstitution\";\n+    permission java.lang.RuntimePermission                          \"accessDeclaredMembers\";\n+    permission java.lang.RuntimePermission                          \"createClassLoader\";\n+    permission java.lang.RuntimePermission                          \"getClassLoader\";\n+    permission java.lang.RuntimePermission                          \"setContextClassLoader\";\n+    permission java.lang.RuntimePermission                          \"setIO\";\n+    permission java.lang.reflect.ReflectPermission                  \"suppressAccessChecks\";\n+    permission java.util.PropertyPermission     \"*\",                \"read,write\";\n+};\n+\n+\n+// ================================================================\n+// The following permissions are required by OpenJPA implementation.\n+grant CodeBase \"${application}/openjpa-1.0.0-SNAPSHOT.jar\" {\n+\n+    // class.getClassLoader()\n+    // thread.getContextClassLoader()\n+    // classloader.getParent()\n+    // classloader.getSystemClassLoader()\n+    // new serp.bytecode.Code()\n+    // serp.bytecode.BCClass.isInstanceOf()\n+    // class.newInstance()\n+    //\n+    permission java.lang.RuntimePermission                          \"getClassLoader\";\n+\n+    // urlConnection.getContext()\n+    // url.openStream()\n+    // classloader.getResource()\n+    // classloader.getResources()\n+    // new FileInputStream()\n+    // file.exists()\n+    //\n+    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"read\";\n+\n+    // file.mkdirs()\n+    // file.renameTo()\n+    // new FileOutputStream()\n+    //\n+    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"write\";\n+\n+    // class.getDeclaredField()\n+    // class.getDeclaredFields()\n+    // class.getDeclaredMethod()\n+    // class.getDeclaredMethods()\n+    //\n+    permission java.lang.RuntimePermission                          \"accessDeclaredMembers\";\n+\n+    // System.getProperty()\n+    // System.getPrperties()\n+    // File.getAbsolutePath()\n+    // File.getCanonicalPath()\n+    //\n+    permission java.util.PropertyPermission     \"*\",                \"read\";\n+};\n+"},{"sha":"b78caf80dba41fd19faabcd409c2226f08386924","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -28,6 +28,7 @@\n import java.lang.reflect.Modifier;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -86,6 +87,7 @@\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n@@ -659,14 +661,18 @@ protected File getSourceFile() {\n             cls = cls.getEnclosingClass();\n \n         String rsrc = StringUtils.replace(cls.getName(), \".\", \"/\");\n-        ClassLoader loader = cls.getClassLoader();\n+        ClassLoader loader = (ClassLoader)AccessController.doPrivileged( \n+            J2DoPrivHelper.getClassLoaderAction(cls)); \n         if (loader == null)\n-            loader = ClassLoader.getSystemClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getSystemClassLoaderAction()); \n         if (loader == null)\n             return null;\n-        URL url = loader.getResource(rsrc + \".java\");\n+        URL url = (URL)AccessController.doPrivileged( \n+            J2DoPrivHelper.getResourceAction(loader, rsrc + \".java\")); \n         if (url == null) {\n-            url = loader.getResource(rsrc + \".class\");\n+            url = (URL)AccessController.doPrivileged( \n+                J2DoPrivHelper.getResourceAction(loader, rsrc + \".class\")); \n             if (url == null)\n                 return null;\n         }\n@@ -750,7 +756,9 @@ else if (!StringUtils.isEmpty(detached.fieldName()))\n             else\n                 meta.setDetachedState(detached.fieldName());\n         } else {\n-            Field[] fields = meta.getDescribedType().getDeclaredFields();\n+            Field[] fields = (Field[])AccessController.doPrivileged( \n+                J2DoPrivHelper.getDeclaredFieldsAction(\n+                    meta.getDescribedType())); \n             for (int i = 0; i < fields.length; i++)\n                 if (fields[i].isAnnotationPresent(DetachedState.class))\n                     meta.setDetachedState(fields[i].getName());\n@@ -790,7 +798,8 @@ else if (!StringUtils.isEmpty(detached.fieldName()))\n         MethodKey key;\n         Set<MethodKey> seen = new HashSet<MethodKey>();\n         do {\n-            for (Method m : sup.getDeclaredMethods()) {\n+            for (Method m : (Method[])AccessController.doPrivileged( \n+                J2DoPrivHelper.getDeclaredMethodsAction( sup ))) {\n                 mods = m.getModifiers();\n                 if (Modifier.isStatic(mods) || Modifier.isFinal(mods) ||\n                     Object.class.equals(m.getDeclaringClass()))"},{"sha":"da7eef6db8fa0301f0c1fab03013354dc3509261","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -25,6 +25,7 @@\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -47,6 +48,7 @@\n import javax.persistence.Transient;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.AbstractMetaDataDefaults;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -250,9 +252,11 @@ private int getAccessType(Class cls) {\n             return ClassMetaData.ACCESS_UNKNOWN;\n \n         int access = 0;\n-        if (usesAccess(cls.getDeclaredFields()))\n+        if (usesAccess((Field[])AccessController.doPrivileged( \n+            J2DoPrivHelper.getDeclaredFieldsAction( cls ))))\n             access |= ClassMetaData.ACCESS_FIELD;\n-        if (usesAccess(cls.getDeclaredMethods()))\n+        if (usesAccess((Method[])AccessController.doPrivileged( \n+            J2DoPrivHelper.getDeclaredMethodsAction( cls ))))\n             access |= ClassMetaData.ACCESS_PROPERTY;\n         return (access == 0) ? getAccessType(cls.getSuperclass()) : access;\n     }\n@@ -285,9 +289,11 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n         if (member instanceof Method) {\n             try {\n                 // check for setters for methods\n-                Method setter = meta.getDescribedType().getDeclaredMethod(\"set\"\n-                    + StringUtils.capitalize(name), new Class[] { \n-                    ((Method) member).getReturnType() });\n+                Method setter = (Method) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getDeclaredMethodAction(\n+                        meta.getDescribedType(), \"set\" +\n+                        StringUtils.capitalize(name), new Class[] { \n+                            ((Method) member).getReturnType() }));\n                 if (setter == null)\n                     return false;\n             } catch (Exception e) {"},{"sha":"4f3881b377ae2fec27664087aedb0ef1a557c51f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.net.URL;\n+import java.security.AccessController;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n@@ -45,6 +46,7 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.meta.MetaDataFilter;\n import org.apache.openjpa.lib.meta.MetaDataParser;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.AbstractCFMetaDataFactory;\n@@ -438,10 +440,12 @@ protected File defaultSourceFile(SequenceMetaData seq, Map clsNames) {\n     private File defaultXMLFile() {\n         ClassLoader loader = repos.getConfiguration().\n             getClassResolverInstance().getClassLoader(getClass(), null);\n-        URL rsrc = loader.getResource(\"META-INF/orm.xml\");\n+        URL rsrc = (URL)AccessController.doPrivileged( \n+            J2DoPrivHelper.getResourceAction(loader, \"META-INF/orm.xml\"));\n         if (rsrc != null) {\n             File file = new File(rsrc.getFile());\n-            if (file.exists())\n+            if (((Boolean)AccessController.doPrivileged( \n+                J2DoPrivHelper.existsAction( file ))).booleanValue())\n                 return file;\n         }\n         return new File(\"orm.xml\");"},{"sha":"fa06275f1b0832c89dabb9cc9ac4ecb527c7b7d9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":24,"deletions":10,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,6 +21,8 @@\n import java.io.File;\n import java.io.IOException;\n import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Enumeration;\n@@ -42,6 +44,7 @@\n import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.XMLMetaDataParser;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n@@ -84,7 +87,8 @@ public int getType() {\n     public void validate()\n         throws Exception {\n         // make sure JPA is available\n-        javax.persistence.EntityManagerFactory.class.getClassLoader();\n+        AccessController.doPrivileged(J2DoPrivHelper.getClassLoaderAction(\n+            javax.persistence.EntityManagerFactory.class));\n     }\n     \n     @Override\n@@ -244,14 +248,23 @@ private Boolean load(ConfigurationProviderImpl cp, String rsrc,\n         String name, Map m, ClassLoader loader, boolean explicit)\n         throws IOException {\n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n-\n-        Enumeration<URL> urls = loader.getResources(rsrc);\n-        if (!urls.hasMoreElements()) {\n-            if (!rsrc.startsWith(\"META-INF\"))\n-                urls = loader.getResources(\"META-INF/\" + rsrc);\n-            if (!urls.hasMoreElements())\n-                return null;\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n+\n+        Enumeration<URL> urls = null;\n+        try {\n+            urls = (Enumeration)AccessController.doPrivileged( \n+                J2DoPrivHelper.getResourcesAction(loader, rsrc)); \n+            if (!urls.hasMoreElements()) {\n+                if (!rsrc.startsWith(\"META-INF\"))\n+                    urls = (Enumeration)AccessController.doPrivileged( \n+                        J2DoPrivHelper.getResourcesAction(\n+                            loader, \"META-INF/\" + rsrc)); \n+                if (!urls.hasMoreElements())\n+                    return null;\n+            }\n+        } catch( PrivilegedActionException pae ) {\n+            throw (IOException)pae.getException();\n         }\n \n         ConfigurationParser parser = new ConfigurationParser(m);\n@@ -333,7 +346,8 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n             return true;\n \n         if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n+            loader = (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction());\n         try {\n             if (PersistenceProviderImpl.class.isAssignableFrom\n                 (Class.forName(provider, false, loader)))"},{"sha":"aea0f4b5f7e2dab8fce6408fc85961ac341bc481","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -23,6 +23,7 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLDecoder;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -38,6 +39,7 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.meta.SourceTracker;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n import org.apache.openjpa.lib.util.TemporaryClassLoader;\n@@ -91,8 +93,9 @@ public ClassLoader getClassLoader() {\n     }\n \n     public ClassLoader getNewTempClassLoader() {\n-        return new TemporaryClassLoader(Thread.currentThread().\n-            getContextClassLoader());\n+        return new TemporaryClassLoader(\n+            (ClassLoader)AccessController.doPrivileged( \n+                J2DoPrivHelper.getContextClassLoaderAction()));\n     }\n \n     public String getPersistenceUnitName() {\n@@ -201,15 +204,17 @@ public void addJarFileName(String name) {\n         MultiClassLoader loader = new MultiClassLoader();\n         loader.addClassLoader(getClass().getClassLoader());\n         loader.addClassLoader(MultiClassLoader.THREAD_LOADER);\n-        URL url = loader.getResource(name);\n+        URL url = (URL)AccessController.doPrivileged( \n+            J2DoPrivHelper.getResourceAction(loader, name));\n         if (url != null) {\n             addJarFile(url);\n             return;\n         }\n \n         // jar file is not a resource; check classpath\n-        String[] cp = System.getProperty(\"java.class.path\").\n-            split(System.getProperty(\"path.separator\"));\n+        String[] cp = ((String)AccessController.doPrivileged( \n+            J2DoPrivHelper.getPropertyAction(\"java.class.path\"))) \n+            .split(J2DoPrivHelper.getPathSeparator());\n         for (int i = 0; i < cp.length; i++) {\n             if (cp[i].equals(name)\n                 || cp[i].endsWith(File.separatorChar + name)) {"},{"sha":"b236a9a468b3dc53b03d8c2228d85f4189a1c564","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -21,6 +21,8 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumSet;\n@@ -45,6 +47,7 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.CFMetaDataParser;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n@@ -1096,22 +1099,29 @@ private FieldMetaData parseField(Attributes attrs)\n                     String cap = StringUtils.capitalize(name);\n                     type = meta.getDescribedType();\n                     try {\n-                        member = type.getDeclaredMethod(\"get\" + cap,\n-                            (Class[]) null); // varargs disambiguate\n+                        member = (Method) AccessController.doPrivileged(\n+                            J2DoPrivHelper.getDeclaredMethodAction(\n+                                type, \"get\" + cap,\n+                                (Class[]) null));// varargs disambiguate\n                     } catch (Exception excep) {\n                         try {\n-                            member = type.getDeclaredMethod(\"is\" + cap,\n-                                (Class[]) null);\n+                            member = (Method) AccessController.doPrivileged(\n+                                J2DoPrivHelper.getDeclaredMethodAction(\n+                                    type, \"is\" + cap, (Class[]) null));\n                         } catch (Exception excep2) {\n                             throw excep;\n                         }\n                     }\n                     type = ((Method) member).getReturnType();\n                 } else {\n-                    member = meta.getDescribedType().getDeclaredField(name);\n+                    member = (Field) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getDeclaredFieldAction(\n+                            meta.getDescribedType(), name));\n                     type = ((Field) member).getType();\n                 }\n             } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException)e).getException();\n                 throw getException(_loc.get(\"invalid-attr\", name, meta), e);\n             }\n "},{"sha":"fbcb94a61ed707fa1d28d4f1cae90155cb31b1aa","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -30,6 +30,7 @@\n import java.lang.reflect.Constructor;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.security.AccessController;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -45,6 +46,7 @@\n import org.xml.sax.helpers.DefaultHandler;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.lib.util.Base16Encoder;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.xml.XMLFactory;\n import org.apache.openjpa.lib.xml.XMLWriter;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -78,7 +80,10 @@ public XMLFileHandler(XMLConfiguration conf) {\n      */\n     public Collection load(ClassMetaData meta) {\n         File f = getFile(meta);\n-        if (!f.exists() || f.length() == 0)\n+        if (!((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( f ))).booleanValue() || \n+            ((Long)AccessController.doPrivileged( \n+            J2DoPrivHelper.lengthAction( f ))).longValue() == 0)\n             return Collections.EMPTY_SET;\n         try {\n             return read(f);\n@@ -128,8 +133,10 @@ public void store(ClassMetaData meta, Collection datas) {\n             throw new InternalException();\n \n         File f = getFile(meta);\n-        if (!f.getParentFile().exists())\n-            f.getParentFile().mkdirs();\n+        if (!((Boolean)AccessController.doPrivileged( \n+            J2DoPrivHelper.existsAction( f.getParentFile() ))).booleanValue())\n+            AccessController.doPrivileged( \n+                J2DoPrivHelper.mkdirsAction( f.getParentFile() ));\n \n         FileWriter fw = null;\n         try {"},{"sha":"9475a6c2101b8904abc84955fe9f900bac8669db","filename":"pom.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/0c517d163e355f85ca40673db15a991693bc2d4a/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0c517d163e355f85ca40673db15a991693bc2d4a/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=0c517d163e355f85ca40673db15a991693bc2d4a","patch":"@@ -211,6 +211,18 @@\n             </activation>\r\n         </profile>\r\n \r\n+        <profile>\r\n+            <id>enable-security</id>\r\n+            <activation>\r\n+                <activeByDefault>false</activeByDefault>\r\n+            </activation>\r\n+            <properties>\r\n+                <test.env>-Dtest.basedir=${basedir}/..</test.env>\r\n+                <policy.file>${basedir}/../openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy</policy.file>\r\n+                <surefire.jvm.args>-Djava.security.manager -Djava.security.policy=${policy.file} ${test.env}</surefire.jvm.args>\r\n+            </properties>\r\n+        </profile>\r\n+\r\n     </profiles>\r\n \r\n     <repositories>\r\n@@ -277,6 +289,7 @@\n                     <artifactId>maven-surefire-plugin</artifactId>\r\n                     <version>2.2</version>\r\n                     <configuration>\r\n+                        <argLine>${surefire.jvm.args}</argLine>\r\n                         <useFile>false</useFile>\r\n                         <trimStackTrace>false</trimStackTrace>\r\n                         <useSystemClassLoader>true</useSystemClassLoader>\r"}]}

