{"sha":"0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjNzZiMjVlZjU3YjEwNzliY2NjYmM1ZjdhZTNkY2UxN2EyMWM1ZTc=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-02-24T16:01:26Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-02-24T16:01:26Z"},"message":"OPENJPA-1529 Committing L2 shared cache mode test cases contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@915838 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fbdc53a28f936f78a6faeaad27d033f712d788c","url":"https://api.github.com/repos/apache/openjpa/git/trees/1fbdc53a28f936f78a6faeaad27d033f712d788c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","html_url":"https://github.com/apache/openjpa/commit/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/comments","author":null,"committer":null,"parents":[{"sha":"05e0669c0725cb01d125af9cc04032e2bc834990","url":"https://api.github.com/repos/apache/openjpa/commits/05e0669c0725cb01d125af9cc04032e2bc834990","html_url":"https://github.com/apache/openjpa/commit/05e0669c0725cb01d125af9cc04032e2bc834990"}],"stats":{"total":637,"additions":626,"deletions":11},"files":[{"sha":"b24f768c83bd13524cb35a67665f5f3fcc9eb696","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheTestCase.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheTestCase.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.persistence.cache.jpa;\n \n import java.lang.reflect.Modifier;\n+import java.util.Map;\n+import java.util.Set;\n \n import javax.persistence.EntityManager;\n \n@@ -60,13 +62,21 @@ public void populate() throws IllegalAccessException, InstantiationException {\n         em.close();\n     }\n \n-    public OpenJPAEntityManagerFactorySPI createEntityManagerFactory(String puName) {\n+    public OpenJPAEntityManagerFactorySPI createEntityManagerFactory(String puName,\n+        Map<String, Object> additionalProperties) {\n+        Map<String, Object> propertiesMap = getPropertiesMap(\"openjpa.DataCache\", \"true\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\", persistentTypes, \n+            \"openjpa.jdbc.JDBCListeners\", new JDBCListener [] { getListener() });\n+        if (additionalProperties != null) {\n+            Set<String> keys = additionalProperties.keySet();\n+            for (String key : keys) {\n+                propertiesMap.put(key, additionalProperties.get(key));\n+            }\n+        }\n         OpenJPAEntityManagerFactorySPI emf =\n             (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(puName,\n-                \"META-INF/caching-persistence.xml\", getPropertiesMap(\"openjpa.DataCache\", \"true\",\n-                    \"openjpa.QueryCache\", \"true\",\n-                    \"openjpa.RemoteCommitProvider\", \"sjvm\", persistentTypes, \n-                    \"openjpa.jdbc.JDBCListeners\", new JDBCListener [] { getListener() } ));\n+                \"META-INF/caching-persistence.xml\", propertiesMap );\n         return emf;\n     }\n "},{"sha":"f6746ac710d2817181a503571de4d77a512c2a59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -39,7 +39,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-all\");\n+            emf = createEntityManagerFactory(\"cache-mode-all\",null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"787498ed622560d164e1e115c9f590dc3e200076","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -47,7 +47,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-disable\");\n+            emf = createEntityManagerFactory(\"cache-mode-disable\", null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"d3ccf33e4d7c618d3ca3db901f0dbf827a4bdec5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -38,7 +38,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-empty\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"5ec5bacb80302c983ffd10a8eda8f6a1ea3dfc5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -47,7 +47,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-enable\");\n+            emf = createEntityManagerFactory(\"cache-mode-enable\", null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"57220c059ef3515adb6d4977cc902787b00ce71c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeInvalid.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeInvalid.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeInvalid.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeInvalid.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+public class TestCacheModeInvalid extends AbstractCacheTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    \n+    @Override\n+    public void setUp() {}\n+    \n+    public void testInvalidElement() {\n+        try {\n+            Map<String, Object> propertiesMap = getPropertiesMap(\"openjpa.DataCache\", \"true\",\n+                \"openjpa.QueryCache\", \"true\",\n+                \"openjpa.RemoteCommitProvider\", \"sjvm\", persistentTypes, \n+                \"openjpa.jdbc.JDBCListeners\", new JDBCListener [] { getListener() });\n+            emf = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\"cache-mode-invalid\",\n+                \"META-INF/caching-persistence-invalid.xml\", propertiesMap );\n+        } catch (Throwable e) {\n+            assertException(e, org.apache.openjpa.util.GeneralException.class);\n+            String msg = e.getMessage();\n+            assertTrue(msg.contains(\"org.xml.sax.SAXException\"));\n+        }\n+    }\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        return null;\n+    }\n+\n+    @Override\n+    public JDBCListener getListener() {\n+        return null;\n+    }\n+ \n+}"},{"sha":"0d7c01446a3ef6516e90ad5596d28f1d30c92757","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -39,7 +39,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-none\");\n+            emf = createEntityManagerFactory(\"cache-mode-none\",null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"dc0f7f952e8093536a2a909ee09e1919ec8a3b66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -38,7 +38,7 @@\n     @Override\n     public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n         if (emf == null) {\n-            emf = createEntityManagerFactory(\"cache-mode-unspecified\");\n+            emf = createEntityManagerFactory(\"cache-mode-unspecified\", null);\n             assertNotNull(emf);\n             cache = emf.getCache();\n             assertNotNull(cache);"},{"sha":"7fd2a3c6653b71e2fffd1150b1d748b2cc93bbf3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeAll.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeAll.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeAll.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeAll.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPropertyCacheModeAll extends AbstractCacheModeTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache = persistentTypes;\n+    private static Class<?>[] expectedNotInCache = {};\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"ALL\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\",propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+    \n+    public List<String> getSql() { \n+        return sql;\n+    }\n+    \n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, true);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+}"},{"sha":"93ed63de18cea0da485a688e382e123e7b92366a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeDisableSelective.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeDisableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeDisableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeDisableSelective.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.CacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.NegatedUncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UnspecifiedEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlCacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlUncacheableEntity;\n+\n+public class TestPropertyCacheModeDisableSelective extends AbstractCacheModeTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache =\n+        { CacheableEntity.class, XmlCacheableEntity.class, NegatedUncacheableEntity.class, UnspecifiedEntity.class, };\n+    private static Class<?>[] expectedNotInCache =\n+        { UncacheableEntity.class, XmlUncacheableEntity.class, };\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"DISABLE_SELECTIVE\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+    \n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+}"},{"sha":"dec116fbeca53358aa99b56c4fb10280fe9d1b0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeEnableSelective.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeEnableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeEnableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeEnableSelective.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.CacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.NegatedUncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UnspecifiedEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlCacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlUncacheableEntity;\n+\n+public class TestPropertyCacheModeEnableSelective extends AbstractCacheModeTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+\n+    private static Class<?>[] expectedInCache =\n+        { CacheableEntity.class, XmlCacheableEntity.class, NegatedUncacheableEntity.class, };\n+    private static Class<?>[] expectedNotInCache =\n+        { UncacheableEntity.class, XmlUncacheableEntity.class, UnspecifiedEntity.class, };\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"ENABLE_SELECTIVE\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+    \n+    // =======================================================================\n+    // Tests\n+    // =======================================================================\n+    \n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, false);\n+    }\n+\n+}"},{"sha":"facd7a446dc461f0ff481c2a39db53d66853e4d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeInvalid.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeInvalid.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeInvalid.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeInvalid.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPropertyCacheModeInvalid extends AbstractCacheTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    \n+    @Override\n+    public void setUp() {}\n+    \n+    public void testInvalidPropertyValue() {\n+        try {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"INVALID\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\",propertyMap);\n+        } catch (Throwable e) {\n+            assertException(e, java.lang.IllegalArgumentException.class);\n+            String msg = e.getMessage();\n+            assertTrue(msg.contains(\"javax.persistence.SharedCacheMode.INVALID\"));\n+        }\n+    }\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        return null;\n+    }\n+\n+    @Override\n+    public JDBCListener getListener() {\n+        return null;\n+    }\n+ \n+}"},{"sha":"0504d705746f80abfed97af90aecfc145303ce0f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeNone.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeNone.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeNone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeNone.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPropertyCacheModeNone extends AbstractCacheModeTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache = {}; \n+    private static Class<?>[] expectedNotInCache = persistentTypes;\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"NONE\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+    \n+    @Override\n+    public boolean getCacheEnabled() {\n+        return false;\n+    }\n+\n+    public void testCacheables() {\n+        assertCacheables(cache, false);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, false);\n+    }\n+    \n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+\n+}"},{"sha":"2c817778e64739c657e0876aabe2a6977df3cff2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeUnspecified.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeUnspecified.java","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeUnspecified.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestPropertyCacheModeUnspecified.java?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPropertyCacheModeUnspecified extends AbstractCacheModeTestCase {\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache = persistentTypes;\n+    private static Class<?>[] expectedNotInCache = {};\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            Map<String, Object> propertyMap = new HashMap<String, Object>();\n+            propertyMap.put(\"javax.persistence.sharedCache.mode\", \"UNSPECIFIED\");\n+            emf = createEntityManagerFactory(\"cache-mode-empty\", propertyMap);\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+    \n+    public List<String> getSql() { \n+        return sql;\n+    }\n+    \n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, true);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+}"},{"sha":"c01f83e6202174b088494a334da8a1f7d71dcbb6","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence-invalid.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence-invalid.xml","raw_url":"https://github.com/apache/openjpa/raw/0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence-invalid.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence-invalid.xml?ref=0c76b25ef57b1079bcccbc5f7ae3dce17a21c5e7","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" \n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n+    version=\"2.0\">\n+    <!--  Caching Persistence Units -->\n+    <persistence-unit name=\"cache-mode-invalid\">\n+        <mapping-file>META-INF/caching-orm.xml</mapping-file>\n+        <shared-cache-mode>INVALID</shared-cache-mode>\n+        <properties>\n+            <!-- Connection info is passed in via system properties -->\n+            <!-- Cache configuration ie openjpa.DataCache is passed in at EMF initialization -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+</persistence>"}]}

