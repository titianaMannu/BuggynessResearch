{"sha":"0ca38be72735a1b9340a519f46f9d969b6c4bf5d","node_id":"MDY6Q29tbWl0MjA2MzY0OjBjYTM4YmU3MjczNWExYjkzNDBhNTE5ZjQ2ZjlkOTY5YjZjNGJmNWQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2013-01-08T02:40:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2013-01-08T02:40:07Z"},"message":"OPENJPA-2320: Remove static initializers because recursive Predicate constructor deadlocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1430117 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"50e367cf182ec2126e4bc5fac9cadf8534608fdb","url":"https://api.github.com/repos/apache/openjpa/git/trees/50e367cf182ec2126e4bc5fac9cadf8534608fdb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0ca38be72735a1b9340a519f46f9d969b6c4bf5d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0ca38be72735a1b9340a519f46f9d969b6c4bf5d","html_url":"https://github.com/apache/openjpa/commit/0ca38be72735a1b9340a519f46f9d969b6c4bf5d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0ca38be72735a1b9340a519f46f9d969b6c4bf5d/comments","author":null,"committer":null,"parents":[{"sha":"58f24badcc742831bafe728912ba9ffb9867324e","url":"https://api.github.com/repos/apache/openjpa/commits/58f24badcc742831bafe728912ba9ffb9867324e","html_url":"https://github.com/apache/openjpa/commit/58f24badcc742831bafe728912ba9ffb9867324e"}],"stats":{"total":45,"additions":30,"deletions":15},"files":[{"sha":"9e6fdb459ddb79a90581387ad8d17dd9f8c713f8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/0ca38be72735a1b9340a519f46f9d969b6c4bf5d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0ca38be72735a1b9340a519f46f9d969b6c4bf5d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java?ref=0ca38be72735a1b9340a519f46f9d969b6c4bf5d","patch":"@@ -332,7 +332,7 @@ public Predicate isTrue(Expression<Boolean> x) {\n         if (x instanceof PredicateImpl) {\n             PredicateImpl predicate = (PredicateImpl)x; \n             if (predicate.isEmpty()) {\n-                return predicate.getOperator() == BooleanOperator.AND ? PredicateImpl.TRUE : PredicateImpl.FALSE;\n+                return predicate.getOperator() == BooleanOperator.AND ? PredicateImpl.TRUE() : PredicateImpl.FALSE();\n             }\n         }\n         return new Expressions.Equal(x, true);\n@@ -403,9 +403,9 @@ public Predicate like(Expression<String> x, String pattern, char escapeChar) {\n \n     public <T> Expression<T> literal(T value) {\n         if (Boolean.TRUE.equals(value))\n-            return (Expression<T>)PredicateImpl.TRUE;\n+            return (Expression<T>)PredicateImpl.TRUE();\n         if (Boolean.FALSE.equals(value))\n-            return (Expression<T>)PredicateImpl.FALSE;\n+            return (Expression<T>)PredicateImpl.FALSE();\n         return new Expressions.Constant<T>(value);\n     }\n "},{"sha":"b5e49ac64b4a8ccc5b7cf030aeb92d96e5980423","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":27,"deletions":12,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/0ca38be72735a1b9340a519f46f9d969b6c4bf5d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0ca38be72735a1b9340a519f46f9d969b6c4bf5d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=0ca38be72735a1b9340a519f46f9d969b6c4bf5d","patch":"@@ -45,17 +45,13 @@\n  * @since 2.0.0\n  */\n abstract class PredicateImpl extends ExpressionImpl<Boolean> implements Predicate {\n-    private static final ExpressionImpl<Integer> ONE  = new Expressions.Constant<Integer>(1);\n-    public static final Predicate TRUE  = new Expressions.Equal(ONE,ONE);\n-    public static final Predicate FALSE = new Expressions.NotEqual(ONE,ONE);\n+    private static Predicate TRUE;\n+    private static Predicate FALSE;\n     \n     protected final List<Predicate> _exps = Collections.synchronizedList(new ArrayList<Predicate>());\n     private final BooleanOperator _op;\n     private boolean _negated = false;\n     \n-    static {\n-    \tSystem.err.println(\"WARNING: You are using a unofficial version of PredicateImpl.class\");\n-    }\n     /**\n      * An AND predicate with no arguments.\n      */\n@@ -76,17 +72,20 @@ protected PredicateImpl(BooleanOperator op) {\n      */\n     protected PredicateImpl(BooleanOperator op, Predicate...restrictions) {\n         this(op);\n-        if (restrictions != null) {\n-            for (Predicate p : restrictions)\n-                add(p);\n-        }\n+        if (restrictions == null || restrictions.length == 0) return;\n+        \n+    \tfor (Predicate p : restrictions) {\n+   \t\t\tadd(p);\n+    \t}\n     }\n \n     /**\n      * Adds the given predicate expression.\n      */\n     public PredicateImpl add(Expression<Boolean> s) {\n-        _exps.add((Predicate)s); // all boolean expressions are Predicate\n+    \tsynchronized (_exps) {\n+        \t_exps.add((Predicate)s); // all boolean expressions are Predicate\n+\t\t}\n         return this;\n     }\n \n@@ -130,6 +129,22 @@ protected PredicateImpl markNegated() {\n         return this;\n     }\n     \n+    public static Predicate TRUE() {\n+    \tif (TRUE == null) {\n+    \t    ExpressionImpl<Integer> ONE  = new Expressions.Constant<Integer>(1);\n+    \t\tTRUE = new Expressions.Equal(ONE, ONE);\n+    \t}\n+    \treturn TRUE;\n+    }\n+    \n+    public static Predicate FALSE() {\n+    \tif (FALSE == null) {\n+    \t    ExpressionImpl<Integer> ONE  = new Expressions.Constant<Integer>(1);\n+    \t\tFALSE = new Expressions.NotEqual(ONE, ONE);\n+    \t}\n+    \treturn FALSE;\n+    }\n+    \n     @Override\n     org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         if (_exps.isEmpty()) {\n@@ -141,7 +156,7 @@ protected PredicateImpl markNegated() {\n     @Override\n     org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         if (_exps.isEmpty()) {\n-            Predicate nil = _op == BooleanOperator.AND ? TRUE : FALSE;\n+            Predicate nil = _op == BooleanOperator.AND ? TRUE() : FALSE();\n             return ((PredicateImpl)nil).toKernelExpression(factory, q);\n         }\n         if (_exps.size() == 1) {"}]}

