{"sha":"0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkMGRhZWQyY2JiOTI2ODRlYzVmOGNlZjA5ZWMxZDBlNzVkNDI1MDI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T22:18:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T22:18:32Z"},"message":"Literal value for empty disjunction and conjunction \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@836023 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"977dfb238fa515e37c206983d94829b7129ef9c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/977dfb238fa515e37c206983d94829b7129ef9c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","html_url":"https://github.com/apache/openjpa/commit/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/comments","author":null,"committer":null,"parents":[{"sha":"6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","url":"https://api.github.com/repos/apache/openjpa/commits/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","html_url":"https://github.com/apache/openjpa/commit/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b"}],"stats":{"total":142,"additions":94,"deletions":48},"files":[{"sha":"83d7125a6406c3c35671fcadc81df04984160afd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","status":"modified","additions":30,"deletions":41,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java?ref=0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","patch":"@@ -100,54 +100,44 @@ void setDictionary() {\n         } \n     }\n \n-    /**\n-     * Executes the given CriteriaQuery and JPQL string and compare their respective SQLs for equality.\n-     */\n-    void assertEquivalence(CriteriaQuery<?> c, String jpql, String expectedSQL) {\n-        assertEquivalence(c, jpql, null, null, expectedSQL);\n-    }\n-\n     /**\n      * Executes the given CriteriaQuery and JPQL string and compare their respective SQLs for equality.\n      */\n     void assertEquivalence(CriteriaQuery<?> c, String jpql) {\n-        System.err.println(\"JPQL :\" + jpql);\n-        System.err.println(\"CJQL :\" + ((CriteriaQueryImpl<?>)c).toCQL());\n-        assertEquivalence(c, jpql, null, null, null);\n+        assertEquivalence(null, c, jpql, null);\n     }\n-\n+    \n     /**\n-     * Executes the given CriteriaQuery and JPQL string and compare their respective SQLs for equality. Sets the\n-     * supplied parameters, if any.\n+     * Executes the given CriteriaQuery and JPQL string and compare their respective SQLs for equality\n+     * with the expected SQL.\n      */\n-    void assertEquivalence(CriteriaQuery<?> c, String jpql, String[] paramNames, Object[] params) {\n-        assertEquivalence(c, jpql, paramNames, params, null);\n+    void assertEquivalence(CriteriaQuery<?> c, String jpql, String expectedSQL) {\n+        assertEquivalence(null, c, jpql, expectedSQL);\n     }\n     \n     /**\n-     * Executes the given CriteriaQuery and JPQL string and compare their respective SQLs for equality. Sets the\n-     * supplied parameters, if any.\n+     * Executes the given CriteriaQuery and JPQL string after decorating with the given decorator,\n+     * and then compare their respective SQLs for equality.\n      */\n-    void assertEquivalence(CriteriaQuery<?> c, String jpql, String[] paramNames, Object[] params,\n-        String expectedSQL) {\n-        Query cQ = getEntityManager().createQuery(c);\n-        Query jQ = getEntityManager().createQuery(jpql);\n-        setParameters(cQ, paramNames, params);\n-        setParameters(jQ, paramNames, params);\n-\n-        executeAndCompareSQL(jpql, cQ, jQ, expectedSQL);\n+    void assertEquivalence(QueryDecorator decorator, CriteriaQuery<?> c, String jpql) {\n+        assertEquivalence(decorator, c, jpql, null);\n     }\n \n     /**\n-     * Executes the given CriteriaQuery and JPQL string and compare their respective SQLs for equality.\n+     * Executes the given CriteriaQuery and JPQL string and compare their respective SQLs for equality. \n+     * Decorates the query with the given decorator before execution.\n+     * supplied parameters, if any.\n      */\n-    void assertEquivalence(CriteriaQuery<?> c, String jpql, Object[] params) {\n-        Query jQ = getEntityManager().createQuery(jpql);\n+    void assertEquivalence(QueryDecorator decorator, CriteriaQuery<?> c, String jpql, String expectedSQL) {\n+        System.err.println(\"JPQL:[\" + jpql + \"]\");\n+        System.err.println(\"CQL :[\" + ((OpenJPACriteriaQuery<?>)c).toCQL());\n         Query cQ = getEntityManager().createQuery(c);\n-        setParameters(cQ, params);\n-        setParameters(jQ, params);\n-\n-        executeAndCompareSQL(jpql, cQ, jQ, null);\n+        Query jQ = getEntityManager().createQuery(jpql);\n+        if (decorator != null) {\n+            decorator.decorate(cQ);\n+            decorator.decorate(jQ);\n+        }\n+        executeAndCompareSQL(jpql, cQ, jQ, expectedSQL);\n     }\n \n     /**\n@@ -308,15 +298,6 @@ void printSQL(String header, List<String> sqls) {\n         }\n     }\n \n-    void setParameters(Query q, String[] paramNames, Object[] params) {\n-        for (int i = 0; paramNames != null && i < paramNames.length; i++)\n-            q.setParameter(paramNames[i], params[i]);\n-    }\n-\n-    void setParameters(Query q, Object[] params) {\n-        for (int i = 0; params != null && i < params.length; i++)\n-            q.setParameter(i + 1, params[i]);\n-    }\n \n     /**\n      * Execute the given query and return the generated SQL. If the query execution fail because the generated SQL is\n@@ -405,4 +386,12 @@ void clear() {\n             return new ArrayList<String>(sqls);\n         }\n     }\n+    \n+    /**\n+     * Interface to decorate a query such as set parameter or range before execution.\n+     *\n+     */\n+    public interface QueryDecorator {\n+        void decorate(Query q);\n+    }\n }"},{"sha":"96ced562cdc4196d96ff207774aec060417ca6da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","status":"modified","additions":33,"deletions":6,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","raw_url":"https://github.com/apache/openjpa/raw/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java?ref=0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","patch":"@@ -198,12 +198,21 @@ public void testEditParameterizedPredicate() {\n         Root<Person> p = c.from(Person.class);\n         c.where(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p1\")));\n         \n-        assertEquivalence(c, jpql, new String[]{\"p1\"}, new String[]{\"XYZ\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"p1\", \"XYZ\");\n+            }\n+        }, c, jpql);\n         \n         Predicate where = c.getRestriction();\n         c.where(cb.and(where, cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p2\"))));\n         \n-        assertEquivalence(c, editedjpql, new String[]{\"p1\", \"p2\"}, new String[]{\"MNO\", \"ABC\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"p1\", \"MNO\");\n+                q.setParameter(\"p2\", \"ABC\");\n+            }\n+        }, c, editedjpql);\n     }\n     \n     public void testEditParameterizedPredicateReplaced() {\n@@ -215,11 +224,20 @@ public void testEditParameterizedPredicateReplaced() {\n         c.where(cb.and(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p1\")),\n                        cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p2\"))));\n         assertEquals(2,c.getParameters().size());\n-        assertEquivalence(c, jpql, new String[]{\"p1\", \"p2\"}, new String[]{\"XYZ\", \"ABC\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"p1\", \"XYZ\");\n+                q.setParameter(\"p2\", \"ABC\");\n+            }\n+        }, c, jpql);\n         \n         c.where(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p3\")));\n         \n-        assertEquivalence(c, editedjpql, new String[]{\"p3\"}, new String[]{\"MNO\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"p3\", \"MNO\");\n+            }\n+        }, c, editedjpql);\n     }\n     \n     public void testEditParameterizedPredicateRemoved() {\n@@ -231,11 +249,20 @@ public void testEditParameterizedPredicateRemoved() {\n         c.where(cb.and(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p1\")),\n                        cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p2\"))));\n         assertEquals(2,c.getParameters().size());\n-        assertEquivalence(c, jpql, new String[]{\"p1\", \"p2\"}, new String[]{\"XYZ\", \"ABC\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"p1\", \"XYZ\");\n+                q.setParameter(\"p2\", \"ABC\");\n+            }\n+        }, c, jpql);\n         \n         c.where(cb.equal(p.get(Person_.name), cb.parameter(String.class, \"p1\")));\n         \n-        assertEquivalence(c, editedjpql, new String[]{\"p1\"}, new String[]{\"MNO\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"p1\", \"MNO\");\n+            }\n+        }, c, editedjpql);\n     }\n     \n     public void testSerachWithinResult() {"},{"sha":"3f6f922100e4e708a89d3f1833f5e074bef3f701","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","patch":"@@ -1374,4 +1374,19 @@ public void decorate(Query q) {\n         }, c, jpql);\n     }\n \n+    public void testEmptyAnd() {\n+        CriteriaQuery<Order> c = cb.createQuery(Order.class);\n+        Root<Order> order = c.from(Order.class);\n+        c.where(cb.and(cb.not(cb.equal(order.get(Order_.customer).get(Customer_.name), \"Robert E. Bissett\")),\n+                cb.isTrue(cb.conjunction())));\n+        em.createQuery(c).getResultList();\n+    }\n+    \n+    public void testEmptyOr() {\n+        CriteriaQuery<Order> c = cb.createQuery(Order.class);\n+        Root<Order> order = c.from(Order.class);\n+        c.where(cb.and(cb.not(cb.equal(order.get(Order_.customer).get(Customer_.name), \"Robert E. Bissett\")),\n+                cb.isTrue(cb.disjunction())));\n+        em.createQuery(c).getResultList();\n+    }\n }"},{"sha":"d549c41c713c3e32d974ee85e0c29555b2a139ca","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java?ref=0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","patch":"@@ -39,6 +39,7 @@\n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Selection;\n import javax.persistence.criteria.Subquery;\n+import javax.persistence.criteria.Predicate.BooleanOperator;\n import javax.persistence.metamodel.Attribute;\n import javax.persistence.metamodel.ManagedType;\n import javax.persistence.metamodel.Metamodel;\n@@ -328,7 +329,13 @@ public Predicate isFalse(Expression<Boolean> x) {\n     }\n \n     public Predicate isTrue(Expression<Boolean> x) {\n-        return new Expressions.Equal(x, false);\n+        if (x instanceof PredicateImpl) {\n+            PredicateImpl predicate = (PredicateImpl)x; \n+            if (predicate.isEmpty()) {\n+                return predicate.getOperator() == BooleanOperator.AND ? PredicateImpl.TRUE : PredicateImpl.FALSE;\n+            }\n+        }\n+        return new Expressions.Equal(x, true);\n     }\n \n     public <K, M extends Map<K, ?>> Expression<Set<K>> keys(M map) {"},{"sha":"654ba506788f7b54a30fea7b15c9d06f34648c8c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0d0daed2cbb92684ec5f8cef09ec1d0e75d42502/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=0d0daed2cbb92684ec5f8cef09ec1d0e75d42502","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.criteria.Predicate;\n \n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n+import org.apache.openjpa.kernel.exps.Literal;\n \n /**\n  * Predicate is a expression that evaluates to true or false.\n@@ -96,6 +97,10 @@ public PredicateImpl add(Expression<Boolean> s) {\n     public final BooleanOperator getOperator() {\n         return _op;\n     }\n+    \n+    public final boolean isEmpty() {\n+        return _exps.isEmpty();\n+    }\n \n     /**\n      * Is this predicate created by negating another predicate?\n@@ -123,6 +128,9 @@ protected PredicateImpl markNegated() {\n     \n     @Override\n     org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        if (_exps.isEmpty()) {\n+            return factory.newLiteral(_op == BooleanOperator.AND, Literal.TYPE_BOOLEAN);\n+        }\n         throw new AbstractMethodError(this.getClass().getName());\n     }\n     "}]}

