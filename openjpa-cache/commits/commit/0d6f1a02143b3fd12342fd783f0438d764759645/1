{"sha":"0d6f1a02143b3fd12342fd783f0438d764759645","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkNmYxYTAyMTQzYjNmZDEyMzQyZmQ3ODNmMDQzOGQ3NjQ3NTk2NDU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-05-28T20:45:27Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-05-28T20:45:27Z"},"message":"OPENJPA-1054. Added testcase for callable statements and fixed typo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@779764 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61d01422af4fec681d13a4834e12ac7f86320c7b","url":"https://api.github.com/repos/apache/openjpa/git/trees/61d01422af4fec681d13a4834e12ac7f86320c7b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0d6f1a02143b3fd12342fd783f0438d764759645","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0d6f1a02143b3fd12342fd783f0438d764759645","html_url":"https://github.com/apache/openjpa/commit/0d6f1a02143b3fd12342fd783f0438d764759645","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0d6f1a02143b3fd12342fd783f0438d764759645/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3c88ac3d20d871db3535a06d04735a9f7d2a7874","url":"https://api.github.com/repos/apache/openjpa/commits/3c88ac3d20d871db3535a06d04735a9f7d2a7874","html_url":"https://github.com/apache/openjpa/commit/3c88ac3d20d871db3535a06d04735a9f7d2a7874"}],"stats":{"total":45,"additions":42,"deletions":3},"files":[{"sha":"1249a3003065b12e48e7c0817c55388c156de18b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/0d6f1a02143b3fd12342fd783f0438d764759645/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/0d6f1a02143b3fd12342fd783f0438d764759645/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=0d6f1a02143b3fd12342fd783f0438d764759645","patch":"@@ -594,7 +594,8 @@ else if (rsType == -1)\n             setParameters(stmnt);\n             if (fetch != null) {\n                 if (fetch.getFetchBatchSize() > 0)\n-                    stmnt.setFetchSize(fetch.getFetchBatchSize());\n+                    stmnt.setFetchSize(\n+                        _dict.getBatchFetchSize(fetch.getFetchBatchSize()));\n                 if (rsType != ResultSet.TYPE_FORWARD_ONLY\n                     && fetch.getFetchDirection() != ResultSet.FETCH_FORWARD)\n                     stmnt.setFetchDirection(fetch.getFetchDirection());"},{"sha":"5bf5fcbdecf1f57af22af6b75c67fd7f7aa96d0a","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestMySQLDictionary.java","status":"modified","additions":40,"deletions":2,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/0d6f1a02143b3fd12342fd783f0438d764759645/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestMySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0d6f1a02143b3fd12342fd783f0438d764759645/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestMySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestMySQLDictionary.java?ref=0d6f1a02143b3fd12342fd783f0438d764759645","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -33,10 +34,12 @@ public void testDBDictionaryGetBatchFetchSize() throws Exception {\n         assertEquals(Integer.MIN_VALUE, db.getBatchFetchSize(1));\n     }\n \n+    \n+    \n     /**\n      * <P>\n-     * Ensure thaqt a connection obtained from a MySQLDictionary sets the\n-     * fetchBatchSize to Integer.MIN_VALUE\n+     * Ensure that <code>SQLBuffer.prepareStatement</code> calls \n+     * <code>setFetchSize(Integer.MIN_VALUE)</code> when using MySQL. \n      * </P>\n      * \n      * @throws Exception\n@@ -67,4 +70,39 @@ public void testPreparedStatementGetFetchBatchSize() throws Exception {\n \n         sql.prepareStatement(mockConnection, fetch, -1, -1);\n     }\n+    \n+    /**\n+     * <P>\n+     * Ensure that <code>SQLBuffer.prepareCall()</code> calls \n+     * <code>setFetchSize(Integer.MIN_VALUE)</code> when using MySQL. \n+     * </P>\n+     * \n+     * @throws Exception\n+     *             If any of the expectations are not met or any unexpected\n+     *             method calls are made\n+     */\n+    public void testPreparedCallGetFetchBatchSize() throws Exception {\n+        DBDictionary db = new MySQLDictionary();\n+        SQLBuffer sql = new SQLBuffer(db);\n+        \n+        final CallableStatement mockStatement = mock(CallableStatement.class);\n+        final Connection mockConnection = mock(Connection.class);\n+\n+        // Expected method calls on the mock objects above. If any of these are \n+        // do not occur, or if any other methods are invoked on the mock objects\n+        // an exception will be thrown and the test will fail. \n+        checking(new Expectations() {\n+            {\n+                oneOf(mockConnection).prepareCall(with(any(String.class)));\n+                will(returnValue(mockStatement));\n+                oneOf(mockStatement).setFetchSize(Integer.MIN_VALUE);\n+            }\n+        });\n+        \n+        JDBCFetchConfiguration fetch = new JDBCFetchConfigurationImpl();\n+        fetch.setResultSetType(ResultSet.TYPE_FORWARD_ONLY);\n+        fetch.setFetchBatchSize(1);\n+\n+        sql.prepareCall(mockConnection, fetch, -1, -1);\n+    }\n }"}]}

