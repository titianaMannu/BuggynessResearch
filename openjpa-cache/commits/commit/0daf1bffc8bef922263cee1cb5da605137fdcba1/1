{"sha":"0daf1bffc8bef922263cee1cb5da605137fdcba1","node_id":"MDY6Q29tbWl0MjA2MzY0OjBkYWYxYmZmYzhiZWY5MjIyNjNjZWUxY2I1ZGE2MDUxMzdmZGNiYTE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-04-16T23:24:07Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-04-16T23:24:07Z"},"message":"OPENJPA-1041: allow orderBy on nested embeddables\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@765800 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"76e15b3dabfbb6fe85138746f0f2c5904557447b","url":"https://api.github.com/repos/apache/openjpa/git/trees/76e15b3dabfbb6fe85138746f0f2c5904557447b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0daf1bffc8bef922263cee1cb5da605137fdcba1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0daf1bffc8bef922263cee1cb5da605137fdcba1","html_url":"https://github.com/apache/openjpa/commit/0daf1bffc8bef922263cee1cb5da605137fdcba1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0daf1bffc8bef922263cee1cb5da605137fdcba1/comments","author":null,"committer":null,"parents":[{"sha":"b2f74fcbd53ccdec9432015b2136463920c41185","url":"https://api.github.com/repos/apache/openjpa/commits/b2f74fcbd53ccdec9432015b2136463920c41185","html_url":"https://github.com/apache/openjpa/commit/b2f74fcbd53ccdec9432015b2136463920c41185"}],"stats":{"total":155,"additions":145,"deletions":10},"files":[{"sha":"8ae026f3c1c27f20af7a099d256820312f26ad1c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","raw_url":"https://github.com/apache/openjpa/raw/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JDBCRelatedFieldOrder.java?ref=0daf1bffc8bef922263cee1cb5da605137fdcba1","patch":"@@ -66,7 +66,9 @@ public boolean isInRelation() {\n     }\n \n     public void order(Select sel, ClassMapping elem, Joins joins) {\n-        FieldMapping fm = elem.getFieldMapping(_fm.getIndex());\n+        FieldMapping fm = _fm;\n+        if (elem != null)\n+            fm = elem.getFieldMapping(_fm.getIndex());\n         sel.orderBy(fm.getColumns(), _asc, joins, false);\n     }\n }"},{"sha":"94867401b3434c6f128d1a20fd98e185c3307a58","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=0daf1bffc8bef922263cee1cb5da605137fdcba1","patch":"@@ -874,13 +874,32 @@ protected Order newOrder(FieldMetaData owner, String name, boolean asc) {\n         if (meta == null)\n             throw new MetaDataException(_loc.get(\"nonpc-field-orderable\",\n                 owner, name));\n-        FieldMetaData rel = meta.getField(name);\n+        FieldMetaData rel = getOrderByField(meta, name);\n         if (rel == null)\n             throw new MetaDataException(_loc.get(\"bad-field-orderable\",\n                 owner, name));\n         return newRelatedFieldOrder(owner, rel, asc);\n     }\n \n+    \n+    public FieldMetaData getOrderByField(ClassMetaData meta, String orderBy) {\n+        FieldMetaData field = meta.getField(orderBy);\n+        if (field != null)\n+            return field;\n+        int dotIdx = orderBy.indexOf(\".\"); \n+        if ( dotIdx == -1)\n+            return null;\n+        String fieldName = orderBy.substring(0, dotIdx);\n+        FieldMetaData field1 = meta.getField(fieldName);\n+        if (field1 == null)\n+            return null;\n+        ClassMetaData meta1 = field1.getEmbeddedMetaData();\n+        if (meta1 == null)\n+            return null;\n+        String mappedBy1 = orderBy.substring(dotIdx + 1);\n+        return getOrderByField(meta1, mappedBy1);\n+    }  \n+    \n     /**\n      * Order by the field value.\n      */"},{"sha":"5e0be307b96cbe9a9e9bc3aa0444629fa959abc2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Address.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Address.java","raw_url":"https://github.com/apache/openjpa/raw/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Address.java?ref=0daf1bffc8bef922263cee1cb5da605137fdcba1","patch":"@@ -21,7 +21,7 @@\n import javax.persistence.*;\n \n @Entity\n-@Table(name=\"ADDR_ATTROVER\")\n+@Table(name=\"ADR_AO\")\n public class Address {\n     @Id int id;\n     @Column(length = 20)"},{"sha":"e67fcc01f0817cdde2351c191081661355aa3da2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Person.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Person.java","raw_url":"https://github.com/apache/openjpa/raw/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Person.java?ref=0daf1bffc8bef922263cee1cb5da605137fdcba1","patch":"@@ -0,0 +1,52 @@\n+package org.apache.openjpa.persistence.embed.attrOverrides;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Table;\n+\n+@Entity \n+@Table(name=\"PSN\")\n+public class Person {\n+    @Id \n+    protected String ssn;\n+    protected String name;\n+\n+    @ElementCollection\n+    @OrderBy(\"zipcode.zip, zipcode.plusFour\")\n+    protected List<Address> residences = new ArrayList<Address>();\n+    \n+    public String getSsn() {\n+        return ssn;\n+    }\n+    \n+    public void setSsn(String ssn) {\n+        this.ssn = ssn;\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public List<Address> getResidences() {\n+        return residences;\n+    }\n+    \n+    public void setResidences(List<Address> residences) {\n+        this.residences = residences;\n+    }\n+    \n+    public void addResidence(Address residence) {\n+        residences.add(residence);\n+    }\n+}\n+\n+"},{"sha":"f04dd0753a5374460de663175397cde1f1fc5f93","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverrides.java","status":"modified","additions":61,"deletions":1,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverrides.java","raw_url":"https://github.com/apache/openjpa/raw/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverrides.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverrides.java?ref=0daf1bffc8bef922263cee1cb5da605137fdcba1","patch":"@@ -36,7 +36,7 @@\n     public void setUp() throws Exception {\n         super.setUp(DROP_TABLES, Address.class, Customer.class, \n             PropertyInfo.class, PropertyOwner.class, PropertyRecord.class,\n-            Zipcode.class);\n+            Zipcode.class, Person.class);\n     }\n \n     /**\n@@ -63,6 +63,16 @@ public void testAttrOverride2() {\n         assertAttrOverrides(\"PROPREC_ATTROVER_parcels\");\n     }\n     \n+    /**\n+     * This is spec 10.1.35. Example 3\n+     * Test OrderBy on embeddable field\n+     */\n+    public void testEmbeddableOrderBy() {\n+        sql.clear();\n+        createObj3();\n+        findObj3();\n+    }\n+\n     public void createObj1() {\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();\n@@ -212,4 +222,54 @@ public void assertAttrOverrides(String tableName) {\n         if (!found)\n             fail();\n     }\n+    \n+    public void createObj3() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numPersons; i++)\n+            createPerson(em, eId++);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public Person createPerson(EntityManager em, int id) {\n+        Person p = new Person();\n+        p.setSsn(\"ssn\" + id);\n+        p.setName(\"name_\" + id);\n+    \n+        for (int i = 4; i > 0; i--) {\n+            Address addr = new Address();\n+            addr.setCity(\"city_\" + id + \"_\" + i );\n+            addr.setState(\"state_\" + id + \"_\"  + i);\n+            addr.setStreet(\"street_\" + id + \"_\"  + i);\n+            Zipcode zipCode = new Zipcode();\n+            zipCode.setZip(\"zip_\" + id + \"_\" + i);\n+            zipCode.setPlusFour(\"plusFour_\" + id + \"_\" + i);\n+            addr.setZipcode(zipCode);\n+            p.addResidence(addr);\n+        }\n+        em.persist(p);\n+        return p;\n+    }\n+\n+    public void findObj3() {\n+        EntityManager em = emf.createEntityManager();\n+        Person p = em.find(Person.class, \"ssn1\");\n+        List<Address> residences = p.getResidences();\n+        assertEquals(4, residences.size());\n+        int i = 1;\n+        for (Address a : residences) {\n+            String zip = a.getZipcode().getZip();\n+            String plusFour = a.getZipcode().getPlusFour();\n+            String expZip = \"zip_1_\";\n+            String expPlusFour = \"plusFour_1_\";\n+            expZip = expZip + i;\n+            expPlusFour = expPlusFour + i;\n+            assertEquals(expZip, zip);\n+            assertEquals(expPlusFour, plusFour);\n+            i++;\n+        }\n+   }\n }\n\\ No newline at end of file"},{"sha":"b34fe6d305743c564854428a1bf970beb7d4917a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Zipcode.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Zipcode.java","raw_url":"https://github.com/apache/openjpa/raw/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Zipcode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Zipcode.java?ref=0daf1bffc8bef922263cee1cb5da605137fdcba1","patch":"@@ -23,9 +23,9 @@\n \n @Embeddable\n public class Zipcode {\n-    @Column(length = 5)\n+    @Column(length = 20)\n \tprotected String zip;\n-    @Column(length = 4)\n+    @Column(length = 20)\n \tprotected String plusFour;\n \t\n \tpublic String getZip() {"},{"sha":"719f7728a8097a1f6354ec4f8b353c097de637ad","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/0daf1bffc8bef922263cee1cb5da605137fdcba1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=0daf1bffc8bef922263cee1cb5da605137fdcba1","patch":"@@ -1574,10 +1574,12 @@ private void parseElementCollection(FieldMetaData fmd,\n             fmd.getElement().setDeclaredType(anno.targetClass());\n         fmd.setInDefaultFetchGroup(anno.fetch() == FetchType.EAGER);\n         fmd.setElementCollection(true);\n-        if (JavaTypes.maybePC(fmd.getElement())) {\n-            fmd.getElement().setEmbedded(true);\n-            if (fmd.getElement().getEmbeddedMetaData() == null)\n-                fmd.getElement().addEmbeddedMetaData();\n+        ValueMetaData elem = fmd.getElement();\n+        boolean isEnum = elem.getDeclaredType().isEnum();\n+        if (!isEnum && JavaTypes.maybePC(elem)) {\n+            elem.setEmbedded(true);\n+            if (elem.getEmbeddedMetaData() == null)\n+                elem.addEmbeddedMetaData();\n         }\n     }\n     "}]}

