{"sha":"0e055fb013c5713be573c5088c18320dc16764d4","node_id":"MDY6Q29tbWl0MjA2MzY0OjBlMDU1ZmIwMTNjNTcxM2JlNTczYzUwODhjMTgzMjBkYzE2NzY0ZDQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-06-22T19:16:19Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-06-22T19:16:19Z"},"message":"OPENJPA-1119 committing patch from Rick Curtis.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@787359 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0409869ae2620ab4ca424edc010b759e364cf030","url":"https://api.github.com/repos/apache/openjpa/git/trees/0409869ae2620ab4ca424edc010b759e364cf030"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0e055fb013c5713be573c5088c18320dc16764d4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0e055fb013c5713be573c5088c18320dc16764d4","html_url":"https://github.com/apache/openjpa/commit/0e055fb013c5713be573c5088c18320dc16764d4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0e055fb013c5713be573c5088c18320dc16764d4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d389c4327bb23ce6ea261de45e0d2755e9b70431","url":"https://api.github.com/repos/apache/openjpa/commits/d389c4327bb23ce6ea261de45e0d2755e9b70431","html_url":"https://github.com/apache/openjpa/commit/d389c4327bb23ce6ea261de45e0d2755e9b70431"}],"stats":{"total":93,"additions":74,"deletions":19},"files":[{"sha":"37b9983f82663642acf548871005e8ebe8bec8f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","status":"modified","additions":66,"deletions":19,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/0e055fb013c5713be573c5088c18320dc16764d4/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0e055fb013c5713be573c5088c18320dc16764d4/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/InstrumentationFactory.java?ref=0e055fb013c5713be573c5088c18320dc16764d4","patch":"@@ -29,7 +29,11 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.security.AccessController;\n+import java.security.CodeSource;\n import java.security.PrivilegedAction;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarFile;\n+import java.util.jar.Manifest;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n \n@@ -193,30 +197,37 @@ private static File findToolsJar(Log log) {\n      * point to the OpenJPA jar. If running in a development environment a\n      * temporary jar file will be created.\n      * \n-     * @return absolute path to the agent jar.\n-     * @throws Exception\n-     *             if this method is unable to detect where this class was\n-     *             loaded from. It is unknown if this is actually possible.\n+     * @return absolute path to the agent jar or null if anything unexpected\n+     * happens.\n      */\n     private static String getAgentJar(Log log) {\n-        // Find the name of the jar that this class was loaded from. That\n+        File agentJarFile = null;\n+        // Find the name of the File that this class was loaded from. That\n         // jar *should* be the same location as our agent.\n-        File agentJarFile =\n-            new File(InstrumentationFactory.class.getProtectionDomain()\n-                .getCodeSource().getLocation().getFile());\n-        // We're deadmeat if we can't find a file that this class\n-        // was loaded from. Just return if this file doesn't exist.\n-        // Note: I'm not sure if this can really happen.\n-        if (agentJarFile.exists() == false) {\n-            if (log.isTraceEnabled() == true) {\n-                log.trace(_name + \".getAgentJar() -- Couldn't find where this \"\n-                    + \"class was loaded from!\");\n+        CodeSource cs =\n+            InstrumentationFactory.class.getProtectionDomain().getCodeSource();\n+        if (cs != null) {\n+            URL loc = cs.getLocation();\n+            if(loc!=null){\n+                agentJarFile = new File(loc.getFile());\n             }\n         }\n+        \n+        // Determine whether the File that this class was loaded from has this\n+        // class defined as the Agent-Class.\n+        boolean createJar = false;\n+        if (cs == null || agentJarFile == null\n+            || agentJarFile.isDirectory() == true) {\n+            createJar = true;\n+        }else if(validateAgentJarManifest(agentJarFile, log, _name) == false){\n+            // We have an agentJarFile, but this class isn't the Agent-Class.\n+            createJar=true;           \n+        }\n+        \n         String agentJar;\n-        if (agentJarFile.isDirectory() == true) {\n-            // This will happen when running in eclipse as an OpenJPA\n-            // developer. No one else should ever go down this path. We\n+        if (createJar == true) {\n+            // This can happen when running in eclipse as an OpenJPA\n+            // developer or for some reason the CodeSource is null. We\n             // should log a warning here because this will create a jar\n             // in your temp directory that doesn't always get cleaned up.\n             try {\n@@ -236,7 +247,7 @@ private static String getAgentJar(Log log) {\n         }\n \n         return agentJar;\n-    }\n+    }//end getAgentJar\n \n     /**\n      * Attach and load an agent class. \n@@ -304,4 +315,40 @@ private static void loadAgent(Log log, String agentJar, Class<?> vmClass) {\n         }\n         return null;\n     }\n+\n+    /**\n+     * This private worker method will validate that the provided agentClassName\n+     * is defined as the Agent-Class in the manifest file from the provided jar.\n+     * \n+     * @param agentJarFile\n+     *            non-null agent jar file.\n+     * @param log\n+     *            non-null logger.\n+     * @param agentClassName\n+     *            the non-null agent class name.\n+     * @return True if the provided agentClassName is defined as the Agent-Class\n+     *         in the manifest from the provided agentJarFile. False otherwise.\n+     */\n+    private static boolean validateAgentJarManifest(File agentJarFile, Log log,\n+        String agentClassName) {\n+        try {\n+            JarFile jar = new JarFile(agentJarFile);\n+            Manifest manifest = jar.getManifest();\n+            if (manifest == null) {\n+                return false;\n+            }\n+            Attributes attributes = manifest.getMainAttributes();\n+            String ac = attributes.getValue(\"Agent-Class\");\n+            if (ac != null && ac.equals(agentClassName)) {\n+                return true;\n+            }\n+        } catch (Exception e) {\n+            if (log.isTraceEnabled() == true) {\n+                log.trace(_name\n+                    + \".validateAgentJarManifest() caught unexpected \"\n+                    + \"exception \" + e.getMessage());\n+            }\n+        }\n+        return false;\n+    }// end validateAgentJarManifest   \n }"},{"sha":"e2ecde3ecba79d0b80e14fb0936ccfe001ab2f64","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/0e055fb013c5713be573c5088c18320dc16764d4/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/0e055fb013c5713be573c5088c18320dc16764d4/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=0e055fb013c5713be573c5088c18320dc16764d4","patch":"@@ -817,6 +817,14 @@\n                         -->\n \n                         <exclude>org/apache/openjpa/persistence/criteria/*.java</exclude>\n+                        \n+                        <!-- Exclude subclassing tests   -->\n+                        <exclude>org/apache/openjpa/**/TestUnenhanced*.java</exclude>\n+\n+                        <!-- Exclude tests that fail due to the dynamic enhancer -->\n+                        <exclude>org/apache/openjpa/enhance/TestEnhancementConfiguration.java</exclude>\n+                        <exclude>org/apache/openjpa/enhance/TestRelationToUnlistedClass.java</exclude>\n+                        <exclude>org/apache/openjpa/kernel/TestDynamicClassRegistration.java</exclude>\n                     </excludes>\n                     <systemProperties>\n                         <property>"}]}

