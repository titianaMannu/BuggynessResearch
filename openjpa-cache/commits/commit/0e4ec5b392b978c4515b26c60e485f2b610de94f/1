{"sha":"0e4ec5b392b978c4515b26c60e485f2b610de94f","node_id":"MDY6Q29tbWl0MjA2MzY0OjBlNGVjNWIzOTJiOTc4YzQ1MTViMjZjNjBlNDg1ZjJiNjEwZGU5NGY=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-02-14T14:06:50Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-02-14T14:06:50Z"},"message":"OPENJPA-2733 fix param index.\n\nAlso handle the case if the same Param gets registered multiple times.\nThis eg happens in case of a Criteria Subquery having the same parameter name.","tree":{"sha":"095f9d2bb7c0e0969631993b57e8ad32ea8c98a5","url":"https://api.github.com/repos/apache/openjpa/git/trees/095f9d2bb7c0e0969631993b57e8ad32ea8c98a5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0e4ec5b392b978c4515b26c60e485f2b610de94f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0e4ec5b392b978c4515b26c60e485f2b610de94f","html_url":"https://github.com/apache/openjpa/commit/0e4ec5b392b978c4515b26c60e485f2b610de94f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0e4ec5b392b978c4515b26c60e485f2b610de94f/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"80736f6e9d38dfb180c89cec6cb2916341165a5c","url":"https://api.github.com/repos/apache/openjpa/commits/80736f6e9d38dfb180c89cec6cb2916341165a5c","html_url":"https://github.com/apache/openjpa/commit/80736f6e9d38dfb180c89cec6cb2916341165a5c"}],"stats":{"total":190,"additions":139,"deletions":51},"files":[{"sha":"cb50be10be027bb26bf3352fb2d914adbe341cc0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=0e4ec5b392b978c4515b26c60e485f2b610de94f","patch":"@@ -919,7 +919,7 @@ private Object execute(int operation, Map params) {\n                 throw ke;\n             } catch (Exception e) {\n                 throw new UserException(_loc.get(\"query-execution-error\",\n-                \t\t_query), e);\n+                        _query), e);\n             } finally {\n                 _broker.endOperation();\n             }\n@@ -1306,7 +1306,7 @@ protected Object toResult(StoreQuery q, StoreQuery.Executor ex,\n         boolean detach = (_broker.getAutoDetach() &\n             AutoDetach.DETACH_NONTXREAD) > 0 && !_broker.isActive();\n         boolean lrs = range.lrs && !ex.isAggregate(q) && !ex.hasGrouping(q);\n-        ResultList<?> res = new ListResultList(Collections.emptyList());\n+        ResultList<?> res;\n         try {\n             res = (!detach && lrs) ? _fc.newResultList(rop) : new EagerResultList(rop);\n             res.setUserObject(new Object[]{rop,ex});"},{"sha":"ef1b72f61035536a4cf3ae95855ae8ba61840c2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java","raw_url":"https://github.com/apache/openjpa/raw/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java?ref=0e4ec5b392b978c4515b26c60e485f2b610de94f","patch":"@@ -37,16 +37,18 @@\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=\"CNT\")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=\"CNT\")\n+    private int count;\n \n-\t@OneToMany(mappedBy=\"order\")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=\"order\")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n "},{"sha":"b2547a8a377172eae8a3fb811853b6751c4cee68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","status":"modified","additions":70,"deletions":22,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","raw_url":"https://github.com/apache/openjpa/raw/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java?ref=0e4ec5b392b978c4515b26c60e485f2b610de94f","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public void testSubquery23() {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(\"delete from Order o where o.customer.name = 'Capricorn'\").executeUpdate();\n-        em.createQuery(\"delete from Order o\").executeUpdate();\n-        em.createQuery(\"delete from Customer c where c.name = 'Capricorn'\").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(\"John\");\n-        c1.setLastName(\"Doe\");\n-        c1.setName(\"Capricorn\");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, \"param1\");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, \"param2\"), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(\"param1\", \"Capricorn\");\n+        tq.setParameter(\"param2\", \"Doe\");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(\"CUSTOMERS: \"+em.createQuery(\"select count(c) from Customer c\").getFirstResult());\n-        // System.out.println(\"ORDERS: \"+em.createQuery(\"select count(c) from Order c\").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, \"param1\");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, \"param1\");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public void testSubquery24() {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public void testSubquery24() {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(\"John\");\n+        c1.setLastName(\"Doe\");\n+        c1.setName(\"Capricorn\");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(\"delete from Order o where o.customer.name = 'Capricorn'\").executeUpdate();\n+        em.createQuery(\"delete from Order o\").executeUpdate();\n+        em.createQuery(\"delete from Customer c where c.name = 'Capricorn'\").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }"},{"sha":"968b78dca8d121224273b29b7c7d400490e83fdb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java?ref=0e4ec5b392b978c4515b26c60e485f2b610de94f","patch":"@@ -674,7 +674,7 @@ public Predicate or(Predicate... restrictions) {\n \n     @Override\n     public Predicate or(Expression<Boolean> x, Expression<Boolean> y) {\n-    \treturn new PredicateImpl.Or(x,y);\n+        return new PredicateImpl.Or(x,y);\n     }\n \n     /**"},{"sha":"778ca72938652043d55449a41b79dfe334fdff14","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=0e4ec5b392b978c4515b26c60e485f2b610de94f","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashSet;\n@@ -44,7 +43,6 @@\n import javax.persistence.criteria.Subquery;\n import javax.persistence.metamodel.EntityType;\n \n-import org.apache.openjpa.kernel.StoreQuery;\n import org.apache.openjpa.kernel.exps.Context;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n@@ -74,7 +72,7 @@\n     private Set<Root<?>>        _roots;\n     private PredicateImpl       _where;\n     private List<Order>         _orders;\n-    private OrderedMap<Object, Class<?>> _params; /*<ParameterExpression<?>, Class<?>>*/\n+    private OrderedMap<Object, Class<?>> _params = new OrderedMap<>();\n     private Selection<? extends T> _selection;\n     private List<Selection<?>>  _selections;\n     private List<Expression<?>> _groups;\n@@ -115,14 +113,12 @@ public CriteriaQueryImpl(MetamodelImpl featureSelection, Class<T> resultClass) {\n      * @param featureSelection the metamodel defines the scope of all persistent entity references.\n      * @param delegator the subquery which will delegate to this receiver.\n      */\n-    CriteriaQueryImpl(MetamodelImpl featureSelection, SubqueryImpl<T> delegator, OrderedMap params) {\n+    CriteriaQueryImpl(MetamodelImpl featureSelection, SubqueryImpl<T> delegator, OrderedMap<Object, Class<?>> params) {\n         this._model = featureSelection;\n         this._resultClass = delegator.getJavaType();\n         _delegator = delegator;\n         _aliases = getAliases();\n-        if (params != null) {\n-            this._params = params;\n-        }\n+        _params = params;\n     }\n \n     /**\n@@ -237,7 +233,7 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n     @Override\n     public Set<ParameterExpression<?>> getParameters() {\n         collectParameters(new CriteriaExpressionVisitor.ParameterVisitor(this));\n-        return _params == null ? Collections.EMPTY_SET : (Set) _params.keySet();\n+        return (Set) _params.keySet();\n     }\n \n     /**\n@@ -266,9 +262,11 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n             _groups = null;\n             return this;\n         }\n+\n         _groups = new ArrayList<>();\n-        for (Expression<?> e : grouping)\n+        for (Expression<?> e : grouping) {\n             _groups.add(e);\n+        }\n         return this;\n     }\n \n@@ -720,14 +718,14 @@ void render(StringBuilder buffer, Set<Root<?>> roots, List<Join<?,?>> correlated\n     }\n \n     private void renderList(StringBuilder buffer, String clause, Collection<?> coll) {\n-    \tif (coll == null || coll.isEmpty())\n-    \t\treturn;\n+        if (coll == null || coll.isEmpty())\n+            return;\n \n-    \tbuffer.append(clause);\n-    \tfor (Iterator<?> i = coll.iterator(); i.hasNext(); ) {\n-    \t\tbuffer.append(((CriteriaExpression)i.next()).asValue(this));\n-    \t\tif (i.hasNext()) buffer.append(\", \");\n-    \t}\n+        buffer.append(clause);\n+        for (Iterator<?> i = coll.iterator(); i.hasNext(); ) {\n+            buffer.append(((CriteriaExpression)i.next()).asValue(this));\n+            if (i.hasNext()) buffer.append(\", \");\n+        }\n     }\n \n     private void renderJoins(StringBuilder buffer, Collection<Join<?,?>> joins) {"},{"sha":"89dda1e3364df91987a5d63342f096980f6eeb1e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","status":"modified","additions":40,"deletions":1,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java?ref=0e4ec5b392b978c4515b26c60e485f2b610de94f","patch":"@@ -107,7 +107,11 @@ public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         org.apache.openjpa.kernel.exps.Parameter param = isCollectionValued\n             ? factory.newCollectionValuedParameter(paramKey, clzz)\n             : factory.newParameter(paramKey, clzz);\n-        param.setIndex(_index);\n+\n+        int index = _name != null\n+            ? q.getParameterTypes().indexOf(this)\n+            : _index;\n+        param.setIndex(index);\n \n         return param;\n     }\n@@ -121,4 +125,39 @@ public StringBuilder asValue(AliasContext q) {\n     public Class<T> getParameterType() {\n         return getJavaType();\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        ParameterExpressionImpl<?> that = (ParameterExpressionImpl<?>) o;\n+\n+        if (_name != null ? !_name.equals(that._name) : that._name != null)\n+            return false;\n+\n+        // if name is given, then we ignore the index\n+        if (_name == null && _index != that._index)\n+            return false;\n+\n+        if (getParameterType() != ((ParameterExpressionImpl<?>) o).getParameterType() )\n+            return false;\n+\n+        return value != null ? value.equals(that.value) : that.value == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = _name != null ? _name.hashCode() : 0;\n+        if (_name == null) {\n+            // if name is given, then we ignore the index\n+            result = 31 * result + _index;\n+        }\n+        result = 31 * result + (getParameterType() != null ? getParameterType().hashCode() : 0);\n+        result = 31 * result + (value != null ? value.hashCode() : 0);\n+        return result;\n+    }\n }"},{"sha":"9e9fb5b9f155e8f6d5ea7bb946f95bea3c14f5f6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0e4ec5b392b978c4515b26c60e485f2b610de94f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java?ref=0e4ec5b392b978c4515b26c60e485f2b610de94f","patch":"@@ -32,6 +32,7 @@\n import javax.persistence.criteria.Join;\n import javax.persistence.criteria.ListJoin;\n import javax.persistence.criteria.MapJoin;\n+import javax.persistence.criteria.ParameterExpression;\n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.SetJoin;\n@@ -79,7 +80,7 @@\n     SubqueryImpl(Class<T> cls, AbstractQuery<?> parent) {\n         super(cls);\n         _parent = parent;\n-        OrderedMap params;\n+        OrderedMap<Object, Class<?>> params;\n         if (parent instanceof CriteriaQueryImpl) {\n             _model = ((CriteriaQueryImpl<?>)parent).getMetamodel();\n             params = ((CriteriaQueryImpl<?>)parent).getParameterTypes();"}]}

