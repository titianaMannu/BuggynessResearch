{"sha":"0e7c84ef81c1fa5b92a07f4604d00217479b831a","node_id":"MDY6Q29tbWl0MjA2MzY0OjBlN2M4NGVmODFjMWZhNWI5MmEwN2Y0NjA0ZDAwMjE3NDc5YjgzMWE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-03-12T21:31:11Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-03-12T21:31:11Z"},"message":"OPENJPA-866 - Commit contributions by Tim McConnell.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@753024 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8bdbf239ca82eda0f58c3e0ba67e746c90a69c60","url":"https://api.github.com/repos/apache/openjpa/git/trees/8bdbf239ca82eda0f58c3e0ba67e746c90a69c60"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0e7c84ef81c1fa5b92a07f4604d00217479b831a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0e7c84ef81c1fa5b92a07f4604d00217479b831a","html_url":"https://github.com/apache/openjpa/commit/0e7c84ef81c1fa5b92a07f4604d00217479b831a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0e7c84ef81c1fa5b92a07f4604d00217479b831a/comments","author":null,"committer":null,"parents":[{"sha":"272c584af2f2522ebe458fd9a9424229b39b11da","url":"https://api.github.com/repos/apache/openjpa/commits/272c584af2f2522ebe458fd9a9424229b39b11da","html_url":"https://github.com/apache/openjpa/commit/272c584af2f2522ebe458fd9a9424229b39b11da"}],"stats":{"total":382,"additions":381,"deletions":1},"files":[{"sha":"10bd2d29bcfda22986284fd6f14def2ea582ff9a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java?ref=0e7c84ef81c1fa5b92a07f4604d00217479b831a","patch":"@@ -90,6 +90,13 @@ public Table findTable(String name) {\n         Schema schema = getSchema(schemaName);\n         if (schema == null)\n             schema = addSchema(schemaName);\n+\n+        // Ensure only valid table name(s) are added to the schema\n+        if (tableName.length() > _dict.maxTableNameLength) {\n+            return schema.addTable(tableName, \n+                _dict.getValidTableName(tableName, getSchema(schemaName)));\n+        }\n+\n         return schema.addTable(tableName);\n     }\n \n@@ -104,7 +111,7 @@ protected Column newColumn(String name, Table table) {\n     /**\n      * Table type that adds columns when {@link #getColumn} is called.\n      */\n-    private static class DynamicTable\n+    private class DynamicTable\n         extends Table {\n \n         public DynamicTable(String name, Schema schema) {\n@@ -118,6 +125,13 @@ public Column getColumn(String name) {\n             Column col = super.getColumn(name);\n             if (col != null)\n                 return col;\n+\n+            // Ensure only valid column name(s) are added to the table\n+            if (name.length() > _dict.maxColumnNameLength) {\n+                return addColumn(name, \n+                    _dict.getValidColumnName(name, this));\n+            }\n+\n             return addColumn(name);\n         }\n     }"},{"sha":"6612456cf06def77fa5194bc91658e9d2b5c95c1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","raw_url":"https://github.com/apache/openjpa/raw/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Schema.java?ref=0e7c84ef81c1fa5b92a07f4604d00217479b831a","patch":"@@ -133,6 +133,24 @@ public Table addTable(String name) {\n         return tab;\n     }\n \n+    /**\n+     * Add a table with a shortened (i.e., validated) name to the schema\n+     */\n+    public Table addTable(String name, String validName) {\n+        SchemaGroup group = getSchemaGroup();\n+        Table tab;\n+        if (group != null) {\n+            group.addName(validName, true);\n+            tab = group.newTable(validName, this);\n+        } else\n+            tab = new Table(validName, this);\n+        if (_tableMap == null)\n+            _tableMap = new TreeMap();\n+        _tableMap.put(name.toUpperCase(), tab);\n+        _tables = null;\n+        return tab;\n+    }\n+\n     /**\n      * Remove the given table from the schema.\n      *"},{"sha":"252f0116987e0d9a4bad61e116adae1306234a83","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=0e7c84ef81c1fa5b92a07f4604d00217479b831a","patch":"@@ -297,6 +297,26 @@ public Column addColumn(String name) {\n         return col;\n     }\n \n+\n+    /**\n+     * Add a colum with a shortened (i.e., validated) name to the table\n+     */\n+    public Column addColumn(String name, String validName) {\n+        addName(name, true);\n+        Schema schema = getSchema();\n+        Column col;\n+        if (schema != null && schema.getSchemaGroup() != null)\n+            col = schema.getSchemaGroup().newColumn(validName, this);\n+        else\n+            col = new Column(validName, this);\n+        if (_colMap == null)\n+            _colMap = new LinkedHashMap();\n+        _colMap.put(name.toUpperCase(), col);\n+        _cols = null;\n+        return col;\n+    }\n+\n+\n     /**\n      * Remove the given column from the table.\n      *"},{"sha":"ce14eeea70bf32a067d12f9700f6e64d5da7bfd7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/EntityVeryLongNames.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/EntityVeryLongNames.java","raw_url":"https://github.com/apache/openjpa/raw/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/EntityVeryLongNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/EntityVeryLongNames.java?ref=0e7c84ef81c1fa5b92a07f4604d00217479b831a","patch":"@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.dynamicschema;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+\n+/**\n+ * Entity with very long table and column names \n+ * \n+ * @author Tim McConnell\n+ * @since 2.0.0\n+ */\n+@Entity\n+@Table(name=\"Very______________________________________________\" +\n+            \"Long______________________________________________\" +\n+            \"Table_____________________________________________\" +\n+            \"Name______________________________________________\" )\n+public class EntityVeryLongNames implements Serializable {\n+\n+    @Id\n+    @Column(name=\"ID________________________________________________\" +\n+                 \"Very______________________________________________\" +\n+                 \"Long______________________________________________\" +\n+                 \"Column____________________________________________\" +\n+                 \"Name______________________________________________\" )\n+    private int id;\n+\n+    @Column(name=\"FirstName_________________________________________\" +\n+                 \"Very______________________________________________\" +\n+                 \"Long______________________________________________\" +\n+                 \"Column____________________________________________\" +\n+                 \"Name______________________________________________\" )\n+    private String firstName;\n+\n+    @Column(name=\"LastName__________________________________________\" +\n+                 \"Very______________________________________________\" +\n+                 \"Long______________________________________________\" +\n+                 \"Column____________________________________________\" +\n+                 \"Name______________________________________________\" )\n+    private String lastName;\n+\n+    public EntityVeryLongNames() {\n+    }\n+\n+    public EntityVeryLongNames(String firstName, String lastName) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"EntityVeryLongNames: id: \" + getId() + \n+               \" firstName: \" + getFirstName() +\n+               \" lastName: \" + getLastName();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+            + ((getFirstName() == null) ? 0 : getFirstName().hashCode());\n+        result = prime * result + getId();\n+        result = prime * result\n+            + ((getLastName() == null) ? 0 : getLastName().hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final EntityVeryLongNames other = (EntityVeryLongNames) obj;\n+        if (getId() != other.getId()) {\n+            return false;\n+        }\n+        if (getFirstName() == null) {\n+            if (other.getFirstName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getFirstName().equals(other.getFirstName())) {\n+            return false;\n+        }\n+        if (getLastName() == null) {\n+            if (other.getLastName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getLastName().equals(other.getLastName())) {\n+            return false;\n+        }\n+        return true;\n+    } \n+}"},{"sha":"52aa4df56eef8c40aacea0c86fb4d484e849657b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/apache/openjpa/blob/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","raw_url":"https://github.com/apache/openjpa/raw/0e7c84ef81c1fa5b92a07f4604d00217479b831a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java?ref=0e7c84ef81c1fa5b92a07f4604d00217479b831a","patch":"@@ -0,0 +1,179 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.dynamicschema;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+\n+/**\n+ * <b>TestDynamicSchemas</b> is used to create dynamic schemas for the various \n+ * database dictionaries and validate them to ensure they are created \n+ * correctly as specified in their dictionary. The following variables of each \n+ * dictionary are used for validation:<p>\n+ *\n+ * <ol>\n+ *     <li>maxTableNameLength           \n+ *     <li>maxColumnNameLength          \n+ * </ol>\n+ * \n+ * <b>Note(s):</b> \n+ * <ul>\n+ *     <li>To minimize the running time of these testcases there are no\n+ *     connections made to any of the databases\n+ *     <li>This is accomplished by passing the \"export\" SchemaAction to the\n+ *     MappingTool, and using the RETAIN_DATA option to prevent SQL commands\n+ *     from getting executed\n+ * </ul>\n+ * \n+ * @author Tim McConnell\n+ * @since 2.0.0\n+ */\n+public class TestDynamicSchemas extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+    }\n+\n+\n+    public void testDerbyDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI derbyEMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:derby:net://host:1527/databaseName\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( derbyEMF );\n+    }\n+\n+\n+    public void testDB2DynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI db2EMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:db2://localhost:5000/db2\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( db2EMF );\n+    }\n+\n+\n+    public void testOracleDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI oracleEMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:oracle:thin:@host:1234:database_sid\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( oracleEMF );\n+    }\n+\n+\n+    public void testAccessDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI accessEMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:odbc:Driver=Microsoft Access Driver (*.mdb);DBQ=c:\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( accessEMF );\n+    }\n+\n+\n+    public void testSQLServerDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI sqlserverEMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:microsoft:sqlserver:\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( sqlserverEMF );\n+    }\n+\n+\n+    public void testMySQLDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI mysqlEMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:mysql://host1:1,host2:2/database?p1=v1&p2=v2\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( mysqlEMF );\n+    }\n+\n+\n+    public void testPostgresDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI postgresEMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:postgresql:database\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( postgresEMF );\n+    }\n+\n+\n+    public void testInformixDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI informixEMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:informix-sqli:\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( informixEMF );\n+    }\n+\n+\n+    public void testSybaseDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI sybaseEMF = \n+            createEMF(EntityVeryLongNames.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:sybase:Tds:host:1234?ServiceName=db\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( sybaseEMF );\n+    }\n+\n+\n+    private void validateTableName(OpenJPAEntityManagerFactorySPI emf) {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        ClassMapping mapping =  (ClassMapping)conf.\n+            getMetaDataRepositoryInstance().\n+            getMetaData(EntityVeryLongNames.class,getClass().\n+                getClassLoader(), true);\n+        Table table = mapping.getTable();\n+        assertTrue(table.getName().length() > 0);\n+        assertTrue(table.getName().length() <= dict.maxTableNameLength);\n+        validateColumnNames(table, dict);\n+    }\n+\n+\n+    private void validateColumnNames(Table table, DBDictionary dict) {\n+        Column[] columns = table.getColumns();\n+        for (Column column : columns) {\n+            assertTrue(column.getName().length() > 0);\n+            assertTrue(column.getName().length() <= dict.maxColumnNameLength);\n+        }\n+    }\n+}"}]}

