{"sha":"0f45f13fc297d6b73c12e3e0a0b0b155112d4457","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmNDVmMTNmYzI5N2Q2YjczYzEyZTNlMGEwYjBiMTU1MTEyZDQ0NTc=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-07-01T12:52:56Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-07-01T12:52:56Z"},"message":"OPENJPA-1135 Correct access type related issues with attribute overrides and multi-level parsing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@790150 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a0823133b76e3b00bb5cb5880df949dad673452","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a0823133b76e3b00bb5cb5880df949dad673452"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f45f13fc297d6b73c12e3e0a0b0b155112d4457","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f45f13fc297d6b73c12e3e0a0b0b155112d4457","html_url":"https://github.com/apache/openjpa/commit/0f45f13fc297d6b73c12e3e0a0b0b155112d4457","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/comments","author":null,"committer":null,"parents":[{"sha":"80dbd79952be22b5427c5ee44a11b9c67c4ff033","url":"https://api.github.com/repos/apache/openjpa/commits/80dbd79952be22b5427c5ee44a11b9c67c4ff033","html_url":"https://github.com/apache/openjpa/commit/80dbd79952be22b5427c5ee44a11b9c67c4ff033"}],"stats":{"total":536,"additions":523,"deletions":13},"files":[{"sha":"f5e9a21baf57dfb9886f24f8c923216f6d6ae4ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AnnoOverEmbed.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AnnoOverEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AnnoOverEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AnnoOverEmbed.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed.attrOverrides;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class AnnoOverEmbed {\n+\n+    @Basic\n+    private int intEmbed;\n+    \n+    @Basic\n+    private String strEmbed;\n+\n+    public void setIntEmbed(int intEmbed) {\n+        this.intEmbed = intEmbed;\n+    }\n+\n+    public int getIntEmbed() {\n+        return intEmbed;\n+    }\n+\n+    public void setStrEmbed(String strEmbed) {\n+        this.strEmbed = strEmbed;\n+    }\n+\n+    public String getStrEmbed() {\n+        return strEmbed;\n+    }\n+}"},{"sha":"10fcbd60064de90bc138145f2f34fda38d25f289","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -45,7 +45,9 @@\n     public int eId = 1;\n     \n     public void setUp() {\n-        setUp(DROP_TABLES);\n+        setUp(\n+        org.apache.openjpa.persistence.embed.attrOverrides.AnnoOverEmbed.class,\n+        DROP_TABLES);\n     }\n     \n     @Override\n@@ -92,6 +94,38 @@ public void testBasicEmbedAttrOverride() {\n         em.close();\n     }\n     \n+    /**\n+     * This test verifies that an XML defined entity with an annotated \n+     * only embeddable has attribute overrides applied correctly.  \n+     */\n+    public void testXMLEntityWithAnnotatedOverrideEmbed() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        \n+        XMLOverEntity xoe = new XMLOverEntity();\n+        xoe.setId(new Random().nextInt());\n+        \n+        AnnoOverEmbed aoe = new AnnoOverEmbed();\n+        aoe.setIntEmbed(1);\n+        aoe.setStrEmbed(\"StrVal\");\n+        xoe.setEmbed(aoe);\n+        \n+        em.getTransaction().begin();\n+        em.persist(xoe);\n+        em.getTransaction().commit();\n+        \n+        assertTrue(verifyColumnOverride(em, \"XMLOverEntity\", \n+            \"intOverEmbed\"));\n+        assertFalse(verifyColumnOverride(em, \"XMLOverEntity\", \n+            \"intEmbed\"));\n+\n+        assertTrue(verifyColumnOverride(em, \"XMLOverEntity\", \n+            \"strOverEmbed\"));\n+        assertFalse(verifyColumnOverride(em, \"XMLOverEntity\", \n+            \"strEmbed\"));\n+\n+        em.close();        \n+    }\n+    \n     public void createObj1() {\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();"},{"sha":"ff90e2ee5a56b2832922538d7fd6454b17360533","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLOverEntity.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLOverEntity.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLOverEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/XMLOverEntity.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.attrOverrides;\n+\n+public class XMLOverEntity {\n+\n+    private int id;\n+    \n+    private AnnoOverEmbed embed;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setEmbed(AnnoOverEmbed embed) {\n+        this.embed = embed;\n+    }\n+\n+    public AnnoOverEmbed getEmbed() {\n+        return embed;\n+    }\n+}"},{"sha":"fb011c9c83e49fb454a1e2e84115482956388e0d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestCallbackEntity.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestCallbackEntity.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestCallbackEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestCallbackEntity.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import java.util.Random;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.inheritance.entity.BaseCallback;\n+import org.apache.openjpa.persistence.inheritance.entity.XMLCallback;\n+import org.apache.openjpa.persistence.inheritance.entity.XMLSuperCallback;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCallbackEntity \n+    extends SingleEMFTestCase {\n+\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        return \"AbstractCallbackPU\";\n+    }\n+    \n+    /*\n+     * This test verifies that the persistence metadata factory can create\n+     * and use separate copies of the XML metadata parser when a domain featureSelection\n+     * contains a base class with unknown access type and multi-level \n+     * inheritance of XML defined types.  Per JPA spec, the superclass must\n+     * be queried to determine the access type.  \n+     */\n+    public void testCallbackEntity() {\n+        \n+        EntityManager em = emf.createEntityManager();\n+        BaseCallback bc = new BaseCallback();\n+        bc.setId(new Random().nextInt());\n+        bc.setName(\"BaseCallback\");\n+        \n+        // Persist the entity\n+        em.getTransaction().begin();\n+        em.persist(bc);\n+        em.getTransaction().commit();   \n+        \n+        // Assert callbacks fire expected # of times\n+        assertEquals(1, BaseCallback.postPersistCount);\n+        assertEquals(1, XMLCallback.prePersistCount);\n+        assertEquals(1, XMLSuperCallback.postPersistCount);\n+        \n+        // Remove the entity\n+        em.getTransaction().begin();\n+        em.remove(bc);\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+    }    \n+}"},{"sha":"8287add471556c99c2a0763918d589106443140d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseCallback.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseCallback.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseCallback.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.PostPersist;\n+\n+/*\n+ * Annotated entity class with no persistent attributes or access type\n+ * defined.  This is necessary to force query of the superclass to determine\n+ * the default access type. \n+ */\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class BaseCallback extends XMLCallback {\n+    \n+    public transient static int postPersistCount = 0;\n+\n+    @PostPersist\n+    public void basePostPersist() {        \n+        postPersistCount++;    \n+    }\n+}"},{"sha":"80ecda0b725a0308db92d6d5fa809a4e362a3a66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/XMLCallback.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/XMLCallback.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/XMLCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/XMLCallback.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+/*\n+ * XML defined class with no persistent attributes, only a callback.\n+ */\n+public class XMLCallback extends XMLSuperCallback {\n+\n+    public transient static int prePersistCount = 0;\n+\n+    public void prePersist() {    \n+        prePersistCount++;\n+    }\n+}"},{"sha":"8939d5a5699053fa916b945235c8e606333fd36d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/XMLSuperCallback.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/XMLSuperCallback.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/XMLSuperCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/XMLSuperCallback.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+/*\n+ * XML defined entity superclass with no persistent attributes.\n+ */\n+public class XMLSuperCallback {\n+\n+    private int id;\n+    \n+    private String name;\n+    \n+    public transient static int postPersistCount = 0;    \n+    \n+    public void superPostPersist() {\n+        postPersistCount++;    \n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+}"},{"sha":"f1672dd768b46d0936fb95c79318cb4495820d60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -25,7 +25,9 @@\n     extends SingleEMTestCase {\n \n     public void setUp() {\n-        setUp(CLEAR_TABLES);\n+        setUp(\n+        org.apache.openjpa.persistence.embed.attrOverrides.AnnoOverEmbed.class,\n+        CLEAR_TABLES);\n     }\n \n     protected String getPersistenceUnitName() {"},{"sha":"07c7c63c28f7d0971a013f1e09c27097ca399a8c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -34,7 +34,9 @@\n public class TestXmlOverrideEntity extends SingleEMFTestCase {\n \n     public void setUp() throws ClassNotFoundException {\n-        setUp(CLEAR_TABLES);\n+        setUp(\n+        org.apache.openjpa.persistence.embed.attrOverrides.AnnoOverEmbed.class,\n+        CLEAR_TABLES);\n \n         // make sure that XmlOverrideEntity is registered for our metadata tests\n         Class.forName(XmlOverrideEntity.class.getName(), true,"},{"sha":"e3db03917d7ee834c38bc4a8675b2925516078a7","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -47,7 +47,8 @@\n         <mapping-file>org/apache/openjpa/persistence/access/access-pudef-prop-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml</mapping-file>\n-        <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml</mapping-file>        \n+        <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml</mapping-file>\n+        <mapping-file>org/apache/openjpa/persistence/inheritance/orm.xml</mapping-file>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                 value=\"buildSchema(ForeignKeys=true)\"/>\n@@ -120,6 +121,8 @@\n         <class>org.apache.openjpa.persistence.embed.OrderXml</class>\n         <class>org.apache.openjpa.persistence.embed.attrOverrides.AddressXml</class>\n         <class>org.apache.openjpa.persistence.embed.attrOverrides.ZipcodeXml</class>\n+        <class>org.apache.openjpa.persistence.embed.attrOverrides.XMLOverEntity</class>\n+        <class>org.apache.openjpa.persistence.embed.attrOverrides.AnnoOverEmbed</class>        \n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema(ForeignKeys=true)\"/>\n@@ -170,4 +173,16 @@\n                 value=\"buildSchema\"/> \n         </properties>\n     </persistence-unit>\n+    <persistence-unit name=\"AbstractCallbackPU\" transaction-type=\"RESOURCE_LOCAL\">\n+        <description>PU for testing with an entity with no persistent attributes</description>\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <mapping-file>org/apache/openjpa/persistence/inheritance/orm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.inheritance.entity.BaseCallback</class>\n+        <class>org.apache.openjpa.persistence.inheritance.entity.XMLCallback</class>\n+        <class>org.apache.openjpa.persistence.inheritance.entity.XMLSuperCallback</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" \n+                value=\"buildSchema\"/> \n+        </properties>\n+    </persistence-unit>    \n </persistence>"},{"sha":"294900f548742891272cdfa044debd1ac3722d4a","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -199,6 +199,22 @@ version=\"2.0\">\n             </element-collection>\n         </attributes>\n     </entity>\n+    \n+    <entity name=\"XMLOverEntity\"\n+        class=\"org.apache.openjpa.persistence.embed.attrOverrides.XMLOverEntity\"\n+        access=\"FIELD\">\n+        <attributes>\n+            <id name=\"id\"/>\n+            <embedded name=\"embed\">\n+                <attribute-override name=\"intEmbed\">\n+                   <column name=\"intOverEmbed\"/>\n+                </attribute-override>\n+                <attribute-override name=\"strEmbed\">\n+                   <column name=\"strOverEmbed\"/>\n+                </attribute-override>\n+            </embedded>\n+        </attributes>\n+    </entity>    \n \n     <embeddable \n         class=\"org.apache.openjpa.persistence.embed.attrOverrides.AddressXml\" "},{"sha":"a97b6b799b96889503c1a3eab71988f98bb555cc","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/inheritance/orm.xml","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/inheritance/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/inheritance/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/inheritance/orm.xml?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+    version=\"1.0\">\n+\n+    <entity class=\"org.apache.openjpa.persistence.inheritance.entity.XMLCallback\">\n+        <pre-persist method-name=\"prePersist\" />\n+    </entity>\n+    <entity class=\"org.apache.openjpa.persistence.inheritance.entity.XMLSuperCallback\"\n+        access=\"FIELD\">\n+        <post-persist method-name=\"superPostPersist\" />\n+        <attributes>\n+            <id name=\"id\"/>\n+            <basic name=\"name\"/>\n+        </attributes>\n+    </entity>\n+    \n+</entity-mappings>\n\\ No newline at end of file"},{"sha":"f5625e179609e6ab663f5244bdc2aa23e729123b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -279,7 +279,8 @@ ClassMetaData getCachedSuperclassMetaData(ClassMetaData meta) {\n     \t\treturn null;\n     \tClass<?> cls = meta.getDescribedType();\n     \tClass<?> sup = cls.getSuperclass();\n-    \tif (sup == null)\n+    \tif (sup == null || \"java.lang.Object\".equals(\n+    \t    sup.getName()))\n     \t\treturn null;\n     \tMetaDataRepository repos = meta.getRepository();\n     \tClassMetaData supMeta = repos.getCachedMetaData(sup);\n@@ -309,8 +310,13 @@ private int determineAccessType(ClassMetaData meta) {\n     \t\treturn access;\n     \t\n     \tClassMetaData sup = getCachedSuperclassMetaData(meta);\n-    \twhile (sup != null && sup.isExplicitAccess())\n-    \t\tsup = getCachedSuperclassMetaData(sup);\n+    \tClassMetaData tmpSup = sup;\n+    \twhile (tmpSup != null && tmpSup.isExplicitAccess()) {\n+            tmpSup = getCachedSuperclassMetaData(tmpSup);\n+            if (tmpSup != null) {\n+                sup = tmpSup;\n+            }    \t    \n+    \t}\n     \tif (sup != null && !AccessCode.isUnknown(sup))\n     \t\treturn sup.getAccessType();\n     \t"},{"sha":"400632b908cb534c3d59e21e38685599b6ac6782","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":37,"deletions":5,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -22,13 +22,16 @@\n import java.io.IOException;\n import java.net.URL;\n import java.security.AccessController;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.Stack;\n+\n import javax.persistence.Embeddable;\n import javax.persistence.Entity;\n import javax.persistence.MappedSuperclass;\n@@ -84,6 +87,9 @@\n     private Set<URL> _unparsed = null; // xml rsrc\n     private boolean _fieldOverride = true;\n \n+    protected Stack<XMLPersistenceMetaDataParser> _stack = \n+        new Stack<XMLPersistenceMetaDataParser>();\n+\n     /**\n      * Whether to use field-level override or class-level override.\n      * Defaults to true.\n@@ -141,18 +147,39 @@ protected AnnotationPersistenceMetaDataParser newAnnotationParser() {\n     }\n \n     /**\n-     * Return XML metadata parser, creating it if it does not already exist.\n+     * Return XML metadata parser, creating it if it does not already exist or\n+     * if the existing parser is parsing.\n      */\n     public XMLPersistenceMetaDataParser getXMLParser() {\n-        if (_xmlParser == null) {\n+        if (_xmlParser == null || _xmlParser.isParsing()) {\n+            Class<?> parseCls = null;\n+            ArrayList<Class<?>> parseList = null;\n+            // If there is an existing parser and it is parsing, push it on\n+            // the stack and return a new one.\n+            if (_xmlParser != null) {\n+                _stack.push(_xmlParser);\n+                parseCls = _xmlParser.getParseClass();\n+                parseList = _xmlParser.getParseList();\n+            }\n             _xmlParser = newXMLParser(true);\n+            _xmlParser.addToParseList(parseList);\n+            _xmlParser.addToParseList(parseCls);\n             _xmlParser.setRepository(repos);\n             if (_fieldOverride)\n                 _xmlParser.setAnnotationParser(getAnnotationParser());\n         }\n         return _xmlParser;\n     }\n \n+    public void resetXMLParser() {\n+        // If a parser was pushed on the stack due to multi-level parsing, \n+        // clear the current parser and pop the inner parser off the stack.\n+        if (!_stack.isEmpty()) {\n+            _xmlParser.clear();\n+            _xmlParser = _stack.pop();\n+        }\n+    }\n+\n     /**\n      * Set the metadata parser.\n      */\n@@ -196,10 +223,12 @@ public void load(Class<?> cls, int mode, ClassLoader envLoader) {\n         boolean parsedXML = false;\n         if (_unparsed != null && !_unparsed.isEmpty()\n             && (mode & MODE_META) != 0) {\n-            for (URL url : _unparsed)\n+            Set<URL> unparsed = new HashSet<URL>(_unparsed);\n+            for (URL url : unparsed) {\n                 parseXML(url, cls, mode, envLoader);\n-            parsedXML = _unparsed.contains(xml);\n-            _unparsed.clear();\n+            }\n+            parsedXML = unparsed.contains(xml);\n+             _unparsed.clear();\n \n             // XML process check\n             meta = repos.getCachedMetaData(cls);\n@@ -265,6 +294,9 @@ private void parseXML(URL xml, Class<?> cls, int mode,\n         } catch (IOException ioe) {\n             throw new GeneralException(ioe);\n         }\n+        finally {\n+            resetXMLParser();\n+        }\n     }\n \n     /**"},{"sha":"b58820234359bac7d793a36fc0791807eff556d3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":84,"deletions":1,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -184,6 +184,8 @@\n     private final Stack<Object> _parents = new Stack<Object>();\n \n     private Class<?> _cls = null;\n+    // List of classes currently being parsed\n+    private ArrayList<Class<?>> _parseList = new ArrayList<Class<?>>();\n     private int _fieldPos = 0;\n     private int _clsPos = 0;\n     private int _access = AccessCode.UNKNOWN;\n@@ -490,10 +492,14 @@ protected boolean isClassElementName(String name) {\n \n     @Override\n     protected void reset() {\n+    \t// Add all remaining deferred embeddable metadata\n+        addDeferredEmbeddableMetaData();\n+\n         super.reset();\n         _elements.clear();\n         _parents.clear();\n         _cls = null;\n+        _parseList.clear();\n         _fieldPos = 0;\n         _clsPos = 0;\n \n@@ -823,6 +829,12 @@ protected boolean startClass(String elem, Attributes attrs)\n \n         // query mode only?\n         _cls = classForName(currentClassName());\n+        \n+        // Prevent a reentrant parse for the same class\n+        if (parseListContains(_cls)) {\n+            return false;\n+        }\n+        \n         if (_mode == MODE_QUERY) {\n             if (_parser != null)\n                 _parser.parse(_cls);\n@@ -1806,6 +1818,13 @@ private boolean startCallback(MetaDataTag callback, Attributes attrs)\n             return false;\n \n         boolean system = currentElement() == null;\n+\n+        // If in a multi-level parse, do not add system level listeners.\n+        // Otherwise, they will get added multiple times.\n+        if (system && _parseList != null && _parseList.size() > 0) {\n+            return false;\n+        }\n+\n         Class<?> type = currentElement() == null ? null :\n             ((ClassMetaData) currentElement()).getDescribedType();\n         if (type == null)\n@@ -1895,7 +1914,30 @@ protected boolean startOrderColumn(Attributes attrs)\n \t\t\treturn PersistenceCapable.class;\n \t\treturn super.classForName(name, isRuntime());\n \t}\n-    \n+\n+\t/**\n+\t * Process all deferred embeddables using an unknown access type.\n+\t */\n+\tprotected void addDeferredEmbeddableMetaData() {\n+\t    if (_embeddables != null && _embeddables.size() > 0) {\n+\t        // Reverse iterate the array of remaining deferred embeddables \n+\t        // since elements will be removed as they are processed.\n+\t        Class<?>[] classes = _embeddables.keySet().toArray(\n+\t            new Class<?>[_embeddables.size()]);\n+\t        for (int i = classes.length - 1 ; i >= 0; i--) {\n+\t            try {\n+\t                addDeferredEmbeddableMetaData(classes[i], \n+\t                    AccessCode.UNKNOWN);\n+\t            }\n+\t            catch (Exception e) {\n+\t                throw new MetaDataException(\n+\t                    _loc.get(\"no-embeddable-metadata\", \n+\t                        classes[i].getName()), e); \n+\t            }\n+\t        }\n+\t    }\t    \n+\t}\n+\t\n     /**\n      * Process all deferred embeddables and embeddable mapping overrides\n      * for a given class.  This should only happen after the access type \n@@ -1964,4 +2006,45 @@ protected void deferEmbeddable(Class<?> embedType, MetaDataContext fmd) {\n     protected void applyDeferredEmbeddableOverrides(Class<?> cls)\n         throws SAXException {\n     }\n+\n+\t/*\n+\t * Add the array of classes to the active parse list.\n+\t */\n+    public void addToParseList(ArrayList<Class<?>> parseList) {\n+        if (parseList == null)\n+            return;\n+        _parseList.addAll(parseList);\n+    }\n+    \n+    /*\n+     * Add the class to the active parse list.\n+     */\n+    public void addToParseList(Class<?> parentCls) {\n+        if (parentCls == null)\n+            return;\n+        _parseList.add(parentCls);\n+    }\n+\n+    /*\n+     * Whether the active parse list contains the specified class.\n+     */\n+    public boolean parseListContains(Class<?> cls) {\n+        if (_parseList.size() == 0)\n+            return false;\n+        return _parseList.contains(cls);\n+    }\n+\n+    /*\n+     * Returns the list of classes actively being parsed.\n+     */\n+    public ArrayList<Class<?>> getParseList() {\n+        return _parseList;\n+    }\n+    \n+    /*\n+     * Returns class currently being parsed.\n+     */\n+    public Class<?> getParseClass() {\n+        return _cls;\n+    }    \n }"},{"sha":"7a939bd9dc7a94ab2971c8f9fb6a3a1017216438","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f45f13fc297d6b73c12e3e0a0b0b155112d4457/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=0f45f13fc297d6b73c12e3e0a0b0b155112d4457","patch":"@@ -197,4 +197,5 @@ dynamic-agent: OpenJPA dynamically loaded the class enhancer. Any classes \\\n     that were not enhanced at build time will be enhanced when they are \\\n     loaded by the JVM.\n vlem-creation-info: OpenJPA dynamically loaded a validation provider.\n+no-embeddable-metadata: Unable to load metadata for embeddable class \"{0}\".\n "}]}

