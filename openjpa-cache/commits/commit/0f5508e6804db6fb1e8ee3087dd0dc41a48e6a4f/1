{"sha":"0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmNTUwOGU2ODA0ZGI2ZmIxZThlZTMwODdkZDBkYzQxYTQ4ZTZhNGY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T19:10:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T19:10:49Z"},"message":"Better diagnostic messages on why a query can not be cached\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923940 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ad01f2d264a88a579708a57bad63f09e4d29a19","url":"https://api.github.com/repos/apache/openjpa/git/trees/5ad01f2d264a88a579708a57bad63f09e4d29a19"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","html_url":"https://github.com/apache/openjpa/commit/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f/comments","author":null,"committer":null,"parents":[{"sha":"8dc74c1e5972eeb1673b9767f0e93f0d8576649a","url":"https://api.github.com/repos/apache/openjpa/commits/8dc74c1e5972eeb1673b9767f0e93f0d8576649a","html_url":"https://github.com/apache/openjpa/commit/8dc74c1e5972eeb1673b9767f0e93f0d8576649a"}],"stats":{"total":48,"additions":26,"deletions":22},"files":[{"sha":"70d6e56843e56df269bd02a08177896089a3c1dd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","patch":"@@ -170,13 +170,13 @@ public Exclusion initialize(Object result) {\n         if (selector == null || selector.hasMultipleSelects()\n             || ((selector instanceof Union) \n             && (((Union)selector).getSelects().length != 1)))\n-            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-multi-select\").getMessage());\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-multi-select\", _id).getMessage());\n         select = extractImplementation(selector);\n         if (select == null)\n-            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-select\").getMessage());\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-select\", _id).getMessage());\n         SQLBuffer buffer = selector.getSQL();\n         if (buffer == null)\n-            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-sql\").getMessage());;\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-sql\", _id).getMessage());;\n         setTargetQuery(buffer.getSQL());\n         setParameters(buffer.getParameters());\n         setUserParameterPositions(buffer.getUserParameters());\n@@ -194,18 +194,18 @@ public Exclusion initialize(Object result) {\n      */\n     private Object[] extractSelectExecutor(Object result) {\n         if (result instanceof ResultList == false)\n-            return new Object[]{null, _loc.get(\"exclude-not-result\")};\n+            return new Object[]{null, _loc.get(\"exclude-not-result\", _id)};\n         Object userObject = ((ResultList<?>)result).getUserObject();\n         if (userObject == null || !userObject.getClass().isArray() || ((Object[])userObject).length != 2)\n-            return new Object[]{null, _loc.get(\"exclude-no-user-object\")};\n+            return new Object[]{null, _loc.get(\"exclude-no-user-object\", _id)};\n         Object provider = ((Object[])userObject)[0];\n         Object executor = ((Object[])userObject)[1];\n         if (executor instanceof StoreQuery.Executor == false)\n-            return new Object[]{null, _loc.get(\"exclude-not-executor\")};\n+            return new Object[]{null, _loc.get(\"exclude-not-executor\", _id)};\n         _exps = ((StoreQuery.Executor)executor).getQueryExpressions();\n         for (int i = 0; i < _exps.length; i++) {\n             if (isUsingExternalizedParameter(_exps[i])) {\n-                return new Object[]{null, _loc.get(\"exclude-externalized-param\", provider.getClass().getName())};\n+                return new Object[]{null, _loc.get(\"exclude-externalized-param\", _id)};\n             }\n         }\n         if (_exps[0].projections.length == 0) {\n@@ -225,7 +225,7 @@ public Exclusion initialize(Object result) {\n         if (provider instanceof SelectResultObjectProvider) {\n             return new Object[]{((SelectResultObjectProvider)provider).getSelect(), null};\n         } \n-        return new Object[]{null, _loc.get(\"exclude-not-select-rop\", provider.getClass().getName())};\n+        return new Object[]{null, _loc.get(\"exclude-not-select-rop\", _id, provider.getClass().getName())};\n     }\n     \n     private SelectImpl extractImplementation(SelectExecutor selector) {"},{"sha":"2525bd21d399c57d20efc72d26641a0b36f7067f","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":18,"deletions":14,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=0f5508e6804db6fb1e8ee3087dd0dc41a48e6a4f","patch":"@@ -149,17 +149,21 @@ bad-lrs-size: Invalid LRS size. Valid values are \\\n     \"unknown\"(0), \"last\"(1) or \"query\"(2). Specified value: {0}.\n bad-join-syntax: Invalid join syntax. Valid values are \\\n     \"sql92\"(0), \"tradition\"(1) or \"database\"(2). Specified value: {0}.\n-exclude-multi-select: This query generates multiple SQL statements. \\\n-\tA query can be cached only when it corresponds to a single SQL statement.  \n-exclude-not-result: This query returns a single value rather than \\\n-\ta list. A query that returns single value can not be cached. \n-exclude-no-user-object: Post-execution data can not be extracted \\\n-    from this query.\n-exclude-no-sql: Target SQL statement can not be extracted \\\n-    from this query.\n-exclude-no-select: Internal select instance can not be extracted \\\n-    from this query.\n-exclude-not-select-rop: The query result is not obtained by executing \\\n-\ta select statement. This can happen if the query was evaluated in-memory. \\\n-\tThe result was provided by an instance of {0}.  \n-exclude-not-executor: This query was not executed on a data store.    \n+exclude-multi-select: Query \"{0}\" is not cached because it generates multiple \\\n+    SQL statements. A query can be cached only when it corresponds to a single \\\n+    SQL statement.  \n+exclude-not-result: Query \"{0}\" is not cached because it returns a single value \\\n+    rather than a list. A query that returns single value can not be cached. \n+exclude-no-user-object: Query \"{0}\" is not cached because post-execution data \\\n+    can not be extracted from this query.\n+exclude-no-sql: Query \"{0}\" is not cached because SQL statement can not be \\\n+    extracted from this query.\n+exclude-no-select: Query \"{0}\" is not cached because the internal select \\\n+    can not be extracted from this query.\n+exclude-not-select-rop: Query \"{0}\" is not cached because its result \\\n+    is not obtained by executing a select statement. This can happen \\\n+    if the query was evaluated in-memory. The result was provided by {1}.  \n+exclude-not-executor: Query \"{0}\" is not cached because it was not executed on a \\\n+    data store.    \n+exclude-externalized-param: Query \"{0}\" is not cached because some parameterized \\\n+    field values are externalized.  \n\\ No newline at end of file"}]}

