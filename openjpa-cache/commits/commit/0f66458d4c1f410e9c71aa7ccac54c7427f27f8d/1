{"sha":"0f66458d4c1f410e9c71aa7ccac54c7427f27f8d","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmNjY0NThkNGMxZjQxMGU5YzcxYWE3Y2NhYzU0Yzc0MjdmMjdmOGQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-04-19T21:33:23Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-04-19T21:33:23Z"},"message":"OPENJPA-222 testcases for DB2\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@530554 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"85bede548f691eab38c1003b2d70995e0227be06","url":"https://api.github.com/repos/apache/openjpa/git/trees/85bede548f691eab38c1003b2d70995e0227be06"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d","html_url":"https://github.com/apache/openjpa/commit/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d/comments","author":null,"committer":null,"parents":[{"sha":"30f204251018ca448a4e66c7b3d000fa67c69d85","url":"https://api.github.com/repos/apache/openjpa/commits/30f204251018ca448a4e66c7b3d000fa67c69d85","html_url":"https://github.com/apache/openjpa/commit/30f204251018ca448a4e66c7b3d000fa67c69d85"}],"stats":{"total":154,"additions":131,"deletions":23},"files":[{"sha":"1fad66c2b831f23a11958b7066a759cdf3acdd79","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=0f66458d4c1f410e9c71aa7ccac54c7427f27f8d","patch":"@@ -252,37 +252,31 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n                     if (isolationLevel ==\r\n                         Connection.TRANSACTION_READ_UNCOMMITTED) {\r\n                         forUpdateString.append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(forUpdateOfClause).append(\" \");\r\n-                    } else {\r\n-                        forUpdateString.append(\" \").append(forUpdateOfClause)\r\n-                           .append(\" \");\r\n-                    }\r\n+                            .append(\" \").append(forUpdateOfClause);\r\n+                    } else\r\n+                        forUpdateString.append(\" \").append(forUpdateOfClause);\r\n                     break;\r\n                 case db2ZOSV8xOrLater:\r\n                 case db2UDBV82AndLater:\r\n                     if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n                         forUpdateString.append(\" \").append(forReadOnlyClause)\r\n                             .append(\" \").append(withRRClause)\r\n-                            .append(\" \").append(useKeepUpdateLockClause)\r\n-                            .append(\" \");\r\n+                            .append(\" \").append(useKeepUpdateLockClause);   \r\n                     } else {\r\n                         forUpdateString.append(\" \").append(forReadOnlyClause)\r\n                             .append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(useKeepUpdateLockClause)\r\n-                            .append(\" \");\r\n+                            .append(\" \").append(useKeepUpdateLockClause);                            \r\n                     }\r\n                     break;\r\n                 case db2ISeriesV5R4AndLater:\r\n                     if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n                         forUpdateString.append(\" \").append(forReadOnlyClause)\r\n                             .append(\" \").append(withRRClause)\r\n-                            .append(\" \").append(useKeepExclusiveLockClause)\r\n-                            .append(\" \");\r\n+                            .append(\" \").append(useKeepExclusiveLockClause);       \r\n                     } else {\r\n                         forUpdateString.append(\" \").append(forReadOnlyClause)\r\n                             .append(\" \").append(withRSClause)\r\n-                            .append(\" \").append(useKeepExclusiveLockClause)\r\n-                            .append(\" \");\r\n+                            .append(\" \").append(useKeepExclusiveLockClause);\r\n                     }\r\n                     break;\r\n                 }\r\n@@ -413,4 +407,8 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n             return sqle.getMessage();\r\n         }\r\n     }\r\n-   }\r\n+\r\n+    public int getDb2ServerType() {\r\n+        return db2ServerType;\r\n+    }\r\n+}\r"},{"sha":"c76597437d1b481129443448d884b60cba4ae722","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":79,"deletions":8,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=0f66458d4c1f410e9c71aa7ccac54c7427f27f8d","patch":"@@ -82,18 +82,89 @@ public void testIsolationLevelOverride(boolean useHintsAndQueries,\n                         .getIsolation());\n \n                 q.getResultList();\n+                if (dict instanceof DB2Dictionary &&(((DB2Dictionary)dict).\n+                    getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n+                        .getDb2ServerType()== 2) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField, \"\n+                        + \"t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                        + \" FOR UPDATE OF\");\n+                }\n+\n+                // it is DB2 v82 or later\n+                else if (dict instanceof DB2Dictionary &&(((DB2Dictionary)dict).\n+                    getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n+                        .getDb2ServerType() == 4) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField, \"\n+                        + \"t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                        + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\");\n+                }\n+\n+                else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n+                    getDb2ServerType() == 5){\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField, \"\n+                        + \"t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                        + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE \" \n+                        + \"LOCKS\");\n+                }    \n+                else {\n+                    fail(\"OpenJPA currently only supports per-query isolation \" \n+                    + \"level configuration on the following databases: DB2\");\n+                }\n             } else {\n                 ((JDBCFetchPlan) em.getFetchPlan())\n                     .setIsolation(IsolationLevel.SERIALIZABLE);\n                 em.find(AllFieldTypes.class, 0);\n-            }\n-\n-            if (dict instanceof DB2Dictionary) {\n-                assertEquals(1, sql.size());\n-                assertSQL(\".*DB2-specific SQL to test for goes here.*\");\n-            } else {\n-                fail(\"OpenJPA currently only supports per-query isolation \" +\n-                    \"level configuration on the following databases: DB2\");\n+                if (dict instanceof DB2Dictionary &&(((DB2Dictionary)dict).\n+                    getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n+                        .getDb2ServerType()== 2) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR UPDATE OF optimize for 1 row\");\n+                }\n+                // it is DB2 v82 or later\n+                else if (dict instanceof DB2Dictionary &&(((DB2Dictionary)dict).\n+                    getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n+                        .getDb2ServerType() == 4) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\" \n+                        + \" optimize for 1 row\");\n+                }\n+                else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n+                    getDb2ServerType() == 5) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE LOCKS\"\n+                        + \" optimize for 1 row\");\n+                }    \n+                else {\n+                    fail(\"OpenJPA currently only supports per-query isolation \" \n+                    + \"level configuration on the following databases: DB2\");\n+                }\n             }\n         } catch (InvalidStateException pe) {\n             // if we're not using DB2, we expect an InvalidStateException."},{"sha":"b5d493404db2b1eca69def0526c4412b87a41dcd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"modified","additions":40,"deletions":1,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/0f66458d4c1f410e9c71aa7ccac54c7427f27f8d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=0f66458d4c1f410e9c71aa7ccac54c7427f27f8d","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -58,7 +59,45 @@ public void testSelectForUpdateOverride() {\n             em.find(AllFieldTypes.class, 0);\n \n             assertEquals(1, sql.size());\n-            assertSQL(\".*FOR UPDATE.*\");\n+            if (dict instanceof DB2Dictionary &&(((DB2Dictionary)dict).\n+                getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n+                    .getDb2ServerType()== 2) {\n+                assertEquals(1, sql.size());\n+                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                    + \" t0.floatField, t0.intField, t0.longField,\"\n+                    + \" t0.shortField, t0.stringField FROM \"\n+                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                    + \" FOR UPDATE OF optimize for 1 row\");\n+            }\n+            // it is DB2 v82 or later\n+            else if (dict instanceof DB2Dictionary &&(((DB2Dictionary)dict).\n+                getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n+                    .getDb2ServerType() == 4) {\n+                assertEquals(1, sql.size());\n+                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                    + \" t0.floatField, t0.intField, t0.longField,\"\n+                    + \" t0.shortField, t0.stringField FROM \"\n+                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                    + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\" \n+                    + \" optimize for 1 row\");\n+            }\n+            else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n+                getDb2ServerType() == 5) {\n+                assertEquals(1, sql.size());\n+                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                    + \" t0.floatField, t0.intField, t0.longField,\"\n+                    + \" t0.shortField, t0.stringField FROM \"\n+                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                    + \" FOR READ ONLY WITH RS USE AND KEEP EXCLUSIVE LOCKS\"\n+                    + \" optimize for 1 row\");\n+            }    \n+            else {\n+                fail(\"OpenJPA currently only supports per-query isolation \" +\n+                \"level configuration on the following databases: DB2\");\n+            }\n         } finally {\n             em.getTransaction().rollback();\n             em.close();"}]}

