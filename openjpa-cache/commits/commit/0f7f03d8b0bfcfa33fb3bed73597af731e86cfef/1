{"sha":"0f7f03d8b0bfcfa33fb3bed73597af731e86cfef","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmN2YwM2Q4YjBiZmNmYTMzZmIzYmVkNzM1OTdhZjczMWU4NmNmZWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-12-17T06:23:00Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-12-17T06:23:00Z"},"message":"OPENJPA-825: Cache unique flag for query to avoid lcoking. Use StateManager's instance lock rather than acquiring Broker's lock.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@727297 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e62b0ae64ef901c6e6ed1c0c668babe07f88750f","url":"https://api.github.com/repos/apache/openjpa/git/trees/e62b0ae64ef901c6e6ed1c0c668babe07f88750f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef","html_url":"https://github.com/apache/openjpa/commit/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/comments","author":null,"committer":null,"parents":[{"sha":"9ba8587238f7958b910e22de58c6d3bea6f3d9e0","url":"https://api.github.com/repos/apache/openjpa/commits/9ba8587238f7958b910e22de58c6d3bea6f3d9e0","html_url":"https://github.com/apache/openjpa/commit/9ba8587238f7958b910e22de58c6d3bea6f3d9e0"}],"stats":{"total":35,"additions":22,"deletions":13},"files":[{"sha":"2b7fec9744d6e77256717cd6f970d4f3d57b8ea6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=0f7f03d8b0bfcfa33fb3bed73597af731e86cfef","patch":"@@ -56,6 +56,7 @@\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.OrderingMergedResultObjectProvider;\n+import org.apache.openjpa.kernel.QueryContext;\n import org.apache.openjpa.kernel.QueryHints;\n import org.apache.openjpa.kernel.exps.Constant;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n@@ -83,6 +84,7 @@\n public class JDBCStoreQuery \n     extends ExpressionStoreQuery {\n \n+\tprivate boolean _isUnique = false;\n     private static final Table INVALID = new Table();\n \n     // add all standard filter and aggregate listeners to these maps\n@@ -110,6 +112,11 @@ public JDBCStoreQuery(JDBCStore store, ExpressionParser parser) {\n         _store = store;\n     }\n \n+    @Override\n+    public void setContext(QueryContext ctx) {\n+    \tsuper.setContext(ctx);\n+    \t_isUnique = ctx.isUnique();\n+    }\n     /**\n      * Return the store.\n      */\n@@ -341,7 +348,7 @@ private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n                 evaluate(ctx, null, null, exps[i], states[i]);\n             if (optHint != null)\n                sel.setExpectedResultCount(optHint.intValue(), true);\n-            else if (this.ctx.isUnique())\n+            else if (_isUnique)\n                 sel.setExpectedResultCount(1, false);\n             for (int j = 0; j < verts.length; j++) {\n                 selMappings.add(verts[j]);\n@@ -423,7 +430,7 @@ private int calculateEagerMode(QueryExpressions exps, long start,\n         long end) {\n         if (exps.projections.length > 0 || start >= end)\n             return EagerFetchModes.EAGER_NONE;\n-        if (end - start == 1 || ctx.isUnique())\n+        if (end - start == 1 || _isUnique)\n             return EagerFetchModes.EAGER_JOIN;\n         return EagerFetchModes.EAGER_PARALLEL;\n     }"},{"sha":"3559e22e05022552317246678f5ab67cc40f363c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=0f7f03d8b0bfcfa33fb3bed73597af731e86cfef","patch":"@@ -458,8 +458,8 @@ public boolean isUnique() {\n             // no explicit setting; default\r\n             StoreQuery.Executor ex = compileForExecutor();\r\n             if (!ex.isAggregate(_storeQuery))\r\n-                return false;\r\n-            return !ex.hasGrouping(_storeQuery);\r\n+                return _unique = false;\r\n+            return _unique = !ex.hasGrouping(_storeQuery);\r\n         } finally {\r\n             unlock();\r\n         }\r"},{"sha":"65cc639355d34025ed7b9d7647e5c42407604a0c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=0f7f03d8b0bfcfa33fb3bed73597af731e86cfef","patch":"@@ -34,6 +34,7 @@\n import java.util.HashMap;\r\n import java.util.Iterator;\r\n import java.util.TimeZone;\r\n+import java.util.concurrent.locks.ReentrantLock;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n@@ -147,6 +148,8 @@\n     // information about the owner of this instance, if it is embedded\r\n     private StateManagerImpl _owner = null;\r\n     private int _ownerIndex = -1;\r\n+    \r\n+    private transient ReentrantLock _instanceLock = null;\r\n \r\n     /**\r\n      * Constructor; supply id, type metadata, and owning persistence manager.\r\n@@ -157,6 +160,8 @@ protected StateManagerImpl(Object id, ClassMetaData meta,\n         _meta = meta;\r\n         _broker = broker;\r\n         _single = new SingleFieldManager(this, broker);\r\n+        if (broker.getMultithreaded())\r\n+        \t_instanceLock = new ReentrantLock();\r\n \r\n         if (_meta.getIdentityType() == ClassMetaData.ID_UNKNOWN)\r\n             throw new UserException(_loc.get(\"meta-unknownid\", _meta));\r\n@@ -3184,19 +3189,16 @@ protected RuntimeException translate(RuntimeException re) {\n      * Lock the state manager if the multithreaded option is set.\r\n      */\r\n     protected void lock() {\r\n-        // use broker-level lock to avoid deadlock situations with the state\r\n-        // manager lock and broker lock being obtained in different orders\r\n-        _broker.lock();\r\n+        if (_instanceLock != null)\r\n+        \t_instanceLock.lock();\r\n     }\r\n \r\n     /**\r\n      * Unlock the state manager.\r\n      */\r\n-\tprotected void unlock ()\r\n-\t{\r\n-\t\t// use broker-level lock to avoid deadlock situations with the state \r\n-\t\t// manager lock and broker lock being obtained in different orders\r\n-\t\t_broker.unlock ();\r\n+\tprotected void unlock () {\r\n+        if (_instanceLock != null)\r\n+        \t_instanceLock.unlock();\r\n \t}\r\n \r\n     private void writeObject(ObjectOutputStream oos) throws IOException {\r"},{"sha":"8aa56bc71158252ec2e7db82b0f4f9287bd1b1c0","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/0f7f03d8b0bfcfa33fb3bed73597af731e86cfef/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=0f7f03d8b0bfcfa33fb3bed73597af731e86cfef","patch":"@@ -108,7 +108,7 @@ public ParallelExecutor(DistributedStoreQuery dsq, ClassMetaData meta,\n         \tsuper(dsq, meta, subclasses, parser, parsed);\r\n         \towner = dsq;\r\n         \tthreadPool = dsq.getExecutorServiceInstance();\r\n-        \tserialMode = serial;\r\n+        \tserialMode = false;//serial;\r\n         }\r\n         \r\n \t\tpublic void addExecutor(Executor ex) {\r"}]}

