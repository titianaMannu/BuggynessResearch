{"sha":"0fa0ee9790e1246934b9a553bf55e0a658b0e5c3","node_id":"C_kwDOAAMmHNoAKDBmYTBlZTk3OTBlMTI0NjkzNGI5YTU1M2JmNTVlMGE2NThiMGU1YzM","commit":{"author":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2021-10-21T06:09:44Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-10-21T06:09:44Z"},"message":"Merge pull request #82 from dazey3/OJ2882_master\n\n[master] OPENJPA-2882: Exception passing javax.persistence.* String values to …","tree":{"sha":"25d18f27900d27f6ed8653bb6add759d29bcb7f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/25d18f27900d27f6ed8653bb6add759d29bcb7f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0fa0ee9790e1246934b9a553bf55e0a658b0e5c3","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcQQoCRBK7hj4Ov3rIwAASGMIAA6/TE4tZC87M8zL3zztoj2Q\nPkVG7BIytGycCVh52+lhEGQdLp3hWjGqwdCXB3su8+PrJBRBdY+O1qZbqKNB4bw/\nrV9KnMRYF8wJ0Ymkemcj/IIERsDigZtplnxuKOyJ65QmLI+OKP5m88f7VZlYOg3b\n8vK8tBh9QB5cACL3b9LQW76F547vGmt/Fh7++707W41HeNeP85L4Tms8r+yCSc6U\n7Rn5jt+BuGo8FXGB+fmkNTWVTjhDb2TDL3Lfaq1VyHko2mAGqnbEuy+IYDfTWPG+\n18TOqhfYJTxSckPgkJH3dlgYsiVoXFBpxtOphTet8n9G+D1n9NR7Tl3bwicyiY0=\n=0Z4e\n-----END PGP SIGNATURE-----\n","payload":"tree 25d18f27900d27f6ed8653bb6add759d29bcb7f6\nparent b2a95194349ea1cae59211247a12560a26b64f0c\nparent 30c443dcc32fdc43b75431c9579f8ca415421d17\nauthor Romain Manni-Bucau <rmannibucau@gmail.com> 1634796584 +0200\ncommitter GitHub <noreply@github.com> 1634796584 +0200\n\nMerge pull request #82 from dazey3/OJ2882_master\n\n[master] OPENJPA-2882: Exception passing javax.persistence.* String values to …"}},"url":"https://api.github.com/repos/apache/openjpa/commits/0fa0ee9790e1246934b9a553bf55e0a658b0e5c3","html_url":"https://github.com/apache/openjpa/commit/0fa0ee9790e1246934b9a553bf55e0a658b0e5c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0fa0ee9790e1246934b9a553bf55e0a658b0e5c3/comments","author":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2a95194349ea1cae59211247a12560a26b64f0c","url":"https://api.github.com/repos/apache/openjpa/commits/b2a95194349ea1cae59211247a12560a26b64f0c","html_url":"https://github.com/apache/openjpa/commit/b2a95194349ea1cae59211247a12560a26b64f0c"},{"sha":"30c443dcc32fdc43b75431c9579f8ca415421d17","url":"https://api.github.com/repos/apache/openjpa/commits/30c443dcc32fdc43b75431c9579f8ca415421d17","html_url":"https://github.com/apache/openjpa/commit/30c443dcc32fdc43b75431c9579f8ca415421d17"}],"stats":{"total":95,"additions":94,"deletions":1},"files":[{"sha":"bcff7b19685e2a07e1538515dd6754afe69c6d1a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/property/TestEMProperties.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/0fa0ee9790e1246934b9a553bf55e0a658b0e5c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/property/TestEMProperties.java","raw_url":"https://github.com/apache/openjpa/raw/0fa0ee9790e1246934b9a553bf55e0a658b0e5c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/property/TestEMProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/property/TestEMProperties.java?ref=0fa0ee9790e1246934b9a553bf55e0a658b0e5c3","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agEmployee_Last_Name to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.property;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <b>TestEMProperties</b> is used to test various persistence properties set through EntityManager.setProperty() API\n+ * to ensure no errors are thrown.\n+ */\n+public class TestEMProperties extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(EntityContact.class,\n+              EmbeddableAddress.class,\n+              DROP_TABLES, \"javax.persistence.query.timeout\", 23456);\n+    }\n+\n+    public void testQueryTimeoutPropertyDefault() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        String sql = \"select * from EntityContact\";\n+        OpenJPAQuery<?> query = OpenJPAPersistence.cast(em.createNativeQuery(sql));\n+        assertEquals(23456, query.getFetchPlan().getQueryTimeout());\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public void testQueryTimeoutPropertyOnEntityManagerCreation() {\n+        Map<String, Object> properties = new HashMap<String, Object>();\n+        properties.put(\"javax.persistence.query.timeout\", \"12345\");\n+        // Setting a value of type String should convert if possible and not return an error\n+        EntityManager em = emf.createEntityManager(properties);\n+\n+        String sql = \"select * from EntityContact\";\n+        OpenJPAQuery<?> query = OpenJPAPersistence.cast(em.createNativeQuery(sql));\n+        assertEquals(12345, query.getFetchPlan().getQueryTimeout());\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public void testQueryTimeoutPropertySetOnEntityManager() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // Setting a value of type String should convert if possible and not return an error\n+        em.setProperty(\"javax.persistence.query.timeout\", \"12345\");\n+\n+        String sql = \"select * from EntityContact\";\n+        OpenJPAQuery<?> query = OpenJPAPersistence.cast(em.createNativeQuery(sql));\n+        assertEquals(12345, query.getFetchPlan().getQueryTimeout());\n+\n+        em.clear();\n+        em.close();\n+    }\n+}"},{"sha":"162003c1ad0253734c3c21cf33d20f0aaac3ece0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/0fa0ee9790e1246934b9a553bf55e0a658b0e5c3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","raw_url":"https://github.com/apache/openjpa/raw/0fa0ee9790e1246934b9a553bf55e0a658b0e5c3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java?ref=0fa0ee9790e1246934b9a553bf55e0a658b0e5c3","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.util.HashMap;\n import java.util.Locale;\n import java.util.Map;\n@@ -134,8 +136,18 @@ public static String getBeanProperty(String key) {\n             } else if (value instanceof CacheStoreMode || (value instanceof String && CACHE_STORE_MODE.equals(key))) {\n                 return (T)DataCacheStoreMode.valueOf(value.toString().trim().toUpperCase(Locale.ENGLISH));\n             }\n+\n+            // If the value doesn't match the result type, attempt to convert\n+            if(resultType != null && !resultType.isAssignableFrom(value.getClass())) {\n+                if (value instanceof String) {\n+                    if (\"null\".equals(value)) {\n+                        return null;\n+                    }\n+                    return StringUtil.parse((String) value, resultType);\n+                }\n+            }\n         }\n-        return (T)value;\n+        return (T) value;\n     }\n \n     /**"}]}

