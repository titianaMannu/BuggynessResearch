{"sha":"0fc957a02be3c4ad2f862f1424e56717b0887917","node_id":"MDY6Q29tbWl0MjA2MzY0OjBmYzk1N2EwMmJlM2M0YWQyZjg2MmYxNDI0ZTU2NzE3YjA4ODc5MTc=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-06T20:30:10Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-06T20:30:10Z"},"message":"OPENJPA-2861 fix Raw handling\n\nRaw did loose the internal type. Once 'interned' to Raw the type was always String.class.\nAnd this broke quite a few return type situations in quite a nasty way.","tree":{"sha":"5ffc9e5d9f094618ec9fad9f0df085b62b8ddf78","url":"https://api.github.com/repos/apache/openjpa/git/trees/5ffc9e5d9f094618ec9fad9f0df085b62b8ddf78"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/0fc957a02be3c4ad2f862f1424e56717b0887917","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/0fc957a02be3c4ad2f862f1424e56717b0887917","html_url":"https://github.com/apache/openjpa/commit/0fc957a02be3c4ad2f862f1424e56717b0887917","comments_url":"https://api.github.com/repos/apache/openjpa/commits/0fc957a02be3c4ad2f862f1424e56717b0887917/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"5fd5de9fb8931548f98888abc2d577a4aea341ad","url":"https://api.github.com/repos/apache/openjpa/commits/5fd5de9fb8931548f98888abc2d577a4aea341ad","html_url":"https://github.com/apache/openjpa/commit/5fd5de9fb8931548f98888abc2d577a4aea341ad"}],"stats":{"total":64,"additions":25,"deletions":39},"files":[{"sha":"fbb2732708d9e85a0f4e7211a0bf0304296d30f0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":1,"deletions":19,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/0fc957a02be3c4ad2f862f1424e56717b0887917/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/0fc957a02be3c4ad2f862f1424e56717b0887917/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=0fc957a02be3c4ad2f862f1424e56717b0887917","patch":"@@ -26,7 +26,6 @@\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.Raw;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.Arguments;\n import org.apache.openjpa.kernel.exps.Expression;\n@@ -578,24 +577,7 @@ public Value getMapValue(Value map, Value arg) {\n     private Value getLiteralRawString(Value val) {\n         if (val instanceof Lit) {\n             Lit lit = (Lit) val;\n-            StringBuilder value = new StringBuilder();\n-            int pType = lit.getParseType();\n-            if (pType == Literal.TYPE_SQ_STRING ||\n-                pType == Literal.TYPE_STRING)\n-                value.append(\"'\").append(lit.getValue().toString()).append(\"'\");\n-            else if (pType == Literal.TYPE_BOOLEAN) {\n-                Boolean boolVal = (Boolean)lit.getValue();\n-                if (_isBooleanLiteralAsNumeric)\n-                    value.append(boolVal ? \"1\" : \"0\");\n-                else\n-                    value.append(boolVal ? \"true\" : \"false\");\n-            } else if (pType == Literal.TYPE_ENUM) {\n-                lit.setRaw(true);\n-                return val;\n-            } else\n-                value.append(lit.getValue().toString());\n-            lit.setValue(new Raw(value.toString()));\n-            return lit;\n+            lit.setRaw(true);\n         }\n         return val;\n     }"},{"sha":"1323b546d53af3b7efe356f4afbe47a9c141f4b3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/0fc957a02be3c4ad2f862f1424e56717b0887917/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/0fc957a02be3c4ad2f862f1424e56717b0887917/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java?ref=0fc957a02be3c4ad2f862f1424e56717b0887917","patch":"@@ -39,7 +39,6 @@\n     private Object _val;\n     private int _ptype;\n     private boolean _isRaw;\n-    private Object _rawVal;\n \n     /**\n      * Constructor. Supply literal value.\n@@ -54,9 +53,10 @@ public Lit(Object val, int ptype) {\n \n     @Override\n     public Class getType() {\n-        if (_isRaw && _rawVal != null)\n-            return Raw.class;\n-        return (_val == null) ? Object.class : _val.getClass();\n+        if (_val == null) {\n+            return Object.class;\n+        }\n+        return _val.getClass();\n     }\n \n     @Override\n@@ -92,10 +92,6 @@ public void setRaw(boolean isRaw) {\n         _isRaw = isRaw;\n     }\n \n-    public Object getRawValue() {\n-        return _rawVal;\n-    }\n-\n     @Override\n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         return new LitExpState();\n@@ -112,8 +108,7 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n     }\n \n     @Override\n-    public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n-        Val other, ExpState otherState) {\n+    public void calculateValue(Select sel, ExpContext ctx, ExpState state, Val other, ExpState otherState) {\n         super.calculateValue(sel, ctx, state, other, otherState);\n         LitExpState lstate = (LitExpState) state;\n         if (other != null) {\n@@ -124,16 +119,29 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n     }\n \n     @Override\n-    public void appendTo(Select sel, ExpContext ctx, ExpState state,\n-        SQLBuffer sql, int index) {\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, SQLBuffer sql, int index) {\n         LitExpState lstate = (LitExpState) state;\n         if (lstate.otherLength > 1) {\n             sql.appendValue(((Object[]) lstate.sqlValue)[index], lstate.getColumn(index));\n             // OPENJPA-2631:  Return so as not to go into sql.appendValue a second time below.\n             return;\n         } else if (_isRaw) {\n             int parseType = getParseType();\n-            if (parseType == Literal.TYPE_ENUM) {\n+            if (parseType == Literal.TYPE_SQ_STRING || parseType == Literal.TYPE_STRING) {\n+                lstate.sqlValue = new Raw(\"'\" + _val.toString() + \"'\");\n+            } else if (parseType == Literal.TYPE_BOOLEAN) {\n+                Boolean boolVal = (Boolean)_val;\n+                Object dbRepresentation = ctx.store.getDBDictionary().getBooleanRepresentation().getRepresentation(boolVal);\n+                if (dbRepresentation instanceof String) {\n+                    lstate.sqlValue = new Raw(\"'\" + dbRepresentation.toString() + \"'\");\n+                } else if (dbRepresentation instanceof Boolean ||\n+                           dbRepresentation instanceof Integer) {\n+                    lstate.sqlValue = new Raw(dbRepresentation.toString());\n+                } else {\n+                    // continue without Raw\n+                    lstate.sqlValue = _val;\n+                }\n+            } else if (parseType == Literal.TYPE_ENUM) {\n                 StringBuilder value = new StringBuilder();\n                 boolean isOrdinal = false;\n                 if (lstate.sqlValue instanceof Integer)\n@@ -144,18 +152,16 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n                 if (!isOrdinal)\n                     value.append(\"'\");\n                 lstate.sqlValue = new Raw(value.toString());\n-                _rawVal = lstate.sqlValue;\n             } else if (parseType == Literal.TYPE_DATE || parseType == Literal.TYPE_TIME ||\n                 parseType == Literal.TYPE_TIMESTAMP) {\n                 lstate.sqlValue = new Raw(_val.toString());\n-                _rawVal = lstate.sqlValue;\n+            } else if (parseType == Literal.TYPE_NUMBER) {\n+                lstate.sqlValue = new Raw(_val.toString());\n             } else {\n                 lstate.sqlValue = new Raw(_val instanceof String ? \"'\"+_val+\"'\" : _val.toString());\n-                _rawVal = lstate.sqlValue;\n             }\n         }\n         Object useLiteral = ctx.fetch.getHint(QueryHints.HINT_USE_LITERAL_IN_SQL);\n-//        useLiteral = true;\n         boolean useParamToken = useLiteral != null ? !(Boolean)useLiteral : true;\n         sql.appendValue(lstate.sqlValue, lstate.getColumn(index), null, useParamToken);\n     }"},{"sha":"9225d285e246413ea1363355f4c0ad9f7cfd0b49","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0fc957a02be3c4ad2f862f1424e56717b0887917/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","raw_url":"https://github.com/apache/openjpa/raw/0fc957a02be3c4ad2f862f1424e56717b0887917/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java?ref=0fc957a02be3c4ad2f862f1424e56717b0887917","patch":"@@ -111,12 +111,10 @@ public void testAggregateWithCase() {\n         em.persist(ae2);\r\n         em.getTransaction().commit();\r\n \r\n-/*X\r\n         em.getTransaction().begin();\r\n         final TypedQuery<Long> q2 = em.createQuery(\"select SUM(ae.intVal) from AggEntity AS ae\", Long.class);\r\n         final Long sum = q2.getSingleResult();\r\n         assertEquals(2L, (long) sum);\r\n-*/\r\n \r\n         final TypedQuery<Long> q = em.createQuery(\"select SUM(CASE ae.stringVal WHEN 'bare' THEN 1 ELSE 0 END) from AggEntity AS ae\", Long.class);\r\n         final Long sumC = q.getSingleResult();\r"},{"sha":"597b947cbf963bd61107d8394e18f60484bdc0c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/0fc957a02be3c4ad2f862f1424e56717b0887917/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/0fc957a02be3c4ad2f862f1424e56717b0887917/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java?ref=0fc957a02be3c4ad2f862f1424e56717b0887917","patch":"@@ -319,7 +319,7 @@ public void testGeneralCaseExpressions() {\n         List rs3 = em.createQuery(query3).getResultList();\n         Object[] result3 = (Object[]) rs3.get(0);\n         assertEquals(\"the name is not Jacob\", \"Jacob\", result3[0]);\n-        assertEquals(\"the credit rating is not 'POOR'\", \"POOR\", result3[1]);\n+        assertEquals(\"the credit rating is not 'POOR'\", CompUser.CreditRating.POOR, result3[1]);\n \n         String update2 = \"update CompUser c set c.creditRating = \" +\n             \" CASE WHEN c.name ='Jacob' THEN \" +"}]}

