{"sha":"1000f39d355943c8bfc31322f5a26ffd5a2a1d53","node_id":"MDY6Q29tbWl0MjA2MzY0OjEwMDBmMzlkMzU1OTQzYzhiZmMzMTMyMmY1YTI2ZmZkNWEyYTFkNTM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-28T21:57:48Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-28T21:57:48Z"},"message":"OPENJPA-1486: lazily fetched embeddable should not be materialized in the query result\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@904277 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5580409148e9d236867e4f2f70a9979503eb04d","url":"https://api.github.com/repos/apache/openjpa/git/trees/b5580409148e9d236867e4f2f70a9979503eb04d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1000f39d355943c8bfc31322f5a26ffd5a2a1d53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1000f39d355943c8bfc31322f5a26ffd5a2a1d53","html_url":"https://github.com/apache/openjpa/commit/1000f39d355943c8bfc31322f5a26ffd5a2a1d53","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1000f39d355943c8bfc31322f5a26ffd5a2a1d53/comments","author":null,"committer":null,"parents":[{"sha":"e3560cfd6bf8a4bfe5bad78f17c550a706d6625c","url":"https://api.github.com/repos/apache/openjpa/commits/e3560cfd6bf8a4bfe5bad78f17c550a706d6625c","html_url":"https://github.com/apache/openjpa/commit/e3560cfd6bf8a4bfe5bad78f17c550a706d6625c"}],"stats":{"total":120,"additions":117,"deletions":3},"files":[{"sha":"c3e54c1508c3015cd2dd2ca9ea80db506326701d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1000f39d355943c8bfc31322f5a26ffd5a2a1d53/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/1000f39d355943c8bfc31322f5a26ffd5a2a1d53/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=1000f39d355943c8bfc31322f5a26ffd5a2a1d53","patch":"@@ -1025,8 +1025,13 @@ else if (sm.getVersion() == null)\n                     \tfetch.traverseJDBC(fms[i]), eres);\n                     if (processed != eres)\n                         res.putEager(fms[i], processed);\n-                } else\n-                    fms[i].load(sm, this, fetch.traverseJDBC(fms[i]), res);\n+                } else {\n+                    boolean lazyEmbeddable = fms[i].getValueMapping().isEmbedded() &&\n+                        fms[i].getEmbeddedMetaData() != null && \n+                        fetch.requiresFetch(fms[i]) == FetchConfiguration.FETCH_NONE;\n+                    if (!lazyEmbeddable)    \n+                        fms[i].load(sm, this, fetch.traverseJDBC(fms[i]), res);\n+                }\n             } finally {\n                 res.endDataRequest();\n             }"},{"sha":"b6383e212e38c15972d8f5ff088784abe62b6a3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/1000f39d355943c8bfc31322f5a26ffd5a2a1d53/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed.java","raw_url":"https://github.com/apache/openjpa/raw/1000f39d355943c8bfc31322f5a26ffd5a2a1d53/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed.java?ref=1000f39d355943c8bfc31322f5a26ffd5a2a1d53","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"TBL7B\")\n+public class EntityA_Embed implements Serializable {\n+    @Id\n+    Integer id;\n+\n+    @Column(length=30)\n+    String name;\n+    \n+    @Basic(fetch=FetchType.LAZY)\n+    int age;\n+\n+    @Embedded\n+    protected Embed embed;\n+    \n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Embed getEmbed() {\n+        return embed;\n+    }\n+    \n+    public void setEmbed(Embed embed) {\n+        this.embed = embed;\n+    }\n+}\n+"},{"sha":"a9f2f3a38a7eb7cf1565d6be52a67cd89cfa57b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":33,"deletions":1,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/1000f39d355943c8bfc31322f5a26ffd5a2a1d53/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/1000f39d355943c8bfc31322f5a26ffd5a2a1d53/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=1000f39d355943c8bfc31322f5a26ffd5a2a1d53","patch":"@@ -36,6 +36,7 @@\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.EntityTransaction;\n+import javax.persistence.PersistenceUnitUtil;\n import javax.persistence.Query;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -44,7 +45,9 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n public class TestEmbeddable extends SQLListenerTestCase {\n@@ -100,7 +103,7 @@ public void setUp() {\n             Embed_MappedToOne.class, Embed_MappedToOneCascadeDelete.class, \n             EntityA_Embed_MappedToOneCascadeDelete.class, EntityB2.class, \n             Book.class, Listing.class, Seller.class,\n-            EntityA_Embed_Coll_Map.class, Embed_Coll_Map.class,\n+            EntityA_Embed_Coll_Map.class, Embed_Coll_Map.class, EntityA_Embed.class,\n             EntityA_Embed_Complex.class, A.class, CLEAR_TABLES);\n             sql.clear();\n             DBDictionary dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n@@ -922,6 +925,35 @@ public void findEntityA_Embed_ToOne() {\n         assertNull(b);\n         em.close();\n     }\n+    \n+    public void testLazyFetchEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityA_Embed a = new EntityA_Embed();\n+        a.setId(ID);\n+        a.setName(\"name\");\n+        a.setAge(1);\n+        Embed emb = new Embed();\n+        emb.setIntVal1(1);\n+        emb.setIntVal1(2);\n+        emb.setIntVal1(3);\n+        a.setEmbed(emb);\n+        em.persist(a);\n+        em.getTransaction().begin();\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        PersistenceUnitUtil puu = emf.getPersistenceUnitUtil();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+        // do not fetch emb\n+        kem.getFetchPlan().resetFetchGroups().removeFetchGroup(\"default\")\n+            .addField(EntityA_Embed.class, \"name\")\n+            .addField(EntityA_Embed.class, \"age\");\n+        a = em.find(EntityA_Embed.class, ID);\n+        assertNotNull(a);\n+        Embed embed = a.getEmbed();\n+        assertNull(embed);\n+        assertFalse(puu.isLoaded(a, \"embed\"));\n+    }\n \n     /*\n      * Find EntityA_Embed_MappedToOne"}]}

