{"sha":"105d46c6eacbaad594e991b012f046da5d7d38fd","node_id":"MDY6Q29tbWl0MjA2MzY0OjEwNWQ0NmM2ZWFjYmFhZDU5NGU5OTFiMDEyZjA0NmRhNWQ3ZDM4ZmQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-22T16:19:17Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-22T16:19:17Z"},"message":"OPENJPA-1308:\nRemove extraneous cast of VARCHAR to VARCHAR for DB2.\nSubmitted By: B.J. Reed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@828772 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08f107bef2770a873f546146a6fe338ff7615924","url":"https://api.github.com/repos/apache/openjpa/git/trees/08f107bef2770a873f546146a6fe338ff7615924"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/105d46c6eacbaad594e991b012f046da5d7d38fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/105d46c6eacbaad594e991b012f046da5d7d38fd","html_url":"https://github.com/apache/openjpa/commit/105d46c6eacbaad594e991b012f046da5d7d38fd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/105d46c6eacbaad594e991b012f046da5d7d38fd/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5d793884e63d62b5f88705173083cb0ee0603485","url":"https://api.github.com/repos/apache/openjpa/commits/5d793884e63d62b5f88705173083cb0ee0603485","html_url":"https://github.com/apache/openjpa/commit/5d793884e63d62b5f88705173083cb0ee0603485"}],"stats":{"total":304,"additions":226,"deletions":78},"files":[{"sha":"82fce7277ab19dcefb8e3ff3a70072b26fbe653b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -43,7 +43,11 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toLowerCaseFunction;\n         dict.assertSupport(func != null, \"ToLowerCaseFunction\");\n-        func = dict.getCastFunction(getValue(), func);\n+        if (getValue() instanceof PCPath) {\n+            func = dict.getCastFunction(getValue(), func, ((PCPath) getValue()).getFieldMapping(state).getColumns()[0]);\n+        } else {\n+            func = dict.getCastFunction(getValue(), func);\n+        }\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"3914ff1e40457795c42c171da2855d92575c3091","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -43,7 +43,11 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toUpperCaseFunction;\n         dict.assertSupport(func != null, \"ToUpperCaseFunction\");\n-        func = dict.getCastFunction(getValue(), func);\n+        if (getValue() instanceof PCPath) {\n+            func = dict.getCastFunction(getValue(), func, ((PCPath) getValue()).getFieldMapping(state).getColumns()[0]);\n+        } else {\n+            func = dict.getCastFunction(getValue(), func);\n+        }\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"b9b32bbff166116295f46ee5c21b0afc44bf91a1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -38,13 +38,9 @@ public AbstractDB2Dictionary() {\n \n         // DB2-based databases have restrictions on having uncast parameters\n         // in string functions\n-        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")))\";\n-        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")))\";\n         stringLengthFunction = \"LENGTH({0})\";\n         concatenateFunction = \"(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")) || CAST({1} AS VARCHAR(1000)))\";\n+            + \")) || CAST({1} AS VARCHAR(\" + varcharCastLength + \")))\";\n \n         trimLeadingFunction = \"LTRIM({0})\";\n         trimTrailingFunction = \"RTRIM({0})\";\n@@ -60,6 +56,7 @@ public AbstractDB2Dictionary() {\n         supportsLockingWithOuterJoin = false;\n         supportsLockingWithInnerJoin = false;\n         supportsLockingWithSelectRange = true;\n+        supportsCaseConversionForLob = true;\n \n         requiresAutoCommitForMetaData = true;\n         requiresAliasForSubselect = true;"},{"sha":"19a876e2f47c42b2518d6a2d0883addf9c509e42","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":30,"deletions":3,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -763,9 +763,36 @@ public int getBatchLimit() {\n      * @return a String with the correct CAST function syntax\n      */\n     public String getCastFunction(Val val, String func) {\n-        if (val instanceof Lit || val instanceof Param)\n-            if (func.indexOf(\"VARCHAR\") == -1)\n-                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(1000)\");\n+        if (val instanceof Lit || val instanceof Param) {\n+            if (func.indexOf(\"VARCHAR\") == -1) {\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(\" + varcharCastLength + \")\");\n+            }\n+        }\n+        return func;\n+    }\n+\n+    /**\n+     * Return the correct CAST function syntax\n+     * \n+     * @param val operand of cast\n+     * @param func original string\n+     * @param col database column\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func, Column col) {\n+        boolean doCast = false;\n+        if (val instanceof Lit || val instanceof Param) {\n+            doCast = true;\n+        }\n+        // cast anything not already a VARCHAR to VARCHAR\n+        if (col.getType() != Types.VARCHAR) {\n+            doCast = true;\n+        }\n+        if (doCast == true) {\n+            if (func.indexOf(\"VARCHAR\") == -1) {\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(\" + varcharCastLength + \")\");\n+            }\n+        }\n         return func;\n     }\n "},{"sha":"7c873aa230b73ab21752d13c5edc912f4c496327","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -240,6 +240,7 @@\n     public boolean requiresCastForComparisons = false;\n     public boolean supportsModOperator = false;\n     public boolean supportsXMLColumn = false;\n+    public boolean supportsCaseConversionForLob = false;\n     public boolean reportsSuccessNoInfoOnBatchUpdates = false;\n     public boolean supportsSelectFromFinalTable = false;\n     public boolean supportsSimpleCaseExpression = true;\n@@ -4798,6 +4799,19 @@ protected long copy(Reader reader, Writer writer) throws IOException {\n     public String getCastFunction(Val val, String func) {\n         return func;\n     }\n+\n+    /**\n+     * Return the correct CAST function syntax.  This should be overriden by subclasses\n+     * that need access to the Column information.\n+     * \n+     * @param val operand of cast\n+     * @param func original string\n+     * @param col database column\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func, Column col) {\n+        return getCastFunction (val, func);\n+    }\n     \n     /**\n      * Create an index if necessary for some database tables"},{"sha":"efcf8bf881a5c5629384a382de0cea1eb154a132","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -45,6 +45,8 @@ public DerbyDictionary() {\n         validationSQL = \"VALUES(1)\";\n         stringLengthFunction = \"LENGTH({0})\";\n         substringFunctionName = \"SUBSTR\";\n+        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(\" + varcharCastLength + \")))\";\n+        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(\" + varcharCastLength + \")))\";\n \n         // Derby name length restriction has been relaxed \n         //http://www.archivum.info/derby-dev@db.apache.org/2004-12/msg00270.html"},{"sha":"277081ab656aa8e7b589c38fa2aed46c14f2a785","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","status":"modified","additions":109,"deletions":68,"changes":177,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -18,94 +18,135 @@\n  */\n package org.apache.openjpa.persistence.common.apps;\n \n-import javax.persistence.*;\n-import org.apache.openjpa.persistence.*;\n-\n-import java.util.*;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToOne;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n \n @Entity\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n-public class CompUser\n-{\n-\t@Basic\n-\t@Column(length=50)\n-\tprivate String name;\n-\n-\t@Basic\n-\tprivate int age;\n-\n-\t@Basic\n-\t@Column(name=\"compName\", length=50)\n-\tprivate String computerName;\n-\n-\t@PersistentCollection\n-\tprivate String[] nicknames = new String[0];\n-\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n-\t@JoinColumn(name=\"ADD_ID\")\n-\tprivate Address address;\n-\n-\t@Id\n-\t@GeneratedValue(strategy=GenerationType.AUTO)\n-\tpublic int userid;\n-\t\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+public class CompUser {\n+    @Basic\n+    @Column(length = 50)\n+    private String name;\n+\n+    @Basic\n+    private int age;\n+\n+    @Basic\n+    @Column(name = \"compName\", length = 50)\n+    private String computerName;\n+\n+    @Basic\n+    @Lob\n+    private String nameAsLob;\n+\n+    @PersistentCollection\n+    private String[] nicknames = new String[0];\n+\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    @JoinColumn(name = \"ADD_ID\")\n+    private Address address;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    public int userid;\n+\n     @Enumerated\n     @Basic\n     private CreditRating creditRating;\n-\t\n-\tpublic CompUser(){}\n \n-\tpublic CompUser(String name, String cName, Address address, int age)\n-\t{\n-\t\tthis.name = name;\n-\t\tthis.computerName = cName;\n-\t\tthis.address = address;\n-\t\tthis.age = age;\n-\t}\n+    public CompUser() {\n+    }\n \n-\tpublic String getComputerName() {\n-\t\treturn computerName;\n-\t}\n+    public CompUser(String name, String cName, Address address, int age) {\n+        this.name = name;\n+        this.computerName = cName;\n+        this.address = address;\n+        this.age = age;\n+        this.nameAsLob = name;\n+    }\n \n-\tpublic void setComputerName(String computerName) {\n-\t\tthis.computerName = computerName;\n-\t}\n+    public String getComputerName() {\n+        return computerName;\n+    }\n \n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n+    public void setComputerName(String computerName) {\n+        this.computerName = computerName;\n+    }\n \n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n+    public String getName() {\n+        return name;\n+    }\n \n-\tpublic int getUserid() {\n-\t\treturn userid;\n-\t}\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n \n-\tpublic Address getAddress() {\n-\t\treturn address;\n-\t}\n+    public int getUserid() {\n+        return userid;\n+    }\n \n-\tpublic void setAddress(Address address) {\n-\t\tthis.address = address;\n-\t}\n+    public Address getAddress() {\n+        return address;\n+    }\n \n-\tpublic int getAge() {\n-\t\treturn age;\n-\t}\n+    public void setAddress(Address address) {\n+        this.address = address;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n \n-\tpublic void setAge(int age) {\n-\t\tthis.age = age;\n-\t}\n+    public String getNameAsLob() {\n+        return nameAsLob;\n+    }\n+\n+    public void setNameAsLob(String nameAsLob) {\n+        this.nameAsLob = nameAsLob;\n+    }\n \n     public CreditRating getRating() {\n         return creditRating;\n     }\n-    \n+\n     public void setRating(CreditRating rating) {\n         this.creditRating = rating;\n     }\n-\t\n-    public enum CreditRating { POOR, GOOD, EXCELLENT };\n+\n+    public enum CreditRating {\n+        POOR, GOOD, EXCELLENT\n+    };\n+\n+    public String[] getNicknames() {\n+        return nicknames;\n+    }\n+\n+    public void setNicknames(String[] nicknames) {\n+        this.nicknames = nicknames;\n+    }\n+\n+    public CreditRating getCreditRating() {\n+        return creditRating;\n+    }\n+\n+    public void setCreditRating(CreditRating creditRating) {\n+        this.creditRating = creditRating;\n+    }\n }"},{"sha":"4d7bd958769daaff9f550e109618ec9a2b1b570e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -313,12 +313,14 @@ public CompUser createUser(String name, String cName, Address add, int age,\n             user.setComputerName(cName);\n             user.setAddress(add);\n             user.setAge(age);\n+            user.setNameAsLob(name);\n         } else {\n             user = new FemaleUser();\n             user.setName(name);\n             user.setComputerName(cName);\n             user.setAddress(add);\n             user.setAge(age);\n+            user.setNameAsLob(name);\n         }\n         return user;\n \t}"},{"sha":"5137df9124b962c6ebe8de4da2a7ef424421e114","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","status":"modified","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","raw_url":"https://github.com/apache/openjpa/raw/105d46c6eacbaad594e991b012f046da5d7d38fd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java?ref=105d46c6eacbaad594e991b012f046da5d7d38fd","patch":"@@ -24,6 +24,7 @@\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.common.apps.Address;\n import org.apache.openjpa.persistence.common.apps.CompUser;\n import org.apache.openjpa.persistence.common.apps.FemaleUser;\n@@ -196,6 +197,33 @@ public void testLowerFunc() {\n         endEm(em);\n     }\n \n+    public void testLowerClobFunc() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI) currentEntityManager();\n+        // some databases do not support case conversion on LOBs,\n+        // just skip this test case\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration()).getDBDictionaryInstance();\n+        if (!dict.supportsCaseConversionForLob) {\n+            return;\n+        }\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid5);\n+        assertNotNull(user);\n+        assertEquals(\"Famzy\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET e.name = LOWER(e.name) WHERE LOWER(e.nameAsLob)='famzy'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid5);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"famzy\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n     public void testUpperFunc() {\n         EntityManager em = currentEntityManager();\n         startTx(em);\n@@ -218,6 +246,33 @@ public void testUpperFunc() {\n         endEm(em);\n     }\n \n+    public void testUpperClobFunc() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI) currentEntityManager();\n+        // some databases do not support case conversion on LOBs,\n+        // just skip this test case\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration()).getDBDictionaryInstance();\n+        if (!dict.supportsCaseConversionForLob) {\n+            return;\n+        }\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid5);\n+        assertNotNull(user);\n+        assertEquals(\"Famzy\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET e.name = UPPER(e.name) WHERE UPPER(e.nameAsLob)='FAMZY'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid5);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"FAMZY\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n     public void testLengthFunc() {\n         EntityManager em = currentEntityManager();\n \n@@ -415,12 +470,14 @@ public CompUser createUser(String name, String cName, Address add, int age,\n             user.setComputerName(cName);\n             user.setAddress(add);\n             user.setAge(age);\n+            user.setNameAsLob(name);\n         } else {\n             user = new FemaleUser();\n             user.setName(name);\n             user.setComputerName(cName);\n             user.setAddress(add);\n             user.setAge(age);\n+            user.setNameAsLob(name);\n         }\n         return user;\n     }"}]}

