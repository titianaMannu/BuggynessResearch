{"sha":"11082c29d7a2e112e584be02b6e8560fa4a15a7c","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMDgyYzI5ZDdhMmUxMTJlNTg0YmUwMmI2ZTg1NjBmYTRhMTVhN2M=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-05-12T19:36:22Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-05-12T19:36:22Z"},"message":"OPENJPA-589: Can not retrieve M-to-M data when DataCache is on.\nSubmitted By: Heath Thomann, merged from Fay's changes in trunk and 1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@943647 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"366774d0c3db41e9f62c8dcc68b322ce06f09623","url":"https://api.github.com/repos/apache/openjpa/git/trees/366774d0c3db41e9f62c8dcc68b322ce06f09623"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/11082c29d7a2e112e584be02b6e8560fa4a15a7c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/11082c29d7a2e112e584be02b6e8560fa4a15a7c","html_url":"https://github.com/apache/openjpa/commit/11082c29d7a2e112e584be02b6e8560fa4a15a7c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/11082c29d7a2e112e584be02b6e8560fa4a15a7c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"7829388b5e94682cf73689311e4be077bd77d683","url":"https://api.github.com/repos/apache/openjpa/commits/7829388b5e94682cf73689311e4be077bd77d683","html_url":"https://github.com/apache/openjpa/commit/7829388b5e94682cf73689311e4be077bd77d683"}],"stats":{"total":222,"additions":213,"deletions":9},"files":[{"sha":"17ad0a7cc696b0191fc734b910f1bacc62498dd3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/11082c29d7a2e112e584be02b6e8560fa4a15a7c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/11082c29d7a2e112e584be02b6e8560fa4a15a7c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=11082c29d7a2e112e584be02b6e8560fa4a15a7c","patch":"@@ -86,18 +86,22 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n             case JavaTypes.MAP:\n                 Map m = (Map) data;\n                 Map m2 = (Map) sm.newFieldProxy(fmd.getIndex());\n-                Collection keys = new ArrayList (m.size());\n+                Collection keys = new ArrayList(m.size());\n+                Collection values = new ArrayList(m.size());\n+                Map.Entry e;\n \n-                for (Iterator mi = m.entrySet().iterator(); mi.hasNext();)\n-                    keys.add(mi.next());\n+                Iterator itr = m.entrySet().iterator();\n+                while (itr.hasNext()) {\n+                    e = (Map.Entry) itr.next();\n+                    keys.add(e.getKey());\n+                    values.add(e.getValue());\n+                }\n \n                 Object[] keyArray = keys.toArray();\n-                Object[] values = toNestedFields(sm, fmd.getElement(),\n-                    keys, fetch, context).toArray();\n-                int idx = 0;\n-                for (Iterator mi = m.entrySet().iterator(); mi.hasNext(); idx++)\n-                    m2.put(keyArray[idx], values[idx]);\n-\n+                Object[] valueArray = toNestedFields(sm, fmd.getElement(), values, fetch, context).toArray();\n+                for (int idx = 0; idx < keyArray.length; idx++) {\n+                    m2.put(keyArray[idx], valueArray[idx]);\n+                }\n                 return m2;\n             case JavaTypes.ARRAY:\n                 int length = Array.getLength(data);"},{"sha":"1f4b77ba67bd8f5a74d25f8d8e8be4334437464e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/11082c29d7a2e112e584be02b6e8560fa4a15a7c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/11082c29d7a2e112e584be02b6e8560fa4a15a7c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java?ref=11082c29d7a2e112e584be02b6e8560fa4a15a7c","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.M2MEntityE;\n+import org.apache.openjpa.persistence.datacache.common.apps.M2MEntityF;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestM2MInDataCache extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\", M2MEntityE.class, M2MEntityF.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    /**\n+     * Test if child list is in order after new child list is added in setup().\n+     */\n+    public void testM2MDataCache() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        M2MEntityE e1 = new M2MEntityE();\n+        e1.setId(1);\n+        e1.setName(\"ABC\");\n+        em.persist(e1);\n+        M2MEntityE e2 = new M2MEntityE();\n+        e2.setId(2);\n+        e2.setName(\"DEF\");\n+        em.persist(e2);\n+\n+        M2MEntityF f1 = new M2MEntityF();\n+        f1.setId(10);\n+        em.persist(f1);\n+        M2MEntityF f2 = new M2MEntityF();\n+        f2.setId(20);\n+        em.persist(f2);\n+\n+        e1.getEntityF().put(f1.getId(), f1);\n+        e1.getEntityF().put(f2.getId(), f2);\n+        e2.getEntityF().put(f1.getId(), f1);\n+        e2.getEntityF().put(f2.getId(), f2);\n+\n+        f1.getEntityE().put(e1.getName(), e1);\n+        f1.getEntityE().put(e2.getName(), e2);\n+        f2.getEntityE().put(e1.getName(), e1);\n+        f2.getEntityE().put(e2.getName(), e2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        // check that we can find the entities and retrieve their map fields\n+        assertNotNull(em.find(M2MEntityE.class, 1).getEntityF());\n+        assertNotNull(em.find(M2MEntityE.class, 2).getEntityF());\n+        assertNotNull(em.find(M2MEntityF.class, 10).getEntityE());\n+        assertNotNull(em.find(M2MEntityF.class, 20).getEntityE());\n+    }\n+}"},{"sha":"51a67304e6411540b0ec2603f0a6ee3fb807c0f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityE.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/11082c29d7a2e112e584be02b6e8560fa4a15a7c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityE.java","raw_url":"https://github.com/apache/openjpa/raw/11082c29d7a2e112e584be02b6e8560fa4a15a7c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityE.java?ref=11082c29d7a2e112e584be02b6e8560fa4a15a7c","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.*;\n+import java.util.*;\n+\n+@Entity\n+public class M2MEntityE {\n+    @Id\n+    private int id;\n+\n+    private String name;\n+\n+    @ManyToMany\n+    @MapKey(name = \"id\")\n+    private Map<Integer, M2MEntityF> entityf;\n+\n+    public M2MEntityE() {\n+        entityf = new HashMap<Integer, M2MEntityF>();\n+        name = \"entitye\";\n+    }\n+\n+    public Map<Integer, M2MEntityF> getEntityF() {\n+        return entityf;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String toString() {\n+        return \"EntityE:\" + id;\n+    }\n+\n+    public void print() {\n+        System.out.println(\"EntityD id=\" + id + \" entityc=\" + entityf);\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"052bf790c90c9f6af28bc2462ad3462132dc420b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityF.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/11082c29d7a2e112e584be02b6e8560fa4a15a7c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityF.java","raw_url":"https://github.com/apache/openjpa/raw/11082c29d7a2e112e584be02b6e8560fa4a15a7c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/M2MEntityF.java?ref=11082c29d7a2e112e584be02b6e8560fa4a15a7c","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.*;\n+import java.util.*;\n+\n+@Entity\n+public class M2MEntityF {\n+    @Id\n+    private int id;\n+\n+    @ManyToMany(mappedBy = \"entityf\")\n+    @MapKey(name = \"name\")\n+    private Map<String, M2MEntityE> entitye;\n+\n+    public M2MEntityF() {\n+        entitye = new HashMap<String, M2MEntityE>();\n+    }\n+\n+    public Map<String, M2MEntityE> getEntityE() {\n+        return entitye;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String toString() {\n+        return \"EntityF:\" + id;\n+    }\n+\n+    public void print() {\n+        System.out.println(\"EntityF id=\" + id + \" entitye=\" + entitye);\n+    }\n+}"}]}

