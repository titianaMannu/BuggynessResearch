{"sha":"110cb20e798f6c6eb2211b973ff23826604daf84","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMGNiMjBlNzk4ZjZjNmViMjIxMWI5NzNmZjIzODI2NjA0ZGFmODQ=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-01T21:13:30Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-12-01T21:13:30Z"},"message":"OPENJPA-1248: Improve LOB streaming with PostgreSQL when connections are being wrapped by data source; refactor and modify test case not to run Reader LOB tests while on PostgreSQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@885935 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"90ce0428e4d9c1bd0bd81e5866d12f5b45961713","url":"https://api.github.com/repos/apache/openjpa/git/trees/90ce0428e4d9c1bd0bd81e5866d12f5b45961713"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/110cb20e798f6c6eb2211b973ff23826604daf84","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/110cb20e798f6c6eb2211b973ff23826604daf84","html_url":"https://github.com/apache/openjpa/commit/110cb20e798f6c6eb2211b973ff23826604daf84","comments_url":"https://api.github.com/repos/apache/openjpa/commits/110cb20e798f6c6eb2211b973ff23826604daf84/comments","author":null,"committer":null,"parents":[{"sha":"2c00f18f0c634ed5c16ebdbb90188e24033ef124","url":"https://api.github.com/repos/apache/openjpa/commits/2c00f18f0c634ed5c16ebdbb90188e24033ef124","html_url":"https://github.com/apache/openjpa/commit/2c00f18f0c634ed5c16ebdbb90188e24033ef124"}],"stats":{"total":147,"additions":106,"deletions":41},"files":[{"sha":"d10fda5d1f966dac5f9a6f1fb3ed589230cf1c3b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":80,"deletions":14,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/110cb20e798f6c6eb2211b973ff23826604daf84/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/110cb20e798f6c6eb2211b973ff23826604daf84/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=110cb20e798f6c6eb2211b973ff23826604daf84","patch":"@@ -24,6 +24,7 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.PreparedStatement;\n@@ -47,6 +48,7 @@\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n@@ -56,7 +58,7 @@\n import org.postgresql.largeobject.LargeObjectManager;\n \n /**\n- * Dictionary for Postgres.\n+ * Dictionary for PostgreSQL.\n  */\n public class PostgresDictionary\n     extends DBDictionary {\n@@ -67,6 +69,9 @@\n     private static Constructor<PostgresConnection> postgresConnectionImpl;\n     private static Constructor<PostgresPreparedStatement> postgresPreparedStatementImpl;\n \n+    private Method dbcpGetDelegate;\n+    private Method connectionUnwrap;\n+\n     static {\n         try {\n             postgresConnectionImpl = ConcreteClassGenerator.getConcreteConstructor(\n@@ -385,8 +390,7 @@ public InputStream getLOBStream(JDBCStore store, ResultSet rs,\n         DelegatingConnection conn = (DelegatingConnection)store\n             .getConnection();\n         conn.setAutoCommit(false);\n-        LargeObjectManager lom = ((PGConnection)conn.getInnermostDelegate())\n-        .getLargeObjectAPI();\n+        LargeObjectManager lom = getLargeObjectManager(conn);\n         if (rs.getInt(column) != -1) {\n             LargeObject lo = lom.open(rs.getInt(column));\n             return lo.getInputStream();\n@@ -412,8 +416,7 @@ private void insertPostgresBlob(Row row, Column col, JDBCStore store,\n             .getConnection();\n             try {\n                 conn.setAutoCommit(false);\n-                PGConnection pgconn = (PGConnection)conn.getInnermostDelegate();\n-                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                LargeObjectManager lom = getLargeObjectManager(conn);\n                 // The create method is valid in versions previous to 8.3\n                 // in 8.3 this method is deprecated, use createLO\n                 int oid = lom.create();\n@@ -451,9 +454,7 @@ private void updatePostgresBlob(Row row, Column col, JDBCStore store,\n             int oid = res.getInt(1);\n             if (oid != -1) {\n                 conn.setAutoCommit(false);\n-                PGConnection pgconn = (PGConnection)conn\n-                    .getInnermostDelegate();\n-                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                LargeObjectManager lom = getLargeObjectManager(conn);\n                 if (ob != null) {\n                     LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n                     OutputStream os = lo.getOutputStream();\n@@ -466,9 +467,7 @@ private void updatePostgresBlob(Row row, Column col, JDBCStore store,\n             } else {\n                 if (ob != null) {\n                     conn.setAutoCommit(false);\n-                    PGConnection pgconn = (PGConnection)conn\n-                        .getInnermostDelegate();\n-                    LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                    LargeObjectManager lom = getLargeObjectManager(conn);\n                     oid = lom.create();\n                     LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n                     OutputStream os = lo.getOutputStream();\n@@ -514,9 +513,7 @@ public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n             int oid = res.getInt(1);\n             if (oid != -1) {\n                 conn.setAutoCommit(false);\n-                PGConnection pgconn = (PGConnection)conn\n-                    .getInnermostDelegate();\n-                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                LargeObjectManager lom = getLargeObjectManager(conn);\n                 lom.delete(oid);\n             }\n         } finally {\n@@ -676,6 +673,75 @@ public String getPlaceholderValueString(Column col) {\n         }\n     }\n \n+    /**\n+     * Get the native PostgreSQL Large Object Manager used for LOB handling.\n+     */\n+    protected LargeObjectManager getLargeObjectManager(DelegatingConnection conn) throws SQLException {\n+        return getPGConnection(conn).getLargeObjectAPI();\n+    }\n+\n+    /**\n+     * Get the native PostgreSQL connection from the given connection.\n+     * Various attempts of unwrapping are being performed.\n+     */\n+    protected PGConnection getPGConnection(DelegatingConnection conn) {\n+        Connection innerConn = conn.getInnermostDelegate();\n+        if (innerConn instanceof PGConnection) {\n+            return (PGConnection) innerConn;\n+        }\n+        if (innerConn.getClass().getName().startsWith(\"org.apache.commons.dbcp\")) {\n+            return (PGConnection) getDbcpDelegate(innerConn);\n+        }\n+        return (PGConnection) unwrapConnection(conn, PGConnection.class);\n+    }\n+\n+    /**\n+     * Get the delegated connection from the given DBCP connection.\n+     * \n+     * @param conn must be a DBCP connection\n+     * @return connection the DBCP connection delegates to\n+     */\n+    protected Connection getDbcpDelegate(Connection conn) {\n+        Connection delegate = null;\n+        try {\n+            if (dbcpGetDelegate == null) {\n+                Class<?> dbcpConnectionClass =\n+                    Class.forName(\"org.apache.commons.dbcp.DelegatingConnection\", true, AccessController\n+                        .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction()));\n+                \n+                dbcpGetDelegate = dbcpConnectionClass.getMethod(\"getInnermostDelegate\");\n+            }\n+            delegate = (Connection) dbcpGetDelegate.invoke(conn);\n+        } catch (Exception e) {\n+            throw new InternalException(_loc.get(\"dbcp-unwrap-failed\"), e);\n+        }\n+        if (delegate == null) {\n+            throw new InternalException(_loc.get(\"dbcp-unwrap-failed\"));\n+        }\n+        return delegate;\n+    }\n+\n+    /**\n+     * Get (unwrap) the delegated connection from the given connection.\n+     * Use reflection to attempt to unwrap a connection.\n+     * Note: This is a JDBC 4 operation, so it requires a Java 6 environment \n+     * with a JDBC 4 driver or data source to have any chance of success.\n+     * \n+     * @param conn a delegating connection\n+     * @param connectionClass the expected type of delegated connection\n+     * @return connection the given connection delegates to\n+     */\n+    private Connection unwrapConnection(Connection conn, Class<?> connectionClass) {\n+        try {\n+            if (connectionUnwrap == null) {\n+                connectionUnwrap = Connection.class.getMethod(\"unwrap\", Class.class);\n+            }\n+            return (Connection) connectionUnwrap.invoke(conn, connectionClass);\n+        } catch (Exception e) {\n+            throw new InternalException(_loc.get(\"connection-unwrap-failed\"), e);\n+        }\n+    }\n+\n     /**\n      * Connection wrapper to work around the postgres empty result set bug.\n      */"},{"sha":"e98334e110db6be31d3134c6dde30ad96aa6e472","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/110cb20e798f6c6eb2211b973ff23826604daf84/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/110cb20e798f6c6eb2211b973ff23826604daf84/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=110cb20e798f6c6eb2211b973ff23826604daf84","patch":"@@ -194,3 +194,9 @@ error-setting-query-timeout: A SQLException was thrown when trying to set the \\\n     continue processing. If this is a benign error you may disable it entirely \\\n \tby setting the supportsQueryTimeout attribute on the DBDictionary to false.\\\n \tThe exception thrown was {1}.\n+dbcp-unwrap-failed: Unable to get underlying connection from DBCP pooled \\\n+\tconnection. Make sure the DBCP property AccessToUnderlyingConnectionAllowed \\\n+\tis enabled.\n+connection-unwrap-failed: Unable to get underlying connection from pooled \\\n+\tconnection. Java version 6 and a version 4 capable JDBC driver \\\n+\tor data source are minimum requirements to perform this operation."},{"sha":"924157d0bb4afe725d2ff3371d32b7755a95e2ab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","status":"modified","additions":12,"deletions":27,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/110cb20e798f6c6eb2211b973ff23826604daf84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/110cb20e798f6c6eb2211b973ff23826604daf84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java?ref=110cb20e798f6c6eb2211b973ff23826604daf84","patch":"@@ -20,17 +20,18 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.DataCachePCData;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n-import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.jdbc.sql.SQLServerDictionary;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n@@ -46,25 +47,22 @@\n \n public abstract class AbstractLobTest extends SingleEMFTestCase {\n \n+    protected List<Class<? extends DBDictionary>> supportedDatabases =\n+        new ArrayList<Class<? extends DBDictionary>>\n+            (Arrays.asList(MySQLDictionary.class, OracleDictionary.class, SQLServerDictionary.class));\n+        \n     public void setUp() throws Exception {\n+        setSupportedDatabases(supportedDatabases.toArray(new Class<?>[] {}));\n+        if (isTestsDisabled()) {\n+            return;\n+        }\n+\n         super.setUp(getLobEntityClass(), CLEAR_TABLES,\n             \"openjpa.DataCache\", \"true\",\n             \"openjpa.RemoteCommitProvider\", \"sjvm\",\n             \"openjpa.ConnectionRetainMode\", \"transaction\");\n     }\n \n-    public boolean isDatabaseSupported() {\n-        DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration())\n-            .getDBDictionaryInstance();\n-        if (dict instanceof MySQLDictionary ||\n-            dict instanceof SQLServerDictionary ||\n-            dict instanceof OracleDictionary ||\n-            dict instanceof PostgresDictionary) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     public void insert(LobEntity le) {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -74,12 +72,10 @@ public void insert(LobEntity le) {\n     }\n \n     public void testInsert() {\n-        if (!isDatabaseSupported()) return;\n         insert(newLobEntity(\"oOOOOOo\", 1));\n     }\n \n     public void testInsertAndSelect() throws IOException {\n-        if (!isDatabaseSupported()) return;\n         String s = \"oooOOOooo\";\n         insert(newLobEntity(s, 1));\n         EntityManager em = emf.createEntityManager();\n@@ -94,7 +90,6 @@ public void testInsertAndSelect() throws IOException {\n     }\n \n     public void testInsertNull() {\n-        if (!isDatabaseSupported()) return;\n         insert(newLobEntity(null, 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -105,7 +100,6 @@ public void testInsertNull() {\n     }\n \n     public void testUpdate() throws IOException {\n-        if (!isDatabaseSupported()) return;\n         insert(newLobEntity(\"oOOOOOo\", 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -123,7 +117,6 @@ public void testUpdate() throws IOException {\n     }\n \n     public void testUpdateWithNull() {\n-        if (!isDatabaseSupported()) return;\n         insert(newLobEntity(\"oOOOOOo\", 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -140,7 +133,6 @@ public void testUpdateWithNull() {\n     }\n     \n     public void testUpdateANullObjectWithoutNull() throws IOException {\n-        if (!isDatabaseSupported()) return;\n         insert(newLobEntity(null, 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -158,7 +150,6 @@ public void testUpdateANullObjectWithoutNull() throws IOException {\n     }\n     \n     public void testDelete() {\n-        if (!isDatabaseSupported()) return;\n         insert(newLobEntity(\"oOOOOOo\", 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -175,7 +166,6 @@ public void testDelete() {\n     }\n     \n     public void testLifeCycleInsertFlushModify() {\n-        if (!isDatabaseSupported()) return;\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity le = newLobEntity(\"oOOOOOo\", 1);\n@@ -187,7 +177,6 @@ public void testLifeCycleInsertFlushModify() {\n     }\n \n     public void testLifeCycleLoadFlushModifyFlush() {\n-        if (!isDatabaseSupported()) return;\n         insert(newLobEntity(\"oOOOOOo\", 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -201,7 +190,6 @@ public void testLifeCycleLoadFlushModifyFlush() {\n \n     public void testReadingMultipleTimesWithASingleConnection()\n         throws IOException {\n-        if (!isDatabaseSupported()) return;\n         insert(newLobEntity(\"oOOOOOo\", 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -222,7 +210,6 @@ public void testReadingMultipleTimesWithASingleConnection()\n     }\n \n     public void testDataCache() {\n-        if (!isDatabaseSupported()) return;\n         OpenJPAEntityManager em = emf.createEntityManager();\n \n         em.getTransaction().begin();\n@@ -241,7 +228,6 @@ public void testDataCache() {\n     }\n \n     public void testSetResetAndFlush() throws IOException {\n-        if (!isDatabaseSupported()) return;\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity le = newLobEntity(\"oOOOOOo\", 1);\n@@ -259,7 +245,6 @@ public void testSetResetAndFlush() throws IOException {\n     }\n \n     public void testSetFlushAndReset() throws IOException {\n-        if (!isDatabaseSupported()) return;\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity le = newLobEntity(\"oOOOOOo\", 1);"},{"sha":"188042266dc296365bde0f8e577d663a599793a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/TestInputStreamLob.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/110cb20e798f6c6eb2211b973ff23826604daf84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/TestInputStreamLob.java","raw_url":"https://github.com/apache/openjpa/raw/110cb20e798f6c6eb2211b973ff23826604daf84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/TestInputStreamLob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/TestInputStreamLob.java?ref=110cb20e798f6c6eb2211b973ff23826604daf84","patch":"@@ -22,6 +22,8 @@\n import java.io.IOException;\n import java.io.InputStream;\n \n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n+\n /**\n  * Defines all the abstract methods from AbstractLobTest to tests the\n  * the LOB support with an InputStream.\n@@ -32,6 +34,12 @@\n \n public class TestInputStreamLob extends AbstractLobTest {\n \n+    @Override\n+    public void setUp() throws Exception {\n+        supportedDatabases.add(PostgresDictionary.class);\n+        super.setUp();\n+    }\n+\n     protected LobEntity newLobEntity(String s, int id) {\n         InputStreamLobEntity isle = new InputStreamLobEntity();\n         isle.setId(id);"}]}

