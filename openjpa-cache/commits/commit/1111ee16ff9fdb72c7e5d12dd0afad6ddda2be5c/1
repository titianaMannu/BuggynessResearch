{"sha":"1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMTFlZTE2ZmY5ZmRiNzJjN2U1ZDEyZGQwYWZhZDZkZGRhMmJlNWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-24T18:45:44Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-24T18:45:44Z"},"message":"OPENJPA-665: Sets column i/o conditions accordingly when column is set as not nullable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679487 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"81931135b653398e45fa88ec72f9864e63ae72a1","url":"https://api.github.com/repos/apache/openjpa/git/trees/81931135b653398e45fa88ec72f9864e63ae72a1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","html_url":"https://github.com/apache/openjpa/commit/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c/comments","author":null,"committer":null,"parents":[{"sha":"315cc2d1555925da6f62b808976792676ec2bcea","url":"https://api.github.com/repos/apache/openjpa/commits/315cc2d1555925da6f62b808976792676ec2bcea","html_url":"https://github.com/apache/openjpa/commit/315cc2d1555925da6f62b808976792676ec2bcea"}],"stats":{"total":218,"additions":217,"deletions":1},"files":[{"sha":"a0937361d1ad9ce7c2d759b457007e0aa037481d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","patch":"@@ -527,13 +527,16 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n      */\n     private void setIOFromColumnFlags(Column col, int i) {\n         if (col == null || (!col.getFlag(Column.FLAG_UNINSERTABLE)\n-            && !col.getFlag(Column.FLAG_UNUPDATABLE)))\n+            && !col.getFlag(Column.FLAG_UNUPDATABLE)\n+            && !col.isNotNull()))\n             return;\n \n         if (_io == null)\n             _io = new ColumnIO();\n         _io.setInsertable(i, !col.getFlag(Column.FLAG_UNINSERTABLE));\n         _io.setUpdatable(i, !col.getFlag(Column.FLAG_UNUPDATABLE));\n+        _io.setNullInsertable(i, !col.isNotNull());\n+        _io.setNullUpdatable(i, !col.isNotNull());\n     }\n \n     /**"},{"sha":"02736a76b1e954431fd44707695af4852b536c48","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","patch":"@@ -0,0 +1,94 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.nullity;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * Persistent entity used to test behavior of null constraint on basic fields.\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class NullValues {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t\r\n+\t@Column(nullable=true)\r\n+\tprivate Integer nullable;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate Integer notNullable;\r\n+\t\r\n+\t@Basic(optional=true)\r\n+\tprivate Integer optional;\r\n+\t\r\n+\t@Basic(optional=false)\r\n+\tprivate Integer notOptional;\r\n+\t\r\n+\t/**\r\n+\t * Construct with all fields set to non-null values.\r\n+\t */\r\n+\tpublic NullValues() {\r\n+\t\tsetOptional(42);\r\n+\t\tsetNotOptional(42);\r\n+\t\tsetNotNullable(42);\r\n+\t\tsetNullable(42);\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic Integer getNullable() {\r\n+\t\treturn nullable;\r\n+\t}\r\n+\t\r\n+\tpublic void setNullable(Integer nullable) {\r\n+\t\tthis.nullable = nullable;\r\n+\t}\r\n+\t\r\n+\tpublic Integer getNotNullable() {\r\n+\t\treturn notNullable;\r\n+\t}\r\n+\t\r\n+\tpublic void setNotNullable(Integer notNullable) {\r\n+\t\tthis.notNullable = notNullable;\r\n+\t}\r\n+\t\r\n+\tpublic Integer getOptional() {\r\n+\t\treturn optional;\r\n+\t}\r\n+\t\r\n+\tpublic void setOptional(Integer optional) {\r\n+\t\tthis.optional = optional;\r\n+\t}\r\n+\t\r\n+\tpublic Integer getNotOptional() {\r\n+\t\treturn notOptional;\r\n+\t}\r\n+\t\r\n+\tpublic void setNotOptional(Integer notOptional) {\r\n+\t\tthis.notOptional = notOptional;\r\n+\t}\r\n+}\r"},{"sha":"ece0cf5b0fb8c31a628c9e588c3694d5122c9891","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=1111ee16ff9fdb72c7e5d12dd0afad6ddda2be5c","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.nullity;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.RollbackException;\r\n+\r\n+import org.apache.openjpa.persistence.InvalidStateException;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+\r\n+/**\r\n+ * Test @Basic(optional=true|false) and @Column(nullable=true|false) \r\n+ * specification is honored. \r\n+ * Note: null constraint violation manifests as different exception types\r\n+ * for option and nullable condition.\r\n+ *\r\n+ * @author Pinaki Poddar\r\n+ */\r\n+public class TestBasicFieldNullity extends SingleEMFTestCase {\r\n+\r\n+\r\n+    public void setUp() {\r\n+        setUp(NullValues.class);\r\n+    }\r\n+\r\n+    public void testNullOnOptionalFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setOptional(null);\r\n+    \tassertCommitSucceeds(pc);\r\n+    }\r\n+    \r\n+    public void testNullOnNonOptionalFieldIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotOptional(null);\r\n+    \tassertCommitFails(pc, InvalidStateException.class);\r\n+    }\r\n+    \r\n+    public void testNotNullOnOptionalFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc);\r\n+    }\r\n+    \r\n+    public void testNotNullOnNonOptionalFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc);\r\n+    }\r\n+    \r\n+    public void testNullOnNullableColumnAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNullable(null);\r\n+    \tassertCommitSucceeds(pc);\r\n+    }\r\n+    \r\n+    public void testNullOnNonNullableColumnIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotNullable(null);\r\n+    \tassertCommitFails(pc, RollbackException.class);\r\n+    }\r\n+    \r\n+    public void testNotNullOnNullableColumnIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc);\r\n+    }\r\n+    \r\n+    public void testNotNullOnNonNullableColumnIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Asserts that the given instance can not be committed.\r\n+     */\r\n+    void assertCommitFails(Object pc, Class expected) {\r\n+    \tEntityManager em = emf.createEntityManager();\r\n+    \tem.getTransaction().begin();\r\n+    \tem.persist(pc);\r\n+    \ttry {\r\n+\t\t\tem.getTransaction().commit();\r\n+\t\t\tfail();\r\n+\t\t} catch (RuntimeException e) {\r\n+\t\t\tif (!expected.isAssignableFrom(e.getClass())) {\r\n+\t\t\t\tfail(\"Expected \" + expected.getName());\r\n+\t\t\t\te.printStackTrace();\r\n+\t\t\t}\r\n+\t\t}\r\n+    }\r\n+    \r\n+    void assertCommitSucceeds(Object pc) {\r\n+    \tEntityManager em = emf.createEntityManager();\r\n+    \tem.getTransaction().begin();\r\n+    \tem.persist(pc);\r\n+    \ttry {\r\n+\t\t\tem.getTransaction().commit();\r\n+\t\t} catch (RuntimeException e) {\r\n+\t\t\tfail();\r\n+\t\t\te.printStackTrace();\r\n+\t\t}\r\n+    }\r\n+\r\n+\r\n+}\r\n+\r"}]}

