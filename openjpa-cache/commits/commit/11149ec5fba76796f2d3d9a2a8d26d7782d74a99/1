{"sha":"11149ec5fba76796f2d3d9a2a8d26d7782d74a99","node_id":"MDY6Q29tbWl0MjA2MzY0OjExMTQ5ZWM1ZmJhNzY3OTZmMmQzZDlhMmE4ZDI2ZDc3ODJkNzRhOTk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-01T19:16:22Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-01T19:16:22Z"},"message":"OPENJPA-1543: Remove fragmented messages. Change to TRACE level logging.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917657 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae8ce733855c5aca7c0f0128a4b4e6a147524d11","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae8ce733855c5aca7c0f0128a4b4e6a147524d11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/11149ec5fba76796f2d3d9a2a8d26d7782d74a99","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/11149ec5fba76796f2d3d9a2a8d26d7782d74a99","html_url":"https://github.com/apache/openjpa/commit/11149ec5fba76796f2d3d9a2a8d26d7782d74a99","comments_url":"https://api.github.com/repos/apache/openjpa/commits/11149ec5fba76796f2d3d9a2a8d26d7782d74a99/comments","author":null,"committer":null,"parents":[{"sha":"c1a32728724dec004e04aad8d7896e87508e1bf0","url":"https://api.github.com/repos/apache/openjpa/commits/c1a32728724dec004e04aad8d7896e87508e1bf0","html_url":"https://github.com/apache/openjpa/commit/c1a32728724dec004e04aad8d7896e87508e1bf0"}],"stats":{"total":26,"additions":13,"deletions":13},"files":[{"sha":"3b918ffabf06c382f253e9bbcc6a3872a146314c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/11149ec5fba76796f2d3d9a2a8d26d7782d74a99/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/11149ec5fba76796f2d3d9a2a8d26d7782d74a99/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=11149ec5fba76796f2d3d9a2a8d26d7782d74a99","patch":"@@ -109,8 +109,8 @@ public boolean cache(PreparedQuery q) {\n \t\ttry {\n \t\t\tString id = q.getIdentifier();\n \t\t\tif (isCachable(id) == Boolean.FALSE) {\n-\t\t\t\tif (_log != null && _log.isWarnEnabled())\n-                    _log.warn(_loc.get(\"prepared-query-not-cachable\", id));\n+\t\t\t\tif (_log != null && _log.isTraceEnabled())\n+                    _log.trace(_loc.get(\"prepared-query-not-cachable\", id));\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tExclusion exclusion = getMatchedExclusionPattern(id);\n@@ -143,8 +143,8 @@ public PreparedQuery initialize(String key, Object result) {\n \tpublic boolean invalidate(String id) {\n \t\tlock();\n \t\ttry {\n-\t\t\tif (_log != null && _log.isInfoEnabled())\n-                _log.info(_loc.get(\"prepared-query-invalidate\", id));\n+\t\t\tif (_log != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"prepared-query-invalidate\", id));\n \t\t\treturn _delegate.remove(id) != null;\n \t\t} finally {\n \t\t\tunlock();\n@@ -177,8 +177,8 @@ public PreparedQuery markUncachable(String id, Exclusion exclusion) {\n \t\tlock();\n \t\ttry {\n \t\t\tif (_uncachables.put(id, exclusion) == null) {\n-\t\t\t    if (_log != null && _log.isInfoEnabled()) \n-\t\t\t        _log.info(_loc.get(\"prepared-query-uncache\", id, exclusion));\n+\t\t\t    if (_log != null && _log.isTraceEnabled()) \n+\t\t\t        _log.trace(_loc.get(\"prepared-query-uncache\", id, exclusion));\n \t\t\t}\n \t\t\treturn _delegate.remove(id);\n \t\t} finally {\n@@ -240,8 +240,8 @@ public void removeExclusionPattern(String pattern) {\n             Collection<String> reborns = getMatchedKeys(pattern, _uncachables);\n \t\t\tfor (String rebornKey : reborns) {\n                 _uncachables.remove(rebornKey);\n-\t            if (_log != null && _log.isInfoEnabled())\n-\t                _log.info(_loc.get(\"prepared-query-remove-pattern\", pattern, rebornKey));\n+\t            if (_log != null && _log.isTraceEnabled())\n+\t                _log.trace(_loc.get(\"prepared-query-remove-pattern\", pattern, rebornKey));\n \t\t\t}\n \t\t} finally {\n \t\t\tunlock();\n@@ -342,11 +342,11 @@ public void endConfiguration() {\n         private static String STRONG = _loc.get(\"strong-exclusion\").getMessage();\n         private static String WEAK   = _loc.get(\"weak-exclusion\").getMessage();\n         \n-        public ExclusionPattern(boolean _strong, String _pattern, String _reason) {\n+        public ExclusionPattern(boolean strong, String pattern, String reason) {\n             super();\n-            this._strong = _strong;\n-            this._pattern = _pattern;\n-            this._reason = _reason;\n+            this._strong = strong;\n+            this._pattern = pattern;\n+            this._reason = reason;\n         }\n \n         public String getPattern() {\n@@ -387,7 +387,7 @@ public int hashCode() {\n         \n         public String toString() {\n             StringBuilder buf = new StringBuilder();\n-            buf.append(_strong ? STRONG : WEAK);\n+            buf.append(\" \").append(_strong ? STRONG : WEAK).append(\". \");\n             if (_reason != null)\n                 buf.append(_reason);\n             return buf.toString();"}]}

