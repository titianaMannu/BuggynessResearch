{"sha":"1148ba809d4756b67703fffb6234605cd287b50d","node_id":"MDY6Q29tbWl0MjA2MzY0OjExNDhiYTgwOWQ0NzU2YjY3NzAzZmZmYjYyMzQ2MDVjZDI4N2I1MGQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-10T02:42:30Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-10T02:42:30Z"},"message":"OPENJPA-1995: detect mixed parameter types in JPQL query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1101289 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"adf4120dcf357322b580e589a6c4c2d80e89b390","url":"https://api.github.com/repos/apache/openjpa/git/trees/adf4120dcf357322b580e589a6c4c2d80e89b390"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1148ba809d4756b67703fffb6234605cd287b50d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1148ba809d4756b67703fffb6234605cd287b50d","html_url":"https://github.com/apache/openjpa/commit/1148ba809d4756b67703fffb6234605cd287b50d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1148ba809d4756b67703fffb6234605cd287b50d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c159730005aee494d916063b947970eea0179899","url":"https://api.github.com/repos/apache/openjpa/commits/c159730005aee494d916063b947970eea0179899","html_url":"https://github.com/apache/openjpa/commit/c159730005aee494d916063b947970eea0179899"}],"stats":{"total":47,"additions":39,"deletions":8},"files":[{"sha":"157d5d0543f11accdbde8c796c4259eff96b58c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":25,"deletions":8,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/1148ba809d4756b67703fffb6234605cd287b50d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/1148ba809d4756b67703fffb6234605cd287b50d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=1148ba809d4756b67703fffb6234605cd287b50d","patch":"@@ -2469,19 +2469,36 @@ public String toString ()\n \t}\n     \n     \n-    // throws an exception if there are numeric parameters which do not start with 1. \n+    // throws an exception if there are numeric parameters which do not start with 1.\n     private void validateParameters() {\n-        if(parameterTypes == null || parameterTypes.isEmpty()) { \n+        if (parameterTypes == null || parameterTypes.isEmpty()) {\n             return;\n         }\n-        \n-        Object firstKey = parameterTypes.keySet().iterator().next();\n-        if (firstKey != null) { // paranoia\n-            if (firstKey instanceof Number) {\n-                if (!parameterTypes.keySet().contains(1)) {\n-                    throw new UserException(_loc.get(\"missing-positional-parameter\", resolver.getQueryContext()\n+\n+        boolean numericParms = false;\n+        boolean namedParms = false;\n+\n+        for (Object key : parameterTypes.keySet()) {\n+\n+            if (key instanceof Number) {\n+                if (namedParms) {\n+                    throw new UserException(_loc.get(\"mixed-parameter-types\", resolver.getQueryContext()\n+                        .getQueryString(), parameterTypes.keySet().toString()));\n+                }\n+                numericParms = true;\n+            } else {\n+                if (numericParms) {\n+                    throw new UserException(_loc.get(\"mixed-parameter-types\", resolver.getQueryContext()\n                         .getQueryString(), parameterTypes.keySet().toString()));\n                 }\n+                namedParms = true;\n+            }\n+        }\n+\n+        if (numericParms) {\n+            if (!parameterTypes.keySet().contains(1)) {\n+                throw new UserException(_loc.get(\"missing-positional-parameter\", resolver.getQueryContext()\n+                    .getQueryString(), parameterTypes.keySet().toString()));\n             }\n         }\n     }"},{"sha":"434cf1a33fff3b942598f7a4171cd7b4d82134b8","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1148ba809d4756b67703fffb6234605cd287b50d/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1148ba809d4756b67703fffb6234605cd287b50d/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=1148ba809d4756b67703fffb6234605cd287b50d","patch":"@@ -89,3 +89,5 @@ cant-groupby-key-value-embeddable: Grouping by embeddables: \"{0}({1})\" is not al\n no-constructor: NEW constructor operation could not resolve class named \"{0}\".\n missing-positional-parameter: Query \"{0}\" did not contain positional parameter 1. \\\n     JPQL positional parameters must start at 1. Detected parameters \"{1}\".\n+mixed-parameter-types: Query \"{0}\" Contains both named and positional parameters \\\n+\tthis is not allowed by the JPA specification. Detected parameters \"{1}\"."},{"sha":"c1711a7b5300d1e65216fe191313f72720ada6af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1148ba809d4756b67703fffb6234605cd287b50d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","raw_url":"https://github.com/apache/openjpa/raw/1148ba809d4756b67703fffb6234605cd287b50d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java?ref=1148ba809d4756b67703fffb6234605cd287b50d","patch":"@@ -145,6 +145,18 @@ public void testMissingFirstPositionalParameter() {\n             // expected\n         }\n         em.close();\n+    }   \n+    \n+    public void testMixedParameterTypesParameter() {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"UPDATE CompUser e set e.name= :name, e.age = ?1 \" + \"WHERE e.userid = ?3\";\n+        try {\n+            em.createQuery(query);\n+            fail(\"Did not get UserException with invalid JPQL query\");\n+        } catch (ArgumentException ae) {\n+            // expected\n+        }\n+        em.close();\n     }\n     \n     public CompUser createUser(String name, String cName, int age,"}]}

