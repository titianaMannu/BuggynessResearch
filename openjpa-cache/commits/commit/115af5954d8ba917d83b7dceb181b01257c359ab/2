{"sha":"115af5954d8ba917d83b7dceb181b01257c359ab","node_id":"MDY6Q29tbWl0MjA2MzY0OjExNWFmNTk1NGQ4YmE5MTdkODNiN2RjZWIxODFiMDEyNTdjMzU5YWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:51:28Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:51:28Z"},"message":"OPENJPA-896. Setting eol-style:native and removing windows eol characters from source files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@757282 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab319d3032f3fa17ec07fc7036deedcd8f73f16c","url":"https://api.github.com/repos/apache/openjpa/git/trees/ab319d3032f3fa17ec07fc7036deedcd8f73f16c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/115af5954d8ba917d83b7dceb181b01257c359ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/115af5954d8ba917d83b7dceb181b01257c359ab","html_url":"https://github.com/apache/openjpa/commit/115af5954d8ba917d83b7dceb181b01257c359ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/115af5954d8ba917d83b7dceb181b01257c359ab/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e786a08bd27dc43a060ddd29ebbd6095a8c92ffb","url":"https://api.github.com/repos/apache/openjpa/commits/e786a08bd27dc43a060ddd29ebbd6095a8c92ffb","html_url":"https://github.com/apache/openjpa/commit/e786a08bd27dc43a060ddd29ebbd6095a8c92ffb"}],"stats":{"total":290030,"additions":145015,"deletions":145015},"files":[{"sha":"ac4fe9febc617b60527ef110cfd27a2e5dc85874","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,81 +1,81 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-\r\n-/**\r\n- * Distributed cache test.\r\n- */\r\n-public class DistributedCacheTest\r\n-    extends CacheTest {\r\n-\r\n-    private static String cache = null;\r\n-    private static String queryCache = null;\r\n-    private static String provider = null;\r\n-\r\n-    public static void setCache(String plugin) {\r\n-        cache = plugin;\r\n-    }\r\n-\r\n-    public static void setQueryCache(String plugin) {\r\n-        queryCache = plugin;\r\n-    }\r\n-\r\n-    public static void setRemoteCommitProvider(String plugin) {\r\n-        provider = plugin;\r\n-    }\r\n-\r\n-    public DistributedCacheTest(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public DistributedCacheTest(String test, Class testClass) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return getConfs(true);\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return getConfs(false);\r\n-    }\r\n-\r\n-    protected String[] getConfs(boolean confs1) {\r\n-        String fullProvider = provider;\r\n-        String props = Configurations.getProperties\r\n-            (System.getProperty(\"openjpa.RemoteCommitProvider\"));\r\n-        if (props == null || props.length() == 0)\r\n-            props = Configurations.getProperties(provider);\r\n-        else\r\n-            fullProvider = Configurations.getPlugin(provider, props);\r\n-        if (props == null || props.length() == 0)\r\n-            throw new IllegalStateException\r\n-                (\"must specify -Dkodo.RemoteCommitProvider=?\");\r\n-\r\n-        return new String[]{\r\n-            // use this property to differentiate factory\r\n-            \"openjpa.DataCache\", cache + \", true(Name=\" + confs1 + \")\",\r\n-            \"openjpa.QueryCache\", queryCache,\r\n-            \"openjpa.RemoteCommitProvider\", fullProvider,\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import org.apache.openjpa.lib.conf.Configurations;\n+\n+/**\n+ * Distributed cache test.\n+ */\n+public class DistributedCacheTest\n+    extends CacheTest {\n+\n+    private static String cache = null;\n+    private static String queryCache = null;\n+    private static String provider = null;\n+\n+    public static void setCache(String plugin) {\n+        cache = plugin;\n+    }\n+\n+    public static void setQueryCache(String plugin) {\n+        queryCache = plugin;\n+    }\n+\n+    public static void setRemoteCommitProvider(String plugin) {\n+        provider = plugin;\n+    }\n+\n+    public DistributedCacheTest(String test) {\n+        super(test);\n+    }\n+\n+    public DistributedCacheTest(String test, Class testClass) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return getConfs(true);\n+    }\n+\n+    protected String[] getConfs2() {\n+        return getConfs(false);\n+    }\n+\n+    protected String[] getConfs(boolean confs1) {\n+        String fullProvider = provider;\n+        String props = Configurations.getProperties\n+            (System.getProperty(\"openjpa.RemoteCommitProvider\"));\n+        if (props == null || props.length() == 0)\n+            props = Configurations.getProperties(provider);\n+        else\n+            fullProvider = Configurations.getPlugin(provider, props);\n+        if (props == null || props.length() == 0)\n+            throw new IllegalStateException\n+                (\"must specify -Dkodo.RemoteCommitProvider=?\");\n+\n+        return new String[]{\n+            // use this property to differentiate factory\n+            \"openjpa.DataCache\", cache + \", true(Name=\" + confs1 + \")\",\n+            \"openjpa.QueryCache\", queryCache,\n+            \"openjpa.RemoteCommitProvider\", fullProvider,\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+}"},{"sha":"5fa00056b2ed4b6af11592f9402bdaf1a3bd9a92","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-\r\n-@Entity\r\n-public class IdentityIdClass {\r\n-    @Id\r\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n-    private int id;\r\n-\r\n-    private String stringField;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class IdentityIdClass {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    private String stringField;\n+}"},{"sha":"48dfc2fe7009288899dba539b59b84abdae8e208","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-import javax.persistence.GeneratedValue;\r\n-\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"OPTIMISTIC_LOCK_INSTANCE\")\r\n-public class OptimisticLockInstance {\r\n-    @Id @GeneratedValue \r\n-    private int pk;\r\n-\r\n-    @Version \r\n-    private int oplock;\r\n-\r\n-    private String str;\r\n-    private int intField;\r\n-\r\n-    protected OptimisticLockInstance() { }\r\n-\r\n-    public OptimisticLockInstance(String str) {\r\n-        this.str = str;\r\n-    }\r\n-\r\n-    public int getPK() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public int getOpLock() {\r\n-        return oplock;\r\n-    }\r\n-\r\n-    public String getStr() {\r\n-        return str;\r\n-    }\r\n-}\r\n-  \r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+import javax.persistence.GeneratedValue;\n+\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"OPTIMISTIC_LOCK_INSTANCE\")\n+public class OptimisticLockInstance {\n+    @Id @GeneratedValue \n+    private int pk;\n+\n+    @Version \n+    private int oplock;\n+\n+    private String str;\n+    private int intField;\n+\n+    protected OptimisticLockInstance() { }\n+\n+    public OptimisticLockInstance(String str) {\n+        this.str = str;\n+    }\n+\n+    public int getPK() {\n+        return pk;\n+    }\n+\n+    public int getOpLock() {\n+        return oplock;\n+    }\n+\n+    public String getStr() {\n+        return str;\n+    }\n+}\n+  "},{"sha":"601bdb67a55223f53b16a1253c42523a014543fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class OrderedOneManyChild {\r\n-    @Id\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private OrderedOneManyParent parent;\r\n-    \r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public void setId(long id) { \r\n-        this.id = id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public OrderedOneManyParent getParent() { \r\n-        return parent; \r\n-    }\r\n-\r\n-    public void setParent(OrderedOneManyParent parent) { \r\n-        this.parent = parent; \r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class OrderedOneManyChild {\n+    @Id\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private OrderedOneManyParent parent;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public void setId(long id) { \n+        this.id = id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OrderedOneManyParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OrderedOneManyParent parent) { \n+        this.parent = parent; \n+    }\n+    \n+}"},{"sha":"0b6caa9c40acdc1cf8b3a395d5aaaa3db03c2807","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OrderBy;\r\n-\r\n-@Entity\r\n-public class OrderedOneManyParent {\r\n-\t@Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @OneToMany(mappedBy=\"parent\")\r\n-    @OrderBy(\"name ASC\")\r\n-    private List<OrderedOneManyChild> children = \r\n-        new ArrayList<OrderedOneManyChild>();\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public List<OrderedOneManyChild> getChildren() { \r\n-        return children; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+\n+@Entity\n+public class OrderedOneManyParent {\n+\t@Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"parent\")\n+    @OrderBy(\"name ASC\")\n+    private List<OrderedOneManyChild> children = \n+        new ArrayList<OrderedOneManyChild>();\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<OrderedOneManyChild> getChildren() { \n+        return children; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}\n+"},{"sha":"becb017e968756a45cebaef05d610831e39f1bb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestAutoIncrementAndDataCaching\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    @Override\r\n-    public void setUp() {\r\n-        setUp(IdentityIdClass.class, CLEAR_TABLES,\r\n-            \"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-    }\r\n-\r\n-    public void testSimpleDataCacheOperation() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(new IdentityIdClass());\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testAccessIdBeforeCommit() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        IdentityIdClass o = new IdentityIdClass();\r\n-        em.persist(o);\r\n-        em.getObjectId(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestAutoIncrementAndDataCaching\n+    extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(IdentityIdClass.class, CLEAR_TABLES,\n+            \"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\");\n+    }\n+\n+    public void testSimpleDataCacheOperation() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new IdentityIdClass());\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testAccessIdBeforeCommit() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        IdentityIdClass o = new IdentityIdClass();\n+        em.persist(o);\n+        em.getObjectId(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }\n\\ No newline at end of file"},{"sha":"1206f10430c553f6a2351a8e2b8c8cdfff6e6c1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","status":"modified","additions":100,"deletions":100,"changes":200,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,100 +1,100 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.LockModeType;\r\n-import javax.persistence.OptimisticLockException;\r\n-import javax.persistence.RollbackException;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-\r\n-public class TestBulkUpdatesAndVersionColumn\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() throws Exception {\r\n-        setUp(\"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            OptimisticLockInstance.class, CLEAR_TABLES);\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance pc = new OptimisticLockInstance(\"foo\");\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testSelectOnOplockField() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.createQuery(\"select o from OptimisticLockInstance o \"\r\n-            + \"where o.oplock = 0\").getResultList();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOplockFieldMapping() {\r\n-        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(\r\n-            emf, OptimisticLockInstance.class);\r\n-        FieldMapping fm = cm.getFieldMapping(\"oplock\");\r\n-        assertEquals(1, fm.getColumns().length);\r\n-    }\r\n-\r\n-    public void testBulkUpdateWithManualVersionIncrement() {\r\n-        bulkUpdateHelper(true);\r\n-    }\r\n-\r\n-    public void testBulkUpdateWithoutManualVersionIncrement() {\r\n-        bulkUpdateHelper(false);\r\n-    }\r\n-\r\n-    private void bulkUpdateHelper(boolean incrementVersionField) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance oli = (OptimisticLockInstance) em.createQuery(\r\n-            \"SELECT o FROM OptimisticLockInstance o WHERE o.str = 'foo'\")\r\n-            .getSingleResult();\r\n-        assertNotNull(oli);\r\n-        em.lock(oli, LockModeType.READ);\r\n-\r\n-        EntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-        em2.createQuery(\"UPDATE OptimisticLockInstance o SET o.str = 'foo', \"\r\n-            + \"o.intField = o.intField + 1\"\r\n-            + (incrementVersionField ? \", o.oplock = o.oplock + 1 \" : \"\")\r\n-            + \"WHERE o.str = 'foo'\")\r\n-            .executeUpdate();\r\n-        em2.getTransaction().commit();\r\n-        em2.close();\r\n-\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-            fail(\"transaction should have failed\");\r\n-        } catch (RollbackException re) {\r\n-            assertTrue(\"nested exception must be an oplock exception\",\r\n-                re.getCause() instanceof OptimisticLockException);\r\n-        } finally {\r\n-            em.close();\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.OptimisticLockException;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+\n+public class TestBulkUpdatesAndVersionColumn\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() throws Exception {\n+        setUp(\"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            OptimisticLockInstance.class, CLEAR_TABLES);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OptimisticLockInstance pc = new OptimisticLockInstance(\"foo\");\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testSelectOnOplockField() {\n+        EntityManager em = emf.createEntityManager();\n+        em.createQuery(\"select o from OptimisticLockInstance o \"\n+            + \"where o.oplock = 0\").getResultList();\n+        em.close();\n+    }\n+\n+    public void testOplockFieldMapping() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(\n+            emf, OptimisticLockInstance.class);\n+        FieldMapping fm = cm.getFieldMapping(\"oplock\");\n+        assertEquals(1, fm.getColumns().length);\n+    }\n+\n+    public void testBulkUpdateWithManualVersionIncrement() {\n+        bulkUpdateHelper(true);\n+    }\n+\n+    public void testBulkUpdateWithoutManualVersionIncrement() {\n+        bulkUpdateHelper(false);\n+    }\n+\n+    private void bulkUpdateHelper(boolean incrementVersionField) {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        OptimisticLockInstance oli = (OptimisticLockInstance) em.createQuery(\n+            \"SELECT o FROM OptimisticLockInstance o WHERE o.str = 'foo'\")\n+            .getSingleResult();\n+        assertNotNull(oli);\n+        em.lock(oli, LockModeType.READ);\n+\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+        em2.createQuery(\"UPDATE OptimisticLockInstance o SET o.str = 'foo', \"\n+            + \"o.intField = o.intField + 1\"\n+            + (incrementVersionField ? \", o.oplock = o.oplock + 1 \" : \"\")\n+            + \"WHERE o.str = 'foo'\")\n+            .executeUpdate();\n+        em2.getTransaction().commit();\n+        em2.close();\n+\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"transaction should have failed\");\n+        } catch (RollbackException re) {\n+            assertTrue(\"nested exception must be an oplock exception\",\n+                re.getCause() instanceof OptimisticLockException);\n+        } finally {\n+            em.close();\n+        }\n+    }\n+}"},{"sha":"0108ae5e0859d6c73138f4b9c31961da67a2227c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Multi-threaded cache load test for running in the autobuild.\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-public class TestCacheMultiThreadedLoad\r\n-    extends CacheLoadTest {\r\n-\r\n-    public TestCacheMultiThreadedLoad() {\r\n-        // pared down iteration and thread count for running in the\r\n-        // autobbuild\r\n-        interationCount = 400;\r\n-        threadCount = 10;\r\n-    }\r\n-\r\n-    public boolean skipTest() {\r\n-        return true;\r\n-    }\r\n-}\r\n-\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Multi-threaded cache load test for running in the autobuild.\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+public class TestCacheMultiThreadedLoad\n+    extends CacheLoadTest {\n+\n+    public TestCacheMultiThreadedLoad() {\n+        // pared down iteration and thread count for running in the\n+        // autobbuild\n+        interationCount = 400;\n+        threadCount = 10;\n+    }\n+\n+    public boolean skipTest() {\n+        return true;\n+    }\n+}\n+\n+"},{"sha":"26a2613e9ec1bf8875ef977dfb70c440e344c8c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Test data caching across multiple factories in the same JVM, using\r\n- * the single-JVM commit provider to communicate updates..\r\n- */\r\n-public class TestConcurrentDataCache\r\n-    extends CacheTest {\r\n-\r\n-    public TestConcurrentDataCache(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return new String[]{\r\n-            // the second cache is there solely to differentiate between\r\n-            // this PMF and the PMF created from confs2 below\r\n-            \"openjpa.DataCache\",\r\n-            \"concurrent, concurrent(Name=differentiatingProperty1)\",\r\n-            \"openjpa.QueryCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return new String[]{\r\n-            // the second cache is there solely to differentiate between\r\n-            // this PMF and the PMF created from confs above\r\n-            \"openjpa.DataCache\",\r\n-            \"concurrent, concurrent(Name=differentiatingProperty2)\",\r\n-            \"openjpa.QueryCache\", \"concurrent\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Test data caching across multiple factories in the same JVM, using\n+ * the single-JVM commit provider to communicate updates..\n+ */\n+public class TestConcurrentDataCache\n+    extends CacheTest {\n+\n+    public TestConcurrentDataCache(String test) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return new String[]{\n+            // the second cache is there solely to differentiate between\n+            // this PMF and the PMF created from confs2 below\n+            \"openjpa.DataCache\",\n+            \"concurrent, concurrent(Name=differentiatingProperty1)\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+\n+    protected String[] getConfs2() {\n+        return new String[]{\n+            // the second cache is there solely to differentiate between\n+            // this PMF and the PMF created from confs above\n+            \"openjpa.DataCache\",\n+            \"concurrent, concurrent(Name=differentiatingProperty2)\",\n+            \"openjpa.QueryCache\", \"concurrent\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+}"},{"sha":"d0ceaa10c22563860e9574aa1e1ef2d69161d88c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":524,"deletions":524,"changes":1048,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,524 +1,524 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.LockModeType;\r\n-\r\n-import org.apache.openjpa.persistence.EntityManagerImpl;\r\n-import org.apache.openjpa.persistence.EntityNotFoundException;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.StoreCache;\r\n-import org.apache.openjpa.persistence.StoreCacheImpl;\r\n-import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwned;\r\n-import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwner;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.PObject;\r\n-\r\n-/**\r\n- * Tests various application behavior with or without DataCache.\r\n- * Ideally, an application should behave identically irrespective of the \r\n- * DataCache. However, purpose of this test is to identify specific scenarios\r\n- * where this ideal is violated. The test case also demonstrates, wherever\r\n- * possible, what extra step an application may take to ensure that its \r\n- * behavior with or without DataCache remains identical.   \r\n- * \r\n- * So far following use cases are found to demonstrate behavioral differences:\r\n- * 1. Inconsistent bidirectional relation\r\n- * 2. Refresh\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-public class TestDataCacheBehavesIdentical extends AbstractTestCase {\r\n-\tprivate static OpenJPAEntityManagerFactorySPI emfWithDataCache;\r\n-\tprivate static OpenJPAEntityManagerFactorySPI emfWithoutDataCache;\r\n-\t\r\n-\tprivate static final boolean WITH_DATACACHE = true;\r\n-\tprivate static final boolean CONSISTENT = true;\r\n-\tprivate static final boolean DIRTY = true;\r\n-\tprivate static final boolean REFRESH_FROM_DATACACHE = true;\r\n-\tprivate static final LockModeType NOLOCK = null;\r\n-\tprivate static final Class ENTITY_NOT_FOUND_ERROR = EntityNotFoundException.class;\r\n-\tprivate static final Class NO_ERROR = null;\r\n-\r\n-\tprivate static final String MARKER_DATACACHE = \"in DataCache\";\r\n-\tprivate static final String MARKER_DATABASE  = \"in Database\";\r\n-\tprivate static final String MARKER_CACHE     = \"in Object Cache\";\r\n-\tprivate static final String MARKER_DIRTY_CACHE = \"in Object Cache (dirty)\";\r\n-\tprivate static long ID_COUNTER = System.currentTimeMillis();\r\n-\t\r\n-\r\n-\t/**\r\n-\t * Sets up two EntityManagerFactory: one with DataCache another without.\r\n-\t */\r\n-\tpublic void setUp() throws Exception {\r\n-\t\tsuper.setUp();\r\n-\t\tif (emfWithDataCache == null) {\r\n-\t\t\temfWithDataCache = createEMF(\r\n-\t\t\t\t\t\"openjpa.jdbc.SynchronizeMappings\",\t\"buildSchema\", \r\n-\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \r\n-\t\t\t\t\t\"openjpa.DataCache\", \"true\",\r\n-\t\t\t\t\t\"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n-\t\t\t\t\tPObject.class,\r\n-\t\t\t\t\tBidirectionalOne2OneOwner.class,\r\n-\t\t\t\t\tBidirectionalOne2OneOwned.class, CLEAR_TABLES);\r\n-\t\t\temfWithoutDataCache = createEMF(\r\n-\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \r\n-\t\t\t\t\t\"openjpa.DataCache\", \"false\",\r\n-\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n-\t\t\t\t\tPObject.class,\r\n-\t\t\t\t\tBidirectionalOne2OneOwned.class,\r\n-\t\t\t\t\tBidirectionalOne2OneOwner.class, CLEAR_TABLES);\r\n-\r\n-\t\t\tassertNotNull(emfWithDataCache);\r\n-\t\t\tassertNotNull(emfWithoutDataCache);\r\n-\r\n-\t\t\t// StoreCache is, by design, always non-null \r\n-\t\t\tassertNotNull(emfWithDataCache.getStoreCache());\r\n-\t\t\tassertNotNull(emfWithoutDataCache.getStoreCache());\r\n-\r\n-\t\t\t// however, following distinguishes whether DataCache is active  \r\n-\t\t\tassertTrue(isDataCacheActive(emfWithDataCache));\r\n-\t\t\tassertFalse(isDataCacheActive(emfWithoutDataCache));\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Affirms via internal structures if the given factory is configured with\r\n-\t * active DataCache. Because, even when DataCache is configured to be\r\n-\t * false, a no-op StoreCache is instantiated by design.\r\n-\t */\r\n-\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\r\n-\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\r\n-\t\t    && emf.getConfiguration()\r\n-\t\t          .getDataCacheManagerInstance()\r\n-\t\t          .getSystemDataCache() != null;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Create one-to-one bidirectional relation (may or may not be consistent)\r\n-\t * between two pairs of instances. Creates four instances Owner1, Owned1,\r\n-\t * Owner2, Owned2. The first instance has the given id. The id of the other\r\n-\t * instances monotonically increase by 1. The relationship is set either\r\n-\t * consistently or inconsistently. Consistent relation is when Owner1 points\r\n-\t * to Owned1 and Owned1 points back to Owner1. Inconsistent relation is when\r\n-\t * Owner1 points to Owned1 but Owned1 points to Owner2 instead of Owner1.\r\n-\t * \r\n-\t * \r\n-\t * @param em\r\n-\t *            the entity manager to persist the instances\r\n-\t * @param id\r\n-\t *            the identifier of the first owner instance. The identifier for\r\n-\t *            the other instances are sequential in order of creation.\r\n-\t * @param consistent\r\n-\t *            if true sets the relationship as consistent.\r\n-\t */\r\n-\tpublic void createBidirectionalRelation(EntityManager em, long id,\r\n-\t\t\tboolean consistent) {\r\n-\t\tBidirectionalOne2OneOwner owner1 = new BidirectionalOne2OneOwner();\r\n-\t\tBidirectionalOne2OneOwned owned1 = new BidirectionalOne2OneOwned();\r\n-\t\tBidirectionalOne2OneOwner owner2 = new BidirectionalOne2OneOwner();\r\n-\t\tBidirectionalOne2OneOwned owned2 = new BidirectionalOne2OneOwned();\r\n-\t\t\r\n-\t\towner1.setId(id++);\r\n-\t\towned1.setId(id++);\r\n-\t\towner2.setId(id++);\r\n-\t\towned2.setId(id++);\r\n-\t\t\r\n-\t\towner1.setName(\"Owner1\");\r\n-\t\towned1.setName(\"Owned1\");\r\n-\t\towned2.setName(\"Owned2\");\r\n-\t\towner2.setName(\"Owner2\");\r\n-\r\n-\t\towner1.setOwned(owned1);\r\n-\t\towner2.setOwned(owned2);\r\n-\r\n-\t\tif (consistent) {\r\n-\t\t\towned1.setOwner(owner1);\r\n-\t\t\towned2.setOwner(owner2);\r\n-\t\t} else {\r\n-\t\t\towned1.setOwner(owner2);\r\n-\t\t\towned2.setOwner(owner1);\r\n-\t\t}\r\n-\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.persist(owner1);\r\n-\t\tem.persist(owned1);\r\n-\t\tem.persist(owner2);\r\n-\t\tem.persist(owned2);\r\n-\t\tem.getTransaction().commit();\r\n-\t\tem.clear();\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Verifies that bidirectionally related objects can be persisted \r\n-\t * and later retrieved in a different transaction. \r\n-\t * \r\n-\t * Creates interrelated set of four instances.\r\n-\t * Establish their relation either consistently or inconsistently based\r\n-\t * on the given flag.\r\n-\t * Persist them and then clear the context. \r\n-\t * Fetch the instances in memory again by their identifiers. \r\n-\t * Compare the interrelations between the fetched instances with the \r\n-\t * relations of the original instances (which can be consistent or \r\n-\t * inconsistent). \r\n-\t * \r\n-\t * The mapping specification is such that the bidirectional relation is \r\n-\t * stored in database by a single foreign key. Hence database relation\r\n-\t * is always consistent. Hence the instances retrieved from database are\r\n-\t * always consistently related irrespective of whether they were created\r\n-\t * with consistent or inconsistent relation.\r\n-\t * However, when the instances are retrieved from the data cache, data cache\r\n-\t * will preserve the in-memory relations even when they are inconsistent.\r\n-\t *    \r\n-\t * @param useDataCache\r\n-\t *            use DataCache\r\n-\t * @param consistent\r\n-\t *            assume that the relationship were created as consistent.\r\n-\t */\r\n-\tpublic void verifyBidirectionalRelation(boolean useDataCache,\r\n-\t\t\tboolean createConsistent, boolean expectConsistent) {\r\n-\t\tEntityManager em = (useDataCache) \r\n-\t\t                 ? emfWithDataCache.createEntityManager() \r\n-\t\t                 : emfWithoutDataCache.createEntityManager();\r\n-\t\t                 \r\n-\t\tlong id = ID_COUNTER++;\r\n-\t\tID_COUNTER += 4;\r\n-\t\tcreateBidirectionalRelation(em, id, createConsistent);\r\n-\t\t\r\n-\t\t\r\n-\t\tBidirectionalOne2OneOwner owner1 = em.find(BidirectionalOne2OneOwner.class, id);\r\n-\t\tBidirectionalOne2OneOwned owned1 = em.find(BidirectionalOne2OneOwned.class, id + 1);\r\n-\t\tBidirectionalOne2OneOwner owner2 = em.find(BidirectionalOne2OneOwner.class, id + 2);\r\n-\t\tBidirectionalOne2OneOwned owned2 = em.find(BidirectionalOne2OneOwned.class, id + 3);\r\n-\r\n-\t\tassertNotNull(owner1);\r\n-\t\tassertNotNull(owner2);\r\n-\t\tassertNotNull(owned1);\r\n-\t\tassertNotNull(owned2);\r\n-\r\n-\t\tassertEquals(owner1, expectConsistent \r\n-\t\t\t\t\t? owner1.getOwned().getOwner() \r\n-\t\t\t\t\t: owner2.getOwned().getOwner());\r\n-\t\tassertEquals(owner2, expectConsistent \r\n-\t\t\t\t\t? owner2.getOwned().getOwner() \r\n-\t\t\t\t    : owner1.getOwned().getOwner());\r\n-\r\n-\r\n-\t\tassertEquals(owned1, owner1.getOwned());\r\n-\t\tassertEquals(expectConsistent ? owner1 : owner2, owned1.getOwner());\r\n-\t\tassertEquals(owned2, owner2.getOwned());\r\n-\t\tassertEquals(expectConsistent ? owner2 : owner1, owned2.getOwner());\r\n-\t}\r\n-\r\n-\tpublic void testConsitentBidirectionalRelationIsPreservedWithDataCache() {\r\n-\t\tverifyBidirectionalRelation(WITH_DATACACHE, CONSISTENT, CONSISTENT);\r\n-\t}\r\n-\r\n-\tpublic void testConsitentBidirectionalRelationIsPreservedWithoutDataCache() {\r\n-\t\tverifyBidirectionalRelation(!WITH_DATACACHE, CONSISTENT, CONSISTENT);\r\n-\t}\r\n-\r\n-\tpublic void testInconsitentBidirectionalRelationIsPreservedWithDataCache() {\r\n-\t\tverifyBidirectionalRelation(WITH_DATACACHE, !CONSISTENT, !CONSISTENT);\r\n-\t}\r\n-\r\n-\tpublic void testInconsitentBidirectionalRelationIsNotPreservedWithoutDataCache() {\r\n-\t\tverifyBidirectionalRelation(!WITH_DATACACHE, !CONSISTENT, CONSISTENT);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Verify that refresh() may fetch state from either the data cache or the\r\n-\t * database based on different conditions. \r\n-\t * The conditions that impact are \r\n-\t * a) whether current lock is stronger than NONE \r\n-\t * b) whether the instance being refreshed is dirty\r\n-\t * \r\n-\t * An instance is created with data cache marker and persisted. \r\n-\t * A native SQL is used to update the database record with database marker. \r\n-\t * The in-memory instance is not aware of this out-of-band update. \r\n-\t * Then the in-memory instance is refreshed. The marker of the refreshed \r\n-\t * instance tells whether the instance is refreshed from the data cache\r\n-\t * of the database. \r\n-\t * \r\n-\t * @param useDataCache flags if data cache is active. if not, then surely\r\n-\t * refresh always fetch state from the database.\r\n-\t * \r\n-\t * @param datacache the marker for the copy of the data cached instance\r\n-\t * @param database the marker for the database record\r\n-\t * @param lock lock to be used\r\n-\t * @param makeDirtyBeforeRefresh flags if the instance be dirtied before\r\n-\t * refresh()\r\n-\t * @param expected The expected marker i.e. where the state is refreshed \r\n-\t * from. This should be always <code>MARKER_DATABASE</code>.\r\n-\t * a) whether DataCache is active\r\n-\t * b) whether current Lock is stronger than NOLOCK\r\n-\t * c) whether the object to be refreshed is dirty\r\n-\t * \r\n-\t * The following truth table enumerates the possibilities\r\n-\t * \r\n-\t * Use Cache?   Lock?   Dirty?     Target\r\n-\t *    Y          Y       Y         Database\r\n-\t *    Y          N       Y         Data Cache\r\n-\t *    Y          Y       N         Data Cache\r\n-\t *    Y          N       N         Data Cache\r\n-\t *    \r\n-\t *    N          Y       Y         Database\r\n-\t *    N          N       Y         Database\r\n-\t *    N          Y       N         Object Cache\r\n-\t *    N          N       N         Object Cache\r\n-\r\n-\t */\r\n-\tpublic void verifyRefresh(boolean useDataCache, LockModeType lock, \r\n-\t\t\tboolean makeDirtyBeforeRefresh, boolean refreshFromDataCache, \r\n-\t\t\tString expected) {\r\n-\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n-\t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n-\t\temf.getConfiguration().setRefreshFromDataCache(refreshFromDataCache);\r\n-\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n-        \r\n-\t\tem.getTransaction().begin();\r\n-\t\tPObject pc = new PObject();\r\n-\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\r\n-\t\tem.persist(pc);\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tObject oid = pc.getId();\r\n-\t\tStoreCache dataCache = emf.getStoreCache();\r\n-\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n-\t\t\r\n-\t\t// Modify the record in the database in a separate transaction using\r\n-\t\t// native SQL so that the in-memory instance is not altered \r\n-\t\tem.getTransaction().begin();\r\n-\t\tString sql = \"UPDATE POBJECT SET NAME='\"+ MARKER_DATABASE +\"' WHERE id=\"+oid;\r\n-\t\tem.createNativeQuery(sql).executeUpdate();\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tassertEquals(useDataCache ? MARKER_DATACACHE : MARKER_CACHE, pc.getName());\r\n-\t\t\r\n-\t\tem.getTransaction().begin();\r\n-\t\tif (makeDirtyBeforeRefresh) {\r\n-\t\t\tpc.setName(MARKER_DIRTY_CACHE);\r\n-\t\t} \r\n-\t\tassertEquals(makeDirtyBeforeRefresh, em.isDirty(pc));\r\n-\r\n-\t\tif (lock != null) {\r\n-\t\t\t((EntityManagerImpl)em).getFetchPlan().setReadLockMode(lock);\r\n-\t\t}\r\n-\t\tem.refresh(pc);\r\n-\t\t\r\n-\t\tassertEquals(expected, pc.getName());\r\n-\t\tem.getTransaction().commit();\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * The expected marker i.e. where the state is refreshed from depends on\r\n-\t * a) whether DataCache is active\r\n-\t * b) whether current Lock is stronger than NOLOCK\r\n-\t * c) whether the object to be refreshed is dirty\r\n-\t * \r\n-\t * The following truth table enumerates the possibilities\r\n-\t * \r\n-\t * Use Cache?   Lock?   Dirty?     Target\r\n-\t *    Y          Y       Y         Database\r\n-\t *    Y          N       Y         Data Cache\r\n-\t *    Y          Y       N         Data Cache\r\n-\t *    Y          N       N         Data Cache\r\n-\t *    \r\n-\t *    N          Y       Y         Database\r\n-\t *    N          N       Y         Database\r\n-\t *    N          Y       N         Object Cache\r\n-\t *    N          N       N         Object Cache\r\n-\t *    \r\n-\t * @param datacache the marker for \r\n-\t * @param database\r\n-\t * @param useDataCache\r\n-\t * @param lock\r\n-\t * @param makeDirtyBeforeRefresh\r\n-\t * @return\r\n-\t */\r\n-\tString getExpectedMarker(boolean useDataCache, LockModeType lock, \r\n-\t\t\tboolean makeDirtyBeforeRefresh) {\r\n-\t\tif (useDataCache) {\r\n-\t\t\treturn (lock != null) ? MARKER_DATABASE : MARKER_DATACACHE; \r\n-\t\t} else {\r\n-\t\t\treturn MARKER_DATABASE;\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithNoLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithNoLockHitsDataCache() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithNoLockDoesNotHitDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithNoLockHitsDataCache() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithReadLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithReadLockDoesNotHitDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithWriteLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithWriteLockDoesNotHitDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithoutDataCacheAlwaysHitsDatabase() {\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\t\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithoutDataCacheDoesNotHitDatabase() {\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\r\n-\t\t\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Verify behavior of refreshing an instance which has been deleted by\r\n-\t * out-of-band process (e.g. a native SQL in a separate transaction).\r\n-\t * The behavior differs when refresh() without a lock fetches the data from\r\n-\t * DataCache even when the original database record is deleted.\r\n-\t * \r\n-\t * @param useDataCache\r\n-\t * @param lock\r\n-\t */\r\n-\tpublic void verifyDeleteDetectionOnRefresh(boolean useDataCache, \r\n-\t\t\tboolean dirty, LockModeType lock, Class expectedExceptionType) {\r\n-\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n-\t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n-\t\t\t\r\n-\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n-        \r\n-\t\tem.getTransaction().begin();\r\n-\t\tPObject pc = new PObject();\r\n-\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\r\n-\t\tem.persist(pc);\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tObject oid = pc.getId();\r\n-\t\tStoreCache dataCache = emf.getStoreCache();\r\n-\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n-\t\t\r\n-\t\t// delete the record in the database in a separate transaction using\r\n-\t\t// native SQL so that the in-memory instance is not altered \r\n-\t\tem.getTransaction().begin();\r\n-\t\tString sql = \"DELETE FROM POBJECT WHERE id=\"+oid;\r\n-\t\tem.createNativeQuery(sql).executeUpdate();\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\t// the object cache does not know that the record was deleted\r\n-\t\tassertTrue(em.contains(pc));\r\n-\t\t// nor does the data cache\r\n-\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n-\t\t\r\n-\t\t/**\r\n-\t\t * refresh behavior no more depends on current lock. Refresh\r\n-\t\t * will always attempt to fetch the instance from database \r\n-\t\t * raising EntityNotFoundException.\r\n-\t\t *   \r\n-\t\t */\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.getFetchPlan().setReadLockMode(lock);\r\n-\t\tif (dirty) \r\n-\t\t\tpc.setName(\"Dirty Name\");\r\n-\t\ttry {\r\n-\t\t\tem.refresh(pc);\r\n-\t\t\tif (expectedExceptionType != null) {\r\n-\t\t\t\tfail(\"expected \" + expectedExceptionType.getSimpleName() + \r\n-\t\t\t\t\t\t\" for PObject:\" + oid);\r\n-\t\t\t}\r\n-\t\t} catch (Exception ex) {\r\n-\t\t\tboolean expectedException = expectedExceptionType != null &&\r\n-\t\t\t    expectedExceptionType.isAssignableFrom(ex.getClass());\r\n-\t\t\tif (!expectedException) {\r\n-\t\t\t\tex.printStackTrace();\r\n-\t\t\t\tString error = (expectedExceptionType == null) \r\n-\t\t\t\t\t? \"no exception\" : expectedExceptionType.getName();\r\n-\t\t\t\tfail(\"expected \" + error + \" for PObject:\" + oid);\r\n-\t\t\t}\r\n-\t\t} finally {\r\n-\t\t\tem.getTransaction().rollback();\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tpublic void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, NO_ERROR);\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\r\n-\tpublic void testDeleteIsNotDetectedOnDirtyRefreshWithoutLockWithDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, NOLOCK, NO_ERROR);\t\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnDirtyRefreshWithLockWithDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnDirtyRefreshWitDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnCleanRefreshWithoutLockWithoutDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithoutDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.EntityNotFoundException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.StoreCache;\n+import org.apache.openjpa.persistence.StoreCacheImpl;\n+import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwned;\n+import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwner;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.datacache.common.apps.PObject;\n+\n+/**\n+ * Tests various application behavior with or without DataCache.\n+ * Ideally, an application should behave identically irrespective of the \n+ * DataCache. However, purpose of this test is to identify specific scenarios\n+ * where this ideal is violated. The test case also demonstrates, wherever\n+ * possible, what extra step an application may take to ensure that its \n+ * behavior with or without DataCache remains identical.   \n+ * \n+ * So far following use cases are found to demonstrate behavioral differences:\n+ * 1. Inconsistent bidirectional relation\n+ * 2. Refresh\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestDataCacheBehavesIdentical extends AbstractTestCase {\n+\tprivate static OpenJPAEntityManagerFactorySPI emfWithDataCache;\n+\tprivate static OpenJPAEntityManagerFactorySPI emfWithoutDataCache;\n+\t\n+\tprivate static final boolean WITH_DATACACHE = true;\n+\tprivate static final boolean CONSISTENT = true;\n+\tprivate static final boolean DIRTY = true;\n+\tprivate static final boolean REFRESH_FROM_DATACACHE = true;\n+\tprivate static final LockModeType NOLOCK = null;\n+\tprivate static final Class ENTITY_NOT_FOUND_ERROR = EntityNotFoundException.class;\n+\tprivate static final Class NO_ERROR = null;\n+\n+\tprivate static final String MARKER_DATACACHE = \"in DataCache\";\n+\tprivate static final String MARKER_DATABASE  = \"in Database\";\n+\tprivate static final String MARKER_CACHE     = \"in Object Cache\";\n+\tprivate static final String MARKER_DIRTY_CACHE = \"in Object Cache (dirty)\";\n+\tprivate static long ID_COUNTER = System.currentTimeMillis();\n+\t\n+\n+\t/**\n+\t * Sets up two EntityManagerFactory: one with DataCache another without.\n+\t */\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\tif (emfWithDataCache == null) {\n+\t\t\temfWithDataCache = createEMF(\n+\t\t\t\t\t\"openjpa.jdbc.SynchronizeMappings\",\t\"buildSchema\", \n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \n+\t\t\t\t\t\"openjpa.DataCache\", \"true\",\n+\t\t\t\t\t\"openjpa.RemoteCommitProvider\", \"sjvm\",\n+\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\n+\t\t\t\t\tPObject.class,\n+\t\t\t\t\tBidirectionalOne2OneOwner.class,\n+\t\t\t\t\tBidirectionalOne2OneOwned.class, CLEAR_TABLES);\n+\t\t\temfWithoutDataCache = createEMF(\n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \n+\t\t\t\t\t\"openjpa.DataCache\", \"false\",\n+\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\n+\t\t\t\t\tPObject.class,\n+\t\t\t\t\tBidirectionalOne2OneOwned.class,\n+\t\t\t\t\tBidirectionalOne2OneOwner.class, CLEAR_TABLES);\n+\n+\t\t\tassertNotNull(emfWithDataCache);\n+\t\t\tassertNotNull(emfWithoutDataCache);\n+\n+\t\t\t// StoreCache is, by design, always non-null \n+\t\t\tassertNotNull(emfWithDataCache.getStoreCache());\n+\t\t\tassertNotNull(emfWithoutDataCache.getStoreCache());\n+\n+\t\t\t// however, following distinguishes whether DataCache is active  \n+\t\t\tassertTrue(isDataCacheActive(emfWithDataCache));\n+\t\t\tassertFalse(isDataCacheActive(emfWithoutDataCache));\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Affirms via internal structures if the given factory is configured with\n+\t * active DataCache. Because, even when DataCache is configured to be\n+\t * false, a no-op StoreCache is instantiated by design.\n+\t */\n+\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\n+\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\n+\t\t    && emf.getConfiguration()\n+\t\t          .getDataCacheManagerInstance()\n+\t\t          .getSystemDataCache() != null;\n+\t}\n+\n+\t/**\n+\t * Create one-to-one bidirectional relation (may or may not be consistent)\n+\t * between two pairs of instances. Creates four instances Owner1, Owned1,\n+\t * Owner2, Owned2. The first instance has the given id. The id of the other\n+\t * instances monotonically increase by 1. The relationship is set either\n+\t * consistently or inconsistently. Consistent relation is when Owner1 points\n+\t * to Owned1 and Owned1 points back to Owner1. Inconsistent relation is when\n+\t * Owner1 points to Owned1 but Owned1 points to Owner2 instead of Owner1.\n+\t * \n+\t * \n+\t * @param em\n+\t *            the entity manager to persist the instances\n+\t * @param id\n+\t *            the identifier of the first owner instance. The identifier for\n+\t *            the other instances are sequential in order of creation.\n+\t * @param consistent\n+\t *            if true sets the relationship as consistent.\n+\t */\n+\tpublic void createBidirectionalRelation(EntityManager em, long id,\n+\t\t\tboolean consistent) {\n+\t\tBidirectionalOne2OneOwner owner1 = new BidirectionalOne2OneOwner();\n+\t\tBidirectionalOne2OneOwned owned1 = new BidirectionalOne2OneOwned();\n+\t\tBidirectionalOne2OneOwner owner2 = new BidirectionalOne2OneOwner();\n+\t\tBidirectionalOne2OneOwned owned2 = new BidirectionalOne2OneOwned();\n+\t\t\n+\t\towner1.setId(id++);\n+\t\towned1.setId(id++);\n+\t\towner2.setId(id++);\n+\t\towned2.setId(id++);\n+\t\t\n+\t\towner1.setName(\"Owner1\");\n+\t\towned1.setName(\"Owned1\");\n+\t\towned2.setName(\"Owned2\");\n+\t\towner2.setName(\"Owner2\");\n+\n+\t\towner1.setOwned(owned1);\n+\t\towner2.setOwned(owned2);\n+\n+\t\tif (consistent) {\n+\t\t\towned1.setOwner(owner1);\n+\t\t\towned2.setOwner(owner2);\n+\t\t} else {\n+\t\t\towned1.setOwner(owner2);\n+\t\t\towned2.setOwner(owner1);\n+\t\t}\n+\n+\t\tem.getTransaction().begin();\n+\t\tem.persist(owner1);\n+\t\tem.persist(owned1);\n+\t\tem.persist(owner2);\n+\t\tem.persist(owned2);\n+\t\tem.getTransaction().commit();\n+\t\tem.clear();\n+\t}\n+\n+\t/**\n+\t * Verifies that bidirectionally related objects can be persisted \n+\t * and later retrieved in a different transaction. \n+\t * \n+\t * Creates interrelated set of four instances.\n+\t * Establish their relation either consistently or inconsistently based\n+\t * on the given flag.\n+\t * Persist them and then clear the context. \n+\t * Fetch the instances in memory again by their identifiers. \n+\t * Compare the interrelations between the fetched instances with the \n+\t * relations of the original instances (which can be consistent or \n+\t * inconsistent). \n+\t * \n+\t * The mapping specification is such that the bidirectional relation is \n+\t * stored in database by a single foreign key. Hence database relation\n+\t * is always consistent. Hence the instances retrieved from database are\n+\t * always consistently related irrespective of whether they were created\n+\t * with consistent or inconsistent relation.\n+\t * However, when the instances are retrieved from the data cache, data cache\n+\t * will preserve the in-memory relations even when they are inconsistent.\n+\t *    \n+\t * @param useDataCache\n+\t *            use DataCache\n+\t * @param consistent\n+\t *            assume that the relationship were created as consistent.\n+\t */\n+\tpublic void verifyBidirectionalRelation(boolean useDataCache,\n+\t\t\tboolean createConsistent, boolean expectConsistent) {\n+\t\tEntityManager em = (useDataCache) \n+\t\t                 ? emfWithDataCache.createEntityManager() \n+\t\t                 : emfWithoutDataCache.createEntityManager();\n+\t\t                 \n+\t\tlong id = ID_COUNTER++;\n+\t\tID_COUNTER += 4;\n+\t\tcreateBidirectionalRelation(em, id, createConsistent);\n+\t\t\n+\t\t\n+\t\tBidirectionalOne2OneOwner owner1 = em.find(BidirectionalOne2OneOwner.class, id);\n+\t\tBidirectionalOne2OneOwned owned1 = em.find(BidirectionalOne2OneOwned.class, id + 1);\n+\t\tBidirectionalOne2OneOwner owner2 = em.find(BidirectionalOne2OneOwner.class, id + 2);\n+\t\tBidirectionalOne2OneOwned owned2 = em.find(BidirectionalOne2OneOwned.class, id + 3);\n+\n+\t\tassertNotNull(owner1);\n+\t\tassertNotNull(owner2);\n+\t\tassertNotNull(owned1);\n+\t\tassertNotNull(owned2);\n+\n+\t\tassertEquals(owner1, expectConsistent \n+\t\t\t\t\t? owner1.getOwned().getOwner() \n+\t\t\t\t\t: owner2.getOwned().getOwner());\n+\t\tassertEquals(owner2, expectConsistent \n+\t\t\t\t\t? owner2.getOwned().getOwner() \n+\t\t\t\t    : owner1.getOwned().getOwner());\n+\n+\n+\t\tassertEquals(owned1, owner1.getOwned());\n+\t\tassertEquals(expectConsistent ? owner1 : owner2, owned1.getOwner());\n+\t\tassertEquals(owned2, owner2.getOwned());\n+\t\tassertEquals(expectConsistent ? owner2 : owner1, owned2.getOwner());\n+\t}\n+\n+\tpublic void testConsitentBidirectionalRelationIsPreservedWithDataCache() {\n+\t\tverifyBidirectionalRelation(WITH_DATACACHE, CONSISTENT, CONSISTENT);\n+\t}\n+\n+\tpublic void testConsitentBidirectionalRelationIsPreservedWithoutDataCache() {\n+\t\tverifyBidirectionalRelation(!WITH_DATACACHE, CONSISTENT, CONSISTENT);\n+\t}\n+\n+\tpublic void testInconsitentBidirectionalRelationIsPreservedWithDataCache() {\n+\t\tverifyBidirectionalRelation(WITH_DATACACHE, !CONSISTENT, !CONSISTENT);\n+\t}\n+\n+\tpublic void testInconsitentBidirectionalRelationIsNotPreservedWithoutDataCache() {\n+\t\tverifyBidirectionalRelation(!WITH_DATACACHE, !CONSISTENT, CONSISTENT);\n+\t}\n+\t\n+\t/**\n+\t * Verify that refresh() may fetch state from either the data cache or the\n+\t * database based on different conditions. \n+\t * The conditions that impact are \n+\t * a) whether current lock is stronger than NONE \n+\t * b) whether the instance being refreshed is dirty\n+\t * \n+\t * An instance is created with data cache marker and persisted. \n+\t * A native SQL is used to update the database record with database marker. \n+\t * The in-memory instance is not aware of this out-of-band update. \n+\t * Then the in-memory instance is refreshed. The marker of the refreshed \n+\t * instance tells whether the instance is refreshed from the data cache\n+\t * of the database. \n+\t * \n+\t * @param useDataCache flags if data cache is active. if not, then surely\n+\t * refresh always fetch state from the database.\n+\t * \n+\t * @param datacache the marker for the copy of the data cached instance\n+\t * @param database the marker for the database record\n+\t * @param lock lock to be used\n+\t * @param makeDirtyBeforeRefresh flags if the instance be dirtied before\n+\t * refresh()\n+\t * @param expected The expected marker i.e. where the state is refreshed \n+\t * from. This should be always <code>MARKER_DATABASE</code>.\n+\t * a) whether DataCache is active\n+\t * b) whether current Lock is stronger than NOLOCK\n+\t * c) whether the object to be refreshed is dirty\n+\t * \n+\t * The following truth table enumerates the possibilities\n+\t * \n+\t * Use Cache?   Lock?   Dirty?     Target\n+\t *    Y          Y       Y         Database\n+\t *    Y          N       Y         Data Cache\n+\t *    Y          Y       N         Data Cache\n+\t *    Y          N       N         Data Cache\n+\t *    \n+\t *    N          Y       Y         Database\n+\t *    N          N       Y         Database\n+\t *    N          Y       N         Object Cache\n+\t *    N          N       N         Object Cache\n+\n+\t */\n+\tpublic void verifyRefresh(boolean useDataCache, LockModeType lock, \n+\t\t\tboolean makeDirtyBeforeRefresh, boolean refreshFromDataCache, \n+\t\t\tString expected) {\n+\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\n+\t\t\t? emfWithDataCache : emfWithoutDataCache;\n+\t\temf.getConfiguration().setRefreshFromDataCache(refreshFromDataCache);\n+\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        \n+\t\tem.getTransaction().begin();\n+\t\tPObject pc = new PObject();\n+\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\n+\t\tem.persist(pc);\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tObject oid = pc.getId();\n+\t\tStoreCache dataCache = emf.getStoreCache();\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\n+\t\t\n+\t\t// Modify the record in the database in a separate transaction using\n+\t\t// native SQL so that the in-memory instance is not altered \n+\t\tem.getTransaction().begin();\n+\t\tString sql = \"UPDATE POBJECT SET NAME='\"+ MARKER_DATABASE +\"' WHERE id=\"+oid;\n+\t\tem.createNativeQuery(sql).executeUpdate();\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tassertEquals(useDataCache ? MARKER_DATACACHE : MARKER_CACHE, pc.getName());\n+\t\t\n+\t\tem.getTransaction().begin();\n+\t\tif (makeDirtyBeforeRefresh) {\n+\t\t\tpc.setName(MARKER_DIRTY_CACHE);\n+\t\t} \n+\t\tassertEquals(makeDirtyBeforeRefresh, em.isDirty(pc));\n+\n+\t\tif (lock != null) {\n+\t\t\t((EntityManagerImpl)em).getFetchPlan().setReadLockMode(lock);\n+\t\t}\n+\t\tem.refresh(pc);\n+\t\t\n+\t\tassertEquals(expected, pc.getName());\n+\t\tem.getTransaction().commit();\n+\t}\n+\t\n+\t/**\n+\t * The expected marker i.e. where the state is refreshed from depends on\n+\t * a) whether DataCache is active\n+\t * b) whether current Lock is stronger than NOLOCK\n+\t * c) whether the object to be refreshed is dirty\n+\t * \n+\t * The following truth table enumerates the possibilities\n+\t * \n+\t * Use Cache?   Lock?   Dirty?     Target\n+\t *    Y          Y       Y         Database\n+\t *    Y          N       Y         Data Cache\n+\t *    Y          Y       N         Data Cache\n+\t *    Y          N       N         Data Cache\n+\t *    \n+\t *    N          Y       Y         Database\n+\t *    N          N       Y         Database\n+\t *    N          Y       N         Object Cache\n+\t *    N          N       N         Object Cache\n+\t *    \n+\t * @param datacache the marker for \n+\t * @param database\n+\t * @param useDataCache\n+\t * @param lock\n+\t * @param makeDirtyBeforeRefresh\n+\t * @return\n+\t */\n+\tString getExpectedMarker(boolean useDataCache, LockModeType lock, \n+\t\t\tboolean makeDirtyBeforeRefresh) {\n+\t\tif (useDataCache) {\n+\t\t\treturn (lock != null) ? MARKER_DATABASE : MARKER_DATACACHE; \n+\t\t} else {\n+\t\t\treturn MARKER_DATABASE;\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithNoLockHitsDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithNoLockHitsDataCache() {\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithNoLockDoesNotHitDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithNoLockHitsDataCache() {\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithReadLockHitsDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithReadLockDoesNotHitDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithWriteLockHitsDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithWriteLockDoesNotHitDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithoutDataCacheAlwaysHitsDatabase() {\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\t\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithoutDataCacheDoesNotHitDatabase() {\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_CACHE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\n+\t\t\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\n+\t}\n+\t\n+\t/**\n+\t * Verify behavior of refreshing an instance which has been deleted by\n+\t * out-of-band process (e.g. a native SQL in a separate transaction).\n+\t * The behavior differs when refresh() without a lock fetches the data from\n+\t * DataCache even when the original database record is deleted.\n+\t * \n+\t * @param useDataCache\n+\t * @param lock\n+\t */\n+\tpublic void verifyDeleteDetectionOnRefresh(boolean useDataCache, \n+\t\t\tboolean dirty, LockModeType lock, Class expectedExceptionType) {\n+\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\n+\t\t\t? emfWithDataCache : emfWithoutDataCache;\n+\t\t\t\n+\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        \n+\t\tem.getTransaction().begin();\n+\t\tPObject pc = new PObject();\n+\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\n+\t\tem.persist(pc);\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tObject oid = pc.getId();\n+\t\tStoreCache dataCache = emf.getStoreCache();\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\n+\t\t\n+\t\t// delete the record in the database in a separate transaction using\n+\t\t// native SQL so that the in-memory instance is not altered \n+\t\tem.getTransaction().begin();\n+\t\tString sql = \"DELETE FROM POBJECT WHERE id=\"+oid;\n+\t\tem.createNativeQuery(sql).executeUpdate();\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\t// the object cache does not know that the record was deleted\n+\t\tassertTrue(em.contains(pc));\n+\t\t// nor does the data cache\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\n+\t\t\n+\t\t/**\n+\t\t * refresh behavior no more depends on current lock. Refresh\n+\t\t * will always attempt to fetch the instance from database \n+\t\t * raising EntityNotFoundException.\n+\t\t *   \n+\t\t */\n+\t\tem.getTransaction().begin();\n+\t\tem.getFetchPlan().setReadLockMode(lock);\n+\t\tif (dirty) \n+\t\t\tpc.setName(\"Dirty Name\");\n+\t\ttry {\n+\t\t\tem.refresh(pc);\n+\t\t\tif (expectedExceptionType != null) {\n+\t\t\t\tfail(\"expected \" + expectedExceptionType.getSimpleName() + \n+\t\t\t\t\t\t\" for PObject:\" + oid);\n+\t\t\t}\n+\t\t} catch (Exception ex) {\n+\t\t\tboolean expectedException = expectedExceptionType != null &&\n+\t\t\t    expectedExceptionType.isAssignableFrom(ex.getClass());\n+\t\t\tif (!expectedException) {\n+\t\t\t\tex.printStackTrace();\n+\t\t\t\tString error = (expectedExceptionType == null) \n+\t\t\t\t\t? \"no exception\" : expectedExceptionType.getName();\n+\t\t\t\tfail(\"expected \" + error + \" for PObject:\" + oid);\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tem.getTransaction().rollback();\n+\t\t}\n+\t}\n+\n+\tpublic void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, NO_ERROR);\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\n+\tpublic void testDeleteIsNotDetectedOnDirtyRefreshWithoutLockWithDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, NOLOCK, NO_ERROR);\t\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnDirtyRefreshWithLockWithDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnDirtyRefreshWitDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithoutLockWithoutDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithoutDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\n+}"},{"sha":"d800ec33b215895d0d4ebbbcaa9da3e93bd64e56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","status":"modified","additions":175,"deletions":175,"changes":350,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,175 +1,175 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.sql.Connection;\r\n-import java.sql.PreparedStatement;\r\n-import java.sql.SQLException;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.RollbackException;\r\n-import javax.persistence.LockModeType;\r\n-import javax.sql.DataSource;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.event.RemoteCommitListener;\r\n-import org.apache.openjpa.event.RemoteCommitEvent;\r\n-\r\n-public class TestDataCacheOptimisticLockRecovery\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    private int pk;\r\n-    private int remoteCommitEventStaleCount = 0;\r\n-    private Object staleOid;\r\n-\r\n-    public void setUp() {\r\n-        setUp(\"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            OptimisticLockInstance.class);\r\n-\r\n-        emf.getConfiguration().getRemoteCommitEventManager().addListener(\r\n-            new RemoteCommitListener() {\r\n-                public void afterCommit(RemoteCommitEvent e) {\r\n-                    if (e.getPayloadType() ==\r\n-                        RemoteCommitEvent.PAYLOAD_LOCAL_STALE_DETECTION) {\r\n-                        remoteCommitEventStaleCount++;\r\n-                        staleOid = e.getUpdatedObjectIds().iterator().next();\r\n-                    }\r\n-                }\r\n-\r\n-                public void close() {\r\n-                }\r\n-            }\r\n-        );\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance oli = new OptimisticLockInstance(\"foo\");\r\n-        em.persist(oli);\r\n-        em.getTransaction().commit();\r\n-        pk = oli.getPK();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOptimisticLockRecovery() \r\n-        throws SQLException {\r\n-\r\n-        EntityManager em;\r\n-        \r\n-        // 1. get the oplock value for the instance after commit and\r\n-        // get a read lock to ensure that we check for the optimistic\r\n-        // lock column at tx commit.\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance oli = em.find(OptimisticLockInstance.class, pk);\r\n-        Object oid = JPAFacadeHelper.toOpenJPAObjectId(\r\n-            JPAFacadeHelper.getMetaData(oli),\r\n-            OpenJPAPersistence.cast(em).getObjectId(oli));\r\n-        int firstOpLockValue = oli.getOpLock();\r\n-        em.lock(oli, LockModeType.READ);\r\n-\r\n-        // 2. make a change to the instance's optimistic lock column\r\n-        // via direct SQL in a separate transaction\r\n-        int secondOpLockValue = firstOpLockValue + 1;\r\n-\r\n-        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\r\n-            OpenJPAPersistence.cast(em).getEntityManagerFactory();\r\n-        DataSource ds = (DataSource) emf.getConfiguration()\r\n-            .getConnectionFactory();\r\n-        Connection c = ds.getConnection();\r\n-        c.setAutoCommit(false);\r\n-        PreparedStatement ps = c.prepareStatement(\r\n-            \"UPDATE OPTIMISTIC_LOCK_INSTANCE SET OPLOCK = ? WHERE PK = ?\");\r\n-        ps.setInt(1, secondOpLockValue);\r\n-        ps.setInt(2, pk);\r\n-        assertEquals(1, ps.executeUpdate());\r\n-        c.commit();\r\n-        \r\n-        // 3. commit the transaction, catching the expected oplock\r\n-        // exception\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-            fail(\"tx should have failed due to out-of-band oplock change\");\r\n-        } catch (RollbackException re) {\r\n-            // expected\r\n-        } finally {\r\n-            if (em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-        }\r\n-\r\n-        // 4. check that the corresponding remote commit event was fired\r\n-        assertEquals(1, remoteCommitEventStaleCount);\r\n-        assertEquals(oid, staleOid);\r\n-\r\n-        // 5. obtain the object in a new persistence context and\r\n-        // assert that the oplock column is set to the one that\r\n-        // happened in the out-of-band transaction\r\n-        em.close();\r\n-        em = this.emf.createEntityManager();\r\n-        oli = em.find(OptimisticLockInstance.class, pk);\r\n-\r\n-        // If this fails, then the data cache has the wrong value.\r\n-        // This is what this test case is designed to exercise.\r\n-        assertEquals(\"data cache is not being cleared when oplock \"\r\n-            + \"violations occur\", secondOpLockValue, oli.getOpLock());\r\n-\r\n-        // 6. get a read lock on the instance and commit the tx; this\r\n-        // time it should go through\r\n-        em.getTransaction().begin();\r\n-        em.lock(oli, LockModeType.READ);\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-        } catch (RollbackException e) {\r\n-            throw e;\r\n-        } finally {\r\n-            if (em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-        }\r\n-        em.close();\r\n-    }\r\n-    \r\n-    public void testExpectedOptimisticLockException() {\r\n-        EntityManager em;\r\n-        \r\n-        // 1. start a new tx\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.lock(em.find(OptimisticLockInstance.class, pk), LockModeType.READ);\r\n-        \r\n-        // 2. start another tx, and cause a version increment\r\n-        EntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-        em2.lock(em2.find(OptimisticLockInstance.class, pk), \r\n-            LockModeType.WRITE);\r\n-        em2.getTransaction().commit();\r\n-        em2.close();\r\n-        \r\n-        // 3. try to commit. this should fail, as this is a regular optimistic\r\n-        // lock failure situation.\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-            fail(\"write lock in em2 should trigger an optimistic lock failure\");\r\n-        } catch (RollbackException pe) {\r\n-            // expected\r\n-        }\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.persistence.EntityManager;\n+import javax.persistence.RollbackException;\n+import javax.persistence.LockModeType;\n+import javax.sql.DataSource;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.event.RemoteCommitListener;\n+import org.apache.openjpa.event.RemoteCommitEvent;\n+\n+public class TestDataCacheOptimisticLockRecovery\n+    extends SingleEMFTestCase {\n+\n+    private int pk;\n+    private int remoteCommitEventStaleCount = 0;\n+    private Object staleOid;\n+\n+    public void setUp() {\n+        setUp(\"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            OptimisticLockInstance.class);\n+\n+        emf.getConfiguration().getRemoteCommitEventManager().addListener(\n+            new RemoteCommitListener() {\n+                public void afterCommit(RemoteCommitEvent e) {\n+                    if (e.getPayloadType() ==\n+                        RemoteCommitEvent.PAYLOAD_LOCAL_STALE_DETECTION) {\n+                        remoteCommitEventStaleCount++;\n+                        staleOid = e.getUpdatedObjectIds().iterator().next();\n+                    }\n+                }\n+\n+                public void close() {\n+                }\n+            }\n+        );\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OptimisticLockInstance oli = new OptimisticLockInstance(\"foo\");\n+        em.persist(oli);\n+        em.getTransaction().commit();\n+        pk = oli.getPK();\n+        em.close();\n+    }\n+\n+    public void testOptimisticLockRecovery() \n+        throws SQLException {\n+\n+        EntityManager em;\n+        \n+        // 1. get the oplock value for the instance after commit and\n+        // get a read lock to ensure that we check for the optimistic\n+        // lock column at tx commit.\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OptimisticLockInstance oli = em.find(OptimisticLockInstance.class, pk);\n+        Object oid = JPAFacadeHelper.toOpenJPAObjectId(\n+            JPAFacadeHelper.getMetaData(oli),\n+            OpenJPAPersistence.cast(em).getObjectId(oli));\n+        int firstOpLockValue = oli.getOpLock();\n+        em.lock(oli, LockModeType.READ);\n+\n+        // 2. make a change to the instance's optimistic lock column\n+        // via direct SQL in a separate transaction\n+        int secondOpLockValue = firstOpLockValue + 1;\n+\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.cast(em).getEntityManagerFactory();\n+        DataSource ds = (DataSource) emf.getConfiguration()\n+            .getConnectionFactory();\n+        Connection c = ds.getConnection();\n+        c.setAutoCommit(false);\n+        PreparedStatement ps = c.prepareStatement(\n+            \"UPDATE OPTIMISTIC_LOCK_INSTANCE SET OPLOCK = ? WHERE PK = ?\");\n+        ps.setInt(1, secondOpLockValue);\n+        ps.setInt(2, pk);\n+        assertEquals(1, ps.executeUpdate());\n+        c.commit();\n+        \n+        // 3. commit the transaction, catching the expected oplock\n+        // exception\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"tx should have failed due to out-of-band oplock change\");\n+        } catch (RollbackException re) {\n+            // expected\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+        }\n+\n+        // 4. check that the corresponding remote commit event was fired\n+        assertEquals(1, remoteCommitEventStaleCount);\n+        assertEquals(oid, staleOid);\n+\n+        // 5. obtain the object in a new persistence context and\n+        // assert that the oplock column is set to the one that\n+        // happened in the out-of-band transaction\n+        em.close();\n+        em = this.emf.createEntityManager();\n+        oli = em.find(OptimisticLockInstance.class, pk);\n+\n+        // If this fails, then the data cache has the wrong value.\n+        // This is what this test case is designed to exercise.\n+        assertEquals(\"data cache is not being cleared when oplock \"\n+            + \"violations occur\", secondOpLockValue, oli.getOpLock());\n+\n+        // 6. get a read lock on the instance and commit the tx; this\n+        // time it should go through\n+        em.getTransaction().begin();\n+        em.lock(oli, LockModeType.READ);\n+        try {\n+            em.getTransaction().commit();\n+        } catch (RollbackException e) {\n+            throw e;\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+        }\n+        em.close();\n+    }\n+    \n+    public void testExpectedOptimisticLockException() {\n+        EntityManager em;\n+        \n+        // 1. start a new tx\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.lock(em.find(OptimisticLockInstance.class, pk), LockModeType.READ);\n+        \n+        // 2. start another tx, and cause a version increment\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+        em2.lock(em2.find(OptimisticLockInstance.class, pk), \n+            LockModeType.WRITE);\n+        em2.getTransaction().commit();\n+        em2.close();\n+        \n+        // 3. try to commit. this should fail, as this is a regular optimistic\n+        // lock failure situation.\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"write lock in em2 should trigger an optimistic lock failure\");\n+        } catch (RollbackException pe) {\n+            // expected\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"d0bd13ed9f2a4b256123d0aa2a7e3390c142fc46","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Extend the single-JVM cache test to test dynamic pcdata.\r\n- */\r\n-public class TestDataCachePCDataGenerator\r\n-    extends TestSJVMCache {\r\n-\r\n-    public TestDataCachePCDataGenerator(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return addGenerator(super.getConfs());\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return addGenerator(super.getConfs2());\r\n-    }\r\n-\r\n-    private String[] addGenerator(String[] confs) {\r\n-        String[] copy = new String[confs.length + 2];\r\n-        System.arraycopy(confs, 0, copy, 0, confs.length);\r\n-        copy[confs.length] = \"openjpa.DynamicDataStructs\";\r\n-        copy[confs.length + 1] = \"true\";\r\n-        return copy;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Extend the single-JVM cache test to test dynamic pcdata.\n+ */\n+public class TestDataCachePCDataGenerator\n+    extends TestSJVMCache {\n+\n+    public TestDataCachePCDataGenerator(String test) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return addGenerator(super.getConfs());\n+    }\n+\n+    protected String[] getConfs2() {\n+        return addGenerator(super.getConfs2());\n+    }\n+\n+    private String[] addGenerator(String[] confs) {\n+        String[] copy = new String[confs.length + 2];\n+        System.arraycopy(confs, 0, copy, 0, confs.length);\n+        copy[confs.length] = \"openjpa.DynamicDataStructs\";\n+        copy[confs.length + 1] = \"true\";\n+        return copy;\n+    }\n+}"},{"sha":"bef983d42cba7ece612d4c3c0c0eceba34fc714a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","status":"modified","additions":228,"deletions":228,"changes":456,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,228 +1,228 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.datacache.DataCache;\r\n-import org.apache.openjpa.datacache.DataCacheScheduler;\r\n-import org.apache.openjpa.datacache.ConcurrentDataCache;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.util.Id;\r\n-\r\n-public class TestDataCacheScheduler\r\n-    extends AbstractTestCase {\r\n-\r\n-    private static final String MINUTES = getMinutes();\r\n-\r\n-    public TestDataCacheScheduler(String str) {\r\n-        super(str, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private static String getMinutes() {\r\n-        StringBuffer buf = new StringBuffer();\r\n-        for (int i = 0; i < 60; i++) {\r\n-            if (i % 2 == 0)\r\n-                buf.append(i).append(',');\r\n-        }\r\n-        return buf.toString();\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(ScheduledEviction.class);\r\n-    }\r\n-\r\n-    public void testRuntime()\r\n-        throws Exception {\r\n-        String sched = MINUTES + \" * * * *\";\r\n-        Map propsMap = new HashMap();\r\n-        propsMap\r\n-            .put(\"openjpa.DataCache\", \"true(EvictionSchedule=\\\"\" + sched + \"\\\")\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        OpenJPAEntityManagerFactory emf =\r\n-            (OpenJPAEntityManagerFactory) getEmf(propsMap);\r\n-\r\n-        ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\r\n-            .getConfiguration().getDataCacheManagerInstance()\r\n-            .getDataCacheScheduler().setInterval(1);\r\n-        DataCache cache = JPAFacadeHelper.getMetaData(emf,\r\n-            ScheduledEviction.class).getDataCache();\r\n-\r\n-        OpenJPAEntityManager em = (OpenJPAEntityManager) emf\r\n-            .createEntityManager();\r\n-        startTx(em);\r\n-        ScheduledEviction pc = new ScheduledEviction(\"Foo\");\r\n-        em.persist(pc);\r\n-        Object oid = em.getObjectId(pc);\r\n-        Object oidwithclass = new Id(ScheduledEviction.class, oid.toString());\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        cache.clear();// clear and wait until next run.\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        if (cal.get(Calendar.MINUTE) % 2 == 0)\r\n-            Thread.currentThread().sleep\r\n-                ((60 - cal.get(Calendar.SECOND)) * 1000);\r\n-        cal.setTime(new Date());\r\n-        assertTrue(cal.get(Calendar.MINUTE) % 2 == 1);\r\n-        em = (OpenJPAEntityManager) emf.createEntityManager();\r\n-        em.find(ScheduledEviction.class, oid);\r\n-        endEm(em);\r\n-        assertTrue(cache.contains(oidwithclass));\r\n-\r\n-        Thread.currentThread().sleep(130 * 1000);\r\n-        assertFalse(cache.contains(oidwithclass));\r\n-        emf.close();\r\n-    }\r\n-\r\n-    /**\r\n-     * too slow ! *\r\n-     */\r\n-    //FIXME Seetha Sep 26,2006\r\n-    /*public void XXXtestRunnable()\r\n-        throws Exception {\r\n-        KodoPersistenceManager pm = getPM();\r\n-        OpenJPAConfiguration conf = pm.getConfiguration();\r\n-        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\r\n-        scheduler.setInterval(1);\r\n-\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int minute = (cal.get(Calendar.MINUTE) + 2) % 60;\r\n-        StringBuffer sched = new StringBuffer();\r\n-        sched.append(minute).append(' ');\r\n-        sched.append(\"* \");\r\n-        sched.append(\"* \");\r\n-        sched.append(\"* \");\r\n-        sched.append(\"* \");\r\n-        DummyCache cache = new DummyCache();\r\n-        scheduler.scheduleEviction(cache, sched.toString());\r\n-\r\n-        Thread thread = new Thread(scheduler);\r\n-        thread.setDaemon(true);\r\n-        thread.start();\r\n-        // test that it did not run yet...\r\n-        Thread.currentThread().sleep(90 * 1000); // 90 seconds\r\n-        assertEquals(0, cache.clearCount);\r\n-        // test that it ran...\r\n-        Thread.currentThread().sleep(45 * 1000); // 45 seconds\r\n-        assertEquals(1, cache.clearCount);\r\n-        // test that it wasn't too eager\r\n-        Thread.currentThread().sleep(50 * 1000); // 90 seconds\r\n-        assertEquals(1, cache.clearCount);\r\n-        scheduler.stop();\r\n-    }*/\r\n-\r\n-    /**\r\n-     * too slow *\r\n-     */\r\n-    /* public void XXXtestMonth()\r\n-        throws Exception {\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int month = cal.get(Calendar.MONTH);\r\n-        int month2 = month + 1;\r\n-        if (month2 > 12)\r\n-            month2 = 1;\r\n-        doTest(\"* * \" + month + \" *\", \"* * \" + month2 + \" *\");\r\n-    }*/\r\n-\r\n-    /**\r\n-     * too slow *\r\n-     */\r\n-    /* public void XXXtestDayOfMonth()\r\n-        throws Exception {\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int dom = cal.get(Calendar.DAY_OF_MONTH);\r\n-        doTest(\"* \" + dom + \" * *\", \"* \" + (dom % 12 + 1) + \" * *\");\r\n-    }*/\r\n-    public void testDayOfWeek()\r\n-        throws Exception {\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int day = cal.get(Calendar.DAY_OF_WEEK);\r\n-        doTest(\"* * * \" + day, \"* * * \" + (day % 7 + 1));\r\n-    }\r\n-\r\n-    public void testHour()\r\n-        throws Exception {\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int hour = cal.get(Calendar.HOUR_OF_DAY);\r\n-        doTest(hour + \" * * *\", ((hour + 1) % 24) + \" * * *\");\r\n-    }\r\n-\r\n-    /**\r\n-     * Pass in 4 out of 5 tokens.\r\n-     */\r\n-    private void doTest(String valid, String invalid)\r\n-        throws Exception {\r\n-\r\n-        OpenJPAEntityManagerFactory emf =\r\n-            (OpenJPAEntityManagerFactory) getEmf();\r\n-        OpenJPAConfiguration conf =\r\n-            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\r\n-                .getConfiguration();\r\n-\r\n-        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\r\n-        scheduler.setInterval(1);\r\n-\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        String sched = ((cal.get(Calendar.MINUTE) + 1) % 60) + \" \";\r\n-        DummyCache validCache = new DummyCache();\r\n-        scheduler.scheduleEviction(validCache, sched + valid);\r\n-        DummyCache invalidCache = new DummyCache();\r\n-        scheduler.scheduleEviction(invalidCache, sched + invalid);\r\n-        Thread thread = new Thread(scheduler);\r\n-        thread.setDaemon(true);\r\n-        thread.start();\r\n-        // test that it did not run yet...\r\n-        Thread.currentThread().sleep(70 * 1000); // 70 seconds\r\n-        scheduler.stop();\r\n-//        assertEquals(2, validCache.clearCount);\r\n-        assertTrue(\"Wrong invocation count: \" + validCache.clearCount,\r\n-            validCache.clearCount == 1 || validCache.clearCount == 2);\r\n-        assertEquals(0, invalidCache.clearCount);\r\n-    }\r\n-\r\n-    private class DummyCache extends ConcurrentDataCache {\r\n-\r\n-        int clearCount = 0;\r\n-\r\n-        public void clear() {\r\n-            clearCount++;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.DataCacheScheduler;\n+import org.apache.openjpa.datacache.ConcurrentDataCache;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.util.Id;\n+\n+public class TestDataCacheScheduler\n+    extends AbstractTestCase {\n+\n+    private static final String MINUTES = getMinutes();\n+\n+    public TestDataCacheScheduler(String str) {\n+        super(str, \"datacachecactusapp\");\n+    }\n+\n+    private static String getMinutes() {\n+        StringBuffer buf = new StringBuffer();\n+        for (int i = 0; i < 60; i++) {\n+            if (i % 2 == 0)\n+                buf.append(i).append(',');\n+        }\n+        return buf.toString();\n+    }\n+\n+    public void setUp() {\n+        deleteAll(ScheduledEviction.class);\n+    }\n+\n+    public void testRuntime()\n+        throws Exception {\n+        String sched = MINUTES + \" * * * *\";\n+        Map propsMap = new HashMap();\n+        propsMap\n+            .put(\"openjpa.DataCache\", \"true(EvictionSchedule=\\\"\" + sched + \"\\\")\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        OpenJPAEntityManagerFactory emf =\n+            (OpenJPAEntityManagerFactory) getEmf(propsMap);\n+\n+        ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\n+            .getConfiguration().getDataCacheManagerInstance()\n+            .getDataCacheScheduler().setInterval(1);\n+        DataCache cache = JPAFacadeHelper.getMetaData(emf,\n+            ScheduledEviction.class).getDataCache();\n+\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) emf\n+            .createEntityManager();\n+        startTx(em);\n+        ScheduledEviction pc = new ScheduledEviction(\"Foo\");\n+        em.persist(pc);\n+        Object oid = em.getObjectId(pc);\n+        Object oidwithclass = new Id(ScheduledEviction.class, oid.toString());\n+        endTx(em);\n+        endEm(em);\n+\n+        cache.clear();// clear and wait until next run.\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        if (cal.get(Calendar.MINUTE) % 2 == 0)\n+            Thread.currentThread().sleep\n+                ((60 - cal.get(Calendar.SECOND)) * 1000);\n+        cal.setTime(new Date());\n+        assertTrue(cal.get(Calendar.MINUTE) % 2 == 1);\n+        em = (OpenJPAEntityManager) emf.createEntityManager();\n+        em.find(ScheduledEviction.class, oid);\n+        endEm(em);\n+        assertTrue(cache.contains(oidwithclass));\n+\n+        Thread.currentThread().sleep(130 * 1000);\n+        assertFalse(cache.contains(oidwithclass));\n+        emf.close();\n+    }\n+\n+    /**\n+     * too slow ! *\n+     */\n+    //FIXME Seetha Sep 26,2006\n+    /*public void XXXtestRunnable()\n+        throws Exception {\n+        KodoPersistenceManager pm = getPM();\n+        OpenJPAConfiguration conf = pm.getConfiguration();\n+        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\n+        scheduler.setInterval(1);\n+\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int minute = (cal.get(Calendar.MINUTE) + 2) % 60;\n+        StringBuffer sched = new StringBuffer();\n+        sched.append(minute).append(' ');\n+        sched.append(\"* \");\n+        sched.append(\"* \");\n+        sched.append(\"* \");\n+        sched.append(\"* \");\n+        DummyCache cache = new DummyCache();\n+        scheduler.scheduleEviction(cache, sched.toString());\n+\n+        Thread thread = new Thread(scheduler);\n+        thread.setDaemon(true);\n+        thread.start();\n+        // test that it did not run yet...\n+        Thread.currentThread().sleep(90 * 1000); // 90 seconds\n+        assertEquals(0, cache.clearCount);\n+        // test that it ran...\n+        Thread.currentThread().sleep(45 * 1000); // 45 seconds\n+        assertEquals(1, cache.clearCount);\n+        // test that it wasn't too eager\n+        Thread.currentThread().sleep(50 * 1000); // 90 seconds\n+        assertEquals(1, cache.clearCount);\n+        scheduler.stop();\n+    }*/\n+\n+    /**\n+     * too slow *\n+     */\n+    /* public void XXXtestMonth()\n+        throws Exception {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int month = cal.get(Calendar.MONTH);\n+        int month2 = month + 1;\n+        if (month2 > 12)\n+            month2 = 1;\n+        doTest(\"* * \" + month + \" *\", \"* * \" + month2 + \" *\");\n+    }*/\n+\n+    /**\n+     * too slow *\n+     */\n+    /* public void XXXtestDayOfMonth()\n+        throws Exception {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int dom = cal.get(Calendar.DAY_OF_MONTH);\n+        doTest(\"* \" + dom + \" * *\", \"* \" + (dom % 12 + 1) + \" * *\");\n+    }*/\n+    public void testDayOfWeek()\n+        throws Exception {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int day = cal.get(Calendar.DAY_OF_WEEK);\n+        doTest(\"* * * \" + day, \"* * * \" + (day % 7 + 1));\n+    }\n+\n+    public void testHour()\n+        throws Exception {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int hour = cal.get(Calendar.HOUR_OF_DAY);\n+        doTest(hour + \" * * *\", ((hour + 1) % 24) + \" * * *\");\n+    }\n+\n+    /**\n+     * Pass in 4 out of 5 tokens.\n+     */\n+    private void doTest(String valid, String invalid)\n+        throws Exception {\n+\n+        OpenJPAEntityManagerFactory emf =\n+            (OpenJPAEntityManagerFactory) getEmf();\n+        OpenJPAConfiguration conf =\n+            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\n+                .getConfiguration();\n+\n+        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\n+        scheduler.setInterval(1);\n+\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        String sched = ((cal.get(Calendar.MINUTE) + 1) % 60) + \" \";\n+        DummyCache validCache = new DummyCache();\n+        scheduler.scheduleEviction(validCache, sched + valid);\n+        DummyCache invalidCache = new DummyCache();\n+        scheduler.scheduleEviction(invalidCache, sched + invalid);\n+        Thread thread = new Thread(scheduler);\n+        thread.setDaemon(true);\n+        thread.start();\n+        // test that it did not run yet...\n+        Thread.currentThread().sleep(70 * 1000); // 70 seconds\n+        scheduler.stop();\n+//        assertEquals(2, validCache.clearCount);\n+        assertTrue(\"Wrong invocation count: \" + validCache.clearCount,\n+            validCache.clearCount == 1 || validCache.clearCount == 2);\n+        assertEquals(0, invalidCache.clearCount);\n+    }\n+\n+    private class DummyCache extends ConcurrentDataCache {\n+\n+        int clearCount = 0;\n+\n+        public void clear() {\n+            clearCount++;\n+        }\n+    }\n+}"},{"sha":"98729c1d3903f49ae4e348777d8c85aee667ea6a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","status":"modified","additions":357,"deletions":357,"changes":714,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,357 +1,357 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.Map;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.datacache.DataCache;\r\n-import org.apache.openjpa.event.TCPRemoteCommitProvider;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.util.Id;\r\n-\r\n-public class TestDistributedKodoDataCache extends AbstractTestCase {\r\n-\r\n-    // We want more than 1 instance of each type of class.\r\n-    private static final int NUM_OBJECTS = 4;\r\n-\r\n-    private Object[] _runtime1sOids;\r\n-\r\n-    private Object[] _runtime2sOids;\r\n-\r\n-    private Object spec_oid;\r\n-\r\n-    public TestDistributedKodoDataCache(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(RuntimeTest2.class);\r\n-    }\r\n-\r\n-    private interface ChangeOperation {\r\n-\r\n-        public String getName();\r\n-\r\n-        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n-            boolean asLarge);\r\n-    }\r\n-\r\n-    private class performAsModify implements ChangeOperation {\r\n-\r\n-        public String getName() {\r\n-            return \"Modify SpecialRuntimeTest1\";\r\n-        }\r\n-\r\n-        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n-            boolean asLarge) {\r\n-            OpenJPAEntityManager pm;\r\n-            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\r\n-            if (asLarge)\r\n-                //pm.setLargeTransaction(true);\r\n-                pm.setTrackChangesByType(true);\r\n-            startTx(pm);\r\n-            RuntimeTest1 special = pm.find(RuntimeTest1.class, spec_oid);\r\n-            assertNotNull(special);\r\n-            special.setStringField(\"SpeicalRuntimeTest1_MODIFIED\");\r\n-\r\n-            endTx(pm);\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-\r\n-    private class performAsDelete implements ChangeOperation {\r\n-\r\n-        public String getName() {\r\n-            return \"Delete SpecialRuntimeTest1\";\r\n-        }\r\n-\r\n-        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n-            boolean asLarge) {\r\n-            OpenJPAEntityManager pm;\r\n-            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\r\n-            if (asLarge)\r\n-                //pm.setLargeTransaction(true);\r\n-                pm.setTrackChangesByType(true);\r\n-            startTx(pm);\r\n-            RuntimeTest1 specialObj = pm.find(RuntimeTest1.class, spec_oid);\r\n-            assertNotNull(specialObj);\r\n-\r\n-            pm.remove(specialObj);\r\n-\r\n-            endTx(pm);\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-\r\n-    public void testNormalTransAndDataCacheDelete() {\r\n-        coreTestTransAndChange(new performAsDelete(), false, true);\r\n-    }\r\n-\r\n-    public void testNormalTransAndDataCacheModify() {\r\n-        coreTestTransAndChange(new performAsModify(), false, false);\r\n-    }\r\n-\r\n-    public void testLargeTransAndDataCacheDelete() {\r\n-        coreTestTransAndChange(new performAsDelete(), true, true);\r\n-    }\r\n-\r\n-    public void testLargeTransAndDataCacheModify() {\r\n-        coreTestTransAndChange(new performAsModify(), true, false);\r\n-    }\r\n-\r\n-    public void coreTestTransAndChange(ChangeOperation changeOperation,\r\n-        boolean asLargeTransaction, boolean isDelete) {\r\n-        // Create two pmfs in a cluster that are using RCPTCP.\r\n-        OpenJPAEntityManagerFactory pmfSender = createDistinctFactory(\r\n-            TCPRemoteCommitProvider.class,\r\n-            \"Port=5636, Addresses=127.0.0.1:6636\");\r\n-        OpenJPAEntityManagerFactory pmfReceiver = createDistinctFactory(\r\n-            TCPRemoteCommitProvider.class,\r\n-            \"Port=6636, Addresses=127.0.0.1:5636\");\r\n-        // Get the datacaches from each pmf\r\n-        DataCache dcSender =\r\n-            ((OpenJPAEntityManagerFactorySPI) pmfSender).getConfiguration()\r\n-                .getDataCacheManagerInstance().getSystemDataCache();\r\n-        DataCache dcReceiver =\r\n-            ((OpenJPAEntityManagerFactorySPI) pmfReceiver).getConfiguration()\r\n-                .getDataCacheManagerInstance().getSystemDataCache();\r\n-\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(RuntimeTest2.class);\r\n-\r\n-        _runtime1sOids = null;\r\n-        _runtime2sOids = null;\r\n-\r\n-        String transType = \"normal\";\r\n-        String rcpType = \"OIDs\";\r\n-        if (asLargeTransaction) {\r\n-            transType = \"large\";\r\n-            rcpType = \"classes\";\r\n-        }\r\n-        System.out.println(\"-------------------\");\r\n-        System.out\r\n-            .println(\r\n-                \"2 PMFs created, acting as a cluster using ports 5636 and 6636\");\r\n-        System.out.println(\"Testing scenario:\");\r\n-        System.out\r\n-            .println(\"  1 Seed datastore with instances of RuntimeTest1 AND \"\r\n-                + \"RuntimeTest2 objs.\\n\"\r\n-                + \"  2 pmf2 fills its cache with both sets of objs.\\n\"\r\n-                + \"  3 pmf1 does a \"\r\n-                + transType\r\n-                + \" tx that invokes an operation of \"\r\n-                + changeOperation.getName()\r\n-                + \" to affect a single Runtime1 \\n\"\r\n-                + \"    assert that both pmf1 and pmf2's data caches dropped all\"\r\n-                + \"Runtime1s\");\r\n-        System.out.println(\"Remote commit event is transmiting \" + rcpType);\r\n-\r\n-        // Create runtimes1s and 2s.\r\n-        // Noraml transaction\r\n-        OpenJPAEntityManager pmSender = (OpenJPAEntityManager) pmfSender\r\n-            .createEntityManager();\r\n-        seedDataStore(pmSender, NUM_OBJECTS);\r\n-        endEm(pmSender);\r\n-\r\n-        // wait a bit so they get stored\r\n-        pause(1);\r\n-\r\n-        OpenJPAEntityManager pm2;\r\n-        pm2 = (OpenJPAEntityManager) pmfReceiver.createEntityManager();\r\n-        performLoadAll(pm2);\r\n-        endEm(pm2);\r\n-\r\n-        pmSender = (OpenJPAEntityManager) pmfSender.createEntityManager();\r\n-        performLoadAll(pmSender);\r\n-        endEm(pmSender);\r\n-\r\n-        // assert that pmf2's data cache now has all the Runtime1 and 2s.\r\n-        for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-            assertTrue(dcReceiver.contains(\r\n-                Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-        }\r\n-        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n-            assertTrue(dcReceiver.contains(\r\n-                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n-        }\r\n-\r\n-        // Modify or delete exactly 1 RuntimeTest1 object during a\r\n-        // largeTransaction\r\n-        changeOperation.operation(pmfSender, asLargeTransaction);\r\n-\r\n-        // assert that pmf1's data cache now only has Runtime2 objects\r\n-        if (asLargeTransaction) {\r\n-            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-                assertFalse(dcSender.contains(\r\n-                    Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-            }\r\n-        } else {\r\n-            // Normal transaction\r\n-            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-                if (isDelete && i == 0) {\r\n-                    assertFalse(dcSender.contains(\r\n-                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-                } else {\r\n-                    // modified the first elemnt, which just updated it.\r\n-                    // (for Kodo's data cache).\r\n-                    assertTrue(dcSender.contains(\r\n-                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-                }\r\n-            }\r\n-        }\r\n-        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n-            assertTrue(dcSender.contains(\r\n-                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n-        }\r\n-        // wait a tiny bit so the rce propagates\r\n-        pause(2);\r\n-        // assert the pmf2's data cache also now only has Runtime2 objects\r\n-        if (asLargeTransaction) {\r\n-            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-                assertFalse(dcReceiver.contains(Id.newInstance(\r\n-                    RuntimeTest1.class, _runtime1sOids[i]))); //failing here\r\n-            }\r\n-        } else {\r\n-            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-                if (i == 0) {\r\n-                    assertFalse(dcReceiver.contains(Id.newInstance(\r\n-                        RuntimeTest1.class,\r\n-                        _runtime1sOids[i])));  //failing here\r\n-                } else {\r\n-                    assertTrue(dcReceiver.contains(\r\n-                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-                }\r\n-            }\r\n-        }\r\n-        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n-            assertTrue(dcReceiver.contains(\r\n-                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n-        }\r\n-\r\n-        // shutdown\r\n-        pmfSender.close();\r\n-        pmfReceiver.close();\r\n-    }\r\n-\r\n-    protected void performLoadAll(OpenJPAEntityManager pm)\r\n-    // load in (and thus cache) all the 1s and 2s\r\n-    {\r\n-        startTx(pm);\r\n-        RuntimeTest1 temp1;\r\n-        Collection runtime1s = (Collection) pm\r\n-            .createQuery(\"SELECT a FROM RuntimeTest1 a\").getResultList();\r\n-\r\n-        for (Iterator itr = runtime1s.iterator(); itr.hasNext();)\r\n-            temp1 = (RuntimeTest1) itr.next();\r\n-        RuntimeTest2 temp2;\r\n-        Collection runtime2s = (Collection) pm\r\n-            .createQuery(\"SELECT a FROM RuntimeTest2 a\").getResultList();\r\n-\r\n-        for (Iterator itr = runtime2s.iterator(); itr.hasNext();)\r\n-            temp2 = (RuntimeTest2) itr.next();\r\n-        endTx(pm);\r\n-    }\r\n-\r\n-    protected void seedDataStore(OpenJPAEntityManager pm, int numObjects) {\r\n-        startTx(pm);\r\n-        // create objects\r\n-        RuntimeTest1[] persistables = new RuntimeTest1[numObjects];\r\n-        _runtime1sOids = new Object[numObjects];\r\n-        for (int i = 0; i < persistables.length; i++) {\r\n-            persistables[i] = new RuntimeTest1(\"foo #\" + i, i);\r\n-            pm.persist(persistables[i]);\r\n-            _runtime1sOids[i] = pm.getObjectId(persistables[i]);\r\n-            if (i == 0) {\r\n-                persistables[i].setStringField(\"SpecialRuntimeTest1\");\r\n-                spec_oid = pm.getObjectId(persistables[i]);\r\n-            }\r\n-        }\r\n-        RuntimeTest2[] persistables2 = new RuntimeTest2[numObjects];\r\n-        _runtime2sOids = new Object[numObjects];\r\n-        for (int i = 0; i < persistables2.length; i++) {\r\n-            persistables2[i] = new RuntimeTest2(\"bar #\" + i, i);\r\n-            pm.persist(persistables2[i]);\r\n-            _runtime2sOids[i] = pm.getObjectId(persistables2[i]);\r\n-        }\r\n-        endTx(pm);\r\n-    }\r\n-\r\n-    static int _fetchGroupSerial = 0;\r\n-\r\n-    protected OpenJPAEntityManagerFactory createDistinctFactory(\r\n-        Class providerClass, String classProps1) {\r\n-        Map propsMap;\r\n-\r\n-        if (providerClass != null) {\r\n-            // This test is for the combination of RCP, largeTrans,\r\n-            // and Kodo's builtin DataCache.\r\n-            // use this property to differentiate the factory\r\n-\r\n-            propsMap = new HashMap();\r\n-            propsMap.put(\"openjpa.DataCache\", \"lru\");\r\n-            propsMap.put(\"openjpa.RemoteCommitProvider\", Configurations.getPlugin(\r\n-                providerClass.getName(), classProps1));\r\n-            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\r\n-                + _fetchGroupSerial);\r\n-        } else {\r\n-            // No RCP\r\n-            propsMap = new HashMap();\r\n-            propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\r\n-                + _fetchGroupSerial);\r\n-        }\r\n-        _fetchGroupSerial += 1;\r\n-\r\n-        return (OpenJPAEntityManagerFactory) getEmf(propsMap);\r\n-    }\r\n-\r\n-    private void pause(double seconds) {\r\n-        try {\r\n-            Thread.currentThread().yield();\r\n-            Thread.currentThread().sleep((int) seconds * 1000);\r\n-        }\r\n-        catch (Exception e) {\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- remove all Runteim1, and 2\r\n- create a few 1 and 2s\r\n- get them into the cache, assert\r\n- large transaction, and modify a runtime2, assert cache only has runtime1s\r\n-\r\n-\r\n- remove all Runteim1, and 2\r\n- create a few 1 and 2s\r\n- get them into the cache, assert\r\n- large transaction, delete a runtime2, assert cache only has runteime1s\r\n- */\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.event.TCPRemoteCommitProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.util.Id;\n+\n+public class TestDistributedKodoDataCache extends AbstractTestCase {\n+\n+    // We want more than 1 instance of each type of class.\n+    private static final int NUM_OBJECTS = 4;\n+\n+    private Object[] _runtime1sOids;\n+\n+    private Object[] _runtime2sOids;\n+\n+    private Object spec_oid;\n+\n+    public TestDistributedKodoDataCache(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(RuntimeTest2.class);\n+    }\n+\n+    private interface ChangeOperation {\n+\n+        public String getName();\n+\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\n+            boolean asLarge);\n+    }\n+\n+    private class performAsModify implements ChangeOperation {\n+\n+        public String getName() {\n+            return \"Modify SpecialRuntimeTest1\";\n+        }\n+\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\n+            boolean asLarge) {\n+            OpenJPAEntityManager pm;\n+            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\n+            if (asLarge)\n+                //pm.setLargeTransaction(true);\n+                pm.setTrackChangesByType(true);\n+            startTx(pm);\n+            RuntimeTest1 special = pm.find(RuntimeTest1.class, spec_oid);\n+            assertNotNull(special);\n+            special.setStringField(\"SpeicalRuntimeTest1_MODIFIED\");\n+\n+            endTx(pm);\n+            endEm(pm);\n+        }\n+    }\n+\n+    private class performAsDelete implements ChangeOperation {\n+\n+        public String getName() {\n+            return \"Delete SpecialRuntimeTest1\";\n+        }\n+\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\n+            boolean asLarge) {\n+            OpenJPAEntityManager pm;\n+            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\n+            if (asLarge)\n+                //pm.setLargeTransaction(true);\n+                pm.setTrackChangesByType(true);\n+            startTx(pm);\n+            RuntimeTest1 specialObj = pm.find(RuntimeTest1.class, spec_oid);\n+            assertNotNull(specialObj);\n+\n+            pm.remove(specialObj);\n+\n+            endTx(pm);\n+            endEm(pm);\n+        }\n+    }\n+\n+    public void testNormalTransAndDataCacheDelete() {\n+        coreTestTransAndChange(new performAsDelete(), false, true);\n+    }\n+\n+    public void testNormalTransAndDataCacheModify() {\n+        coreTestTransAndChange(new performAsModify(), false, false);\n+    }\n+\n+    public void testLargeTransAndDataCacheDelete() {\n+        coreTestTransAndChange(new performAsDelete(), true, true);\n+    }\n+\n+    public void testLargeTransAndDataCacheModify() {\n+        coreTestTransAndChange(new performAsModify(), true, false);\n+    }\n+\n+    public void coreTestTransAndChange(ChangeOperation changeOperation,\n+        boolean asLargeTransaction, boolean isDelete) {\n+        // Create two pmfs in a cluster that are using RCPTCP.\n+        OpenJPAEntityManagerFactory pmfSender = createDistinctFactory(\n+            TCPRemoteCommitProvider.class,\n+            \"Port=5636, Addresses=127.0.0.1:6636\");\n+        OpenJPAEntityManagerFactory pmfReceiver = createDistinctFactory(\n+            TCPRemoteCommitProvider.class,\n+            \"Port=6636, Addresses=127.0.0.1:5636\");\n+        // Get the datacaches from each pmf\n+        DataCache dcSender =\n+            ((OpenJPAEntityManagerFactorySPI) pmfSender).getConfiguration()\n+                .getDataCacheManagerInstance().getSystemDataCache();\n+        DataCache dcReceiver =\n+            ((OpenJPAEntityManagerFactorySPI) pmfReceiver).getConfiguration()\n+                .getDataCacheManagerInstance().getSystemDataCache();\n+\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(RuntimeTest2.class);\n+\n+        _runtime1sOids = null;\n+        _runtime2sOids = null;\n+\n+        String transType = \"normal\";\n+        String rcpType = \"OIDs\";\n+        if (asLargeTransaction) {\n+            transType = \"large\";\n+            rcpType = \"classes\";\n+        }\n+        System.out.println(\"-------------------\");\n+        System.out\n+            .println(\n+                \"2 PMFs created, acting as a cluster using ports 5636 and 6636\");\n+        System.out.println(\"Testing scenario:\");\n+        System.out\n+            .println(\"  1 Seed datastore with instances of RuntimeTest1 AND \"\n+                + \"RuntimeTest2 objs.\\n\"\n+                + \"  2 pmf2 fills its cache with both sets of objs.\\n\"\n+                + \"  3 pmf1 does a \"\n+                + transType\n+                + \" tx that invokes an operation of \"\n+                + changeOperation.getName()\n+                + \" to affect a single Runtime1 \\n\"\n+                + \"    assert that both pmf1 and pmf2's data caches dropped all\"\n+                + \"Runtime1s\");\n+        System.out.println(\"Remote commit event is transmiting \" + rcpType);\n+\n+        // Create runtimes1s and 2s.\n+        // Noraml transaction\n+        OpenJPAEntityManager pmSender = (OpenJPAEntityManager) pmfSender\n+            .createEntityManager();\n+        seedDataStore(pmSender, NUM_OBJECTS);\n+        endEm(pmSender);\n+\n+        // wait a bit so they get stored\n+        pause(1);\n+\n+        OpenJPAEntityManager pm2;\n+        pm2 = (OpenJPAEntityManager) pmfReceiver.createEntityManager();\n+        performLoadAll(pm2);\n+        endEm(pm2);\n+\n+        pmSender = (OpenJPAEntityManager) pmfSender.createEntityManager();\n+        performLoadAll(pmSender);\n+        endEm(pmSender);\n+\n+        // assert that pmf2's data cache now has all the Runtime1 and 2s.\n+        for (int i = 0; i < _runtime1sOids.length; i++) {\n+            assertTrue(dcReceiver.contains(\n+                Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+        }\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\n+            assertTrue(dcReceiver.contains(\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\n+        }\n+\n+        // Modify or delete exactly 1 RuntimeTest1 object during a\n+        // largeTransaction\n+        changeOperation.operation(pmfSender, asLargeTransaction);\n+\n+        // assert that pmf1's data cache now only has Runtime2 objects\n+        if (asLargeTransaction) {\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\n+                assertFalse(dcSender.contains(\n+                    Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+            }\n+        } else {\n+            // Normal transaction\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\n+                if (isDelete && i == 0) {\n+                    assertFalse(dcSender.contains(\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+                } else {\n+                    // modified the first elemnt, which just updated it.\n+                    // (for Kodo's data cache).\n+                    assertTrue(dcSender.contains(\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+                }\n+            }\n+        }\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\n+            assertTrue(dcSender.contains(\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\n+        }\n+        // wait a tiny bit so the rce propagates\n+        pause(2);\n+        // assert the pmf2's data cache also now only has Runtime2 objects\n+        if (asLargeTransaction) {\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\n+                assertFalse(dcReceiver.contains(Id.newInstance(\n+                    RuntimeTest1.class, _runtime1sOids[i]))); //failing here\n+            }\n+        } else {\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\n+                if (i == 0) {\n+                    assertFalse(dcReceiver.contains(Id.newInstance(\n+                        RuntimeTest1.class,\n+                        _runtime1sOids[i])));  //failing here\n+                } else {\n+                    assertTrue(dcReceiver.contains(\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+                }\n+            }\n+        }\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\n+            assertTrue(dcReceiver.contains(\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\n+        }\n+\n+        // shutdown\n+        pmfSender.close();\n+        pmfReceiver.close();\n+    }\n+\n+    protected void performLoadAll(OpenJPAEntityManager pm)\n+    // load in (and thus cache) all the 1s and 2s\n+    {\n+        startTx(pm);\n+        RuntimeTest1 temp1;\n+        Collection runtime1s = (Collection) pm\n+            .createQuery(\"SELECT a FROM RuntimeTest1 a\").getResultList();\n+\n+        for (Iterator itr = runtime1s.iterator(); itr.hasNext();)\n+            temp1 = (RuntimeTest1) itr.next();\n+        RuntimeTest2 temp2;\n+        Collection runtime2s = (Collection) pm\n+            .createQuery(\"SELECT a FROM RuntimeTest2 a\").getResultList();\n+\n+        for (Iterator itr = runtime2s.iterator(); itr.hasNext();)\n+            temp2 = (RuntimeTest2) itr.next();\n+        endTx(pm);\n+    }\n+\n+    protected void seedDataStore(OpenJPAEntityManager pm, int numObjects) {\n+        startTx(pm);\n+        // create objects\n+        RuntimeTest1[] persistables = new RuntimeTest1[numObjects];\n+        _runtime1sOids = new Object[numObjects];\n+        for (int i = 0; i < persistables.length; i++) {\n+            persistables[i] = new RuntimeTest1(\"foo #\" + i, i);\n+            pm.persist(persistables[i]);\n+            _runtime1sOids[i] = pm.getObjectId(persistables[i]);\n+            if (i == 0) {\n+                persistables[i].setStringField(\"SpecialRuntimeTest1\");\n+                spec_oid = pm.getObjectId(persistables[i]);\n+            }\n+        }\n+        RuntimeTest2[] persistables2 = new RuntimeTest2[numObjects];\n+        _runtime2sOids = new Object[numObjects];\n+        for (int i = 0; i < persistables2.length; i++) {\n+            persistables2[i] = new RuntimeTest2(\"bar #\" + i, i);\n+            pm.persist(persistables2[i]);\n+            _runtime2sOids[i] = pm.getObjectId(persistables2[i]);\n+        }\n+        endTx(pm);\n+    }\n+\n+    static int _fetchGroupSerial = 0;\n+\n+    protected OpenJPAEntityManagerFactory createDistinctFactory(\n+        Class providerClass, String classProps1) {\n+        Map propsMap;\n+\n+        if (providerClass != null) {\n+            // This test is for the combination of RCP, largeTrans,\n+            // and Kodo's builtin DataCache.\n+            // use this property to differentiate the factory\n+\n+            propsMap = new HashMap();\n+            propsMap.put(\"openjpa.DataCache\", \"lru\");\n+            propsMap.put(\"openjpa.RemoteCommitProvider\", Configurations.getPlugin(\n+                providerClass.getName(), classProps1));\n+            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\n+                + _fetchGroupSerial);\n+        } else {\n+            // No RCP\n+            propsMap = new HashMap();\n+            propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\n+                + _fetchGroupSerial);\n+        }\n+        _fetchGroupSerial += 1;\n+\n+        return (OpenJPAEntityManagerFactory) getEmf(propsMap);\n+    }\n+\n+    private void pause(double seconds) {\n+        try {\n+            Thread.currentThread().yield();\n+            Thread.currentThread().sleep((int) seconds * 1000);\n+        }\n+        catch (Exception e) {\n+        }\n+    }\n+}\n+\n+/*\n+ remove all Runteim1, and 2\n+ create a few 1 and 2s\n+ get them into the cache, assert\n+ large transaction, and modify a runtime2, assert cache only has runtime1s\n+\n+\n+ remove all Runteim1, and 2\n+ create a few 1 and 2s\n+ get them into the cache, assert\n+ large transaction, delete a runtime2, assert cache only has runteime1s\n+ */\n+"},{"sha":"80f024e4ad335f609fbd873193b3f512b23cf9da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,123 +1,123 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.StoreCacheImpl;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.EmbeddedEntity;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.EmbeddingOwnerEntity;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test removing members of embedded collection with active DataCache.\r\n- * \r\n- * Originally reported in \r\n- * <HREF=\"http://issues.apache.org/jira/browse/OPENJPA-625\">OPENJPA-625</A>\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class TestEmbeddedCollection extends SingleEMFTestCase {\r\n-\r\n-\tprivate static final int SIZE = 4;\r\n-\tprivate static OpenJPAEntityManagerFactorySPI emf = null;\r\n-\t/**\r\n-\t * Sets up EntityManagerFactory: with DataCache.\r\n-\t */\r\n-\tpublic void setUp() throws Exception {\r\n-\t\tif (emf == null) {\r\n-\t\t\tsuper.setUp(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\",\r\n-\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\r\n-\t\t\t\t\t\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\",\r\n-\t\t\t\t\t\"sjvm\", \"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n-\t\t\t\t\tEmbeddingOwnerEntity.class, \r\n-\t\t\t\t\tEmbeddedEntity.class,\r\n-\t\t\t\t\tCLEAR_TABLES);\r\n-\t\t\temf = super.emf;\r\n-\t\t\t\r\n-\t\t\tcreateData();\r\n-\t\t}\r\n-\t\tassertNotNull(emf);\r\n-\t\tassertNotNull(emf.getStoreCache());\r\n-\t\tassertTrue(isDataCacheActive(emf));\r\n-\t}\r\n-\r\n-\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\r\n-\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\r\n-\t\t\t\t&& emf.getConfiguration().getDataCacheManagerInstance()\r\n-\t\t\t\t\t\t.getSystemDataCache() != null;\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void tearDown() throws Exception {\r\n-\t\t\r\n-\t}\r\n-\t\r\n-\tpublic void createData() {\r\n-\t\tEmbeddingOwnerEntity owner = new EmbeddingOwnerEntity();\r\n-\t\tfor (int i = 0; i < SIZE; i++) {\r\n-\t\t\tEmbeddedEntity member = new EmbeddedEntity();\r\n-\t\t\tmember.setMarker(\"Member-\" + i);\r\n-\t\t\towner.addMember(member);\r\n-\t\t}\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.persist(owner);\r\n-\t\tem.getTransaction().commit();\r\n-\t\tObject id = OpenJPAPersistence.cast(em).getObjectId(owner);\r\n-\t\tem.clear();\r\n-\r\n-\t\tEmbeddingOwnerEntity test = em.find(EmbeddingOwnerEntity.class, id);\r\n-\t\tassertNotNull(test);\r\n-\t\tList<EmbeddedEntity> members = test.getMembers();\r\n-\t\tassertNotNull(members);\r\n-\t\tassertEquals(SIZE, members.size());\r\n-\t\tfor (int i = 0; i < SIZE; i++)\r\n-\t\t\tmembers.get(i).getMarker().equals(\"Member-\" + i);\r\n-\t}\r\n-\r\n-\tpublic void testRemoveMemberFromEmbeddedCollection() {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tList<EmbeddingOwnerEntity> result = em.createQuery(\r\n-\t\t\t\t\"SELECT p FROM EmbeddingOwnerEntity p\").getResultList();\r\n-\r\n-\t\tassertNotNull(result);\r\n-\t\tassertFalse(result.isEmpty());\r\n-\r\n-\t\tEmbeddingOwnerEntity owner = result.get(0);\r\n-\t\tObject id = owner.getId();\r\n-\t\t\r\n-\t\tassertTrue(emf.getStoreCache().contains(EmbeddingOwnerEntity.class, id));\r\n-\t\t\r\n-\t\tList<EmbeddedEntity> members = owner.getMembers();\r\n-\t\tmembers.remove(0);\r\n-\t\towner.removeMember(0);\r\n-\t\towner.removeMember(members.get(0));\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tassertEquals(owner.getMembers().size(), SIZE-3); \r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.StoreCacheImpl;\n+import org.apache.openjpa.persistence.datacache.common.apps.EmbeddedEntity;\n+import org.apache.openjpa.persistence.datacache.common.apps.EmbeddingOwnerEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test removing members of embedded collection with active DataCache.\n+ * \n+ * Originally reported in \n+ * <HREF=\"http://issues.apache.org/jira/browse/OPENJPA-625\">OPENJPA-625</A>\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestEmbeddedCollection extends SingleEMFTestCase {\n+\n+\tprivate static final int SIZE = 4;\n+\tprivate static OpenJPAEntityManagerFactorySPI emf = null;\n+\t/**\n+\t * Sets up EntityManagerFactory: with DataCache.\n+\t */\n+\tpublic void setUp() throws Exception {\n+\t\tif (emf == null) {\n+\t\t\tsuper.setUp(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\",\n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\n+\t\t\t\t\t\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\",\n+\t\t\t\t\t\"sjvm\", \"openjpa.jdbc.UpdateManager\", \"constraint\",\n+\t\t\t\t\tEmbeddingOwnerEntity.class, \n+\t\t\t\t\tEmbeddedEntity.class,\n+\t\t\t\t\tCLEAR_TABLES);\n+\t\t\temf = super.emf;\n+\t\t\t\n+\t\t\tcreateData();\n+\t\t}\n+\t\tassertNotNull(emf);\n+\t\tassertNotNull(emf.getStoreCache());\n+\t\tassertTrue(isDataCacheActive(emf));\n+\t}\n+\n+\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\n+\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\n+\t\t\t\t&& emf.getConfiguration().getDataCacheManagerInstance()\n+\t\t\t\t\t\t.getSystemDataCache() != null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void tearDown() throws Exception {\n+\t\t\n+\t}\n+\t\n+\tpublic void createData() {\n+\t\tEmbeddingOwnerEntity owner = new EmbeddingOwnerEntity();\n+\t\tfor (int i = 0; i < SIZE; i++) {\n+\t\t\tEmbeddedEntity member = new EmbeddedEntity();\n+\t\t\tmember.setMarker(\"Member-\" + i);\n+\t\t\towner.addMember(member);\n+\t\t}\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tem.persist(owner);\n+\t\tem.getTransaction().commit();\n+\t\tObject id = OpenJPAPersistence.cast(em).getObjectId(owner);\n+\t\tem.clear();\n+\n+\t\tEmbeddingOwnerEntity test = em.find(EmbeddingOwnerEntity.class, id);\n+\t\tassertNotNull(test);\n+\t\tList<EmbeddedEntity> members = test.getMembers();\n+\t\tassertNotNull(members);\n+\t\tassertEquals(SIZE, members.size());\n+\t\tfor (int i = 0; i < SIZE; i++)\n+\t\t\tmembers.get(i).getMarker().equals(\"Member-\" + i);\n+\t}\n+\n+\tpublic void testRemoveMemberFromEmbeddedCollection() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tList<EmbeddingOwnerEntity> result = em.createQuery(\n+\t\t\t\t\"SELECT p FROM EmbeddingOwnerEntity p\").getResultList();\n+\n+\t\tassertNotNull(result);\n+\t\tassertFalse(result.isEmpty());\n+\n+\t\tEmbeddingOwnerEntity owner = result.get(0);\n+\t\tObject id = owner.getId();\n+\t\t\n+\t\tassertTrue(emf.getStoreCache().contains(EmbeddingOwnerEntity.class, id));\n+\t\t\n+\t\tList<EmbeddedEntity> members = owner.getMembers();\n+\t\tmembers.remove(0);\n+\t\towner.removeMember(0);\n+\t\towner.removeMember(members.get(0));\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tassertEquals(owner.getMembers().size(), SIZE-3); \n+\t}\n+\n+}"},{"sha":"ae80be19ca2ab5c28141c59083d86491295b7fe6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,102 +1,102 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestFlushDataCache\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestFlushDataCache(String str) {\r\n-        super(str, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(FlushDataCacheObject.class);\r\n-    }\r\n-\r\n-    public void testQueryFlushPlusDataCache() {\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n-        //propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-\r\n-        try {\r\n-\r\n-            //assertEquals(Class.forName(\"openjpa.datacache.CacheTestBroker\",true,emf.getClass().getClassLoader()).getClassLoader(),emf.getClass().getClassLoader());\r\n-            //Thread.currentThread().setContextClassLoader(emf.getClass().getClassLoader());\r\n-            Class.forName(\"org.apache.openjpa.persistence.datacache.CacheTestBroker\", true,\r\n-                Thread.currentThread().getContextClassLoader());\r\n-        } catch (Exception e) {\r\n-\r\n-        }\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        startTx(em);\r\n-        FlushDataCacheObject o = new FlushDataCacheObject();\r\n-        o.setString(\"foo\");\r\n-        em.persist(o);\r\n-        endTx(em);\r\n-        //Object oid = JDOHelper.getObjectId (o);\r\n-        endEm(em);\r\n-\r\n-        em = emf.createEntityManager();\r\n-        startTx(em);\r\n-\r\n-        Collection c = (Collection) em.createQuery(\r\n-            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\r\n-                \" a where a.string = 'foo'\").getResultList();\r\n-\r\n-        assertEquals(1, c.size());\r\n-        em.remove(c.iterator().next());\r\n-\r\n-        c = (Collection) em.createQuery(\r\n-            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\r\n-                \" a where a.string = 'foo'\").getResultList();\r\n-        assertEquals(0, c.size());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testEmptyCommit() {\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        EntityManager em = emf.createEntityManager();\r\n-        startTx(em);\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestFlushDataCache\n+    extends AbstractTestCase {\n+\n+    public TestFlushDataCache(String str) {\n+        super(str, \"datacachecactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(FlushDataCacheObject.class);\n+    }\n+\n+    public void testQueryFlushPlusDataCache() {\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\n+        //propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\n+        EntityManagerFactory emf = getEmf(propsMap);\n+\n+        try {\n+\n+            //assertEquals(Class.forName(\"openjpa.datacache.CacheTestBroker\",true,emf.getClass().getClassLoader()).getClassLoader(),emf.getClass().getClassLoader());\n+            //Thread.currentThread().setContextClassLoader(emf.getClass().getClassLoader());\n+            Class.forName(\"org.apache.openjpa.persistence.datacache.CacheTestBroker\", true,\n+                Thread.currentThread().getContextClassLoader());\n+        } catch (Exception e) {\n+\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        startTx(em);\n+        FlushDataCacheObject o = new FlushDataCacheObject();\n+        o.setString(\"foo\");\n+        em.persist(o);\n+        endTx(em);\n+        //Object oid = JDOHelper.getObjectId (o);\n+        endEm(em);\n+\n+        em = emf.createEntityManager();\n+        startTx(em);\n+\n+        Collection c = (Collection) em.createQuery(\n+            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\n+                \" a where a.string = 'foo'\").getResultList();\n+\n+        assertEquals(1, c.size());\n+        em.remove(c.iterator().next());\n+\n+        c = (Collection) em.createQuery(\n+            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\n+                \" a where a.string = 'foo'\").getResultList();\n+        assertEquals(0, c.size());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testEmptyCommit() {\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        EntityManager em = emf.createEntityManager();\n+        startTx(em);\n+        endTx(em);\n+        endEm(em);\n+    }\n+}"},{"sha":"59735eb4e768df98ee960d5efae342de8057655d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","status":"modified","additions":134,"deletions":134,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,134 +1,134 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-\r\n-public class TestJPQL2Queries\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestJPQL2Queries(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectA.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-        Broker broker = _factory.newBroker();\r\n-        broker.begin();\r\n-        for (int i = 0; i < 50; i++)\r\n-            broker.persist(new CacheObjectAChild1(\"\", \"JPQL2Queries\", i),\r\n-                null);\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        try {\r\n-            _factory.close();\r\n-        } catch (Exception e) {\r\n-        }\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testUpperRange() {\r\n-        rangeTestHelper(0, 10);\r\n-    }\r\n-\r\n-    public void testLowerRange() {\r\n-        rangeTestHelper(5, 50);\r\n-    }\r\n-\r\n-    public void testBothRanges() {\r\n-        rangeTestHelper(20, 28);\r\n-    }\r\n-\r\n-    private void rangeTestHelper(final int start, final int end) {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setRange(start, end);\r\n-\r\n-        // should not yet be in the cache\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n-        Collection c = (Collection) q.execute();\r\n-\r\n-        // iterate the results. This will cause the query to be\r\n-        // enlisted in the cache.\r\n-        CacheTestHelper.iterate(c);\r\n-        assertEquals(end - start, c.size());\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        broker.close();\r\n-\r\n-        broker = _factory.newBroker();\r\n-        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setRange(start, end);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-        c = (Collection) q.execute();\r\n-        assertEquals(end - start, c.size());\r\n-\r\n-        // now check if a smaller range is in cache\r\n-        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setRange(start, end - 1);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n-        c = (Collection) q.execute();\r\n-        assertEquals(end - start - 1, c.size());\r\n-        broker.close();\r\n-    }\r\n-\r\n-    public void testResultClassIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setResultType(Object.class);\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+public class TestJPQL2Queries\n+    extends AbstractTestCase {\n+\n+    public TestJPQL2Queries(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectA.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+        Broker broker = _factory.newBroker();\n+        broker.begin();\n+        for (int i = 0; i < 50; i++)\n+            broker.persist(new CacheObjectAChild1(\"\", \"JPQL2Queries\", i),\n+                null);\n+        broker.commit();\n+        broker.close();\n+\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        try {\n+            _factory.close();\n+        } catch (Exception e) {\n+        }\n+\n+        super.tearDown();\n+    }\n+\n+    public void testUpperRange() {\n+        rangeTestHelper(0, 10);\n+    }\n+\n+    public void testLowerRange() {\n+        rangeTestHelper(5, 50);\n+    }\n+\n+    public void testBothRanges() {\n+        rangeTestHelper(20, 28);\n+    }\n+\n+    private void rangeTestHelper(final int start, final int end) {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setRange(start, end);\n+\n+        // should not yet be in the cache\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\n+        Collection c = (Collection) q.execute();\n+\n+        // iterate the results. This will cause the query to be\n+        // enlisted in the cache.\n+        CacheTestHelper.iterate(c);\n+        assertEquals(end - start, c.size());\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        broker.close();\n+\n+        broker = _factory.newBroker();\n+        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setRange(start, end);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+        c = (Collection) q.execute();\n+        assertEquals(end - start, c.size());\n+\n+        // now check if a smaller range is in cache\n+        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setRange(start, end - 1);\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\n+        c = (Collection) q.execute();\n+        assertEquals(end - start - 1, c.size());\n+        broker.close();\n+    }\n+\n+    public void testResultClassIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setResultType(Object.class);\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+    }\n+}"},{"sha":"d5e254a022018c3755db69defc6b323175830122","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","status":"modified","additions":472,"deletions":472,"changes":944,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,472 +1,472 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-public class TestJPQL2ResultsAndResultClasses\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestJPQL2ResultsAndResultClasses(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectA.class);\r\n-        deleteAll(CacheObjectWithExternalizedFields.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        EntityManagerFactory emf =\r\n-            getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-        Broker broker = _factory.newBroker();\r\n-        try {\r\n-            broker.begin();\r\n-        } catch (Exception e) {\r\n-            System.out.println(\r\n-                \"Exception in TestJPQL2ResultsAndResultClasses setup : \\n\" +\r\n-                    getStackTrace(e));\r\n-        }\r\n-\r\n-        int j = 0;\r\n-        for (int i = 0; i < 10; i++) {\r\n-            // make some common names so that GROUP BY is useful.\r\n-            if (i % 2 == 0)\r\n-                j++;\r\n-            CacheObjectA o;\r\n-            broker.persist(o = new CacheObjectAChild1(\"\", \"results-\" + j, i),\r\n-                null);\r\n-\r\n-            o.setDate(new Date());\r\n-            o.setDateArray(new Date[]{ new Date(10), new Date(20) });\r\n-\r\n-            if (i < 5)\r\n-                o.setRelatedB(new CacheObjectB());\r\n-        }\r\n-\r\n-        //Seetha Oct 30,2006\r\n-        //deleteAll closes the TX.  So use the local\r\n-        //deleteAll fn.\r\n-        //deleteAll(CacheObjectWithExternalizedFields.class,());\r\n-        //deleteAll(broker,CacheObjectWithExternalizedFields.class,true);\r\n-\r\n-        CacheObjectWithExternalizedFields o =\r\n-            new CacheObjectWithExternalizedFields();\r\n-        broker.persist(o, null);\r\n-        o.setCls(Broker.class);\r\n-\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        _factory.close();\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testAggregateResultIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        Object o = q.execute();\r\n-        assertEquals(Long.class, o.getClass());\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        o = q.execute();\r\n-        assertEquals(Long.class, o.getClass());\r\n-    }\r\n-\r\n-    public void testAggregateNonUniqueResultIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setUnique(false);\r\n-        List res = (List) q.execute();\r\n-        assertEquals(1, res.size());\r\n-        Object o = res.get(0);\r\n-        assertEquals(Long.class, o.getClass());\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        res = (List) q.execute();\r\n-        assertEquals(1, res.size());\r\n-        o = res.get(0);\r\n-        assertEquals(Long.class, o.getClass());\r\n-    }\r\n-\r\n-    public void testProjectionResultIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.age FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object o = c.iterator().next();\r\n-        assertEquals(Long.class, o.getClass());\r\n-    }\r\n-\r\n-    public void testProjectionOfThisIsCached() {\r\n-        // ##### need to test single projection\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        //CacheObjectAChild1.class, \"select this\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object o = c.iterator().next();\r\n-        assertEquals(CacheObjectAChild1.class, o.getClass());\r\n-        assertNotNull(broker.getObjectId(o));\r\n-    }\r\n-\r\n-    public void testProjectionResultWithThisIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertEquals(CacheObjectAChild1.class, result[1].getClass());\r\n-        assertNotNull(broker.getObjectId(result[1]));\r\n-    }\r\n-\r\n-    public void testNullProjectionValues() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.locale FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        assertNull(c.iterator().next());\r\n-    }\r\n-\r\n-    public void testNullAndNotNullProjectionValues() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker\r\n-                .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.locale FROM \" +\r\n-                    CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertNull(result[1]);\r\n-    }\r\n-\r\n-    public void XXXtestNullAggregateValues() {\r\n-        // ???\r\n-    }\r\n-\r\n-    public void testMultipleAggregateResultIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\r\n-                \"select max(a.age), avg(a.age), count(a.age) FROM \" +\r\n-                    CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        Object o = q.execute();\r\n-        assertEquals(Object[].class, o.getClass());\r\n-        assertEquals(3, ((Object[]) o).length);\r\n-        assertEquals(Long.class, ((Object[]) o)[0].getClass());\r\n-\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        o = q.execute();\r\n-        assertEquals(Object[].class, o.getClass());\r\n-        assertEquals(3, ((Object[]) o).length);\r\n-        assertEquals(Long.class, ((Object[]) o)[0].getClass());\r\n-    }\r\n-\r\n-    public void testFieldUsedTwice() {\r\n-        // Postgres bug\r\n-        Broker broker = _factory.newBroker();\r\n-        // group avoids postgres bug\r\n-        Query q = broker\r\n-            .newQuery(JPQLParser.LANG_JPQL, \"select a.age, avg(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a  group by a.age\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-    }\r\n-\r\n-    public void testAggregateAndProjection() {\r\n-        // Postgres bug\r\n-        Broker broker = _factory.newBroker();\r\n-        // group avoids postgres bug\r\n-        Query q = broker\r\n-            .newQuery(JPQLParser.LANG_JPQL, \"select a.name, avg(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a  group by a.name\");\r\n-\r\n-        List l = (List) q.execute();\r\n-        CacheTestHelper.iterate(l);\r\n-        assertEquals(Object[].class, l.get(0).getClass());\r\n-        assertEquals(2, ((Object[]) l.get(0)).length);\r\n-        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\r\n-\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        assertEquals(Object[].class, l.get(0).getClass());\r\n-        assertEquals(2, ((Object[]) l.get(0)).length);\r\n-        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\r\n-    }\r\n-\r\n-    //FIXME Seetha Dec 19,2006\r\n-    /*public void testMath() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\"select avg(a.age) FROM \"+\r\n-                    CacheObjectAChild1.class.getSimpleName()+\" a\");\r\n-        Number n = (Number) q.execute();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-        n = (Number) q.execute();\r\n-    }*/\r\n-\r\n-    public void testResultClassIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setResultType(Object.class);\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-    }\r\n-\r\n-    public void testGroupingIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a  group by a.name\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object o = c.iterator().next();\r\n-        assertEquals(Long.class, o.getClass());\r\n-    }\r\n-\r\n-    public void testAggregateProjectionGroupingIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\r\n-                \"select a.name, max(a.age) FROM \" +\r\n-                    CacheObjectAChild1.class.getSimpleName() +\r\n-                    \" a  group by a.name\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertEquals(Long.class, result[1].getClass());\r\n-    }\r\n-\r\n-    public void testUniqueResultsAreCachedAndConsistent() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a  where a.age =1\");\r\n-\r\n-        q.setUnique(true);\r\n-        CacheObjectAChild1 a = (CacheObjectAChild1) q.execute();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        CacheObjectAChild1 a2 = (CacheObjectAChild1) q.execute();\r\n-        assertTrue(a == a2);\r\n-    }\r\n-\r\n-    public void testMutableProjectionFieldsAreCopied() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.date FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a  where a.age=1\");\r\n-\r\n-        q.setUnique(true);\r\n-        Date d0 = (Date) q.execute(); // get it in cache\r\n-        Date d1 = (Date) q.execute();\r\n-        assertNotSame(d0, d1);\r\n-\r\n-        Date d2 = (Date) q.execute();\r\n-        assertNotSame(d1, d2);\r\n-    }\r\n-\r\n-    public void testArrayProjectionFieldsAreNotCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.dateArray FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        try {\r\n-            q.execute();\r\n-            fail(\"Allowed array projection query.\");\r\n-        } catch (Exception e) {\r\n-        }\r\n-    }\r\n-\r\n-    public void testCollectionProjectionFieldsAreNotCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.stringColl FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        try {\r\n-            q.execute();\r\n-            fail(\"Allowed array projection query.\");\r\n-        } catch (Exception e) {\r\n-        }\r\n-    }\r\n-\r\n-    public void testExternalizedSingleValueFieldIsNotCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.cls FROM \" +\r\n-            CacheObjectWithExternalizedFields.class.getSimpleName() + \" a\");\r\n-\r\n-        q.setUnique(true);\r\n-        Object o = q.execute(); // get it in cache\r\n-        // ##### assertEquals (Class.class, o);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n-    }\r\n-\r\n-    public void testMutatedQueryReturnsNewResults() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\r\n-                \"select a.name, max(a.age) FROM \" +\r\n-                    CacheObjectAChild1.class.getSimpleName() +\r\n-                    \" a group by a.name\");\r\n-\r\n-        List l = (List) q.execute();\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        Object[] result = (Object[]) l.get(0);\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertEquals(Long.class, result[1].getClass());\r\n-\r\n-        // now, mutate the query and see what happens\r\n-        q.setQuery(\"select max(a.age),a.name FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a group by a.name\");\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n-        l = (List) q.execute();\r\n-        result = (Object[]) l.get(0);\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(Long.class, result[0].getClass());\r\n-        assertEquals(String.class, result[1].getClass());\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        result = (Object[]) l.get(0);\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(Long.class, result[0].getClass());\r\n-        assertEquals(String.class, result[1].getClass());\r\n-    }\r\n-\r\n-    public void XXXtestExternalizedContainerFieldIsExternalized() {\r\n-    }\r\n-\r\n-    public void XXXtestSerializedSingleValueFieldIsSerialized() {\r\n-    }\r\n-\r\n-    public void XXXtestSerializedContainerFieldIsSerialized() {\r\n-    }\r\n-\r\n-    public void XXXtestCustomMappedSingleValueFieldIsHandled() {\r\n-    }\r\n-\r\n-    public void XXXtestCustomMappedContainerFieldIsHandled() {\r\n-    }\r\n-\r\n-    private static int deleteAll(Broker broker, Class clazz,\r\n-        boolean subclasses) {\r\n-        final boolean useDeleteByQuery = false;\r\n-\r\n-        if (useDeleteByQuery) {\r\n-            org.apache.openjpa.kernel.Query query =\r\n-                broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-                    clazz.getSimpleName() + \" a\");\r\n-            query.setCandidateType(clazz, subclasses);\r\n-            return (int) query.deleteAll();\r\n-        } else {\r\n-            org.apache.openjpa.kernel.Extent extent =\r\n-                broker.newExtent(clazz, subclasses);\r\n-            List list = extent.list();\r\n-            int size = list.size();\r\n-            broker.deleteAll(list, null);\r\n-            return size;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+public class TestJPQL2ResultsAndResultClasses\n+    extends AbstractTestCase {\n+\n+    public TestJPQL2ResultsAndResultClasses(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectA.class);\n+        deleteAll(CacheObjectWithExternalizedFields.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        EntityManagerFactory emf =\n+            getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+        Broker broker = _factory.newBroker();\n+        try {\n+            broker.begin();\n+        } catch (Exception e) {\n+            System.out.println(\n+                \"Exception in TestJPQL2ResultsAndResultClasses setup : \\n\" +\n+                    getStackTrace(e));\n+        }\n+\n+        int j = 0;\n+        for (int i = 0; i < 10; i++) {\n+            // make some common names so that GROUP BY is useful.\n+            if (i % 2 == 0)\n+                j++;\n+            CacheObjectA o;\n+            broker.persist(o = new CacheObjectAChild1(\"\", \"results-\" + j, i),\n+                null);\n+\n+            o.setDate(new Date());\n+            o.setDateArray(new Date[]{ new Date(10), new Date(20) });\n+\n+            if (i < 5)\n+                o.setRelatedB(new CacheObjectB());\n+        }\n+\n+        //Seetha Oct 30,2006\n+        //deleteAll closes the TX.  So use the local\n+        //deleteAll fn.\n+        //deleteAll(CacheObjectWithExternalizedFields.class,());\n+        //deleteAll(broker,CacheObjectWithExternalizedFields.class,true);\n+\n+        CacheObjectWithExternalizedFields o =\n+            new CacheObjectWithExternalizedFields();\n+        broker.persist(o, null);\n+        o.setCls(Broker.class);\n+\n+        broker.commit();\n+        broker.close();\n+\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        _factory.close();\n+\n+        super.tearDown();\n+    }\n+\n+    public void testAggregateResultIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        Object o = q.execute();\n+        assertEquals(Long.class, o.getClass());\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        o = q.execute();\n+        assertEquals(Long.class, o.getClass());\n+    }\n+\n+    public void testAggregateNonUniqueResultIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setUnique(false);\n+        List res = (List) q.execute();\n+        assertEquals(1, res.size());\n+        Object o = res.get(0);\n+        assertEquals(Long.class, o.getClass());\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        res = (List) q.execute();\n+        assertEquals(1, res.size());\n+        o = res.get(0);\n+        assertEquals(Long.class, o.getClass());\n+    }\n+\n+    public void testProjectionResultIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.age FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object o = c.iterator().next();\n+        assertEquals(Long.class, o.getClass());\n+    }\n+\n+    public void testProjectionOfThisIsCached() {\n+        // ##### need to test single projection\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        //CacheObjectAChild1.class, \"select this\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object o = c.iterator().next();\n+        assertEquals(CacheObjectAChild1.class, o.getClass());\n+        assertNotNull(broker.getObjectId(o));\n+    }\n+\n+    public void testProjectionResultWithThisIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertEquals(CacheObjectAChild1.class, result[1].getClass());\n+        assertNotNull(broker.getObjectId(result[1]));\n+    }\n+\n+    public void testNullProjectionValues() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.locale FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        assertNull(c.iterator().next());\n+    }\n+\n+    public void testNullAndNotNullProjectionValues() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker\n+                .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.locale FROM \" +\n+                    CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertNull(result[1]);\n+    }\n+\n+    public void XXXtestNullAggregateValues() {\n+        // ???\n+    }\n+\n+    public void testMultipleAggregateResultIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\n+                \"select max(a.age), avg(a.age), count(a.age) FROM \" +\n+                    CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        Object o = q.execute();\n+        assertEquals(Object[].class, o.getClass());\n+        assertEquals(3, ((Object[]) o).length);\n+        assertEquals(Long.class, ((Object[]) o)[0].getClass());\n+\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        o = q.execute();\n+        assertEquals(Object[].class, o.getClass());\n+        assertEquals(3, ((Object[]) o).length);\n+        assertEquals(Long.class, ((Object[]) o)[0].getClass());\n+    }\n+\n+    public void testFieldUsedTwice() {\n+        // Postgres bug\n+        Broker broker = _factory.newBroker();\n+        // group avoids postgres bug\n+        Query q = broker\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.age, avg(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a  group by a.age\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+    }\n+\n+    public void testAggregateAndProjection() {\n+        // Postgres bug\n+        Broker broker = _factory.newBroker();\n+        // group avoids postgres bug\n+        Query q = broker\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.name, avg(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a  group by a.name\");\n+\n+        List l = (List) q.execute();\n+        CacheTestHelper.iterate(l);\n+        assertEquals(Object[].class, l.get(0).getClass());\n+        assertEquals(2, ((Object[]) l.get(0)).length);\n+        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\n+\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        assertEquals(Object[].class, l.get(0).getClass());\n+        assertEquals(2, ((Object[]) l.get(0)).length);\n+        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\n+    }\n+\n+    //FIXME Seetha Dec 19,2006\n+    /*public void testMath() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\"select avg(a.age) FROM \"+\n+                    CacheObjectAChild1.class.getSimpleName()+\" a\");\n+        Number n = (Number) q.execute();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+        n = (Number) q.execute();\n+    }*/\n+\n+    public void testResultClassIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setResultType(Object.class);\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+    }\n+\n+    public void testGroupingIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a  group by a.name\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object o = c.iterator().next();\n+        assertEquals(Long.class, o.getClass());\n+    }\n+\n+    public void testAggregateProjectionGroupingIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\n+                \"select a.name, max(a.age) FROM \" +\n+                    CacheObjectAChild1.class.getSimpleName() +\n+                    \" a  group by a.name\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertEquals(Long.class, result[1].getClass());\n+    }\n+\n+    public void testUniqueResultsAreCachedAndConsistent() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a  where a.age =1\");\n+\n+        q.setUnique(true);\n+        CacheObjectAChild1 a = (CacheObjectAChild1) q.execute();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        CacheObjectAChild1 a2 = (CacheObjectAChild1) q.execute();\n+        assertTrue(a == a2);\n+    }\n+\n+    public void testMutableProjectionFieldsAreCopied() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.date FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a  where a.age=1\");\n+\n+        q.setUnique(true);\n+        Date d0 = (Date) q.execute(); // get it in cache\n+        Date d1 = (Date) q.execute();\n+        assertNotSame(d0, d1);\n+\n+        Date d2 = (Date) q.execute();\n+        assertNotSame(d1, d2);\n+    }\n+\n+    public void testArrayProjectionFieldsAreNotCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.dateArray FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        try {\n+            q.execute();\n+            fail(\"Allowed array projection query.\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testCollectionProjectionFieldsAreNotCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.stringColl FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        try {\n+            q.execute();\n+            fail(\"Allowed array projection query.\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testExternalizedSingleValueFieldIsNotCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.cls FROM \" +\n+            CacheObjectWithExternalizedFields.class.getSimpleName() + \" a\");\n+\n+        q.setUnique(true);\n+        Object o = q.execute(); // get it in cache\n+        // ##### assertEquals (Class.class, o);\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\n+    }\n+\n+    public void testMutatedQueryReturnsNewResults() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\n+                \"select a.name, max(a.age) FROM \" +\n+                    CacheObjectAChild1.class.getSimpleName() +\n+                    \" a group by a.name\");\n+\n+        List l = (List) q.execute();\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        Object[] result = (Object[]) l.get(0);\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertEquals(Long.class, result[1].getClass());\n+\n+        // now, mutate the query and see what happens\n+        q.setQuery(\"select max(a.age),a.name FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a group by a.name\");\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\n+        l = (List) q.execute();\n+        result = (Object[]) l.get(0);\n+        assertEquals(2, result.length);\n+        assertEquals(Long.class, result[0].getClass());\n+        assertEquals(String.class, result[1].getClass());\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        result = (Object[]) l.get(0);\n+        assertEquals(2, result.length);\n+        assertEquals(Long.class, result[0].getClass());\n+        assertEquals(String.class, result[1].getClass());\n+    }\n+\n+    public void XXXtestExternalizedContainerFieldIsExternalized() {\n+    }\n+\n+    public void XXXtestSerializedSingleValueFieldIsSerialized() {\n+    }\n+\n+    public void XXXtestSerializedContainerFieldIsSerialized() {\n+    }\n+\n+    public void XXXtestCustomMappedSingleValueFieldIsHandled() {\n+    }\n+\n+    public void XXXtestCustomMappedContainerFieldIsHandled() {\n+    }\n+\n+    private static int deleteAll(Broker broker, Class clazz,\n+        boolean subclasses) {\n+        final boolean useDeleteByQuery = false;\n+\n+        if (useDeleteByQuery) {\n+            org.apache.openjpa.kernel.Query query =\n+                broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+                    clazz.getSimpleName() + \" a\");\n+            query.setCandidateType(clazz, subclasses);\n+            return (int) query.deleteAll();\n+        } else {\n+            org.apache.openjpa.kernel.Extent extent =\n+                broker.newExtent(clazz, subclasses);\n+            List list = extent.list();\n+            int size = list.size();\n+            broker.deleteAll(list, null);\n+            return size;\n+        }\n+    }\n+}"},{"sha":"65eb511b042211eb69e1798a10173a42f2055364","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","status":"modified","additions":219,"deletions":219,"changes":438,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,219 +1,219 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-public class TestJPQLRelationProjections\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestJPQLRelationProjections(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectJ.class);\r\n-        deleteAll(CacheObjectE.class);\r\n-        deleteAll(SelfReferencingCacheTestObject.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-        Broker broker = _factory.newBroker();\r\n-        try {\r\n-            broker.begin();\r\n-        } catch (Exception e) {\r\n-            fail(\"Set up failed due to exception : \\n\" +\r\n-                getStackTrace(e));\r\n-        }\r\n-        int j = 0;\r\n-        for (int i = 0; i < 6; i++) {\r\n-            CacheObjectE e;\r\n-            if (i < 3)\r\n-                e = new CacheObjectE(i + \"\");\r\n-            else\r\n-                e = null;\r\n-\r\n-            // make some common names so that GROUP BY is useful.\r\n-            if (i % 2 == 0)\r\n-                j++;\r\n-            broker.persist(new CacheObjectJ(\"projections-\" + j, e), null);\r\n-        }\r\n-\r\n-        broker.persist(new SelfReferencingCacheTestObject(\"foo\",\r\n-            new SelfReferencingCacheTestObject(\"bar\", null)), null);\r\n-\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        _factory.close();\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testNullRelatedPCIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\r\n-            CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        assertNull(c.iterator().next());\r\n-    }\r\n-\r\n-    public void testNullRelatedPCAndProjectionIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\r\n-                CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertNull(result[1]);\r\n-    }\r\n-\r\n-    public void testNonNullRelatedPCIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\r\n-            CacheObjectJ.class.getSimpleName() + \" a where a.e  is not null\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        assertEquals(CacheObjectE.class, c.iterator().next().getClass());\r\n-    }\r\n-\r\n-    public void testNonNullRelatedPCAndProjectionIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\r\n-                CacheObjectJ.class.getSimpleName() +\r\n-                \" a where a.e is not null\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertEquals(CacheObjectE.class, result[1].getClass());\r\n-    }\r\n-\r\n-    public void testEmbeddedFields() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select embedded FROM \" +\r\n-                SelfReferencingCacheTestObject.class.getSimpleName() +\r\n-                \" a where a.str='foo'\");\r\n-\r\n-        List l = null;\r\n-        try {\r\n-            l = (List) q.execute();\r\n-            assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\r\n-        } catch (UserException ue) {\r\n-            //bug(1150, \"embedded-field projections cause exception\");\r\n-            ue.printStackTrace();\r\n-            return;\r\n-        }\r\n-\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\r\n-    }\r\n-\r\n-    public void testNonNullRelationOfSameTypeAsCandidate() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\r\n-            SelfReferencingCacheTestObject.class.getSimpleName() +\r\n-            \" a where a.o IS NOT NULL\");\r\n-\r\n-        List l = (List) q.execute();\r\n-        assertEquals(SelfReferencingCacheTestObject.class,\r\n-            l.get(0).getClass());\r\n-        assertEquals(\"bar\",\r\n-            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        assertEquals(SelfReferencingCacheTestObject.class,\r\n-            l.get(0).getClass());\r\n-        assertEquals(\"bar\",\r\n-            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\r\n-    }\r\n-\r\n-    public void testNullRelationOfSameTypeAsCandidate() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\r\n-            SelfReferencingCacheTestObject.class.getSimpleName() +\r\n-            \" a where a.o IS NULL\");\r\n-\r\n-        List l = (List) q.execute();\r\n-        assertNull(l.get(0));\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        assertNull(l.get(0));\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\n+import org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.util.UserException;\n+\n+public class TestJPQLRelationProjections\n+    extends AbstractTestCase {\n+\n+    public TestJPQLRelationProjections(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectJ.class);\n+        deleteAll(CacheObjectE.class);\n+        deleteAll(SelfReferencingCacheTestObject.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+        Broker broker = _factory.newBroker();\n+        try {\n+            broker.begin();\n+        } catch (Exception e) {\n+            fail(\"Set up failed due to exception : \\n\" +\n+                getStackTrace(e));\n+        }\n+        int j = 0;\n+        for (int i = 0; i < 6; i++) {\n+            CacheObjectE e;\n+            if (i < 3)\n+                e = new CacheObjectE(i + \"\");\n+            else\n+                e = null;\n+\n+            // make some common names so that GROUP BY is useful.\n+            if (i % 2 == 0)\n+                j++;\n+            broker.persist(new CacheObjectJ(\"projections-\" + j, e), null);\n+        }\n+\n+        broker.persist(new SelfReferencingCacheTestObject(\"foo\",\n+            new SelfReferencingCacheTestObject(\"bar\", null)), null);\n+\n+        broker.commit();\n+        broker.close();\n+\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        _factory.close();\n+\n+        super.tearDown();\n+    }\n+\n+    public void testNullRelatedPCIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\n+            CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        assertNull(c.iterator().next());\n+    }\n+\n+    public void testNullRelatedPCAndProjectionIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertNull(result[1]);\n+    }\n+\n+    public void testNonNullRelatedPCIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\n+            CacheObjectJ.class.getSimpleName() + \" a where a.e  is not null\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        assertEquals(CacheObjectE.class, c.iterator().next().getClass());\n+    }\n+\n+    public void testNonNullRelatedPCAndProjectionIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\n+                CacheObjectJ.class.getSimpleName() +\n+                \" a where a.e is not null\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertEquals(CacheObjectE.class, result[1].getClass());\n+    }\n+\n+    public void testEmbeddedFields() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select embedded FROM \" +\n+                SelfReferencingCacheTestObject.class.getSimpleName() +\n+                \" a where a.str='foo'\");\n+\n+        List l = null;\n+        try {\n+            l = (List) q.execute();\n+            assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\n+        } catch (UserException ue) {\n+            //bug(1150, \"embedded-field projections cause exception\");\n+            ue.printStackTrace();\n+            return;\n+        }\n+\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\n+    }\n+\n+    public void testNonNullRelationOfSameTypeAsCandidate() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\n+            SelfReferencingCacheTestObject.class.getSimpleName() +\n+            \" a where a.o IS NOT NULL\");\n+\n+        List l = (List) q.execute();\n+        assertEquals(SelfReferencingCacheTestObject.class,\n+            l.get(0).getClass());\n+        assertEquals(\"bar\",\n+            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        assertEquals(SelfReferencingCacheTestObject.class,\n+            l.get(0).getClass());\n+        assertEquals(\"bar\",\n+            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\n+    }\n+\n+    public void testNullRelationOfSameTypeAsCandidate() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\n+            SelfReferencingCacheTestObject.class.getSimpleName() +\n+            \" a where a.o IS NULL\");\n+\n+        List l = (List) q.execute();\n+        assertNull(l.get(0));\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        assertNull(l.get(0));\n+    }\n+}"},{"sha":"660f726002cc0885081b571b99e0d0fab1f01177","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Test the local cache. Tests only a single PMF.\r\n- */\r\n-public class TestLocalCache\r\n-    extends CacheTest {\r\n-\r\n-    public TestLocalCache(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return new String[]{\r\n-            \"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.QueryCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return new String[]{\r\n-            \"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.QueryCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Test the local cache. Tests only a single PMF.\n+ */\n+public class TestLocalCache\n+    extends CacheTest {\n+\n+    public TestLocalCache(String test) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return new String[]{\n+            \"openjpa.DataCache\", \"true\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+\n+    protected String[] getConfs2() {\n+        return new String[]{\n+            \"openjpa.DataCache\", \"true\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+}"},{"sha":"20ce60eeba563bf990fda171e4e03cfdee0d2799","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","status":"modified","additions":172,"deletions":172,"changes":344,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,172 +1,172 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-public class TestMutableParameters\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestMutableParameters(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-    private Date _startDate;\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        deleteAll(CacheObjectA.class);\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-\r\n-        // create a very early date so that when we mutate it, we\r\n-        // won't need to worry about precision issues.\r\n-        _startDate = new java.text.SimpleDateFormat(\"dd/MM/yyyy\").\r\n-            parse(\"01/01/1990\");\r\n-        Broker broker = _factory.newBroker();\r\n-        broker.begin();\r\n-        for (int i = 0; i < 50; i++) {\r\n-            CacheObjectAChild1 o = new CacheObjectAChild1\r\n-                (\"\", \"JPQL2Queries\", i);\r\n-            o.setDate(_startDate);\r\n-            broker.persist(o, null);\r\n-        }\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        try {\r\n-            _factory.close();\r\n-        } catch (Exception e) {\r\n-        }\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testMutatedDateParameter() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n-            \"select a from \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a where a.date < :p_date\");\r\n-        Date d = new Date();\r\n-        Collection c = (Collection) q.execute(new Object[]{ d });\r\n-        CacheTestHelper.iterate(c);\r\n-        int initialSize = c.size();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n-            new Object[]{ d });\r\n-        d.setTime(_startDate.getTime());\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n-            new Object[]{ d });\r\n-        c = (Collection) q.execute(new Object[]{ d });\r\n-\r\n-        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\r\n-    }\r\n-\r\n-    //FIXME Seetha Nov 10,2006\r\n-    //need to find the JPQL query for :p_age contains\r\n-    /*\r\n-    public void testMutatedSetParameter() {\r\n-        mutatedCollectionParameterHelper(true);\r\n-    }\r\n-\r\n-    public void testMutatedListParameter() {\r\n-        mutatedCollectionParameterHelper(false);\r\n-    }\r\n-\r\n-    public void mutatedCollectionParameterHelper(boolean set) {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\r\n-                    \"select a from \"+\r\n-                    CacheObjectAChild1.class.getSimpleName()+ \"a :p_ages.contains (age)\");\r\n-        Collection c_param;\r\n-        if (set)\r\n-            c_param = new HashSet();\r\n-        else\r\n-            c_param = new LinkedList();\r\n-        c_param.add(new Long(0));\r\n-        c_param.add(new Long(1));\r\n-        Collection c = (Collection) q.execute(new Object[]{ c_param });\r\n-        CacheTestHelper.iterate(c);\r\n-        int initialSize = c.size();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n-            new Object[]{ c_param });\r\n-        c_param.add(new Long(2));\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n-            new Object[]{ c_param });\r\n-        c = (Collection) q.execute(new Object[]{ c_param });\r\n-        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\r\n-    }\r\n-\r\n-    public void testMutatedSetParameterDates() {\r\n-        mutatedCollectionParameterDatesHelper(true);\r\n-    }\r\n-\r\n-    public void testMutatedListParameterDates() {\r\n-        mutatedCollectionParameterDatesHelper(false);\r\n-    }\r\n-\r\n-    public void mutatedCollectionParameterDatesHelper(boolean set) {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, CacheObjectAChild1.class,\r\n-                \":p_dates.contains (date)\");\r\n-        Collection c_param;\r\n-        if (set)\r\n-            c_param = new HashSet();\r\n-        else\r\n-            c_param = new LinkedList();\r\n-        c_param.add(new Date());\r\n-        c_param.add(new Date(System.currentTimeMillis() - 1000));\r\n-        Collection c = (Collection) q.execute(new Object[]{ c_param });\r\n-        CacheTestHelper.iterate(c);\r\n-        int initialSize = c.size();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n-            new Object[]{ c_param });\r\n-        c_param.add(new Date(System.currentTimeMillis() - 500));\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n-            new Object[]{ c_param });\r\n-    }*/\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+public class TestMutableParameters\n+    extends AbstractTestCase {\n+\n+    public TestMutableParameters(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+    private Date _startDate;\n+\n+    public void setUp()\n+        throws Exception {\n+        deleteAll(CacheObjectA.class);\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+\n+        // create a very early date so that when we mutate it, we\n+        // won't need to worry about precision issues.\n+        _startDate = new java.text.SimpleDateFormat(\"dd/MM/yyyy\").\n+            parse(\"01/01/1990\");\n+        Broker broker = _factory.newBroker();\n+        broker.begin();\n+        for (int i = 0; i < 50; i++) {\n+            CacheObjectAChild1 o = new CacheObjectAChild1\n+                (\"\", \"JPQL2Queries\", i);\n+            o.setDate(_startDate);\n+            broker.persist(o, null);\n+        }\n+        broker.commit();\n+        broker.close();\n+\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        try {\n+            _factory.close();\n+        } catch (Exception e) {\n+        }\n+\n+        super.tearDown();\n+    }\n+\n+    public void testMutatedDateParameter() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\n+            \"select a from \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a where a.date < :p_date\");\n+        Date d = new Date();\n+        Collection c = (Collection) q.execute(new Object[]{ d });\n+        CacheTestHelper.iterate(c);\n+        int initialSize = c.size();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\n+            new Object[]{ d });\n+        d.setTime(_startDate.getTime());\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\n+            new Object[]{ d });\n+        c = (Collection) q.execute(new Object[]{ d });\n+\n+        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\n+    }\n+\n+    //FIXME Seetha Nov 10,2006\n+    //need to find the JPQL query for :p_age contains\n+    /*\n+    public void testMutatedSetParameter() {\n+        mutatedCollectionParameterHelper(true);\n+    }\n+\n+    public void testMutatedListParameter() {\n+        mutatedCollectionParameterHelper(false);\n+    }\n+\n+    public void mutatedCollectionParameterHelper(boolean set) {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\n+                    \"select a from \"+\n+                    CacheObjectAChild1.class.getSimpleName()+ \"a :p_ages.contains (age)\");\n+        Collection c_param;\n+        if (set)\n+            c_param = new HashSet();\n+        else\n+            c_param = new LinkedList();\n+        c_param.add(new Long(0));\n+        c_param.add(new Long(1));\n+        Collection c = (Collection) q.execute(new Object[]{ c_param });\n+        CacheTestHelper.iterate(c);\n+        int initialSize = c.size();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\n+            new Object[]{ c_param });\n+        c_param.add(new Long(2));\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\n+            new Object[]{ c_param });\n+        c = (Collection) q.execute(new Object[]{ c_param });\n+        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\n+    }\n+\n+    public void testMutatedSetParameterDates() {\n+        mutatedCollectionParameterDatesHelper(true);\n+    }\n+\n+    public void testMutatedListParameterDates() {\n+        mutatedCollectionParameterDatesHelper(false);\n+    }\n+\n+    public void mutatedCollectionParameterDatesHelper(boolean set) {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, CacheObjectAChild1.class,\n+                \":p_dates.contains (date)\");\n+        Collection c_param;\n+        if (set)\n+            c_param = new HashSet();\n+        else\n+            c_param = new LinkedList();\n+        c_param.add(new Date());\n+        c_param.add(new Date(System.currentTimeMillis() - 1000));\n+        Collection c = (Collection) q.execute(new Object[]{ c_param });\n+        CacheTestHelper.iterate(c);\n+        int initialSize = c.size();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\n+            new Object[]{ c_param });\n+        c_param.add(new Date(System.currentTimeMillis() - 500));\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\n+            new Object[]{ c_param });\n+    }*/\n+}"},{"sha":"967c95b882d7744b172ad4a362a8796cff51df68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,115 +1,115 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Defined ordering is only applied when the collection is loaded from the datastore.\r\n- * It is not maintained by Openjpa as you modify the collection in memory. \r\n- * Openjpa invalid data cache in case the persistence operation may result cache in wrong order.\r\n- * This test suite tests various cases for the above problem.\r\n- */\r\n-public class TestOrderbyInDataCache extends SingleEMFTestCase {\r\n-\tprivate long pid;\r\n-    public void setUp() {\r\n-        setUp(\"openjpa.DataCache\", \"true\", \r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\", \r\n-            OrderedOneManyParent.class,\r\n-            OrderedOneManyChild.class, CLEAR_TABLES);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OrderedOneManyParent prt = new OrderedOneManyParent();\r\n-        prt.setName(\"Maria\");\r\n-        em.persist(prt);\r\n-        //insert child in reverse order\r\n-        for (int i = 4; i > 1; i--) {\r\n-        \tOrderedOneManyChild child = new OrderedOneManyChild();\r\n-            child.setId(i);\r\n-            child.setName(\"child\" + i);\r\n-            child.setParent(prt);\r\n-            prt.getChildren().add(child);\r\n-            em.persist(child);\r\n-        }        \r\n-        em.getTransaction().commit();\r\n-        pid = prt.getId();\r\n-        em.close();\r\n-    }\r\n-\r\n-    /**\r\n-     * Test if child list is in order after new child list is added in setup().\r\n-     *\r\n-     */\r\n-    public void testGetChildList(){\r\n-    \tEntityManager em = emf.createEntityManager();\r\n-    \tOrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n-        assertEquals(3, prt.getChildren().size());\r\n-        //the order should be \"child2\", \"child3\", \"child4\"\r\n-        for (int i = 1; i < 4; i++) {\r\n-            assertEquals(\"child\" + (i + 1), prt.getChildren().\r\n-                get(i-1).getName());\r\n-        }   \r\n-        em.close();\r\n-    }\r\n-    \r\n-    public void testInsertChild() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n-        OrderedOneManyChild child = new OrderedOneManyChild();\r\n-        child.setId(1);\r\n-        child.setName(\"child1\");\r\n-        child.setParent(prt);\r\n-        prt.getChildren().add(child);\r\n-        em.persist(child);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-        \r\n-        //obtain object in new persistence context\r\n-        em = emf.createEntityManager();\r\n-        prt = em.find(OrderedOneManyParent.class, pid);\r\n-        assertEquals(4, prt.getChildren().size());\r\n-        //the order should be \"child1\", \"child2\", \"child3\", \"child4\"\r\n-        for (int i = 1; i < 5; i++) {\r\n-            assertEquals(\"child\" + i, prt.getChildren().\r\n-                get(i-1).getName());\r\n-        }          \r\n-        em.close();\r\n-    }\r\n-    \r\n-    public void testUpdateChildName() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OrderedOneManyChild child = em.find(OrderedOneManyChild.class, 4);\r\n-        child.setName(\"child1\");\r\n-        em.persist(child);\r\n-        em.getTransaction().commit();\r\n-        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n-        assertEquals(3, prt.getChildren().size());\r\n-        //the order should be \"child1\", \"child2\", \"child3\"\r\n-        for (int i = 1; i < 4; i++) {\r\n-            assertEquals(\"child\" + i, prt.getChildren().\r\n-                get(i-1).getName());\r\n-        }          \r\n-        em.close();    \t\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Defined ordering is only applied when the collection is loaded from the datastore.\n+ * It is not maintained by Openjpa as you modify the collection in memory. \n+ * Openjpa invalid data cache in case the persistence operation may result cache in wrong order.\n+ * This test suite tests various cases for the above problem.\n+ */\n+public class TestOrderbyInDataCache extends SingleEMFTestCase {\n+\tprivate long pid;\n+    public void setUp() {\n+        setUp(\"openjpa.DataCache\", \"true\", \n+            \"openjpa.RemoteCommitProvider\", \"sjvm\", \n+            OrderedOneManyParent.class,\n+            OrderedOneManyChild.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OrderedOneManyParent prt = new OrderedOneManyParent();\n+        prt.setName(\"Maria\");\n+        em.persist(prt);\n+        //insert child in reverse order\n+        for (int i = 4; i > 1; i--) {\n+        \tOrderedOneManyChild child = new OrderedOneManyChild();\n+            child.setId(i);\n+            child.setName(\"child\" + i);\n+            child.setParent(prt);\n+            prt.getChildren().add(child);\n+            em.persist(child);\n+        }        \n+        em.getTransaction().commit();\n+        pid = prt.getId();\n+        em.close();\n+    }\n+\n+    /**\n+     * Test if child list is in order after new child list is added in setup().\n+     *\n+     */\n+    public void testGetChildList(){\n+    \tEntityManager em = emf.createEntityManager();\n+    \tOrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\n+        assertEquals(3, prt.getChildren().size());\n+        //the order should be \"child2\", \"child3\", \"child4\"\n+        for (int i = 1; i < 4; i++) {\n+            assertEquals(\"child\" + (i + 1), prt.getChildren().\n+                get(i-1).getName());\n+        }   \n+        em.close();\n+    }\n+    \n+    public void testInsertChild() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\n+        OrderedOneManyChild child = new OrderedOneManyChild();\n+        child.setId(1);\n+        child.setName(\"child1\");\n+        child.setParent(prt);\n+        prt.getChildren().add(child);\n+        em.persist(child);\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        //obtain object in new persistence context\n+        em = emf.createEntityManager();\n+        prt = em.find(OrderedOneManyParent.class, pid);\n+        assertEquals(4, prt.getChildren().size());\n+        //the order should be \"child1\", \"child2\", \"child3\", \"child4\"\n+        for (int i = 1; i < 5; i++) {\n+            assertEquals(\"child\" + i, prt.getChildren().\n+                get(i-1).getName());\n+        }          \n+        em.close();\n+    }\n+    \n+    public void testUpdateChildName() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OrderedOneManyChild child = em.find(OrderedOneManyChild.class, 4);\n+        child.setName(\"child1\");\n+        em.persist(child);\n+        em.getTransaction().commit();\n+        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\n+        assertEquals(3, prt.getChildren().size());\n+        //the order should be \"child1\", \"child2\", \"child3\"\n+        for (int i = 1; i < 4; i++) {\n+            assertEquals(\"child\" + i, prt.getChildren().\n+                get(i-1).getName());\n+        }          \n+        em.close();    \t\n+    }\n+}"},{"sha":"75bf2f02f624a4bc42c686018b45751a5983dae4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,97 +1,97 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-/**\r\n- * New test case.\r\n- */\r\n-public class TestPCParametersInQueries extends AbstractTestCase {\r\n-\r\n-    public TestPCParametersInQueries(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-    private Object _eId;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectA.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-\r\n-        Broker broker = _factory.newBroker();\r\n-        broker.begin();\r\n-        CacheObjectE e = new CacheObjectE(\"bar\");\r\n-        CacheObjectJ j = new CacheObjectJ(\"foo\", e);\r\n-        broker.persist(j, null);\r\n-        broker.persist(e, null);\r\n-        broker.commit();\r\n-        _eId = broker.getObjectId(e);\r\n-        broker.close();\r\n-    }\r\n-\r\n-    public void testPCParameter() {\r\n-        Broker broker = _factory.newBroker();\r\n-        broker.begin();\r\n-        CacheObjectE e = (CacheObjectE) broker.find(_eId, true, null);\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n-            \"select a from \" +\r\n-                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\r\n-\r\n-        Collection c = (Collection) q.execute(new Object[]{ e });\r\n-        CacheTestHelper.iterate(c);\r\n-        Object o = c.iterator().next();\r\n-        assertTrue(o instanceof CacheObjectJ);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE, new Object[]{ e });\r\n-\r\n-        q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n-            \"select a from \" +\r\n-                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\r\n-\r\n-        c = (Collection) q.execute(new Object[]{ e });\r\n-        Object o2 = c.iterator().next();\r\n-        assertTrue(o2 instanceof CacheObjectJ);\r\n-        assertTrue(o == o2);\r\n-\r\n-        broker.commit();\r\n-        broker.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+/**\n+ * New test case.\n+ */\n+public class TestPCParametersInQueries extends AbstractTestCase {\n+\n+    public TestPCParametersInQueries(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+    private Object _eId;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectA.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+\n+        Broker broker = _factory.newBroker();\n+        broker.begin();\n+        CacheObjectE e = new CacheObjectE(\"bar\");\n+        CacheObjectJ j = new CacheObjectJ(\"foo\", e);\n+        broker.persist(j, null);\n+        broker.persist(e, null);\n+        broker.commit();\n+        _eId = broker.getObjectId(e);\n+        broker.close();\n+    }\n+\n+    public void testPCParameter() {\n+        Broker broker = _factory.newBroker();\n+        broker.begin();\n+        CacheObjectE e = (CacheObjectE) broker.find(_eId, true, null);\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\n+            \"select a from \" +\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\n+\n+        Collection c = (Collection) q.execute(new Object[]{ e });\n+        CacheTestHelper.iterate(c);\n+        Object o = c.iterator().next();\n+        assertTrue(o instanceof CacheObjectJ);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE, new Object[]{ e });\n+\n+        q = broker.newQuery(JPQLParser.LANG_JPQL,\n+            \"select a from \" +\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\n+\n+        c = (Collection) q.execute(new Object[]{ e });\n+        Object o2 = c.iterator().next();\n+        assertTrue(o2 instanceof CacheObjectJ);\n+        assertTrue(o == o2);\n+\n+        broker.commit();\n+        broker.close();\n+    }\n+}"},{"sha":"f4bf2ad002feb4ddd212f04580e49ca6d5991d9b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-/**\r\n- * Test some assumptions about query result metadata that the query\r\n- * cache relies on.\r\n- */\r\n-public class TestQueryResultTypes extends AbstractTestCase {\r\n-\r\n-    public TestQueryResultTypes(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    public void testQueryResultTypesWithThis() {\r\n-        Broker broker = getBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\r\n-                CacheObjectA.class.getSimpleName() + \" a\");\r\n-\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(2, types.length);\r\n-        assertEquals(String.class, types[0]);\r\n-        assertEquals(CacheObjectA.class, types[1]);\r\n-    }\r\n-\r\n-    public void testQueryResultTypesWithRelated() {\r\n-        Broker broker = getBroker();\r\n-        Query q = broker\r\n-            .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.relatedB FROM \" +\r\n-                CacheObjectA.class.getSimpleName() + \" a\");\r\n-\r\n-        //CacheObjectA.class,           \"select name, relatedB\");\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(2, types.length);\r\n-        assertEquals(String.class, types[0]);\r\n-        assertEquals(CacheObjectB.class, types[1]);\r\n-    }\r\n-\r\n-    public void testSingleProjectionOfNonThisRelation() {\r\n-        Broker broker = getBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.relatedB FROM \" +\r\n-                CacheObjectA.class.getSimpleName() + \" a\");\r\n-\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(1, types.length);\r\n-        assertEquals(CacheObjectB.class, types[0]);\r\n-    }\r\n-\r\n-    public void testSingleProjectionOfThisRelation() {\r\n-        Broker broker = getBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n-            CacheObjectA.class.getSimpleName() + \" a\");\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(0, types.length);\r\n-    }\r\n-\r\n-    public void testNoResultClause() {\r\n-        Broker broker = getBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n-                CacheObjectA.class.getSimpleName() + \" a\");\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(0, types.length);\r\n-    }\r\n-\r\n-    private Broker getBroker() {\r\n-        return JPAFacadeHelper\r\n-            .toBroker(currentEntityManager());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+/**\n+ * Test some assumptions about query result metadata that the query\n+ * cache relies on.\n+ */\n+public class TestQueryResultTypes extends AbstractTestCase {\n+\n+    public TestQueryResultTypes(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    public void testQueryResultTypesWithThis() {\n+        Broker broker = getBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\n+                CacheObjectA.class.getSimpleName() + \" a\");\n+\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(2, types.length);\n+        assertEquals(String.class, types[0]);\n+        assertEquals(CacheObjectA.class, types[1]);\n+    }\n+\n+    public void testQueryResultTypesWithRelated() {\n+        Broker broker = getBroker();\n+        Query q = broker\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.relatedB FROM \" +\n+                CacheObjectA.class.getSimpleName() + \" a\");\n+\n+        //CacheObjectA.class,           \"select name, relatedB\");\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(2, types.length);\n+        assertEquals(String.class, types[0]);\n+        assertEquals(CacheObjectB.class, types[1]);\n+    }\n+\n+    public void testSingleProjectionOfNonThisRelation() {\n+        Broker broker = getBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.relatedB FROM \" +\n+                CacheObjectA.class.getSimpleName() + \" a\");\n+\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(1, types.length);\n+        assertEquals(CacheObjectB.class, types[0]);\n+    }\n+\n+    public void testSingleProjectionOfThisRelation() {\n+        Broker broker = getBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\n+            CacheObjectA.class.getSimpleName() + \" a\");\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(0, types.length);\n+    }\n+\n+    public void testNoResultClause() {\n+        Broker broker = getBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\n+                CacheObjectA.class.getSimpleName() + \" a\");\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(0, types.length);\n+    }\n+\n+    private Broker getBroker() {\n+        return JPAFacadeHelper\n+            .toBroker(currentEntityManager());\n+    }\n+}"},{"sha":"3d392eae3128b21bc8a9c623ee56d54e0633bd60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","status":"modified","additions":322,"deletions":322,"changes":644,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,322 +1,322 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-\r\n-/**\r\n- * Test that we marshall and unmarshall result types appropriately.\r\n- */\r\n-public class TestResultShapes extends AbstractTestCase {\r\n-\r\n-    public TestResultShapes(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private Broker _broker;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectAChild1.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        BrokerFactory factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-\r\n-        Broker broker = factory.newBroker();\r\n-        broker.begin();\r\n-        broker.persist(new CacheObjectAChild1(\"foo\", \"foo\", 0), null);\r\n-        broker.persist(new CacheObjectAChild1(\"bar\", \"bar\", 1), null);\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        _broker = factory.newBroker();\r\n-    }\r\n-\r\n-    public void tearDown() throws Exception {\r\n-        _broker.close();\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    // FIXME Seetha Nov 3,2006\r\n-    // need to know about the 'this' parameter\r\n-\r\n-//\tpublic void testCollectionOfCandidateClass() \r\n-//\t{ \r\n-//\t\tCollection<String> ac = new ArrayList<String>();\r\n-//\t\tac.add(\"this\");\r\n-//\r\n-//\t\tCollection<Class> bd = new ArrayList<Class>();\r\n-//\t\tbd.add(CacheObjectAChild1.class);\r\n-//\t\t\r\n-//\t\tarrayHelper(false, bd, null, true); \r\n-//\t\tmapHelper(false, bd, ac, true);\r\n-//\t\trawHelper(false, CacheObjectAChild1.class, null, true); \r\n-//\t}\r\n-//\t\r\n-//\tpublic void testUniqueCandidateClass() \r\n-//\t{ \r\n-//\t\tCollection<String> ac = new ArrayList<String>();\r\n-//\t\tac.add(\"this\");\r\n-//\r\n-//\t\tCollection<Class> bd = new ArrayList<Class>();\r\n-//\t\tbd.add(CacheObjectAChild1.class);\r\n-//\t\t\r\n-//\t\tarrayHelper(true, bd, null, true); \r\n-//\t\tmapHelper(true, bd, ac, true);\r\n-//\t\trawHelper(true, CacheObjectAChild1.class, null, true); \r\n-//\t}\r\n-\r\n-    public void testCollectionOfSingleValuedProjection() {\r\n-\r\n-        Collection<String> ac = new ArrayList<String>();\r\n-        ac.add(\"age\");\r\n-\r\n-        Collection<Class> bd = new ArrayList<Class>();\r\n-        bd.add(Long.class);\r\n-\r\n-        arrayHelper(false, bd, ac, true);\r\n-        mapHelper(false, bd, ac, true);\r\n-        rawHelper(false, Long.class, \"age\", true);\r\n-    }\r\n-\r\n-    public void testUniqueSingleValuedProjection() {\r\n-        Collection<String> ac = new ArrayList<String>();\r\n-        ac.add(\"age\");\r\n-\r\n-        Collection<Class> bd = new ArrayList<Class>();\r\n-        bd.add(Long.class);\r\n-\r\n-        arrayHelper(true, bd, ac, true);\r\n-        mapHelper(true, bd, ac, true);\r\n-        rawHelper(true, Long.class, \"age\", true);\r\n-    }\r\n-\r\n-    public void testCollectionOfMultiValuedProjection() {\r\n-        Collection<String> ac = new ArrayList<String>();\r\n-        ac.add(\"age\");\r\n-        ac.add(\"name\");\r\n-\r\n-        Collection<Class> bd = new ArrayList<Class>();\r\n-        bd.add(Long.class);\r\n-        bd.add(String.class);\r\n-\r\n-        arrayHelper(false, bd, ac, true);\r\n-\r\n-        mapHelper(false, bd, ac, true);\r\n-        // we put both\r\n-        // projections in single slot in array because this is a\r\n-        // single result that we're\r\n-        // looking\r\n-        // for. It just happens that the // single result format we expect is\r\n-        // an Object[]. rawHelper(false, Object[].class, \"age, name\", true);\r\n-    }\r\n-\r\n-    public void testUniqueMultiValuedProjection() {\r\n-        Collection<String> ac = new ArrayList<String>();\r\n-        ac.add(\"age\");\r\n-        ac.add(\"name\");\r\n-\r\n-        Collection<Class> bd = new ArrayList<Class>();\r\n-        bd.add(Long.class);\r\n-        bd.add(String.class);\r\n-\r\n-        arrayHelper(true, bd, ac, true);\r\n-        mapHelper(true, bd, ac, true);\r\n-        // we put\r\n-        // both\r\n-        // projections in single slot in array because this is a\r\n-        // single result that\r\n-        // we're looking\r\n-        // for.\tIt just happens that the // single result format we\r\n-        // expect is an\tObject[]. rawHelper(true, Object[].class, \"age, name\", true);\r\n-    }\r\n-\r\n-    public void testUncachedQueryHasCorrectShape() {\r\n-        Collection<String> ac = new ArrayList<String>();\r\n-        ac.add(\"age\");\r\n-        ac.add(\"name\");\r\n-\r\n-        Collection<Class> bd = new ArrayList<Class>();\r\n-        bd.add(Long.class);\r\n-        bd.add(String.class);\r\n-\r\n-        _broker.getFetchConfiguration().setQueryCacheEnabled(false);\r\n-\r\n-        arrayHelper(false, bd, ac, false);\r\n-        mapHelper(false, bd, ac, false);\r\n-        rawHelper(false, Object[].class, \"age, a.name\", false);\r\n-    }\r\n-\r\n-    private void arrayHelper(boolean unique, Collection recordClasses,\r\n-        Collection results, boolean inCache) {\r\n-        Query q = setUpQuery(unique, results);\r\n-        q.setResultType(Object[].class);\r\n-        if (unique) {\r\n-            arrayResultHelper(q.execute(), recordClasses, inCache);\r\n-        } else {\r\n-            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n-                .hasNext();)\r\n-                arrayResultHelper(iter.next(), recordClasses, inCache);\r\n-        }\r\n-\r\n-        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\r\n-\r\n-        if (unique) {\r\n-            arrayResultHelper(q.execute(), recordClasses, inCache);\r\n-        } else {\r\n-            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n-                .hasNext();)\r\n-                arrayResultHelper(iter.next(), recordClasses, inCache);\r\n-        }\r\n-    }\r\n-\r\n-    private void arrayResultHelper(Object result, Collection recordClasses,\r\n-        boolean inCache) {\r\n-        assertEquals(Object[].class, result.getClass());\r\n-        Object[] os = (Object[]) result;\r\n-        assertEquals(recordClasses.size(), os.length);\r\n-        for (int i = 0; i < recordClasses.size(); i++)\r\n-            assertEquals(((ArrayList) recordClasses).get(i), os[i].getClass());\r\n-    }\r\n-\r\n-    private void mapHelper(boolean unique, Collection recordClasses,\r\n-        Collection results, boolean inCache) {\r\n-        Query q = setUpQuery(unique, results);\r\n-        System.out.println(\"Query String \" + q.getQueryString());\r\n-        Collection coll = null;\r\n-        if (q.execute() != null && (q.execute() instanceof Collection)) {\r\n-            coll = (Collection) q.execute();\r\n-        }\r\n-        System.out.println(\"Type of q.execute is : \" + q.execute().getClass());\r\n-\r\n-        Iterator it = coll.iterator();\r\n-        while (it.hasNext())\r\n-            System.out.println(\"Query result is \" + it.next().getClass());\r\n-\r\n-        q.setResultType(HashMap.class);\r\n-\r\n-        if (unique) {\r\n-            mapResultHelper(q.execute(), recordClasses, results, inCache);\r\n-        } else {\r\n-            for (Iterator iter = ((Collection) q.execute()).iterator();\r\n-                iter.hasNext();)\r\n-                mapResultHelper(iter.next(), recordClasses, results, inCache);\r\n-        }\r\n-\r\n-        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\r\n-\r\n-        if (unique) {\r\n-            mapResultHelper(q.execute(), recordClasses, results, inCache);\r\n-        } else {\r\n-            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n-                .hasNext();)\r\n-                mapResultHelper(iter.next(), recordClasses, results, inCache);\r\n-        }\r\n-    }\r\n-\r\n-    private void mapResultHelper(Object result, Collection recordClasses,\r\n-        Collection results, boolean inCache) {\r\n-        assertEquals(HashMap.class, result.getClass());\r\n-        HashMap m = (HashMap) result;\r\n-        assertEquals(recordClasses.size(), m.size());\r\n-        for (int i = 0; i < recordClasses.size(); i++)\r\n-            assertEquals(\"Map Contents \" + m.toString() + \" result: \" + result\r\n-                + \" loop size: \" + recordClasses.size()\r\n-                + \"Value of m.get(results[i]) \"\r\n-                + m.get(((ArrayList) results).get(i).getClass()),\r\n-                ((ArrayList) recordClasses).get(i),\r\n-                m.get(\"jpqlalias\" + (i + 1)).getClass());\r\n-    }\r\n-\r\n-    private void rawHelper(boolean unique, Class recordClass, String result,\r\n-        boolean inCache) {\r\n-        ArrayList<String> l = new ArrayList<String>();\r\n-        l.add(result);\r\n-        Collection res = (result == null) ? null : l;\r\n-        Query q = setUpQuery(unique, res);\r\n-        if (unique)\r\n-            assertEquals(recordClass, q.execute().getClass());\r\n-        else {\r\n-            q.setUnique(unique);\r\n-            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n-                .hasNext();)\r\n-                assertEquals(recordClass, iter.next().getClass());\r\n-        }\r\n-\r\n-        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\r\n-\r\n-        if (unique) {\r\n-            assertEquals(recordClass, q.execute().getClass());\r\n-        } else {\r\n-            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n-                .hasNext();)\r\n-                assertEquals(recordClass, iter.next().getClass());\r\n-        }\r\n-    }\r\n-\r\n-    private Query setUpQuery(boolean unique, Collection results) {\r\n-        String filter = \"select\";\r\n-        ArrayList resultsl = (ArrayList) results;\r\n-        if (results != null) {\r\n-            String resultString = \"\";\r\n-            for (int i = 0; i < resultsl.size(); i++) {\r\n-                resultString += \"a.\" + resultsl.get(i);\r\n-                if (i < results.size() - 1)\r\n-                    resultString += \", \";\r\n-            }\r\n-            filter += \" \" + resultString;\r\n-            filter += \" \" + \"from \"\r\n-                + CacheObjectAChild1.class.getSuperclass().getSimpleName()\r\n-                + \" a\";\r\n-        } else {\r\n-            filter += \" \" + \"a from \"\r\n-                + CacheObjectAChild1.class.getSuperclass().getSimpleName()\r\n-                + \" a\";\r\n-        }\r\n-\r\n-        if (unique)\r\n-            filter += \" where a.age = 0\";\r\n-        System.out.println(\"****Query: \" + filter);\r\n-        Query q = _broker.newQuery(JPQLParser.LANG_JPQL, filter);\r\n-        q.setUnique(unique);\r\n-        q.setCandidateType(CacheObjectAChild1.class, false);\r\n-\r\n-        return q;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+/**\n+ * Test that we marshall and unmarshall result types appropriately.\n+ */\n+public class TestResultShapes extends AbstractTestCase {\n+\n+    public TestResultShapes(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private Broker _broker;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectAChild1.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        BrokerFactory factory = JPAFacadeHelper.toBrokerFactory(emf);\n+\n+        Broker broker = factory.newBroker();\n+        broker.begin();\n+        broker.persist(new CacheObjectAChild1(\"foo\", \"foo\", 0), null);\n+        broker.persist(new CacheObjectAChild1(\"bar\", \"bar\", 1), null);\n+        broker.commit();\n+        broker.close();\n+\n+        _broker = factory.newBroker();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        _broker.close();\n+\n+        super.tearDown();\n+    }\n+\n+    // FIXME Seetha Nov 3,2006\n+    // need to know about the 'this' parameter\n+\n+//\tpublic void testCollectionOfCandidateClass() \n+//\t{ \n+//\t\tCollection<String> ac = new ArrayList<String>();\n+//\t\tac.add(\"this\");\n+//\n+//\t\tCollection<Class> bd = new ArrayList<Class>();\n+//\t\tbd.add(CacheObjectAChild1.class);\n+//\t\t\n+//\t\tarrayHelper(false, bd, null, true); \n+//\t\tmapHelper(false, bd, ac, true);\n+//\t\trawHelper(false, CacheObjectAChild1.class, null, true); \n+//\t}\n+//\t\n+//\tpublic void testUniqueCandidateClass() \n+//\t{ \n+//\t\tCollection<String> ac = new ArrayList<String>();\n+//\t\tac.add(\"this\");\n+//\n+//\t\tCollection<Class> bd = new ArrayList<Class>();\n+//\t\tbd.add(CacheObjectAChild1.class);\n+//\t\t\n+//\t\tarrayHelper(true, bd, null, true); \n+//\t\tmapHelper(true, bd, ac, true);\n+//\t\trawHelper(true, CacheObjectAChild1.class, null, true); \n+//\t}\n+\n+    public void testCollectionOfSingleValuedProjection() {\n+\n+        Collection<String> ac = new ArrayList<String>();\n+        ac.add(\"age\");\n+\n+        Collection<Class> bd = new ArrayList<Class>();\n+        bd.add(Long.class);\n+\n+        arrayHelper(false, bd, ac, true);\n+        mapHelper(false, bd, ac, true);\n+        rawHelper(false, Long.class, \"age\", true);\n+    }\n+\n+    public void testUniqueSingleValuedProjection() {\n+        Collection<String> ac = new ArrayList<String>();\n+        ac.add(\"age\");\n+\n+        Collection<Class> bd = new ArrayList<Class>();\n+        bd.add(Long.class);\n+\n+        arrayHelper(true, bd, ac, true);\n+        mapHelper(true, bd, ac, true);\n+        rawHelper(true, Long.class, \"age\", true);\n+    }\n+\n+    public void testCollectionOfMultiValuedProjection() {\n+        Collection<String> ac = new ArrayList<String>();\n+        ac.add(\"age\");\n+        ac.add(\"name\");\n+\n+        Collection<Class> bd = new ArrayList<Class>();\n+        bd.add(Long.class);\n+        bd.add(String.class);\n+\n+        arrayHelper(false, bd, ac, true);\n+\n+        mapHelper(false, bd, ac, true);\n+        // we put both\n+        // projections in single slot in array because this is a\n+        // single result that we're\n+        // looking\n+        // for. It just happens that the // single result format we expect is\n+        // an Object[]. rawHelper(false, Object[].class, \"age, name\", true);\n+    }\n+\n+    public void testUniqueMultiValuedProjection() {\n+        Collection<String> ac = new ArrayList<String>();\n+        ac.add(\"age\");\n+        ac.add(\"name\");\n+\n+        Collection<Class> bd = new ArrayList<Class>();\n+        bd.add(Long.class);\n+        bd.add(String.class);\n+\n+        arrayHelper(true, bd, ac, true);\n+        mapHelper(true, bd, ac, true);\n+        // we put\n+        // both\n+        // projections in single slot in array because this is a\n+        // single result that\n+        // we're looking\n+        // for.\tIt just happens that the // single result format we\n+        // expect is an\tObject[]. rawHelper(true, Object[].class, \"age, name\", true);\n+    }\n+\n+    public void testUncachedQueryHasCorrectShape() {\n+        Collection<String> ac = new ArrayList<String>();\n+        ac.add(\"age\");\n+        ac.add(\"name\");\n+\n+        Collection<Class> bd = new ArrayList<Class>();\n+        bd.add(Long.class);\n+        bd.add(String.class);\n+\n+        _broker.getFetchConfiguration().setQueryCacheEnabled(false);\n+\n+        arrayHelper(false, bd, ac, false);\n+        mapHelper(false, bd, ac, false);\n+        rawHelper(false, Object[].class, \"age, a.name\", false);\n+    }\n+\n+    private void arrayHelper(boolean unique, Collection recordClasses,\n+        Collection results, boolean inCache) {\n+        Query q = setUpQuery(unique, results);\n+        q.setResultType(Object[].class);\n+        if (unique) {\n+            arrayResultHelper(q.execute(), recordClasses, inCache);\n+        } else {\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\n+                .hasNext();)\n+                arrayResultHelper(iter.next(), recordClasses, inCache);\n+        }\n+\n+        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\n+\n+        if (unique) {\n+            arrayResultHelper(q.execute(), recordClasses, inCache);\n+        } else {\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\n+                .hasNext();)\n+                arrayResultHelper(iter.next(), recordClasses, inCache);\n+        }\n+    }\n+\n+    private void arrayResultHelper(Object result, Collection recordClasses,\n+        boolean inCache) {\n+        assertEquals(Object[].class, result.getClass());\n+        Object[] os = (Object[]) result;\n+        assertEquals(recordClasses.size(), os.length);\n+        for (int i = 0; i < recordClasses.size(); i++)\n+            assertEquals(((ArrayList) recordClasses).get(i), os[i].getClass());\n+    }\n+\n+    private void mapHelper(boolean unique, Collection recordClasses,\n+        Collection results, boolean inCache) {\n+        Query q = setUpQuery(unique, results);\n+        System.out.println(\"Query String \" + q.getQueryString());\n+        Collection coll = null;\n+        if (q.execute() != null && (q.execute() instanceof Collection)) {\n+            coll = (Collection) q.execute();\n+        }\n+        System.out.println(\"Type of q.execute is : \" + q.execute().getClass());\n+\n+        Iterator it = coll.iterator();\n+        while (it.hasNext())\n+            System.out.println(\"Query result is \" + it.next().getClass());\n+\n+        q.setResultType(HashMap.class);\n+\n+        if (unique) {\n+            mapResultHelper(q.execute(), recordClasses, results, inCache);\n+        } else {\n+            for (Iterator iter = ((Collection) q.execute()).iterator();\n+                iter.hasNext();)\n+                mapResultHelper(iter.next(), recordClasses, results, inCache);\n+        }\n+\n+        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\n+\n+        if (unique) {\n+            mapResultHelper(q.execute(), recordClasses, results, inCache);\n+        } else {\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\n+                .hasNext();)\n+                mapResultHelper(iter.next(), recordClasses, results, inCache);\n+        }\n+    }\n+\n+    private void mapResultHelper(Object result, Collection recordClasses,\n+        Collection results, boolean inCache) {\n+        assertEquals(HashMap.class, result.getClass());\n+        HashMap m = (HashMap) result;\n+        assertEquals(recordClasses.size(), m.size());\n+        for (int i = 0; i < recordClasses.size(); i++)\n+            assertEquals(\"Map Contents \" + m.toString() + \" result: \" + result\n+                + \" loop size: \" + recordClasses.size()\n+                + \"Value of m.get(results[i]) \"\n+                + m.get(((ArrayList) results).get(i).getClass()),\n+                ((ArrayList) recordClasses).get(i),\n+                m.get(\"jpqlalias\" + (i + 1)).getClass());\n+    }\n+\n+    private void rawHelper(boolean unique, Class recordClass, String result,\n+        boolean inCache) {\n+        ArrayList<String> l = new ArrayList<String>();\n+        l.add(result);\n+        Collection res = (result == null) ? null : l;\n+        Query q = setUpQuery(unique, res);\n+        if (unique)\n+            assertEquals(recordClass, q.execute().getClass());\n+        else {\n+            q.setUnique(unique);\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\n+                .hasNext();)\n+                assertEquals(recordClass, iter.next().getClass());\n+        }\n+\n+        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\n+\n+        if (unique) {\n+            assertEquals(recordClass, q.execute().getClass());\n+        } else {\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\n+                .hasNext();)\n+                assertEquals(recordClass, iter.next().getClass());\n+        }\n+    }\n+\n+    private Query setUpQuery(boolean unique, Collection results) {\n+        String filter = \"select\";\n+        ArrayList resultsl = (ArrayList) results;\n+        if (results != null) {\n+            String resultString = \"\";\n+            for (int i = 0; i < resultsl.size(); i++) {\n+                resultString += \"a.\" + resultsl.get(i);\n+                if (i < results.size() - 1)\n+                    resultString += \", \";\n+            }\n+            filter += \" \" + resultString;\n+            filter += \" \" + \"from \"\n+                + CacheObjectAChild1.class.getSuperclass().getSimpleName()\n+                + \" a\";\n+        } else {\n+            filter += \" \" + \"a from \"\n+                + CacheObjectAChild1.class.getSuperclass().getSimpleName()\n+                + \" a\";\n+        }\n+\n+        if (unique)\n+            filter += \" where a.age = 0\";\n+        System.out.println(\"****Query: \" + filter);\n+        Query q = _broker.newQuery(JPQLParser.LANG_JPQL, filter);\n+        q.setUnique(unique);\n+        q.setCandidateType(CacheObjectAChild1.class, false);\n+\n+        return q;\n+    }\n+}"},{"sha":"5e4972985bfbd938eeb4ce27b0451e804f402af0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Test data caching across multiple factories in the same JVM, using\r\n- * the single-JVM commit provider to communicate updates..\r\n- */\r\n-public class TestSJVMCache\r\n-    extends CacheTest {\r\n-\r\n-    public TestSJVMCache(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return new String[]{\r\n-            // the second cache is there solely to differentiate between\r\n-            // this PMF and the PMF created from confs2 below\r\n-            \"openjpa.DataCache\", \"true, true(Name=differentiatingProperty1)\",\r\n-            \"openjpa.QueryCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return new String[]{\r\n-            // the second cache is there solely to differentiate between\r\n-            // this PMF and the PMF created from confs above\r\n-            \"openjpa.DataCache\", \"true, true(Name=differentiatingProperty2)\",\r\n-            \"openjpa.QueryCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Test data caching across multiple factories in the same JVM, using\n+ * the single-JVM commit provider to communicate updates..\n+ */\n+public class TestSJVMCache\n+    extends CacheTest {\n+\n+    public TestSJVMCache(String test) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return new String[]{\n+            // the second cache is there solely to differentiate between\n+            // this PMF and the PMF created from confs2 below\n+            \"openjpa.DataCache\", \"true, true(Name=differentiatingProperty1)\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+\n+    protected String[] getConfs2() {\n+        return new String[]{\n+            // the second cache is there solely to differentiate between\n+            // this PMF and the PMF created from confs above\n+            \"openjpa.DataCache\", \"true, true(Name=differentiatingProperty2)\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+}"},{"sha":"fadaefa9d8965d72af7a77afea607526bd567cb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,102 +1,102 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestUniteratedQueryResult\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestUniteratedQueryResult(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private EntityManagerFactory _pmf;\r\n-\r\n-    public void setUp() {\r\n-        System.out.println(\"****Deleted Records \"\r\n-            + deleteAll(CacheObjectA.class));\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.QueryCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.FetchBatchSize\", \"0\");\r\n-\r\n-        _pmf = getEmf(propsMap);\r\n-    }\r\n-\r\n-    public void test() {\r\n-        CacheObjectA pc1 = new CacheObjectA();\r\n-        pc1.setName(\"pc1\");\r\n-        CacheObjectA pc2 = new CacheObjectA();\r\n-        pc2.setName(\"pc2\");\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) _pmf.createEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);\r\n-        Object oid1 = pm.getObjectId(pc1);\r\n-        Object oid2 = pm.getObjectId(pc2);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) _pmf.createEntityManager();\r\n-\r\n-        OpenJPAQuery q = pm.createQuery(\r\n-            \"select a FROM \" + CacheObjectA.class.getSimpleName() +\r\n-                \" a where a.name = 'pc1'\");\r\n-        List res = (List) q.getResultList();\r\n-\r\n-        OpenJPAEntityManager pm2 =\r\n-            (OpenJPAEntityManager) _pmf.createEntityManager();\r\n-        startTx(pm2);\r\n-        pc1 = (CacheObjectA) pm2.find(CacheObjectA.class, oid1);\r\n-        pc2 = (CacheObjectA) pm2.find(CacheObjectA.class, oid2);\r\n-        pc1.setName(\"pc2\");\r\n-        pc2.setName(\"pc1\");\r\n-        endTx(pm2);\r\n-\r\n-        assertEquals(1, res.size());\r\n-        for (Iterator itr = res.iterator(); itr.hasNext();)\r\n-            assertEquals(oid1, pm2.getObjectId(itr.next()));\r\n-        endEm(pm2);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) _pmf.createEntityManager();\r\n-\r\n-        q = pm.createQuery(\r\n-            \"select a FROM \" + CacheObjectA.class.getSimpleName() +\r\n-                \" a where a.name = 'pc1'\");\r\n-        res = (List) q.getResultList();\r\n-\r\n-        assertEquals(oid2, pm.getObjectId(res.iterator().next()));\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestUniteratedQueryResult\n+    extends AbstractTestCase {\n+\n+    public TestUniteratedQueryResult(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private EntityManagerFactory _pmf;\n+\n+    public void setUp() {\n+        System.out.println(\"****Deleted Records \"\n+            + deleteAll(CacheObjectA.class));\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.QueryCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.FetchBatchSize\", \"0\");\n+\n+        _pmf = getEmf(propsMap);\n+    }\n+\n+    public void test() {\n+        CacheObjectA pc1 = new CacheObjectA();\n+        pc1.setName(\"pc1\");\n+        CacheObjectA pc2 = new CacheObjectA();\n+        pc2.setName(\"pc2\");\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) _pmf.createEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);\n+        Object oid1 = pm.getObjectId(pc1);\n+        Object oid2 = pm.getObjectId(pc2);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) _pmf.createEntityManager();\n+\n+        OpenJPAQuery q = pm.createQuery(\n+            \"select a FROM \" + CacheObjectA.class.getSimpleName() +\n+                \" a where a.name = 'pc1'\");\n+        List res = (List) q.getResultList();\n+\n+        OpenJPAEntityManager pm2 =\n+            (OpenJPAEntityManager) _pmf.createEntityManager();\n+        startTx(pm2);\n+        pc1 = (CacheObjectA) pm2.find(CacheObjectA.class, oid1);\n+        pc2 = (CacheObjectA) pm2.find(CacheObjectA.class, oid2);\n+        pc1.setName(\"pc2\");\n+        pc2.setName(\"pc1\");\n+        endTx(pm2);\n+\n+        assertEquals(1, res.size());\n+        for (Iterator itr = res.iterator(); itr.hasNext();)\n+            assertEquals(oid1, pm2.getObjectId(itr.next()));\n+        endEm(pm2);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) _pmf.createEntityManager();\n+\n+        q = pm.createQuery(\n+            \"select a FROM \" + CacheObjectA.class.getSimpleName() +\n+                \" a where a.name = 'pc1'\");\n+        res = (List) q.getResultList();\n+\n+        assertEquals(oid2, pm.getObjectId(res.iterator().next()));\n+        endEm(pm);\n+    }\n+}"},{"sha":"b8aca768f342cd0a2576cbf96224186211e755b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,38 +1,38 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class AppIdCacheObject {\r\n-\r\n-    private int id;\r\n-\r\n-    protected AppIdCacheObject() {\r\n-    }\r\n-\r\n-    public AppIdCacheObject(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class AppIdCacheObject {\n+\n+    private int id;\n+\n+    protected AppIdCacheObject() {\n+    }\n+\n+    public AppIdCacheObject(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+}"},{"sha":"9f16187c2cb74dbcd6a39246c32680b0b3654d83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,86 +1,86 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.ObjectInputStream;\r\n-import java.io.ObjectOutputStream;\r\n-import java.io.Serializable;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class AttachA\r\n-    implements Serializable {\r\n-\r\n-    private String astr;\r\n-    private int aint;\r\n-    private double adbl;\r\n-    private String[] stringArray = new String[0];\r\n-    private AttachE[] attachEArray = new AttachE[0];\r\n-\r\n-    public void setAstr(String astr) {\r\n-        this.astr = astr;\r\n-    }\r\n-\r\n-    public String getAstr() {\r\n-        return this.astr;\r\n-    }\r\n-\r\n-    public void setAint(int aint) {\r\n-        this.aint = aint;\r\n-    }\r\n-\r\n-    public int getAint() {\r\n-        return this.aint;\r\n-    }\r\n-\r\n-    public void setAdbl(double adbl) {\r\n-        this.adbl = adbl;\r\n-    }\r\n-\r\n-    public double getAdbl() {\r\n-        return this.adbl;\r\n-    }\r\n-\r\n-    public void setStringArray(String[] stringArray) {\r\n-        this.stringArray = stringArray;\r\n-    }\r\n-\r\n-    public String[] getStringArray() {\r\n-        return this.stringArray;\r\n-    }\r\n-\r\n-    public void setAttachEArray(AttachE[] attachEArray) {\r\n-        this.attachEArray = attachEArray;\r\n-    }\r\n-\r\n-    public AttachE[] getAttachEArray() {\r\n-        return this.attachEArray;\r\n-    }\r\n-\r\n-    private void writeObject(ObjectOutputStream out)\r\n-        throws IOException {\r\n-        out.defaultWriteObject();\r\n-    }\r\n-\r\n-    private void readObject(ObjectInputStream in)\r\n-        throws IOException, ClassNotFoundException {\r\n-        in.defaultReadObject();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class AttachA\n+    implements Serializable {\n+\n+    private String astr;\n+    private int aint;\n+    private double adbl;\n+    private String[] stringArray = new String[0];\n+    private AttachE[] attachEArray = new AttachE[0];\n+\n+    public void setAstr(String astr) {\n+        this.astr = astr;\n+    }\n+\n+    public String getAstr() {\n+        return this.astr;\n+    }\n+\n+    public void setAint(int aint) {\n+        this.aint = aint;\n+    }\n+\n+    public int getAint() {\n+        return this.aint;\n+    }\n+\n+    public void setAdbl(double adbl) {\n+        this.adbl = adbl;\n+    }\n+\n+    public double getAdbl() {\n+        return this.adbl;\n+    }\n+\n+    public void setStringArray(String[] stringArray) {\n+        this.stringArray = stringArray;\n+    }\n+\n+    public String[] getStringArray() {\n+        return this.stringArray;\n+    }\n+\n+    public void setAttachEArray(AttachE[] attachEArray) {\n+        this.attachEArray = attachEArray;\n+    }\n+\n+    public AttachE[] getAttachEArray() {\n+        return this.attachEArray;\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.defaultWriteObject();\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+    }\n+}"},{"sha":"40e393ed83636f7e5089d38b810ecebd54ccfeb9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,76 +1,76 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.util.HashSet;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-import java.util.TreeMap;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class AttachB\r\n-    extends AttachA {\r\n-\r\n-    private String bstr;\r\n-    private int bint;\r\n-    private double bdbl;\r\n-    private Set ds = new HashSet();\r\n-    private Map stringIntMap = new TreeMap();\r\n-\r\n-    public void setBstr(String bstr) {\r\n-        this.bstr = bstr;\r\n-    }\r\n-\r\n-    public String getBstr() {\r\n-        return this.bstr;\r\n-    }\r\n-\r\n-    public void setBint(int bint) {\r\n-        this.bint = bint;\r\n-    }\r\n-\r\n-    public int getBint() {\r\n-        return this.bint;\r\n-    }\r\n-\r\n-    public void setBdbl(double bdbl) {\r\n-        this.bdbl = bdbl;\r\n-    }\r\n-\r\n-    public double getBdbl() {\r\n-        return this.bdbl;\r\n-    }\r\n-\r\n-    public void setDs(Set ds) {\r\n-        this.ds = ds;\r\n-    }\r\n-\r\n-    public Set getDs() {\r\n-        return this.ds;\r\n-    }\r\n-\r\n-    public void setStringIntMap(Map stringIntMap) {\r\n-        this.stringIntMap = stringIntMap;\r\n-    }\r\n-\r\n-    public Map getStringIntMap() {\r\n-        return this.stringIntMap;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class AttachB\n+    extends AttachA {\n+\n+    private String bstr;\n+    private int bint;\n+    private double bdbl;\n+    private Set ds = new HashSet();\n+    private Map stringIntMap = new TreeMap();\n+\n+    public void setBstr(String bstr) {\n+        this.bstr = bstr;\n+    }\n+\n+    public String getBstr() {\n+        return this.bstr;\n+    }\n+\n+    public void setBint(int bint) {\n+        this.bint = bint;\n+    }\n+\n+    public int getBint() {\n+        return this.bint;\n+    }\n+\n+    public void setBdbl(double bdbl) {\n+        this.bdbl = bdbl;\n+    }\n+\n+    public double getBdbl() {\n+        return this.bdbl;\n+    }\n+\n+    public void setDs(Set ds) {\n+        this.ds = ds;\n+    }\n+\n+    public Set getDs() {\n+        return this.ds;\n+    }\n+\n+    public void setStringIntMap(Map stringIntMap) {\n+        this.stringIntMap = stringIntMap;\n+    }\n+\n+    public Map getStringIntMap() {\n+        return this.stringIntMap;\n+    }\n+}"},{"sha":"d7d86fd7e552d4c3dc7784eabb0fba2bbfd75f4c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.util.LinkedList;\r\n-import java.util.List;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class AttachC\r\n-    extends AttachB {\r\n-\r\n-    private String cstr;\r\n-    private int cint;\r\n-    private double cdbl;\r\n-    private List es = new LinkedList(); // non-DFG\r\n-\r\n-    public void setCstr(String cstr) {\r\n-        this.cstr = cstr;\r\n-    }\r\n-\r\n-    public String getCstr() {\r\n-        return this.cstr;\r\n-    }\r\n-\r\n-    public void setCint(int cint) {\r\n-        this.cint = cint;\r\n-    }\r\n-\r\n-    public int getCint() {\r\n-        return this.cint;\r\n-    }\r\n-\r\n-    public void setCdbl(double cdbl) {\r\n-        this.cdbl = cdbl;\r\n-    }\r\n-\r\n-    public double getCdbl() {\r\n-        return this.cdbl;\r\n-    }\r\n-\r\n-    public void setEs(List es) {\r\n-        this.es = es;\r\n-    }\r\n-\r\n-    public List getEs() {\r\n-        return this.es;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class AttachC\n+    extends AttachB {\n+\n+    private String cstr;\n+    private int cint;\n+    private double cdbl;\n+    private List es = new LinkedList(); // non-DFG\n+\n+    public void setCstr(String cstr) {\n+        this.cstr = cstr;\n+    }\n+\n+    public String getCstr() {\n+        return this.cstr;\n+    }\n+\n+    public void setCint(int cint) {\n+        this.cint = cint;\n+    }\n+\n+    public int getCint() {\n+        return this.cint;\n+    }\n+\n+    public void setCdbl(double cdbl) {\n+        this.cdbl = cdbl;\n+    }\n+\n+    public double getCdbl() {\n+        return this.cdbl;\n+    }\n+\n+    public void setEs(List es) {\n+        this.es = es;\n+    }\n+\n+    public List getEs() {\n+        return this.es;\n+    }\n+}"},{"sha":"eb8fc5552393359074354618974cf2182eaab424","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","status":"modified","additions":121,"deletions":121,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,121 +1,121 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-import java.util.TreeMap;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class AttachD\r\n-    implements Serializable {\r\n-\r\n-    private Object version;\r\n-\r\n-    private String dstr;\r\n-    private int dint;\r\n-    private double ddbl;\r\n-    private AttachA a;\r\n-    private Set bs = new HashSet(); // DFG\r\n-    private Map pcStringMap = new HashMap();\r\n-    private TreeMap bigIntegerPCMap = new TreeMap();\r\n-\r\n-    private AttachE embeddedE;\r\n-    private AttachA embeddedA;\r\n-\r\n-    public void setDstr(String dstr) {\r\n-        this.dstr = dstr;\r\n-    }\r\n-\r\n-    public String getDstr() {\r\n-        return this.dstr;\r\n-    }\r\n-\r\n-    public void setDint(int dint) {\r\n-        this.dint = dint;\r\n-    }\r\n-\r\n-    public int getDint() {\r\n-        return this.dint;\r\n-    }\r\n-\r\n-    public void setDdbl(double ddbl) {\r\n-        this.ddbl = ddbl;\r\n-    }\r\n-\r\n-    public double getDdbl() {\r\n-        return this.ddbl;\r\n-    }\r\n-\r\n-    public AttachA getA() {\r\n-        return a;\r\n-    }\r\n-\r\n-    public void setA(AttachA a) {\r\n-        this.a = a;\r\n-    }\r\n-\r\n-    public void setBs(Set bs) {\r\n-        this.bs = bs;\r\n-    }\r\n-\r\n-    public Set getBs() {\r\n-        return this.bs;\r\n-    }\r\n-\r\n-    public void setPcStringMap(Map pcStringMap) {\r\n-        this.pcStringMap = pcStringMap;\r\n-    }\r\n-\r\n-    public Map getPcStringMap() {\r\n-        return this.pcStringMap;\r\n-    }\r\n-\r\n-    public void setBigIntegerPCMap(TreeMap bigIntegerPCMap) {\r\n-        this.bigIntegerPCMap = bigIntegerPCMap;\r\n-    }\r\n-\r\n-    public TreeMap getBigIntegerPCMap() {\r\n-        return this.bigIntegerPCMap;\r\n-    }\r\n-\r\n-    public void setEmbeddedE(AttachE embeddedE) {\r\n-        this.embeddedE = embeddedE;\r\n-    }\r\n-\r\n-    public AttachE getEmbeddedE() {\r\n-        return this.embeddedE;\r\n-    }\r\n-\r\n-    public void setEmbeddedA(AttachA embeddedA) {\r\n-        this.embeddedA = embeddedA;\r\n-    }\r\n-\r\n-    public AttachA getEmbeddedA() {\r\n-        return this.embeddedA;\r\n-    }\r\n-\r\n-    public Object getVersion() {\r\n-        return this.version;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class AttachD\n+    implements Serializable {\n+\n+    private Object version;\n+\n+    private String dstr;\n+    private int dint;\n+    private double ddbl;\n+    private AttachA a;\n+    private Set bs = new HashSet(); // DFG\n+    private Map pcStringMap = new HashMap();\n+    private TreeMap bigIntegerPCMap = new TreeMap();\n+\n+    private AttachE embeddedE;\n+    private AttachA embeddedA;\n+\n+    public void setDstr(String dstr) {\n+        this.dstr = dstr;\n+    }\n+\n+    public String getDstr() {\n+        return this.dstr;\n+    }\n+\n+    public void setDint(int dint) {\n+        this.dint = dint;\n+    }\n+\n+    public int getDint() {\n+        return this.dint;\n+    }\n+\n+    public void setDdbl(double ddbl) {\n+        this.ddbl = ddbl;\n+    }\n+\n+    public double getDdbl() {\n+        return this.ddbl;\n+    }\n+\n+    public AttachA getA() {\n+        return a;\n+    }\n+\n+    public void setA(AttachA a) {\n+        this.a = a;\n+    }\n+\n+    public void setBs(Set bs) {\n+        this.bs = bs;\n+    }\n+\n+    public Set getBs() {\n+        return this.bs;\n+    }\n+\n+    public void setPcStringMap(Map pcStringMap) {\n+        this.pcStringMap = pcStringMap;\n+    }\n+\n+    public Map getPcStringMap() {\n+        return this.pcStringMap;\n+    }\n+\n+    public void setBigIntegerPCMap(TreeMap bigIntegerPCMap) {\n+        this.bigIntegerPCMap = bigIntegerPCMap;\n+    }\n+\n+    public TreeMap getBigIntegerPCMap() {\n+        return this.bigIntegerPCMap;\n+    }\n+\n+    public void setEmbeddedE(AttachE embeddedE) {\n+        this.embeddedE = embeddedE;\n+    }\n+\n+    public AttachE getEmbeddedE() {\n+        return this.embeddedE;\n+    }\n+\n+    public void setEmbeddedA(AttachA embeddedA) {\n+        this.embeddedA = embeddedA;\n+    }\n+\n+    public AttachA getEmbeddedA() {\n+        return this.embeddedA;\n+    }\n+\n+    public Object getVersion() {\n+        return this.version;\n+    }\n+}"},{"sha":"2f636c95339512962b1a8167f90b1cea9ce7a03b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,85 +1,85 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.Date;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class AttachE\r\n-    implements Serializable {\r\n-\r\n-    private Object version;\r\n-\r\n-    private String estr;\r\n-    private int eint;\r\n-    private double edbl;\r\n-    private AttachB b;\r\n-    private AttachF f;\r\n-    private Date date;\r\n-\r\n-    public void setEstr(String estr) {\r\n-        this.estr = estr;\r\n-    }\r\n-\r\n-    public String getEstr() {\r\n-        return this.estr;\r\n-    }\r\n-\r\n-    public void setEint(int eint) {\r\n-        this.eint = eint;\r\n-    }\r\n-\r\n-    public int getEint() {\r\n-        return this.eint;\r\n-    }\r\n-\r\n-    public void setEdbl(double edbl) {\r\n-        this.edbl = edbl;\r\n-    }\r\n-\r\n-    public double getEdbl() {\r\n-        return this.edbl;\r\n-    }\r\n-\r\n-    public void setB(AttachB b) {\r\n-        this.b = b;\r\n-    }\r\n-\r\n-    public AttachB getB() {\r\n-        return this.b;\r\n-    }\r\n-\r\n-    public void setF(AttachF f) {\r\n-        this.f = f;\r\n-    }\r\n-\r\n-    public AttachF getF() {\r\n-        return this.f;\r\n-    }\r\n-\r\n-    public void setDate(Date date) {\r\n-        this.date = date;\r\n-    }\r\n-\r\n-    public Date getDate() {\r\n-        return this.date;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class AttachE\n+    implements Serializable {\n+\n+    private Object version;\n+\n+    private String estr;\n+    private int eint;\n+    private double edbl;\n+    private AttachB b;\n+    private AttachF f;\n+    private Date date;\n+\n+    public void setEstr(String estr) {\n+        this.estr = estr;\n+    }\n+\n+    public String getEstr() {\n+        return this.estr;\n+    }\n+\n+    public void setEint(int eint) {\n+        this.eint = eint;\n+    }\n+\n+    public int getEint() {\n+        return this.eint;\n+    }\n+\n+    public void setEdbl(double edbl) {\n+        this.edbl = edbl;\n+    }\n+\n+    public double getEdbl() {\n+        return this.edbl;\n+    }\n+\n+    public void setB(AttachB b) {\n+        this.b = b;\n+    }\n+\n+    public AttachB getB() {\n+        return this.b;\n+    }\n+\n+    public void setF(AttachF f) {\n+        this.f = f;\n+    }\n+\n+    public AttachF getF() {\n+        return this.f;\n+    }\n+\n+    public void setDate(Date date) {\n+        this.date = date;\n+    }\n+\n+    public Date getDate() {\n+        return this.date;\n+    }\n+}"},{"sha":"3e5a8f2b47afa29d067ece68b446c5da81cbb1c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","status":"modified","additions":135,"deletions":135,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,135 +1,135 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import java.util.StringTokenizer;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class AttachF\r\n-    implements Serializable {\r\n-\r\n-    private int id1;\r\n-    private String id2;\r\n-\r\n-    private String fstr;\r\n-    private int fint;\r\n-    private double fdbl;\r\n-    private AttachE e;\r\n-    private List strings = new ArrayList();\r\n-\r\n-    private AttachC embeddedC;\r\n-\r\n-    public void setFstr(String fstr) {\r\n-        this.fstr = fstr;\r\n-    }\r\n-\r\n-    public String getFstr() {\r\n-        return this.fstr;\r\n-    }\r\n-\r\n-    public void setFint(int fint) {\r\n-        this.fint = fint;\r\n-    }\r\n-\r\n-    public int getFint() {\r\n-        return this.fint;\r\n-    }\r\n-\r\n-    public void setFdbl(double fdbl) {\r\n-        this.fdbl = fdbl;\r\n-    }\r\n-\r\n-    public double getFdbl() {\r\n-        return this.fdbl;\r\n-    }\r\n-\r\n-    public void setE(AttachE e) {\r\n-        this.e = e;\r\n-    }\r\n-\r\n-    public AttachE getE() {\r\n-        return this.e;\r\n-    }\r\n-\r\n-    public void setStrings(List strings) {\r\n-        this.strings = strings;\r\n-    }\r\n-\r\n-    public List getStrings() {\r\n-        return this.strings;\r\n-    }\r\n-\r\n-    public static class ID {\r\n-\r\n-        public int id1;\r\n-        public String id2;\r\n-\r\n-        public ID() {\r\n-        }\r\n-\r\n-        public ID(String str) {\r\n-            StringTokenizer tok = new StringTokenizer(str, \":\");\r\n-            id1 = Integer.parseInt(tok.nextToken());\r\n-            id2 = tok.nextToken();\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return id1 + (id2 == null ? 0 : id2.hashCode());\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return id1 + \":\" + id2;\r\n-        }\r\n-\r\n-        public boolean equals(Object other) {\r\n-            return other instanceof ID\r\n-                && ((ID) other).id1 == id1\r\n-                && (id2 == null ? ((ID) other).id2 == null\r\n-                : id2.equals(((ID) other).id2));\r\n-        }\r\n-    }\r\n-\r\n-    public void setId1(int id1) {\r\n-        this.id1 = id1;\r\n-    }\r\n-\r\n-    public int getId1() {\r\n-        return this.id1;\r\n-    }\r\n-\r\n-    public void setId2(String id2) {\r\n-        this.id2 = id2;\r\n-    }\r\n-\r\n-    public String getId2() {\r\n-        return this.id2;\r\n-    }\r\n-\r\n-    public void setEmbeddedC(AttachC embeddedC) {\r\n-        this.embeddedC = embeddedC;\r\n-    }\r\n-\r\n-    public AttachC getEmbeddedC() {\r\n-        return this.embeddedC;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class AttachF\n+    implements Serializable {\n+\n+    private int id1;\n+    private String id2;\n+\n+    private String fstr;\n+    private int fint;\n+    private double fdbl;\n+    private AttachE e;\n+    private List strings = new ArrayList();\n+\n+    private AttachC embeddedC;\n+\n+    public void setFstr(String fstr) {\n+        this.fstr = fstr;\n+    }\n+\n+    public String getFstr() {\n+        return this.fstr;\n+    }\n+\n+    public void setFint(int fint) {\n+        this.fint = fint;\n+    }\n+\n+    public int getFint() {\n+        return this.fint;\n+    }\n+\n+    public void setFdbl(double fdbl) {\n+        this.fdbl = fdbl;\n+    }\n+\n+    public double getFdbl() {\n+        return this.fdbl;\n+    }\n+\n+    public void setE(AttachE e) {\n+        this.e = e;\n+    }\n+\n+    public AttachE getE() {\n+        return this.e;\n+    }\n+\n+    public void setStrings(List strings) {\n+        this.strings = strings;\n+    }\n+\n+    public List getStrings() {\n+        return this.strings;\n+    }\n+\n+    public static class ID {\n+\n+        public int id1;\n+        public String id2;\n+\n+        public ID() {\n+        }\n+\n+        public ID(String str) {\n+            StringTokenizer tok = new StringTokenizer(str, \":\");\n+            id1 = Integer.parseInt(tok.nextToken());\n+            id2 = tok.nextToken();\n+        }\n+\n+        public int hashCode() {\n+            return id1 + (id2 == null ? 0 : id2.hashCode());\n+        }\n+\n+        public String toString() {\n+            return id1 + \":\" + id2;\n+        }\n+\n+        public boolean equals(Object other) {\n+            return other instanceof ID\n+                && ((ID) other).id1 == id1\n+                && (id2 == null ? ((ID) other).id2 == null\n+                : id2.equals(((ID) other).id2));\n+        }\n+    }\n+\n+    public void setId1(int id1) {\n+        this.id1 = id1;\n+    }\n+\n+    public int getId1() {\n+        return this.id1;\n+    }\n+\n+    public void setId2(String id2) {\n+        this.id2 = id2;\n+    }\n+\n+    public String getId2() {\n+        return this.id2;\n+    }\n+\n+    public void setEmbeddedC(AttachC embeddedC) {\n+        this.embeddedC = embeddedC;\n+    }\n+\n+    public AttachC getEmbeddedC() {\n+        return this.embeddedC;\n+    }\n+}"},{"sha":"2298e47d21fed3c4cf46d3ed5648d9d48ab0ceb0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","status":"modified","additions":263,"deletions":263,"changes":526,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,263 +1,263 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.LinkedList;\r\n-import java.util.Locale;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.DiscriminatorColumn;\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.JoinTable;\r\n-import javax.persistence.ManyToMany;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Temporal;\r\n-import javax.persistence.TemporalType;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-import org.apache.openjpa.persistence.jdbc.ContainerTable;\r\n-import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\r\n-import org.apache.openjpa.persistence.jdbc.OrderColumn;\r\n-import org.apache.openjpa.persistence.jdbc.XJoinColumn;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name = \"TYP\")\r\n-@DiscriminatorValue(\"CACHE_A\")\r\n-public class CacheObjectA {\r\n-\r\n-    private String name = null;\r\n-\r\n-    private long age = 0;\r\n-\r\n-    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n-    private CacheObjectA relatedObj = null;\r\n-\r\n-    @PersistentCollection\r\n-    @ContainerTable(name = \"CACHE_STRINGCOLL\",\r\n-        joinColumns = @XJoinColumn(name = \"ID\"))\r\n-    @ElementJoinColumn(name = \"ELEMENT\")\r\n-    /*\r\n-      * @ManyToMany @JoinTable(name=\"CACHE_STRINGCOLL\",\r\n-      * joinColumns=@JoinColumn(name=\"ID\"),\r\n-      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n-      */\r\n-    private Collection<String> stringColl = new LinkedList();\r\n-\r\n-    /*\r\n-      * @ManyToMany @JoinTable(name=\"CACHE_RELATEDCOLL\",\r\n-      * joinColumns=@JoinColumn(name=\"ID\"),\r\n-      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n-      */\r\n-    @PersistentCollection\r\n-    @ContainerTable(name = \"CACHE_RELATEDCOLL\",\r\n-        joinColumns = @XJoinColumn(name = \"ID\"))\r\n-    @ElementJoinColumn(name = \"ELEMENT\")\r\n-    private Collection<CacheObjectA> relatedColl = new LinkedList();\r\n-\r\n-    /*\r\n-      * @PersistentCollection @ContainerTable(name=\"CACHE_AS\",\r\n-      * joinColumns=@XJoinColumn(name=\"ID\")) @ElementJoinColumn(name=\"ELEMENT\")\r\n-      * @OrderColumn(name=\"ORDR\")\r\n-      */\r\n-    @ManyToMany\r\n-    @JoinTable(name = \"CACHE_AS\", joinColumns = @JoinColumn(name = \"ID\"),\r\n-        inverseJoinColumns = @JoinColumn(name = \"ELEMENT\"))\r\n-    private CacheObjectA[] as;\r\n-\r\n-    @PersistentCollection\r\n-    @ContainerTable(name = \"CACHE_STRINGARRAY\",\r\n-        joinColumns = @XJoinColumn(name = \"ID\"))\r\n-    @ElementJoinColumn(name = \"ELEMENT\")\r\n-    @OrderColumn(name = \"ORDR\")\r\n-    /*\r\n-      * @ManyToMany @JoinTable(name=\"CACHE_STRINGARRAY\",\r\n-      * joinColumns=@JoinColumn(name=\"ID\"),\r\n-      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n-      */\r\n-    private String[] stringArray;\r\n-\r\n-    @PersistentCollection\r\n-    @ContainerTable(name = \"CACHE_PRIMITIVEARRAY\",\r\n-        joinColumns = @XJoinColumn(name = \"ID\"))\r\n-    @ElementJoinColumn(name = \"ELEMENT\")\r\n-    @OrderColumn(name = \"ORDR\")\r\n-    /*\r\n-      * @ManyToMany @JoinTable(name=\"CACHE_PRIMITIVEARRAY\",\r\n-      * joinColumns=@JoinColumn(name=\"ID\"),\r\n-      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n-      */\r\n-    private float[] primitiveArray;\r\n-\r\n-    @PersistentCollection\r\n-    @ContainerTable(name = \"CACHE_DATEARRAY\",\r\n-        joinColumns = @XJoinColumn(name = \"ID\"))\r\n-    @ElementJoinColumn(name = \"ELEMENT\")\r\n-    @OrderColumn(name = \"ORDR\")\r\n-    /*\r\n-      * @ManyToMany @JoinTable(name=\"CACHE_DATEARRAY\",\r\n-      * joinColumns=@JoinColumn(name=\"ID\"),\r\n-      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n-      */\r\n-    private Date[] dateArray;\r\n-\r\n-    @Temporal(TemporalType.DATE)\r\n-    private Date date;\r\n-\r\n-    private Locale locale;\r\n-\r\n-    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n-    private CacheObjectB relatedB = null;\r\n-\r\n-    @OneToOne(fetch = FetchType.LAZY, cascade = { CascadeType.ALL })\r\n-    private CacheObjectInterface relatedInterface = null;\r\n-\r\n-    public CacheObjectA() {\r\n-    }\r\n-\r\n-    public CacheObjectA(String name, long age) {\r\n-        this.name = name;\r\n-        this.age = age;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public long getAge() {\r\n-        return age;\r\n-    }\r\n-\r\n-    public void setAge(long age) {\r\n-        this.age = age;\r\n-    }\r\n-\r\n-    public CacheObjectA getRelatedObject() {\r\n-        return relatedObj;\r\n-    }\r\n-\r\n-    public void setRelatedObject(CacheObjectA o) {\r\n-        relatedObj = o;\r\n-    }\r\n-\r\n-    public Collection getStringCollection() {\r\n-        return stringColl;\r\n-    }\r\n-\r\n-    public void setStringCollection(Collection coll) {\r\n-        stringColl = coll;\r\n-    }\r\n-\r\n-    public Collection getRelatedCollection() {\r\n-        return relatedColl;\r\n-    }\r\n-\r\n-    public void setRelatedCollection(Collection coll) {\r\n-        relatedColl = coll;\r\n-    }\r\n-\r\n-    public CacheObjectA[] getRelatedArray() {\r\n-        return as;\r\n-    }\r\n-\r\n-    public void setRelatedArray(CacheObjectA[] array) {\r\n-        as = array;\r\n-    }\r\n-\r\n-    public String[] getStringArray() {\r\n-        return stringArray;\r\n-    }\r\n-\r\n-    public void setStringArray(String[] array) {\r\n-        stringArray = array;\r\n-    }\r\n-\r\n-    public void setPrimitiveArray(float[] val) {\r\n-        primitiveArray = val;\r\n-    }\r\n-\r\n-    public float[] getPrimitiveArray() {\r\n-        return primitiveArray;\r\n-    }\r\n-\r\n-    public void setDateArray(Date[] val) {\r\n-        dateArray = val;\r\n-    }\r\n-\r\n-    public Date[] getDateArray() {\r\n-        return dateArray;\r\n-    }\r\n-\r\n-    public void setDate(Date val) {\r\n-        date = val;\r\n-    }\r\n-\r\n-    public Date getDate() {\r\n-        return date;\r\n-    }\r\n-\r\n-    public void setLocale(Locale val) {\r\n-        locale = val;\r\n-    }\r\n-\r\n-    public Locale getLocale() {\r\n-        return locale;\r\n-    }\r\n-\r\n-    public void setRelatedB(CacheObjectB val) {\r\n-        relatedB = val;\r\n-    }\r\n-\r\n-    public CacheObjectB getRelatedB() {\r\n-        return relatedB;\r\n-    }\r\n-\r\n-    public void setRelatedInterface(CacheObjectInterface val) {\r\n-        relatedInterface = val;\r\n-    }\r\n-\r\n-    public CacheObjectInterface getRelatedInterface() {\r\n-        return relatedInterface;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        try {\r\n-            return \"CacheObjectA: \" + super.toString() + \"; name: \" + name\r\n-                + \"; age: \" + age;\r\n-        }\r\n-        catch (Exception e) {\r\n-            return \"CacheObjectA: \" + super.toString() + \"; \"\r\n-                + \"Exception in toString(): \" + e;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.Locale;\n+import javax.persistence.CascadeType;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+import org.apache.openjpa.persistence.jdbc.ContainerTable;\n+import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\n+import org.apache.openjpa.persistence.jdbc.OrderColumn;\n+import org.apache.openjpa.persistence.jdbc.XJoinColumn;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"TYP\")\n+@DiscriminatorValue(\"CACHE_A\")\n+public class CacheObjectA {\n+\n+    private String name = null;\n+\n+    private long age = 0;\n+\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\n+    private CacheObjectA relatedObj = null;\n+\n+    @PersistentCollection\n+    @ContainerTable(name = \"CACHE_STRINGCOLL\",\n+        joinColumns = @XJoinColumn(name = \"ID\"))\n+    @ElementJoinColumn(name = \"ELEMENT\")\n+    /*\n+      * @ManyToMany @JoinTable(name=\"CACHE_STRINGCOLL\",\n+      * joinColumns=@JoinColumn(name=\"ID\"),\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\n+      */\n+    private Collection<String> stringColl = new LinkedList();\n+\n+    /*\n+      * @ManyToMany @JoinTable(name=\"CACHE_RELATEDCOLL\",\n+      * joinColumns=@JoinColumn(name=\"ID\"),\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\n+      */\n+    @PersistentCollection\n+    @ContainerTable(name = \"CACHE_RELATEDCOLL\",\n+        joinColumns = @XJoinColumn(name = \"ID\"))\n+    @ElementJoinColumn(name = \"ELEMENT\")\n+    private Collection<CacheObjectA> relatedColl = new LinkedList();\n+\n+    /*\n+      * @PersistentCollection @ContainerTable(name=\"CACHE_AS\",\n+      * joinColumns=@XJoinColumn(name=\"ID\")) @ElementJoinColumn(name=\"ELEMENT\")\n+      * @OrderColumn(name=\"ORDR\")\n+      */\n+    @ManyToMany\n+    @JoinTable(name = \"CACHE_AS\", joinColumns = @JoinColumn(name = \"ID\"),\n+        inverseJoinColumns = @JoinColumn(name = \"ELEMENT\"))\n+    private CacheObjectA[] as;\n+\n+    @PersistentCollection\n+    @ContainerTable(name = \"CACHE_STRINGARRAY\",\n+        joinColumns = @XJoinColumn(name = \"ID\"))\n+    @ElementJoinColumn(name = \"ELEMENT\")\n+    @OrderColumn(name = \"ORDR\")\n+    /*\n+      * @ManyToMany @JoinTable(name=\"CACHE_STRINGARRAY\",\n+      * joinColumns=@JoinColumn(name=\"ID\"),\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\n+      */\n+    private String[] stringArray;\n+\n+    @PersistentCollection\n+    @ContainerTable(name = \"CACHE_PRIMITIVEARRAY\",\n+        joinColumns = @XJoinColumn(name = \"ID\"))\n+    @ElementJoinColumn(name = \"ELEMENT\")\n+    @OrderColumn(name = \"ORDR\")\n+    /*\n+      * @ManyToMany @JoinTable(name=\"CACHE_PRIMITIVEARRAY\",\n+      * joinColumns=@JoinColumn(name=\"ID\"),\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\n+      */\n+    private float[] primitiveArray;\n+\n+    @PersistentCollection\n+    @ContainerTable(name = \"CACHE_DATEARRAY\",\n+        joinColumns = @XJoinColumn(name = \"ID\"))\n+    @ElementJoinColumn(name = \"ELEMENT\")\n+    @OrderColumn(name = \"ORDR\")\n+    /*\n+      * @ManyToMany @JoinTable(name=\"CACHE_DATEARRAY\",\n+      * joinColumns=@JoinColumn(name=\"ID\"),\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\n+      */\n+    private Date[] dateArray;\n+\n+    @Temporal(TemporalType.DATE)\n+    private Date date;\n+\n+    private Locale locale;\n+\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\n+    private CacheObjectB relatedB = null;\n+\n+    @OneToOne(fetch = FetchType.LAZY, cascade = { CascadeType.ALL })\n+    private CacheObjectInterface relatedInterface = null;\n+\n+    public CacheObjectA() {\n+    }\n+\n+    public CacheObjectA(String name, long age) {\n+        this.name = name;\n+        this.age = age;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(long age) {\n+        this.age = age;\n+    }\n+\n+    public CacheObjectA getRelatedObject() {\n+        return relatedObj;\n+    }\n+\n+    public void setRelatedObject(CacheObjectA o) {\n+        relatedObj = o;\n+    }\n+\n+    public Collection getStringCollection() {\n+        return stringColl;\n+    }\n+\n+    public void setStringCollection(Collection coll) {\n+        stringColl = coll;\n+    }\n+\n+    public Collection getRelatedCollection() {\n+        return relatedColl;\n+    }\n+\n+    public void setRelatedCollection(Collection coll) {\n+        relatedColl = coll;\n+    }\n+\n+    public CacheObjectA[] getRelatedArray() {\n+        return as;\n+    }\n+\n+    public void setRelatedArray(CacheObjectA[] array) {\n+        as = array;\n+    }\n+\n+    public String[] getStringArray() {\n+        return stringArray;\n+    }\n+\n+    public void setStringArray(String[] array) {\n+        stringArray = array;\n+    }\n+\n+    public void setPrimitiveArray(float[] val) {\n+        primitiveArray = val;\n+    }\n+\n+    public float[] getPrimitiveArray() {\n+        return primitiveArray;\n+    }\n+\n+    public void setDateArray(Date[] val) {\n+        dateArray = val;\n+    }\n+\n+    public Date[] getDateArray() {\n+        return dateArray;\n+    }\n+\n+    public void setDate(Date val) {\n+        date = val;\n+    }\n+\n+    public Date getDate() {\n+        return date;\n+    }\n+\n+    public void setLocale(Locale val) {\n+        locale = val;\n+    }\n+\n+    public Locale getLocale() {\n+        return locale;\n+    }\n+\n+    public void setRelatedB(CacheObjectB val) {\n+        relatedB = val;\n+    }\n+\n+    public CacheObjectB getRelatedB() {\n+        return relatedB;\n+    }\n+\n+    public void setRelatedInterface(CacheObjectInterface val) {\n+        relatedInterface = val;\n+    }\n+\n+    public CacheObjectInterface getRelatedInterface() {\n+        return relatedInterface;\n+    }\n+\n+    public String toString() {\n+        try {\n+            return \"CacheObjectA: \" + super.toString() + \"; name: \" + name\n+                + \"; age: \" + age;\n+        }\n+        catch (Exception e) {\n+            return \"CacheObjectA: \" + super.toString() + \"; \"\n+                + \"Exception in toString(): \" + e;\n+        }\n+    }\n+}"},{"sha":"85b3fa5dea7b793edebcd85a787eb710d37ec789","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@DiscriminatorValue(\"CACHE_CHILD1\")\r\n-public class CacheObjectAChild1 extends CacheObjectA {\r\n-\r\n-    private String str1 = null;\r\n-\r\n-    protected CacheObjectAChild1() {\r\n-    }\r\n-\r\n-    public CacheObjectAChild1(String s, String name, int age) {\r\n-        super(name, age);\r\n-        this.str1 = s;\r\n-    }\r\n-\r\n-    public String getStr1() {\r\n-        return str1;\r\n-    }\r\n-\r\n-    public void setStr1(String s) {\r\n-        this.str1 = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@DiscriminatorValue(\"CACHE_CHILD1\")\n+public class CacheObjectAChild1 extends CacheObjectA {\n+\n+    private String str1 = null;\n+\n+    protected CacheObjectAChild1() {\n+    }\n+\n+    public CacheObjectAChild1(String s, String name, int age) {\n+        super(name, age);\n+        this.str1 = s;\n+    }\n+\n+    public String getStr1() {\n+        return str1;\n+    }\n+\n+    public void setStr1(String s) {\n+        this.str1 = s;\n+    }\n+}"},{"sha":"a71b76db91716f7cfbe21a7d4f2d4615efd7fed9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.DataCache;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"CACHE_CHILD2\")\r\n-@DataCache(enabled = false)\r\n-public class CacheObjectAChild2 extends CacheObjectA {\r\n-\r\n-    private String str2 = null;\r\n-\r\n-    protected CacheObjectAChild2() {\r\n-    }\r\n-\r\n-    public CacheObjectAChild2(String s, String name, int age) {\r\n-        super(name, age);\r\n-        this.str2 = s;\r\n-    }\r\n-\r\n-    public String getStr2() {\r\n-        return str2;\r\n-    }\r\n-\r\n-    public void setStr2(String s) {\r\n-        this.str2 = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.DataCache;\n+\n+@Entity\n+@DiscriminatorValue(\"CACHE_CHILD2\")\n+@DataCache(enabled = false)\n+public class CacheObjectAChild2 extends CacheObjectA {\n+\n+    private String str2 = null;\n+\n+    protected CacheObjectAChild2() {\n+    }\n+\n+    public CacheObjectAChild2(String s, String name, int age) {\n+        super(name, age);\n+        this.str2 = s;\n+    }\n+\n+    public String getStr2() {\n+        return str2;\n+    }\n+\n+    public void setStr2(String s) {\n+        this.str2 = s;\n+    }\n+}"},{"sha":"e12505669ad2e2bc281f5ae299caca29f5e0414d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorColumn;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-import org.apache.openjpa.persistence.DataCache;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name = \"TYP\")\r\n-@DataCache(enabled = false)\r\n-public class CacheObjectB {\r\n-\r\n-    private String str = null;\r\n-\r\n-    public CacheObjectB() {\r\n-    }\r\n-\r\n-    public CacheObjectB(String s) {\r\n-        this.str = s;\r\n-    }\r\n-\r\n-    public String getStr() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setStr(String s) {\r\n-        this.str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+import org.apache.openjpa.persistence.DataCache;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"TYP\")\n+@DataCache(enabled = false)\n+public class CacheObjectB {\n+\n+    private String str = null;\n+\n+    public CacheObjectB() {\n+    }\n+\n+    public CacheObjectB(String s) {\n+        this.str = s;\n+    }\n+\n+    public String getStr() {\n+        return str;\n+    }\n+\n+    public void setStr(String s) {\n+        this.str = s;\n+    }\n+}"},{"sha":"1b7db9c8cc298370c3c98e860f7a9db7cfe8a4f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,44 +1,44 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class CacheObjectBChild1\r\n-    extends CacheObjectB {\r\n-\r\n-    private String str1 = null;\r\n-\r\n-    protected CacheObjectBChild1() {\r\n-    }\r\n-\r\n-    public CacheObjectBChild1(String s, String name) {\r\n-        super(name);\r\n-        this.str1 = s;\r\n-    }\r\n-\r\n-    public String getStr1() {\r\n-        return str1;\r\n-    }\r\n-\r\n-    public void setStr1(String s) {\r\n-        this.str1 = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class CacheObjectBChild1\n+    extends CacheObjectB {\n+\n+    private String str1 = null;\n+\n+    protected CacheObjectBChild1() {\n+    }\n+\n+    public CacheObjectBChild1(String s, String name) {\n+        super(name);\n+        this.str1 = s;\n+    }\n+\n+    public String getStr1() {\n+        return str1;\n+    }\n+\n+    public void setStr1(String s) {\n+        this.str1 = s;\n+    }\n+}"},{"sha":"53b148bb0b336aac83f693e78d0e8d655b6003a9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorColumn;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-import org.apache.openjpa.persistence.DataCache;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name = \"TYP\")\r\n-@DataCache(name = \"not-the-default-cache\")\r\n-public class CacheObjectC\r\n-    implements CacheObjectInterface {\r\n-\r\n-    private String str = null;\r\n-\r\n-    public CacheObjectC() {\r\n-    }\r\n-\r\n-    public CacheObjectC(String s) {\r\n-        this.str = s;\r\n-    }\r\n-\r\n-    public String getStr() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setStr(String s) {\r\n-        this.str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+import org.apache.openjpa.persistence.DataCache;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"TYP\")\n+@DataCache(name = \"not-the-default-cache\")\n+public class CacheObjectC\n+    implements CacheObjectInterface {\n+\n+    private String str = null;\n+\n+    public CacheObjectC() {\n+    }\n+\n+    public CacheObjectC(String s) {\n+        this.str = s;\n+    }\n+\n+    public String getStr() {\n+        return str;\n+    }\n+\n+    public void setStr(String s) {\n+        this.str = s;\n+    }\n+}"},{"sha":"591d0c8be4f133dc7bcb927772d1b086d6bd7845","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorColumn;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-import org.apache.openjpa.persistence.DataCache;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name = \"TYP\")\r\n-@DataCache(name = \"not-the-default-cache\")\r\n-public class CacheObjectD {\r\n-\r\n-    private String str = null;\r\n-\r\n-    public CacheObjectD() {\r\n-    }\r\n-\r\n-    public CacheObjectD(String s) {\r\n-        this.str = s;\r\n-    }\r\n-\r\n-    public String getStr() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setStr(String s) {\r\n-        this.str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+import org.apache.openjpa.persistence.DataCache;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"TYP\")\n+@DataCache(name = \"not-the-default-cache\")\n+public class CacheObjectD {\n+\n+    private String str = null;\n+\n+    public CacheObjectD() {\n+    }\n+\n+    public CacheObjectD(String s) {\n+        this.str = s;\n+    }\n+\n+    public String getStr() {\n+        return str;\n+    }\n+\n+    public void setStr(String s) {\n+        this.str = s;\n+    }\n+}"},{"sha":"4291c34d76362e6a3d54851082c5b8fa0dd866c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorColumn;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name = \"TYP\")\r\n-public class CacheObjectE {\r\n-\r\n-    private String str = null;\r\n-\r\n-    public CacheObjectE() {\r\n-    }\r\n-\r\n-    public CacheObjectE(String s) {\r\n-        this.str = s;\r\n-    }\r\n-\r\n-    public String getStr() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setStr(String s) {\r\n-        this.str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"TYP\")\n+public class CacheObjectE {\n+\n+    private String str = null;\n+\n+    public CacheObjectE() {\n+    }\n+\n+    public CacheObjectE(String s) {\n+        this.str = s;\n+    }\n+\n+    public String getStr() {\n+        return str;\n+    }\n+\n+    public void setStr(String s) {\n+        this.str = s;\n+    }\n+}"},{"sha":"d414c2cd0ac0c8fa4590e7d72747c236ce257b36","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.DataCache;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@DataCache(timeout = 1000)\r\n-public class CacheObjectF\r\n-    extends CacheObjectE {\r\n-\r\n-    public CacheObjectF() {\r\n-    }\r\n-\r\n-    public CacheObjectF(String s) {\r\n-        super(s);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.DataCache;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@DataCache(timeout = 1000)\n+public class CacheObjectF\n+    extends CacheObjectE {\n+\n+    public CacheObjectF() {\n+    }\n+\n+    public CacheObjectF(String s) {\n+        super(s);\n+    }\n+}"},{"sha":"75f7a06fe7febdb12d58382caab094ceaef5e8be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.DataCache;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@DataCache(timeout = 5000)\r\n-public class CacheObjectG\r\n-    extends CacheObjectF {\r\n-\r\n-    public CacheObjectG() {\r\n-    }\r\n-\r\n-    public CacheObjectG(String s) {\r\n-        super(s);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.DataCache;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@DataCache(timeout = 5000)\n+public class CacheObjectG\n+    extends CacheObjectF {\n+\n+    public CacheObjectG() {\n+    }\n+\n+    public CacheObjectG(String s) {\n+        super(s);\n+    }\n+}"},{"sha":"f19557b61c211660a3b3882f5b5d98601950b21b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.DataCache;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@DataCache(timeout = 500)\r\n-public class CacheObjectH\r\n-    extends CacheObjectG {\r\n-\r\n-    public CacheObjectH() {\r\n-    }\r\n-\r\n-    public CacheObjectH(String s) {\r\n-        super(s);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.DataCache;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@DataCache(timeout = 500)\n+public class CacheObjectH\n+    extends CacheObjectG {\n+\n+    public CacheObjectH() {\n+    }\n+\n+    public CacheObjectH(String s) {\n+        super(s);\n+    }\n+}"},{"sha":"3b5fa61ca3a4cfb32531c5379b74e0dbfa29e281","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,26 +1,26 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-public interface CacheObjectInterface {\r\n-\r\n-    public void setStr(String val);\r\n-\r\n-    public String getStr();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+public interface CacheObjectInterface {\n+\n+    public void setStr(String val);\n+\n+    public String getStr();\n+}"},{"sha":"e15cc44f6ec600721e317638ed2d0b90e5e7bdf3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.DiscriminatorColumn;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name = \"TYP\")\r\n-public class CacheObjectJ {\r\n-\r\n-    private String str = null;\r\n-    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n-    private CacheObjectE e = null;\r\n-\r\n-    public CacheObjectJ() {\r\n-    }\r\n-\r\n-    public CacheObjectJ(String s, CacheObjectE e) {\r\n-        this.str = s;\r\n-        this.e = e;\r\n-    }\r\n-\r\n-    public String getStr() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setStr(String s) {\r\n-        this.str = s;\r\n-    }\r\n-\r\n-    //@Embedded()\r\n-    public CacheObjectE getE() {\r\n-        return e;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.ManyToOne;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"TYP\")\n+public class CacheObjectJ {\n+\n+    private String str = null;\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\n+    private CacheObjectE e = null;\n+\n+    public CacheObjectJ() {\n+    }\n+\n+    public CacheObjectJ(String s, CacheObjectE e) {\n+        this.str = s;\n+        this.e = e;\n+    }\n+\n+    public String getStr() {\n+        return str;\n+    }\n+\n+    public void setStr(String s) {\n+        this.str = s;\n+    }\n+\n+    //@Embedded()\n+    public CacheObjectE getE() {\n+        return e;\n+    }\n+}"},{"sha":"b5812e7bd7361985d351df0af95ce483b269580f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-/**\r\n- * A test class for our caching framework that ensures that externalized\r\n- * fields are handled properly.\r\n- */\r\n-public class CacheObjectWithExternalizedFields {\r\n-\r\n-    private Class cls;\r\n-\r\n-    public void setCls(Class cls) {\r\n-        this.cls = cls;\r\n-    }\r\n-\r\n-    public Class getCls() {\r\n-        return this.cls;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+/**\n+ * A test class for our caching framework that ensures that externalized\n+ * fields are handled properly.\n+ */\n+public class CacheObjectWithExternalizedFields {\n+\n+    private Class cls;\n+\n+    public void setCls(Class cls) {\n+        this.cls = cls;\n+    }\n+\n+    public Class getCls() {\n+        return this.cls;\n+    }\n+}"},{"sha":"1402339b839366ec6a8e3b4723d72d8d4acd40ca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.datacache.TestEmbeddedCollection;\r\n-\r\n-/**\r\n- * Embeddable persistent entity.\r\n- * \r\n- * Used in {@link TestEmbeddedCollection}.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-@Embeddable\r\n-public class EmbeddedEntity {\r\n-\tprivate String marker;\r\n-\r\n-\tpublic String getMarker() {\r\n-\t\treturn marker;\r\n-\t}\r\n-\r\n-\tpublic void setMarker(String marker) {\r\n-\t\tthis.marker = marker;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.datacache.TestEmbeddedCollection;\n+\n+/**\n+ * Embeddable persistent entity.\n+ * \n+ * Used in {@link TestEmbeddedCollection}.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Embeddable\n+public class EmbeddedEntity {\n+\tprivate String marker;\n+\n+\tpublic String getMarker() {\n+\t\treturn marker;\n+\t}\n+\n+\tpublic void setMarker(String marker) {\n+\t\tthis.marker = marker;\n+\t}\n+}"},{"sha":"d8fea935e1721874a79d750942af2cc989f6f29b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,73 +1,73 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-import org.apache.openjpa.persistence.datacache.TestEmbeddedCollection;\r\n-\r\n-/**\r\n- * Persistent entity that embeds a persistent collection of embeddable.\r\n- *  \r\n- * Used in {@link TestEmbeddedCollection}. \r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class EmbeddingOwnerEntity {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\t\r\n-\t@PersistentCollection(elementEmbedded = true, \r\n-\t\t\telementType = EmbeddedEntity.class, \r\n-\t\t\tfetch = FetchType.LAZY)\r\n-\tprivate List<EmbeddedEntity> members;\r\n-\r\n-\tpublic List<EmbeddedEntity> getMembers() {\r\n-\t\treturn members;\r\n-\t}\r\n-\r\n-\tpublic void addMember(EmbeddedEntity member) {\r\n-\t\tif (members == null)\r\n-\t\t\tmembers = new ArrayList<EmbeddedEntity>();\r\n-\t\tthis.members.add(member);\r\n-\t}\r\n-\t\r\n-\tpublic void removeMember(EmbeddedEntity member) {\r\n-\t\tif (members != null)\r\n-\t\t\tmembers.remove(member);\r\n-\t}\r\n-\t\r\n-\tpublic EmbeddedEntity removeMember(int member) {\r\n-\t\treturn (members != null) ? members.remove(member) : null;\r\n-\t}\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t} \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+import org.apache.openjpa.persistence.datacache.TestEmbeddedCollection;\n+\n+/**\n+ * Persistent entity that embeds a persistent collection of embeddable.\n+ *  \n+ * Used in {@link TestEmbeddedCollection}. \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class EmbeddingOwnerEntity {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\t@PersistentCollection(elementEmbedded = true, \n+\t\t\telementType = EmbeddedEntity.class, \n+\t\t\tfetch = FetchType.LAZY)\n+\tprivate List<EmbeddedEntity> members;\n+\n+\tpublic List<EmbeddedEntity> getMembers() {\n+\t\treturn members;\n+\t}\n+\n+\tpublic void addMember(EmbeddedEntity member) {\n+\t\tif (members == null)\n+\t\t\tmembers = new ArrayList<EmbeddedEntity>();\n+\t\tthis.members.add(member);\n+\t}\n+\t\n+\tpublic void removeMember(EmbeddedEntity member) {\n+\t\tif (members != null)\n+\t\t\tmembers.remove(member);\n+\t}\n+\t\n+\tpublic EmbeddedEntity removeMember(int member) {\n+\t\treturn (members != null) ? members.remove(member) : null;\n+\t}\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t} \n+}"},{"sha":"6531a298555b104324c59cd17cbb3f4844125f50","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,35 +1,35 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class FlushDataCacheObject {\r\n-\r\n-    private String string;\r\n-\r\n-    public void setString(String val) {\r\n-        string = val;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return string;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class FlushDataCacheObject {\n+\n+    private String string;\n+\n+    public void setString(String val) {\n+        string = val;\n+    }\n+\n+    public String getString() {\n+        return string;\n+    }\n+}"},{"sha":"73b993252f38702a53016ce38ce72435fc632e6a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,57 +1,57 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * A Simple entity for testing. Has a version field for testing optimistic\r\n- * concurrent usage.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class PObject {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\tprivate String name;\r\n-\t@Version\r\n-\tprivate int version;\r\n-\t\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\t\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-\tpublic int getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * A Simple entity for testing. Has a version field for testing optimistic\n+ * concurrent usage.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class PObject {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\tprivate String name;\n+\t@Version\n+\tprivate int version;\n+\t\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\t\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+}"},{"sha":"ed5d4bdb3ab7fd255803ac63fe11ce4a5fc60a96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","status":"modified","additions":284,"deletions":284,"changes":568,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,284 +1,284 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.Date;\r\n-import java.util.HashSet;\r\n-import java.util.Locale;\r\n-import java.util.Set;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Temporal;\r\n-import javax.persistence.TemporalType;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-@DiscriminatorValue(\"dataRt1\")\r\n-public class RuntimeTest1\r\n-    implements Serializable {\r\n-\r\n-    public static final String someStaticField = \"someField\";\r\n-\r\n-    private byte byteField;\r\n-    private boolean booleanField;\r\n-    private char charField;\r\n-    private double doubleField;\r\n-    private float floatField;\r\n-    private int intField;\r\n-    private long longField;\r\n-    private short shortField;\r\n-    private String stringField;\r\n-    private BigInteger bigIntegerField;\r\n-    private BigDecimal bigDecimalField;\r\n-    @Temporal(TemporalType.DATE)\r\n-    private Date dateField;\r\n-    private Locale localeField;\r\n-    private Byte byteObjfield;\r\n-    private Boolean booleanObjField;\r\n-    private Character charObjField;\r\n-    private Double doubleObjField;\r\n-    private Float floatObjField;\r\n-    private Integer intObjField;\r\n-    private Long longObjField;\r\n-    private Short shortObjField;\r\n-\r\n-    // transactional only\r\n-    @OneToOne(fetch = FetchType.LAZY,\r\n-        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    private TransactionalClassPC transField;\r\n-    public String transString;\r\n-\r\n-    // relations\r\n-    @OneToOne(fetch = FetchType.LAZY,\r\n-        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    private RuntimeTest1 selfOneOne;\r\n-\r\n-    @OneToMany(mappedBy = \"selfOneOne\",\r\n-        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    private Set<RuntimeTest1> selfOneMany = new HashSet<RuntimeTest1>();\r\n-\r\n-    public RuntimeTest1() {\r\n-    }\r\n-\r\n-    public RuntimeTest1(String str, int i) {\r\n-        stringField = str;\r\n-        intField = i;\r\n-    }\r\n-\r\n-    public byte getByteField() {\r\n-        return this.byteField;\r\n-    }\r\n-\r\n-    public void setByteField(byte byteField) {\r\n-        this.byteField = byteField;\r\n-    }\r\n-\r\n-    public boolean getBooleanField() {\r\n-        return this.booleanField;\r\n-    }\r\n-\r\n-    public void setBooleanField(boolean booleanField) {\r\n-        this.booleanField = booleanField;\r\n-    }\r\n-\r\n-    public char getCharField() {\r\n-        return this.charField;\r\n-    }\r\n-\r\n-    public void setCharField(char charField) {\r\n-        this.charField = charField;\r\n-    }\r\n-\r\n-    public double getDoubleField() {\r\n-        return this.doubleField;\r\n-    }\r\n-\r\n-    public void setDoubleField(double doubleField) {\r\n-        this.doubleField = doubleField;\r\n-    }\r\n-\r\n-    public float getFloatField() {\r\n-        return this.floatField;\r\n-    }\r\n-\r\n-    public void setFloatField(float floatField) {\r\n-        this.floatField = floatField;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public long getLongField() {\r\n-        return this.longField;\r\n-    }\r\n-\r\n-    public void setLongField(long longField) {\r\n-        this.longField = longField;\r\n-    }\r\n-\r\n-    public short getShortField() {\r\n-        return this.shortField;\r\n-    }\r\n-\r\n-    public void setShortField(short shortField) {\r\n-        this.shortField = shortField;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public BigInteger getBigIntegerField() {\r\n-        return this.bigIntegerField;\r\n-    }\r\n-\r\n-    public void setBigIntegerField(BigInteger bigIntegerField) {\r\n-        this.bigIntegerField = bigIntegerField;\r\n-    }\r\n-\r\n-    public BigDecimal getBigDecimalField() {\r\n-        return this.bigDecimalField;\r\n-    }\r\n-\r\n-    public void setBigDecimalField(BigDecimal bigDecimalField) {\r\n-        this.bigDecimalField = bigDecimalField;\r\n-    }\r\n-\r\n-    public Date getDateField() {\r\n-        return this.dateField;\r\n-    }\r\n-\r\n-    public void setDateField(Date dateField) {\r\n-        this.dateField = dateField;\r\n-    }\r\n-\r\n-    public Locale getLocaleField() {\r\n-        return this.localeField;\r\n-    }\r\n-\r\n-    public void setLocaleField(Locale localeField) {\r\n-        this.localeField = localeField;\r\n-    }\r\n-\r\n-    public Byte getByteObjfield() {\r\n-        return this.byteObjfield;\r\n-    }\r\n-\r\n-    public void setByteObjfield(Byte byteObjfield) {\r\n-        this.byteObjfield = byteObjfield;\r\n-    }\r\n-\r\n-    public Boolean getBooleanObjField() {\r\n-        return this.booleanObjField;\r\n-    }\r\n-\r\n-    public void setBooleanObjField(Boolean booleanObjField) {\r\n-        this.booleanObjField = booleanObjField;\r\n-    }\r\n-\r\n-    public Character getCharObjField() {\r\n-        return this.charObjField;\r\n-    }\r\n-\r\n-    public void setCharObjField(Character charObjField) {\r\n-        this.charObjField = charObjField;\r\n-    }\r\n-\r\n-    public Double getDoubleObjField() {\r\n-        return this.doubleObjField;\r\n-    }\r\n-\r\n-    public void setDoubleObjField(Double doubleObjField) {\r\n-        this.doubleObjField = doubleObjField;\r\n-    }\r\n-\r\n-    public Float getFloatObjField() {\r\n-        return this.floatObjField;\r\n-    }\r\n-\r\n-    public void setFloatObjField(Float floatObjField) {\r\n-        this.floatObjField = floatObjField;\r\n-    }\r\n-\r\n-    public Integer getIntObjField() {\r\n-        return this.intObjField;\r\n-    }\r\n-\r\n-    public void setIntObjField(Integer intObjField) {\r\n-        this.intObjField = intObjField;\r\n-    }\r\n-\r\n-    public Long getLongObjField() {\r\n-        return this.longObjField;\r\n-    }\r\n-\r\n-    public void setLongObjField(Long longObjField) {\r\n-        this.longObjField = longObjField;\r\n-    }\r\n-\r\n-    public Short getShortObjField() {\r\n-        return this.shortObjField;\r\n-    }\r\n-\r\n-    public void setShortObjField(Short shortObjField) {\r\n-        this.shortObjField = shortObjField;\r\n-    }\r\n-\r\n-    public TransactionalClassPC getTransField() {\r\n-        return this.transField;\r\n-    }\r\n-\r\n-    public void setTransField(TransactionalClassPC transField) {\r\n-        this.transField = transField;\r\n-    }\r\n-\r\n-    public RuntimeTest1 getSelfOneOne() {\r\n-        return this.selfOneOne;\r\n-    }\r\n-\r\n-    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n-        this.selfOneOne = selfOneOne;\r\n-    }\r\n-\r\n-    public Set getSelfOneMany() {\r\n-        return this.selfOneMany;\r\n-    }\r\n-\r\n-    public void setSelfOneMany(Set selfOneMany) {\r\n-        this.selfOneMany = selfOneMany;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+@DiscriminatorValue(\"dataRt1\")\n+public class RuntimeTest1\n+    implements Serializable {\n+\n+    public static final String someStaticField = \"someField\";\n+\n+    private byte byteField;\n+    private boolean booleanField;\n+    private char charField;\n+    private double doubleField;\n+    private float floatField;\n+    private int intField;\n+    private long longField;\n+    private short shortField;\n+    private String stringField;\n+    private BigInteger bigIntegerField;\n+    private BigDecimal bigDecimalField;\n+    @Temporal(TemporalType.DATE)\n+    private Date dateField;\n+    private Locale localeField;\n+    private Byte byteObjfield;\n+    private Boolean booleanObjField;\n+    private Character charObjField;\n+    private Double doubleObjField;\n+    private Float floatObjField;\n+    private Integer intObjField;\n+    private Long longObjField;\n+    private Short shortObjField;\n+\n+    // transactional only\n+    @OneToOne(fetch = FetchType.LAZY,\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    private TransactionalClassPC transField;\n+    public String transString;\n+\n+    // relations\n+    @OneToOne(fetch = FetchType.LAZY,\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    private RuntimeTest1 selfOneOne;\n+\n+    @OneToMany(mappedBy = \"selfOneOne\",\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    private Set<RuntimeTest1> selfOneMany = new HashSet<RuntimeTest1>();\n+\n+    public RuntimeTest1() {\n+    }\n+\n+    public RuntimeTest1(String str, int i) {\n+        stringField = str;\n+        intField = i;\n+    }\n+\n+    public byte getByteField() {\n+        return this.byteField;\n+    }\n+\n+    public void setByteField(byte byteField) {\n+        this.byteField = byteField;\n+    }\n+\n+    public boolean getBooleanField() {\n+        return this.booleanField;\n+    }\n+\n+    public void setBooleanField(boolean booleanField) {\n+        this.booleanField = booleanField;\n+    }\n+\n+    public char getCharField() {\n+        return this.charField;\n+    }\n+\n+    public void setCharField(char charField) {\n+        this.charField = charField;\n+    }\n+\n+    public double getDoubleField() {\n+        return this.doubleField;\n+    }\n+\n+    public void setDoubleField(double doubleField) {\n+        this.doubleField = doubleField;\n+    }\n+\n+    public float getFloatField() {\n+        return this.floatField;\n+    }\n+\n+    public void setFloatField(float floatField) {\n+        this.floatField = floatField;\n+    }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public long getLongField() {\n+        return this.longField;\n+    }\n+\n+    public void setLongField(long longField) {\n+        this.longField = longField;\n+    }\n+\n+    public short getShortField() {\n+        return this.shortField;\n+    }\n+\n+    public void setShortField(short shortField) {\n+        this.shortField = shortField;\n+    }\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public BigInteger getBigIntegerField() {\n+        return this.bigIntegerField;\n+    }\n+\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\n+        this.bigIntegerField = bigIntegerField;\n+    }\n+\n+    public BigDecimal getBigDecimalField() {\n+        return this.bigDecimalField;\n+    }\n+\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\n+        this.bigDecimalField = bigDecimalField;\n+    }\n+\n+    public Date getDateField() {\n+        return this.dateField;\n+    }\n+\n+    public void setDateField(Date dateField) {\n+        this.dateField = dateField;\n+    }\n+\n+    public Locale getLocaleField() {\n+        return this.localeField;\n+    }\n+\n+    public void setLocaleField(Locale localeField) {\n+        this.localeField = localeField;\n+    }\n+\n+    public Byte getByteObjfield() {\n+        return this.byteObjfield;\n+    }\n+\n+    public void setByteObjfield(Byte byteObjfield) {\n+        this.byteObjfield = byteObjfield;\n+    }\n+\n+    public Boolean getBooleanObjField() {\n+        return this.booleanObjField;\n+    }\n+\n+    public void setBooleanObjField(Boolean booleanObjField) {\n+        this.booleanObjField = booleanObjField;\n+    }\n+\n+    public Character getCharObjField() {\n+        return this.charObjField;\n+    }\n+\n+    public void setCharObjField(Character charObjField) {\n+        this.charObjField = charObjField;\n+    }\n+\n+    public Double getDoubleObjField() {\n+        return this.doubleObjField;\n+    }\n+\n+    public void setDoubleObjField(Double doubleObjField) {\n+        this.doubleObjField = doubleObjField;\n+    }\n+\n+    public Float getFloatObjField() {\n+        return this.floatObjField;\n+    }\n+\n+    public void setFloatObjField(Float floatObjField) {\n+        this.floatObjField = floatObjField;\n+    }\n+\n+    public Integer getIntObjField() {\n+        return this.intObjField;\n+    }\n+\n+    public void setIntObjField(Integer intObjField) {\n+        this.intObjField = intObjField;\n+    }\n+\n+    public Long getLongObjField() {\n+        return this.longObjField;\n+    }\n+\n+    public void setLongObjField(Long longObjField) {\n+        this.longObjField = longObjField;\n+    }\n+\n+    public Short getShortObjField() {\n+        return this.shortObjField;\n+    }\n+\n+    public void setShortObjField(Short shortObjField) {\n+        this.shortObjField = shortObjField;\n+    }\n+\n+    public TransactionalClassPC getTransField() {\n+        return this.transField;\n+    }\n+\n+    public void setTransField(TransactionalClassPC transField) {\n+        this.transField = transField;\n+    }\n+\n+    public RuntimeTest1 getSelfOneOne() {\n+        return this.selfOneOne;\n+    }\n+\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\n+        this.selfOneOne = selfOneOne;\n+    }\n+\n+    public Set getSelfOneMany() {\n+        return this.selfOneMany;\n+    }\n+\n+    public void setSelfOneMany(Set selfOneMany) {\n+        this.selfOneMany = selfOneMany;\n+    }\n+}"},{"sha":"4e1b58a0b88d858c5b5d81aef510a431499f6c88","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Persitent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-@DiscriminatorValue(\"dataRt2\")\r\n-public class RuntimeTest2\r\n-    extends RuntimeTest1 {\r\n-\r\n-    private int intField2;\r\n-\r\n-    public RuntimeTest2() {\r\n-    }\r\n-\r\n-    public RuntimeTest2(String str, int i) {\r\n-        super(str, i);\r\n-    }\r\n-\r\n-    public int getIntField2() {\r\n-        return this.intField2;\r\n-    }\r\n-\r\n-    public void setIntField2(int intField2) {\r\n-        this.intField2 = intField2;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Persitent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+@DiscriminatorValue(\"dataRt2\")\n+public class RuntimeTest2\n+    extends RuntimeTest1 {\n+\n+    private int intField2;\n+\n+    public RuntimeTest2() {\n+    }\n+\n+    public RuntimeTest2(String str, int i) {\n+        super(str, i);\n+    }\n+\n+    public int getIntField2() {\n+        return this.intField2;\n+    }\n+\n+    public void setIntField2(int intField2) {\n+        this.intField2 = intField2;\n+    }\n+}"},{"sha":"7ec91ec15d948ec7d518cece0b767ce4928677e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,35 +1,35 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class ScheduledEviction {\r\n-\r\n-    private String stringField;\r\n-\r\n-    public ScheduledEviction(String s) {\r\n-        stringField = s;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class ScheduledEviction {\n+\n+    private String stringField;\n+\n+    public ScheduledEviction(String s) {\n+        stringField = s;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+}"},{"sha":"6d712ab9b484d5a9af414ba89984caf6898472fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-@Entity\r\n-public class SelfReferencingCacheTestObject {\r\n-\r\n-    private String str;\r\n-    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n-    private SelfReferencingCacheTestObject o;\r\n-    private CacheObjectAChild1 embedded;\r\n-\r\n-    public SelfReferencingCacheTestObject(String str,\r\n-        SelfReferencingCacheTestObject o) {\r\n-        this.str = str;\r\n-        this.o = o;\r\n-        embedded = new CacheObjectAChild1(str, str, 0);\r\n-    }\r\n-\r\n-    public SelfReferencingCacheTestObject getO() {\r\n-        return o;\r\n-    }\r\n-\r\n-    public String getStr() {\r\n-        return str;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class SelfReferencingCacheTestObject {\n+\n+    private String str;\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\n+    private SelfReferencingCacheTestObject o;\n+    private CacheObjectAChild1 embedded;\n+\n+    public SelfReferencingCacheTestObject(String str,\n+        SelfReferencingCacheTestObject o) {\n+        this.str = str;\n+        this.o = o;\n+        embedded = new CacheObjectAChild1(str, str, 0);\n+    }\n+\n+    public SelfReferencingCacheTestObject getO() {\n+        return o;\n+    }\n+\n+    public String getStr() {\n+        return str;\n+    }\n+}"},{"sha":"d3699ca2e6f5143079ffe8adacdd529b573ecf8f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,35 +1,35 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class TransactionalClassPC {\r\n-\r\n-    private int intField;\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class TransactionalClassPC {\n+\n+    private int intField;\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+}"},{"sha":"2aea112c2ecd6542c97f915f0272fdccd00c4b3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.detachment;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n-\r\n-@Entity\r\n-public class DetachmentOneManyChild {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(optional=false)\r\n-    @JoinColumn(name=\"PARENT_ID\", nullable=false)\r\n-    @ForeignKey\r\n-    private DetachmentOneManyParent parent;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public DetachmentOneManyParent getParent() { \r\n-        return parent; \r\n-    }\r\n-\r\n-    public void setParent(DetachmentOneManyParent parent) { \r\n-        this.parent = parent; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+public class DetachmentOneManyChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(optional=false)\n+    @JoinColumn(name=\"PARENT_ID\", nullable=false)\n+    @ForeignKey\n+    private DetachmentOneManyParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public DetachmentOneManyParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(DetachmentOneManyParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"7ba8a6ed5beeddc81bf5e37adfe1f89e45630dee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.detachment;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-public class DetachmentOneManyParent {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @OneToMany(mappedBy=\"parent\", cascade=CascadeType.ALL, \r\n-        fetch=FetchType.EAGER)\r\n-    @OrderBy(\"name ASC\")\r\n-    private List<DetachmentOneManyChild> children = \r\n-        new ArrayList<DetachmentOneManyChild>();\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public List<DetachmentOneManyChild> getChildren() { \r\n-        return children; \r\n-    }\r\n-\r\n-    public void addChild(DetachmentOneManyChild child) {\r\n-        child.setParent(this);\r\n-        children.add(child);\r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.*;\n+\n+@Entity\n+public class DetachmentOneManyParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"parent\", cascade=CascadeType.ALL, \n+        fetch=FetchType.EAGER)\n+    @OrderBy(\"name ASC\")\n+    private List<DetachmentOneManyChild> children = \n+        new ArrayList<DetachmentOneManyChild>();\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<DetachmentOneManyChild> getChildren() { \n+        return children; \n+    }\n+\n+    public void addChild(DetachmentOneManyChild child) {\n+        child.setParent(this);\n+        children.add(child);\n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"07188585c5fa3c1337dbce9720f8890fe039efda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Address.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Address.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Address.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,78 +1,78 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * An entity that extends a MappedSuperClass and embeds an entity.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-@Entity\r\n-public class Address extends BaseEntity {\r\n-    protected String streetAddress, city, state;\r\n-\r\n-    Geocode geocode;\r\n-\r\n-    @Embedded\r\n-    public Geocode getGeocode() {\r\n-        return geocode;\r\n-    }\r\n-\r\n-    public void setGeocode(Geocode geocode) {\r\n-        this.geocode = geocode;\r\n-    }\r\n-\r\n-    public String getStreetAddress() {\r\n-        return streetAddress;\r\n-    }\r\n-\r\n-    public void setStreetAddress(String streetAddress) {\r\n-        this.streetAddress = streetAddress;\r\n-    }\r\n-\r\n-    public String getCity() {\r\n-        return city;\r\n-    }\r\n-\r\n-    public void setCity(String city) {\r\n-        this.city = city;\r\n-    }\r\n-\r\n-    public String getState() {\r\n-        return state;\r\n-    }\r\n-\r\n-    public void setState(String state) {\r\n-        this.state = state;\r\n-    }\r\n-\r\n-    protected Integer zip;\r\n-\r\n-    public Integer getZip() {\r\n-        return zip;\r\n-    }\r\n-\r\n-    public void setZip(Integer zip) {\r\n-        this.zip = zip;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * An entity that extends a MappedSuperClass and embeds an entity.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+@Entity\n+public class Address extends BaseEntity {\n+    protected String streetAddress, city, state;\n+\n+    Geocode geocode;\n+\n+    @Embedded\n+    public Geocode getGeocode() {\n+        return geocode;\n+    }\n+\n+    public void setGeocode(Geocode geocode) {\n+        this.geocode = geocode;\n+    }\n+\n+    public String getStreetAddress() {\n+        return streetAddress;\n+    }\n+\n+    public void setStreetAddress(String streetAddress) {\n+        this.streetAddress = streetAddress;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getState() {\n+        return state;\n+    }\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    protected Integer zip;\n+\n+    public Integer getZip() {\n+        return zip;\n+    }\n+\n+    public void setZip(Integer zip) {\n+        this.zip = zip;\n+    }\n+\n+}"},{"sha":"23bfc9792c255ea24b3c1ea921026df2a618fa3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/BaseEntity.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/BaseEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,42 +1,42 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * Mapped Super Class using auto-generated identity.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-@MappedSuperclass\r\n-public class BaseEntity {\r\n-    protected Long id;\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    public Long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(Long id) {\r\n-        this.id = id;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Mapped Super Class using auto-generated identity.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+@MappedSuperclass\n+public class BaseEntity {\n+    protected Long id;\n+\n+    @Id\n+    @GeneratedValue\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n }\n\\ No newline at end of file"},{"sha":"5209c5b2701ddbe2bdd5b563cd014b3bf199af72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * An embedded entity.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-@Embeddable\r\n-public class Geocode extends BaseEntity {\r\n-    float latitude, longtitude;\r\n-\r\n-    public float getLatitude() {\r\n-        return latitude;\r\n-    }\r\n-\r\n-    public void setLatitude(float latitude) {\r\n-        this.latitude = latitude;\r\n-    }\r\n-\r\n-    public float getLongtitude() {\r\n-        return longtitude;\r\n-    }\r\n-\r\n-    public void setLongtitude(float longtitude) {\r\n-        this.longtitude = longtitude;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * An embedded entity.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+@Embeddable\n+public class Geocode extends BaseEntity {\n+    float latitude, longtitude;\n+\n+    public float getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(float latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public float getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(float longtitude) {\n+        this.longtitude = longtitude;\n+    }\n }\n\\ No newline at end of file"},{"sha":"520bad3308aaad06e7e1535a705ad0ed291bb530","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","status":"modified","additions":116,"deletions":116,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,117 +1,117 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestEmbedded extends SingleEMFTestCase {\r\n-    public void setUp() {\r\n-        super.setUp(BaseEntity.class, Address.class, Geocode.class,\r\n-                CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testInsertEmbedded() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Address a = new Address();\r\n-        a.setStreetAddress(\"123 Main St\");\r\n-        a.setCity(\"Chicago\");\r\n-        a.setState(\"IL\");\r\n-        a.setZip(60606);\r\n-        Geocode g = new Geocode();\r\n-        g.setLatitude(1.0f);\r\n-        g.setLongtitude(2.0f);\r\n-        a.setGeocode(g);\r\n-        em.persist(a);\r\n-        em.getTransaction().commit();\r\n-    }\r\n-\r\n-    /*\r\n-     * This variation verifies that an embedded entity can be accessed after\r\n-     * being detached. An entity /w embedded is persisted and then queried. The\r\n-     * em is closed, detaching the entities, and then a getter is called on the\r\n-     * embeddeded. If the embedded is still attached (it should not be) an\r\n-     * IllegalStateException will be thrown.\r\n-     * \r\n-     * JIRA Ref: OPENJPA-733 Authors: Chris Tillman, Jeremy Bauer\r\n-     */\r\n-    public void testDetachedQueryEmbedded() {\r\n-        Address a = new Address();\r\n-        a.setStreetAddress(\"456 Main St\");\r\n-        a.setCity(\"New York\");\r\n-        a.setState(\"NY\");\r\n-        a.setZip(12955);\r\n-        Geocode g = new Geocode();\r\n-        g.setLatitude(1.0f);\r\n-        g.setLongtitude(2.0f);\r\n-        a.setGeocode(g);\r\n-\r\n-        persistAddress(a);\r\n-\r\n-        Address a2 =\r\n-            queryAddresses(\r\n-                \"select address from Address address\"\r\n-                    + \" where address.streetAddress = '456 Main St'\").get(0);\r\n-\r\n-        assertEquals(a2.getGeocode().getLatitude(), 1.0f);\r\n-    }\r\n-\r\n-    private void persistAddress(Address address) {\r\n-        final EntityManager em = emf.createEntityManager();\r\n-        final EntityTransaction tx = em.getTransaction();\r\n-\r\n-        tx.begin();\r\n-\r\n-        try {\r\n-            em.persist(address);\r\n-            tx.commit();\r\n-        } finally {\r\n-            if (tx.isActive()) {\r\n-                tx.rollback();\r\n-            }\r\n-            em.close();\r\n-        }\r\n-        assertEquals(address.getGeocode().getLatitude(), 1.0f);\r\n-    }\r\n-\r\n-    private List<Address> queryAddresses(String query) {\r\n-        final EntityManager em = emf.createEntityManager();\r\n-        final EntityTransaction tx = em.getTransaction();\r\n-\r\n-        tx.begin();\r\n-\r\n-        try {\r\n-            final List<Address> list =\r\n-                (List<Address>) em.createQuery(query).getResultList();\r\n-            tx.commit();\r\n-            return list;\r\n-        } finally {\r\n-            if (tx.isActive()) {\r\n-                tx.rollback();\r\n-            }\r\n-            em.close();\r\n-        }\r\n-    }\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestEmbedded extends SingleEMFTestCase {\n+    public void setUp() {\n+        super.setUp(BaseEntity.class, Address.class, Geocode.class,\n+                CLEAR_TABLES);\n+    }\n+\n+    public void testInsertEmbedded() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Address a = new Address();\n+        a.setStreetAddress(\"123 Main St\");\n+        a.setCity(\"Chicago\");\n+        a.setState(\"IL\");\n+        a.setZip(60606);\n+        Geocode g = new Geocode();\n+        g.setLatitude(1.0f);\n+        g.setLongtitude(2.0f);\n+        a.setGeocode(g);\n+        em.persist(a);\n+        em.getTransaction().commit();\n+    }\n+\n+    /*\n+     * This variation verifies that an embedded entity can be accessed after\n+     * being detached. An entity /w embedded is persisted and then queried. The\n+     * em is closed, detaching the entities, and then a getter is called on the\n+     * embeddeded. If the embedded is still attached (it should not be) an\n+     * IllegalStateException will be thrown.\n+     * \n+     * JIRA Ref: OPENJPA-733 Authors: Chris Tillman, Jeremy Bauer\n+     */\n+    public void testDetachedQueryEmbedded() {\n+        Address a = new Address();\n+        a.setStreetAddress(\"456 Main St\");\n+        a.setCity(\"New York\");\n+        a.setState(\"NY\");\n+        a.setZip(12955);\n+        Geocode g = new Geocode();\n+        g.setLatitude(1.0f);\n+        g.setLongtitude(2.0f);\n+        a.setGeocode(g);\n+\n+        persistAddress(a);\n+\n+        Address a2 =\n+            queryAddresses(\n+                \"select address from Address address\"\n+                    + \" where address.streetAddress = '456 Main St'\").get(0);\n+\n+        assertEquals(a2.getGeocode().getLatitude(), 1.0f);\n+    }\n+\n+    private void persistAddress(Address address) {\n+        final EntityManager em = emf.createEntityManager();\n+        final EntityTransaction tx = em.getTransaction();\n+\n+        tx.begin();\n+\n+        try {\n+            em.persist(address);\n+            tx.commit();\n+        } finally {\n+            if (tx.isActive()) {\n+                tx.rollback();\n+            }\n+            em.close();\n+        }\n+        assertEquals(address.getGeocode().getLatitude(), 1.0f);\n+    }\n+\n+    private List<Address> queryAddresses(String query) {\n+        final EntityManager em = emf.createEntityManager();\n+        final EntityTransaction tx = em.getTransaction();\n+\n+        tx.begin();\n+\n+        try {\n+            final List<Address> list =\n+                (List<Address>) em.createQuery(query).getResultList();\n+            tx.commit();\n+            return list;\n+        } finally {\n+            if (tx.isActive()) {\n+                tx.rollback();\n+            }\n+            em.close();\n+        }\n+    }\n+\n }\n\\ No newline at end of file"},{"sha":"0502ef484bbb65bf5aa5c23f70ae629dc2e1f313","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.enhance.common.apps.NoClone;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.PCClone;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.SubclassClone;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestClone\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestClone(String name) {\r\n-        super(name, \"enhancecactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-\r\n-        deleteAll(NoClone.class);\r\n-        deleteAll(PCClone.class);\r\n-        deleteAll(SubclassClone.class);\r\n-    }\r\n-\r\n-    /**\r\n-     * test no clone method declared.\r\n-     */\r\n-    public void testNoClone() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        NoClone orig = new NoClone(\"test\");\r\n-        pm.persist(orig);\r\n-        endTx(pm);\r\n-        pm.refresh(orig);\r\n-        NoClone copy = orig.safeClone();\r\n-        assertEquals(\"test\", copy.getString());\r\n-        assertTrue(pm.isPersistent(orig));\r\n-        assertFalse(pm.isPersistent(copy));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * test subclass which we cannot handle safely\r\n-     */\r\n-    public void testSubclassClone() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        SubclassClone orig = new SubclassClone(\"test\");\r\n-        pm.persist(orig);\r\n-        endTx(pm);\r\n-        pm.refresh(orig);\r\n-        SubclassClone copy = orig.safeClone();\r\n-        assertEquals(\"test\", copy.getString());\r\n-        assertTrue(pm.isPersistent(orig));\r\n-        // this should be true since the sm should be VM copied.\r\n-        // as we intentionally don't handle this case.\r\n-        assertTrue(pm.isPersistent(copy));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * test explicit clone call\r\n-     */\r\n-    public void testPCClone() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        PCClone orig = new PCClone(\"test\");\r\n-        pm.persist(orig);\r\n-        endTx(pm);\r\n-        pm.refresh(orig);\r\n-        PCClone copy = (PCClone) orig.clone();\r\n-        assertEquals(\"test\", copy.getString());\r\n-        assertTrue(pm.isPersistent(orig));\r\n-        assertFalse(pm.isPersistent(copy));\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance;\n+\n+\n+import org.apache.openjpa.persistence.enhance.common.apps.NoClone;\n+import org.apache.openjpa.persistence.enhance.common.apps.PCClone;\n+import org.apache.openjpa.persistence.enhance.common.apps.SubclassClone;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestClone\n+    extends AbstractTestCase {\n+\n+    public TestClone(String name) {\n+        super(name, \"enhancecactusapp\");\n+    }\n+\n+    public void setUp() {\n+\n+        deleteAll(NoClone.class);\n+        deleteAll(PCClone.class);\n+        deleteAll(SubclassClone.class);\n+    }\n+\n+    /**\n+     * test no clone method declared.\n+     */\n+    public void testNoClone() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        NoClone orig = new NoClone(\"test\");\n+        pm.persist(orig);\n+        endTx(pm);\n+        pm.refresh(orig);\n+        NoClone copy = orig.safeClone();\n+        assertEquals(\"test\", copy.getString());\n+        assertTrue(pm.isPersistent(orig));\n+        assertFalse(pm.isPersistent(copy));\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * test subclass which we cannot handle safely\n+     */\n+    public void testSubclassClone() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        SubclassClone orig = new SubclassClone(\"test\");\n+        pm.persist(orig);\n+        endTx(pm);\n+        pm.refresh(orig);\n+        SubclassClone copy = orig.safeClone();\n+        assertEquals(\"test\", copy.getString());\n+        assertTrue(pm.isPersistent(orig));\n+        // this should be true since the sm should be VM copied.\n+        // as we intentionally don't handle this case.\n+        assertTrue(pm.isPersistent(copy));\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * test explicit clone call\n+     */\n+    public void testPCClone() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        PCClone orig = new PCClone(\"test\");\n+        pm.persist(orig);\n+        endTx(pm);\n+        pm.refresh(orig);\n+        PCClone copy = (PCClone) orig.clone();\n+        assertEquals(\"test\", copy.getString());\n+        assertTrue(pm.isPersistent(orig));\n+        assertFalse(pm.isPersistent(copy));\n+        endEm(pm);\n+    }\n+}\n+"},{"sha":"5cf43a423ff1e2ccd7cfa127bd1b87e4e82f0bdb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,79 +1,79 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.enhance.DynamicStorage;\r\n-import org.apache.openjpa.enhance.DynamicStorageGenerator;\r\n-import org.apache.openjpa.meta.JavaTypes;\r\n-\r\n-public class TestDynamicStorageGenerator\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestDynamicStorageGenerator(String s) {\r\n-        super(s, \"enhancecactusapp\");\r\n-    }\r\n-\r\n-    public void testStorage()\r\n-        throws Exception {\r\n-\r\n-        DynamicStorageGenerator gen = new DynamicStorageGenerator();\r\n-        int[] types = new int[]{\r\n-            JavaTypes.BOOLEAN,\r\n-            JavaTypes.BYTE,\r\n-            JavaTypes.CHAR,\r\n-            JavaTypes.INT,\r\n-            JavaTypes.SHORT,\r\n-            JavaTypes.LONG,\r\n-            JavaTypes.FLOAT,\r\n-            JavaTypes.DOUBLE,\r\n-            JavaTypes.STRING,\r\n-            JavaTypes.OBJECT\r\n-        };\r\n-        DynamicStorage storage = gen.generateStorage(types,\r\n-            \"org.apache.openjpa.enhance.Test\");\r\n-        storage = storage.newInstance();\r\n-\r\n-        storage.setBoolean(0, true);\r\n-        storage.setByte(1, (byte) 1);\r\n-        storage.setChar(2, 'f');\r\n-        storage.setInt(3, 3);\r\n-        storage.setShort(4, (short) 4);\r\n-        storage.setLong(5, 5);\r\n-        storage.setFloat(6, (float) 6.6);\r\n-        storage.setDouble(7, 7.7);\r\n-        storage.setObject(8, \"field8\");\r\n-        Date date = new Date();\r\n-        storage.setObject(9, date);\r\n-\r\n-        assertTrue(storage.getBoolean(0));\r\n-        assertEquals(1, storage.getByte(1));\r\n-        assertEquals('f', storage.getChar(2));\r\n-        assertEquals(3, storage.getInt(3));\r\n-        assertEquals(4, storage.getShort(4));\r\n-        assertEquals(5, storage.getLong(5));\r\n-        assertTrue(6.59 < storage.getFloat(6) && 6.61 > storage.getFloat(6));\r\n-        assertTrue(7.69 < storage.getDouble(7)\r\n-            && 7.71 > storage.getDouble(7));\r\n-        assertEquals(\"field8\", storage.getObject(8));\r\n-        assertEquals(date, storage.getObject(9));\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance;\n+\n+import java.util.Date;\n+\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.enhance.DynamicStorage;\n+import org.apache.openjpa.enhance.DynamicStorageGenerator;\n+import org.apache.openjpa.meta.JavaTypes;\n+\n+public class TestDynamicStorageGenerator\n+    extends AbstractTestCase {\n+\n+    public TestDynamicStorageGenerator(String s) {\n+        super(s, \"enhancecactusapp\");\n+    }\n+\n+    public void testStorage()\n+        throws Exception {\n+\n+        DynamicStorageGenerator gen = new DynamicStorageGenerator();\n+        int[] types = new int[]{\n+            JavaTypes.BOOLEAN,\n+            JavaTypes.BYTE,\n+            JavaTypes.CHAR,\n+            JavaTypes.INT,\n+            JavaTypes.SHORT,\n+            JavaTypes.LONG,\n+            JavaTypes.FLOAT,\n+            JavaTypes.DOUBLE,\n+            JavaTypes.STRING,\n+            JavaTypes.OBJECT\n+        };\n+        DynamicStorage storage = gen.generateStorage(types,\n+            \"org.apache.openjpa.enhance.Test\");\n+        storage = storage.newInstance();\n+\n+        storage.setBoolean(0, true);\n+        storage.setByte(1, (byte) 1);\n+        storage.setChar(2, 'f');\n+        storage.setInt(3, 3);\n+        storage.setShort(4, (short) 4);\n+        storage.setLong(5, 5);\n+        storage.setFloat(6, (float) 6.6);\n+        storage.setDouble(7, 7.7);\n+        storage.setObject(8, \"field8\");\n+        Date date = new Date();\n+        storage.setObject(9, date);\n+\n+        assertTrue(storage.getBoolean(0));\n+        assertEquals(1, storage.getByte(1));\n+        assertEquals('f', storage.getChar(2));\n+        assertEquals(3, storage.getInt(3));\n+        assertEquals(4, storage.getShort(4));\n+        assertEquals(5, storage.getLong(5));\n+        assertTrue(6.59 < storage.getFloat(6) && 6.61 > storage.getFloat(6));\n+        assertTrue(7.69 < storage.getDouble(7)\n+            && 7.71 > storage.getDouble(7));\n+        assertEquals(\"field8\", storage.getObject(8));\n+        assertEquals(date, storage.getObject(9));\n+    }\n+}"},{"sha":"c78838bafb8362dbafe787978bfb00eae208f9f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,78 +1,78 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance;\r\n-\r\n-import java.io.IOException;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.enhance.PCEnhancer;\r\n-import org.apache.openjpa.meta.MetaDataRepository;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.util.OpenJPAException;\r\n-\r\n-public class TestNoNoArgs\r\n-    extends AbstractTestCase {\r\n-\r\n-    OpenJPAConfiguration conf;\r\n-    MetaDataRepository repos;\r\n-    ClassLoader loader;\r\n-    private PCEnhancer.Flags flags = new PCEnhancer.Flags();\r\n-\r\n-    public TestNoNoArgs(String s) {\r\n-        super(s, \"enhancecactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        conf = ((OpenJPAEntityManagerSPI) em).getConfiguration();\r\n-        repos = conf.newMetaDataRepositoryInstance();\r\n-        loader = em.getClassLoader();\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testNoNoArgs()\r\n-        throws IOException {\r\n-        PCEnhancer.run((OpenJPAConfiguration) conf,\r\n-            new String[]{ },\r\n-            flags, repos, null, loader);\r\n-    }\r\n-\r\n-    public void testNo2NoArgs()\r\n-        throws IOException {\r\n-        flags.addDefaultConstructor = false;\r\n-        boolean caughtException = false;\r\n-        try {\r\n-            PCEnhancer.run((OpenJPAConfiguration) conf, new String[]{ },\r\n-                flags, repos, null, loader);\r\n-        } catch (OpenJPAException e) {\r\n-            caughtException = true;\r\n-        }\r\n-        assertTrue(caughtException);\r\n-    }\r\n-\r\n-    public void testNo3NoArgs()\r\n-        throws IOException {\r\n-        PCEnhancer.run((OpenJPAConfiguration) conf,\r\n-            new String[]{ \"persistence.enhance.common.apps.Entity1\" },\r\n-            flags, repos, null, loader);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance;\n+\n+import java.io.IOException;\n+\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.enhance.PCEnhancer;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.util.OpenJPAException;\n+\n+public class TestNoNoArgs\n+    extends AbstractTestCase {\n+\n+    OpenJPAConfiguration conf;\n+    MetaDataRepository repos;\n+    ClassLoader loader;\n+    private PCEnhancer.Flags flags = new PCEnhancer.Flags();\n+\n+    public TestNoNoArgs(String s) {\n+        super(s, \"enhancecactusapp\");\n+    }\n+\n+    public void setUp() {\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        conf = ((OpenJPAEntityManagerSPI) em).getConfiguration();\n+        repos = conf.newMetaDataRepositoryInstance();\n+        loader = em.getClassLoader();\n+        endEm(em);\n+    }\n+\n+    public void testNoNoArgs()\n+        throws IOException {\n+        PCEnhancer.run((OpenJPAConfiguration) conf,\n+            new String[]{ },\n+            flags, repos, null, loader);\n+    }\n+\n+    public void testNo2NoArgs()\n+        throws IOException {\n+        flags.addDefaultConstructor = false;\n+        boolean caughtException = false;\n+        try {\n+            PCEnhancer.run((OpenJPAConfiguration) conf, new String[]{ },\n+                flags, repos, null, loader);\n+        } catch (OpenJPAException e) {\n+            caughtException = true;\n+        }\n+        assertTrue(caughtException);\n+    }\n+\n+    public void testNo3NoArgs()\n+        throws IOException {\n+        PCEnhancer.run((OpenJPAConfiguration) conf,\n+            new String[]{ \"persistence.enhance.common.apps.Entity1\" },\n+            flags, repos, null, loader);\n+    }\n+}"},{"sha":"d45a0fa0f1570f3f28ddd324cef2a4e68464b39f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","status":"modified","additions":559,"deletions":559,"changes":1118,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,559 +1,559 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance;\r\n-\r\n-import java.lang.reflect.Method;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.enhance.common.apps.BackingFieldNameMismatchInstance;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.BaseEntity;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.BasicSubclassInstance;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.DerivedEntity;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.Entity1;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance2;\r\n-import org.apache.openjpa.persistence.enhance.common.apps.SubclassTestInstance;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import junit.framework.AssertionFailedError;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.util.ExceptionInfo;\r\n-import org.apache.openjpa.util.ImplHelper;\r\n-\r\n-public class TestSubclassedBehavior extends AbstractTestCase {\r\n-\r\n-    public TestSubclassedBehavior(String name) {\r\n-        super(name, \"enhancecactusapp\");\r\n-    }\r\n-\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(BasicSubclassInstance.class);\r\n-        deleteAll(BackingFieldNameMismatchInstance.class);\r\n-        deleteAll(BaseEntity.class);\r\n-        deleteAll(ManagedInverseTestInstance.class);\r\n-        deleteAll(ManagedInverseTestInstance2.class);\r\n-    }\r\n-\r\n-    public void testInheritance() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        DerivedEntity de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\r\n-        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance(pm,\r\n-            BasicSubclassInstance.class);\r\n-        basic.setStringField(\"basic one-to-one\");\r\n-        de.setOneToOne(basic);\r\n-        Object oid = persistenceOperations(pm, de, false);\r\n-\r\n-        // ##### need a test case for JDOHelper.createEntityManager() for\r\n-        // subclass\r\n-        ClassMetaData meta = JPAFacadeHelper.getMetaData(pm, de.getClass());\r\n-        assertEquals(BaseEntity.class, meta.getPCSuperclass());\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-\r\n-        Object o = pm.find(DerivedEntity.class, oid);\r\n-        assertTrue(o instanceof DerivedEntity);\r\n-        de = (DerivedEntity) o;\r\n-        Broker b = JPAFacadeHelper.toBroker(pm);\r\n-        OpenJPAStateManager sm = b.getStateManager(de);\r\n-        // we use getLoaded() here because isLoaded() always returns true.\r\n-        assertFalse(sm.getLoaded().get(\r\n-            sm.getMetaData().getField(\"oneToOne\").getIndex()));\r\n-        assertEquals(\"basic one-to-one\", de.getOneToOne().getStringField());\r\n-        assertTrue(sm.getLoaded().get(sm.getMetaData()\r\n-            .getField(\"oneToOne\").getIndex()));\r\n-\r\n-        startTx(pm);\r\n-        pm.remove(de);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testBasicSubclassPersistenceOperations()\r\n-        throws ClassNotFoundException {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        BasicSubclassInstance o = (BasicSubclassInstance) newInstance(pm,\r\n-            BasicSubclassInstance.class);\r\n-        persistenceOperations(pm, o, true);\r\n-    }\r\n-\r\n-    public void testBackingFieldNameMismatch() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        BackingFieldNameMismatchInstance o = (BackingFieldNameMismatchInstance)\r\n-            newInstance(pm, BackingFieldNameMismatchInstance.class);\r\n-        persistenceOperations(pm, o, true);\r\n-    }\r\n-\r\n-    private Object newInstance(OpenJPAEntityManager pm, Class cls) {\r\n-        return pm.createInstance(cls);\r\n-    }\r\n-\r\n-    private Object createInstance(EntityManager em, Class cls) {\r\n-        return ((OpenJPAEntityManager) em).createInstance(cls);\r\n-    }\r\n-\r\n-    private Object persistenceOperations(OpenJPAEntityManager pm,\r\n-        SubclassTestInstance o, boolean delete) {\r\n-        startTx(pm);\r\n-        pm.persist(o);\r\n-        o.setStringField(\"new persistent instance\");\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(o);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        o = (SubclassTestInstance) pm.find(SubclassTestInstance.class, oid);\r\n-\r\n-        assertEquals(\"new persistent instance\", o.getStringField());\r\n-        startTx(pm);\r\n-        o.setStringField(\"modified persistent instance\");\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        if (delete) {\r\n-            pm = (OpenJPAEntityManager) currentEntityManager();\r\n-            o = (SubclassTestInstance) pm.find(SubclassTestInstance.class, oid);\r\n-            assertEquals(\"modified persistent instance\", o.getStringField());\r\n-            startTx(pm);\r\n-            pm.remove(o);\r\n-            endTx(pm);\r\n-            endEm(pm);\r\n-            return null;\r\n-        } else {\r\n-            return oid;\r\n-        }\r\n-    }\r\n-\r\n-    public void testPolymorphicQueries() {\r\n-        deleteAll(BaseEntity.class);\r\n-        deleteAll(BasicSubclassInstance.class);\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        BaseEntity be = (BaseEntity) newInstance(pm, BaseEntity.class);\r\n-        be.setShortField((short) 0);\r\n-        pm.persist(be);\r\n-\r\n-        be = (BaseEntity) newInstance(pm, BaseEntity.class);\r\n-        be.setShortField((short) 1);\r\n-        pm.persist(be);\r\n-\r\n-        DerivedEntity de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\r\n-        de.setShortField((short) 2);\r\n-        de.setOneToOne((BasicSubclassInstance) newInstance(pm,\r\n-            BasicSubclassInstance.class));\r\n-        pm.persist(de);\r\n-\r\n-        de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\r\n-        de.setShortField((short) 3);\r\n-        de.setOneToOne((BasicSubclassInstance) newInstance(pm,\r\n-            BasicSubclassInstance.class));\r\n-        pm.persist(de);\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        OpenJPAQuery q =\r\n-            pm.createQuery(\"SELECT a FROM BaseEntity a \"\r\n-                + \"ORDER BY a.shortField ASC\");\r\n-        List l = (List) q.getResultList();\r\n-        assertEquals(4, l.size());\r\n-        assertEquals(0, ((BaseEntity) l.get(0)).getShortField());\r\n-        assertEquals(1, ((BaseEntity) l.get(1)).getShortField());\r\n-        assertEquals(2, ((BaseEntity) l.get(2)).getShortField());\r\n-        assertEquals(3, ((BaseEntity) l.get(3)).getShortField());\r\n-        assertTrue(l.get(2) instanceof DerivedEntity);\r\n-        assertTrue(l.get(3) instanceof DerivedEntity);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testEnhancedClassChangesOutsideTxWithoutNTW() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        deleteAll(Entity1.class);\r\n-        endTx(pm);\r\n-        Entity1 o = new Entity1(8, \"pk 8\", 4);\r\n-        startTx(pm);\r\n-        pm.persist(o);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(o);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        o = (Entity1) pm.find(Entity1.class, oid);\r\n-\r\n-        try {\r\n-            o.setStringField(\"hello\");\r\n-            fail(\"non-transactional write should not be allowed\");\r\n-        } catch (Exception e) {\r\n-            // expected\r\n-        } finally {\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-\r\n-    public void testSubclassChangesOutsideTxWithoutNTW() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance(pm,\r\n-            BasicSubclassInstance.class);\r\n-        basic.setStringField(\"foo\");\r\n-        startTx(pm);\r\n-        pm.persist(basic);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(basic);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        basic =\r\n-            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\r\n-\r\n-        try {\r\n-            basic.setStringField(\"hello\");\r\n-            fail(\"non-transactional write should not be allowed\");\r\n-        } catch (Exception e) {\r\n-            // expected\r\n-        } finally {\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-\r\n-    public void testBasicPMUses() {\r\n-        // retain so we don't reload in the reads after the tx commit\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        Broker broker = JPAFacadeHelper.toBroker(pm);\r\n-        startTx(pm);\r\n-\r\n-        // register a new instance with the PM\r\n-        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance\r\n-            (pm, BasicSubclassInstance.class);\r\n-        assertTrue(ImplHelper.isManageable(basic));\r\n-        basic.setStringField(\"foo\");\r\n-        pm.persist(basic);\r\n-        assertTrue(broker.isNew(basic));\r\n-        assertTrue(broker.isPersistent(basic));\r\n-\r\n-        // commit. this should cause the data to be written.\r\n-        // ### should check SQL count\r\n-        endTx(pm);\r\n-\r\n-        assertFalse(broker.isNew(basic));\r\n-\r\n-        OpenJPAStateManager sm = broker.getStateManager(basic);\r\n-        assertNotNull(sm);\r\n-        assertEquals(sm.getManagedInstance(), basic);\r\n-\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\r\n-        assertEquals(\"foo\", sm.fetch(fmd.getIndex()));\r\n-        assertTrue(sm.getLoaded().get(fmd.getIndex()));\r\n-\r\n-        pm.evict(basic);\r\n-        assertFalse(sm.getLoaded().get(fmd.getIndex()));\r\n-        // lazy loading\r\n-        assertNotNull(basic.getStringField());\r\n-        assertEquals(\"foo\", sm.fetch(fmd.getIndex()));\r\n-        assertEquals(\"foo\", basic.getStringField());\r\n-        assertTrue(sm.getLoaded().get(fmd.getIndex()));\r\n-\r\n-        startTx(pm);\r\n-        basic.setStringField(\"bar\");\r\n-        assertTrue(broker.isDirty(basic));\r\n-        endTx(pm);\r\n-        Object oid = broker.getObjectId(basic);\r\n-        assertNotNull(oid);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        basic =\r\n-            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\r\n-        assertEquals(\"bar\", basic.getStringField());\r\n-\r\n-        startTx(pm);\r\n-        pm.remove(basic);\r\n-        assertTrue(JPAFacadeHelper.toBroker(pm).isDeleted(basic));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testGetObjectId() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        BasicSubclassInstance basic = new BasicSubclassInstance();\r\n-        basic.setStringField(\"foo\");\r\n-        startTx(pm);\r\n-        pm.persist(basic);\r\n-        endTx(pm);\r\n-        Object oid = null;\r\n-        try {\r\n-            assertNotNull(oid = pm.getObjectId(basic));\r\n-        } catch (Exception e) {\r\n-            fail(\"object id lookup failed: \" + e.getMessage());\r\n-        }\r\n-\r\n-        startTx(pm);\r\n-        pm.remove(basic);\r\n-        // before committing, id should exist still\r\n-        assertNotNull(pm.getObjectId(basic));\r\n-\r\n-        endTx(pm);\r\n-        assertNull(pm.getObjectId(basic));\r\n-        endEm(pm);\r\n-\r\n-        // looking up the instance by id in a new PM should fail.\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        try {\r\n-            pm.find(BasicSubclassInstance.class, oid);\r\n-            fail(\"instance should have been deleted!\");\r\n-        } catch (Exception e) {\r\n-            // expected\r\n-        }\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testChangesOutsideTxWithNTW() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        BasicSubclassInstance basic = new BasicSubclassInstance();\r\n-        basic.setStringField(\"foo\");\r\n-        startTx(pm);\r\n-        pm.persist(basic);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(basic);\r\n-        endEm(pm);\r\n-\r\n-        pm = getNTWPM();\r\n-        basic =\r\n-            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\r\n-        basic.setStringField(\"hello\");\r\n-        startTx(pm);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        basic =\r\n-            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\r\n-        try {\r\n-            assertEquals(\"hello\", basic.getStringField());\r\n-        } catch (AssertionFailedError afe) {\r\n-            bug(1205, afe, \"JDO 2-style NTW not supported.\");\r\n-        }\r\n-    }\r\n-\r\n-    public void testChangesOutsideTxWithoutNTW() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        BasicSubclassInstance basic = new BasicSubclassInstance();\r\n-        basic.setStringField(\"foo\");\r\n-        startTx(pm);\r\n-        pm.persist(basic);\r\n-        endTx(pm);\r\n-\r\n-        try {\r\n-            basic.setStringField(\"hello\");\r\n-            fail(\"should not be able to write outside tx without NTW\");\r\n-        } catch (RuntimeException re) {\r\n-            // expected case\r\n-            Object failed = ((ExceptionInfo) re).getFailedObject();\r\n-            assertNotNull(failed);\r\n-            assertSame(basic, failed);\r\n-        } finally {\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-\r\n-    private OpenJPAEntityManager getNTWPM() {\r\n-        EntityManagerFactory pmf = getEmf();\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) pmf.createEntityManager();\r\n-        em.setNontransactionalWrite(true);\r\n-        return em;\r\n-    }\r\n-\r\n-    /*\r\n-     public void testCallbacks ()\r\n-     {\r\n-         fail (\"##### unimplemented test\");\r\n-     }\r\n-\r\n-\r\n-     public void testTransactionListeners ()\r\n-     {\r\n-         fail (\"#####\");\r\n-     }\r\n-\r\n-\r\n-     public void testRemoteCommitListeners ()\r\n-     {\r\n-         fail (\"#####\");\r\n-     }\r\n-\r\n-\r\n-     public void testCaching ()\r\n-     {\r\n-         fail (\"#####\");\r\n-     }\r\n-\r\n-\r\n-     public void testRemote ()\r\n-     {\r\n-         fail (\"#####\");\r\n-     }\r\n-     */\r\n-\r\n-    public void testVersionIncrementAndIdField() {\r\n-        // make sure that version increments happen correctly, and are\r\n-        // visible in the user-visible instance.\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        BasicSubclassInstance basic = new BasicSubclassInstance();\r\n-        basic.setStringField(\"foo\");\r\n-        startTx(pm);\r\n-        pm.persist(basic);\r\n-        endTx(pm);\r\n-\r\n-        assertEquals(1, basic.getVersion());\r\n-        long id = basic.getId();\r\n-        assertNotEquals(0, id);\r\n-\r\n-        startTx(pm);\r\n-        basic.setStringField(\"bar\");\r\n-        endTx(pm);\r\n-        assertEquals(2, basic.getVersion());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /*\r\n-     public void testAutoAssignedFields ()\r\n-     {\r\n-         // make sure that auto-assigned field values get into the user-visible\r\n-         // instance.\r\n-         fail (\"#####\");\r\n-     }\r\n-     */\r\n-\r\n-    public void testJPABasics() {\r\n-        EntityManager em = currentEntityManager();\r\n-        BasicSubclassInstance basic = (BasicSubclassInstance) createInstance(\r\n-            em, BasicSubclassInstance.class);\r\n-        basic.setStringField(\"hello\");\r\n-        startTx(em);\r\n-        em.persist(basic);\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    /*\r\n-     public void testDetachmentAndAttachemnt ()\r\n-     {\r\n-         fail (\"#####\");\r\n-     }\r\n-\r\n-\r\n-     public void testEmbeddedNonEnhanced ()\r\n-     {\r\n-         fail (\"#####\");\r\n-     }\r\n-\r\n-\r\n-     public void testTransactionalNonEnhanced ()\r\n-     {\r\n-         fail (\"#####\");\r\n-     }\r\n-\r\n-\r\n-     public void testBulkTransactionalNonEnhanced ()\r\n-     {\r\n-         fail (\"#####\");\r\n-     }\r\n-     */\r\n-\r\n-    public void testSingleValuedInverseManagement() {\r\n-        Map map = new HashMap();\r\n-        map.put(\"openjpa.InverseManager\", \"true\");\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)\r\n-            getEmf(map).createEntityManager();\r\n-        ManagedInverseTestInstance managed = (ManagedInverseTestInstance)\r\n-            newInstance(pm, ManagedInverseTestInstance.class);\r\n-        ManagedInverseTestInstance2 managed2 = (ManagedInverseTestInstance2)\r\n-            newInstance(pm, ManagedInverseTestInstance2.class);\r\n-        managed.setStringField(\"managed\");\r\n-        managed2.setStringField(\"managed2\");\r\n-        managed.setManaged2(managed2);\r\n-\r\n-        startTx(pm);\r\n-        pm.persist(managed);\r\n-        endTx(pm);\r\n-\r\n-        assertSame(managed, managed2.getManaged());\r\n-    }\r\n-\r\n-    public void testBackingFieldConfigurationWithTwoFactories() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        // this causes DerivedEntity.class to get loaded into PCRegistry\r\n-        newInstance(pm, DerivedEntity.class);\r\n-        Map map = new HashMap();\r\n-        map.put(\"openjpa.Log\", \"DiagnosticContext=subclass-two-factories-test\");\r\n-        pm = (OpenJPAEntityManager) getEmf(map).createEntityManager();\r\n-        newInstance(pm, DerivedEntity.class);\r\n-\r\n-        // this second new-instance creation will result in the metadata\r\n-        // defaults being loaded from the PCRegistry instead of via reflection.\r\n-        // Make sure that things still work as expected from the\r\n-        // registry-parsing code.\r\n-        ClassMetaData meta = getConfiguration()\r\n-            .getMetaDataRepositoryInstance().\r\n-            getMetaData(DerivedEntity.class, null, false);\r\n-        assertTrue(\"meta's access should be ACCESS_PROPERTY\",\r\n-            meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY);\r\n-        FieldMetaData[] fmds = meta.getFields();\r\n-        for (int i = 0; i < fmds.length; i++) {\r\n-            assertEquals(Method.class, fmds[i].getBackingMember().getClass());\r\n-\r\n-            // make sure that the fields are defined in the right part of the\r\n-            // hierarchy\r\n-            if (fmds[i].getName().equals(\"intField\") ||\r\n-                fmds[i].getName().equals(\"oneToOne\")) {\r\n-                assertEquals(DerivedEntity.class,\r\n-                    fmds[i].getDefiningMetaData().getDescribedType());\r\n-            } else {\r\n-                assertEquals(BaseEntity.class,\r\n-                    fmds[i].getDefiningMetaData().getDescribedType());\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.enhance.common.apps.BackingFieldNameMismatchInstance;\n+import org.apache.openjpa.persistence.enhance.common.apps.BaseEntity;\n+import org.apache.openjpa.persistence.enhance.common.apps.BasicSubclassInstance;\n+import org.apache.openjpa.persistence.enhance.common.apps.DerivedEntity;\n+import org.apache.openjpa.persistence.enhance.common.apps.Entity1;\n+import org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance;\n+import org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance2;\n+import org.apache.openjpa.persistence.enhance.common.apps.SubclassTestInstance;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import junit.framework.AssertionFailedError;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.util.ExceptionInfo;\n+import org.apache.openjpa.util.ImplHelper;\n+\n+public class TestSubclassedBehavior extends AbstractTestCase {\n+\n+    public TestSubclassedBehavior(String name) {\n+        super(name, \"enhancecactusapp\");\n+    }\n+\n+\n+    public void setUp() {\n+        deleteAll(BasicSubclassInstance.class);\n+        deleteAll(BackingFieldNameMismatchInstance.class);\n+        deleteAll(BaseEntity.class);\n+        deleteAll(ManagedInverseTestInstance.class);\n+        deleteAll(ManagedInverseTestInstance2.class);\n+    }\n+\n+    public void testInheritance() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        DerivedEntity de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\n+        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance(pm,\n+            BasicSubclassInstance.class);\n+        basic.setStringField(\"basic one-to-one\");\n+        de.setOneToOne(basic);\n+        Object oid = persistenceOperations(pm, de, false);\n+\n+        // ##### need a test case for JDOHelper.createEntityManager() for\n+        // subclass\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(pm, de.getClass());\n+        assertEquals(BaseEntity.class, meta.getPCSuperclass());\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+\n+        Object o = pm.find(DerivedEntity.class, oid);\n+        assertTrue(o instanceof DerivedEntity);\n+        de = (DerivedEntity) o;\n+        Broker b = JPAFacadeHelper.toBroker(pm);\n+        OpenJPAStateManager sm = b.getStateManager(de);\n+        // we use getLoaded() here because isLoaded() always returns true.\n+        assertFalse(sm.getLoaded().get(\n+            sm.getMetaData().getField(\"oneToOne\").getIndex()));\n+        assertEquals(\"basic one-to-one\", de.getOneToOne().getStringField());\n+        assertTrue(sm.getLoaded().get(sm.getMetaData()\n+            .getField(\"oneToOne\").getIndex()));\n+\n+        startTx(pm);\n+        pm.remove(de);\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testBasicSubclassPersistenceOperations()\n+        throws ClassNotFoundException {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        BasicSubclassInstance o = (BasicSubclassInstance) newInstance(pm,\n+            BasicSubclassInstance.class);\n+        persistenceOperations(pm, o, true);\n+    }\n+\n+    public void testBackingFieldNameMismatch() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        BackingFieldNameMismatchInstance o = (BackingFieldNameMismatchInstance)\n+            newInstance(pm, BackingFieldNameMismatchInstance.class);\n+        persistenceOperations(pm, o, true);\n+    }\n+\n+    private Object newInstance(OpenJPAEntityManager pm, Class cls) {\n+        return pm.createInstance(cls);\n+    }\n+\n+    private Object createInstance(EntityManager em, Class cls) {\n+        return ((OpenJPAEntityManager) em).createInstance(cls);\n+    }\n+\n+    private Object persistenceOperations(OpenJPAEntityManager pm,\n+        SubclassTestInstance o, boolean delete) {\n+        startTx(pm);\n+        pm.persist(o);\n+        o.setStringField(\"new persistent instance\");\n+        endTx(pm);\n+        Object oid = pm.getObjectId(o);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        o = (SubclassTestInstance) pm.find(SubclassTestInstance.class, oid);\n+\n+        assertEquals(\"new persistent instance\", o.getStringField());\n+        startTx(pm);\n+        o.setStringField(\"modified persistent instance\");\n+        endTx(pm);\n+        endEm(pm);\n+\n+        if (delete) {\n+            pm = (OpenJPAEntityManager) currentEntityManager();\n+            o = (SubclassTestInstance) pm.find(SubclassTestInstance.class, oid);\n+            assertEquals(\"modified persistent instance\", o.getStringField());\n+            startTx(pm);\n+            pm.remove(o);\n+            endTx(pm);\n+            endEm(pm);\n+            return null;\n+        } else {\n+            return oid;\n+        }\n+    }\n+\n+    public void testPolymorphicQueries() {\n+        deleteAll(BaseEntity.class);\n+        deleteAll(BasicSubclassInstance.class);\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+\n+        BaseEntity be = (BaseEntity) newInstance(pm, BaseEntity.class);\n+        be.setShortField((short) 0);\n+        pm.persist(be);\n+\n+        be = (BaseEntity) newInstance(pm, BaseEntity.class);\n+        be.setShortField((short) 1);\n+        pm.persist(be);\n+\n+        DerivedEntity de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\n+        de.setShortField((short) 2);\n+        de.setOneToOne((BasicSubclassInstance) newInstance(pm,\n+            BasicSubclassInstance.class));\n+        pm.persist(de);\n+\n+        de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\n+        de.setShortField((short) 3);\n+        de.setOneToOne((BasicSubclassInstance) newInstance(pm,\n+            BasicSubclassInstance.class));\n+        pm.persist(de);\n+\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        OpenJPAQuery q =\n+            pm.createQuery(\"SELECT a FROM BaseEntity a \"\n+                + \"ORDER BY a.shortField ASC\");\n+        List l = (List) q.getResultList();\n+        assertEquals(4, l.size());\n+        assertEquals(0, ((BaseEntity) l.get(0)).getShortField());\n+        assertEquals(1, ((BaseEntity) l.get(1)).getShortField());\n+        assertEquals(2, ((BaseEntity) l.get(2)).getShortField());\n+        assertEquals(3, ((BaseEntity) l.get(3)).getShortField());\n+        assertTrue(l.get(2) instanceof DerivedEntity);\n+        assertTrue(l.get(3) instanceof DerivedEntity);\n+        endEm(pm);\n+    }\n+\n+    public void testEnhancedClassChangesOutsideTxWithoutNTW() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        deleteAll(Entity1.class);\n+        endTx(pm);\n+        Entity1 o = new Entity1(8, \"pk 8\", 4);\n+        startTx(pm);\n+        pm.persist(o);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(o);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        o = (Entity1) pm.find(Entity1.class, oid);\n+\n+        try {\n+            o.setStringField(\"hello\");\n+            fail(\"non-transactional write should not be allowed\");\n+        } catch (Exception e) {\n+            // expected\n+        } finally {\n+            endEm(pm);\n+        }\n+    }\n+\n+    public void testSubclassChangesOutsideTxWithoutNTW() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance(pm,\n+            BasicSubclassInstance.class);\n+        basic.setStringField(\"foo\");\n+        startTx(pm);\n+        pm.persist(basic);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(basic);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        basic =\n+            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\n+\n+        try {\n+            basic.setStringField(\"hello\");\n+            fail(\"non-transactional write should not be allowed\");\n+        } catch (Exception e) {\n+            // expected\n+        } finally {\n+            endEm(pm);\n+        }\n+    }\n+\n+    public void testBasicPMUses() {\n+        // retain so we don't reload in the reads after the tx commit\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        Broker broker = JPAFacadeHelper.toBroker(pm);\n+        startTx(pm);\n+\n+        // register a new instance with the PM\n+        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance\n+            (pm, BasicSubclassInstance.class);\n+        assertTrue(ImplHelper.isManageable(basic));\n+        basic.setStringField(\"foo\");\n+        pm.persist(basic);\n+        assertTrue(broker.isNew(basic));\n+        assertTrue(broker.isPersistent(basic));\n+\n+        // commit. this should cause the data to be written.\n+        // ### should check SQL count\n+        endTx(pm);\n+\n+        assertFalse(broker.isNew(basic));\n+\n+        OpenJPAStateManager sm = broker.getStateManager(basic);\n+        assertNotNull(sm);\n+        assertEquals(sm.getManagedInstance(), basic);\n+\n+        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\n+        assertEquals(\"foo\", sm.fetch(fmd.getIndex()));\n+        assertTrue(sm.getLoaded().get(fmd.getIndex()));\n+\n+        pm.evict(basic);\n+        assertFalse(sm.getLoaded().get(fmd.getIndex()));\n+        // lazy loading\n+        assertNotNull(basic.getStringField());\n+        assertEquals(\"foo\", sm.fetch(fmd.getIndex()));\n+        assertEquals(\"foo\", basic.getStringField());\n+        assertTrue(sm.getLoaded().get(fmd.getIndex()));\n+\n+        startTx(pm);\n+        basic.setStringField(\"bar\");\n+        assertTrue(broker.isDirty(basic));\n+        endTx(pm);\n+        Object oid = broker.getObjectId(basic);\n+        assertNotNull(oid);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        basic =\n+            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\n+        assertEquals(\"bar\", basic.getStringField());\n+\n+        startTx(pm);\n+        pm.remove(basic);\n+        assertTrue(JPAFacadeHelper.toBroker(pm).isDeleted(basic));\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testGetObjectId() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        BasicSubclassInstance basic = new BasicSubclassInstance();\n+        basic.setStringField(\"foo\");\n+        startTx(pm);\n+        pm.persist(basic);\n+        endTx(pm);\n+        Object oid = null;\n+        try {\n+            assertNotNull(oid = pm.getObjectId(basic));\n+        } catch (Exception e) {\n+            fail(\"object id lookup failed: \" + e.getMessage());\n+        }\n+\n+        startTx(pm);\n+        pm.remove(basic);\n+        // before committing, id should exist still\n+        assertNotNull(pm.getObjectId(basic));\n+\n+        endTx(pm);\n+        assertNull(pm.getObjectId(basic));\n+        endEm(pm);\n+\n+        // looking up the instance by id in a new PM should fail.\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        try {\n+            pm.find(BasicSubclassInstance.class, oid);\n+            fail(\"instance should have been deleted!\");\n+        } catch (Exception e) {\n+            // expected\n+        }\n+        endEm(pm);\n+    }\n+\n+    public void testChangesOutsideTxWithNTW() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        BasicSubclassInstance basic = new BasicSubclassInstance();\n+        basic.setStringField(\"foo\");\n+        startTx(pm);\n+        pm.persist(basic);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(basic);\n+        endEm(pm);\n+\n+        pm = getNTWPM();\n+        basic =\n+            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\n+        basic.setStringField(\"hello\");\n+        startTx(pm);\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        basic =\n+            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\n+        try {\n+            assertEquals(\"hello\", basic.getStringField());\n+        } catch (AssertionFailedError afe) {\n+            bug(1205, afe, \"JDO 2-style NTW not supported.\");\n+        }\n+    }\n+\n+    public void testChangesOutsideTxWithoutNTW() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        BasicSubclassInstance basic = new BasicSubclassInstance();\n+        basic.setStringField(\"foo\");\n+        startTx(pm);\n+        pm.persist(basic);\n+        endTx(pm);\n+\n+        try {\n+            basic.setStringField(\"hello\");\n+            fail(\"should not be able to write outside tx without NTW\");\n+        } catch (RuntimeException re) {\n+            // expected case\n+            Object failed = ((ExceptionInfo) re).getFailedObject();\n+            assertNotNull(failed);\n+            assertSame(basic, failed);\n+        } finally {\n+            endEm(pm);\n+        }\n+    }\n+\n+    private OpenJPAEntityManager getNTWPM() {\n+        EntityManagerFactory pmf = getEmf();\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) pmf.createEntityManager();\n+        em.setNontransactionalWrite(true);\n+        return em;\n+    }\n+\n+    /*\n+     public void testCallbacks ()\n+     {\n+         fail (\"##### unimplemented test\");\n+     }\n+\n+\n+     public void testTransactionListeners ()\n+     {\n+         fail (\"#####\");\n+     }\n+\n+\n+     public void testRemoteCommitListeners ()\n+     {\n+         fail (\"#####\");\n+     }\n+\n+\n+     public void testCaching ()\n+     {\n+         fail (\"#####\");\n+     }\n+\n+\n+     public void testRemote ()\n+     {\n+         fail (\"#####\");\n+     }\n+     */\n+\n+    public void testVersionIncrementAndIdField() {\n+        // make sure that version increments happen correctly, and are\n+        // visible in the user-visible instance.\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        BasicSubclassInstance basic = new BasicSubclassInstance();\n+        basic.setStringField(\"foo\");\n+        startTx(pm);\n+        pm.persist(basic);\n+        endTx(pm);\n+\n+        assertEquals(1, basic.getVersion());\n+        long id = basic.getId();\n+        assertNotEquals(0, id);\n+\n+        startTx(pm);\n+        basic.setStringField(\"bar\");\n+        endTx(pm);\n+        assertEquals(2, basic.getVersion());\n+        endEm(pm);\n+    }\n+\n+    /*\n+     public void testAutoAssignedFields ()\n+     {\n+         // make sure that auto-assigned field values get into the user-visible\n+         // instance.\n+         fail (\"#####\");\n+     }\n+     */\n+\n+    public void testJPABasics() {\n+        EntityManager em = currentEntityManager();\n+        BasicSubclassInstance basic = (BasicSubclassInstance) createInstance(\n+            em, BasicSubclassInstance.class);\n+        basic.setStringField(\"hello\");\n+        startTx(em);\n+        em.persist(basic);\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    /*\n+     public void testDetachmentAndAttachemnt ()\n+     {\n+         fail (\"#####\");\n+     }\n+\n+\n+     public void testEmbeddedNonEnhanced ()\n+     {\n+         fail (\"#####\");\n+     }\n+\n+\n+     public void testTransactionalNonEnhanced ()\n+     {\n+         fail (\"#####\");\n+     }\n+\n+\n+     public void testBulkTransactionalNonEnhanced ()\n+     {\n+         fail (\"#####\");\n+     }\n+     */\n+\n+    public void testSingleValuedInverseManagement() {\n+        Map map = new HashMap();\n+        map.put(\"openjpa.InverseManager\", \"true\");\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)\n+            getEmf(map).createEntityManager();\n+        ManagedInverseTestInstance managed = (ManagedInverseTestInstance)\n+            newInstance(pm, ManagedInverseTestInstance.class);\n+        ManagedInverseTestInstance2 managed2 = (ManagedInverseTestInstance2)\n+            newInstance(pm, ManagedInverseTestInstance2.class);\n+        managed.setStringField(\"managed\");\n+        managed2.setStringField(\"managed2\");\n+        managed.setManaged2(managed2);\n+\n+        startTx(pm);\n+        pm.persist(managed);\n+        endTx(pm);\n+\n+        assertSame(managed, managed2.getManaged());\n+    }\n+\n+    public void testBackingFieldConfigurationWithTwoFactories() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        // this causes DerivedEntity.class to get loaded into PCRegistry\n+        newInstance(pm, DerivedEntity.class);\n+        Map map = new HashMap();\n+        map.put(\"openjpa.Log\", \"DiagnosticContext=subclass-two-factories-test\");\n+        pm = (OpenJPAEntityManager) getEmf(map).createEntityManager();\n+        newInstance(pm, DerivedEntity.class);\n+\n+        // this second new-instance creation will result in the metadata\n+        // defaults being loaded from the PCRegistry instead of via reflection.\n+        // Make sure that things still work as expected from the\n+        // registry-parsing code.\n+        ClassMetaData meta = getConfiguration()\n+            .getMetaDataRepositoryInstance().\n+            getMetaData(DerivedEntity.class, null, false);\n+        assertTrue(\"meta's access should be ACCESS_PROPERTY\",\n+            meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY);\n+        FieldMetaData[] fmds = meta.getFields();\n+        for (int i = 0; i < fmds.length; i++) {\n+            assertEquals(Method.class, fmds[i].getBackingMember().getClass());\n+\n+            // make sure that the fields are defined in the right part of the\n+            // hierarchy\n+            if (fmds[i].getName().equals(\"intField\") ||\n+                fmds[i].getName().equals(\"oneToOne\")) {\n+                assertEquals(DerivedEntity.class,\n+                    fmds[i].getDefiningMetaData().getDescribedType());\n+            } else {\n+                assertEquals(BaseEntity.class,\n+                    fmds[i].getDefiningMetaData().getDescribedType());\n+            }\n+        }\n+    }\n+}"},{"sha":"e76c1d5c0a0e245210cc3974f9813f4f60f6fb0c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * Backing field names do not match up with the property accessor names, and\r\n- * we use package-protected method access (which is not supported by JPA),\r\n- *\r\n- * @see TestPCSubclasser\r\n- */\r\n-@Entity\r\n-@Table(name = \"BACKINGMISMATCH\")\r\n-public class BackingFieldNameMismatchInstance\r\n-    implements SubclassTestInstance {\r\n-\r\n-    protected long _id; // protected since we don't have a setter\r\n-    private int _version;\r\n-    private String _s;\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    public long getId() {\r\n-        return _id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        _id = id;\r\n-    }\r\n-\r\n-    @Version\r\n-    public int getVersion() {\r\n-        return _version;\r\n-    }\r\n-\r\n-    public void setVersion(int v) {\r\n-        _version = v;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return _s;\r\n-    }\r\n-\r\n-    public void setStringField(String s) {\r\n-        _s = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+/**\n+ * Backing field names do not match up with the property accessor names, and\n+ * we use package-protected method access (which is not supported by JPA),\n+ *\n+ * @see TestPCSubclasser\n+ */\n+@Entity\n+@Table(name = \"BACKINGMISMATCH\")\n+public class BackingFieldNameMismatchInstance\n+    implements SubclassTestInstance {\n+\n+    protected long _id; // protected since we don't have a setter\n+    private int _version;\n+    private String _s;\n+\n+    @Id\n+    @GeneratedValue\n+    public long getId() {\n+        return _id;\n+    }\n+\n+    public void setId(long id) {\n+        _id = id;\n+    }\n+\n+    @Version\n+    public int getVersion() {\n+        return _version;\n+    }\n+\n+    public void setVersion(int v) {\n+        _version = v;\n+    }\n+\n+    public String getStringField() {\n+        return _s;\n+    }\n+\n+    public void setStringField(String s) {\n+        _s = s;\n+    }\n+}"},{"sha":"00ea60ff90922161b76d422644aea40b1a6ebf62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * @see TestPCSubclasser\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-public class BaseEntity\r\n-    implements SubclassTestInstance {\r\n-\r\n-    private long _id;\r\n-    private int _version;\r\n-    private String _s;\r\n-    private short _short;\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    public long getId() {\r\n-        return _id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        _id = id;\r\n-    }\r\n-\r\n-    @Version\r\n-    public int getVersion() {\r\n-        return _version;\r\n-    }\r\n-\r\n-    public void setVersion(int version) {\r\n-        _version = version;\r\n-    }\r\n-\r\n-    public void setStringField(String s) {\r\n-        _s = s;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return _s;\r\n-    }\r\n-\r\n-    public short getShortField() {\r\n-        return _short;\r\n-    }\r\n-\r\n-    public void setShortField(short aShort) {\r\n-        _short = aShort;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Version;\n+\n+/**\n+ * @see TestPCSubclasser\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+public class BaseEntity\n+    implements SubclassTestInstance {\n+\n+    private long _id;\n+    private int _version;\n+    private String _s;\n+    private short _short;\n+\n+    @Id\n+    @GeneratedValue\n+    public long getId() {\n+        return _id;\n+    }\n+\n+    public void setId(long id) {\n+        _id = id;\n+    }\n+\n+    @Version\n+    public int getVersion() {\n+        return _version;\n+    }\n+\n+    public void setVersion(int version) {\n+        _version = version;\n+    }\n+\n+    public void setStringField(String s) {\n+        _s = s;\n+    }\n+\n+    public String getStringField() {\n+        return _s;\n+    }\n+\n+    public short getShortField() {\n+        return _short;\n+    }\n+\n+    public void setShortField(short aShort) {\n+        _short = aShort;\n+    }\n+}"},{"sha":"a8d96fc4deb5f13b700bd702b573b902abe30600","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * @see TestPCSubclasser\r\n- */\r\n-@Entity\r\n-public class BasicSubclassInstance\r\n-    implements SubclassTestInstance {\r\n-\r\n-    private long id;\r\n-    private int version;\r\n-    private String stringField;\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    @Version\r\n-    public int getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setVersion(int v) {\r\n-        version = v;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String str) {\r\n-        stringField = str;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * @see TestPCSubclasser\n+ */\n+@Entity\n+public class BasicSubclassInstance\n+    implements SubclassTestInstance {\n+\n+    private long id;\n+    private int version;\n+    private String stringField;\n+\n+    @Id\n+    @GeneratedValue\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    @Version\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int v) {\n+        version = v;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String str) {\n+        stringField = str;\n+    }\n+}"},{"sha":"624b393d50b8cbbcd304e0297ce1e51a47f74155","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-/**\r\n- * @see TestPCSubclasser\r\n- */\r\n-@Entity\r\n-public class DerivedEntity\r\n-    extends BaseEntity {\r\n-\r\n-    private int _i;\r\n-    private BasicSubclassInstance _basic;\r\n-\r\n-    public int getIntField() {\r\n-        return _i;\r\n-    }\r\n-\r\n-    public void setIntField(int i) {\r\n-        _i = i;\r\n-    }\r\n-\r\n-    @OneToOne(cascade = CascadeType.PERSIST, fetch = FetchType.LAZY)\r\n-    public BasicSubclassInstance getOneToOne() {\r\n-        return _basic;\r\n-    }\r\n-\r\n-    public void setOneToOne(BasicSubclassInstance basic) {\r\n-        // ##### this should be throwing an exception, but clashes with\r\n-        // delete behavior.\r\n-        //#####if (basic == null)\r\n-        //#####throw new NullPointerException ();\r\n-        _basic = basic;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToOne;\n+\n+/**\n+ * @see TestPCSubclasser\n+ */\n+@Entity\n+public class DerivedEntity\n+    extends BaseEntity {\n+\n+    private int _i;\n+    private BasicSubclassInstance _basic;\n+\n+    public int getIntField() {\n+        return _i;\n+    }\n+\n+    public void setIntField(int i) {\n+        _i = i;\n+    }\n+\n+    @OneToOne(cascade = CascadeType.PERSIST, fetch = FetchType.LAZY)\n+    public BasicSubclassInstance getOneToOne() {\n+        return _basic;\n+    }\n+\n+    public void setOneToOne(BasicSubclassInstance basic) {\n+        // ##### this should be throwing an exception, but clashes with\n+        // delete behavior.\n+        //#####if (basic == null)\n+        //#####throw new NullPointerException ();\n+        _basic = basic;\n+    }\n+}"},{"sha":"057dc92064d1f8cada418b6ca39282fc47ec2d87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,30 +1,30 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class DetachablePC\r\n-    implements Serializable {\r\n-\r\n-    private long id;\r\n-    private String val;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class DetachablePC\n+    implements Serializable {\n+\n+    private long id;\n+    private String val;\n+}"},{"sha":"3e86379316547976bc6b78c193875425d8175a57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,31 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class DetachableVersionedPC\r\n-    implements Serializable {\r\n-\r\n-    private long id;\r\n-    private String val;\r\n-    private int version;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class DetachableVersionedPC\n+    implements Serializable {\n+\n+    private long id;\n+    private String val;\n+    private int version;\n+}"},{"sha":"e4bd48e366f4efc48569a02704f54badfd281150","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,101 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityResult;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.SqlResultSetMapping;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@Table(name = \"entity_1\")\r\n-@Inheritance(strategy = InheritanceType.JOINED)\r\n-@SqlResultSetMapping(name = \"NativeTestResult\",\r\n-    entities = @EntityResult(entityClass = Entity1.class))\r\n-public class Entity1 implements Serializable {\r\n-\r\n-    private static final long serialVersionUID = 2882935803066041165L;\r\n-\r\n-    @Id\r\n-    protected long pk;\r\n-\r\n-    @Basic\r\n-    @Column(length = 35)\r\n-    protected String stringField;\r\n-\r\n-    @Basic\r\n-    protected int intField;\r\n-\r\n-    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\r\n-    protected Entity2 entity2Field;\r\n-\r\n-    @Version\r\n-    protected int versionField;\r\n-\r\n-    public Entity1() {\r\n-    }\r\n-\r\n-    public Entity1(long pk, String stringField, int intField) {\r\n-        this.pk = pk;\r\n-        this.stringField = stringField;\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public long getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setStringField(String val) {\r\n-        stringField = val;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setIntField(int val) {\r\n-        intField = val;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return intField;\r\n-    }\r\n-\r\n-    public void setEntity2Field(Entity2 val) {\r\n-        entity2Field = val;\r\n-    }\r\n-\r\n-    public Entity2 getEntity2Field() {\r\n-        return entity2Field;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n-            intField);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToOne;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name = \"entity_1\")\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@SqlResultSetMapping(name = \"NativeTestResult\",\n+    entities = @EntityResult(entityClass = Entity1.class))\n+public class Entity1 implements Serializable {\n+\n+    private static final long serialVersionUID = 2882935803066041165L;\n+\n+    @Id\n+    protected long pk;\n+\n+    @Basic\n+    @Column(length = 35)\n+    protected String stringField;\n+\n+    @Basic\n+    protected int intField;\n+\n+    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\n+    protected Entity2 entity2Field;\n+\n+    @Version\n+    protected int versionField;\n+\n+    public Entity1() {\n+    }\n+\n+    public Entity1(long pk, String stringField, int intField) {\n+        this.pk = pk;\n+        this.stringField = stringField;\n+        this.intField = intField;\n+    }\n+\n+    public long getPk() {\n+        return pk;\n+    }\n+\n+    public void setStringField(String val) {\n+        stringField = val;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setIntField(int val) {\n+        intField = val;\n+    }\n+\n+    public int getIntField() {\n+        return intField;\n+    }\n+\n+    public void setEntity2Field(Entity2 val) {\n+        entity2Field = val;\n+    }\n+\n+    public Entity2 getEntity2Field() {\n+        return entity2Field;\n+    }\n+\n+    public String toString() {\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\n+            intField);\n+    }\n+}"},{"sha":"b45037195fbd84d3fb1a29a500cab81f997deef6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,86 +1,86 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-//@Entity(name=\"entity2ExplicitName\")\r\n-\r\n-//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-/**\r\n- * FIX-ME\r\n- * <p/>\r\n- * It should complain if i uncomment the above strategies...but it does\r\n- */\r\n-@Entity\r\n-public class Entity2 implements Serializable {\r\n-\r\n-    /**\r\n-     *\r\n-     */\r\n-    private static final long serialVersionUID = 4723739219953167343L;\r\n-\r\n-    @Id\r\n-    protected long pk;\r\n-\r\n-    @Basic\r\n-    @Column(length = 35)\r\n-    protected String stringField;\r\n-\r\n-    @Basic\r\n-    protected int intField;\r\n-\r\n-    public Entity2() {\r\n-    }\r\n-\r\n-    public Entity2(long pk, String stringField, int intField) {\r\n-        this.pk = pk;\r\n-        this.stringField = stringField;\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public long getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setStringField(String val) {\r\n-        stringField = val;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setIntField(int val) {\r\n-        intField = val;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return intField;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n-            intField);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+//@Entity(name=\"entity2ExplicitName\")\n+\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+/**\n+ * FIX-ME\n+ * <p/>\n+ * It should complain if i uncomment the above strategies...but it does\n+ */\n+@Entity\n+public class Entity2 implements Serializable {\n+\n+    /**\n+     *\n+     */\n+    private static final long serialVersionUID = 4723739219953167343L;\n+\n+    @Id\n+    protected long pk;\n+\n+    @Basic\n+    @Column(length = 35)\n+    protected String stringField;\n+\n+    @Basic\n+    protected int intField;\n+\n+    public Entity2() {\n+    }\n+\n+    public Entity2(long pk, String stringField, int intField) {\n+        this.pk = pk;\n+        this.stringField = stringField;\n+        this.intField = intField;\n+    }\n+\n+    public long getPk() {\n+        return pk;\n+    }\n+\n+    public void setStringField(String val) {\n+        stringField = val;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setIntField(int val) {\n+        intField = val;\n+    }\n+\n+    public int getIntField() {\n+        return intField;\n+    }\n+\n+    public String toString() {\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\n+            intField);\n+    }\n+}"},{"sha":"4cda6ca2c6ba3eb47a5c61ac80a27f4c12a405e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,73 +1,73 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@Table(name = \"MGDINVERSE\")\r\n-public class ManagedInverseTestInstance {\r\n-\r\n-    private long id;\r\n-    private int version;\r\n-    private String stringField;\r\n-    private ManagedInverseTestInstance2 managed2;\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    @OneToOne(cascade = CascadeType.PERSIST)\r\n-    public ManagedInverseTestInstance2 getManaged2() {\r\n-        return managed2;\r\n-    }\r\n-\r\n-    public void setManaged2(ManagedInverseTestInstance2 managed2) {\r\n-        this.managed2 = managed2;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    @Version\r\n-    public int getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setVersion(int version) {\r\n-        this.version = version;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name = \"MGDINVERSE\")\n+public class ManagedInverseTestInstance {\n+\n+    private long id;\n+    private int version;\n+    private String stringField;\n+    private ManagedInverseTestInstance2 managed2;\n+\n+    @Id\n+    @GeneratedValue\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    @OneToOne(cascade = CascadeType.PERSIST)\n+    public ManagedInverseTestInstance2 getManaged2() {\n+        return managed2;\n+    }\n+\n+    public void setManaged2(ManagedInverseTestInstance2 managed2) {\n+        this.managed2 = managed2;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    @Version\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"2dacbe242e963c283df0727eb19f555e4496bee5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,73 +1,73 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@Table(name = \"MGDINVERSE_2\")\r\n-public class ManagedInverseTestInstance2 {\r\n-\r\n-    private long id;\r\n-    private int version;\r\n-    private String stringField;\r\n-    private ManagedInverseTestInstance managed;\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    @OneToOne(cascade = CascadeType.PERSIST, mappedBy = \"managed2\")\r\n-    public ManagedInverseTestInstance getManaged() {\r\n-        return managed;\r\n-    }\r\n-\r\n-    public void setManaged(ManagedInverseTestInstance managed) {\r\n-        this.managed = managed;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    @Version\r\n-    public int getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setVersion(int version) {\r\n-        this.version = version;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name = \"MGDINVERSE_2\")\n+public class ManagedInverseTestInstance2 {\n+\n+    private long id;\n+    private int version;\n+    private String stringField;\n+    private ManagedInverseTestInstance managed;\n+\n+    @Id\n+    @GeneratedValue\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    @OneToOne(cascade = CascadeType.PERSIST, mappedBy = \"managed2\")\n+    public ManagedInverseTestInstance getManaged() {\n+        return managed;\n+    }\n+\n+    public void setManaged(ManagedInverseTestInstance managed) {\n+        this.managed = managed;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    @Version\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"c2423e13b31748b2bf190dd230ce9e83cdc02a64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,31 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class No2NoArgs {\r\n-\r\n-    private String name;\r\n-\r\n-    public No2NoArgs(String n) {\r\n-        name = n;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class No2NoArgs {\n+\n+    private String name;\n+\n+    public No2NoArgs(String n) {\n+        name = n;\n+    }\n+}"},{"sha":"586a9769eca2024ba9f47de26ec6ad3ee96718c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,31 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public final class No3NoArgs {\r\n-\r\n-    private String name;\r\n-\r\n-    public No3NoArgs(String n) {\r\n-        name = n;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public final class No3NoArgs {\n+\n+    private String name;\n+\n+    public No3NoArgs(String n) {\n+        name = n;\n+    }\n+}"},{"sha":"3073a23f37e99011839e621410a2c98c77976514","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class NoClone implements Cloneable {\r\n-\r\n-    private String string;\r\n-\r\n-    public NoClone(String str) {\r\n-        this.string = str;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return string;\r\n-    }\r\n-\r\n-    public NoClone safeClone() {\r\n-        try {\r\n-            return (NoClone) clone();\r\n-        } catch (CloneNotSupportedException cnfe) {\r\n-            return null;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class NoClone implements Cloneable {\n+\n+    private String string;\n+\n+    public NoClone(String str) {\n+        this.string = str;\n+    }\n+\n+    public String getString() {\n+        return string;\n+    }\n+\n+    public NoClone safeClone() {\n+        try {\n+            return (NoClone) clone();\n+        } catch (CloneNotSupportedException cnfe) {\n+            return null;\n+        }\n+    }\n+}"},{"sha":"21abd09ab2fc00ad631fe56b9f2682745c60caf5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,31 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class NoNoArgs {\r\n-\r\n-    private String name;\r\n-\r\n-    public NoNoArgs(String n) {\r\n-        name = n;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class NoNoArgs {\n+\n+    private String name;\n+\n+    public NoNoArgs(String n) {\n+        name = n;\n+    }\n+}"},{"sha":"43abc9178dc2209d67bb9e0efa78c84a328dc447","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,26 +1,26 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class NonPCClone {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class NonPCClone {\n+\n+}"},{"sha":"8f645182c784f5a0fec680289692d6266c4b56e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class PCClone implements Cloneable {\r\n-\r\n-    private String string;\r\n-\r\n-    public PCClone(String str) {\r\n-        this.string = str;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return string;\r\n-    }\r\n-\r\n-    public Object clone() {\r\n-        try {\r\n-            return (PCClone) super.clone();\r\n-        } catch (CloneNotSupportedException cnfe) {\r\n-            return null;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class PCClone implements Cloneable {\n+\n+    private String string;\n+\n+    public PCClone(String str) {\n+        this.string = str;\n+    }\n+\n+    public String getString() {\n+        return string;\n+    }\n+\n+    public Object clone() {\n+        try {\n+            return (PCClone) super.clone();\n+        } catch (CloneNotSupportedException cnfe) {\n+            return null;\n+        }\n+    }\n+}"},{"sha":"3711aa5b069efde1b601d38b67ae6dd3f8066847","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class SubclassClone extends NonPCClone implements Cloneable {\r\n-\r\n-    private String string;\r\n-\r\n-    public SubclassClone(String str) {\r\n-        this.string = str;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return string;\r\n-    }\r\n-\r\n-    public SubclassClone safeClone() {\r\n-        try {\r\n-            return (SubclassClone) super.clone();\r\n-        } catch (CloneNotSupportedException cnfe) {\r\n-            return null;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassClone extends NonPCClone implements Cloneable {\n+\n+    private String string;\n+\n+    public SubclassClone(String str) {\n+        this.string = str;\n+    }\n+\n+    public String getString() {\n+        return string;\n+    }\n+\n+    public SubclassClone safeClone() {\n+        try {\n+            return (SubclassClone) super.clone();\n+        } catch (CloneNotSupportedException cnfe) {\n+            return null;\n+        }\n+    }\n+}"},{"sha":"0d6310156b7dc87473b1e6bb386d06df92b477ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,30 +1,30 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.enhance.common.apps;\r\n-\r\n-/**\r\n- * The various subclass test classes that we use all implement this interface,\r\n- * to allow reuse in some of the unit tests.\r\n- */\r\n-public interface SubclassTestInstance {\r\n-\r\n-    public void setStringField(String s);\r\n-\r\n-    public String getStringField();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+/**\n+ * The various subclass test classes that we use all implement this interface,\n+ * to allow reuse in some of the unit tests.\n+ */\n+public interface SubclassTestInstance {\n+\n+    public void setStringField(String s);\n+\n+    public String getStringField();\n+}"},{"sha":"167b64e2d84ce753a791484d55fa65c2eba89cab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","status":"modified","additions":1142,"deletions":1142,"changes":2284,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,1142 +1,1142 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.entityoperation;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.entityoperation.common.apps.CascadesEntity;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-/**\r\n- * <p>Test EJB persistence cascade options.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestCascades extends AbstractTestCase {\r\n-\r\n-    public TestCascades(String name) {\r\n-        super(name, \"entityopcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CascadesEntity.class);\r\n-    }\r\n-\r\n-    public void testNoCascadePersist ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setNone (rel);\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         assertTrue (em.isPersistent (ent));\r\n-         assertFalse (em.isPersistent (rel));\r\n-         rollbackTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCascadePersistIsImmediate ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel1 = new CascadesEntity ();\r\n-         CascadesEntity rel2 = new CascadesEntity ();\r\n-         ent.setAll (rel1);\r\n-         ent.getAllCollection ().add (rel2);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         assertTrue (em.isPersistent (ent));\r\n-         assertTrue (em.isPersistent (rel1));\r\n-         assertTrue (em.isPersistent (rel2));\r\n-         rollbackTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadePersistFlushWithDeletedCausesException ()\r\n-     {\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (rel);\r\n-         endTx(em);\r\n-         long id = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         rel = em.find (CascadesEntity.class, id);\r\n-         assertNotNull (rel);\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         ent.setNone (rel);\r\n-         startTx(em);\r\n-         em.remove (rel);\r\n-         em.persist (ent);\r\n-         try\r\n-         {\r\n-             endTx(em);\r\n-             fail (\"Allowed flush with deleted object in non-cascade-persist \"\r\n-                 + \"relation field\");\r\n-         }\r\n-         catch (RuntimeException re)\r\n-         {\r\n-         }\r\n-         catch (Exception e)\r\n-         {}\r\n-\r\n-         assertTrue (!em.getTransaction().isActive ());\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         rel = em.find (CascadesEntity.class, id);\r\n-         assertNotNull (rel);\r\n-         ent = new CascadesEntity ();\r\n-         ent.getNoneCollection ().add (rel);\r\n-         startTx(em);\r\n-         em.remove (rel);\r\n-         em.persist (ent);\r\n-         try\r\n-         {\r\n-             endTx(em);\r\n-             fail (\"Allowed flush with deleted object in non-cascade-persist \"\r\n-                 + \"relation field\");\r\n-         }\r\n-         catch (RuntimeException re)\r\n-         {\r\n-         }\r\n-         catch (Exception re)\r\n-         {\r\n-         }\r\n-         assertTrue (!em.getTransaction().isActive ());\r\n-\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCascadePersistFlushWithDeleted ()\r\n-     {\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (rel);\r\n-         endTx(em);\r\n-         long id = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         rel = em.find (CascadesEntity.class, id);\r\n-         assertNotNull (rel);\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         ent.setAll (rel);\r\n-         startTx(em);\r\n-         em.remove (rel);\r\n-         em.persist (ent);\r\n-         endTx(em);\r\n-         assertTrue (!em.getTransaction().isActive ());\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         rel = em.find (CascadesEntity.class, id);\r\n-         assertNotNull (rel);\r\n-         ent = new CascadesEntity ();\r\n-         ent.getAllCollection ().add (rel);\r\n-         startTx(em);\r\n-         em.remove (rel);\r\n-         em.persist (ent);\r\n-         endTx(em);\r\n-         assertTrue (!em.getTransaction().isActive ());\r\n-\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         rel = em.find (CascadesEntity.class, id);\r\n-         assertNotNull (rel);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadePersistFlushWithTransientCausesException ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setNone (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         try\r\n-         {\r\n-             endTx(em);\r\n-             fail (\"Allowed flush with transient object in non-cascade-persist \"\r\n-                 + \"relation field\");\r\n-         }\r\n-         catch (RuntimeException re)\r\n-         {\r\n-         }\r\n-         catch (Exception re)\r\n-         {\r\n-         }\r\n-\r\n-\r\n-         assertTrue (!em.getTransaction().isActive ());\r\n-         endEm(em);\r\n-\r\n-         ent = new CascadesEntity ();\r\n-         rel = new CascadesEntity ();\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         try\r\n-         {\r\n-             endTx(em);\r\n-             fail (\"Allowed flush with transient object in non-cascade-persist \"\r\n-                 + \"relation field\");\r\n-         }\r\n-         catch (RuntimeException re)\r\n-         {\r\n-         }\r\n-         catch (Exception re)\r\n-         {\r\n-         }\r\n-         assertTrue (!em.getTransaction().isActive ());\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadePersistFlushWithPersistent ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setNone (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         assertFalse(em.isPersistent (rel));\r\n-         em.persist (rel);\r\n-         endTx(em);\r\n-         long id = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         ent = new CascadesEntity ();\r\n-         rel = new CascadesEntity ();\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNotNull (em.find (CascadesEntity.class, id));\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         assertFalse (em.isPersistent (rel));\r\n-         em.persist (rel);\r\n-         endTx(em);\r\n-         id = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNotNull (em.find (CascadesEntity.class, id));\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCascadePersistFlushWithTransient ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         ent.setAll (rel);\r\n-         assertFalse (em.isPersistent (rel));\r\n-         endTx(em);\r\n-         long id = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         ent = new CascadesEntity ();\r\n-         rel = new CascadesEntity ();\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNotNull (em.find (CascadesEntity.class, id));\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         ent.getAllCollection ().add (rel);\r\n-         assertFalse (em.isPersistent (rel));\r\n-         endTx(em);\r\n-         id = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNotNull (em.find (CascadesEntity.class, id));\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCascadePersistFlushWithPersistent ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setAll (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         assertTrue (em.isPersistent (rel));\r\n-         endTx(em);\r\n-         long id = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         ent = new CascadesEntity ();\r\n-         rel = new CascadesEntity ();\r\n-         ent.getAllCollection ().add (rel);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNotNull (em.find (CascadesEntity.class, id));\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         assertTrue (em.isPersistent (rel));\r\n-         endTx(em);\r\n-         id = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNotNull (em.find (CascadesEntity.class, id));\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCascadeCircleThroughPersistent ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         CascadesEntity top = new CascadesEntity ();\r\n-         top.setAll (ent);\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-\r\n-         startTx(em);\r\n-         ent.setAll (rel);\r\n-         rel.setAll (top);\r\n-         em.persist (top);\r\n-         assertTrue (em.isPersistent (top));\r\n-         assertTrue (em.isPersistent (ent));\r\n-         assertTrue (em.isPersistent (rel));\r\n-         rollbackTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadeDelete ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         CascadesEntity depend = new CascadesEntity ();\r\n-         ent.setNone (rel);\r\n-         ent.setDependent (depend);\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persistAll (ent, rel, depend);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long relId = rel.getId ();\r\n-         long dependId = depend.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         rel = ent.getNone ();\r\n-         depend = ent.getDependent ();\r\n-         assertEquals (relId, rel.getId ());\r\n-         assertEquals (dependId, depend.getId ());\r\n-         assertEquals (1, ent.getNoneCollection ().size ());\r\n-         assertEquals (relId, ent.getNoneCollection ().iterator ().next ().getId ());\r\n-\r\n-         startTx(em);\r\n-         em.remove (ent);\r\n-         assertTrue (em.isRemoved (ent));\r\n-         assertFalse (em.isRemoved (rel));\r\n-         assertFalse (em.isRemoved (depend));\r\n-         endTx(em);\r\n-         assertFalse (em.isPersistent (ent));\r\n-         assertTrue (em.isPersistent (rel));\r\n-         assertFalse (em.isPersistent (depend));\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNull (em.find (CascadesEntity.class, id));\r\n-         assertNotNull (em.find (CascadesEntity.class, relId));\r\n-         assertNull (em.find (CascadesEntity.class, dependId));\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testDeepCascadeDelete ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel1 = new CascadesEntity ();\r\n-         CascadesEntity rel2 = new CascadesEntity ();\r\n-         CascadesEntity depend = new CascadesEntity ();\r\n-         CascadesEntity deep1 = new CascadesEntity ();\r\n-         CascadesEntity deep2 = new CascadesEntity ();\r\n-         CascadesEntity deep3 = new CascadesEntity ();\r\n-         ent.setAll (rel1);\r\n-         rel1.setAll (deep1);\r\n-         ent.getAllCollection ().add (rel2);\r\n-         rel2.getAllCollection ().add (deep2);\r\n-         ent.setDependent (depend);\r\n-         depend.setAll (deep3);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persistAll (ent, depend);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long rel1Id = rel1.getId ();\r\n-         long rel2Id = rel2.getId ();\r\n-         long deep1Id = deep1.getId ();\r\n-         long deep2Id = deep2.getId ();\r\n-         long deep3Id = deep3.getId ();\r\n-         long dependId = depend.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         rel1 = ent.getAll ();\r\n-         assertEquals (rel1Id, rel1.getId ());\r\n-         deep1 = rel1.getAll ();\r\n-         assertEquals (deep1Id, deep1.getId ());\r\n-         assertEquals (1, ent.getAllCollection ().size ());\r\n-         rel2 = ent.getAllCollection ().iterator ().next ();\r\n-         assertEquals (rel2Id, rel2.getId ());\r\n-         assertEquals (1, rel2.getAllCollection ().size ());\r\n-         deep2 = rel2.getAllCollection ().iterator ().next ();\r\n-         assertEquals (deep2Id, deep2.getId ());\r\n-         depend = ent.getDependent ();\r\n-         assertEquals (dependId, depend.getId ());\r\n-         deep3 = depend.getAll ();\r\n-         assertEquals (deep3Id, deep3.getId ());\r\n-\r\n-         startTx(em);\r\n-         em.remove (ent);\r\n-         assertTrue (em.isRemoved (ent));\r\n-         assertTrue (em.isRemoved (rel1));\r\n-         assertTrue (em.isRemoved (rel2));\r\n-         assertTrue (em.isRemoved (deep1));\r\n-         assertTrue (em.isRemoved (deep2));\r\n-         assertFalse (em.isRemoved (depend));\r\n-         assertFalse (em.isRemoved (deep3));\r\n-         endTx(em);\r\n-         assertFalse (em.isPersistent (ent));\r\n-         assertFalse (em.isPersistent (rel1));\r\n-         assertFalse (em.isPersistent (rel2));\r\n-         assertFalse (em.isPersistent (deep1));\r\n-         assertFalse (em.isPersistent (depend));\r\n-         assertFalse (em.isPersistent (deep2));\r\n-         assertFalse(em.isPersistent (deep3));\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNull (em.find (CascadesEntity.class, id));\r\n-         assertNull (em.find (CascadesEntity.class, rel1Id));\r\n-         assertNull (em.find (CascadesEntity.class, rel2Id));\r\n-         assertNull (em.find (CascadesEntity.class, deep1Id));\r\n-         assertNull (em.find (CascadesEntity.class, deep2Id));\r\n-         assertNull (em.find (CascadesEntity.class, deep3Id));\r\n-         assertNull (em.find (CascadesEntity.class, dependId));\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCircularCascadeDelete ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setAll (rel);\r\n-         ent.getAllCollection ().add (rel);\r\n-         rel.setAll (ent);\r\n-         rel.getAllCollection ().add (ent);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long relId = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         rel = ent.getAll ();\r\n-         assertEquals (relId, rel.getId ());\r\n-         assertEquals (rel, ent.getAllCollection ().iterator ().next ());\r\n-         assertEquals (ent, rel.getAllCollection ().iterator ().next ());\r\n-\r\n-         startTx(em);\r\n-         em.remove (ent);\r\n-         assertTrue (em.isRemoved (ent));\r\n-         assertTrue (em.isRemoved (rel));\r\n-         endTx(em);\r\n-         assertFalse (em.isPersistent (ent));\r\n-         assertFalse (em.isPersistent (rel));\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNull (em.find (CascadesEntity.class, id));\r\n-         assertNull (em.find (CascadesEntity.class, relId));\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadeRefresh ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setNone (rel);\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persistAll (ent, rel);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long relId = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         rel = ent.getNone ();\r\n-         assertEquals (relId, rel.getId ());\r\n-\r\n-         startTx(em);\r\n-         assertNull (ent.getDependent ());\r\n-         assertNull (rel.getDependent ());\r\n-         ent.setDependent (new CascadesEntity ());\r\n-         rel.setDependent (new CascadesEntity ());\r\n-         em.persist (ent.getDependent ());\r\n-         em.persist (rel.getDependent ());\r\n-         em.refresh (ent);\r\n-         assertNull (ent.getDependent ());\r\n-         assertNotNull (rel.getDependent ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         assertNull (em.find (CascadesEntity.class, id).getDependent ());\r\n-         assertNotNull (em.find (CascadesEntity.class, relId).getDependent ());\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCircularCascadeRefresh ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setAll (rel);\r\n-         rel.setAll (ent);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long relId = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         rel = ent.getAll ();\r\n-         assertEquals (relId, rel.getId ());\r\n-         assertEquals (ent, rel.getAll ());\r\n-\r\n-         startTx(em);\r\n-         assertNull (ent.getDependent ());\r\n-         assertNull (rel.getDependent ());\r\n-         ent.setDependent (new CascadesEntity ());\r\n-         rel.setDependent (new CascadesEntity ());\r\n-         em.persist (ent.getDependent ());\r\n-         em.persist (rel.getDependent ());\r\n-         em.refresh (ent);\r\n-         assertNull (ent.getDependent ());\r\n-         assertNull (rel.getDependent ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         assertEquals (relId, ent.getAll ().getId ());\r\n-         assertNull (ent.getDependent ());\r\n-         assertNull (em.find (CascadesEntity.class, relId).getDependent ());\r\n-         endEm(em);\r\n-\r\n-         ent = new CascadesEntity ();\r\n-         rel = new CascadesEntity ();\r\n-         CascadesEntity deep = new CascadesEntity ();\r\n-         ent.getAllCollection ().add (rel);\r\n-         rel.getAllCollection ().add (ent);\r\n-         rel.getAllCollection ().add (deep);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         endTx(em);\r\n-         id = ent.getId ();\r\n-         relId = rel.getId ();\r\n-         long deepId = deep.getId ();\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         rel = ent.getAllCollection ().iterator ().next ();\r\n-         assertEquals (relId, rel.getId ());\r\n-         assertEquals (2, rel.getAllCollection ().size ());\r\n-         deep = null;\r\n-         for (CascadesEntity elem : rel.getAllCollection ())\r\n-             if (elem != ent)\r\n-                 deep = elem;\r\n-         assertEquals (deepId, deep.getId ());\r\n-\r\n-         startTx(em);\r\n-         assertNull (ent.getDependent ());\r\n-         assertNull (rel.getDependent ());\r\n-         assertNull (deep.getDependent ());\r\n-         ent.setDependent (new CascadesEntity ());\r\n-         ent.getAllCollection ().add (new CascadesEntity ());\r\n-         rel.setDependent (new CascadesEntity ());\r\n-         deep.setDependent (new CascadesEntity ());\r\n-         em.persistAll (ent.getAllCollection ());\r\n-         em.persist (ent.getDependent ());\r\n-         em.persist (rel.getDependent ());\r\n-         em.persist (deep.getDependent ());\r\n-         em.refresh (ent);\r\n-         assertNull (ent.getDependent ());\r\n-         assertEquals (1, ent.getAllCollection ().size ());\r\n-         assertTrue (ent.getAllCollection ().contains (rel));\r\n-         assertNull (rel.getDependent ());\r\n-         assertEquals (2, rel.getAllCollection ().size ());\r\n-         assertTrue (rel.getAllCollection ().contains (ent));\r\n-         assertTrue (rel.getAllCollection ().contains (deep));\r\n-         assertNull (deep.getDependent ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         ent = em.find (CascadesEntity.class, id);\r\n-         assertEquals (1, ent.getAllCollection ().size ());\r\n-         assertEquals (relId, ent.getAllCollection ().iterator ().next ().\r\n-             getId ());\r\n-         assertNull (ent.getDependent ());\r\n-         assertNull (em.find (CascadesEntity.class, relId).getDependent ());\r\n-         assertNull (em.find (CascadesEntity.class, deepId).getDependent ());\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadeAttachClean ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setName (\"ent\");\r\n-         rel.setName (\"rel\");\r\n-         ent.setNone (rel);\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persistAll (ent, rel);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long relId = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (\"rel\", rel.getName ());\r\n-         assertEquals (rel, ent.getNone ());\r\n-         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         ent = em.merge (ent);\r\n-         assertTrue (!em.isDirty (ent));\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (id, ent.getId ());\r\n-         assertTrue (ent.getNone () != rel);\r\n-         rel = ent.getNone ();\r\n-         assertNotNull (rel);\r\n-         assertTrue (!em.isDirty (rel));\r\n-         assertEquals (1, ent.getNoneCollection ().size ());\r\n-         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\r\n-\r\n-         assertTrue (em.isPersistent (rel));\r\n-         assertEquals (relId, rel.getId ());\r\n-         assertEquals (\"rel\", rel.getName ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCascadeAttachClean ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel1 = new CascadesEntity ();\r\n-         CascadesEntity rel2 = new CascadesEntity ();\r\n-         ent.setName (\"ent\");\r\n-         rel1.setName (\"rel1\");\r\n-         ent.setAll (rel1);\r\n-         rel2.setName (\"rel2\");\r\n-         ent.getAllCollection ().add (rel2);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long rel1Id = rel1.getId ();\r\n-         long rel2Id = rel2.getId ();\r\n-         endEm(em);\r\n-\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (\"rel1\", rel1.getName ());\r\n-         assertEquals (\"rel2\", rel2.getName ());\r\n-         assertEquals (rel1, ent.getAll ());\r\n-         assertEquals (rel2, ent.getAllCollection ().iterator ().next ());\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         ent = em.merge (ent);\r\n-         assertTrue (!em.isDirty (ent));\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (id, ent.getId ());\r\n-         assertTrue (rel1 != ent.getAll ());\r\n-         rel1 = ent.getAll ();\r\n-         assertTrue (!em.isDirty (rel1));\r\n-         assertEquals (1, ent.getAllCollection ().size ());\r\n-         rel2 = ent.getAllCollection ().iterator ().next ();\r\n-         assertTrue (!em.isDirty (rel2));\r\n-\r\n-         assertTrue (em.isPersistent (rel1));\r\n-         assertEquals (rel1Id, rel1.getId ());\r\n-         assertEquals (\"rel1\", rel1.getName ());\r\n-         assertTrue (em.isPersistent (rel2));\r\n-         assertEquals (rel2Id, rel2.getId ());\r\n-         assertEquals (\"rel2\", rel2.getName ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadeAttachDirtyFields ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         ent.setName (\"ent\");\r\n-         rel.setName (\"rel\");\r\n-         ent.setNone (rel);\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persistAll (ent, rel);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long relId = rel.getId ();\r\n-         endEm(em);\r\n-\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (\"rel\", rel.getName ());\r\n-         assertEquals (rel, ent.getNone ());\r\n-         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\r\n-         rel.setName (\"foo\");\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         ent = em.merge (ent);\r\n-         assertTrue (!em.isDirty (ent));\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (id, ent.getId ());\r\n-         assertTrue (ent.getNone () != rel);\r\n-         rel = ent.getNone ();\r\n-         assertNotNull (rel);\r\n-         assertTrue (!em.isDirty (rel));\r\n-         assertEquals (relId, rel.getId ());\r\n-         assertEquals (1, ent.getNoneCollection ().size ());\r\n-         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\r\n-\r\n-         assertTrue (em.isPersistent (rel));\r\n-         assertEquals (relId, rel.getId ());\r\n-         assertEquals (\"rel\", rel.getName ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCascadeAttachDirtyFields ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel1 = new CascadesEntity ();\r\n-         CascadesEntity rel2 = new CascadesEntity ();\r\n-         ent.setName (\"ent\");\r\n-         rel1.setName (\"rel1\");\r\n-         ent.setAll (rel1);\r\n-         rel2.setName (\"rel2\");\r\n-         ent.getAllCollection ().add (rel2);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persist (ent);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long rel1Id = rel1.getId ();\r\n-         long rel2Id = rel2.getId ();\r\n-         endEm(em);\r\n-\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (\"rel1\", rel1.getName ());\r\n-         assertEquals (\"rel2\", rel2.getName ());\r\n-         assertEquals (rel1, ent.getAll ());\r\n-         assertEquals (rel2, ent.getAllCollection ().iterator ().next ());\r\n-         rel1.setName (\"foo\");\r\n-         rel2.setName (\"bar\");\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         ent = em.merge (ent);\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertTrue (!em.isDirty (ent));\r\n-         assertEquals (id, ent.getId ());\r\n-         assertTrue (rel1 != ent.getAll ());\r\n-         rel1 = ent.getAll ();\r\n-         assertTrue (em.isDirty (rel1));\r\n-         assertEquals (1, ent.getAllCollection ().size ());\r\n-         rel2 = ent.getAllCollection ().iterator ().next ();\r\n-         assertTrue (em.isDirty (rel2));\r\n-\r\n-         assertTrue (em.isPersistent (rel1));\r\n-         assertEquals (rel1Id, rel1.getId ());\r\n-         assertEquals (\"foo\", rel1.getName ());\r\n-         assertTrue (em.isPersistent (rel2));\r\n-         assertEquals (rel2Id, rel2.getId ());\r\n-         assertEquals (\"bar\", rel2.getName ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadeAttachDirtyRelations ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         CascadesEntity other = new CascadesEntity ();\r\n-         ent.setName (\"ent\");\r\n-         rel.setName (\"rel\");\r\n-         other.setName (\"other\");\r\n-         ent.setNone (rel);\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persistAll (ent, rel, other);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long relId = rel.getId ();\r\n-         long otherId = other.getId ();\r\n-         endEm(em);\r\n-\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (\"rel\", rel.getName ());\r\n-         assertEquals (\"other\", other.getName ());\r\n-         assertEquals (rel, ent.getNone ());\r\n-         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\r\n-         other.setName (\"foo\");\r\n-         ent.setNone (other);\r\n-         ent.getNoneCollection ().remove (rel);\r\n-         ent.getNoneCollection ().add (other);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         ent = em.merge (ent);\r\n-         assertTrue (em.isDirty (ent));\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (id, ent.getId ());\r\n-         assertTrue (ent.getNone () != rel);\r\n-         assertTrue (ent.getNone () != other);\r\n-         other = ent.getNone ();\r\n-         assertNotNull (other);\r\n-         assertTrue (!em.isDirty (other));\r\n-         assertEquals (otherId, other.getId ());\r\n-         assertEquals (1, ent.getNoneCollection ().size ());\r\n-         assertEquals (other, ent.getNoneCollection ().iterator ().next ());\r\n-\r\n-         assertTrue (em.isPersistent (other));\r\n-         assertFalse (em.isPersistent (rel));\r\n-         assertEquals (otherId, other.getId ());\r\n-         assertEquals (\"other\", other.getName ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testCascadeAttachDirtyRelations ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel1 = new CascadesEntity ();\r\n-         CascadesEntity rel2 = new CascadesEntity ();\r\n-         CascadesEntity other1 = new CascadesEntity ();\r\n-         CascadesEntity other2 = new CascadesEntity ();\r\n-         ent.setName (\"ent\");\r\n-         rel1.setName (\"rel1\");\r\n-         ent.setAll (rel1);\r\n-         rel2.setName (\"rel2\");\r\n-         ent.getAllCollection ().add (rel2);\r\n-         other1.setName (\"other1\");\r\n-         other2.setName (\"other2\");\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persistAll (ent, other1, other2);\r\n-         endTx(em);\r\n-         long id = ent.getId ();\r\n-         long rel1Id = rel1.getId ();\r\n-         long rel2Id = rel2.getId ();\r\n-         long other1Id = other1.getId ();\r\n-         long other2Id = other2.getId ();\r\n-         endEm(em);\r\n-\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertEquals (\"rel1\", rel1.getName ());\r\n-         assertEquals (\"rel2\", rel2.getName ());\r\n-         assertEquals (rel1, ent.getAll ());\r\n-         assertEquals (rel2, ent.getAllCollection ().iterator ().next ());\r\n-         assertEquals (\"other1\", other1.getName ());\r\n-         other1.setName (\"foo\");\r\n-         assertEquals (\"other2\", other2.getName ());\r\n-         other2.setName (\"bar\");\r\n-         ent.setAll (other1);\r\n-         ent.getAllCollection ().remove (rel2);\r\n-         ent.getAllCollection ().add (other2);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         ent = em.merge (ent);\r\n-         assertEquals (\"ent\", ent.getName ());\r\n-         assertTrue (em.isDirty (ent));\r\n-         assertEquals (id, ent.getId ());\r\n-         assertTrue (rel1 != ent.getAll ());\r\n-         assertTrue (other1 != ent.getAll ());\r\n-         other1 = ent.getAll ();\r\n-         assertTrue (em.isDirty (other1));\r\n-         assertEquals (1, ent.getAllCollection ().size ());\r\n-         other2 = ent.getAllCollection ().iterator ().next ();\r\n-         assertTrue (em.isDirty (other2));\r\n-\r\n-         assertTrue (em.isPersistent (other1));\r\n-         assertEquals (other1Id, other1.getId ());\r\n-         assertEquals (\"foo\", other1.getName ());\r\n-         assertTrue (em.isPersistent (other2));\r\n-         assertEquals (other2Id, other2.getId ());\r\n-         assertEquals (\"bar\", other2.getName ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-\r\n-     public void testNoCascadeReferenceIsPreLoadedReference ()\r\n-     {\r\n-         CascadesEntity ent = new CascadesEntity ();\r\n-         CascadesEntity rel = new CascadesEntity ();\r\n-         CascadesEntity other = new CascadesEntity ();\r\n-         ent.setName (\"ent\");\r\n-         rel.setName (\"rel\");\r\n-         other.setName (\"other\");\r\n-         ent.setNone (rel);\r\n-         ent.getNoneCollection ().add (rel);\r\n-\r\n-         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         em.persistAll (ent, rel, other);\r\n-         endTx(em);\r\n-         long otherId = other.getId ();\r\n-         endEm(em);\r\n-\r\n-         ent.setNone (other);\r\n-         ent.getNoneCollection ().remove (rel);\r\n-         ent.getNoneCollection ().add (other);\r\n-\r\n-         em = (OpenJPAEntityManager)currentEntityManager();\r\n-         startTx(em);\r\n-         other = em.find (CascadesEntity.class, otherId);\r\n-         ent = em.merge (ent);\r\n-         assertEquals (other, ent.getNone ());\r\n-         assertEquals (other, ent.getNoneCollection ().iterator ().next ());\r\n-         endTx(em);\r\n-         endEm(em);\r\n-     }\r\n-\r\n-    public void testNoCascadeNewCausesException() {\r\n-        CascadesEntity ent = new CascadesEntity();\r\n-        CascadesEntity rel = new CascadesEntity();\r\n-        ent.setNone(rel);\r\n-\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-        em.persistAll(ent, rel);\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        CascadesEntity other = new CascadesEntity();\r\n-        ent.setNone(other);\r\n-\r\n-        em = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-        try {\r\n-            ent = em.merge(ent);\r\n-            fail(\"Allowed merge of new instance in non-cascading relation.\");\r\n-        }\r\n-        catch (RuntimeException re) {\r\n-            if (isActiveTx(em))\r\n-                rollbackTx(em);\r\n-        }\r\n-        endEm(em);\r\n-\r\n-        ent = new CascadesEntity();\r\n-        em = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-        em.persist(ent);\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        other = new CascadesEntity();\r\n-        ent.getNoneCollection().add(other);\r\n-\r\n-        em = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-        try {\r\n-            ent = em.merge(ent);\r\n-            fail(\"Allowed merge of new instance in non-cascading relation.\");\r\n-        }\r\n-        catch (RuntimeException re) {\r\n-            if (isActiveTx(em))\r\n-                rollbackTx(em);\r\n-        }\r\n-        endEm(em);\r\n-    }\r\n-\r\n-\tpublic void testCascadeNewPersisted ()\r\n-\t{\r\n-\t\tCascadesEntity ent = new CascadesEntity ();\r\n-\t\tCascadesEntity rel1 = new CascadesEntity ();\r\n-\t\tCascadesEntity rel2 = new CascadesEntity ();\r\n-\t\tent.setName (\"ent\");\r\n-\t\trel1.setName (\"rel1\");\r\n-\t\tent.setAll (rel1);\r\n-\t\trel2.setName (\"rel2\");\r\n-\t\tent.getAllCollection ().add (rel2);\r\n-\r\n-\t\tOpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tem.persist (ent);\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\r\n-\t\tCascadesEntity other1 = new CascadesEntity ();\r\n-\t\tCascadesEntity other2 = new CascadesEntity ();\r\n-\t\tother1.setName (\"other1\");\r\n-\t\tother2.setName (\"other2\");\r\n-\r\n-\t\tent.setAll (other1);\r\n-\t\tent.getAllCollection ().remove (rel2);\r\n-\t\tent.getAllCollection ().add (other2);\r\n-\r\n-\t\tem = (OpenJPAEntityManager)currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tent = em.merge (ent);\r\n-\t\tassertTrue (em.isDirty (ent));\r\n-\t\tassertTrue (rel1 != ent.getAll ());\r\n-\t\tassertTrue (other1 != ent.getAll ());\r\n-\t\tother1 = ent.getAll ();\r\n-\t\tassertEquals (\"other1\", other1.getName ());\r\n-\t\tassertTrue (em.isNewlyPersistent (other1));\r\n-\t\tassertEquals (1, ent.getAllCollection ().size ());\r\n-\t\tother2 = ent.getAllCollection ().iterator ().next ();\r\n-\t\tassertEquals (\"other2\", other2.getName ());\r\n-\t\tassertTrue (em.isNewlyPersistent (other2));\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\t}\r\n-\r\n-\r\n-\tpublic void testCascadesDeleteNonPersistent ()\r\n-\t{\r\n-\t\tCascadesEntity all = new CascadesEntity ();\r\n-\t\tCascadesEntity none = new CascadesEntity ();\r\n-\t\tCascadesEntity manyAll = new CascadesEntity ();\r\n-\t\tCascadesEntity manyNone = new CascadesEntity ();\r\n-\t\tOpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tem.persist (all);\r\n-\t\tem.persist (none);\r\n-\t\tem.persist (manyAll);\r\n-\t\tem.persist (manyNone);\r\n-\t\tendTx(em);\r\n-\t\tlong allId = all.getId ();\r\n-\t\tlong noneId = none.getId ();\r\n-\t\tlong manyAllId = manyAll.getId ();\r\n-\t\tlong manyNoneId = manyNone.getId ();\r\n-\t\tendEm(em);\r\n-\r\n-\t\tem = (OpenJPAEntityManager) currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tCascadesEntity ent = new CascadesEntity ();\r\n-\t\tent.setAll (em.find (CascadesEntity.class, allId));\r\n-\t\tent.setNone (em.find (CascadesEntity.class, noneId));\r\n-\t\tent.getAllCollection ().add (em.find (CascadesEntity.class, manyAllId));\r\n-\t\tent.getNoneCollection ().add (em.find (CascadesEntity.class, manyNoneId));\r\n-\t\tem.remove (ent);\r\n-\t\tassertTrue (em.isRemoved (ent.getAll ()));\r\n-\t\tassertFalse (em.isRemoved (ent.getNone ()));\r\n-\t\tfor (CascadesEntity rel : ent.getAllCollection ())\r\n-\t\tassertTrue (em.isRemoved (rel));\r\n-\t\tfor (CascadesEntity rel : ent.getNoneCollection ())\r\n-\t\t\tassertFalse (em.isRemoved (rel));\r\n-\t\tassertFalse (em.contains (ent));\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\r\n-\t\tem = (OpenJPAEntityManager) currentEntityManager();\r\n-\t\tassertNull (em.find (CascadesEntity.class, allId));\r\n-\t\tassertNotNull (em.find (CascadesEntity.class, noneId));\r\n-\t\tassertNull (em.find (CascadesEntity.class, manyAllId));\r\n-\t\tassertNotNull (em.find (CascadesEntity.class, manyNoneId));\r\n-\t\tendEm(em);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.entityoperation;\n+\n+\n+import org.apache.openjpa.persistence.entityoperation.common.apps.CascadesEntity;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * <p>Test EJB persistence cascade options.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestCascades extends AbstractTestCase {\n+\n+    public TestCascades(String name) {\n+        super(name, \"entityopcactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(CascadesEntity.class);\n+    }\n+\n+    public void testNoCascadePersist ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setNone (rel);\n+         ent.getNoneCollection ().add (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         assertTrue (em.isPersistent (ent));\n+         assertFalse (em.isPersistent (rel));\n+         rollbackTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testCascadePersistIsImmediate ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel1 = new CascadesEntity ();\n+         CascadesEntity rel2 = new CascadesEntity ();\n+         ent.setAll (rel1);\n+         ent.getAllCollection ().add (rel2);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         assertTrue (em.isPersistent (ent));\n+         assertTrue (em.isPersistent (rel1));\n+         assertTrue (em.isPersistent (rel2));\n+         rollbackTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadePersistFlushWithDeletedCausesException ()\n+     {\n+         CascadesEntity rel = new CascadesEntity ();\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (rel);\n+         endTx(em);\n+         long id = rel.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         rel = em.find (CascadesEntity.class, id);\n+         assertNotNull (rel);\n+         CascadesEntity ent = new CascadesEntity ();\n+         ent.setNone (rel);\n+         startTx(em);\n+         em.remove (rel);\n+         em.persist (ent);\n+         try\n+         {\n+             endTx(em);\n+             fail (\"Allowed flush with deleted object in non-cascade-persist \"\n+                 + \"relation field\");\n+         }\n+         catch (RuntimeException re)\n+         {\n+         }\n+         catch (Exception e)\n+         {}\n+\n+         assertTrue (!em.getTransaction().isActive ());\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         rel = em.find (CascadesEntity.class, id);\n+         assertNotNull (rel);\n+         ent = new CascadesEntity ();\n+         ent.getNoneCollection ().add (rel);\n+         startTx(em);\n+         em.remove (rel);\n+         em.persist (ent);\n+         try\n+         {\n+             endTx(em);\n+             fail (\"Allowed flush with deleted object in non-cascade-persist \"\n+                 + \"relation field\");\n+         }\n+         catch (RuntimeException re)\n+         {\n+         }\n+         catch (Exception re)\n+         {\n+         }\n+         assertTrue (!em.getTransaction().isActive ());\n+\n+         endEm(em);\n+     }\n+\n+\n+     public void testCascadePersistFlushWithDeleted ()\n+     {\n+         CascadesEntity rel = new CascadesEntity ();\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (rel);\n+         endTx(em);\n+         long id = rel.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         rel = em.find (CascadesEntity.class, id);\n+         assertNotNull (rel);\n+         CascadesEntity ent = new CascadesEntity ();\n+         ent.setAll (rel);\n+         startTx(em);\n+         em.remove (rel);\n+         em.persist (ent);\n+         endTx(em);\n+         assertTrue (!em.getTransaction().isActive ());\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         rel = em.find (CascadesEntity.class, id);\n+         assertNotNull (rel);\n+         ent = new CascadesEntity ();\n+         ent.getAllCollection ().add (rel);\n+         startTx(em);\n+         em.remove (rel);\n+         em.persist (ent);\n+         endTx(em);\n+         assertTrue (!em.getTransaction().isActive ());\n+\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         rel = em.find (CascadesEntity.class, id);\n+         assertNotNull (rel);\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadePersistFlushWithTransientCausesException ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setNone (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         try\n+         {\n+             endTx(em);\n+             fail (\"Allowed flush with transient object in non-cascade-persist \"\n+                 + \"relation field\");\n+         }\n+         catch (RuntimeException re)\n+         {\n+         }\n+         catch (Exception re)\n+         {\n+         }\n+\n+\n+         assertTrue (!em.getTransaction().isActive ());\n+         endEm(em);\n+\n+         ent = new CascadesEntity ();\n+         rel = new CascadesEntity ();\n+         ent.getNoneCollection ().add (rel);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         try\n+         {\n+             endTx(em);\n+             fail (\"Allowed flush with transient object in non-cascade-persist \"\n+                 + \"relation field\");\n+         }\n+         catch (RuntimeException re)\n+         {\n+         }\n+         catch (Exception re)\n+         {\n+         }\n+         assertTrue (!em.getTransaction().isActive ());\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadePersistFlushWithPersistent ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setNone (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         assertFalse(em.isPersistent (rel));\n+         em.persist (rel);\n+         endTx(em);\n+         long id = rel.getId ();\n+         endEm(em);\n+\n+         ent = new CascadesEntity ();\n+         rel = new CascadesEntity ();\n+         ent.getNoneCollection ().add (rel);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNotNull (em.find (CascadesEntity.class, id));\n+         startTx(em);\n+         em.persist (ent);\n+         assertFalse (em.isPersistent (rel));\n+         em.persist (rel);\n+         endTx(em);\n+         id = rel.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNotNull (em.find (CascadesEntity.class, id));\n+         endEm(em);\n+     }\n+\n+\n+     public void testCascadePersistFlushWithTransient ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         ent.setAll (rel);\n+         assertFalse (em.isPersistent (rel));\n+         endTx(em);\n+         long id = rel.getId ();\n+         endEm(em);\n+\n+         ent = new CascadesEntity ();\n+         rel = new CascadesEntity ();\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNotNull (em.find (CascadesEntity.class, id));\n+         startTx(em);\n+         em.persist (ent);\n+         ent.getAllCollection ().add (rel);\n+         assertFalse (em.isPersistent (rel));\n+         endTx(em);\n+         id = rel.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNotNull (em.find (CascadesEntity.class, id));\n+         endEm(em);\n+     }\n+\n+\n+     public void testCascadePersistFlushWithPersistent ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setAll (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         assertTrue (em.isPersistent (rel));\n+         endTx(em);\n+         long id = rel.getId ();\n+         endEm(em);\n+\n+         ent = new CascadesEntity ();\n+         rel = new CascadesEntity ();\n+         ent.getAllCollection ().add (rel);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNotNull (em.find (CascadesEntity.class, id));\n+         startTx(em);\n+         em.persist (ent);\n+         assertTrue (em.isPersistent (rel));\n+         endTx(em);\n+         id = rel.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNotNull (em.find (CascadesEntity.class, id));\n+         endEm(em);\n+     }\n+\n+\n+     public void testCascadeCircleThroughPersistent ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         endTx(em);\n+         long id = ent.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         CascadesEntity top = new CascadesEntity ();\n+         top.setAll (ent);\n+         CascadesEntity rel = new CascadesEntity ();\n+\n+         startTx(em);\n+         ent.setAll (rel);\n+         rel.setAll (top);\n+         em.persist (top);\n+         assertTrue (em.isPersistent (top));\n+         assertTrue (em.isPersistent (ent));\n+         assertTrue (em.isPersistent (rel));\n+         rollbackTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadeDelete ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         CascadesEntity depend = new CascadesEntity ();\n+         ent.setNone (rel);\n+         ent.setDependent (depend);\n+         ent.getNoneCollection ().add (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persistAll (ent, rel, depend);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long relId = rel.getId ();\n+         long dependId = depend.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         rel = ent.getNone ();\n+         depend = ent.getDependent ();\n+         assertEquals (relId, rel.getId ());\n+         assertEquals (dependId, depend.getId ());\n+         assertEquals (1, ent.getNoneCollection ().size ());\n+         assertEquals (relId, ent.getNoneCollection ().iterator ().next ().getId ());\n+\n+         startTx(em);\n+         em.remove (ent);\n+         assertTrue (em.isRemoved (ent));\n+         assertFalse (em.isRemoved (rel));\n+         assertFalse (em.isRemoved (depend));\n+         endTx(em);\n+         assertFalse (em.isPersistent (ent));\n+         assertTrue (em.isPersistent (rel));\n+         assertFalse (em.isPersistent (depend));\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNull (em.find (CascadesEntity.class, id));\n+         assertNotNull (em.find (CascadesEntity.class, relId));\n+         assertNull (em.find (CascadesEntity.class, dependId));\n+         endEm(em);\n+     }\n+\n+\n+     public void testDeepCascadeDelete ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel1 = new CascadesEntity ();\n+         CascadesEntity rel2 = new CascadesEntity ();\n+         CascadesEntity depend = new CascadesEntity ();\n+         CascadesEntity deep1 = new CascadesEntity ();\n+         CascadesEntity deep2 = new CascadesEntity ();\n+         CascadesEntity deep3 = new CascadesEntity ();\n+         ent.setAll (rel1);\n+         rel1.setAll (deep1);\n+         ent.getAllCollection ().add (rel2);\n+         rel2.getAllCollection ().add (deep2);\n+         ent.setDependent (depend);\n+         depend.setAll (deep3);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persistAll (ent, depend);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long rel1Id = rel1.getId ();\n+         long rel2Id = rel2.getId ();\n+         long deep1Id = deep1.getId ();\n+         long deep2Id = deep2.getId ();\n+         long deep3Id = deep3.getId ();\n+         long dependId = depend.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         rel1 = ent.getAll ();\n+         assertEquals (rel1Id, rel1.getId ());\n+         deep1 = rel1.getAll ();\n+         assertEquals (deep1Id, deep1.getId ());\n+         assertEquals (1, ent.getAllCollection ().size ());\n+         rel2 = ent.getAllCollection ().iterator ().next ();\n+         assertEquals (rel2Id, rel2.getId ());\n+         assertEquals (1, rel2.getAllCollection ().size ());\n+         deep2 = rel2.getAllCollection ().iterator ().next ();\n+         assertEquals (deep2Id, deep2.getId ());\n+         depend = ent.getDependent ();\n+         assertEquals (dependId, depend.getId ());\n+         deep3 = depend.getAll ();\n+         assertEquals (deep3Id, deep3.getId ());\n+\n+         startTx(em);\n+         em.remove (ent);\n+         assertTrue (em.isRemoved (ent));\n+         assertTrue (em.isRemoved (rel1));\n+         assertTrue (em.isRemoved (rel2));\n+         assertTrue (em.isRemoved (deep1));\n+         assertTrue (em.isRemoved (deep2));\n+         assertFalse (em.isRemoved (depend));\n+         assertFalse (em.isRemoved (deep3));\n+         endTx(em);\n+         assertFalse (em.isPersistent (ent));\n+         assertFalse (em.isPersistent (rel1));\n+         assertFalse (em.isPersistent (rel2));\n+         assertFalse (em.isPersistent (deep1));\n+         assertFalse (em.isPersistent (depend));\n+         assertFalse (em.isPersistent (deep2));\n+         assertFalse(em.isPersistent (deep3));\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNull (em.find (CascadesEntity.class, id));\n+         assertNull (em.find (CascadesEntity.class, rel1Id));\n+         assertNull (em.find (CascadesEntity.class, rel2Id));\n+         assertNull (em.find (CascadesEntity.class, deep1Id));\n+         assertNull (em.find (CascadesEntity.class, deep2Id));\n+         assertNull (em.find (CascadesEntity.class, deep3Id));\n+         assertNull (em.find (CascadesEntity.class, dependId));\n+         endEm(em);\n+     }\n+\n+\n+     public void testCircularCascadeDelete ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setAll (rel);\n+         ent.getAllCollection ().add (rel);\n+         rel.setAll (ent);\n+         rel.getAllCollection ().add (ent);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long relId = rel.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         rel = ent.getAll ();\n+         assertEquals (relId, rel.getId ());\n+         assertEquals (rel, ent.getAllCollection ().iterator ().next ());\n+         assertEquals (ent, rel.getAllCollection ().iterator ().next ());\n+\n+         startTx(em);\n+         em.remove (ent);\n+         assertTrue (em.isRemoved (ent));\n+         assertTrue (em.isRemoved (rel));\n+         endTx(em);\n+         assertFalse (em.isPersistent (ent));\n+         assertFalse (em.isPersistent (rel));\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNull (em.find (CascadesEntity.class, id));\n+         assertNull (em.find (CascadesEntity.class, relId));\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadeRefresh ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setNone (rel);\n+         ent.getNoneCollection ().add (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persistAll (ent, rel);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long relId = rel.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         rel = ent.getNone ();\n+         assertEquals (relId, rel.getId ());\n+\n+         startTx(em);\n+         assertNull (ent.getDependent ());\n+         assertNull (rel.getDependent ());\n+         ent.setDependent (new CascadesEntity ());\n+         rel.setDependent (new CascadesEntity ());\n+         em.persist (ent.getDependent ());\n+         em.persist (rel.getDependent ());\n+         em.refresh (ent);\n+         assertNull (ent.getDependent ());\n+         assertNotNull (rel.getDependent ());\n+         endTx(em);\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         assertNull (em.find (CascadesEntity.class, id).getDependent ());\n+         assertNotNull (em.find (CascadesEntity.class, relId).getDependent ());\n+         endEm(em);\n+     }\n+\n+\n+     public void testCircularCascadeRefresh ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setAll (rel);\n+         rel.setAll (ent);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long relId = rel.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         rel = ent.getAll ();\n+         assertEquals (relId, rel.getId ());\n+         assertEquals (ent, rel.getAll ());\n+\n+         startTx(em);\n+         assertNull (ent.getDependent ());\n+         assertNull (rel.getDependent ());\n+         ent.setDependent (new CascadesEntity ());\n+         rel.setDependent (new CascadesEntity ());\n+         em.persist (ent.getDependent ());\n+         em.persist (rel.getDependent ());\n+         em.refresh (ent);\n+         assertNull (ent.getDependent ());\n+         assertNull (rel.getDependent ());\n+         endTx(em);\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         assertEquals (relId, ent.getAll ().getId ());\n+         assertNull (ent.getDependent ());\n+         assertNull (em.find (CascadesEntity.class, relId).getDependent ());\n+         endEm(em);\n+\n+         ent = new CascadesEntity ();\n+         rel = new CascadesEntity ();\n+         CascadesEntity deep = new CascadesEntity ();\n+         ent.getAllCollection ().add (rel);\n+         rel.getAllCollection ().add (ent);\n+         rel.getAllCollection ().add (deep);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         endTx(em);\n+         id = ent.getId ();\n+         relId = rel.getId ();\n+         long deepId = deep.getId ();\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         rel = ent.getAllCollection ().iterator ().next ();\n+         assertEquals (relId, rel.getId ());\n+         assertEquals (2, rel.getAllCollection ().size ());\n+         deep = null;\n+         for (CascadesEntity elem : rel.getAllCollection ())\n+             if (elem != ent)\n+                 deep = elem;\n+         assertEquals (deepId, deep.getId ());\n+\n+         startTx(em);\n+         assertNull (ent.getDependent ());\n+         assertNull (rel.getDependent ());\n+         assertNull (deep.getDependent ());\n+         ent.setDependent (new CascadesEntity ());\n+         ent.getAllCollection ().add (new CascadesEntity ());\n+         rel.setDependent (new CascadesEntity ());\n+         deep.setDependent (new CascadesEntity ());\n+         em.persistAll (ent.getAllCollection ());\n+         em.persist (ent.getDependent ());\n+         em.persist (rel.getDependent ());\n+         em.persist (deep.getDependent ());\n+         em.refresh (ent);\n+         assertNull (ent.getDependent ());\n+         assertEquals (1, ent.getAllCollection ().size ());\n+         assertTrue (ent.getAllCollection ().contains (rel));\n+         assertNull (rel.getDependent ());\n+         assertEquals (2, rel.getAllCollection ().size ());\n+         assertTrue (rel.getAllCollection ().contains (ent));\n+         assertTrue (rel.getAllCollection ().contains (deep));\n+         assertNull (deep.getDependent ());\n+         endTx(em);\n+         endEm(em);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         ent = em.find (CascadesEntity.class, id);\n+         assertEquals (1, ent.getAllCollection ().size ());\n+         assertEquals (relId, ent.getAllCollection ().iterator ().next ().\n+             getId ());\n+         assertNull (ent.getDependent ());\n+         assertNull (em.find (CascadesEntity.class, relId).getDependent ());\n+         assertNull (em.find (CascadesEntity.class, deepId).getDependent ());\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadeAttachClean ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setName (\"ent\");\n+         rel.setName (\"rel\");\n+         ent.setNone (rel);\n+         ent.getNoneCollection ().add (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persistAll (ent, rel);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long relId = rel.getId ();\n+         endEm(em);\n+\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (\"rel\", rel.getName ());\n+         assertEquals (rel, ent.getNone ());\n+         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         ent = em.merge (ent);\n+         assertTrue (!em.isDirty (ent));\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (id, ent.getId ());\n+         assertTrue (ent.getNone () != rel);\n+         rel = ent.getNone ();\n+         assertNotNull (rel);\n+         assertTrue (!em.isDirty (rel));\n+         assertEquals (1, ent.getNoneCollection ().size ());\n+         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\n+\n+         assertTrue (em.isPersistent (rel));\n+         assertEquals (relId, rel.getId ());\n+         assertEquals (\"rel\", rel.getName ());\n+         endTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testCascadeAttachClean ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel1 = new CascadesEntity ();\n+         CascadesEntity rel2 = new CascadesEntity ();\n+         ent.setName (\"ent\");\n+         rel1.setName (\"rel1\");\n+         ent.setAll (rel1);\n+         rel2.setName (\"rel2\");\n+         ent.getAllCollection ().add (rel2);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long rel1Id = rel1.getId ();\n+         long rel2Id = rel2.getId ();\n+         endEm(em);\n+\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (\"rel1\", rel1.getName ());\n+         assertEquals (\"rel2\", rel2.getName ());\n+         assertEquals (rel1, ent.getAll ());\n+         assertEquals (rel2, ent.getAllCollection ().iterator ().next ());\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         ent = em.merge (ent);\n+         assertTrue (!em.isDirty (ent));\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (id, ent.getId ());\n+         assertTrue (rel1 != ent.getAll ());\n+         rel1 = ent.getAll ();\n+         assertTrue (!em.isDirty (rel1));\n+         assertEquals (1, ent.getAllCollection ().size ());\n+         rel2 = ent.getAllCollection ().iterator ().next ();\n+         assertTrue (!em.isDirty (rel2));\n+\n+         assertTrue (em.isPersistent (rel1));\n+         assertEquals (rel1Id, rel1.getId ());\n+         assertEquals (\"rel1\", rel1.getName ());\n+         assertTrue (em.isPersistent (rel2));\n+         assertEquals (rel2Id, rel2.getId ());\n+         assertEquals (\"rel2\", rel2.getName ());\n+         endTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadeAttachDirtyFields ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         ent.setName (\"ent\");\n+         rel.setName (\"rel\");\n+         ent.setNone (rel);\n+         ent.getNoneCollection ().add (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persistAll (ent, rel);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long relId = rel.getId ();\n+         endEm(em);\n+\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (\"rel\", rel.getName ());\n+         assertEquals (rel, ent.getNone ());\n+         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\n+         rel.setName (\"foo\");\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         ent = em.merge (ent);\n+         assertTrue (!em.isDirty (ent));\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (id, ent.getId ());\n+         assertTrue (ent.getNone () != rel);\n+         rel = ent.getNone ();\n+         assertNotNull (rel);\n+         assertTrue (!em.isDirty (rel));\n+         assertEquals (relId, rel.getId ());\n+         assertEquals (1, ent.getNoneCollection ().size ());\n+         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\n+\n+         assertTrue (em.isPersistent (rel));\n+         assertEquals (relId, rel.getId ());\n+         assertEquals (\"rel\", rel.getName ());\n+         endTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testCascadeAttachDirtyFields ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel1 = new CascadesEntity ();\n+         CascadesEntity rel2 = new CascadesEntity ();\n+         ent.setName (\"ent\");\n+         rel1.setName (\"rel1\");\n+         ent.setAll (rel1);\n+         rel2.setName (\"rel2\");\n+         ent.getAllCollection ().add (rel2);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persist (ent);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long rel1Id = rel1.getId ();\n+         long rel2Id = rel2.getId ();\n+         endEm(em);\n+\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (\"rel1\", rel1.getName ());\n+         assertEquals (\"rel2\", rel2.getName ());\n+         assertEquals (rel1, ent.getAll ());\n+         assertEquals (rel2, ent.getAllCollection ().iterator ().next ());\n+         rel1.setName (\"foo\");\n+         rel2.setName (\"bar\");\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         ent = em.merge (ent);\n+         assertEquals (\"ent\", ent.getName ());\n+         assertTrue (!em.isDirty (ent));\n+         assertEquals (id, ent.getId ());\n+         assertTrue (rel1 != ent.getAll ());\n+         rel1 = ent.getAll ();\n+         assertTrue (em.isDirty (rel1));\n+         assertEquals (1, ent.getAllCollection ().size ());\n+         rel2 = ent.getAllCollection ().iterator ().next ();\n+         assertTrue (em.isDirty (rel2));\n+\n+         assertTrue (em.isPersistent (rel1));\n+         assertEquals (rel1Id, rel1.getId ());\n+         assertEquals (\"foo\", rel1.getName ());\n+         assertTrue (em.isPersistent (rel2));\n+         assertEquals (rel2Id, rel2.getId ());\n+         assertEquals (\"bar\", rel2.getName ());\n+         endTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadeAttachDirtyRelations ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         CascadesEntity other = new CascadesEntity ();\n+         ent.setName (\"ent\");\n+         rel.setName (\"rel\");\n+         other.setName (\"other\");\n+         ent.setNone (rel);\n+         ent.getNoneCollection ().add (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persistAll (ent, rel, other);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long relId = rel.getId ();\n+         long otherId = other.getId ();\n+         endEm(em);\n+\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (\"rel\", rel.getName ());\n+         assertEquals (\"other\", other.getName ());\n+         assertEquals (rel, ent.getNone ());\n+         assertEquals (rel, ent.getNoneCollection ().iterator ().next ());\n+         other.setName (\"foo\");\n+         ent.setNone (other);\n+         ent.getNoneCollection ().remove (rel);\n+         ent.getNoneCollection ().add (other);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         ent = em.merge (ent);\n+         assertTrue (em.isDirty (ent));\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (id, ent.getId ());\n+         assertTrue (ent.getNone () != rel);\n+         assertTrue (ent.getNone () != other);\n+         other = ent.getNone ();\n+         assertNotNull (other);\n+         assertTrue (!em.isDirty (other));\n+         assertEquals (otherId, other.getId ());\n+         assertEquals (1, ent.getNoneCollection ().size ());\n+         assertEquals (other, ent.getNoneCollection ().iterator ().next ());\n+\n+         assertTrue (em.isPersistent (other));\n+         assertFalse (em.isPersistent (rel));\n+         assertEquals (otherId, other.getId ());\n+         assertEquals (\"other\", other.getName ());\n+         endTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testCascadeAttachDirtyRelations ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel1 = new CascadesEntity ();\n+         CascadesEntity rel2 = new CascadesEntity ();\n+         CascadesEntity other1 = new CascadesEntity ();\n+         CascadesEntity other2 = new CascadesEntity ();\n+         ent.setName (\"ent\");\n+         rel1.setName (\"rel1\");\n+         ent.setAll (rel1);\n+         rel2.setName (\"rel2\");\n+         ent.getAllCollection ().add (rel2);\n+         other1.setName (\"other1\");\n+         other2.setName (\"other2\");\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persistAll (ent, other1, other2);\n+         endTx(em);\n+         long id = ent.getId ();\n+         long rel1Id = rel1.getId ();\n+         long rel2Id = rel2.getId ();\n+         long other1Id = other1.getId ();\n+         long other2Id = other2.getId ();\n+         endEm(em);\n+\n+         assertEquals (\"ent\", ent.getName ());\n+         assertEquals (\"rel1\", rel1.getName ());\n+         assertEquals (\"rel2\", rel2.getName ());\n+         assertEquals (rel1, ent.getAll ());\n+         assertEquals (rel2, ent.getAllCollection ().iterator ().next ());\n+         assertEquals (\"other1\", other1.getName ());\n+         other1.setName (\"foo\");\n+         assertEquals (\"other2\", other2.getName ());\n+         other2.setName (\"bar\");\n+         ent.setAll (other1);\n+         ent.getAllCollection ().remove (rel2);\n+         ent.getAllCollection ().add (other2);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         ent = em.merge (ent);\n+         assertEquals (\"ent\", ent.getName ());\n+         assertTrue (em.isDirty (ent));\n+         assertEquals (id, ent.getId ());\n+         assertTrue (rel1 != ent.getAll ());\n+         assertTrue (other1 != ent.getAll ());\n+         other1 = ent.getAll ();\n+         assertTrue (em.isDirty (other1));\n+         assertEquals (1, ent.getAllCollection ().size ());\n+         other2 = ent.getAllCollection ().iterator ().next ();\n+         assertTrue (em.isDirty (other2));\n+\n+         assertTrue (em.isPersistent (other1));\n+         assertEquals (other1Id, other1.getId ());\n+         assertEquals (\"foo\", other1.getName ());\n+         assertTrue (em.isPersistent (other2));\n+         assertEquals (other2Id, other2.getId ());\n+         assertEquals (\"bar\", other2.getName ());\n+         endTx(em);\n+         endEm(em);\n+     }\n+\n+\n+     public void testNoCascadeReferenceIsPreLoadedReference ()\n+     {\n+         CascadesEntity ent = new CascadesEntity ();\n+         CascadesEntity rel = new CascadesEntity ();\n+         CascadesEntity other = new CascadesEntity ();\n+         ent.setName (\"ent\");\n+         rel.setName (\"rel\");\n+         other.setName (\"other\");\n+         ent.setNone (rel);\n+         ent.getNoneCollection ().add (rel);\n+\n+         OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         em.persistAll (ent, rel, other);\n+         endTx(em);\n+         long otherId = other.getId ();\n+         endEm(em);\n+\n+         ent.setNone (other);\n+         ent.getNoneCollection ().remove (rel);\n+         ent.getNoneCollection ().add (other);\n+\n+         em = (OpenJPAEntityManager)currentEntityManager();\n+         startTx(em);\n+         other = em.find (CascadesEntity.class, otherId);\n+         ent = em.merge (ent);\n+         assertEquals (other, ent.getNone ());\n+         assertEquals (other, ent.getNoneCollection ().iterator ().next ());\n+         endTx(em);\n+         endEm(em);\n+     }\n+\n+    public void testNoCascadeNewCausesException() {\n+        CascadesEntity ent = new CascadesEntity();\n+        CascadesEntity rel = new CascadesEntity();\n+        ent.setNone(rel);\n+\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+        em.persistAll(ent, rel);\n+        endTx(em);\n+        endEm(em);\n+\n+        CascadesEntity other = new CascadesEntity();\n+        ent.setNone(other);\n+\n+        em = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+        try {\n+            ent = em.merge(ent);\n+            fail(\"Allowed merge of new instance in non-cascading relation.\");\n+        }\n+        catch (RuntimeException re) {\n+            if (isActiveTx(em))\n+                rollbackTx(em);\n+        }\n+        endEm(em);\n+\n+        ent = new CascadesEntity();\n+        em = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+        em.persist(ent);\n+        endTx(em);\n+        endEm(em);\n+\n+        other = new CascadesEntity();\n+        ent.getNoneCollection().add(other);\n+\n+        em = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+        try {\n+            ent = em.merge(ent);\n+            fail(\"Allowed merge of new instance in non-cascading relation.\");\n+        }\n+        catch (RuntimeException re) {\n+            if (isActiveTx(em))\n+                rollbackTx(em);\n+        }\n+        endEm(em);\n+    }\n+\n+\tpublic void testCascadeNewPersisted ()\n+\t{\n+\t\tCascadesEntity ent = new CascadesEntity ();\n+\t\tCascadesEntity rel1 = new CascadesEntity ();\n+\t\tCascadesEntity rel2 = new CascadesEntity ();\n+\t\tent.setName (\"ent\");\n+\t\trel1.setName (\"rel1\");\n+\t\tent.setAll (rel1);\n+\t\trel2.setName (\"rel2\");\n+\t\tent.getAllCollection ().add (rel2);\n+\n+\t\tOpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+\t\tstartTx(em);\n+\t\tem.persist (ent);\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\n+\t\tCascadesEntity other1 = new CascadesEntity ();\n+\t\tCascadesEntity other2 = new CascadesEntity ();\n+\t\tother1.setName (\"other1\");\n+\t\tother2.setName (\"other2\");\n+\n+\t\tent.setAll (other1);\n+\t\tent.getAllCollection ().remove (rel2);\n+\t\tent.getAllCollection ().add (other2);\n+\n+\t\tem = (OpenJPAEntityManager)currentEntityManager();\n+\t\tstartTx(em);\n+\t\tent = em.merge (ent);\n+\t\tassertTrue (em.isDirty (ent));\n+\t\tassertTrue (rel1 != ent.getAll ());\n+\t\tassertTrue (other1 != ent.getAll ());\n+\t\tother1 = ent.getAll ();\n+\t\tassertEquals (\"other1\", other1.getName ());\n+\t\tassertTrue (em.isNewlyPersistent (other1));\n+\t\tassertEquals (1, ent.getAllCollection ().size ());\n+\t\tother2 = ent.getAllCollection ().iterator ().next ();\n+\t\tassertEquals (\"other2\", other2.getName ());\n+\t\tassertTrue (em.isNewlyPersistent (other2));\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\t}\n+\n+\n+\tpublic void testCascadesDeleteNonPersistent ()\n+\t{\n+\t\tCascadesEntity all = new CascadesEntity ();\n+\t\tCascadesEntity none = new CascadesEntity ();\n+\t\tCascadesEntity manyAll = new CascadesEntity ();\n+\t\tCascadesEntity manyNone = new CascadesEntity ();\n+\t\tOpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+\t\tstartTx(em);\n+\t\tem.persist (all);\n+\t\tem.persist (none);\n+\t\tem.persist (manyAll);\n+\t\tem.persist (manyNone);\n+\t\tendTx(em);\n+\t\tlong allId = all.getId ();\n+\t\tlong noneId = none.getId ();\n+\t\tlong manyAllId = manyAll.getId ();\n+\t\tlong manyNoneId = manyNone.getId ();\n+\t\tendEm(em);\n+\n+\t\tem = (OpenJPAEntityManager) currentEntityManager();\n+\t\tstartTx(em);\n+\t\tCascadesEntity ent = new CascadesEntity ();\n+\t\tent.setAll (em.find (CascadesEntity.class, allId));\n+\t\tent.setNone (em.find (CascadesEntity.class, noneId));\n+\t\tent.getAllCollection ().add (em.find (CascadesEntity.class, manyAllId));\n+\t\tent.getNoneCollection ().add (em.find (CascadesEntity.class, manyNoneId));\n+\t\tem.remove (ent);\n+\t\tassertTrue (em.isRemoved (ent.getAll ()));\n+\t\tassertFalse (em.isRemoved (ent.getNone ()));\n+\t\tfor (CascadesEntity rel : ent.getAllCollection ())\n+\t\tassertTrue (em.isRemoved (rel));\n+\t\tfor (CascadesEntity rel : ent.getNoneCollection ())\n+\t\t\tassertFalse (em.isRemoved (rel));\n+\t\tassertFalse (em.contains (ent));\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\n+\t\tem = (OpenJPAEntityManager) currentEntityManager();\n+\t\tassertNull (em.find (CascadesEntity.class, allId));\n+\t\tassertNotNull (em.find (CascadesEntity.class, noneId));\n+\t\tassertNull (em.find (CascadesEntity.class, manyAllId));\n+\t\tassertNotNull (em.find (CascadesEntity.class, manyNoneId));\n+\t\tendEm(em);\n+\t}\n+}"},{"sha":"70bfa218a14220abe46e7cb54e254ad5d41030a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","status":"modified","additions":112,"deletions":112,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,112 +1,112 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.entityoperation.common.apps;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.JoinTable;\r\n-import javax.persistence.ManyToMany;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-import org.apache.openjpa.persistence.Dependent;\r\n-\r\n-@Entity\r\n-public class CascadesEntity {\r\n-\r\n-    private long id;\r\n-    private String name;\r\n-    private CascadesEntity none;\r\n-    private CascadesEntity all;\r\n-    private CascadesEntity dependent;\r\n-    private Collection<CascadesEntity> noneCollection = new ArrayList();\r\n-    private Collection<CascadesEntity> allCollection = new ArrayList();\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    public long getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    @ManyToOne\r\n-    public CascadesEntity getNone() {\r\n-        return this.none;\r\n-    }\r\n-\r\n-    public void setNone(CascadesEntity none) {\r\n-        this.none = none;\r\n-    }\r\n-\r\n-    @ManyToOne(cascade = CascadeType.ALL)\r\n-    public CascadesEntity getAll() {\r\n-        return this.all;\r\n-    }\r\n-\r\n-    public void setAll(CascadesEntity all) {\r\n-        this.all = all;\r\n-    }\r\n-\r\n-    @ManyToMany\r\n-    @JoinTable(name = \"CASCADES_NONE_COLL\",\r\n-        joinColumns = @JoinColumn(name = \"owner\"))\r\n-    public Collection<CascadesEntity> getNoneCollection() {\r\n-        return this.noneCollection;\r\n-    }\r\n-\r\n-    public void setNoneCollection(Collection<CascadesEntity> noneCollection) {\r\n-        this.noneCollection = noneCollection;\r\n-    }\r\n-\r\n-    @ManyToMany(cascade = CascadeType.ALL)\r\n-    @JoinTable(name = \"CASCADES_ALL_COLL\",\r\n-        joinColumns = @JoinColumn(name = \"owner\"))\r\n-    public Collection<CascadesEntity> getAllCollection() {\r\n-        return this.allCollection;\r\n-    }\r\n-\r\n-    public void setAllCollection(Collection<CascadesEntity> allCollection) {\r\n-        this.allCollection = allCollection;\r\n-    }\r\n-\r\n-    @ManyToOne\r\n-    @Dependent\r\n-    public CascadesEntity getDependent() {\r\n-        return this.dependent;\r\n-    }\r\n-\r\n-    public void setDependent(CascadesEntity dependent) {\r\n-        this.dependent = dependent;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return this.name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.entityoperation.common.apps;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+\n+import org.apache.openjpa.persistence.Dependent;\n+\n+@Entity\n+public class CascadesEntity {\n+\n+    private long id;\n+    private String name;\n+    private CascadesEntity none;\n+    private CascadesEntity all;\n+    private CascadesEntity dependent;\n+    private Collection<CascadesEntity> noneCollection = new ArrayList();\n+    private Collection<CascadesEntity> allCollection = new ArrayList();\n+\n+    @Id\n+    @GeneratedValue\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    @ManyToOne\n+    public CascadesEntity getNone() {\n+        return this.none;\n+    }\n+\n+    public void setNone(CascadesEntity none) {\n+        this.none = none;\n+    }\n+\n+    @ManyToOne(cascade = CascadeType.ALL)\n+    public CascadesEntity getAll() {\n+        return this.all;\n+    }\n+\n+    public void setAll(CascadesEntity all) {\n+        this.all = all;\n+    }\n+\n+    @ManyToMany\n+    @JoinTable(name = \"CASCADES_NONE_COLL\",\n+        joinColumns = @JoinColumn(name = \"owner\"))\n+    public Collection<CascadesEntity> getNoneCollection() {\n+        return this.noneCollection;\n+    }\n+\n+    public void setNoneCollection(Collection<CascadesEntity> noneCollection) {\n+        this.noneCollection = noneCollection;\n+    }\n+\n+    @ManyToMany(cascade = CascadeType.ALL)\n+    @JoinTable(name = \"CASCADES_ALL_COLL\",\n+        joinColumns = @JoinColumn(name = \"owner\"))\n+    public Collection<CascadesEntity> getAllCollection() {\n+        return this.allCollection;\n+    }\n+\n+    public void setAllCollection(Collection<CascadesEntity> allCollection) {\n+        this.allCollection = allCollection;\n+    }\n+\n+    @ManyToOne\n+    @Dependent\n+    public CascadesEntity getDependent() {\n+        return this.dependent;\n+    }\n+\n+    public void setDependent(CascadesEntity dependent) {\n+        this.dependent = dependent;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"cab5b092bb52b654bd283eaaa951cb12702a9d98","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,101 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.event;\r\n-\r\n-import javax.jms.JMSException;\r\n-import javax.jms.Message;\r\n-import javax.jms.MessageListener;\r\n-import javax.jms.ObjectMessage;\r\n-import javax.jms.Session;\r\n-import javax.jms.Topic;\r\n-import javax.jms.TopicConnection;\r\n-import javax.jms.TopicConnectionFactory;\r\n-import javax.jms.TopicSession;\r\n-import javax.jms.TopicSubscriber;\r\n-import javax.naming.Context;\r\n-import javax.naming.InitialContext;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.event.common.apps.RuntimeTest1;\r\n-\r\n-import org.apache.openjpa.event.JMSRemoteCommitProvider;\r\n-\r\n-/**\r\n- * So named to prevent the autobuild from running this -- we don't\r\n- * have a JMS provider up and running in the autobuild currently.\r\n- */\r\n-public class JMSRemoteEventsTest\r\n-    extends RemoteEventBase {\r\n-\r\n-    public JMSRemoteEventsTest(String s) {\r\n-        super(s);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-    }\r\n-\r\n-    public void testJMSEvents() {\r\n-        doTest(JMSRemoteCommitProvider.class,\r\n-            \"Topic=topic/KodoCommitProviderTopic\",\r\n-            \"Topic=topic/KodoCommitProviderTopic\");\r\n-    }\r\n-\r\n-    public static void main(String[] args)\r\n-        throws Exception {\r\n-        Context ctx = new InitialContext();\r\n-        TopicConnectionFactory tcf =\r\n-            (TopicConnectionFactory) ctx.lookup(\"java:/ConnectionFactory\");\r\n-        Topic topic = (Topic) ctx.lookup(\"topic/KodoCommitProviderTopic\");\r\n-        ctx.close();\r\n-\r\n-        TopicConnection connection = tcf.createTopicConnection();\r\n-\r\n-        // false == not transacted.\r\n-        TopicSession session = connection.createTopicSession\r\n-            (false, Session.AUTO_ACKNOWLEDGE);\r\n-\r\n-        // create a subscriber.\r\n-        TopicSubscriber s = session.createSubscriber(topic, null,\r\n-            /* noLocal: */ false);\r\n-        s.setMessageListener(new DebugMessageListener());\r\n-        connection.start();\r\n-        System.out.println\r\n-            (\"started listening on topic/KodoCommitProviderTopic\");\r\n-    }\r\n-\r\n-    private static class DebugMessageListener\r\n-        implements MessageListener {\r\n-\r\n-        public void onMessage(Message m) {\r\n-            try {\r\n-                if (m instanceof ObjectMessage) {\r\n-                    ObjectMessage om = (ObjectMessage) m;\r\n-                    System.out.println(\"received object: \" + om.getObject());\r\n-                } else {\r\n-                    System.out.println(\"received bad message: \" + m);\r\n-                }\r\n-            }\r\n-            catch (JMSException e) {\r\n-                System.out.println(\"Exception while processing message\");\r\n-                e.printStackTrace(System.out);\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.event;\n+\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+import javax.jms.MessageListener;\n+import javax.jms.ObjectMessage;\n+import javax.jms.Session;\n+import javax.jms.Topic;\n+import javax.jms.TopicConnection;\n+import javax.jms.TopicConnectionFactory;\n+import javax.jms.TopicSession;\n+import javax.jms.TopicSubscriber;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+\n+\n+import org.apache.openjpa.persistence.event.common.apps.RuntimeTest1;\n+\n+import org.apache.openjpa.event.JMSRemoteCommitProvider;\n+\n+/**\n+ * So named to prevent the autobuild from running this -- we don't\n+ * have a JMS provider up and running in the autobuild currently.\n+ */\n+public class JMSRemoteEventsTest\n+    extends RemoteEventBase {\n+\n+    public JMSRemoteEventsTest(String s) {\n+        super(s);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+    }\n+\n+    public void testJMSEvents() {\n+        doTest(JMSRemoteCommitProvider.class,\n+            \"Topic=topic/KodoCommitProviderTopic\",\n+            \"Topic=topic/KodoCommitProviderTopic\");\n+    }\n+\n+    public static void main(String[] args)\n+        throws Exception {\n+        Context ctx = new InitialContext();\n+        TopicConnectionFactory tcf =\n+            (TopicConnectionFactory) ctx.lookup(\"java:/ConnectionFactory\");\n+        Topic topic = (Topic) ctx.lookup(\"topic/KodoCommitProviderTopic\");\n+        ctx.close();\n+\n+        TopicConnection connection = tcf.createTopicConnection();\n+\n+        // false == not transacted.\n+        TopicSession session = connection.createTopicSession\n+            (false, Session.AUTO_ACKNOWLEDGE);\n+\n+        // create a subscriber.\n+        TopicSubscriber s = session.createSubscriber(topic, null,\n+            /* noLocal: */ false);\n+        s.setMessageListener(new DebugMessageListener());\n+        connection.start();\n+        System.out.println\n+            (\"started listening on topic/KodoCommitProviderTopic\");\n+    }\n+\n+    private static class DebugMessageListener\n+        implements MessageListener {\n+\n+        public void onMessage(Message m) {\n+            try {\n+                if (m instanceof ObjectMessage) {\n+                    ObjectMessage om = (ObjectMessage) m;\n+                    System.out.println(\"received object: \" + om.getObject());\n+                } else {\n+                    System.out.println(\"received bad message: \" + m);\n+                }\n+            }\n+            catch (JMSException e) {\n+                System.out.println(\"Exception while processing message\");\n+                e.printStackTrace(System.out);\n+            }\n+        }\n+    }\n+}"},{"sha":"baff3c4668fb29b8cb097509d49e83e7b8b307b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","status":"modified","additions":249,"deletions":249,"changes":498,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,249 +1,249 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.event;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.Map;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.event.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.event.RemoteCommitEvent;\r\n-import org.apache.openjpa.event.RemoteCommitListener;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.StoreCache;\r\n-import org.apache.openjpa.util.Id;\r\n-\r\n-public class RemoteEventBase extends AbstractTestCase {\r\n-\r\n-    public Id roid;\r\n-    public StoreCache datacatch;\r\n-\r\n-    public RemoteEventBase(String s) {\r\n-        super(s, \"eventcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        datacatch.evictAll();\r\n-    }\r\n-\r\n-    public void tearDown() throws Exception {\r\n-        ((OpenJPAEntityManagerSPI) OpenJPAPersistence\r\n-            .cast(currentEntityManager())).getConfiguration()\r\n-            .getRemoteCommitEventManager().close();\r\n-    }\r\n-\r\n-    protected void doTest(Class providerClass, String classProps1,\r\n-        String classProps2) {\r\n-        String transmit = \"TransmitPersistedObjectIds=true\";\r\n-        if (classProps1 == null || classProps1.length() == 0)\r\n-            classProps1 = transmit;\r\n-        else\r\n-            classProps1 += \",\" + transmit;\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\",\r\n-            Configurations.getPlugin(providerClass.getName(), classProps1));\r\n-        propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup1\");\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        OpenJPAEntityManagerFactory factory1 = getEmf(propsMap);\r\n-\r\n-        TriggerRemoteCommitListener listener1 =\r\n-            new TriggerRemoteCommitListener();\r\n-        ((OpenJPAEntityManagerFactorySPI) factory1).getConfiguration()\r\n-            .getRemoteCommitEventManager().addListener(listener1);\r\n-\r\n-        if (classProps2 == null || classProps2.length() == 0)\r\n-            classProps2 = transmit;\r\n-        else\r\n-            classProps2 += \", \" + transmit;\r\n-\r\n-        propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\",\r\n-            Configurations.getPlugin(providerClass.getName(), classProps2));\r\n-        propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup2\");\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        OpenJPAEntityManagerFactory factory2 = getEmf(propsMap);\r\n-\r\n-        RemoteCommitListenerTestImpl listener2 =\r\n-            new RemoteCommitListenerTestImpl();\r\n-        ((OpenJPAEntityManagerFactorySPI) factory2).getConfiguration()\r\n-            .getRemoteCommitEventManager().addListener(listener2);\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) factory1.createEntityManager();\r\n-        datacatch = pm.getEntityManagerFactory().getStoreCache();\r\n-        // get an object id\r\n-        RuntimeTest1 t1 = new RuntimeTest1(\"foo\", 5);\r\n-        startTx(pm);\r\n-        pm.persist(t1);\r\n-        Object oid = pm.getObjectId(t1);\r\n-        roid = Id.newInstance(RuntimeTest1.class, oid);\r\n-        endTx(pm);\r\n-\r\n-        try {\r\n-            Thread.currentThread().sleep(250);\r\n-        }\r\n-        catch (InterruptedException ie) {\r\n-        }\r\n-\r\n-        // ensure that the commit info was not propagated to factory1.\r\n-        assertFalse(listener1.commitNotificationReceived);\r\n-\r\n-        // ensure that the commit info propagated to the\r\n-        // factories correctly.\r\n-        assertNotNull(listener2.added);\r\n-        assertNotNull(listener2.updated);\r\n-        assertNotNull(listener2.deleted);\r\n-\r\n-        boolean pass = false;\r\n-        for (Iterator iter = listener2.added.iterator(); iter.hasNext();) {\r\n-            Id roid = Id.newInstance(RuntimeTest1.class, oid);\r\n-            Id it = (Id) iter.next();\r\n-            System.out.println(\"===ROID: \" + roid.getId() + \" +++== ITER: \" +\r\n-                it.getId() + \" Content: \" + listener2.added + \"ROID Cont: \" +\r\n-                roid);\r\n-            System.out.println(\"Result of COMP \" + it.equals(roid));\r\n-            //FixMe --det. why it.equals(roid) fails when the are actually equal\r\n-            if (it.toString().equals(roid.toString())) {\r\n-                pass = true;\r\n-                break;\r\n-            }\r\n-        }\r\n-        assertTrue(\"pass = \" + pass, pass);\r\n-        assertTrue(listener2.updated.size() == 0);\r\n-        assertTrue(listener2.deleted.size() == 0);\r\n-\r\n-        // modify an object\r\n-        startTx(pm);\r\n-        t1.setStringField(\"baz\");\r\n-        endTx(pm);\r\n-\r\n-        try {\r\n-            Thread.currentThread().sleep(250);\r\n-        }\r\n-        catch (InterruptedException ie) {\r\n-        }\r\n-\r\n-        // ensure that the commit info was not propagated to factory1.\r\n-        assertFalse(listener1.commitNotificationReceived);\r\n-\r\n-        // ensure that the commit info propagated to the remote\r\n-        // factories correctly.\r\n-        assertNotNull(listener2.added);\r\n-        assertNotNull(listener2.updated);\r\n-        assertNotNull(listener2.deleted);\r\n-\r\n-        pass = false;\r\n-        for (Iterator iter = listener2.updated.iterator(); iter.hasNext();) {\r\n-            Id it = (Id) iter.next();\r\n-            System.out.println(\"===ROID: \" + roid.getId() + \"+++== ITER: \" +\r\n-                it.getId() + \"Content: \" + listener2.added);\r\n-            System.out.println(\"Result of COMP \" + it.equals(roid));\r\n-\r\n-            if (it.toString().equals(roid.toString())) {\r\n-                pass = true;\r\n-                break;\r\n-            }\r\n-        }\r\n-        assertTrue(pass);\r\n-        assertTrue(listener2.added.size() == 0);\r\n-        assertTrue(listener2.deleted.size() == 0);\r\n-\r\n-        // delete an object\r\n-        startTx(pm);\r\n-        pm.remove(t1);\r\n-        endTx(pm);\r\n-\r\n-        try {\r\n-            Thread.currentThread().sleep(250);\r\n-        }\r\n-        catch (InterruptedException ie) {\r\n-        }\r\n-\r\n-        // ensure that the commit info was not propagated to factory1.\r\n-        assertFalse(listener1.commitNotificationReceived);\r\n-\r\n-        // ensure that the commit info propagated to the remote\r\n-        // factories correctly.\r\n-        assertNotNull(listener2.added);\r\n-        assertNotNull(listener2.updated);\r\n-        assertNotNull(listener2.deleted);\r\n-\r\n-        pass = false;\r\n-        for (Iterator iter = listener2.deleted.iterator(); iter.hasNext();) {\r\n-            Id it = (Id) iter.next();\r\n-            System.out.println(\"===ROID: \" + roid.getId() + \"+++== ITER: \" +\r\n-                it.getId() + \"Content: \" + listener2.added);\r\n-            System.out.println(\"Result of COMP \" + it.equals(roid));\r\n-\r\n-            if (it.toString().equals(roid.toString())) {\r\n-                pass = true;\r\n-                break;\r\n-            }\r\n-        }\r\n-        assertTrue(pass);\r\n-        assertTrue(listener2.added.size() == 0);\r\n-        assertTrue(listener2.updated.size() == 0);\r\n-    }\r\n-\r\n-    protected static class RemoteCommitListenerTestImpl implements\r\n-        RemoteCommitListener {\r\n-\r\n-        transient Collection added;\r\n-\r\n-        transient Collection updated;\r\n-\r\n-        transient Collection deleted;\r\n-\r\n-        public void afterCommit(RemoteCommitEvent event) {\r\n-            this.added = event.getPersistedObjectIds();\r\n-            this.updated = event.getUpdatedObjectIds();\r\n-            this.deleted = event.getDeletedObjectIds();\r\n-        }\r\n-\r\n-        public void close() {\r\n-        }\r\n-    }\r\n-\r\n-    protected static class TriggerRemoteCommitListener\r\n-        implements RemoteCommitListener {\r\n-\r\n-        boolean commitNotificationReceived = false;\r\n-\r\n-        public void afterCommit(RemoteCommitEvent event) {\r\n-            commitNotificationReceived = true;\r\n-        }\r\n-\r\n-        public void close() {\r\n-        }\r\n-    }\r\n-}\r\n-// looks like this might be creating another factory that is\r\n-// connecting to the same ports, causing the failure. Should\r\n-// probably debug by putting a third conf in RemoteEventBase.\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.event;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+\n+import org.apache.openjpa.persistence.event.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.event.RemoteCommitEvent;\n+import org.apache.openjpa.event.RemoteCommitListener;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.StoreCache;\n+import org.apache.openjpa.util.Id;\n+\n+public class RemoteEventBase extends AbstractTestCase {\n+\n+    public Id roid;\n+    public StoreCache datacatch;\n+\n+    public RemoteEventBase(String s) {\n+        super(s, \"eventcactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+        datacatch.evictAll();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        ((OpenJPAEntityManagerSPI) OpenJPAPersistence\n+            .cast(currentEntityManager())).getConfiguration()\n+            .getRemoteCommitEventManager().close();\n+    }\n+\n+    protected void doTest(Class providerClass, String classProps1,\n+        String classProps2) {\n+        String transmit = \"TransmitPersistedObjectIds=true\";\n+        if (classProps1 == null || classProps1.length() == 0)\n+            classProps1 = transmit;\n+        else\n+            classProps1 += \",\" + transmit;\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.RemoteCommitProvider\",\n+            Configurations.getPlugin(providerClass.getName(), classProps1));\n+        propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup1\");\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        OpenJPAEntityManagerFactory factory1 = getEmf(propsMap);\n+\n+        TriggerRemoteCommitListener listener1 =\n+            new TriggerRemoteCommitListener();\n+        ((OpenJPAEntityManagerFactorySPI) factory1).getConfiguration()\n+            .getRemoteCommitEventManager().addListener(listener1);\n+\n+        if (classProps2 == null || classProps2.length() == 0)\n+            classProps2 = transmit;\n+        else\n+            classProps2 += \", \" + transmit;\n+\n+        propsMap = new HashMap();\n+        propsMap.put(\"openjpa.RemoteCommitProvider\",\n+            Configurations.getPlugin(providerClass.getName(), classProps2));\n+        propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup2\");\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        OpenJPAEntityManagerFactory factory2 = getEmf(propsMap);\n+\n+        RemoteCommitListenerTestImpl listener2 =\n+            new RemoteCommitListenerTestImpl();\n+        ((OpenJPAEntityManagerFactorySPI) factory2).getConfiguration()\n+            .getRemoteCommitEventManager().addListener(listener2);\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) factory1.createEntityManager();\n+        datacatch = pm.getEntityManagerFactory().getStoreCache();\n+        // get an object id\n+        RuntimeTest1 t1 = new RuntimeTest1(\"foo\", 5);\n+        startTx(pm);\n+        pm.persist(t1);\n+        Object oid = pm.getObjectId(t1);\n+        roid = Id.newInstance(RuntimeTest1.class, oid);\n+        endTx(pm);\n+\n+        try {\n+            Thread.currentThread().sleep(250);\n+        }\n+        catch (InterruptedException ie) {\n+        }\n+\n+        // ensure that the commit info was not propagated to factory1.\n+        assertFalse(listener1.commitNotificationReceived);\n+\n+        // ensure that the commit info propagated to the\n+        // factories correctly.\n+        assertNotNull(listener2.added);\n+        assertNotNull(listener2.updated);\n+        assertNotNull(listener2.deleted);\n+\n+        boolean pass = false;\n+        for (Iterator iter = listener2.added.iterator(); iter.hasNext();) {\n+            Id roid = Id.newInstance(RuntimeTest1.class, oid);\n+            Id it = (Id) iter.next();\n+            System.out.println(\"===ROID: \" + roid.getId() + \" +++== ITER: \" +\n+                it.getId() + \" Content: \" + listener2.added + \"ROID Cont: \" +\n+                roid);\n+            System.out.println(\"Result of COMP \" + it.equals(roid));\n+            //FixMe --det. why it.equals(roid) fails when the are actually equal\n+            if (it.toString().equals(roid.toString())) {\n+                pass = true;\n+                break;\n+            }\n+        }\n+        assertTrue(\"pass = \" + pass, pass);\n+        assertTrue(listener2.updated.size() == 0);\n+        assertTrue(listener2.deleted.size() == 0);\n+\n+        // modify an object\n+        startTx(pm);\n+        t1.setStringField(\"baz\");\n+        endTx(pm);\n+\n+        try {\n+            Thread.currentThread().sleep(250);\n+        }\n+        catch (InterruptedException ie) {\n+        }\n+\n+        // ensure that the commit info was not propagated to factory1.\n+        assertFalse(listener1.commitNotificationReceived);\n+\n+        // ensure that the commit info propagated to the remote\n+        // factories correctly.\n+        assertNotNull(listener2.added);\n+        assertNotNull(listener2.updated);\n+        assertNotNull(listener2.deleted);\n+\n+        pass = false;\n+        for (Iterator iter = listener2.updated.iterator(); iter.hasNext();) {\n+            Id it = (Id) iter.next();\n+            System.out.println(\"===ROID: \" + roid.getId() + \"+++== ITER: \" +\n+                it.getId() + \"Content: \" + listener2.added);\n+            System.out.println(\"Result of COMP \" + it.equals(roid));\n+\n+            if (it.toString().equals(roid.toString())) {\n+                pass = true;\n+                break;\n+            }\n+        }\n+        assertTrue(pass);\n+        assertTrue(listener2.added.size() == 0);\n+        assertTrue(listener2.deleted.size() == 0);\n+\n+        // delete an object\n+        startTx(pm);\n+        pm.remove(t1);\n+        endTx(pm);\n+\n+        try {\n+            Thread.currentThread().sleep(250);\n+        }\n+        catch (InterruptedException ie) {\n+        }\n+\n+        // ensure that the commit info was not propagated to factory1.\n+        assertFalse(listener1.commitNotificationReceived);\n+\n+        // ensure that the commit info propagated to the remote\n+        // factories correctly.\n+        assertNotNull(listener2.added);\n+        assertNotNull(listener2.updated);\n+        assertNotNull(listener2.deleted);\n+\n+        pass = false;\n+        for (Iterator iter = listener2.deleted.iterator(); iter.hasNext();) {\n+            Id it = (Id) iter.next();\n+            System.out.println(\"===ROID: \" + roid.getId() + \"+++== ITER: \" +\n+                it.getId() + \"Content: \" + listener2.added);\n+            System.out.println(\"Result of COMP \" + it.equals(roid));\n+\n+            if (it.toString().equals(roid.toString())) {\n+                pass = true;\n+                break;\n+            }\n+        }\n+        assertTrue(pass);\n+        assertTrue(listener2.added.size() == 0);\n+        assertTrue(listener2.updated.size() == 0);\n+    }\n+\n+    protected static class RemoteCommitListenerTestImpl implements\n+        RemoteCommitListener {\n+\n+        transient Collection added;\n+\n+        transient Collection updated;\n+\n+        transient Collection deleted;\n+\n+        public void afterCommit(RemoteCommitEvent event) {\n+            this.added = event.getPersistedObjectIds();\n+            this.updated = event.getUpdatedObjectIds();\n+            this.deleted = event.getDeletedObjectIds();\n+        }\n+\n+        public void close() {\n+        }\n+    }\n+\n+    protected static class TriggerRemoteCommitListener\n+        implements RemoteCommitListener {\n+\n+        boolean commitNotificationReceived = false;\n+\n+        public void afterCommit(RemoteCommitEvent event) {\n+            commitNotificationReceived = true;\n+        }\n+\n+        public void close() {\n+        }\n+    }\n+}\n+// looks like this might be creating another factory that is\n+// connecting to the same ports, causing the failure. Should\n+// probably debug by putting a third conf in RemoteEventBase."},{"sha":"a11f8c0490cd4789e9cf89c6219feb9f7993befd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"802557211a80c2d3a3c9f40daa1d890bd85e25e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","status":"modified","additions":226,"deletions":226,"changes":452,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"caeccd3a46e88e49f27243d129ceb23da900b222","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","status":"modified","additions":222,"deletions":222,"changes":444,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e30dd4f813725420d568998bbeae8a549d996de9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a84491ee7412f9f910ff4c973915548b628d2dae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","status":"modified","additions":136,"deletions":136,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8445541d43cac8c1f8dc76d6edcbc51898f26860","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","status":"modified","additions":273,"deletions":273,"changes":546,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ba3f219e75d9a936841ce4cf52863a003d95e3ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c28fed6d7e3a702017db5b4a9aca1bd12d798c24","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","status":"modified","additions":278,"deletions":278,"changes":556,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"947623d1bb0d3a2b5eda34a534c6c191607e9ad0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","status":"modified","additions":327,"deletions":327,"changes":654,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"56bfbb599b51af1f3b0c9f80bc895da7849f6c5f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","status":"modified","additions":335,"deletions":335,"changes":670,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e7777bbe756f1e6fd6d0aa3baedf7cf5eeae5a38","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","status":"modified","additions":236,"deletions":236,"changes":472,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9a5935db600f9ebc6200c6b2bb455c8d598dc2ba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","status":"modified","additions":279,"deletions":279,"changes":558,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"73b7b2a14b327a773b3ed4f4ec12b543bc92c810","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a3616c893de427d2fa9fe48217828da3149fbd7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f61aa78fa5f83c7aa7c9cbf830c1d135a73cc7d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"01ce72aefe5fdd32148bd048ad8687bb315470d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"78a0744dc62ba753facd5b45ff90f43e816cf7b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","status":"modified","additions":197,"deletions":197,"changes":394,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f24944b3d0a6127ee6f02e26fee4146076bf5b72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","status":"modified","additions":105,"deletions":105,"changes":210,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"fdb7a2156b2bce5114cb97f7036fe9602ca40ff6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"242a09c3227a33a56618aa1fb7805f7bad80c0d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","status":"modified","additions":174,"deletions":174,"changes":348,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ec2f5062db30b71118905e1ab508f71c3532f726","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e9d4b99d51754deb3c1f96187f0fe58410e414d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumFieldType.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumFieldType.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumFieldType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumFieldType.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8b1bc084abfaded0295fa5e5ec6f27e84801e1a6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumSetOwner.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumSetOwner.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumSetOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumSetOwner.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5912f6ffbbcf9ea384e2be1cab978d06e6a8306d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/SampleEnum.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/SampleEnum.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/SampleEnum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/SampleEnum.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d0a1fe951da85603d2a1a4de939c2513e1cd2bae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumQueryConstructor.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumQueryConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumQueryConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumQueryConstructor.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"aec9b9c6e60c6fe87469ec985d65532543fb8f69","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumSets.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumSets.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumSets.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumSets.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c950d9e36e54e3507f2e8c54d7abe3e0a0560fcb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","status":"modified","additions":127,"deletions":127,"changes":254,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ca20eae8300bce9cbb5e2161ae6f9a72e9959eb0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"7e30bcce996192a7ad650146eeb661207aef6ff5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"68009ba387b4138b037098e7992a654bf7a7cc30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"91957c4700320fb58b5ebfab6a2a1f3a49d855d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","status":"modified","additions":128,"deletions":128,"changes":256,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0a7f6dcabcda6421a0000f914613ad3d3ae58585","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","status":"modified","additions":218,"deletions":218,"changes":436,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"7e624c248d9fe783ade8c82d9e188841968ba4c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFieldDuplicates.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFieldDuplicates.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFieldDuplicates.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFieldDuplicates.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8787c0ca63fb83a7f67a5917d84938a137bbeb77","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFields.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFields.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFields.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"bd90d148dc72cdc17edefb061e7ce8ab761b3b1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/OtherClass.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/OtherClass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/OtherClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/OtherClass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c409f6afb4e81025dd84802755167e7ecd12acb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/TestHungarianNotationRemoval.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/TestHungarianNotationRemoval.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/TestHungarianNotationRemoval.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/TestHungarianNotationRemoval.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4a58be28ea33356a0e0d4df24c98abfa08dfd2d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1b56f4ef92f2499081d5ea0b548d3b642aac3ee0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"22b248f17cac08f9dbcc1735a722ad64bd61c7ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c972c3d5b9da04aed29b5dae303fc5bb8cc39bb4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b442917faa976369d559923627fa99a787072bec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b7ad1369f2d8c9391f60823b6c3268b23964db6b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"81da48fbd21bf2bb6b06fb36834dd38bcccbe4df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"49a4d2ceee23a32ea7677175e5e01b78855bf45d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"29bad7826e2bf7a2942629edad56b104789bca03","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5acc179e6ad0c86b2d1d5f4df367c353d2d16b01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"bf721a7aac1e8655244a7ddd889304f62ec2d217","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"886f1236a6326994802e96317d11c89681864572","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ff6857bbb787807c462040ff0c354c4577579378","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"58947ed002d2e50b3eb133edc20c854ac620d4c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ae0534c85816e4ae786993a2072aad3ccae3ec30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"02c4d2f6498023a5ca13dac2c8be9632dc22456b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3738955bfc5ce008160bbc70f319b2cbac4fd443","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5accc7cef25514bc3595fbde82827000abc966dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"afb7072ee301328aee6b50ecaa6b2cc2be41433c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"fb27b036c16e3da80452eeca14c9c266ca4edd04","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","status":"modified","additions":155,"deletions":155,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"95fe843277652decb5215236deb01ae5e96b9899","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4ba8cac03d7d2c82d726cfe2b97557c2786d53bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1869a0e9581fc070a6009bbedf9f12b50e780d14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"34b3f97224196e516e1912e398221f1d14ca3bb2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","status":"modified","additions":165,"deletions":165,"changes":330,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"50cb00df18f3cb100c085e8f9a8abe48c66fc220","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5d2d9407c9cfa07e1d54d9dd57f44af85bfe27b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","status":"modified","additions":312,"deletions":312,"changes":624,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"843d15d04923c1e0a1d7b10be74aa27e5086f7c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","status":"modified","additions":166,"deletions":166,"changes":332,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3cd7171e5eba49fda7fd585e63420ece3fe58edc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"fff0ee5e7c201187bf02c4ff2d537c16de5fbea7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ee9cf4a39980bbf11d3585206ffe2abc4da29c58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"34b756cb3d62086be567067ad27d0b0b7b25f485","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d9ae68732c1f055f61cb37e551148fc08d185372","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"13b768b6a324b20960c6070316e63c3e9f26a727","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b20bbab332ab2d7d2bb5fbeb0e7d18ce4ce46cb1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"dbefaa304208ac79960237985b0fa52e4d2192af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"48a85057620cbe6b0001ecb1ca8f5e3889e09ebb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"df2b5cfd803cc0df046f17e6e364f73155f292f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e295af95f12bf6f2588ae47dafef28a225354964","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b0ab6d09888c14a5ae50c546197828f03c98aeef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"aa24357efaf41d85831c60679ef1a9f08c89893f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","status":"modified","additions":148,"deletions":148,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"27a59b0c9d0b3769e99afd9fcc380a7752edd661","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"bc2ace9fe412781f0365904722df373e24a6ad2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"83b79c6377eb9b7220ad88a58f47ee9e8880f611","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d85eb3d66200c77a24b8be374fccfd1a5ec6f385","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"96e259d27f4b84089ff85109419c6a818acfddbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"59864080e72a2f03f94b4b847f4349bc3d4fb63a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9288fd9de72a08d4aa0f541f7ce3d7f5ee10b00e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","status":"modified","additions":139,"deletions":139,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3c3176754de11056c4fcdc7bb43403d2a677e8fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","status":"modified","additions":136,"deletions":136,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6eb8fc66e574165fc55302c8fd54b8b592d39f1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","status":"modified","additions":244,"deletions":244,"changes":488,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5e33781df348840197226e03f959ab01e23cf95d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"bbd9f592acb022c7788bd5498e9f3426b3a1f36d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","status":"modified","additions":138,"deletions":138,"changes":276,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"db637442d465e2d1a458d01815b1b1c3753c4869","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c957301dd49d470eb9460cbb668ae3b54018a2fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","status":"modified","additions":96,"deletions":96,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6e82a3edc0bcc320641be913a01ab05e14afcfd3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1c803aefd9d87dad9c97785843085b5d3c5f854c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"530824ad412bf8e6e5d1e80ce23c7ed0aa8c999f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"bf1c27236567c7fbbd26b5849a39cc80a1b0210a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"dc5d262929c8d8b8ca4f07e628b81e67e7211a0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","status":"modified","additions":280,"deletions":280,"changes":560,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c2e4dadf7addda8fd5f2679de9ae62b0c7cbbcec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"89321aabc5b2f671e5553e21d6131698a73d4f7e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","status":"modified","additions":135,"deletions":135,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"44b9c6cd448b265c952f8087e1973c8056fd8d08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b515d3dacf653772aa7f71a155d37ecf4e89ce4e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","status":"modified","additions":137,"deletions":137,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d2bf954afc45e0660d8ef24215ff59292108607b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3106e02fa02cf35317b0427160cd14ede59e7ccf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","status":"modified","additions":195,"deletions":195,"changes":390,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"35bb2895ca6d124aeb981d85568b1a3601eed78b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b0b71c1b44cca8cef35d9ba20a42c8355cb8e098","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"22f627d677f78b6d82b56fc3f41530406309f619","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8ef39b6e2d09d5a9c8eacc2b76cba40822a05276","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b0f0ad95baebf0c5bd9dbb7ccd8b1f6f10e66a1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"2488521456a840bead8c11ef5a7381e3c825508e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0263a59e3076ee80d0853ee73f6edae6128f1395","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b17d31bb51fe9d57ca174e2c664ec4d716565ce9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","status":"modified","additions":139,"deletions":139,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cdd9f38c76afca8336404bfa82ca1bb348ce25cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d4ebd4d9eee4dabf451332e89b0a2e7166e61e27","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"125a35fee0f2398cc9527eb6ce84fe8288e2e8e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8eb37bee2af200ef2e03b79e487a75741b9dd2dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0b6aadf0b8f5ba28863f5cee6a191d1ecaccf01f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a634cf6b386aee150256faaab767b1d0ee3a2f07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e6361f138ed03a6240134188696c1467ff18ba86","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"286d610428267cddfbb5cfaca185405477236761","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"53fe24bd911cc5759bc26b65f4997013388f6348","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9e89486ae08fc8571889cafe1b9e53428c1f9a55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ac0dec07efdd6af8663768a84bdc4ab094b85227","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4f3111dca0d2ad2cf04f7946929b96d5474253cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"986b42b5290c7683370770fda2ac0003cfc5a83c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"10ae14f1cb29d195d49c74d5c945edc7406e60b7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"33152dbd2bc83772069752a63df12324dd221630","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","status":"modified","additions":120,"deletions":120,"changes":240,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"852775adcc03b5351f08d33e8d3ffb8e00586226","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ffecac5e7da4f990556c11091d7b94b06170598a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b1acbf9f6972f7df1ce4a4260ab109e7699b885c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"13896d738ff46d38075133861a3103dc7b3dcf66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"23e7fade60289e31aecf79e6d32211ebeb6372f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c291681d57f3b9d1df08c7999e0605412650cf70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"71f79b9bbe2abb61321a66c67823c079fb6777e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4c4c072ee12b86a975042de0ac5d3a5054d4165f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0f74e7d96c160dfa83c6fce9db2e28bd9e797598","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b7f06e29a12dd7f82f3f81d2eaf8c2707afe0484","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"deef14b47b527d120216c461887d8f5b8bfa0533","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"81ba47efb63dd1a403e514cc9938f2c4ccf2d30b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"eff3d4476b86f70649e4892ecf5c0c08c188ebb8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"53c10d8a2b3d2332de5f104b19647c6e48024db5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","status":"modified","additions":161,"deletions":161,"changes":322,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0ce52f9da239ec95a00e9412ea9d9e161eb5119f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a944a9ff98d4af02ff80baddc8474fe9077b7084","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e4a18faf00adcfd6400922d94669255760da0583","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a5ba18c6e45ed71f96344773d0b838478782affa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f4ddd7e6c73592c0a863bc2d91c73c36054e12a4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5e388563a95da25c9f1b22b3d2e2847ebc6c0a4d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"49c668781eccfa1115b988d99fb3946bad3025b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"555015c7564de66d03f606fd266a07e0ecd16095","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ca4b4e3e92b95221e6bfd460e90507da7bc9d941","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6c9145ffcdc0b68edc4b81080b54de78443fc63e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"fc4cf5a1af139befa97545d68f7eae8c60fa56e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c3c7d5485ed2ec8db96978df4595afa488a35808","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"625c3a9cde08b731d8a86089d8e7908ec9d35098","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8264f726292a69813e2f19fb040beb45980b975b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"057805da953fad04eb308e79c5ab38cc98214b7b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cbbd3fb4d56f47e06cbfb85c1765e842027cb7ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"adbf600c720ae83dfbf16d5810f97243c37301e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a02c7ade92152238bd724ea6a1af04f9e030890d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"eb4864828249c17a24561ebae858813ceaf52654","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1906ba2ffd50824651d49749fea9dcbff964dcf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5178653172918c20d78f0b9c0810455681a9db2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","status":"modified","additions":121,"deletions":121,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ac5ea797e38ad27f95064fb2d8a91fe7e3f88ce2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"abd7634dbb201e95787d9698f9f68547d7bbe2d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f0f2dc477c7fc1252c608f4d52108ec37a709ae7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"fc7db699278e1af3454809f4bc42e1283d5192fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"733bdf637b1997aa78e9e1946afa4deb9dc77f7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9058c8f249822b38b7585be0495555f98afb0609","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"57dd08db77ddfff8c5c446ff36aa85dea1c8106e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3f228487c8c8f3d73afc8a9aa00338b1de392491","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ca4f2973e0664bd486372b17e5f99dab87c7cb40","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"23857266fcdb6e4124a71728aa793fb5cc501d11","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"290d10b7179a0e9fb7d1e7ec9a5adf8de1bacffa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"09b1d3bfc56c25e4c40bdd8772d9a3cb5a5ef0ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"11dc09fd88917312d424d6ae69e0fa75cd1a78ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"05545a868834ee8e188525fcf3dc54c4f33f53ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d572b042a3c2c395bb72144a92ec9be54eb33b72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"eaee845972cdf746b039923168ae0f63d86afbcb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"dddd88240b3a13266fcc4be4bdbd80fe7343a76b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"59dcff3f436625b18a60aaeaced0adad41413365","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"10997d57ed15be7f30ccced99fd81a252048f35c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"064ae8b983831883ef181af937e49bc75917d731","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"da890e15d174257db5023d9c464e938827c5429c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"7fa928b100dcdd4e0b72ccfa5938c89be19b4711","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"758494e22dba0ffdad92b2c07e7c295b64758aaf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f8d1a3330b8378e970f56908ec0da324b0d0f863","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e02ae025a131d5fd681a718480ff1679a96d1c7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c16fdf5d25dc56040cea1323784fc02ba5c65463","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"63074652a6bb01ac2e13d17fee3abf6c9951585d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cf15496ee3fd078317ab11618c6cc350b31dcc08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f7b2ac77d94d458d8c6b2976b0dc47bc40790be5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f2c34033d48499cb76496ac198cac2efbc267d40","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","status":"modified","additions":406,"deletions":406,"changes":812,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"16caf17f53afd2abbd399b1f563d4c3afbb40b82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"02c3c5fcfc3c64dce04ca5a4a81a27a34a7a32fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ffd601f35a29ba6125d9f9e1da22a37e0a3d139a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6d7f6c87f5f9ac0ab59d4128b6651459e63f8af1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d4a8df6d070edfda94b9c5851aa537ea0faffb2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"84c00cb936f758a2b3b0efc3de79efd6eae9c2b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9eb0c1ef25ca456b1d6696c74e6f617552763c75","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c146048c88b0548b3ff94fafec7a58f7449aa04e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4de696878a7b27190e68143739f605ddc5c85e70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","status":"modified","additions":107,"deletions":107,"changes":214,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"36b817175fce9552d6d877c6a9fb119f45da7c81","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"77893d836c2169fe47e9b315234fd7904341b4dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6b40b1f58af87ea13b43af6cbbf6996322645675","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6c2c9918e89112e6fa484a94599bb7d4798edfe4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"bacc415652c5a22f8ca21cecc29de82be6fb38a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","status":"modified","additions":254,"deletions":254,"changes":508,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"24fc671d535c654445f2f55ca9931331153e7f6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"11c93b08589cf770441111511dd5fb9019697471","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1c66b164d12742ab282e255de1843c941af3c472","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"741272ab1154254de1d3f59401fed5393ca35391","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6c4999bdd288391485f4e240c17944913761fb15","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6d94fd1479d79bdc75c0c387867f307ea0c421d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1d985906b0f1f492f95a6d47418e2e7832549a1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d245e596e26691e21b9de0ea7a398cc78a426c73","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ca9209d1d29d3f7dc1e8f387ea15c561d2cd3bf1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"}]}

