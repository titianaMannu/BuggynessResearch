{"sha":"115af5954d8ba917d83b7dceb181b01257c359ab","node_id":"MDY6Q29tbWl0MjA2MzY0OjExNWFmNTk1NGQ4YmE5MTdkODNiN2RjZWIxODFiMDEyNTdjMzU5YWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:51:28Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:51:28Z"},"message":"OPENJPA-896. Setting eol-style:native and removing windows eol characters from source files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@757282 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab319d3032f3fa17ec07fc7036deedcd8f73f16c","url":"https://api.github.com/repos/apache/openjpa/git/trees/ab319d3032f3fa17ec07fc7036deedcd8f73f16c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/115af5954d8ba917d83b7dceb181b01257c359ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/115af5954d8ba917d83b7dceb181b01257c359ab","html_url":"https://github.com/apache/openjpa/commit/115af5954d8ba917d83b7dceb181b01257c359ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/115af5954d8ba917d83b7dceb181b01257c359ab/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e786a08bd27dc43a060ddd29ebbd6095a8c92ffb","url":"https://api.github.com/repos/apache/openjpa/commits/e786a08bd27dc43a060ddd29ebbd6095a8c92ffb","html_url":"https://github.com/apache/openjpa/commit/e786a08bd27dc43a060ddd29ebbd6095a8c92ffb"}],"stats":{"total":290030,"additions":145015,"deletions":145015},"files":[{"sha":"c0dd69824d904d8b56cf4dede9d68666d21ad449","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,32 +1,32 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class MultiE {\r\n-\r\n-    private String string0;\r\n-\r\n-    public void setString0(String val) {\r\n-        string0 = val;\r\n-    }\r\n-\r\n-    public String getString0() {\r\n-        return string0;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class MultiE {\n+\n+    private String string0;\n+\n+    public void setString0(String val) {\n+        string0 = val;\n+    }\n+\n+    public String getString0() {\n+        return string0;\n+    }\n+}"},{"sha":"9d5bbc11dc5a9280392104cab2024b2377944ce3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class MultiF\r\n-    extends MultiE {\r\n-\r\n-    private String string1;\r\n-\r\n-    public void setString1(String val) {\r\n-        string1 = val;\r\n-    }\r\n-\r\n-    public String getString1() {\r\n-        return string1;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class MultiF\n+    extends MultiE {\n+\n+    private String string1;\n+\n+    public void setString1(String val) {\n+        string1 = val;\n+    }\n+\n+    public String getString1() {\n+        return string1;\n+    }\n+}"},{"sha":"182e0aaeb6e233df5c9c61d81c2a71e8c0fe9529","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class NamedSQL {\r\n-\r\n-    private int num;\r\n-    private int num2;\r\n-\r\n-    public int getNum() {\r\n-        return num;\r\n-    }\r\n-\r\n-    public void setNum(int i) {\r\n-        num = i;\r\n-    }\r\n-\r\n-    public int getNum2() {\r\n-        return num2;\r\n-    }\r\n-\r\n-    public void setNum2(int i) {\r\n-        num2 = i;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class NamedSQL {\n+\n+    private int num;\n+    private int num2;\n+\n+    public int getNum() {\n+        return num;\n+    }\n+\n+    public void setNum(int i) {\n+        num = i;\n+    }\n+\n+    public int getNum2() {\n+        return num2;\n+    }\n+\n+    public void setNum2(int i) {\n+        num2 = i;\n+    }\n+}"},{"sha":"e2d90115b81b2aa8d98059add66cd35ede4268f0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,32 +1,32 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class NoClassColumn {\r\n-\r\n-    private String test;\r\n-\r\n-    public String getTest() {\r\n-        return test;\r\n-    }\r\n-\r\n-    public void setTest(String val) {\r\n-        test = val;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class NoClassColumn {\n+\n+    private String test;\n+\n+    public String getTest() {\n+        return test;\n+    }\n+\n+    public void setTest(String val) {\n+        test = val;\n+    }\n+}"},{"sha":"bb57f3118d6acd022a7b797bd2d934bd617a3dd9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,70 +1,70 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-\r\n-public class NonPKJoinPC {\r\n-\r\n-    private int id1;\r\n-    private int id2;\r\n-    private PartialJoinPC partial;\r\n-    private Set partials = new HashSet();\r\n-    private ConstantJoinPC constant;\r\n-\r\n-    public PartialJoinPC getPartial() {\r\n-        return this.partial;\r\n-    }\r\n-\r\n-    public void setPartial(PartialJoinPC partial) {\r\n-        this.partial = partial;\r\n-    }\r\n-\r\n-    public int getId1() {\r\n-        return this.id1;\r\n-    }\r\n-\r\n-    public void setId1(int id1) {\r\n-        this.id1 = id1;\r\n-    }\r\n-\r\n-    public int getId2() {\r\n-        return this.id2;\r\n-    }\r\n-\r\n-    public void setId2(int id2) {\r\n-        this.id2 = id2;\r\n-    }\r\n-\r\n-    public Set getPartials() {\r\n-        return this.partials;\r\n-    }\r\n-\r\n-    public void setPartials(Set partials) {\r\n-        this.partials = partials;\r\n-    }\r\n-\r\n-    public ConstantJoinPC getConstant() {\r\n-        return this.constant;\r\n-    }\r\n-\r\n-    public void setConstant(ConstantJoinPC constant) {\r\n-        this.constant = constant;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+\n+public class NonPKJoinPC {\n+\n+    private int id1;\n+    private int id2;\n+    private PartialJoinPC partial;\n+    private Set partials = new HashSet();\n+    private ConstantJoinPC constant;\n+\n+    public PartialJoinPC getPartial() {\n+        return this.partial;\n+    }\n+\n+    public void setPartial(PartialJoinPC partial) {\n+        this.partial = partial;\n+    }\n+\n+    public int getId1() {\n+        return this.id1;\n+    }\n+\n+    public void setId1(int id1) {\n+        this.id1 = id1;\n+    }\n+\n+    public int getId2() {\n+        return this.id2;\n+    }\n+\n+    public void setId2(int id2) {\n+        this.id2 = id2;\n+    }\n+\n+    public Set getPartials() {\n+        return this.partials;\n+    }\n+\n+    public void setPartials(Set partials) {\n+        this.partials = partials;\n+    }\n+\n+    public ConstantJoinPC getConstant() {\n+        return this.constant;\n+    }\n+\n+    public void setConstant(ConstantJoinPC constant) {\n+        this.constant = constant;\n+    }\n+}"},{"sha":"fab232554cd954ca38cc6a7577db182fffb57d5a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class NonPKJoinPC2\r\n-    extends NonPKJoinPC {\r\n-\r\n-    private String stringField;\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class NonPKJoinPC2\n+    extends NonPKJoinPC {\n+\n+    private String stringField;\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+}"},{"sha":"72da97f9a4172fccdd6de693eed21bfca78600af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,44 +1,44 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-\r\n-public class NonPKJoinPC3\r\n-    extends NonPKJoinPC2 {\r\n-\r\n-    private PartialJoinPC3 partial3;\r\n-    private Set partial2s = new HashSet();\r\n-\r\n-    public PartialJoinPC3 getPartial3() {\r\n-        return this.partial3;\r\n-    }\r\n-\r\n-    public void setPartial3(PartialJoinPC3 partial3) {\r\n-        this.partial3 = partial3;\r\n-    }\r\n-\r\n-    public Set getPartial2s() {\r\n-        return this.partial2s;\r\n-    }\r\n-\r\n-    public void setPartial2s(Set partial2s) {\r\n-        this.partial2s = partial2s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+\n+public class NonPKJoinPC3\n+    extends NonPKJoinPC2 {\n+\n+    private PartialJoinPC3 partial3;\n+    private Set partial2s = new HashSet();\n+\n+    public PartialJoinPC3 getPartial3() {\n+        return this.partial3;\n+    }\n+\n+    public void setPartial3(PartialJoinPC3 partial3) {\n+        this.partial3 = partial3;\n+    }\n+\n+    public Set getPartial2s() {\n+        return this.partial2s;\n+    }\n+\n+    public void setPartial2s(Set partial2s) {\n+        this.partial2s = partial2s;\n+    }\n+}"},{"sha":"100e9d231dba34d351d54296f314951ae69d3bcd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-import java.util.*;\r\n-\r\n-\r\n-\r\n-public interface OpOrder {\r\n-\r\n-\r\n-    public long getId();\r\n-\r\n-    public OpOrder getRel();\r\n-\r\n-    public OpOrder getOwner();\r\n-\r\n-    public String getSecondary();\r\n-\r\n-    public String getSub();\r\n-\r\n-    public List getRelList();\r\n-\r\n-    public List getMappedRelList();\r\n-\r\n-    public List getInverseKeyRelList();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+\n+\n+public interface OpOrder {\n+\n+\n+    public long getId();\n+\n+    public OpOrder getRel();\n+\n+    public OpOrder getOwner();\n+\n+    public String getSecondary();\n+\n+    public String getSub();\n+\n+    public List getRelList();\n+\n+    public List getMappedRelList();\n+\n+    public List getInverseKeyRelList();\n+}"},{"sha":"e12e5d5df3c45f97587e5b8111ec1d5631d0eda0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,79 +1,79 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-import java.util.*;\r\n-\r\n-\r\n-@Entity\r\n-public class OpOrderPC {\r\n-\r\n-\t@Id\r\n-    private long id;\r\n-    private OpOrderPC rel;\r\n-    private OpOrderPC owner;\r\n-    private String secondary;\r\n-    private List relList = new ArrayList();\r\n-    private List mappedRelList = new ArrayList();\r\n-    private List inverseKeyRelList = new ArrayList();\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public OpOrder getRel() {\r\n-        return (OpOrder) rel;\r\n-    }\r\n-\r\n-    public void setRel(OpOrderPC rel) {\r\n-        this.rel = rel;\r\n-    }\r\n-\r\n-    public OpOrder getOwner() {\r\n-        return (OpOrder) owner;\r\n-    }\r\n-\r\n-    public void setOwner(OpOrderPC owner) {\r\n-        this.owner = owner;\r\n-    }\r\n-\r\n-    public String getSecondary() {\r\n-        return secondary;\r\n-    }\r\n-\r\n-    public void setSecondary(String secondary) {\r\n-        this.secondary = secondary;\r\n-    }\r\n-\r\n-    public List getRelList() {\r\n-        return relList;\r\n-    }\r\n-\r\n-    public List getMappedRelList() {\r\n-        return mappedRelList;\r\n-    }\r\n-\r\n-    public List getInverseKeyRelList() {\r\n-        return inverseKeyRelList;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+\n+@Entity\n+public class OpOrderPC {\n+\n+\t@Id\n+    private long id;\n+    private OpOrderPC rel;\n+    private OpOrderPC owner;\n+    private String secondary;\n+    private List relList = new ArrayList();\n+    private List mappedRelList = new ArrayList();\n+    private List inverseKeyRelList = new ArrayList();\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public OpOrder getRel() {\n+        return (OpOrder) rel;\n+    }\n+\n+    public void setRel(OpOrderPC rel) {\n+        this.rel = rel;\n+    }\n+\n+    public OpOrder getOwner() {\n+        return (OpOrder) owner;\n+    }\n+\n+    public void setOwner(OpOrderPC owner) {\n+        this.owner = owner;\n+    }\n+\n+    public String getSecondary() {\n+        return secondary;\n+    }\n+\n+    public void setSecondary(String secondary) {\n+        this.secondary = secondary;\n+    }\n+\n+    public List getRelList() {\n+        return relList;\n+    }\n+\n+    public List getMappedRelList() {\n+        return mappedRelList;\n+    }\n+\n+    public List getInverseKeyRelList() {\n+        return inverseKeyRelList;\n+    }\n+}"},{"sha":"b3d4d397e0d1fc032dc9c69800f0afa7c00bc76e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,42 +1,42 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-import java.util.*;\r\n-\r\n-@Entity\r\n-public class OpOrderPCSub\r\n-    extends OpOrderPC\r\n-    implements OpOrder {\r\n-\r\n-\t@Id\r\n-    private String sub;\r\n-\r\n-    public String getSub() {\r\n-        return sub;\r\n-    }\r\n-\r\n-    public void setSub(String sub) {\r\n-        this.sub = sub;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+@Entity\n+public class OpOrderPCSub\n+    extends OpOrderPC\n+    implements OpOrder {\n+\n+\t@Id\n+    private String sub;\n+\n+    public String getSub() {\n+        return sub;\n+    }\n+\n+    public void setSub(String sub) {\n+        this.sub = sub;\n+    }\n+}"},{"sha":"d77d1b0e260c86bb3e059e9ce61626ea5417ed32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,73 +1,73 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing paging + eager fetching.</p>\r\n- *\r\n-\r\n- */\r\n-@Entity\r\n-public class PagingAppIdPC {\r\n-\r\n-    private int intField;\r\n-    private long longField;\r\n-    private PagingHelperPC rel;\r\n-    private List rels = new ArrayList();\r\n-\r\n-\tpublic PagingAppIdPC() { }\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public long getLongField() {\r\n-        return this.longField;\r\n-    }\r\n-\r\n-    public void setLongField(long longField) {\r\n-        this.longField = longField;\r\n-    }\r\n-\r\n-    public PagingHelperPC getRel() {\r\n-        return this.rel;\r\n-    }\r\n-\r\n-    public void setRel(PagingHelperPC rel) {\r\n-        this.rel = rel;\r\n-    }\r\n-\r\n-    public List getRels() {\r\n-        return this.rels;\r\n-    }\r\n-\r\n-    public void setRels(List rels) {\r\n-        this.rels = rels;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+/**\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\n+ *\n+\n+ */\n+@Entity\n+public class PagingAppIdPC {\n+\n+    private int intField;\n+    private long longField;\n+    private PagingHelperPC rel;\n+    private List rels = new ArrayList();\n+\n+\tpublic PagingAppIdPC() { }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public long getLongField() {\n+        return this.longField;\n+    }\n+\n+    public void setLongField(long longField) {\n+        this.longField = longField;\n+    }\n+\n+    public PagingHelperPC getRel() {\n+        return this.rel;\n+    }\n+\n+    public void setRel(PagingHelperPC rel) {\n+        this.rel = rel;\n+    }\n+\n+    public List getRels() {\n+        return this.rels;\n+    }\n+\n+    public void setRels(List rels) {\n+        this.rels = rels;\n+    }\n+}"},{"sha":"3aaba4eead284b709b0b86249e7a53c5c543f330","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing paging + eager fetching.</p>\r\n- *\r\n-\r\n- */\r\n-@Entity\r\n-public class PagingHelperPC {\r\n-\t\r\n-\tpublic PagingHelperPC() {}\r\n-    private int intField;\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+/**\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\n+ *\n+\n+ */\n+@Entity\n+public class PagingHelperPC {\n+\t\n+\tpublic PagingHelperPC() {}\n+    private int intField;\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+}"},{"sha":"7e169ef7ef06dd7b7e36542aa8fd5e24b545addc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","status":"modified","additions":67,"deletions":67,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,67 +1,67 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing paging + eager fetching.</p>\r\n- *\r\n- */\r\n-@Entity\r\n-public class PagingPC {\r\n-\t\r\n-    private int intField;\r\n-    private PagingHelperPC rel;\r\n-    private List rels = new ArrayList();\r\n-\r\n-\tpublic PagingPC() { }\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public PagingHelperPC getRel() {\r\n-        return this.rel;\r\n-    }\r\n-\r\n-    public void setRel(PagingHelperPC rel) {\r\n-        this.rel = rel;\r\n-    }\r\n-\r\n-    public List getRels() {\r\n-        return this.rels;\r\n-    }\r\n-\r\n-    public void setRels(List rels) {\r\n-        this.rels = rels;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return \"PagingPC: \" + intField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+/**\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\n+ *\n+ */\n+@Entity\n+public class PagingPC {\n+\t\n+    private int intField;\n+    private PagingHelperPC rel;\n+    private List rels = new ArrayList();\n+\n+\tpublic PagingPC() { }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public PagingHelperPC getRel() {\n+        return this.rel;\n+    }\n+\n+    public void setRel(PagingHelperPC rel) {\n+        this.rel = rel;\n+    }\n+\n+    public List getRels() {\n+        return this.rels;\n+    }\n+\n+    public void setRels(List rels) {\n+        this.rels = rels;\n+    }\n+\n+    public String toString() {\n+        return \"PagingPC: \" + intField;\n+    }\n+}"},{"sha":"6678d3ddcdcdb8e44ada6d6f0bf215745b7e3787","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-\r\n-public class PartialJoinPC {\r\n-\r\n-    private int pk1;\r\n-    private int pk2;\r\n-    private NonPKJoinPC nonPK;\r\n-    private Set nonPKs = new HashSet();\r\n-\r\n-    public int getPk1() {\r\n-        return this.pk1;\r\n-    }\r\n-\r\n-    public void setPk1(int pk1) {\r\n-        this.pk1 = pk1;\r\n-    }\r\n-\r\n-    public int getPk2() {\r\n-        return this.pk2;\r\n-    }\r\n-\r\n-    public void setPk2(int pk2) {\r\n-        this.pk2 = pk2;\r\n-    }\r\n-\r\n-    public NonPKJoinPC getNonPK() {\r\n-        return this.nonPK;\r\n-    }\r\n-\r\n-    public void setNonPK(NonPKJoinPC nonPK) {\r\n-        this.nonPK = nonPK;\r\n-    }\r\n-\r\n-    public Set getNonPKs() {\r\n-        return this.nonPKs;\r\n-    }\r\n-\r\n-    public void setNonPKs(Set nonPKs) {\r\n-        this.nonPKs = nonPKs;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+\n+public class PartialJoinPC {\n+\n+    private int pk1;\n+    private int pk2;\n+    private NonPKJoinPC nonPK;\n+    private Set nonPKs = new HashSet();\n+\n+    public int getPk1() {\n+        return this.pk1;\n+    }\n+\n+    public void setPk1(int pk1) {\n+        this.pk1 = pk1;\n+    }\n+\n+    public int getPk2() {\n+        return this.pk2;\n+    }\n+\n+    public void setPk2(int pk2) {\n+        this.pk2 = pk2;\n+    }\n+\n+    public NonPKJoinPC getNonPK() {\n+        return this.nonPK;\n+    }\n+\n+    public void setNonPK(NonPKJoinPC nonPK) {\n+        this.nonPK = nonPK;\n+    }\n+\n+    public Set getNonPKs() {\n+        return this.nonPKs;\n+    }\n+\n+    public void setNonPKs(Set nonPKs) {\n+        this.nonPKs = nonPKs;\n+    }\n+}"},{"sha":"924e12f3b9519dbac44abe2bd699c1006b03fea8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class PartialJoinPC2\r\n-    extends PartialJoinPC {\r\n-\r\n-    private String stringField;\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class PartialJoinPC2\n+    extends PartialJoinPC {\n+\n+    private String stringField;\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+}"},{"sha":"b5f5d19d755edfff2286fc54cf811037176e5734","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,44 +1,44 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-\r\n-public class PartialJoinPC3\r\n-    extends PartialJoinPC2 {\r\n-\r\n-    private NonPKJoinPC3 nonPK3;\r\n-    private Set nonPK2s = new HashSet();\r\n-\r\n-    public NonPKJoinPC3 getNonPK3() {\r\n-        return this.nonPK3;\r\n-    }\r\n-\r\n-    public void setNonPK3(NonPKJoinPC3 nonPK3) {\r\n-        this.nonPK3 = nonPK3;\r\n-    }\r\n-\r\n-    public Set getNonPK2s() {\r\n-        return this.nonPK2s;\r\n-    }\r\n-\r\n-    public void setNonPK2s(Set nonPK2s) {\r\n-        this.nonPK2s = nonPK2s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+\n+public class PartialJoinPC3\n+    extends PartialJoinPC2 {\n+\n+    private NonPKJoinPC3 nonPK3;\n+    private Set nonPK2s = new HashSet();\n+\n+    public NonPKJoinPC3 getNonPK3() {\n+        return this.nonPK3;\n+    }\n+\n+    public void setNonPK3(NonPKJoinPC3 nonPK3) {\n+        this.nonPK3 = nonPK3;\n+    }\n+\n+    public Set getNonPK2s() {\n+        return this.nonPK2s;\n+    }\n+\n+    public void setNonPK2s(Set nonPK2s) {\n+        this.nonPK2s = nonPK2s;\n+    }\n+}"},{"sha":"a322ac72e61bdfd7e73c53b462e29cc5bd2a5ad7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,32 +1,32 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class PerClassTestObject {\r\n-\r\n-    private String stringField;\r\n-\r\n-    public void setStringField(String val) {\r\n-        stringField = val;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class PerClassTestObject {\n+\n+    private String stringField;\n+\n+    public void setStringField(String val) {\n+        stringField = val;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+}"},{"sha":"f48a789dc0418e79779a72f400854455b6f97711","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\t\r\n-\r\n-/**\r\n- * <p>Application identity type with a custom sequence factory used in\r\n- * testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class PerClassTestObject2 {\r\n-\r\n-    private String name;\r\n-    private String age;\r\n-\r\n-    public String getName() {\r\n-        return this.name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public String getAge() {\r\n-        return this.age;\r\n-    }\r\n-\r\n-    public void setAge(String age) {\r\n-        this.age = age;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\t\n+\n+/**\n+ * <p>Application identity type with a custom sequence factory used in\n+ * testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class PerClassTestObject2 {\n+\n+    private String name;\n+    private String age;\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getAge() {\n+        return this.age;\n+    }\n+\n+    public void setAge(String age) {\n+        this.age = age;\n+    }\n+}"},{"sha":"7a06f48197afc85b791b5c91b0f871bf499bcf20","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-/**\r\n- * <p>Application identity type with a per-class sequence factory used in\r\n- * testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class PerClassTestObject3 {\r\n-\r\n-    private long id;\r\n-    private int data;\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public int getData() {\r\n-        return data;\r\n-    }\r\n-\r\n-    public void setData(int data) {\r\n-        this.data = data;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+/**\n+ * <p>Application identity type with a per-class sequence factory used in\n+ * testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class PerClassTestObject3 {\n+\n+    private long id;\n+    private int data;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public int getData() {\n+        return data;\n+    }\n+\n+    public void setData(int data) {\n+        this.data = data;\n+    }\n+}"},{"sha":"126c2d433941e464d9b0f3914a248c114a9d58ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,32 +1,32 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class PlaceholderTypesA {\r\n-\r\n-    private int intA;\r\n-\r\n-    public int getIntA() {\r\n-        return intA;\r\n-    }\r\n-\r\n-    public void setIntA(int intA) {\r\n-        this.intA = intA;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class PlaceholderTypesA {\n+\n+    private int intA;\n+\n+    public int getIntA() {\n+        return intA;\n+    }\n+\n+    public void setIntA(int intA) {\n+        this.intA = intA;\n+    }\n+}"},{"sha":"4ebbaf31d76fc68be0b86fd0eb094ca2b26e9261","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","status":"modified","additions":96,"deletions":96,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,96 +1,96 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class PlaceholderTypesB\r\n-    extends PlaceholderTypesA {\r\n-\r\n-    private boolean booleanB;\r\n-    private byte byteB;\r\n-    private char charB;\r\n-    private float floatB;\r\n-    private int intB;\r\n-    private String stringB;\r\n-    private String clobB;\r\n-    private Object blobB;\r\n-\r\n-    public boolean getBooleanB() {\r\n-        return booleanB;\r\n-    }\r\n-\r\n-    public void setBooleanB(boolean booleanB) {\r\n-        this.booleanB = booleanB;\r\n-    }\r\n-\r\n-    public byte getByteB() {\r\n-        return byteB;\r\n-    }\r\n-\r\n-    public void setByteB(byte byteB) {\r\n-        this.byteB = byteB;\r\n-    }\r\n-\r\n-    public char getCharB() {\r\n-        return charB;\r\n-    }\r\n-\r\n-    public void setCharB(char charB) {\r\n-        this.charB = charB;\r\n-    }\r\n-\r\n-    public float getFloatB() {\r\n-        return floatB;\r\n-    }\r\n-\r\n-    public void setFloatB(float floatB) {\r\n-        this.floatB = floatB;\r\n-    }\r\n-\r\n-    public int getIntB() {\r\n-        return intB;\r\n-    }\r\n-\r\n-    public void setIntB(int intB) {\r\n-        this.intB = intB;\r\n-    }\r\n-\r\n-    public String getStringB() {\r\n-        return stringB;\r\n-    }\r\n-\r\n-    public void setStringB(String stringB) {\r\n-        this.stringB = stringB;\r\n-    }\r\n-\r\n-    public String getClobB() {\r\n-        return clobB;\r\n-    }\r\n-\r\n-    public void setClobB(String clobB) {\r\n-        this.clobB = clobB;\r\n-    }\r\n-\r\n-    public Object getBlobB() {\r\n-        return blobB;\r\n-    }\r\n-\r\n-    public void setBlobB(Object blobB) {\r\n-        this.blobB = blobB;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class PlaceholderTypesB\n+    extends PlaceholderTypesA {\n+\n+    private boolean booleanB;\n+    private byte byteB;\n+    private char charB;\n+    private float floatB;\n+    private int intB;\n+    private String stringB;\n+    private String clobB;\n+    private Object blobB;\n+\n+    public boolean getBooleanB() {\n+        return booleanB;\n+    }\n+\n+    public void setBooleanB(boolean booleanB) {\n+        this.booleanB = booleanB;\n+    }\n+\n+    public byte getByteB() {\n+        return byteB;\n+    }\n+\n+    public void setByteB(byte byteB) {\n+        this.byteB = byteB;\n+    }\n+\n+    public char getCharB() {\n+        return charB;\n+    }\n+\n+    public void setCharB(char charB) {\n+        this.charB = charB;\n+    }\n+\n+    public float getFloatB() {\n+        return floatB;\n+    }\n+\n+    public void setFloatB(float floatB) {\n+        this.floatB = floatB;\n+    }\n+\n+    public int getIntB() {\n+        return intB;\n+    }\n+\n+    public void setIntB(int intB) {\n+        this.intB = intB;\n+    }\n+\n+    public String getStringB() {\n+        return stringB;\n+    }\n+\n+    public void setStringB(String stringB) {\n+        this.stringB = stringB;\n+    }\n+\n+    public String getClobB() {\n+        return clobB;\n+    }\n+\n+    public void setClobB(String clobB) {\n+        this.clobB = clobB;\n+    }\n+\n+    public Object getBlobB() {\n+        return blobB;\n+    }\n+\n+    public void setBlobB(Object blobB) {\n+        this.blobB = blobB;\n+    }\n+}"},{"sha":"e7060fe54beb07c12e1c2b601cc8e70df9d03bf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-/**\r\n- * <p>Kodo 3.x callback.</p>\r\n- *\r\n- * @deprecated\r\n- */\r\n-public interface PostAttachCallback {\r\n-\r\n-    /**\r\n-     * Invoked on the managed persistent instance after it has\r\n-     * been the subject of an attach process.\r\n-     *\r\n-     * @param detached the detached instance that corresponds to\r\n-     * this managed instance\r\n-     */\r\n-    public void jdoPostAttach(Object detached);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+/**\n+ * <p>Kodo 3.x callback.</p>\n+ *\n+ * @deprecated\n+ */\n+public interface PostAttachCallback {\n+\n+    /**\n+     * Invoked on the managed persistent instance after it has\n+     * been the subject of an attach process.\n+     *\n+     * @param detached the detached instance that corresponds to\n+     * this managed instance\n+     */\n+    public void jdoPostAttach(Object detached);\n+}"},{"sha":"5ce64b22415ad696262592c4b7f7447886d2c563","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-/**\r\n- * <p>Kodo 3.x callback.</p>\r\n- *\r\n- * @deprecated\r\n- */\r\n-public interface PostDetachCallback {\r\n-\r\n-    /**\r\n-     * Invoked on the detached copy of the persistent instance\r\n-     * after it has been detached. This method will only be called once\r\n-     * the entire graph of objects for a single detach operation has\r\n-     * been completed.\r\n-     *\r\n-     * @param managed the managed instance that was the\r\n-     * source of the detached instance\r\n-     */\r\n-    public void jdoPostDetach(Object managed);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+/**\n+ * <p>Kodo 3.x callback.</p>\n+ *\n+ * @deprecated\n+ */\n+public interface PostDetachCallback {\n+\n+    /**\n+     * Invoked on the detached copy of the persistent instance\n+     * after it has been detached. This method will only be called once\n+     * the entire graph of objects for a single detach operation has\n+     * been completed.\n+     *\n+     * @param managed the managed instance that was the\n+     * source of the detached instance\n+     */\n+    public void jdoPostDetach(Object managed);\n+}"},{"sha":"611a66a0ae792ca8ad468b68ca0a94ad163935ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,38 +1,38 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-/**\r\n- * <p>Kodo 3.x callback.</p>\r\n- *\r\n- * @deprecated\r\n- */\r\n-public interface PreAttachCallback {\r\n-\r\n-    /**\r\n-     * Invoked on the detached instance immediately before it is\r\n-     * to be attached.\r\n-     */\r\n-    public void jdoPreAttach();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+/**\n+ * <p>Kodo 3.x callback.</p>\n+ *\n+ * @deprecated\n+ */\n+public interface PreAttachCallback {\n+\n+    /**\n+     * Invoked on the detached instance immediately before it is\n+     * to be attached.\n+     */\n+    public void jdoPreAttach();\n+}"},{"sha":"8d091b062b63480f7aed05096724a3d14bbd7a5d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,37 +1,37 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-/**\r\n- * <p>Kodo 3.x callback.</p>\r\n- *\r\n- * @deprecated\r\n- */\r\n-public interface PreDetachCallback {\r\n-\r\n-    /**\r\n-     * Invoked on the persistent instance before it is detached.\r\n-     */\r\n-    public void jdoPreDetach();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+/**\n+ * <p>Kodo 3.x callback.</p>\n+ *\n+ * @deprecated\n+ */\n+public interface PreDetachCallback {\n+\n+    /**\n+     * Invoked on the persistent instance before it is detached.\n+     */\n+    public void jdoPreDetach();\n+}"},{"sha":"ad80635e034fb6063c49b6f35cc7b7c25104ea9d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,104 +1,104 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-\r\n-/**\r\n- * <p>Used in testing; should be enhanced.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class QueryTest1 {\r\n-\r\n-    public static final long FIVE = 5L;\r\n-\r\n-    private long num = 0L;\r\n-    private String string = null;\r\n-    private String clobField = null;\r\n-    private boolean bool = false;\r\n-    private float decimal = 0F;\r\n-    private char character = ' ';\r\n-    private Date date = null;\r\n-    private Collection manyToMany = null;\r\n-\r\n-    public long getNum() {\r\n-        return num;\r\n-    }\r\n-\r\n-    public void setNum(long val) {\r\n-        num = val;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return string;\r\n-    }\r\n-\r\n-    public void setString(String val) {\r\n-        string = val;\r\n-    }\r\n-\r\n-    public String getClob() {\r\n-        return clobField;\r\n-    }\r\n-\r\n-    public void setClob(String val) {\r\n-        clobField = val;\r\n-    }\r\n-\r\n-    public boolean getBool() {\r\n-        return bool;\r\n-    }\r\n-\r\n-    public void setBool(boolean val) {\r\n-        bool = val;\r\n-    }\r\n-\r\n-    public float getDecimal() {\r\n-        return decimal;\r\n-    }\r\n-\r\n-    public void setDecimal(float val) {\r\n-        decimal = val;\r\n-    }\r\n-\r\n-    public char getCharacter() {\r\n-        return character;\r\n-    }\r\n-\r\n-    public void setCharacter(char val) {\r\n-        character = val;\r\n-    }\r\n-\r\n-    public void setDate(Date val) {\r\n-        date = val;\r\n-    }\r\n-\r\n-    public Date getDate() {\r\n-        return date;\r\n-    }\r\n-\r\n-    public Collection getManyToMany() {\r\n-        return manyToMany;\r\n-    }\r\n-\r\n-    public void setManyToMany(Collection val) {\r\n-        manyToMany = val;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+\n+/**\n+ * <p>Used in testing; should be enhanced.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class QueryTest1 {\n+\n+    public static final long FIVE = 5L;\n+\n+    private long num = 0L;\n+    private String string = null;\n+    private String clobField = null;\n+    private boolean bool = false;\n+    private float decimal = 0F;\n+    private char character = ' ';\n+    private Date date = null;\n+    private Collection manyToMany = null;\n+\n+    public long getNum() {\n+        return num;\n+    }\n+\n+    public void setNum(long val) {\n+        num = val;\n+    }\n+\n+    public String getString() {\n+        return string;\n+    }\n+\n+    public void setString(String val) {\n+        string = val;\n+    }\n+\n+    public String getClob() {\n+        return clobField;\n+    }\n+\n+    public void setClob(String val) {\n+        clobField = val;\n+    }\n+\n+    public boolean getBool() {\n+        return bool;\n+    }\n+\n+    public void setBool(boolean val) {\n+        bool = val;\n+    }\n+\n+    public float getDecimal() {\n+        return decimal;\n+    }\n+\n+    public void setDecimal(float val) {\n+        decimal = val;\n+    }\n+\n+    public char getCharacter() {\n+        return character;\n+    }\n+\n+    public void setCharacter(char val) {\n+        character = val;\n+    }\n+\n+    public void setDate(Date val) {\n+        date = val;\n+    }\n+\n+    public Date getDate() {\n+        return date;\n+    }\n+\n+    public Collection getManyToMany() {\n+        return manyToMany;\n+    }\n+\n+    public void setManyToMany(Collection val) {\n+        manyToMany = val;\n+    }\n+}"},{"sha":"01cdf263260b31384b390c1775778301e08dbcd4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.jdbc.kernel.*;\r\n-import org.apache.openjpa.jdbc.sql.*;\r\n-import org.apache.openjpa.jdbc.meta.*;\r\n-import org.apache.openjpa.jdbc.meta.strats.*;\r\n-\r\n-public class RawField {\r\n-\r\n-    private String str;\r\n-\r\n-    public void setString(String s) {\r\n-        str = s;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public static class RawMapping\r\n-        extends ImmutableValueHandler {\r\n-\r\n-        public Object toDataStoreValue(ValueMapping vm, Object val,\r\n-            JDBCStore store) {\r\n-            return new Raw(\"'\" + val + \"FOO'\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.jdbc.kernel.*;\n+import org.apache.openjpa.jdbc.sql.*;\n+import org.apache.openjpa.jdbc.meta.*;\n+import org.apache.openjpa.jdbc.meta.strats.*;\n+\n+public class RawField {\n+\n+    private String str;\n+\n+    public void setString(String s) {\n+        str = s;\n+    }\n+\n+    public String getString() {\n+        return str;\n+    }\n+\n+    public static class RawMapping\n+        extends ImmutableValueHandler {\n+\n+        public Object toDataStoreValue(ValueMapping vm, Object val,\n+            JDBCStore store) {\n+            return new Raw(\"'\" + val + \"FOO'\");\n+        }\n+    }\n+}"},{"sha":"c51ba11ef03ee71b1d59f8be48c7fe6f5cd2a4ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-public class RawSQL {\r\n-    \r\n-    @Id\r\n-    private String stringField = null;\r\n-    private int intField = 0;\r\n-\r\n-    protected RawSQL() {\r\n-    }\r\n-\r\n-    public RawSQL(String s, int i) {\r\n-        stringField = s;\r\n-        intField = i;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return intField;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return \"stringField: \" + stringField + \"; intField: \" + intField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+public class RawSQL {\n+    \n+    @Id\n+    private String stringField = null;\n+    private int intField = 0;\n+\n+    protected RawSQL() {\n+    }\n+\n+    public RawSQL(String s, int i) {\n+        stringField = s;\n+        intField = i;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public int getIntField() {\n+        return intField;\n+    }\n+\n+    public String toString() {\n+        return \"stringField: \" + stringField + \"; intField: \" + intField;\n+    }\n+}"},{"sha":"9d21f16636b3636fe6d95f005079fb948fa73cf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,44 +1,44 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-/**\r\n- * <p>Embedded type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-\r\n-@Entity\r\n-public class RecursivelyEmbeddedPC {\r\n-\r\n-    private EmbeddedPC embedded;\r\n-\r\n-    public EmbeddedPC getEmbedded() {\r\n-        return this.embedded;\r\n-    }\r\n-\r\n-    public void setEmbedded(EmbeddedPC embedded) {\r\n-        this.embedded = embedded;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * <p>Embedded type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+\n+@Entity\n+public class RecursivelyEmbeddedPC {\n+\n+    private EmbeddedPC embedded;\n+\n+    public EmbeddedPC getEmbedded() {\n+        return this.embedded;\n+    }\n+\n+    public void setEmbedded(EmbeddedPC embedded) {\n+        this.embedded = embedded;\n+    }\n+}"},{"sha":"7c8388455671a23bfcdf63d7a35eb1f0c3b1e869","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,97 +1,97 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-\r\n-public class Relations {\r\n-\r\n-    private Base base;\r\n-    private Base nullBase;\r\n-    private BaseSub1 baseSub1;\r\n-    private BaseSub1Sub2 baseSub1Sub2;\r\n-    private List baseList = new ArrayList();\r\n-    private List emptyBaseList = new ArrayList();\r\n-    private List baseSub1List = new ArrayList();\r\n-    private List baseSub1Sub2List = new ArrayList();\r\n-\r\n-    public Base getBase() {\r\n-        return this.base;\r\n-    }\r\n-\r\n-    public void setBase(Base base) {\r\n-        this.base = base;\r\n-    }\r\n-\r\n-    public BaseSub1 getBaseSub1() {\r\n-        return this.baseSub1;\r\n-    }\r\n-\r\n-    public void setBaseSub1(BaseSub1 baseSub1) {\r\n-        this.baseSub1 = baseSub1;\r\n-    }\r\n-\r\n-    public BaseSub1Sub2 getBaseSub1Sub2() {\r\n-        return this.baseSub1Sub2;\r\n-    }\r\n-\r\n-    public void setBaseSub1Sub2(BaseSub1Sub2 baseSub1Sub2) {\r\n-        this.baseSub1Sub2 = baseSub1Sub2;\r\n-    }\r\n-\r\n-    public List getBaseList() {\r\n-        return this.baseList;\r\n-    }\r\n-\r\n-    public void setBaseList(List baseList) {\r\n-        this.baseList = baseList;\r\n-    }\r\n-\r\n-    public List getBaseSub1List() {\r\n-        return this.baseSub1List;\r\n-    }\r\n-\r\n-    public void setBaseSub1List(List baseSub1List) {\r\n-        this.baseSub1List = baseSub1List;\r\n-    }\r\n-\r\n-    public List getBaseSub1Sub2List() {\r\n-        return this.baseSub1Sub2List;\r\n-    }\r\n-\r\n-    public void setBaseSub1Sub2List(List baseSub1Sub2List) {\r\n-        this.baseSub1Sub2List = baseSub1Sub2List;\r\n-    }\r\n-\r\n-    public Base getNullBase() {\r\n-        return this.nullBase;\r\n-    }\r\n-\r\n-    public void setNullBase(Base nullBase) {\r\n-        this.nullBase = nullBase;\r\n-    }\r\n-\r\n-    public List getEmptyBaseList() {\r\n-        return this.emptyBaseList;\r\n-    }\r\n-\r\n-    public void setEmptyBaseList(List emptyBaseList) {\r\n-        this.emptyBaseList = emptyBaseList;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+\n+public class Relations {\n+\n+    private Base base;\n+    private Base nullBase;\n+    private BaseSub1 baseSub1;\n+    private BaseSub1Sub2 baseSub1Sub2;\n+    private List baseList = new ArrayList();\n+    private List emptyBaseList = new ArrayList();\n+    private List baseSub1List = new ArrayList();\n+    private List baseSub1Sub2List = new ArrayList();\n+\n+    public Base getBase() {\n+        return this.base;\n+    }\n+\n+    public void setBase(Base base) {\n+        this.base = base;\n+    }\n+\n+    public BaseSub1 getBaseSub1() {\n+        return this.baseSub1;\n+    }\n+\n+    public void setBaseSub1(BaseSub1 baseSub1) {\n+        this.baseSub1 = baseSub1;\n+    }\n+\n+    public BaseSub1Sub2 getBaseSub1Sub2() {\n+        return this.baseSub1Sub2;\n+    }\n+\n+    public void setBaseSub1Sub2(BaseSub1Sub2 baseSub1Sub2) {\n+        this.baseSub1Sub2 = baseSub1Sub2;\n+    }\n+\n+    public List getBaseList() {\n+        return this.baseList;\n+    }\n+\n+    public void setBaseList(List baseList) {\n+        this.baseList = baseList;\n+    }\n+\n+    public List getBaseSub1List() {\n+        return this.baseSub1List;\n+    }\n+\n+    public void setBaseSub1List(List baseSub1List) {\n+        this.baseSub1List = baseSub1List;\n+    }\n+\n+    public List getBaseSub1Sub2List() {\n+        return this.baseSub1Sub2List;\n+    }\n+\n+    public void setBaseSub1Sub2List(List baseSub1Sub2List) {\n+        this.baseSub1Sub2List = baseSub1Sub2List;\n+    }\n+\n+    public Base getNullBase() {\n+        return this.nullBase;\n+    }\n+\n+    public void setNullBase(Base nullBase) {\n+        this.nullBase = nullBase;\n+    }\n+\n+    public List getEmptyBaseList() {\n+        return this.emptyBaseList;\n+    }\n+\n+    public void setEmptyBaseList(List emptyBaseList) {\n+        this.emptyBaseList = emptyBaseList;\n+    }\n+}"},{"sha":"00d0938e7682aa9fa93c457bc2e77dd20bd5a914","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","status":"modified","additions":131,"deletions":131,"changes":262,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,131 +1,131 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.io.*;\r\n-import java.math.*;\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Transient;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persitent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-        @Table(name=\"rtest1\")\r\n-        @Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-        public class RuntimeTest1 implements Serializable {\r\n-    \r\n-    private static final long serialVersionUID = 1L;\r\n-    \r\n-    @Transient\r\n-            public static final String someStaticField = \"someField\";\r\n-    \r\n-    private Locale\t\tlocaleField;\r\n-    \r\n-    @Id\r\n-            private int\t\t\tintField;\r\n-    \r\n-    @Column(length=35)\r\n-    private String\t\tstringField;\r\n-    \r\n-    // transactional only\r\n-    @Column(length=35)\r\n-    public String\t\ttransString;\r\n-    \r\n-    // relations\r\n-    //@Transient\r\n-    @OneToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-    private RuntimeTest1\tselfOneOne;\r\n-    \r\n-    @Transient\r\n-            private Set\t\tselfOneMany = new HashSet();\r\n-    \r\n-    \r\n-    public RuntimeTest1() {\r\n-    }\r\n-    \r\n-    public RuntimeTest1(int key) {\r\n-        this.intField = key;\r\n-    }\r\n-    \r\n-    public RuntimeTest1(String str, int i) {\r\n-        stringField = str;\r\n-        intField = i;\r\n-    }\r\n-    \r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-    \r\n-    \r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-    \r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-    \r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-    \r\n-    public RuntimeTest1 getSelfOneOne() {\r\n-        return this.selfOneOne;\r\n-    }\r\n-    \r\n-    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n-        this.selfOneOne = selfOneOne;\r\n-    }\r\n-    \r\n-    public Set getSelfOneMany() {\r\n-        return this.selfOneMany;\r\n-    }\r\n-    \r\n-    public void setSelfOneMany(Set selfOneMany) {\r\n-        this.selfOneMany = selfOneMany;\r\n-    }\r\n-    \r\n-    public String toString() {\r\n-        return \"IntField: \"+intField+\", StringField: \"+stringField+\" .\";\r\n-    }\r\n-    \r\n-    public Locale getLocaleField() {\r\n-        return localeField;\r\n-    }\r\n-    \r\n-    public void setLocaleField(Locale localeField) {\r\n-        this.localeField = localeField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.*;\n+import java.math.*;\n+import java.util.*;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+\n+/**\n+ *\t<p>Persitent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+        @Table(name=\"rtest1\")\n+        @Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+        public class RuntimeTest1 implements Serializable {\n+    \n+    private static final long serialVersionUID = 1L;\n+    \n+    @Transient\n+            public static final String someStaticField = \"someField\";\n+    \n+    private Locale\t\tlocaleField;\n+    \n+    @Id\n+            private int\t\t\tintField;\n+    \n+    @Column(length=35)\n+    private String\t\tstringField;\n+    \n+    // transactional only\n+    @Column(length=35)\n+    public String\t\ttransString;\n+    \n+    // relations\n+    //@Transient\n+    @OneToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+    private RuntimeTest1\tselfOneOne;\n+    \n+    @Transient\n+            private Set\t\tselfOneMany = new HashSet();\n+    \n+    \n+    public RuntimeTest1() {\n+    }\n+    \n+    public RuntimeTest1(int key) {\n+        this.intField = key;\n+    }\n+    \n+    public RuntimeTest1(String str, int i) {\n+        stringField = str;\n+        intField = i;\n+    }\n+    \n+    public int getIntField() {\n+        return this.intField;\n+    }\n+    \n+    \n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+    \n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+    \n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+    \n+    public RuntimeTest1 getSelfOneOne() {\n+        return this.selfOneOne;\n+    }\n+    \n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\n+        this.selfOneOne = selfOneOne;\n+    }\n+    \n+    public Set getSelfOneMany() {\n+        return this.selfOneMany;\n+    }\n+    \n+    public void setSelfOneMany(Set selfOneMany) {\n+        this.selfOneMany = selfOneMany;\n+    }\n+    \n+    public String toString() {\n+        return \"IntField: \"+intField+\", StringField: \"+stringField+\" .\";\n+    }\n+    \n+    public Locale getLocaleField() {\n+        return localeField;\n+    }\n+    \n+    public void setLocaleField(Locale localeField) {\n+        this.localeField = localeField;\n+    }\n+}"},{"sha":"4f2456404d4ee4bdfed92c3a09ae501c88f9e667","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-/**\r\n- * <p>Persitent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class RuntimeTest2\r\n-    extends RuntimeTest1 {\r\n-\r\n-    private int intField2;\r\n-\r\n-    public RuntimeTest2() {\r\n-    }\r\n-\r\n-    public RuntimeTest2(String str, int i) {\r\n-        super(str, i);\r\n-    }\r\n-\r\n-    public int getIntField2() {\r\n-        return this.intField2;\r\n-    }\r\n-\r\n-    public void setIntField2(int intField2) {\r\n-        this.intField2 = intField2;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+/**\n+ * <p>Persitent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class RuntimeTest2\n+    extends RuntimeTest1 {\n+\n+    private int intField2;\n+\n+    public RuntimeTest2() {\n+    }\n+\n+    public RuntimeTest2(String str, int i) {\n+        super(str, i);\n+    }\n+\n+    public int getIntField2() {\n+        return this.intField2;\n+    }\n+\n+    public void setIntField2(int intField2) {\n+        this.intField2 = intField2;\n+    }\n+}"},{"sha":"ab668551503aef1c89ccb8fc2439e3471438295f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-import java.util.*;\r\n-\r\n-/**\r\n- * <p>Persitent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-\r\n-@Entity\r\n-public class RuntimeTest3\r\n-    extends RuntimeTest2 {\r\n-\r\n-    private int intField3;\r\n-\r\n-    public RuntimeTest3() {\r\n-    }\r\n-\r\n-    public RuntimeTest3(String str, int i) {\r\n-        super(str, i);\r\n-    }\r\n-\r\n-    public int getIntField3() {\r\n-        return this.intField3;\r\n-    }\r\n-\r\n-    public void setIntField3(int intField3) {\r\n-        this.intField3 = intField3;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+import java.util.*;\n+\n+/**\n+ * <p>Persitent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+\n+@Entity\n+public class RuntimeTest3\n+    extends RuntimeTest2 {\n+\n+    private int intField3;\n+\n+    public RuntimeTest3() {\n+    }\n+\n+    public RuntimeTest3(String str, int i) {\n+        super(str, i);\n+    }\n+\n+    public int getIntField3() {\n+        return this.intField3;\n+    }\n+\n+    public void setIntField3(int intField3) {\n+        this.intField3 = intField3;\n+    }\n+}"},{"sha":"92360a48c2cf37d8029c1b3d173875b3c3f8f498","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,23 +1,23 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class SeqA {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class SeqA {\n+\n+}"},{"sha":"0bfaea3a0623dd04981d91850bf015cfcf55ac2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,23 +1,23 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class SeqB extends SeqA {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class SeqB extends SeqA {\n+\n+}"},{"sha":"592010ec98ba0f2e070974722b4d8d0ada188512","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,23 +1,23 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class SeqC extends SeqA {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class SeqC extends SeqA {\n+\n+}"},{"sha":"3f978e9f1be92412e5c7773e078100e1c99af0f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,23 +1,23 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class SeqD {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class SeqD {\n+\n+}"},{"sha":"6432fe0ab9f0ba67220e50c3f3c85060c269faae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,23 +1,23 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public abstract class SeqE {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public abstract class SeqE {\n+\n+}"},{"sha":"5f7b0044a9b3f412bddf085bf015e96e76bb6492","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,23 +1,23 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class SeqF extends SeqE {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class SeqF extends SeqE {\n+\n+}"},{"sha":"1401dcb6ed1fd0a1bf8efd4e5ed4775b541fa0ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,23 +1,23 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class SeqG extends SeqE {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class SeqG extends SeqE {\n+\n+}"},{"sha":"1a0c52bba6860c6774640957ffc17fd3566ae09d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class StateImagePC {\r\n-\r\n-    private int intField;\r\n-    private StateImagePC stateImage;\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public StateImagePC getStateImage() {\r\n-        return this.stateImage;\r\n-    }\r\n-\r\n-    public void setStateImage(StateImagePC stateImage) {\r\n-        this.stateImage = stateImage;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+/**\n+ * <p>Persistent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class StateImagePC {\n+\n+    private int intField;\n+    private StateImagePC stateImage;\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public StateImagePC getStateImage() {\n+        return this.stateImage;\n+    }\n+\n+    public void setStateImage(StateImagePC stateImage) {\n+        this.stateImage = stateImage;\n+    }\n+}"},{"sha":"0a64cbfd5f6b091c33ba59ea010bc296305e1cfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,38 +1,38 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class StateImagePC2\r\n-    extends StateImagePC {\r\n-\r\n-    private String stringField;\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+/**\n+ * <p>Persistent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class StateImagePC2\n+    extends StateImagePC {\n+\n+    private String stringField;\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+}"},{"sha":"c42e119fa115f6db9a9ce741a1310d72a45c6ada","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class StateImagePC3 {\r\n-\r\n-    private int lockField;\r\n-    private int nolockField;\r\n-\r\n-    public int getLockField() {\r\n-        return lockField;\r\n-    }\r\n-\r\n-    public void setLockField(int i) {\r\n-        lockField = i;\r\n-    }\r\n-\r\n-    public int getNoLockField() {\r\n-        return nolockField;\r\n-    }\r\n-\r\n-    public void setNoLockField(int i) {\r\n-        nolockField = i;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+/**\n+ * <p>Persistent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class StateImagePC3 {\n+\n+    private int lockField;\n+    private int nolockField;\n+\n+    public int getLockField() {\n+        return lockField;\n+    }\n+\n+    public void setLockField(int i) {\n+        lockField = i;\n+    }\n+\n+    public int getNoLockField() {\n+        return nolockField;\n+    }\n+\n+    public void setNoLockField(int i) {\n+        nolockField = i;\n+    }\n+}"},{"sha":"eb85b689648827eca73dfd3f0e4909134ae17a53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-/**\r\n- * <p>Transactional type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class TransactionalClassPC {\r\n-\t@Id\r\n-    private int intField;\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * <p>Transactional type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class TransactionalClassPC {\n+\t@Id\n+    private int intField;\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+}"},{"sha":"55930aa13be75040165d1d57c874167910f88240","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * Entity which is traget of a unidirectional one-to-one relation.\r\n- * \r\n- * Used in\r\n- * @see org.apache.openjpa.persistence.query.TestProjectionQueryWithIdenticalResult\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class UnidirectionalOneToOneOwned {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String marker;\r\n-\t\r\n-\t@Version\r\n-\tprivate int version;\r\n-\t\r\n-\tpublic String getMarker() {\r\n-\t\treturn marker;\r\n-\t}\r\n-\r\n-\tpublic void setMarker(String marker) {\r\n-\t\tthis.marker = marker;\r\n-\t}\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic int getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * Entity which is traget of a unidirectional one-to-one relation.\n+ * \n+ * Used in\n+ * @see org.apache.openjpa.persistence.query.TestProjectionQueryWithIdenticalResult\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class UnidirectionalOneToOneOwned {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\tprivate String marker;\n+\t\n+\t@Version\n+\tprivate int version;\n+\t\n+\tpublic String getMarker() {\n+\t\treturn marker;\n+\t}\n+\n+\tpublic void setMarker(String marker) {\n+\t\tthis.marker = marker;\n+\t}\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+}"},{"sha":"2b20accebb58d7a60ee927b0afff58372162147a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,74 +1,74 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * Persistent entity with unidirectional one-to-one relation.\r\n- * \r\n- * Used in\r\n- * @see org.apache.openjpa.persistence.query.TestProjectionQueryWithIdenticalResult\r\n- *  \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class UnidirectionalOneToOneOwner {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String marker;\r\n-\t\r\n-\t@Version\r\n-\tprivate int version;\r\n-\t\r\n-\t@OneToOne(cascade=CascadeType.ALL)\r\n-\tprivate UnidirectionalOneToOneOwned owned;\r\n-\r\n-\tpublic String getMarker() {\r\n-\t\treturn marker;\r\n-\t}\r\n-\r\n-\tpublic void setMarker(String marker) {\r\n-\t\tthis.marker = marker;\r\n-\t}\r\n-\r\n-\tpublic UnidirectionalOneToOneOwned getOwned() {\r\n-\t\treturn owned;\r\n-\t}\r\n-\r\n-\tpublic void setOwned(UnidirectionalOneToOneOwned owned) {\r\n-\t\tthis.owned = owned;\r\n-\t}\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic int getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+/**\n+ * Persistent entity with unidirectional one-to-one relation.\n+ * \n+ * Used in\n+ * @see org.apache.openjpa.persistence.query.TestProjectionQueryWithIdenticalResult\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class UnidirectionalOneToOneOwner {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\tprivate String marker;\n+\t\n+\t@Version\n+\tprivate int version;\n+\t\n+\t@OneToOne(cascade=CascadeType.ALL)\n+\tprivate UnidirectionalOneToOneOwned owned;\n+\n+\tpublic String getMarker() {\n+\t\treturn marker;\n+\t}\n+\n+\tpublic void setMarker(String marker) {\n+\t\tthis.marker = marker;\n+\t}\n+\n+\tpublic UnidirectionalOneToOneOwned getOwned() {\n+\t\treturn owned;\n+\t}\n+\n+\tpublic void setOwned(UnidirectionalOneToOneOwned owned) {\n+\t\tthis.owned = owned;\n+\t}\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+}"},{"sha":"bcf9846892fb485dbda7d15c5e1268066cdf151c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,34 +1,34 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-public class UnknownSubclassParent {\r\n-\r\n-    private String parentString;\r\n-\r\n-    public void setParentString(String parentString) {\r\n-        this.parentString = parentString;\r\n-    }\r\n-\r\n-    public String getParentString() {\r\n-        return this.parentString;\r\n-    }\r\n-}\r\n-\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+public class UnknownSubclassParent {\n+\n+    private String parentString;\n+\n+    public void setParentString(String parentString) {\n+        this.parentString = parentString;\n+    }\n+\n+    public String getParentString() {\n+        return this.parentString;\n+    }\n+}\n+\n+"},{"sha":"606de5997db955556e5c12a3bda57951ce50fbf5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-/** Denotes a composite identity combining a String and Integer field.\r\n- * \r\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n- *\r\n- */\r\n-public class CompositeId implements Serializable {\r\n-\tpublic Integer id;\r\n-\tpublic String  name;\r\n-\t\r\n-\tpublic CompositeId () \r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic CompositeId (String idString)\r\n-\t{\r\n-\t\tint index = idString.indexOf(':');\r\n-\t\tid = Integer.parseInt(idString.substring(0,index));\r\n-\t\tname = idString.substring(index+1);\r\n-\t}\r\n-\r\n-\tpublic CompositeId (Integer id, String name)\r\n-\t{\r\n-\t\tthis.id   = id;\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic Integer getId()\r\n-\t{\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(Integer id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getName()\r\n-\t{\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\t\r\n-\tpublic String toString() \r\n-\t{\r\n-\t\treturn id + \":\" + name;\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic boolean equals (Object other)\r\n-\t{\r\n-\t\tif (other instanceof CompositeId==false)\r\n-\t\t\treturn false;\r\n-\t\t\r\n-\t\tCompositeId that = (CompositeId) other;\r\n-\t\treturn id.equals(that.id) && name.equals(that.name);\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic int hashCode () \r\n-\t{\r\n-\t\treturn id.hashCode()+name.hashCode();\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import java.io.Serializable;\n+\n+/** Denotes a composite identity combining a String and Integer field.\n+ * \n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\n+ *\n+ */\n+public class CompositeId implements Serializable {\n+\tpublic Integer id;\n+\tpublic String  name;\n+\t\n+\tpublic CompositeId () \n+\t{\n+\t}\n+\n+\tpublic CompositeId (String idString)\n+\t{\n+\t\tint index = idString.indexOf(':');\n+\t\tid = Integer.parseInt(idString.substring(0,index));\n+\t\tname = idString.substring(index+1);\n+\t}\n+\n+\tpublic CompositeId (Integer id, String name)\n+\t{\n+\t\tthis.id   = id;\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic Integer getId()\n+\t{\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Integer id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName()\n+\t{\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name)\n+\t{\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic String toString() \n+\t{\n+\t\treturn id + \":\" + name;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean equals (Object other)\n+\t{\n+\t\tif (other instanceof CompositeId==false)\n+\t\t\treturn false;\n+\t\t\n+\t\tCompositeId that = (CompositeId) other;\n+\t\treturn id.equals(that.id) && name.equals(that.name);\n+\t}\n+\t\n+\t@Override\n+\tpublic int hashCode () \n+\t{\n+\t\treturn id.hashCode()+name.hashCode();\n+\t}\n+}"},{"sha":"9e9425678fa5f290f6bbc933f2e9e69f78a8a2e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,117 +1,117 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityResult;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.SqlResultSetMapping;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Version;\r\n-\r\n-\r\n-@Entity\r\n-@Table(name=\"entity_1\")\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\r\n-public class Entity1 implements Serializable\r\n-{\r\n-\tprivate static final long serialVersionUID = 2882935803066041165L;\r\n-\r\n-\t@Id\r\n-\tprotected long pk;\r\n-\r\n-\t@Basic\r\n-\t@Column(length=35)\r\n-\tprotected String stringField;\r\n-\r\n-\t@Basic\r\n-\tprotected int intField;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\r\n-\tprotected Entity2 entity2Field;\r\n-\r\n-\t@Version\r\n-\tprotected int versionField;\r\n-\r\n-\tpublic Entity1()\r\n-\t{}\r\n-\r\n-\tpublic Entity1 (long pk, String stringField, int intField)\r\n-\t{\r\n-\t\tthis.pk = pk;\r\n-\t\tthis.stringField = stringField;\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic long getPk ()\r\n-\t{\r\n-\t\treturn pk;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String val)\r\n-\t{\r\n-\t\tstringField = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setIntField (int val)\r\n-\t{\r\n-\t\tintField = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setEntity2Field (Entity2 val)\r\n-\t{\r\n-\t\tentity2Field = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic Entity2 getEntity2Field ()\r\n-\t{\r\n-\t\treturn entity2Field;\r\n-\t}\r\n-\r\n-\tpublic String toString()\r\n-\t{\r\n-\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToOne;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+\n+@Entity\n+@Table(name=\"entity_1\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\n+public class Entity1 implements Serializable\n+{\n+\tprivate static final long serialVersionUID = 2882935803066041165L;\n+\n+\t@Id\n+\tprotected long pk;\n+\n+\t@Basic\n+\t@Column(length=35)\n+\tprotected String stringField;\n+\n+\t@Basic\n+\tprotected int intField;\n+\n+\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\n+\tprotected Entity2 entity2Field;\n+\n+\t@Version\n+\tprotected int versionField;\n+\n+\tpublic Entity1()\n+\t{}\n+\n+\tpublic Entity1 (long pk, String stringField, int intField)\n+\t{\n+\t\tthis.pk = pk;\n+\t\tthis.stringField = stringField;\n+\t\tthis.intField = intField;\n+\t}\n+\n+\n+\tpublic long getPk ()\n+\t{\n+\t\treturn pk;\n+\t}\n+\n+\n+\tpublic void setStringField (String val)\n+\t{\n+\t\tstringField = val;\n+\t}\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn stringField;\n+\t}\n+\n+\n+\tpublic void setIntField (int val)\n+\t{\n+\t\tintField = val;\n+\t}\n+\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn intField;\n+\t}\n+\n+\n+\tpublic void setEntity2Field (Entity2 val)\n+\t{\n+\t\tentity2Field = val;\n+\t}\n+\n+\n+\tpublic Entity2 getEntity2Field ()\n+\t{\n+\t\treturn entity2Field;\n+\t}\n+\n+\tpublic String toString()\n+\t{\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\n+\t}\n+}"},{"sha":"1e47ca405f27413c428fd7616173e3c32c59db55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,99 +1,99 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-\r\n-//@Entity(name=\"entity2ExplicitName\")\r\n-//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-/**FIX-ME \r\n- * \r\n- * It should complain if i uncomment the above strategies...but it does\r\n- */\r\n-@Entity\r\n-public class Entity2 implements Serializable\r\n-{\r\n-\t/**\r\n-\t *\r\n-\t */\r\n-\tprivate static final long serialVersionUID = 4723739219953167343L;\r\n-\r\n-\t@Id\r\n-\tprotected long pk;\r\n-\r\n-\t@Basic\r\n-\t@Column(length=35)\r\n-\tprotected String stringField;\r\n-\r\n-\t@Basic\r\n-\tprotected int intField;\r\n-\r\n-\tpublic Entity2()\r\n-\t{}\r\n-\r\n-\r\n-\tpublic Entity2 (long pk, String stringField, int intField)\r\n-\t{\r\n-\t\tthis.pk = pk;\r\n-\t\tthis.stringField = stringField;\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic long getPk ()\r\n-\t{\r\n-\t\treturn pk;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String val)\r\n-\t{\r\n-\t\tstringField = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn stringField;\r\n-\t}\r\n-\r\n-\tpublic void setIntField (int val)\r\n-\t{\r\n-\t\tintField = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn intField;\r\n-\t}\r\n-\r\n-\tpublic String toString()\r\n-\t{\r\n-\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+\n+//@Entity(name=\"entity2ExplicitName\")\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+/**FIX-ME \n+ * \n+ * It should complain if i uncomment the above strategies...but it does\n+ */\n+@Entity\n+public class Entity2 implements Serializable\n+{\n+\t/**\n+\t *\n+\t */\n+\tprivate static final long serialVersionUID = 4723739219953167343L;\n+\n+\t@Id\n+\tprotected long pk;\n+\n+\t@Basic\n+\t@Column(length=35)\n+\tprotected String stringField;\n+\n+\t@Basic\n+\tprotected int intField;\n+\n+\tpublic Entity2()\n+\t{}\n+\n+\n+\tpublic Entity2 (long pk, String stringField, int intField)\n+\t{\n+\t\tthis.pk = pk;\n+\t\tthis.stringField = stringField;\n+\t\tthis.intField = intField;\n+\t}\n+\n+\n+\tpublic long getPk ()\n+\t{\n+\t\treturn pk;\n+\t}\n+\n+\n+\tpublic void setStringField (String val)\n+\t{\n+\t\tstringField = val;\n+\t}\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn stringField;\n+\t}\n+\n+\tpublic void setIntField (int val)\n+\t{\n+\t\tintField = val;\n+\t}\n+\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn intField;\n+\t}\n+\n+\tpublic String toString()\n+\t{\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\n+\t}\n+}"},{"sha":"a928ddace914c521b82831e370a497f7f688fac2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@IdClass(CompositeId.class)\r\n-@Table(name=\"COMPOSITE_ID\")\r\n-public class EntityWithCompositeId {\r\n-\tprivate Integer id;   // this must match the field in CompositeId\r\n-\tprivate String  name; // this must match the field in CompositeId\r\n-\tprivate String  value;\r\n-\t\r\n-\tpublic EntityWithCompositeId() {\r\n-\t\tsuper();\r\n-\t}\r\n-\t\r\n-\t@Id\r\n-\t@Column(name=\"ID\")\r\n-\tpublic Integer getId () \r\n-\t{\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\t@Id\r\n-\t@Column(name=\"NAME\")\r\n-\tpublic String getName () {\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\t\r\n-\t@Column(name=\"VALUE\")\r\n-\tpublic String getValue () \r\n-\t{\r\n-\t\treturn value;\r\n-\t}\r\n-\t\r\n-\tpublic void setId (Integer id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\t\r\n-\tpublic void setName (String name) \r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\t\r\n-\tpublic void setValue (String value)\r\n-\t{\r\n-\t\tthis.value = value;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@IdClass(CompositeId.class)\n+@Table(name=\"COMPOSITE_ID\")\n+public class EntityWithCompositeId {\n+\tprivate Integer id;   // this must match the field in CompositeId\n+\tprivate String  name; // this must match the field in CompositeId\n+\tprivate String  value;\n+\t\n+\tpublic EntityWithCompositeId() {\n+\t\tsuper();\n+\t}\n+\t\n+\t@Id\n+\t@Column(name=\"ID\")\n+\tpublic Integer getId () \n+\t{\n+\t\treturn id;\n+\t}\n+\n+\t@Id\n+\t@Column(name=\"NAME\")\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\t\n+\t\n+\t@Column(name=\"VALUE\")\n+\tpublic String getValue () \n+\t{\n+\t\treturn value;\n+\t}\n+\t\n+\tpublic void setId (Integer id) {\n+\t\tthis.id = id;\n+\t}\n+\t\n+\tpublic void setName (String name) \n+\t{\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic void setValue (String value)\n+\t{\n+\t\tthis.value = value;\n+\t}\n+}"},{"sha":"f36b35822e0054ce5b887331a76f5760a3eba53c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,118 +1,118 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@SqlResultSetMappings(value={\r\n-@SqlResultSetMapping(name=\"SQLSelectsBothEndOfTheRelation\",\r\n-\t\tentities={\r\n-\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n-\t\t\t\tfields={\r\n-\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n-\t\t\t\t}\r\n-\t\t\t),\r\n-\t\t\t@EntityResult(entityClass=EntityWithCompositeId.class,\r\n-\t\t\t\tfields={\r\n-\t\t\t\t\t@FieldResult(name=\"id\",  column=\"C_ID\"),\r\n-\t\t\t\t\t@FieldResult(name=\"name\", column=\"C_NAME\"),\r\n-\t\t\t\t\t@FieldResult(name=\"value\", column=\"C_VALUE\")\r\n-\t\t\t\t}\r\n-\t\t\t)\r\n-\t\t}\r\n-),\r\n-@SqlResultSetMapping(name=\"SQLSelectsOnlyOneEndOfTheRelation\",\r\n-\t\tentities={\r\n-\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n-\t\t\t\tfields={\r\n-\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n-\t\t\t\t}\r\n-\t\t\t)\r\n-\t\t}\r\n-),\r\n-@SqlResultSetMapping(name=\"SQLSelectsUnrelatedInstances\",\r\n-\t\tentities={\r\n-\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n-\t\t\t\tfields={\r\n-\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n-\t\t\t\t}\r\n-\t\t\t),\r\n-\t\t\t@EntityResult(entityClass=EntityWithCompositeId.class,\r\n-\t\t\t\tfields={\r\n-\t\t\t\t\t@FieldResult(name=\"id\",    column=\"C_ID\"),\r\n-\t\t\t\t\t@FieldResult(name=\"name\",  column=\"C_NAME\"),\r\n-\t\t\t\t\t@FieldResult(name=\"value\", column=\"C_VALUE\")\r\n-\t\t\t\t}\r\n-\t\t\t)\r\n-\t\t}\r\n-)\r\n-\r\n-})\r\n-\r\n-@Entity\r\n-@Table(name=\"OWNER_OF_COMPOSITE_ID\")\r\n-public class OwnerOfEntityWithCompositeId {\r\n-\t\r\n-\tprivate String                 name;\r\n-\tprivate EntityWithCompositeId  relation;\r\n-\t\r\n-\tpublic OwnerOfEntityWithCompositeId() {\r\n-\t\tsuper();\r\n-\t}\r\n-\t\r\n-\tpublic OwnerOfEntityWithCompositeId (String name)\r\n-\t{\r\n-\t\tsetName (name);\r\n-\t}\r\n-\t\r\n-\t@Id\r\n-\t@Column(name=\"NAME\")\r\n-\tpublic String getName () \r\n-\t{\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\t@OneToOne(cascade=CascadeType.ALL)\r\n-\t@JoinColumns({\r\n-\t\t@JoinColumn(name=\"RELATION_ID\",referencedColumnName=\"ID\"),\r\n-\t\t@JoinColumn(name=\"RELATION_NAME\", referencedColumnName=\"NAME\")\r\n-\t})\r\n-\t\r\n-\tpublic EntityWithCompositeId getRelation()\r\n-\t{\r\n-\t\treturn relation;\r\n-\t}\r\n-\t\r\n-\t\r\n-\tpublic void setName (String name)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\t\r\n-\tpublic void setRelation (EntityWithCompositeId relation)\r\n-\t{\r\n-\t\tthis.relation = relation;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import javax.persistence.*;\n+\n+@SqlResultSetMappings(value={\n+@SqlResultSetMapping(name=\"SQLSelectsBothEndOfTheRelation\",\n+\t\tentities={\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\n+\t\t\t\tfields={\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\n+\t\t\t\t}\n+\t\t\t),\n+\t\t\t@EntityResult(entityClass=EntityWithCompositeId.class,\n+\t\t\t\tfields={\n+\t\t\t\t\t@FieldResult(name=\"id\",  column=\"C_ID\"),\n+\t\t\t\t\t@FieldResult(name=\"name\", column=\"C_NAME\"),\n+\t\t\t\t\t@FieldResult(name=\"value\", column=\"C_VALUE\")\n+\t\t\t\t}\n+\t\t\t)\n+\t\t}\n+),\n+@SqlResultSetMapping(name=\"SQLSelectsOnlyOneEndOfTheRelation\",\n+\t\tentities={\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\n+\t\t\t\tfields={\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\n+\t\t\t\t}\n+\t\t\t)\n+\t\t}\n+),\n+@SqlResultSetMapping(name=\"SQLSelectsUnrelatedInstances\",\n+\t\tentities={\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\n+\t\t\t\tfields={\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\n+\t\t\t\t}\n+\t\t\t),\n+\t\t\t@EntityResult(entityClass=EntityWithCompositeId.class,\n+\t\t\t\tfields={\n+\t\t\t\t\t@FieldResult(name=\"id\",    column=\"C_ID\"),\n+\t\t\t\t\t@FieldResult(name=\"name\",  column=\"C_NAME\"),\n+\t\t\t\t\t@FieldResult(name=\"value\", column=\"C_VALUE\")\n+\t\t\t\t}\n+\t\t\t)\n+\t\t}\n+)\n+\n+})\n+\n+@Entity\n+@Table(name=\"OWNER_OF_COMPOSITE_ID\")\n+public class OwnerOfEntityWithCompositeId {\n+\t\n+\tprivate String                 name;\n+\tprivate EntityWithCompositeId  relation;\n+\t\n+\tpublic OwnerOfEntityWithCompositeId() {\n+\t\tsuper();\n+\t}\n+\t\n+\tpublic OwnerOfEntityWithCompositeId (String name)\n+\t{\n+\t\tsetName (name);\n+\t}\n+\t\n+\t@Id\n+\t@Column(name=\"NAME\")\n+\tpublic String getName () \n+\t{\n+\t\treturn name;\n+\t}\n+\t\n+\t@OneToOne(cascade=CascadeType.ALL)\n+\t@JoinColumns({\n+\t\t@JoinColumn(name=\"RELATION_ID\",referencedColumnName=\"ID\"),\n+\t\t@JoinColumn(name=\"RELATION_NAME\", referencedColumnName=\"NAME\")\n+\t})\n+\t\n+\tpublic EntityWithCompositeId getRelation()\n+\t{\n+\t\treturn relation;\n+\t}\n+\t\n+\t\n+\tpublic void setName (String name)\n+\t{\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic void setRelation (EntityWithCompositeId relation)\n+\t{\n+\t\tthis.relation = relation;\n+\t}\n+}"},{"sha":"15757f5447693f69359bfd782b703b2cd2449af4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,104 +1,104 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@SqlResultSetMappings(value={\r\n-\t@SqlResultSetMapping(name=\"SQLSelectsChainedRelation\",\r\n-\t\tentities={\r\n-\t\t\t@EntityResult(entityClass=RecursiveEntityWithCompositeId.class,\r\n-\t\t\t\tfields={\r\n-\t\t\t\t\r\n-\t\t\t\t@FieldResult(name=\"id\",                   column=\"T0_ID\"),\r\n-\t\t\t\t@FieldResult(name=\"name\",                 column=\"T0_NAME\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.id\",          column=\"T0_REL_ID\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.name\",        column=\"T0_REL_NAME\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.relation.id\", column=\"T1_REL_ID\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.relation.name\", column=\"T1_REL_NAME\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.relation.relation.id\", column=\"T2_REL_ID\"),\r\n-\t\t\t\t@FieldResult(name=\"relation.relation.relation.name\", column=\"T2_REL_NAME\")\r\n-\t\t\t\t\r\n-\t\t\t\t}\r\n-\t\t\t)\r\n-\t\t}\r\n-\t)\r\n-  }\r\n-)\r\n- \r\n-@Entity\r\n-@IdClass(CompositeId.class)\r\n-@Table(name=\"RECURSIVE_ENTITY\")\r\n-\r\n-public class RecursiveEntityWithCompositeId {\r\n-\tprivate Integer id;   // this must match the field in CompositeId\r\n-\tprivate String  name; // this must match the field in CompositeId\r\n-\tprivate int     value;// a non-primary key field \r\n-\tprivate RecursiveEntityWithCompositeId  relation; // self-related\r\n-\t\r\n-\tpublic RecursiveEntityWithCompositeId() {\r\n-\t\tsuper();\r\n-\t}\r\n-\t\r\n-\t@Id\r\n-\t@Column(name=\"ID\")\r\n-\tpublic Integer getId () \r\n-\t{\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\t@Id\r\n-\t@Column(name=\"NAME\")\r\n-\tpublic String getName () {\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\t@Column(name=\"VALUE\")\r\n-\tpublic int getValue(){\r\n-\t   return value;\t\r\n-\t}\r\n-\t\r\n-\t@OneToOne(cascade=CascadeType.ALL)\r\n-\t@JoinColumns({\r\n-\t\t@JoinColumn(name=\"RELATION_ID\",   referencedColumnName=\"ID\"),\r\n-\t\t@JoinColumn(name=\"RELATION_NAME\", referencedColumnName=\"NAME\")\r\n-\t})\r\n-\tpublic RecursiveEntityWithCompositeId getRelation() \r\n-\t{\r\n-\t\treturn relation;\r\n-\t}\r\n-\t\r\n-\tpublic void setId (Integer id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\t\r\n-\tpublic void setName (String name) \r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\tpublic void setValue (int value) \r\n-\t{\r\n-\t\tthis.value = value;\r\n-\t}\r\n-\t\r\n-\tpublic void setRelation (RecursiveEntityWithCompositeId relation)\r\n-\t{\r\n-\t\tthis.relation = relation;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import javax.persistence.*;\n+\n+@SqlResultSetMappings(value={\n+\t@SqlResultSetMapping(name=\"SQLSelectsChainedRelation\",\n+\t\tentities={\n+\t\t\t@EntityResult(entityClass=RecursiveEntityWithCompositeId.class,\n+\t\t\t\tfields={\n+\t\t\t\t\n+\t\t\t\t@FieldResult(name=\"id\",                   column=\"T0_ID\"),\n+\t\t\t\t@FieldResult(name=\"name\",                 column=\"T0_NAME\"),\n+\t\t\t\t@FieldResult(name=\"relation.id\",          column=\"T0_REL_ID\"),\n+\t\t\t\t@FieldResult(name=\"relation.name\",        column=\"T0_REL_NAME\"),\n+\t\t\t\t@FieldResult(name=\"relation.relation.id\", column=\"T1_REL_ID\"),\n+\t\t\t\t@FieldResult(name=\"relation.relation.name\", column=\"T1_REL_NAME\"),\n+\t\t\t\t@FieldResult(name=\"relation.relation.relation.id\", column=\"T2_REL_ID\"),\n+\t\t\t\t@FieldResult(name=\"relation.relation.relation.name\", column=\"T2_REL_NAME\")\n+\t\t\t\t\n+\t\t\t\t}\n+\t\t\t)\n+\t\t}\n+\t)\n+  }\n+)\n+ \n+@Entity\n+@IdClass(CompositeId.class)\n+@Table(name=\"RECURSIVE_ENTITY\")\n+\n+public class RecursiveEntityWithCompositeId {\n+\tprivate Integer id;   // this must match the field in CompositeId\n+\tprivate String  name; // this must match the field in CompositeId\n+\tprivate int     value;// a non-primary key field \n+\tprivate RecursiveEntityWithCompositeId  relation; // self-related\n+\t\n+\tpublic RecursiveEntityWithCompositeId() {\n+\t\tsuper();\n+\t}\n+\t\n+\t@Id\n+\t@Column(name=\"ID\")\n+\tpublic Integer getId () \n+\t{\n+\t\treturn id;\n+\t}\n+\n+\t@Id\n+\t@Column(name=\"NAME\")\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\t\n+\t@Column(name=\"VALUE\")\n+\tpublic int getValue(){\n+\t   return value;\t\n+\t}\n+\t\n+\t@OneToOne(cascade=CascadeType.ALL)\n+\t@JoinColumns({\n+\t\t@JoinColumn(name=\"RELATION_ID\",   referencedColumnName=\"ID\"),\n+\t\t@JoinColumn(name=\"RELATION_NAME\", referencedColumnName=\"NAME\")\n+\t})\n+\tpublic RecursiveEntityWithCompositeId getRelation() \n+\t{\n+\t\treturn relation;\n+\t}\n+\t\n+\tpublic void setId (Integer id) {\n+\t\tthis.id = id;\n+\t}\n+\t\n+\tpublic void setName (String name) \n+\t{\n+\t\tthis.name = name;\n+\t}\n+\tpublic void setValue (int value) \n+\t{\n+\t\tthis.value = value;\n+\t}\n+\t\n+\tpublic void setRelation (RecursiveEntityWithCompositeId relation)\n+\t{\n+\t\tthis.relation = relation;\n+\t}\n+}"},{"sha":"4e38c4146f57c33d626f7f94853a5f0d8254f9c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","status":"modified","additions":177,"deletions":177,"changes":354,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,177 +1,177 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/** This domain class uses a all possible nature of annotations. Nature of\r\n- * annotation from the point of view of nature of result they produce are\r\n- * the following\r\n- * <pre>\r\n- * #entity-result      #column-result       nature\r\n- * 0                     1+                 SCALAR_ONLY\r\n- * 1                     0                  SINGLE_CLASS\r\n- * 1                     1+                 SINGLE_CLASS_AND_SCALAR\r\n- * 1+                    0                  MULTI_CLASS\r\n- * 1+                    1+                 MULTI_CLASS_AND_SCALAR\r\n- * </pre> \r\n- * \r\n- */\r\n-@SqlResultSetMappings(value={\r\n-\t\t/** Specifies only scalars and no entity.\r\n-\t\t * \r\n-\t\t */\t\t\r\n-\t\t\t\t@SqlResultSetMapping(name=\"SCALAR_ONLY\",\r\n-\t\t\t\t    columns={\r\n-\t\t\t\t\t\t@ColumnResult(name=\"NAME\")\r\n-\t\t\t\t\t}\r\n-\t\t\t\t),\r\n-\t\t/** Specifies one entity and no scalar.\r\n-\t\t * \r\n-\t\t */\t\t\r\n-\t\t\t\t@SqlResultSetMapping(name=\"SINGLE_CLASS\",\r\n-\t\t\t\t\tentities={\r\n-\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class)\r\n-\t\t\t\t\t}\r\n-\t\t\t\t),\r\n-\t\t\t\t\r\n-\t\t\t\t/** Specifies one entity and one or more scalar.\r\n-\t\t\t\t * \r\n-\t\t\t\t */\t\t\t\t\r\n-\t\t\t\t@SqlResultSetMapping(name=\"SINGLE_CLASS_AND_SCALAR\",\r\n-\t\t\t\t\tentities={\r\n-\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class)\r\n-\t\t\t\t\t},\r\n-\t\t\t\t\tcolumns={\r\n-\t\t\t\t\t\t@ColumnResult(name=\"name\")\r\n-\t\t\t\t\t}\r\n-\t\t\t\t),\r\n-\t\t\t\t\r\n-\t\t\t\t/** Specifies more than one entity and no scalar.\r\n-\t\t\t\t * \r\n-\t\t\t\t */\t\t\t\t\r\n-\t\t\t\t@SqlResultSetMapping(name=\"MULTI_CLASS\",\r\n-\t\t\t\t\tentities={\r\n-\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class),\r\n-\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class)\r\n-\t\t\t\t\t}\r\n-\t\t\t\t),\r\n-\t\t\t\t\r\n-\t\t\t\t/** Specifies more than one entity and one or more scalar.\r\n-\t\t\t\t * \r\n-\t\t\t\t */\t\t\t\t\r\n-\t\t\t\t@SqlResultSetMapping(name=\"MULTI_CLASS_AND_SCALAR\",\r\n-\t\t\t\t\tentities={\r\n-\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class),\r\n-\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class)\r\n-\t\t\t\t\t},\r\n-\t\t\t\t\tcolumns={\r\n-\t\t\t\t\t\t@ColumnResult(name=\"name\"),\r\n-\t\t\t\t\t\t@ColumnResult(name=\"state\")\r\n-\t\t\t\t\t}\r\n-\t\t\t\t),\r\n-\r\n-\t\t\t\t@SqlResultSetMapping(name=\"MappingWithTraversal\",\r\n-\t\t\t\t\tentities={\r\n-\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class,\r\n-\t\t\t\t\t    fields={\r\n-\t\t\t\t\t\t\t@FieldResult(name=\"id\",    column=\"ADDR_ID\"),\r\n-\t\t\t\t\t\t\t@FieldResult(name=\"street\",column=\"ADDR_STREET\"),\r\n-\t\t\t\t\t\t\t@FieldResult(name=\"state\", column=\"ADDR_STATE\"),\r\n-\t\t\t\t\t\t\t@FieldResult(name=\"zip\",   column=\"ADDR_ZIP\")\r\n-\t\t\t\t\t\t}),\r\n-\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class,\r\n-\t\t\t\t\t\t fields={\r\n-\t\t\t\t\t\t\t@FieldResult(name=\"name\",    column=\"MY_NAME\"),\r\n-\t\t\t\t\t\t\t@FieldResult(name=\"address\", column=\"MY_ADDRESS\")\r\n-\t\t\t\t\t\t }\r\n-\t\t\t\t\t\t)\r\n-\t\t\t\t\t}\r\n-\t\t\t\t)\r\n-\t\t\t\t\r\n-\t\t\t\t\r\n-\t\t\t}\r\n-\t\t) \r\n-\r\n-\r\n-@Entity\r\n-@Table(name = \"SQLMAP_ADDRESS\")\r\n-public class SQLMapAddress implements Serializable {\r\n-\tprivate int    id;\r\n-\tprivate String street;\r\n-\tprivate String state;\r\n-\tprivate int    zip;\r\n-\r\n-\tprotected SQLMapAddress() {\r\n-\r\n-\t}\r\n-\r\n-\tpublic SQLMapAddress(int id, String street, String state, int zip) {\r\n-\t\tthis.id = id;\r\n-\t\tsetStreet(street);\r\n-\t\tsetState(state);\r\n-\t\tsetZip(zip);\r\n-\t}\r\n-\r\n-\t@Id\r\n-\tpublic int getId ()\r\n-\t{\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId (int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\t@Column(name=\"STATE\")\r\n-\tpublic String getState() {\r\n-\t\treturn state;\r\n-\t}\r\n-\r\n-\tpublic void setState(String state) {\r\n-\t\tthis.state = state;\r\n-\t}\r\n-\r\n-\t@Column(name=\"STREET\")\r\n-\tpublic String getStreet() {\r\n-\t\treturn street;\r\n-\t}\r\n-\r\n-\tpublic void setStreet(String street) {\r\n-\t\tthis.street = street;\r\n-\t}\r\n-\r\n-\tpublic int getZip() {\r\n-\t\treturn zip;\r\n-\t}\r\n-\r\n-\t@Column(name=\"ZIP\")\r\n-\tpublic void setZip(int zip) {\r\n-\t\tthis.zip = zip;\r\n-\t}\r\n-\t\r\n-\t@PostLoad\r\n-\tprotected void inform() {\r\n-\t\tSystem.out.println(\"Loaded\" + this);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.*;\n+\n+/** This domain class uses a all possible nature of annotations. Nature of\n+ * annotation from the point of view of nature of result they produce are\n+ * the following\n+ * <pre>\n+ * #entity-result      #column-result       nature\n+ * 0                     1+                 SCALAR_ONLY\n+ * 1                     0                  SINGLE_CLASS\n+ * 1                     1+                 SINGLE_CLASS_AND_SCALAR\n+ * 1+                    0                  MULTI_CLASS\n+ * 1+                    1+                 MULTI_CLASS_AND_SCALAR\n+ * </pre> \n+ * \n+ */\n+@SqlResultSetMappings(value={\n+\t\t/** Specifies only scalars and no entity.\n+\t\t * \n+\t\t */\t\t\n+\t\t\t\t@SqlResultSetMapping(name=\"SCALAR_ONLY\",\n+\t\t\t\t    columns={\n+\t\t\t\t\t\t@ColumnResult(name=\"NAME\")\n+\t\t\t\t\t}\n+\t\t\t\t),\n+\t\t/** Specifies one entity and no scalar.\n+\t\t * \n+\t\t */\t\t\n+\t\t\t\t@SqlResultSetMapping(name=\"SINGLE_CLASS\",\n+\t\t\t\t\tentities={\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class)\n+\t\t\t\t\t}\n+\t\t\t\t),\n+\t\t\t\t\n+\t\t\t\t/** Specifies one entity and one or more scalar.\n+\t\t\t\t * \n+\t\t\t\t */\t\t\t\t\n+\t\t\t\t@SqlResultSetMapping(name=\"SINGLE_CLASS_AND_SCALAR\",\n+\t\t\t\t\tentities={\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class)\n+\t\t\t\t\t},\n+\t\t\t\t\tcolumns={\n+\t\t\t\t\t\t@ColumnResult(name=\"name\")\n+\t\t\t\t\t}\n+\t\t\t\t),\n+\t\t\t\t\n+\t\t\t\t/** Specifies more than one entity and no scalar.\n+\t\t\t\t * \n+\t\t\t\t */\t\t\t\t\n+\t\t\t\t@SqlResultSetMapping(name=\"MULTI_CLASS\",\n+\t\t\t\t\tentities={\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class),\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class)\n+\t\t\t\t\t}\n+\t\t\t\t),\n+\t\t\t\t\n+\t\t\t\t/** Specifies more than one entity and one or more scalar.\n+\t\t\t\t * \n+\t\t\t\t */\t\t\t\t\n+\t\t\t\t@SqlResultSetMapping(name=\"MULTI_CLASS_AND_SCALAR\",\n+\t\t\t\t\tentities={\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class),\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class)\n+\t\t\t\t\t},\n+\t\t\t\t\tcolumns={\n+\t\t\t\t\t\t@ColumnResult(name=\"name\"),\n+\t\t\t\t\t\t@ColumnResult(name=\"state\")\n+\t\t\t\t\t}\n+\t\t\t\t),\n+\n+\t\t\t\t@SqlResultSetMapping(name=\"MappingWithTraversal\",\n+\t\t\t\t\tentities={\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class,\n+\t\t\t\t\t    fields={\n+\t\t\t\t\t\t\t@FieldResult(name=\"id\",    column=\"ADDR_ID\"),\n+\t\t\t\t\t\t\t@FieldResult(name=\"street\",column=\"ADDR_STREET\"),\n+\t\t\t\t\t\t\t@FieldResult(name=\"state\", column=\"ADDR_STATE\"),\n+\t\t\t\t\t\t\t@FieldResult(name=\"zip\",   column=\"ADDR_ZIP\")\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class,\n+\t\t\t\t\t\t fields={\n+\t\t\t\t\t\t\t@FieldResult(name=\"name\",    column=\"MY_NAME\"),\n+\t\t\t\t\t\t\t@FieldResult(name=\"address\", column=\"MY_ADDRESS\")\n+\t\t\t\t\t\t }\n+\t\t\t\t\t\t)\n+\t\t\t\t\t}\n+\t\t\t\t)\n+\t\t\t\t\n+\t\t\t\t\n+\t\t\t}\n+\t\t) \n+\n+\n+@Entity\n+@Table(name = \"SQLMAP_ADDRESS\")\n+public class SQLMapAddress implements Serializable {\n+\tprivate int    id;\n+\tprivate String street;\n+\tprivate String state;\n+\tprivate int    zip;\n+\n+\tprotected SQLMapAddress() {\n+\n+\t}\n+\n+\tpublic SQLMapAddress(int id, String street, String state, int zip) {\n+\t\tthis.id = id;\n+\t\tsetStreet(street);\n+\t\tsetState(state);\n+\t\tsetZip(zip);\n+\t}\n+\n+\t@Id\n+\tpublic int getId ()\n+\t{\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId (int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\t@Column(name=\"STATE\")\n+\tpublic String getState() {\n+\t\treturn state;\n+\t}\n+\n+\tpublic void setState(String state) {\n+\t\tthis.state = state;\n+\t}\n+\n+\t@Column(name=\"STREET\")\n+\tpublic String getStreet() {\n+\t\treturn street;\n+\t}\n+\n+\tpublic void setStreet(String street) {\n+\t\tthis.street = street;\n+\t}\n+\n+\tpublic int getZip() {\n+\t\treturn zip;\n+\t}\n+\n+\t@Column(name=\"ZIP\")\n+\tpublic void setZip(int zip) {\n+\t\tthis.zip = zip;\n+\t}\n+\t\n+\t@PostLoad\n+\tprotected void inform() {\n+\t\tSystem.out.println(\"Loaded\" + this);\n+\t}\n+\n+}"},{"sha":"625413f73097537622dea76849816e60f48996ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","status":"modified","additions":157,"deletions":157,"changes":314,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,157 +1,157 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-/** This simple domain class without any relationship is for testing basic \r\n- * SQL Result Set mapping functionality.\r\n- * This class uses Application Identity.\r\n- * The annotation specified herein examplifies test cases of accessing\r\n- * with or without identity fields, aliased column names etc. \r\n- */ \r\n-@SqlResultSetMappings(value = {\r\n-\t/**\r\n-\t *  This mapping is the same as the native query that\r\n-\t *  takes a class argument.\r\n-\t *  <code>SELECT id,name,price FROM ITEM WHERE name='WINE'</code>\r\n-\t */ \t\t\r\n-\t@SqlResultSetMapping(name = \"MappingEquivalentToClassQuery\", \r\n-\t\tentities = { @EntityResult(entityClass = SQLMapItem.class) \r\n-\t}),\r\n-\r\n-\t/**\r\n-\t * This mapping is similar to the native query that takes a class argument\r\n-\t * but the query specifies aliases for the projection columns.\r\n-\t *  <code>SELECT id AS ITEM_ID,name AS ITEM_NAME FROM ITEM\r\n-\t *  WHERE NAME='WINE'</code>\r\n-\t */\t\t\t\t\r\n-\t@SqlResultSetMapping(name = \"MappingWithAliasedColumnName\", \r\n-\t\tentities = { @EntityResult(entityClass = SQLMapItem.class, \r\n-\t\t\tfields = {\r\n-\t\t\t\t@FieldResult(name = \"id\",   column = \"ITEM_ID\"),\r\n-\t\t\t\t@FieldResult(name = \"name\", column = \"ITEM_NAME\") }) \r\n-\t\t\t}),\r\n-\r\n-\t/**\r\n-\t * This mapping specifes only few fields of the application class.\r\n-\t * \r\n-\t */ \t\t\r\n-\t@SqlResultSetMapping(name=\"MappingWithPartialFields\",\r\n-\t\tentities={@EntityResult(entityClass=SQLMapItem.class,\r\n-\t\t\tfields={\r\n-\t\t\t\t@FieldResult(name=\"id\", column=\"id\")\r\n-\t\t\t})\r\n-\t\t}),\r\n-\r\n-\t@SqlResultSetMapping(name=\"MappingWithPartialFieldsExcludingIdField\",\r\n-\t\tentities={@EntityResult(entityClass=SQLMapItem.class,\r\n-\t\t\tfields={\r\n-\t\t\t\t@FieldResult(name=\"name\", column=\"name\")\r\n-\t\t\t\t})\r\n-\t\r\n-\t\t})\r\n-})\r\n-\r\n-@Entity\r\n-@Table(name = \"SQLMAP_ITEM\")\r\n-public class SQLMapItem\r\n-\timplements Serializable\r\n-{\r\n-\r\n-\tprivate int id;\r\n-\tprivate String name;\r\n-\tprivate float  price;\r\n-\r\n-\r\n-\tprotected SQLMapItem()\r\n-\t{\r\n-\t}\r\n-\r\n-\r\n-\tpublic SQLMapItem(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\r\n-\tpublic SQLMapItem(int id, String name)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\r\n-\tpublic SQLMapItem(int id, String name, int price)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t\tthis.name = name;\r\n-\t\tthis.price = price;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String toString()\r\n-\t{\r\n-\t\treturn getId() + \":\"+getName();\r\n-\t\t//System.identityHashCode(this) + \":[\" + id + \".\" + name + \"]\";\r\n-\t}\r\n-\r\n-\r\n-\t@Id\r\n-\t@Column(name=\"ID\")\r\n-\tpublic int getId()\r\n-\t{\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id)\r\n-\t{\r\n-\t\tSystem.out.println(\"setId \" + id);\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\t@Column(name=\"NAME\")\r\n-\tpublic String getName()\r\n-\t{\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setName(String name)\r\n-\t{\r\n-\t\tSystem.out.println(\"setName \" + name);\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\r\n-\t@Column(name=\"PRICE\")\r\n-\tpublic float getPrice()\r\n-\t{\r\n-\t\treturn price;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setPrice(float price)\r\n-\t{\r\n-\t\tthis.price = price;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.*;\n+\n+\n+/** This simple domain class without any relationship is for testing basic \n+ * SQL Result Set mapping functionality.\n+ * This class uses Application Identity.\n+ * The annotation specified herein examplifies test cases of accessing\n+ * with or without identity fields, aliased column names etc. \n+ */ \n+@SqlResultSetMappings(value = {\n+\t/**\n+\t *  This mapping is the same as the native query that\n+\t *  takes a class argument.\n+\t *  <code>SELECT id,name,price FROM ITEM WHERE name='WINE'</code>\n+\t */ \t\t\n+\t@SqlResultSetMapping(name = \"MappingEquivalentToClassQuery\", \n+\t\tentities = { @EntityResult(entityClass = SQLMapItem.class) \n+\t}),\n+\n+\t/**\n+\t * This mapping is similar to the native query that takes a class argument\n+\t * but the query specifies aliases for the projection columns.\n+\t *  <code>SELECT id AS ITEM_ID,name AS ITEM_NAME FROM ITEM\n+\t *  WHERE NAME='WINE'</code>\n+\t */\t\t\t\t\n+\t@SqlResultSetMapping(name = \"MappingWithAliasedColumnName\", \n+\t\tentities = { @EntityResult(entityClass = SQLMapItem.class, \n+\t\t\tfields = {\n+\t\t\t\t@FieldResult(name = \"id\",   column = \"ITEM_ID\"),\n+\t\t\t\t@FieldResult(name = \"name\", column = \"ITEM_NAME\") }) \n+\t\t\t}),\n+\n+\t/**\n+\t * This mapping specifes only few fields of the application class.\n+\t * \n+\t */ \t\t\n+\t@SqlResultSetMapping(name=\"MappingWithPartialFields\",\n+\t\tentities={@EntityResult(entityClass=SQLMapItem.class,\n+\t\t\tfields={\n+\t\t\t\t@FieldResult(name=\"id\", column=\"id\")\n+\t\t\t})\n+\t\t}),\n+\n+\t@SqlResultSetMapping(name=\"MappingWithPartialFieldsExcludingIdField\",\n+\t\tentities={@EntityResult(entityClass=SQLMapItem.class,\n+\t\t\tfields={\n+\t\t\t\t@FieldResult(name=\"name\", column=\"name\")\n+\t\t\t\t})\n+\t\n+\t\t})\n+})\n+\n+@Entity\n+@Table(name = \"SQLMAP_ITEM\")\n+public class SQLMapItem\n+\timplements Serializable\n+{\n+\n+\tprivate int id;\n+\tprivate String name;\n+\tprivate float  price;\n+\n+\n+\tprotected SQLMapItem()\n+\t{\n+\t}\n+\n+\n+\tpublic SQLMapItem(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\n+\tpublic SQLMapItem(int id, String name)\n+\t{\n+\t\tthis.id = id;\n+\t\tthis.name = name;\n+\t}\n+\n+\n+\tpublic SQLMapItem(int id, String name, int price)\n+\t{\n+\t\tthis.id = id;\n+\t\tthis.name = name;\n+\t\tthis.price = price;\n+\t}\n+\n+\n+\tpublic String toString()\n+\t{\n+\t\treturn getId() + \":\"+getName();\n+\t\t//System.identityHashCode(this) + \":[\" + id + \".\" + name + \"]\";\n+\t}\n+\n+\n+\t@Id\n+\t@Column(name=\"ID\")\n+\tpublic int getId()\n+\t{\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id)\n+\t{\n+\t\tSystem.out.println(\"setId \" + id);\n+\t\tthis.id = id;\n+\t}\n+\n+\t@Column(name=\"NAME\")\n+\tpublic String getName()\n+\t{\n+\t\treturn name;\n+\t}\n+\n+\n+\tpublic void setName(String name)\n+\t{\n+\t\tSystem.out.println(\"setName \" + name);\n+\t\tthis.name = name;\n+\t}\n+\n+\n+\t@Column(name=\"PRICE\")\n+\tpublic float getPrice()\n+\t{\n+\t\treturn price;\n+\t}\n+\n+\n+\tpublic void setPrice(float price)\n+\t{\n+\t\tthis.price = price;\n+\t}\n+}"},{"sha":"fd546a1a3c9996df4adc6f50cebb56dbedf24aa7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-/** Exemplifies a mapping that is overwritten in orm.xml file.\r\n- * \r\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n- *\r\n- */\r\n-@SqlResultSetMapping(name=\"Overwritten by Descriptor\",\r\n-\t\tentities={\r\n-\t\t\t@EntityResult(entityClass=SQLMapOrder.class)\r\n-\t\t},\r\n-\t\tcolumns={\r\n-\t\t\t@ColumnResult(name=\"id\")\r\n-\t\t}\r\n-\t)\r\n-\r\n-@Entity\r\n-@Table(name = \"SQLMAP_ORDER\")\r\n-public class SQLMapOrder implements Serializable {\r\n-\t@Id\r\n-\tint id;\r\n-\r\n-\tint quantity;\r\n-\r\n-\t@OneToOne\r\n-\tSQLMapItem item;\r\n-\r\n-\tprotected SQLMapOrder() {\r\n-\t}\r\n-\r\n-\tpublic SQLMapOrder(int id) {\r\n-\t\tthis(id, 1);\r\n-\t}\r\n-\r\n-\tpublic SQLMapOrder(int id, int quantity) {\r\n-\t\tthis.id = id;\r\n-\t\tthis.quantity = 1;\r\n-\t\tthis.item = null;\r\n-\t}\r\n-\r\n-\tpublic SQLMapItem getItem() {\r\n-\t\treturn item;\r\n-\t}\r\n-\r\n-\tpublic void setItem(SQLMapItem item) {\r\n-\t\tthis.item = item;\r\n-\t}\r\n-\r\n-\tpublic int getQuantity() {\r\n-\t\treturn quantity;\r\n-\t}\r\n-\r\n-\tpublic void setQuantity(int quantity) {\r\n-\t\tthis.quantity = quantity;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t@PostLoad\r\n-\tprotected void inform() {\r\n-\t\tSystem.out.println(\"Loaded\" + this);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+/** Exemplifies a mapping that is overwritten in orm.xml file.\n+ * \n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\n+ *\n+ */\n+@SqlResultSetMapping(name=\"Overwritten by Descriptor\",\n+\t\tentities={\n+\t\t\t@EntityResult(entityClass=SQLMapOrder.class)\n+\t\t},\n+\t\tcolumns={\n+\t\t\t@ColumnResult(name=\"id\")\n+\t\t}\n+\t)\n+\n+@Entity\n+@Table(name = \"SQLMAP_ORDER\")\n+public class SQLMapOrder implements Serializable {\n+\t@Id\n+\tint id;\n+\n+\tint quantity;\n+\n+\t@OneToOne\n+\tSQLMapItem item;\n+\n+\tprotected SQLMapOrder() {\n+\t}\n+\n+\tpublic SQLMapOrder(int id) {\n+\t\tthis(id, 1);\n+\t}\n+\n+\tpublic SQLMapOrder(int id, int quantity) {\n+\t\tthis.id = id;\n+\t\tthis.quantity = 1;\n+\t\tthis.item = null;\n+\t}\n+\n+\tpublic SQLMapItem getItem() {\n+\t\treturn item;\n+\t}\n+\n+\tpublic void setItem(SQLMapItem item) {\n+\t\tthis.item = item;\n+\t}\n+\n+\tpublic int getQuantity() {\n+\t\treturn quantity;\n+\t}\n+\n+\tpublic void setQuantity(int quantity) {\n+\t\tthis.quantity = quantity;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\t@PostLoad\n+\tprotected void inform() {\n+\t\tSystem.out.println(\"Loaded\" + this);\n+\t}\n+}"},{"sha":"652cd93a705638e69e5cc4341b447f645561c710","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-/** \r\n- * @author ppoddar\r\n- *\r\n- */\r\n-\r\n-@SqlResultSetMapping (name=\"MappingWithSelfJoin\",\r\n-\t\tcolumns={\r\n-\t\t\t@ColumnResult(name=\"MY_NAME\"),\r\n-\t\t\t@ColumnResult(name=\"PARTNER_NAME\")\r\n-\t\t}\r\n-)\r\n-@Entity\r\n-@Table(name = \"SQLMAP_PERSON\")\r\n-public class SQLMapPerson implements Serializable {\r\n-\tprivate String name;\r\n-\tprivate SQLMapAddress address;\r\n-\tprivate SQLMapPerson partner;\r\n-\r\n-\r\n-\tprotected SQLMapPerson() {\r\n-\t}\r\n-\r\n-\tpublic SQLMapPerson(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic SQLMapPerson(String name, SQLMapAddress address) {\r\n-\t\tthis.name = name;\r\n-\t\tsetAddress(address);\r\n-\t}\r\n-\r\n-\t@Id\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\t\r\n-\t@OneToOne(cascade=CascadeType.ALL)\r\n-\t@JoinColumn(name=\"ADDRESS_ID\")\r\n-\tpublic SQLMapAddress getAddress() {\r\n-\t\treturn address;\r\n-\t}\r\n-\r\n-\tpublic void setAddress(SQLMapAddress address) {\r\n-\t\tthis.address = address;\r\n-\t}\r\n-\r\n-\r\n-\t@OneToOne\r\n-\tpublic SQLMapPerson getPartner() {\r\n-\t\treturn partner;\r\n-\t}\r\n-\r\n-\tpublic void setPartner(SQLMapPerson partner) {\r\n-\t\tthis.partner = partner;\r\n-\t}\r\n-//\t@PostLoad\r\n-//\tprotected void inform() {\r\n-//\t\tSystem.out.println(\"Loaded\" + this);\r\n-//\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+/** \n+ * @author ppoddar\n+ *\n+ */\n+\n+@SqlResultSetMapping (name=\"MappingWithSelfJoin\",\n+\t\tcolumns={\n+\t\t\t@ColumnResult(name=\"MY_NAME\"),\n+\t\t\t@ColumnResult(name=\"PARTNER_NAME\")\n+\t\t}\n+)\n+@Entity\n+@Table(name = \"SQLMAP_PERSON\")\n+public class SQLMapPerson implements Serializable {\n+\tprivate String name;\n+\tprivate SQLMapAddress address;\n+\tprivate SQLMapPerson partner;\n+\n+\n+\tprotected SQLMapPerson() {\n+\t}\n+\n+\tpublic SQLMapPerson(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic SQLMapPerson(String name, SQLMapAddress address) {\n+\t\tthis.name = name;\n+\t\tsetAddress(address);\n+\t}\n+\n+\t@Id\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\t@OneToOne(cascade=CascadeType.ALL)\n+\t@JoinColumn(name=\"ADDRESS_ID\")\n+\tpublic SQLMapAddress getAddress() {\n+\t\treturn address;\n+\t}\n+\n+\tpublic void setAddress(SQLMapAddress address) {\n+\t\tthis.address = address;\n+\t}\n+\n+\n+\t@OneToOne\n+\tpublic SQLMapPerson getPartner() {\n+\t\treturn partner;\n+\t}\n+\n+\tpublic void setPartner(SQLMapPerson partner) {\n+\t\tthis.partner = partner;\n+\t}\n+//\t@PostLoad\n+//\tprotected void inform() {\n+//\t\tSystem.out.println(\"Loaded\" + this);\n+//\t}\n+}"},{"sha":"f87f5d32727a60b5f26ce753b8fa4c90d3cd7377","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","status":"modified","additions":191,"deletions":191,"changes":382,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,191 +1,191 @@\n-/*\r\n- * BaseJDBCTest.java\r\n- *\r\n- * Created on October 9, 2006, 12:56 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-import java.beans.BeanInfo;\r\n-import java.beans.Introspector;\r\n-import java.beans.PropertyDescriptor;\r\n-import java.lang.reflect.InvocationTargetException;\r\n-import java.lang.reflect.Method;\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.*;\r\n-import javax.management.IntrospectionException;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-\r\n-public class BaseJDBCTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase{\r\n-    \r\n-    \r\n-    private static Map _sysprops = new HashMap();\r\n-    \r\n-    \r\n-    /** Creates a new instance of BaseJDBCTest */\r\n-    public BaseJDBCTest() {\r\n-    }\r\n-    \r\n-    public BaseJDBCTest(String name) \r\n-    {\r\n-        super(name, \"jdbccactusapp\");\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String defaultPersistenceXmlResource() {\r\n-        return \"org/apache/openjpa/persistence/jdbc/common\" +\r\n-            \"/apps/META-INF/persistence.xml\";\r\n-    }\r\n-    \r\n-    protected OpenJPAEntityManager getPM() {\r\n-        return (OpenJPAEntityManager)currentEntityManager();\r\n-    }\r\n-    \r\n-    protected OpenJPAEntityManager getPM(boolean optimistic,boolean retainValues) {\r\n-        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-        em.setNontransactionalRead(true);\r\n-        em.setRetainState(retainValues);\r\n-        em.setOptimistic(optimistic);\r\n-        return em;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Delete all instances of the given class.\r\n-     */\r\n-    protected  int deleteAll(Broker broker, Class clazz) {\r\n-        return deleteAll(broker, clazz, true);\r\n-    }\r\n-    \r\n-    /**\r\n-     * Delete all instances of the given class.\r\n-     */\r\n-    protected int deleteAll(Broker broker, Class clazz,\r\n-            boolean subclasses) {\r\n-        final boolean useDeleteByQuery = false;\r\n-        \r\n-        if (useDeleteByQuery) {\r\n-            org.apache.openjpa.kernel.Query query = broker.newQuery(\r\n-                    JPQLParser.LANG_JPQL, clazz, \"\");\r\n-            query.setCandidateType(clazz, subclasses);\r\n-            return (int) query.deleteAll();\r\n-        } else {\r\n-            org.apache.openjpa.kernel.Extent extent =\r\n-                    broker.newExtent(clazz, subclasses);\r\n-            List list = extent.list();\r\n-            int size = list.size();\r\n-            broker.deleteAll(list, null);\r\n-            return size;\r\n-        }\r\n-    }\r\n-    \r\n-    /**\r\n-     * Delete all instances of the given class.\r\n-     */\r\n-    protected int deleteAll(OpenJPAEntityManager pm, Class clazz) {\r\n-        return deleteAll(JPAFacadeHelper.toBroker(pm), clazz);\r\n-    }\r\n-    \r\n-    /**\r\n-     * Delete all instances of the given class.\r\n-     */\r\n-    protected int deleteAll(OpenJPAEntityManager pm, Class clazz,\r\n-            boolean subclasses) {\r\n-        return deleteAll(JPAFacadeHelper.toBroker(pm), clazz, subclasses);\r\n-    }\r\n-    \r\n-    \r\n-    protected Object persist(Object ob) {\r\n-        Broker broker = getBrokerFactory().newBroker();\r\n-        broker.begin();\r\n-        broker.persist(ob, null);\r\n-        Object id = broker.getObjectId(ob);\r\n-        broker.commit();\r\n-        broker.close();\r\n-        return id;\r\n-    }\r\n-    \r\n-    protected Properties getProperties() {\r\n-        return getProperties(null);\r\n-    }\r\n-    \r\n-    /**\r\n-     * Return the runtime properties, optionally overriding or setting\r\n-     * some via the given array, which should be in the form\r\n-     * { key, val, key, val, ... }.\r\n-     */\r\n-    protected synchronized Properties getProperties(String[] props) {\r\n-        Properties p = new Properties(System.getProperties());\r\n-        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\r\n-        if (str != null && str.length() > 0) {\r\n-            // cache system properties to reduce load on file system\r\n-            Properties loaded = (Properties) _sysprops.get(str);\r\n-            if (loaded == null) {\r\n-                loaded = new Properties();\r\n-                ConfigurationProvider cp = (ConfigurationProvider) Configurations.getProperty(str, null);\r\n-                \r\n-                if (cp != null)\r\n-                    loaded.putAll(cp.getProperties());\r\n-                _sysprops.put(str, loaded);\r\n-            }\r\n-            p.putAll(loaded);\r\n-        }\r\n-        \r\n-        for (int i = 0; props != null && i < props.length; i += 2) {\r\n-            if (props[i + 1] != null) {\r\n-                // remove any duplicate kodo/openjpa property so we don't clash\r\n-                if (props[i].startsWith(\"openjpa.\"))\r\n-                    p.remove(\"openjpa.\" + props[i].substring(5));\r\n-                else if (props[i].startsWith(\"openjpa.\"))\r\n-                    p.remove(\"openjpa.\" + props[i].substring(8));\r\n-                \r\n-                p.setProperty(props[i], props[i + 1]);\r\n-            } else {\r\n-                p.remove(props[i]);\r\n-            }\r\n-        }\r\n-        return p;\r\n-    }\r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n-}\r\n+/*\n+ * BaseJDBCTest.java\n+ *\n+ * Created on October 9, 2006, 12:56 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.*;\n+import javax.management.IntrospectionException;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+\n+public class BaseJDBCTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase{\n+    \n+    \n+    private static Map _sysprops = new HashMap();\n+    \n+    \n+    /** Creates a new instance of BaseJDBCTest */\n+    public BaseJDBCTest() {\n+    }\n+    \n+    public BaseJDBCTest(String name) \n+    {\n+        super(name, \"jdbccactusapp\");\n+    }\n+\n+    @Override\n+    protected String defaultPersistenceXmlResource() {\n+        return \"org/apache/openjpa/persistence/jdbc/common\" +\n+            \"/apps/META-INF/persistence.xml\";\n+    }\n+    \n+    protected OpenJPAEntityManager getPM() {\n+        return (OpenJPAEntityManager)currentEntityManager();\n+    }\n+    \n+    protected OpenJPAEntityManager getPM(boolean optimistic,boolean retainValues) {\n+        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+        em.setNontransactionalRead(true);\n+        em.setRetainState(retainValues);\n+        em.setOptimistic(optimistic);\n+        return em;\n+    }\n+    \n+    /**\n+     * Delete all instances of the given class.\n+     */\n+    protected  int deleteAll(Broker broker, Class clazz) {\n+        return deleteAll(broker, clazz, true);\n+    }\n+    \n+    /**\n+     * Delete all instances of the given class.\n+     */\n+    protected int deleteAll(Broker broker, Class clazz,\n+            boolean subclasses) {\n+        final boolean useDeleteByQuery = false;\n+        \n+        if (useDeleteByQuery) {\n+            org.apache.openjpa.kernel.Query query = broker.newQuery(\n+                    JPQLParser.LANG_JPQL, clazz, \"\");\n+            query.setCandidateType(clazz, subclasses);\n+            return (int) query.deleteAll();\n+        } else {\n+            org.apache.openjpa.kernel.Extent extent =\n+                    broker.newExtent(clazz, subclasses);\n+            List list = extent.list();\n+            int size = list.size();\n+            broker.deleteAll(list, null);\n+            return size;\n+        }\n+    }\n+    \n+    /**\n+     * Delete all instances of the given class.\n+     */\n+    protected int deleteAll(OpenJPAEntityManager pm, Class clazz) {\n+        return deleteAll(JPAFacadeHelper.toBroker(pm), clazz);\n+    }\n+    \n+    /**\n+     * Delete all instances of the given class.\n+     */\n+    protected int deleteAll(OpenJPAEntityManager pm, Class clazz,\n+            boolean subclasses) {\n+        return deleteAll(JPAFacadeHelper.toBroker(pm), clazz, subclasses);\n+    }\n+    \n+    \n+    protected Object persist(Object ob) {\n+        Broker broker = getBrokerFactory().newBroker();\n+        broker.begin();\n+        broker.persist(ob, null);\n+        Object id = broker.getObjectId(ob);\n+        broker.commit();\n+        broker.close();\n+        return id;\n+    }\n+    \n+    protected Properties getProperties() {\n+        return getProperties(null);\n+    }\n+    \n+    /**\n+     * Return the runtime properties, optionally overriding or setting\n+     * some via the given array, which should be in the form\n+     * { key, val, key, val, ... }.\n+     */\n+    protected synchronized Properties getProperties(String[] props) {\n+        Properties p = new Properties(System.getProperties());\n+        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\n+        if (str != null && str.length() > 0) {\n+            // cache system properties to reduce load on file system\n+            Properties loaded = (Properties) _sysprops.get(str);\n+            if (loaded == null) {\n+                loaded = new Properties();\n+                ConfigurationProvider cp = (ConfigurationProvider) Configurations.getProperty(str, null);\n+                \n+                if (cp != null)\n+                    loaded.putAll(cp.getProperties());\n+                _sysprops.put(str, loaded);\n+            }\n+            p.putAll(loaded);\n+        }\n+        \n+        for (int i = 0; props != null && i < props.length; i += 2) {\n+            if (props[i + 1] != null) {\n+                // remove any duplicate kodo/openjpa property so we don't clash\n+                if (props[i].startsWith(\"openjpa.\"))\n+                    p.remove(\"openjpa.\" + props[i].substring(5));\n+                else if (props[i].startsWith(\"openjpa.\"))\n+                    p.remove(\"openjpa.\" + props[i].substring(8));\n+                \n+                p.setProperty(props[i], props[i + 1]);\n+            } else {\n+                p.remove(props[i]);\n+            }\n+        }\n+        return p;\n+    }\n+    \n+    \n+    \n+    \n+    \n+}"},{"sha":"6e03bd59b75cc3664d2d90d44cf56aaed6d85a07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,72 +1,72 @@\n-/*\r\n- * JDBCTestCase.java\r\n- *\r\n- * Created on September 29, 2006, 3:23 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import java.util.*;\r\n-import org.apache.openjpa.conf.*;\r\n-import org.apache.openjpa.util.*;\r\n-import org.apache.openjpa.kernel.*;\r\n-import org.apache.openjpa.jdbc.conf.*;\r\n-import org.apache.openjpa.jdbc.kernel.*;\r\n-import org.apache.openjpa.jdbc.meta.*;\r\n-import org.apache.openjpa.jdbc.meta.strats.*;\r\n-\r\n-\r\n-\r\n-\r\n-public abstract class JDBCTestCase extends BaseJDBCTest {\r\n-    \r\n-    /** Creates a new instance of JDBCTestCase */\r\n-    public JDBCTestCase() {\r\n-    }\r\n-    \r\n-    public JDBCTestCase(String name) {\r\n-        super(name);\r\n-    }\r\n-    public Class getDefaultInheritanceStrategy() {\r\n-        return getClassMapping(RuntimeTest2.class).getStrategy().getClass();\r\n-    }\r\n-\r\n-    public ClassMapping getClassMapping(Class c) {\r\n-        \r\n-        OpenJPAConfiguration jdoConf = getConfiguration();\r\n-        return ((JDBCConfiguration) jdoConf).getMappingRepositoryInstance().\r\n-            getMapping(c, getClass().getClassLoader(), true);\r\n-    }\r\n-\r\n-    public FieldMapping getFieldMapping(Class c, String field) {\r\n-        return getClassMapping(c).getFieldMapping(field);\r\n-    }\r\n-\r\n-    public boolean isInheritanceStrategyVertical() {\r\n-        return VerticalClassStrategy.class.\r\n-            isAssignableFrom(getDefaultInheritanceStrategy());\r\n-    }\r\n-}\r\n+/*\n+ * JDBCTestCase.java\n+ *\n+ * Created on September 29, 2006, 3:23 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import java.util.*;\n+import org.apache.openjpa.conf.*;\n+import org.apache.openjpa.util.*;\n+import org.apache.openjpa.kernel.*;\n+import org.apache.openjpa.jdbc.conf.*;\n+import org.apache.openjpa.jdbc.kernel.*;\n+import org.apache.openjpa.jdbc.meta.*;\n+import org.apache.openjpa.jdbc.meta.strats.*;\n+\n+\n+\n+\n+public abstract class JDBCTestCase extends BaseJDBCTest {\n+    \n+    /** Creates a new instance of JDBCTestCase */\n+    public JDBCTestCase() {\n+    }\n+    \n+    public JDBCTestCase(String name) {\n+        super(name);\n+    }\n+    public Class getDefaultInheritanceStrategy() {\n+        return getClassMapping(RuntimeTest2.class).getStrategy().getClass();\n+    }\n+\n+    public ClassMapping getClassMapping(Class c) {\n+        \n+        OpenJPAConfiguration jdoConf = getConfiguration();\n+        return ((JDBCConfiguration) jdoConf).getMappingRepositoryInstance().\n+            getMapping(c, getClass().getClassLoader(), true);\n+    }\n+\n+    public FieldMapping getFieldMapping(Class c, String field) {\n+        return getClassMapping(c).getFieldMapping(field);\n+    }\n+\n+    public boolean isInheritanceStrategyVertical() {\n+        return VerticalClassStrategy.class.\n+            isAssignableFrom(getDefaultInheritanceStrategy());\n+    }\n+}"},{"sha":"d54d1b928926b83a645846765a92b17042abf1c1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","status":"modified","additions":373,"deletions":373,"changes":746,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,373 +1,373 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-/*\r\n- * TestByteArrayAppId.java\r\n- *\r\n- * Created on October 2, 2006, 10:56 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import java.util.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.jdbc.meta.MappingTool;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.kernel.Extent;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.Query;\r\n-\r\n-\r\n-public class TestByteArrayAppId extends BaseJDBCTest {\r\n-    \r\n-    private static boolean _init = false;\r\n-    private OpenJPAEntityManagerFactory _pmf = null;\r\n-    \r\n-    \r\n-    /** Creates a new instance of TestByteArrayAppId */\r\n-    public TestByteArrayAppId(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public boolean skipTest() {\r\n-        return getCurrentPlatform() != AbstractTestCase.Platform.DB2;\r\n-    }\r\n-    \r\n-    public void setUp()\r\n-    throws Exception {\r\n-        // we have to use getbytes/setbytes for byte arrays to work properly\r\n-        _pmf =(OpenJPAEntityManagerFactory) getEmf(getProps());\r\n-        \r\n-        if (!_init) {\r\n-            initialize((JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(_pmf)).getConfiguration());\r\n-            _init = true;\r\n-        }\r\n-        EntityManager pm = _pmf.createEntityManager();\r\n-        startTx(pm);\r\n-        \r\n-       deleteAll(ByteArrayPKPC.class,pm);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-        pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        ByteArrayPKPC2 testBytes = new ByteArrayPKPC2(new byte[]{ 1, 2 },\r\n-                \"child\");\r\n-        testBytes.setSubfield(\"sub\");\r\n-        testBytes.setParent(new ByteArrayPKPC(new byte[]{ 3, 4 }, \"parent\"));\r\n-        pm.persist(testBytes);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void tearDown()\r\n-    throws Exception {\r\n-        // closing the pmf every time slows things down too much b/c\r\n-        // schema reflection is so slow on DB2\r\n-        //\ttry { _pmf.close (); } catch (Exception e) {}\r\n-        \r\n-        super.tearDown();\r\n-    }\r\n-    \r\n-    private void initialize(JDBCConfiguration conf)\r\n-    throws Exception {\r\n-        \r\n-        EntityManager em= currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        //JDBCConfiguration conf = (JDBCConfiguration) kem.getConfiguration();        \r\n-        \r\n-        MappingTool tool = new MappingTool((JDBCConfiguration)\r\n-        \t\t((OpenJPAEntityManagerSPI) kem).getConfiguration(), MappingTool.ACTION_REFRESH, false);\r\n-        tool.run(ByteArrayPKPC.class);\r\n-        tool.run(ByteArrayPKPC2.class);\r\n-        tool.record();\r\n-    }\r\n-    \r\n-    /**\r\n-     * Tests that application identity classes are returned correctly.\r\n-     */\r\n-    public void testGetObjectIdClass() {\r\n-        EntityManager em= currentEntityManager();\r\n-        OpenJPAEntityManager pm = OpenJPAPersistence.cast (em);\r\n-\r\n-        \r\n-        assertEquals(ByteArrayPKPCId.class,\r\n-                pm.getObjectIdClass(ByteArrayPKPC.class));\r\n-        assertEquals(ByteArrayPKPCId.class,\r\n-                pm.getObjectIdClass(ByteArrayPKPC2.class));\r\n-        pm.close();\r\n-        em.close();\r\n-    }\r\n-    \r\n-    /**\r\n-     * Tests finding an instance by a manually-created id value.\r\n-     */\r\n-    public void testGetSubclassObjectById() {\r\n-        ByteArrayPKPC2 bytes2 = getChild();\r\n-        assertNotNull(bytes2);\r\n-        assertEquals(1, bytes2.getPK()[0]);\r\n-        assertEquals(2, bytes2.getPK()[1]);\r\n-        assertEquals(\"child\", bytes2.getStringField());\r\n-        assertEquals(\"sub\", bytes2.getSubfield());\r\n-        assertNotNull(bytes2.getParent());\r\n-        assertEquals(3, bytes2.getParent().getPK()[0]);\r\n-        assertEquals(4, bytes2.getParent().getPK()[1]);\r\n-        assertEquals(\"parent\", bytes2.getParent().getStringField());\r\n-        assertNull(bytes2.getParent().getParent());\r\n-        //FIXME next line commented \r\n-        //JDOHelper.getPersistenceManager(bytes2).close();\r\n-    }\r\n-    \r\n-    /**\r\n-     * Tests finding an instance by a manually-created id value.\r\n-     */\r\n-    public void testGetObjectById() {\r\n-        ByteArrayPKPC bytes = getParent();\r\n-        assertNotNull(bytes);\r\n-        assertEquals(3, bytes.getPK()[0]);\r\n-        assertEquals(4, bytes.getPK()[1]);\r\n-        assertEquals(\"parent\", bytes.getStringField());\r\n-        assertNull(bytes.getParent());\r\n-        //FIXME next line commented \r\n-        //JDOHelper.getPersistenceManager(bytes).close();\r\n-    }\r\n-    \r\n-    /**\r\n-     * Tests that the oid instances returned from the pm are copied to\r\n-     * prevent by-reference modification by the user.\r\n-     */\r\n-    public void testGetObjectId() {\r\n-        \r\n-        EntityManager em= currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        if (! ((OpenJPAEntityManagerSPI) kem).getConfiguration().getCompatibilityInstance().getCopyObjectIds())\r\n-            return;\r\n-        \r\n-        ByteArrayPKPCId oid = new ByteArrayPKPCId();\r\n-        oid.pk = new byte[]{ 1, 2 };\r\n-        ByteArrayPKPC bytes = (ByteArrayPKPC) kem.getObjectId(oid);\r\n-        ByteArrayPKPCId oidCopy = (ByteArrayPKPCId) kem.getObjectId(bytes);\r\n-        assertTrue(\"Oid not copied.\", oid != oidCopy);\r\n-        assertEquals(1, oidCopy.pk[0]);\r\n-        assertEquals(2, oidCopy.pk[1]);\r\n-        \r\n-        em.close();\r\n-        kem.close();\r\n-    }\r\n-    \r\n-    /**\r\n-     * Tests that changing primary key values will fail.\r\n-     */\r\n-    public void testChangeIdentity() {\r\n-        ByteArrayPKPC2 bytes = getChild();\r\n-        OpenJPAEntityManager pm = OpenJPAPersistence.getEntityManager(bytes);\r\n-        startTx(pm);\r\n-        \r\n-        // make sure setting to same value is OK\r\n-        bytes.setPK(bytes.getPK());\r\n-        try {\r\n-            bytes.setPK(new byte[]{ 5, 6 });\r\n-            fail(\"Allowed changing of pk.\");\r\n-        } catch (Exception je) {\r\n-        }\r\n-        rollbackTx(pm);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    /**\r\n-     * Tests that pk fields are retained on state transition to hollow.\r\n-     */\r\n-    public void testPKRetain() {\r\n-        ByteArrayPKPC2 bytes = getChild();\r\n-        OpenJPAEntityManager pm = OpenJPAPersistence.getEntityManager(bytes);\r\n-        \r\n-        //FIXME next line commented .... need substitute API\r\n-        //pm.currentTransaction().setNontransactionalRead(false);\r\n-        \r\n-        startTx(pm);\r\n-        bytes.setParent(null);\r\n-        endTx(pm);        \r\n-        \r\n-        // bytes should still allow access to oid fields\r\n-        assertEquals(1, bytes.getPK()[0]);\r\n-        assertEquals(2, bytes.getPK()[1]);\r\n-        try {\r\n-            bytes.getParent();\r\n-            fail(\"Allowed read of non-pk value outside of transaction.\");\r\n-        } catch (Exception je) {\r\n-        }\r\n-        try {\r\n-            bytes.setPK(new byte[]{ 5, 6 });\r\n-            fail(\"Allowed setting of pk value outside of transaction.\");\r\n-        } catch (Exception je) {\r\n-        }\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testDeleteAndInsert() {\r\n-        EntityManager em= currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        \r\n-        startTx(kem);\r\n-       \r\n-        for (int i = 0; i < 20; i++) {\r\n-            ByteArrayPKPC bytes = new ByteArrayPKPC(new byte[]\r\n-            { (byte) (i + 5), (byte) (i + 6) }, String.valueOf(i));\r\n-            kem.persist(bytes);\r\n-        }\r\n-        endTx(kem);        \r\n-        \r\n-        kem.close();\r\n-        \r\n-        kem = _pmf.createEntityManager();\r\n-        startTx(kem);\r\n-        Extent extent = (Extent) kem.createExtent(ByteArrayPKPC.class,false);\r\n-        kem.detachAll(extent.list());\r\n-        extent.closeAll();\r\n-        \r\n-        ByteArrayPKPC owner = new ByteArrayPKPC();\r\n-        kem.persist(owner);\r\n-        owner.setPK(new byte[]{ 100, 101 });\r\n-        owner.setStringField(\"owner\");\r\n-        \r\n-        // make new instances with same oids persistent\r\n-        for (int i = 0; i < 20; i++) {\r\n-            ByteArrayPKPC bytes = new ByteArrayPKPC(new byte[]\r\n-            { (byte) (i + 5), (byte) (i + 6) }, String.valueOf(i));\r\n-            kem.persist(bytes);\r\n-            assertEquals(bytes, getStateManager(bytes, kem).getManagedInstance());\r\n-            owner.getRels().add(bytes);\r\n-        }\r\n-        \r\n-        endTx(kem);  \r\n-        \r\n-        Object oid = kem.getObjectId(owner);\r\n-        assertOwner(kem, oid);\r\n-        kem.close();\r\n-        \r\n-        kem = _pmf.createEntityManager();\r\n-        assertOwner(kem, oid);\r\n-        em.close();\r\n-        kem.close();\r\n-    }\r\n-    \r\n-    public void testQuery() {\r\n-        EntityManager pm = _pmf.createEntityManager();\r\n-        //FIXME jthomas - partly commented \r\n-        //Query q = pm.newQuery(ByteArrayPKPC.class, \"pk == bytes\");\r\n-        Query q =null;//= pm.newQuery(ByteArrayPKPC.class, \"pk == bytes\");\r\n-        q.declareParameters(\"byte[] bytes\");\r\n-        //FIXME jthomas - no execute for byte \r\n-        //Collection results = (Collection) q.execute(new byte[]{ 1, 2 });\r\n-        Collection results =null;//= (Collection) q.execute(new byte[]{ 1, 2 });\r\n-        assertEquals(1, results.size());\r\n-        ByteArrayPKPC2 child = (ByteArrayPKPC2) results.iterator().next();\r\n-        assertEquals(\"child\", child.getStringField());\r\n-        q.closeAll();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testConflictingIds() {\r\n-        OpenJPAEntityManager pm = _pmf.createEntityManager();\r\n-        startTx(pm);     \r\n-        \r\n-        // make a bunch of objects persistent with the same initial pk values\r\n-        ByteArrayPKPC owner = new ByteArrayPKPC();\r\n-        pm.persist(owner);\r\n-        owner.setPK(new byte[]{ 100, 101 });\r\n-        owner.setStringField(\"owner\");\r\n-        for (int i = 0; i < 20; i++) {\r\n-            ByteArrayPKPC bytes = new ByteArrayPKPC();\r\n-            pm.persist(bytes);\r\n-            assertEquals(bytes, getStateManager(bytes, pm).\r\n-                    getManagedInstance());\r\n-            bytes.setPK(new byte[]{ (byte) (i + 5), (byte) (i + 6) });\r\n-            bytes.setStringField(String.valueOf(i));\r\n-            owner.getRels().add(bytes);\r\n-        }\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(owner);\r\n-        assertOwner(pm, oid);\r\n-        pm.close();\r\n-        \r\n-        pm = _pmf.createEntityManager();\r\n-        assertOwner(pm, oid);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void assertOwner(OpenJPAEntityManager pm, Object oid) {\r\n-        ByteArrayPKPC owner = (ByteArrayPKPC) pm.getObjectId(oid);\r\n-        assertEquals(100, owner.getPK()[0]);\r\n-        assertEquals(101, owner.getPK()[1]);\r\n-        assertEquals(\"owner\", owner.getStringField());\r\n-        List rels = owner.getRels();\r\n-        assertEquals(20, rels.size());\r\n-        for (int i = 0; i < rels.size(); i++) {\r\n-            ByteArrayPKPC bytes = (ByteArrayPKPC) rels.get(i);\r\n-            assertEquals(i + 5, bytes.getPK()[0]);\r\n-            assertEquals(i + 6, bytes.getPK()[1]);\r\n-            assertEquals(String.valueOf(i), bytes.getStringField());\r\n-        }\r\n-    }\r\n-    \r\n-    private ByteArrayPKPC getParent() {\r\n-        ByteArrayPKPCId oid = new ByteArrayPKPCId();\r\n-        oid.pk = new byte[]{ 3, 4 };\r\n-        OpenJPAEntityManager pm = _pmf.createEntityManager();\r\n-        return (ByteArrayPKPC) pm.getObjectId(oid);\r\n-    }\r\n-    \r\n-    private ByteArrayPKPC2 getChild() {\r\n-        ByteArrayPKPCId oid = new ByteArrayPKPCId();\r\n-        oid.pk = new byte[]{ 1, 2 };\r\n-        OpenJPAEntityManager pm = _pmf.createEntityManager();\r\n-        return (ByteArrayPKPC2) pm.getObjectId(oid);\r\n-    }\r\n-    \r\n-    public static void main(String[] args) {\r\n-       // main();\r\n-    }\r\n-    \r\n-    private Map getProps() {\r\n-        Map props=new HashMap();\r\n-        props.put(\"openjpa.jdbc.DBDictionary\", \"\");\r\n-        props.put(\"UseGetBytesForBlobs\", \"true\");\r\n-        props.put(\"UseSetBytesForBlobs\", \"true\");\r\n-        props.put(\"BatchLimit\", \"0\");\r\n-        \r\n-        return props;\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+/*\n+ * TestByteArrayAppId.java\n+ *\n+ * Created on October 2, 2006, 10:56 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import java.util.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.jdbc.meta.MappingTool;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.kernel.Extent;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.Query;\n+\n+\n+public class TestByteArrayAppId extends BaseJDBCTest {\n+    \n+    private static boolean _init = false;\n+    private OpenJPAEntityManagerFactory _pmf = null;\n+    \n+    \n+    /** Creates a new instance of TestByteArrayAppId */\n+    public TestByteArrayAppId(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public boolean skipTest() {\n+        return getCurrentPlatform() != AbstractTestCase.Platform.DB2;\n+    }\n+    \n+    public void setUp()\n+    throws Exception {\n+        // we have to use getbytes/setbytes for byte arrays to work properly\n+        _pmf =(OpenJPAEntityManagerFactory) getEmf(getProps());\n+        \n+        if (!_init) {\n+            initialize((JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(_pmf)).getConfiguration());\n+            _init = true;\n+        }\n+        EntityManager pm = _pmf.createEntityManager();\n+        startTx(pm);\n+        \n+       deleteAll(ByteArrayPKPC.class,pm);\n+        endTx(pm);\n+        pm.close();\n+        pm = currentEntityManager();\n+        startTx(pm);\n+        ByteArrayPKPC2 testBytes = new ByteArrayPKPC2(new byte[]{ 1, 2 },\n+                \"child\");\n+        testBytes.setSubfield(\"sub\");\n+        testBytes.setParent(new ByteArrayPKPC(new byte[]{ 3, 4 }, \"parent\"));\n+        pm.persist(testBytes);\n+        endTx(pm);\n+        pm.close();\n+    }\n+    \n+    public void tearDown()\n+    throws Exception {\n+        // closing the pmf every time slows things down too much b/c\n+        // schema reflection is so slow on DB2\n+        //\ttry { _pmf.close (); } catch (Exception e) {}\n+        \n+        super.tearDown();\n+    }\n+    \n+    private void initialize(JDBCConfiguration conf)\n+    throws Exception {\n+        \n+        EntityManager em= currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        //JDBCConfiguration conf = (JDBCConfiguration) kem.getConfiguration();        \n+        \n+        MappingTool tool = new MappingTool((JDBCConfiguration)\n+        \t\t((OpenJPAEntityManagerSPI) kem).getConfiguration(), MappingTool.ACTION_REFRESH, false);\n+        tool.run(ByteArrayPKPC.class);\n+        tool.run(ByteArrayPKPC2.class);\n+        tool.record();\n+    }\n+    \n+    /**\n+     * Tests that application identity classes are returned correctly.\n+     */\n+    public void testGetObjectIdClass() {\n+        EntityManager em= currentEntityManager();\n+        OpenJPAEntityManager pm = OpenJPAPersistence.cast (em);\n+\n+        \n+        assertEquals(ByteArrayPKPCId.class,\n+                pm.getObjectIdClass(ByteArrayPKPC.class));\n+        assertEquals(ByteArrayPKPCId.class,\n+                pm.getObjectIdClass(ByteArrayPKPC2.class));\n+        pm.close();\n+        em.close();\n+    }\n+    \n+    /**\n+     * Tests finding an instance by a manually-created id value.\n+     */\n+    public void testGetSubclassObjectById() {\n+        ByteArrayPKPC2 bytes2 = getChild();\n+        assertNotNull(bytes2);\n+        assertEquals(1, bytes2.getPK()[0]);\n+        assertEquals(2, bytes2.getPK()[1]);\n+        assertEquals(\"child\", bytes2.getStringField());\n+        assertEquals(\"sub\", bytes2.getSubfield());\n+        assertNotNull(bytes2.getParent());\n+        assertEquals(3, bytes2.getParent().getPK()[0]);\n+        assertEquals(4, bytes2.getParent().getPK()[1]);\n+        assertEquals(\"parent\", bytes2.getParent().getStringField());\n+        assertNull(bytes2.getParent().getParent());\n+        //FIXME next line commented \n+        //JDOHelper.getPersistenceManager(bytes2).close();\n+    }\n+    \n+    /**\n+     * Tests finding an instance by a manually-created id value.\n+     */\n+    public void testGetObjectById() {\n+        ByteArrayPKPC bytes = getParent();\n+        assertNotNull(bytes);\n+        assertEquals(3, bytes.getPK()[0]);\n+        assertEquals(4, bytes.getPK()[1]);\n+        assertEquals(\"parent\", bytes.getStringField());\n+        assertNull(bytes.getParent());\n+        //FIXME next line commented \n+        //JDOHelper.getPersistenceManager(bytes).close();\n+    }\n+    \n+    /**\n+     * Tests that the oid instances returned from the pm are copied to\n+     * prevent by-reference modification by the user.\n+     */\n+    public void testGetObjectId() {\n+        \n+        EntityManager em= currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        if (! ((OpenJPAEntityManagerSPI) kem).getConfiguration().getCompatibilityInstance().getCopyObjectIds())\n+            return;\n+        \n+        ByteArrayPKPCId oid = new ByteArrayPKPCId();\n+        oid.pk = new byte[]{ 1, 2 };\n+        ByteArrayPKPC bytes = (ByteArrayPKPC) kem.getObjectId(oid);\n+        ByteArrayPKPCId oidCopy = (ByteArrayPKPCId) kem.getObjectId(bytes);\n+        assertTrue(\"Oid not copied.\", oid != oidCopy);\n+        assertEquals(1, oidCopy.pk[0]);\n+        assertEquals(2, oidCopy.pk[1]);\n+        \n+        em.close();\n+        kem.close();\n+    }\n+    \n+    /**\n+     * Tests that changing primary key values will fail.\n+     */\n+    public void testChangeIdentity() {\n+        ByteArrayPKPC2 bytes = getChild();\n+        OpenJPAEntityManager pm = OpenJPAPersistence.getEntityManager(bytes);\n+        startTx(pm);\n+        \n+        // make sure setting to same value is OK\n+        bytes.setPK(bytes.getPK());\n+        try {\n+            bytes.setPK(new byte[]{ 5, 6 });\n+            fail(\"Allowed changing of pk.\");\n+        } catch (Exception je) {\n+        }\n+        rollbackTx(pm);\n+        pm.close();\n+    }\n+    \n+    /**\n+     * Tests that pk fields are retained on state transition to hollow.\n+     */\n+    public void testPKRetain() {\n+        ByteArrayPKPC2 bytes = getChild();\n+        OpenJPAEntityManager pm = OpenJPAPersistence.getEntityManager(bytes);\n+        \n+        //FIXME next line commented .... need substitute API\n+        //pm.currentTransaction().setNontransactionalRead(false);\n+        \n+        startTx(pm);\n+        bytes.setParent(null);\n+        endTx(pm);        \n+        \n+        // bytes should still allow access to oid fields\n+        assertEquals(1, bytes.getPK()[0]);\n+        assertEquals(2, bytes.getPK()[1]);\n+        try {\n+            bytes.getParent();\n+            fail(\"Allowed read of non-pk value outside of transaction.\");\n+        } catch (Exception je) {\n+        }\n+        try {\n+            bytes.setPK(new byte[]{ 5, 6 });\n+            fail(\"Allowed setting of pk value outside of transaction.\");\n+        } catch (Exception je) {\n+        }\n+        pm.close();\n+    }\n+    \n+    public void testDeleteAndInsert() {\n+        EntityManager em= currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        \n+        startTx(kem);\n+       \n+        for (int i = 0; i < 20; i++) {\n+            ByteArrayPKPC bytes = new ByteArrayPKPC(new byte[]\n+            { (byte) (i + 5), (byte) (i + 6) }, String.valueOf(i));\n+            kem.persist(bytes);\n+        }\n+        endTx(kem);        \n+        \n+        kem.close();\n+        \n+        kem = _pmf.createEntityManager();\n+        startTx(kem);\n+        Extent extent = (Extent) kem.createExtent(ByteArrayPKPC.class,false);\n+        kem.detachAll(extent.list());\n+        extent.closeAll();\n+        \n+        ByteArrayPKPC owner = new ByteArrayPKPC();\n+        kem.persist(owner);\n+        owner.setPK(new byte[]{ 100, 101 });\n+        owner.setStringField(\"owner\");\n+        \n+        // make new instances with same oids persistent\n+        for (int i = 0; i < 20; i++) {\n+            ByteArrayPKPC bytes = new ByteArrayPKPC(new byte[]\n+            { (byte) (i + 5), (byte) (i + 6) }, String.valueOf(i));\n+            kem.persist(bytes);\n+            assertEquals(bytes, getStateManager(bytes, kem).getManagedInstance());\n+            owner.getRels().add(bytes);\n+        }\n+        \n+        endTx(kem);  \n+        \n+        Object oid = kem.getObjectId(owner);\n+        assertOwner(kem, oid);\n+        kem.close();\n+        \n+        kem = _pmf.createEntityManager();\n+        assertOwner(kem, oid);\n+        em.close();\n+        kem.close();\n+    }\n+    \n+    public void testQuery() {\n+        EntityManager pm = _pmf.createEntityManager();\n+        //FIXME jthomas - partly commented \n+        //Query q = pm.newQuery(ByteArrayPKPC.class, \"pk == bytes\");\n+        Query q =null;//= pm.newQuery(ByteArrayPKPC.class, \"pk == bytes\");\n+        q.declareParameters(\"byte[] bytes\");\n+        //FIXME jthomas - no execute for byte \n+        //Collection results = (Collection) q.execute(new byte[]{ 1, 2 });\n+        Collection results =null;//= (Collection) q.execute(new byte[]{ 1, 2 });\n+        assertEquals(1, results.size());\n+        ByteArrayPKPC2 child = (ByteArrayPKPC2) results.iterator().next();\n+        assertEquals(\"child\", child.getStringField());\n+        q.closeAll();\n+        pm.close();\n+    }\n+    \n+    public void testConflictingIds() {\n+        OpenJPAEntityManager pm = _pmf.createEntityManager();\n+        startTx(pm);     \n+        \n+        // make a bunch of objects persistent with the same initial pk values\n+        ByteArrayPKPC owner = new ByteArrayPKPC();\n+        pm.persist(owner);\n+        owner.setPK(new byte[]{ 100, 101 });\n+        owner.setStringField(\"owner\");\n+        for (int i = 0; i < 20; i++) {\n+            ByteArrayPKPC bytes = new ByteArrayPKPC();\n+            pm.persist(bytes);\n+            assertEquals(bytes, getStateManager(bytes, pm).\n+                    getManagedInstance());\n+            bytes.setPK(new byte[]{ (byte) (i + 5), (byte) (i + 6) });\n+            bytes.setStringField(String.valueOf(i));\n+            owner.getRels().add(bytes);\n+        }\n+        endTx(pm);\n+        Object oid = pm.getObjectId(owner);\n+        assertOwner(pm, oid);\n+        pm.close();\n+        \n+        pm = _pmf.createEntityManager();\n+        assertOwner(pm, oid);\n+        pm.close();\n+    }\n+    \n+    private void assertOwner(OpenJPAEntityManager pm, Object oid) {\n+        ByteArrayPKPC owner = (ByteArrayPKPC) pm.getObjectId(oid);\n+        assertEquals(100, owner.getPK()[0]);\n+        assertEquals(101, owner.getPK()[1]);\n+        assertEquals(\"owner\", owner.getStringField());\n+        List rels = owner.getRels();\n+        assertEquals(20, rels.size());\n+        for (int i = 0; i < rels.size(); i++) {\n+            ByteArrayPKPC bytes = (ByteArrayPKPC) rels.get(i);\n+            assertEquals(i + 5, bytes.getPK()[0]);\n+            assertEquals(i + 6, bytes.getPK()[1]);\n+            assertEquals(String.valueOf(i), bytes.getStringField());\n+        }\n+    }\n+    \n+    private ByteArrayPKPC getParent() {\n+        ByteArrayPKPCId oid = new ByteArrayPKPCId();\n+        oid.pk = new byte[]{ 3, 4 };\n+        OpenJPAEntityManager pm = _pmf.createEntityManager();\n+        return (ByteArrayPKPC) pm.getObjectId(oid);\n+    }\n+    \n+    private ByteArrayPKPC2 getChild() {\n+        ByteArrayPKPCId oid = new ByteArrayPKPCId();\n+        oid.pk = new byte[]{ 1, 2 };\n+        OpenJPAEntityManager pm = _pmf.createEntityManager();\n+        return (ByteArrayPKPC2) pm.getObjectId(oid);\n+    }\n+    \n+    public static void main(String[] args) {\n+       // main();\n+    }\n+    \n+    private Map getProps() {\n+        Map props=new HashMap();\n+        props.put(\"openjpa.jdbc.DBDictionary\", \"\");\n+        props.put(\"UseGetBytesForBlobs\", \"true\");\n+        props.put(\"UseSetBytesForBlobs\", \"true\");\n+        props.put(\"BatchLimit\", \"0\");\n+        \n+        return props;\n+    }\n+    \n+    \n+}"},{"sha":"5427d8145fdd0f8e3cb8ab9541a8f2c97e1131ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","status":"modified","additions":139,"deletions":139,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,139 +1,139 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestCircularFK extends BaseJDBCTest{\r\n-    \r\n-    private Object _oid1 = null;\r\n-    private Object _oid2 = null;\r\n-    \r\n-    public TestCircularFK(String name) {\r\n-        super(name);\r\n-    }\r\n-    \r\n-    /** Creates a new instance of TestCircularFK */\r\n-    public TestCircularFK() {\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        \r\n-        startTx(pm);\r\n-       deleteAll(CircularFKPC.class,pm);\r\n-       deleteAll(CircularFKPC2.class,pm);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-        \r\n-        \r\n-        CircularFKPC pc1 = new CircularFKPC();\r\n-        pc1.setStringField(\"pc1\");\r\n-        CircularFKPC2 pc2 = new CircularFKPC2();\r\n-        pc2.setStringField(\"pc2\");\r\n-        pc1.setFKField(pc2);\r\n-        pc2.setFKField(pc1);\r\n-        \r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        endTx(pm);\r\n-        _oid1 = pm.getObjectId(pc1);\r\n-        _oid2 = pm.getObjectId(pc2);\r\n-        endEm(pm);\r\n-    }\r\n-    \r\n-    public void testInsert() {\r\n-        // inserts are tested in setup; just make sure the inserts\r\n-        // actually worked\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\r\n-        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\r\n-        assertNotNull(pc1);\r\n-        assertNotNull(pc2);\r\n-        assertEquals(\"pc1\", pc1.getStringField());\r\n-        assertEquals(\"pc2\", pc2.getStringField());\r\n-        assertEquals(pc2, pc1.getFKField());\r\n-        assertEquals(pc1, pc2.getFKField());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testDelete() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\r\n-        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\r\n-        startTx(pm);\r\n-        pm.remove(pc1);\r\n-        pm.remove(pc2);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-        \r\n-        pm = getPM();\r\n-        try {\r\n-            pm.find(CircularFKPC.class,_oid1);\r\n-            fail(\"PC1 still exists!\");\r\n-        } catch (Exception jdse) {\r\n-        }\r\n-        try {\r\n-            pm.find(CircularFKPC2.class,_oid2);\r\n-            fail(\"PC2 still exists!\");\r\n-        } catch (Exception jdse) {\r\n-        }\r\n-        endEm(pm);\r\n-    }\r\n-    \r\n-    public void testUpdate() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\r\n-        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\r\n-        \r\n-        startTx(pm);;\r\n-        CircularFKPC2 pc3 = new CircularFKPC2();\r\n-        pc3.setStringField(\"pc3\");\r\n-        pc3.setFKField(pc1);\r\n-        pc1.setFKField(pc3);\r\n-        pc2.setFKField(null);\r\n-        endTx(pm);;\r\n-        pm.close();\r\n-        \r\n-        pm = getPM();\r\n-        pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\r\n-        pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\r\n-        assertNotNull(pc1);\r\n-        assertNotNull(pc2);\r\n-        assertEquals(\"pc1\", pc1.getStringField());\r\n-        assertEquals(\"pc2\", pc2.getStringField());\r\n-        assertNotNull(pc1.getFKField());\r\n-        assertEquals(\"pc3\", pc1.getFKField().getStringField());\r\n-        assertEquals(pc1, pc1.getFKField().getFKField());\r\n-        assertNull(pc2.getFKField());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestCircularFK extends BaseJDBCTest{\n+    \n+    private Object _oid1 = null;\n+    private Object _oid2 = null;\n+    \n+    public TestCircularFK(String name) {\n+        super(name);\n+    }\n+    \n+    /** Creates a new instance of TestCircularFK */\n+    public TestCircularFK() {\n+    }\n+    \n+    public void setUp() {\n+        OpenJPAEntityManager pm = getPM();\n+        \n+        startTx(pm);\n+       deleteAll(CircularFKPC.class,pm);\n+       deleteAll(CircularFKPC2.class,pm);\n+        endTx(pm);\n+        endEm(pm);\n+        \n+        \n+        CircularFKPC pc1 = new CircularFKPC();\n+        pc1.setStringField(\"pc1\");\n+        CircularFKPC2 pc2 = new CircularFKPC2();\n+        pc2.setStringField(\"pc2\");\n+        pc1.setFKField(pc2);\n+        pc2.setFKField(pc1);\n+        \n+        pm = getPM();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        endTx(pm);\n+        _oid1 = pm.getObjectId(pc1);\n+        _oid2 = pm.getObjectId(pc2);\n+        endEm(pm);\n+    }\n+    \n+    public void testInsert() {\n+        // inserts are tested in setup; just make sure the inserts\n+        // actually worked\n+        OpenJPAEntityManager pm = getPM();\n+        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\n+        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\n+        assertNotNull(pc1);\n+        assertNotNull(pc2);\n+        assertEquals(\"pc1\", pc1.getStringField());\n+        assertEquals(\"pc2\", pc2.getStringField());\n+        assertEquals(pc2, pc1.getFKField());\n+        assertEquals(pc1, pc2.getFKField());\n+        pm.close();\n+    }\n+    \n+    public void testDelete() {\n+        OpenJPAEntityManager pm = getPM();\n+        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\n+        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\n+        startTx(pm);\n+        pm.remove(pc1);\n+        pm.remove(pc2);\n+        endTx(pm);\n+        endEm(pm);\n+        \n+        pm = getPM();\n+        try {\n+            pm.find(CircularFKPC.class,_oid1);\n+            fail(\"PC1 still exists!\");\n+        } catch (Exception jdse) {\n+        }\n+        try {\n+            pm.find(CircularFKPC2.class,_oid2);\n+            fail(\"PC2 still exists!\");\n+        } catch (Exception jdse) {\n+        }\n+        endEm(pm);\n+    }\n+    \n+    public void testUpdate() {\n+        OpenJPAEntityManager pm = getPM();\n+        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\n+        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\n+        \n+        startTx(pm);;\n+        CircularFKPC2 pc3 = new CircularFKPC2();\n+        pc3.setStringField(\"pc3\");\n+        pc3.setFKField(pc1);\n+        pc1.setFKField(pc3);\n+        pc2.setFKField(null);\n+        endTx(pm);;\n+        pm.close();\n+        \n+        pm = getPM();\n+        pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\n+        pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\n+        assertNotNull(pc1);\n+        assertNotNull(pc2);\n+        assertEquals(\"pc1\", pc1.getStringField());\n+        assertEquals(\"pc2\", pc2.getStringField());\n+        assertNotNull(pc1.getFKField());\n+        assertEquals(\"pc3\", pc1.getFKField().getStringField());\n+        assertEquals(pc1, pc1.getFKField().getFKField());\n+        assertNull(pc2.getFKField());\n+    }\n+}"},{"sha":"acc5341b81781afa9561f85cd6837f05c23a40dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","status":"modified","additions":199,"deletions":199,"changes":398,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,199 +1,199 @@\n-/*\r\n- * TestDataStoreTrips.java\r\n- *\r\n- * Created on September 29, 2006, 4:48 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.persistence.Extent;\r\n-\r\n-\r\n-\r\n-public class TestDataStoreTrips extends BaseJDBCTest{\r\n-\r\n-\r\n-//    private boolean  = true;//Boolean.valueOf(bool);\r\n-\t\r\n-    private OpenJPAEntityManagerFactory _factory = null;\r\n-    private Object _oid = null;\r\n-    private SelectCounter _counter = null;\r\n-    \r\n-    /** Creates a new instance of TestDataStoreTrips */\r\n-    public TestDataStoreTrips() {\r\n-    }\r\n-    public TestDataStoreTrips(String name) {\r\n-        super(name);\r\n-    }\r\n-    \r\n-    public void setUp()\r\n-        throws Exception {\r\n-       deleteAll(DataStoreTripsPC.class);\r\n-\r\n-        // figure out what table to look for in SQL statements\r\n-        EntityManager em= currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();        \r\n-\r\n-        ClassMapping mapping = conf.getMappingRepositoryInstance().getMapping\r\n-            (DataStoreTripsPC.class, null, true);\r\n-        String table = conf.getDBDictionaryInstance()\r\n-            .getFullName(mapping.getTable(), false);\r\n-\r\n-        // get factory with counter listener\r\n-        _factory = getEmf();\r\n-/*                getPMFactory(new String[]{\r\n-            \"openjpa.jdbc.JDBCListeners\",\r\n-            SelectCounter.class.getName() + \"(Table=\" + table + \")\",\r\n-            \"openjpa.Compatibility\",\r\n-            \"ValidateTrueChecksStore=true\"\r\n-        });\r\n-*/\r\n-        \r\n-        OpenJPAEntityManager pm = _factory.createEntityManager();\r\n-        startTx(pm);\r\n-        \r\n-        DataStoreTripsPC pc = new DataStoreTripsPC(0);\r\n-        pm.persist(pc);\r\n-        _oid = pm.getObjectId(pc);\r\n-\r\n-        for (int i = 1; i < 10; i++)\r\n-              pm.persist(new DataStoreTripsPC(i));\r\n-        endTx(pm);\r\n-        em.close();\r\n-\r\n-        // do a query so that the subclass list will get initialized and\r\n-        // won't count as a select\r\n-        pm = _factory.createEntityManager();\r\n-        pm.getObjectId(_oid);\r\n-        pm.close();\r\n-\r\n-        _counter = (SelectCounter) ((JDBCConfiguration)\r\n-        \t\t((OpenJPAEntityManagerFactorySPI) _factory).getConfiguration()).getJDBCListenerInstances()[0];\r\n-        _counter.selects = 0;\r\n-        _counter.counts = 0;\r\n-    }\r\n-\r\n-    public void testTrips() {\r\n-        OpenJPAEntityManager pm = _factory.createEntityManager();\r\n-        Extent ext = pm.createExtent(DataStoreTripsPC.class, true);\r\n-        for (Iterator itr = ext.iterator(); itr.hasNext();)\r\n-            itr.next();\r\n-        ext.closeAll();\r\n-        pm.close();\r\n-\r\n-        // there might be more than 1 trip if subclasses need to be\r\n-        // initialized and so forth, but make sure there isn't more than\r\n-        // 1 + # objects trips to the DB\r\n-        assertTrue(_counter.selects > 0);\r\n-        assertTrue(\"Should have been 1-3 trips to the data store; got \"\r\n-            + _counter.selects, _counter.selects < 5);\r\n-    }\r\n-\r\n-    public void testExistsCalls() {\r\n-        OpenJPAEntityManager pm = _factory.createEntityManager();\r\n-\r\n-        // first time there shouldn't be any call to exists b/c the data\r\n-        // needs to be loaded\r\n-        pm.getObjectId(_oid);\r\n-        assertEquals(0, _counter.counts);\r\n-        assertEquals(1, _counter.selects);\r\n-\r\n-        // this time there should be a call b/c data is already loaded but\r\n-        // we're still asking to validate\r\n-        pm.getObjectId(_oid);\r\n-        assertEquals(1, _counter.counts);\r\n-        assertEquals(2, _counter.selects);\r\n-        pm.getObjectId(_oid);\r\n-        assertEquals(2, _counter.counts);\r\n-        assertEquals(3, _counter.selects);\r\n-\r\n-        // shouldn't be a call if validate is false; no select b/c data loaded\r\n-        pm.getObjectId(_oid);\r\n-        assertEquals(2, _counter.counts);\r\n-        assertEquals(3, _counter.selects);\r\n-\r\n-        // this will hollow the object\r\n-        //FIXME jthomas ...need to find a substitute\r\n-        //pm.currentTransaction().setOptimistic(false);\r\n-        startTx(pm);\r\n-        \r\n-\r\n-        // no count call b/c loading data\r\n-        pm.getObjectId(_oid);\r\n-        assertEquals(2, _counter.counts);\r\n-        assertEquals(4, _counter.selects);\r\n-\r\n-        // no count call b/c transactional; no select b/c data loaded\r\n-        pm.getObjectId(_oid);\r\n-        assertEquals(2, _counter.counts);\r\n-        assertEquals(4, _counter.selects);\r\n-\r\n-        rollbackTx(pm);\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public static class SelectCounter\r\n-        extends AbstractJDBCListener {\r\n-\r\n-        public int selects = 0;\r\n-        public int counts = 0;\r\n-\r\n-        private String _table = null;\r\n-\r\n-        public void setTable(String table) {\r\n-            _table = table;\r\n-        }\r\n-\r\n-        public void beforeExecuteStatement(JDBCEvent event) {\r\n-            if (event.getSQL().indexOf(_table) != -1)\r\n-                selects++;\r\n-            {\r\n-                if (event.getSQL().indexOf(\" COUNT(\") != -1)\r\n-                    counts++;\r\n-            }\r\n-        }\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestDataStoreTrips.java\n+ *\n+ * Created on September 29, 2006, 4:48 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.persistence.Extent;\n+\n+\n+\n+public class TestDataStoreTrips extends BaseJDBCTest{\n+\n+\n+//    private boolean  = true;//Boolean.valueOf(bool);\n+\t\n+    private OpenJPAEntityManagerFactory _factory = null;\n+    private Object _oid = null;\n+    private SelectCounter _counter = null;\n+    \n+    /** Creates a new instance of TestDataStoreTrips */\n+    public TestDataStoreTrips() {\n+    }\n+    public TestDataStoreTrips(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp()\n+        throws Exception {\n+       deleteAll(DataStoreTripsPC.class);\n+\n+        // figure out what table to look for in SQL statements\n+        EntityManager em= currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();        \n+\n+        ClassMapping mapping = conf.getMappingRepositoryInstance().getMapping\n+            (DataStoreTripsPC.class, null, true);\n+        String table = conf.getDBDictionaryInstance()\n+            .getFullName(mapping.getTable(), false);\n+\n+        // get factory with counter listener\n+        _factory = getEmf();\n+/*                getPMFactory(new String[]{\n+            \"openjpa.jdbc.JDBCListeners\",\n+            SelectCounter.class.getName() + \"(Table=\" + table + \")\",\n+            \"openjpa.Compatibility\",\n+            \"ValidateTrueChecksStore=true\"\n+        });\n+*/\n+        \n+        OpenJPAEntityManager pm = _factory.createEntityManager();\n+        startTx(pm);\n+        \n+        DataStoreTripsPC pc = new DataStoreTripsPC(0);\n+        pm.persist(pc);\n+        _oid = pm.getObjectId(pc);\n+\n+        for (int i = 1; i < 10; i++)\n+              pm.persist(new DataStoreTripsPC(i));\n+        endTx(pm);\n+        em.close();\n+\n+        // do a query so that the subclass list will get initialized and\n+        // won't count as a select\n+        pm = _factory.createEntityManager();\n+        pm.getObjectId(_oid);\n+        pm.close();\n+\n+        _counter = (SelectCounter) ((JDBCConfiguration)\n+        \t\t((OpenJPAEntityManagerFactorySPI) _factory).getConfiguration()).getJDBCListenerInstances()[0];\n+        _counter.selects = 0;\n+        _counter.counts = 0;\n+    }\n+\n+    public void testTrips() {\n+        OpenJPAEntityManager pm = _factory.createEntityManager();\n+        Extent ext = pm.createExtent(DataStoreTripsPC.class, true);\n+        for (Iterator itr = ext.iterator(); itr.hasNext();)\n+            itr.next();\n+        ext.closeAll();\n+        pm.close();\n+\n+        // there might be more than 1 trip if subclasses need to be\n+        // initialized and so forth, but make sure there isn't more than\n+        // 1 + # objects trips to the DB\n+        assertTrue(_counter.selects > 0);\n+        assertTrue(\"Should have been 1-3 trips to the data store; got \"\n+            + _counter.selects, _counter.selects < 5);\n+    }\n+\n+    public void testExistsCalls() {\n+        OpenJPAEntityManager pm = _factory.createEntityManager();\n+\n+        // first time there shouldn't be any call to exists b/c the data\n+        // needs to be loaded\n+        pm.getObjectId(_oid);\n+        assertEquals(0, _counter.counts);\n+        assertEquals(1, _counter.selects);\n+\n+        // this time there should be a call b/c data is already loaded but\n+        // we're still asking to validate\n+        pm.getObjectId(_oid);\n+        assertEquals(1, _counter.counts);\n+        assertEquals(2, _counter.selects);\n+        pm.getObjectId(_oid);\n+        assertEquals(2, _counter.counts);\n+        assertEquals(3, _counter.selects);\n+\n+        // shouldn't be a call if validate is false; no select b/c data loaded\n+        pm.getObjectId(_oid);\n+        assertEquals(2, _counter.counts);\n+        assertEquals(3, _counter.selects);\n+\n+        // this will hollow the object\n+        //FIXME jthomas ...need to find a substitute\n+        //pm.currentTransaction().setOptimistic(false);\n+        startTx(pm);\n+        \n+\n+        // no count call b/c loading data\n+        pm.getObjectId(_oid);\n+        assertEquals(2, _counter.counts);\n+        assertEquals(4, _counter.selects);\n+\n+        // no count call b/c transactional; no select b/c data loaded\n+        pm.getObjectId(_oid);\n+        assertEquals(2, _counter.counts);\n+        assertEquals(4, _counter.selects);\n+\n+        rollbackTx(pm);\n+        pm.close();\n+    }\n+\n+    public static class SelectCounter\n+        extends AbstractJDBCListener {\n+\n+        public int selects = 0;\n+        public int counts = 0;\n+\n+        private String _table = null;\n+\n+        public void setTable(String table) {\n+            _table = table;\n+        }\n+\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL().indexOf(_table) != -1)\n+                selects++;\n+            {\n+                if (event.getSQL().indexOf(\" COUNT(\") != -1)\n+                    counts++;\n+            }\n+        }\n+    }\n+    \n+    \n+}"},{"sha":"96cafa7fe8e01c62b74500a19338371f37dc182e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","status":"modified","additions":238,"deletions":238,"changes":476,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,238 +1,238 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC1;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC2;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3Id;\r\n-\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBAutoIncrement extends BaseJDBCTest\r\n-{\r\n-\r\n-//\tprivate boolean  = Boolean.valueOf(bool);\r\n-\r\n-\tprivate int oid2;\r\n-\tprivate long oid3;\r\n-\tprivate long oid4, oid2a, oid2b, oid3b;\r\n-\tprivate long oid3a;\r\n-\r\n-\tpublic TestEJBAutoIncrement(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll(AutoIncrementPC1.class);\r\n-\t\tdeleteAll(AutoIncrementPC2.class);\r\n-\t\tdeleteAll(AutoIncrementPC3.class);\r\n-\t}\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic void testInsert ()\r\n-\t{\r\n-\t\tAutoIncrementPC2 pc1 = new AutoIncrementPC2 (1);\r\n-\t\tpc1.setStringField (\"pc1\");\r\n-\t\tpc1.setIntField (1);\r\n-\t\tpc1.getSetField ().add (\"string1\");\r\n-\t\tpc1.getSetField ().add (\"string2\");\r\n-\r\n-\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (2);\r\n-\t\tpc2.setStringField (\"pc2\");\r\n-\t\tpc2.setIntField (2);\r\n-\t\tpc2.getSetField ().add (\"string3\");\r\n-\t\tpc2.getSetField ().add (\"string4\");\r\n-\r\n-\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (3);\r\n-\t\tpc3.setStringField (\"pc3\");\r\n-\t\tpc3.getSetField ().add (\"string5\");\r\n-\t\tpc3.getSetField ().add (\"string6\");\r\n-\r\n-\t\tAutoIncrementPC3 pc4 = new AutoIncrementPC3 (4);\r\n-\t\tpc4.setStringField (\"pc4\");\r\n-\t\tpc4.getSetField ().add (\"string7\");\r\n-\t\tpc4.getSetField ().add (\"string8\");\r\n-\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tem.persist(pc1);\r\n-\t\tem.persist(pc2);\r\n-\t\tem.persist(pc3);\r\n-\t\tem.persist(pc4);\r\n-\t\toid2 = pc2.getId();\r\n-\t\toid4 = pc4.getId();\r\n-\r\n-\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2));\r\n-\t\tassertEquals (pc4, em.find(AutoIncrementPC3.class, oid4));\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\r\n-\t\tem = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tpc2 = em.find(AutoIncrementPC2.class, 2);\r\n-\t\tpc4 = em.find(AutoIncrementPC3.class, 4);\r\n-\t\tassertEquals (\"pc2\", pc2.getStringField ());\r\n-\t\tassertEquals (2, pc2.getIntField ());\r\n-\t\tassertEquals (\"pc4\", pc4.getStringField ());\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\t}\r\n-\r\n-\tpublic void testUpdate ()\r\n-\t{\r\n-\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (1);\r\n-\t\tpc2.setStringField (\"pc2\");\r\n-\t\tpc2.setIntField (2);\r\n-\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (2);\r\n-\t\tpc3.setStringField (\"pc3\");\r\n-\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tem.persist (pc2);\r\n-\t\tem.persist (pc3);\r\n-\t\tendTx(em);\r\n-\r\n-\t\toid2 = pc2.getId();\r\n-\t\toid3 = pc3.getId();\r\n-\t\tendEm(em);\r\n-\r\n-\t\tem = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tpc2 = em.find(AutoIncrementPC2.class, oid2);\r\n-\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\r\n-\t\tassertEquals (\"pc2\", pc2.getStringField ());\r\n-\t\tassertEquals (2, pc2.getIntField ());\r\n-\t\tassertEquals (\"pc3\", pc3.getStringField ());\r\n-\t\tpc2.setStringField (\"pc2a\");\r\n-\t\tpc2.setIntField (3);\r\n-\t\tpc3.setStringField (\"pc3a\");\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\r\n-\t\tem = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tpc2 = em.find(AutoIncrementPC2.class, oid2);\r\n-\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\r\n-\t\tassertEquals (\"pc2a\", pc2.getStringField ());\r\n-\t\tassertEquals (3, pc2.getIntField ());\r\n-\t\tassertEquals (\"pc3a\", pc3.getStringField ());\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\t}\r\n-\r\n-\tpublic void testCircularReferences ()\r\n-\t{\r\n-\t\tAutoIncrementPC2 pc2a = new AutoIncrementPC2 (1);\r\n-\t\tpc2a.setStringField (\"pc2a\");\r\n-\t\tpc2a.setIntField (1);\r\n-\t\tAutoIncrementPC2 pc2b = new AutoIncrementPC2 (2);\r\n-\t\tpc2b.setStringField (\"pc2b\");\r\n-\t\tpc2b.setIntField (2);\r\n-\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (3);\r\n-\t\tpc3.setStringField (\"pc3\");\r\n-\r\n-\t\tpc2a.setOneOne (pc2b);\r\n-\t\tpc2b.setOneOne (pc2a);\r\n-\t\tpc3.setOneOne (pc3);\r\n-\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tem.persist (pc2a);\r\n-\t\tem.persist (pc2b);\r\n-\t\tem.persist (pc3);\r\n-\t\tendTx(em);\r\n-\t\toid2a = pc2a.getId();\r\n-\t\toid2b = pc2b.getId();\r\n-\t    oid3 = pc3.getId();\r\n-\t\tendEm(em);\r\n-\r\n-\t\tem = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tpc2a = em.find(AutoIncrementPC2.class, oid2a);\r\n-\t\tpc2b = em.find(AutoIncrementPC2.class, oid2b);\r\n-\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\r\n-\t\tassertEquals (\"pc2a\", pc2a.getStringField ());\r\n-\t\tassertEquals (1, pc2a.getIntField ());\r\n-\t\tassertEquals (\"pc2b\", pc2b.getStringField ());\r\n-\t\tassertEquals (2, pc2b.getIntField ());\r\n-\t\tassertEquals (\"pc3\", pc3.getStringField ());\r\n-\t\tassertEquals (pc2b, pc2a.getOneOne ());\r\n-\t\tassertEquals (pc2a, pc2b.getOneOne ());\r\n-\t\tassertEquals (pc3, pc3.getOneOne ());\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\t}\r\n-\r\n-\tpublic void testMultipleFlushes ()\r\n-\t{\r\n-\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (1);\r\n-\t\tpc2.setStringField (\"pc2\");\r\n-\t\tpc2.setIntField (2);\r\n-\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (2);\r\n-\t\tpc3.setStringField (\"pc3\");\r\n-\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tem.persist (pc2);\r\n-\t\tem.persist (pc3);\r\n-\t\toid2 = pc2.getId();\r\n-\t\toid3 = pc3.getId();\r\n-\t\tem.flush ();\r\n-\r\n-\t    oid2a = pc2.getId();\r\n-\t\toid3a = pc3.getId();\r\n-\t\tassertEquals (oid2, oid2a);\r\n-\t\tassertEquals (oid3, oid3a);\r\n-\t\tlong id = pc3.getId ();\r\n-\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2a));\r\n-\t\tassertEquals (pc3, em.find(AutoIncrementPC3.class, oid3a));\r\n-\t\tpc2.setStringField (\"pc2a\");\r\n-\t\tpc2.setIntField (3);\r\n-\t\tpc3.setStringField (\"pc3a\");\r\n-\t\tem.flush ();\r\n-\r\n-\t\toid2b = pc2.getId();\r\n-\t\toid3b = pc3.getId();\r\n-\t\tassertEquals (oid2, oid2b);\r\n-\t\tassertEquals (oid3, oid3b);\r\n-\t\tassertEquals (id, pc3.getId ());\r\n-\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2b));\r\n-\t\tassertEquals (pc3, em.find(AutoIncrementPC3.class, oid3b));\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\r\n-\t\tem = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tpc2 = em.find(AutoIncrementPC2.class, oid2b);\r\n-\t\tpc3 = em.find(AutoIncrementPC3.class, oid3b);\r\n-\t\tassertEquals (\"pc2a\", pc2.getStringField ());\r\n-\t\tassertEquals (3, pc2.getIntField ());\r\n-\t\tassertEquals (\"pc3a\", pc3.getStringField ());\r\n-\t\tassertEquals (id, pc3.getId ());\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC1;\n+import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC2;\n+import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3;\n+import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3Id;\n+\n+import junit.framework.*;\n+\n+public class TestEJBAutoIncrement extends BaseJDBCTest\n+{\n+\n+//\tprivate boolean  = Boolean.valueOf(bool);\n+\n+\tprivate int oid2;\n+\tprivate long oid3;\n+\tprivate long oid4, oid2a, oid2b, oid3b;\n+\tprivate long oid3a;\n+\n+\tpublic TestEJBAutoIncrement(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll(AutoIncrementPC1.class);\n+\t\tdeleteAll(AutoIncrementPC2.class);\n+\t\tdeleteAll(AutoIncrementPC3.class);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testInsert ()\n+\t{\n+\t\tAutoIncrementPC2 pc1 = new AutoIncrementPC2 (1);\n+\t\tpc1.setStringField (\"pc1\");\n+\t\tpc1.setIntField (1);\n+\t\tpc1.getSetField ().add (\"string1\");\n+\t\tpc1.getSetField ().add (\"string2\");\n+\n+\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (2);\n+\t\tpc2.setStringField (\"pc2\");\n+\t\tpc2.setIntField (2);\n+\t\tpc2.getSetField ().add (\"string3\");\n+\t\tpc2.getSetField ().add (\"string4\");\n+\n+\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (3);\n+\t\tpc3.setStringField (\"pc3\");\n+\t\tpc3.getSetField ().add (\"string5\");\n+\t\tpc3.getSetField ().add (\"string6\");\n+\n+\t\tAutoIncrementPC3 pc4 = new AutoIncrementPC3 (4);\n+\t\tpc4.setStringField (\"pc4\");\n+\t\tpc4.getSetField ().add (\"string7\");\n+\t\tpc4.getSetField ().add (\"string8\");\n+\n+\t\tEntityManager em = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tem.persist(pc1);\n+\t\tem.persist(pc2);\n+\t\tem.persist(pc3);\n+\t\tem.persist(pc4);\n+\t\toid2 = pc2.getId();\n+\t\toid4 = pc4.getId();\n+\n+\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2));\n+\t\tassertEquals (pc4, em.find(AutoIncrementPC3.class, oid4));\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\n+\t\tem = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tpc2 = em.find(AutoIncrementPC2.class, 2);\n+\t\tpc4 = em.find(AutoIncrementPC3.class, 4);\n+\t\tassertEquals (\"pc2\", pc2.getStringField ());\n+\t\tassertEquals (2, pc2.getIntField ());\n+\t\tassertEquals (\"pc4\", pc4.getStringField ());\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\t}\n+\n+\tpublic void testUpdate ()\n+\t{\n+\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (1);\n+\t\tpc2.setStringField (\"pc2\");\n+\t\tpc2.setIntField (2);\n+\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (2);\n+\t\tpc3.setStringField (\"pc3\");\n+\n+\t\tEntityManager em = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tem.persist (pc2);\n+\t\tem.persist (pc3);\n+\t\tendTx(em);\n+\n+\t\toid2 = pc2.getId();\n+\t\toid3 = pc3.getId();\n+\t\tendEm(em);\n+\n+\t\tem = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tpc2 = em.find(AutoIncrementPC2.class, oid2);\n+\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\n+\t\tassertEquals (\"pc2\", pc2.getStringField ());\n+\t\tassertEquals (2, pc2.getIntField ());\n+\t\tassertEquals (\"pc3\", pc3.getStringField ());\n+\t\tpc2.setStringField (\"pc2a\");\n+\t\tpc2.setIntField (3);\n+\t\tpc3.setStringField (\"pc3a\");\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\n+\t\tem = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tpc2 = em.find(AutoIncrementPC2.class, oid2);\n+\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\n+\t\tassertEquals (\"pc2a\", pc2.getStringField ());\n+\t\tassertEquals (3, pc2.getIntField ());\n+\t\tassertEquals (\"pc3a\", pc3.getStringField ());\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\t}\n+\n+\tpublic void testCircularReferences ()\n+\t{\n+\t\tAutoIncrementPC2 pc2a = new AutoIncrementPC2 (1);\n+\t\tpc2a.setStringField (\"pc2a\");\n+\t\tpc2a.setIntField (1);\n+\t\tAutoIncrementPC2 pc2b = new AutoIncrementPC2 (2);\n+\t\tpc2b.setStringField (\"pc2b\");\n+\t\tpc2b.setIntField (2);\n+\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (3);\n+\t\tpc3.setStringField (\"pc3\");\n+\n+\t\tpc2a.setOneOne (pc2b);\n+\t\tpc2b.setOneOne (pc2a);\n+\t\tpc3.setOneOne (pc3);\n+\n+\t\tEntityManager em = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tem.persist (pc2a);\n+\t\tem.persist (pc2b);\n+\t\tem.persist (pc3);\n+\t\tendTx(em);\n+\t\toid2a = pc2a.getId();\n+\t\toid2b = pc2b.getId();\n+\t    oid3 = pc3.getId();\n+\t\tendEm(em);\n+\n+\t\tem = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tpc2a = em.find(AutoIncrementPC2.class, oid2a);\n+\t\tpc2b = em.find(AutoIncrementPC2.class, oid2b);\n+\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\n+\t\tassertEquals (\"pc2a\", pc2a.getStringField ());\n+\t\tassertEquals (1, pc2a.getIntField ());\n+\t\tassertEquals (\"pc2b\", pc2b.getStringField ());\n+\t\tassertEquals (2, pc2b.getIntField ());\n+\t\tassertEquals (\"pc3\", pc3.getStringField ());\n+\t\tassertEquals (pc2b, pc2a.getOneOne ());\n+\t\tassertEquals (pc2a, pc2b.getOneOne ());\n+\t\tassertEquals (pc3, pc3.getOneOne ());\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\t}\n+\n+\tpublic void testMultipleFlushes ()\n+\t{\n+\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (1);\n+\t\tpc2.setStringField (\"pc2\");\n+\t\tpc2.setIntField (2);\n+\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (2);\n+\t\tpc3.setStringField (\"pc3\");\n+\n+\t\tEntityManager em = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tem.persist (pc2);\n+\t\tem.persist (pc3);\n+\t\toid2 = pc2.getId();\n+\t\toid3 = pc3.getId();\n+\t\tem.flush ();\n+\n+\t    oid2a = pc2.getId();\n+\t\toid3a = pc3.getId();\n+\t\tassertEquals (oid2, oid2a);\n+\t\tassertEquals (oid3, oid3a);\n+\t\tlong id = pc3.getId ();\n+\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2a));\n+\t\tassertEquals (pc3, em.find(AutoIncrementPC3.class, oid3a));\n+\t\tpc2.setStringField (\"pc2a\");\n+\t\tpc2.setIntField (3);\n+\t\tpc3.setStringField (\"pc3a\");\n+\t\tem.flush ();\n+\n+\t\toid2b = pc2.getId();\n+\t\toid3b = pc3.getId();\n+\t\tassertEquals (oid2, oid2b);\n+\t\tassertEquals (oid3, oid3b);\n+\t\tassertEquals (id, pc3.getId ());\n+\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2b));\n+\t\tassertEquals (pc3, em.find(AutoIncrementPC3.class, oid3b));\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\n+\t\tem = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tpc2 = em.find(AutoIncrementPC2.class, oid2b);\n+\t\tpc3 = em.find(AutoIncrementPC3.class, oid3b);\n+\t\tassertEquals (\"pc2a\", pc2.getStringField ());\n+\t\tassertEquals (3, pc2.getIntField ());\n+\t\tassertEquals (\"pc3a\", pc3.getStringField ());\n+\t\tassertEquals (id, pc3.getId ());\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\t}\n+}"},{"sha":"188724b57c32b4bddf6f8b1751cc2ba2241d3dae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","status":"modified","additions":121,"deletions":121,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,121 +1,121 @@\n-/*\r\n- * TestEfficientAttach.java\r\n- *\r\n- * Created on September 29, 2006, 6:00 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.meta.MetaDataRepository;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-\r\n-public class TestEfficientAttach extends TestSQLListenerTestCase {\r\n-\r\n-\r\n-//    private boolean  = true;//Boolean.valueOf(bool);\r\n-    \r\n-    /** Creates a new instance of TestEfficientAttach */\r\n-    public TestEfficientAttach(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public void testAttachWithDetachedStateManager() {\r\n-        Class[] clss = new Class[]{\r\n-            AttachA.class, AttachB.class, AttachC.class, AttachD.class,\r\n-            AttachE.class, AttachF.class,\r\n-        };\r\n-        String[] detachedStateFields = new String[clss.length];\r\n-\r\n-        // null any declared detached state fields so we know we're using\r\n-        // synthetic state managers\r\n-        EntityManager em= currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();\r\n-\r\n-        MetaDataRepository repos = conf.getMappingRepositoryInstance();\r\n-        ClassMetaData meta;\r\n-        for (int i = 0; i < clss.length; i++) {\r\n-            meta = repos.getMetaData(clss[i], null, true);\r\n-            detachedStateFields[i] = meta.getDetachedState();\r\n-            meta.setDetachedState(null);\r\n-\r\n-           deleteAll(clss[i]);\r\n-        }\r\n-\r\n-        try {\r\n-            attachTest();\r\n-        } finally {\r\n-            // set detached state back\r\n-            for (int i = 0; i < clss.length; i++)\r\n-                repos.getMetaData(clss[i], null, true).setDetachedState\r\n-                    (detachedStateFields[i]);\r\n-        }\r\n-    }\r\n-\r\n-    private void attachTest() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);;\r\n-        AttachE e = new AttachE();\r\n-        e.setB(new AttachB());\r\n-        pm.persist(e);\r\n-        endTx(pm);;\r\n-        //FIXME jthomas - could not find equivalent for detachCopy() attachCopy() etc\r\n-/*      \r\n-        e = (AttachE) pm.detachCopy(e);\r\n-        pm.close();\r\n-\r\n-        pm = getPM();\r\n-        pm.begin();\r\n-        sql.clear();\r\n-        e = (AttachE) pm.attachCopy(e, false);\r\n-        assertNotNull(e);\r\n-        assertNotNull(e.getB());\r\n-        assertSize(0, sql);\r\n-        pm.commit();\r\n-        assertSize(2, sql);\r\n-        pm.close();\r\n- */\r\n-    }\r\n-\r\n-\r\n-    public static void main(String[] args) {\r\n-        //main();\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestEfficientAttach.java\n+ *\n+ * Created on September 29, 2006, 6:00 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+public class TestEfficientAttach extends TestSQLListenerTestCase {\n+\n+\n+//    private boolean  = true;//Boolean.valueOf(bool);\n+    \n+    /** Creates a new instance of TestEfficientAttach */\n+    public TestEfficientAttach(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public void testAttachWithDetachedStateManager() {\n+        Class[] clss = new Class[]{\n+            AttachA.class, AttachB.class, AttachC.class, AttachD.class,\n+            AttachE.class, AttachF.class,\n+        };\n+        String[] detachedStateFields = new String[clss.length];\n+\n+        // null any declared detached state fields so we know we're using\n+        // synthetic state managers\n+        EntityManager em= currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();\n+\n+        MetaDataRepository repos = conf.getMappingRepositoryInstance();\n+        ClassMetaData meta;\n+        for (int i = 0; i < clss.length; i++) {\n+            meta = repos.getMetaData(clss[i], null, true);\n+            detachedStateFields[i] = meta.getDetachedState();\n+            meta.setDetachedState(null);\n+\n+           deleteAll(clss[i]);\n+        }\n+\n+        try {\n+            attachTest();\n+        } finally {\n+            // set detached state back\n+            for (int i = 0; i < clss.length; i++)\n+                repos.getMetaData(clss[i], null, true).setDetachedState\n+                    (detachedStateFields[i]);\n+        }\n+    }\n+\n+    private void attachTest() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);;\n+        AttachE e = new AttachE();\n+        e.setB(new AttachB());\n+        pm.persist(e);\n+        endTx(pm);;\n+        //FIXME jthomas - could not find equivalent for detachCopy() attachCopy() etc\n+/*      \n+        e = (AttachE) pm.detachCopy(e);\n+        pm.close();\n+\n+        pm = getPM();\n+        pm.begin();\n+        sql.clear();\n+        e = (AttachE) pm.attachCopy(e, false);\n+        assertNotNull(e);\n+        assertNotNull(e.getB());\n+        assertSize(0, sql);\n+        pm.commit();\n+        assertSize(2, sql);\n+        pm.close();\n+ */\n+    }\n+\n+\n+    public static void main(String[] args) {\n+        //main();\n+    }\n+    \n+}"},{"sha":"4df2e5d4551c83c32253ad516a42b12c9d6d8d5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","status":"modified","additions":285,"deletions":285,"changes":570,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,285 +1,285 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.kernel.*;\r\n-import org.apache.openjpa.jdbc.conf.*;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.FetchPlan;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase; \r\n-\r\n-\r\n-/**\r\n- * Test various bits of embedded-field functionality.\r\n- * <p/>\r\n- * ##### this should test embedded-element collections, maps, at least to ensure\r\n- * ##### that the state managers of values in embedded collections, maps do not\r\n- * ##### have owners. Not relevant in 3.x; will be important in 4.0.\r\n- */\r\n-public class TestEmbeddedPessimisticLocking\r\n-    extends TestSQLListenerTestCase {\r\n-\r\n-\r\n-    private boolean supportsLocking;\r\n-    private Object oid;\r\n-    private OpenJPAEntityManagerFactory emf;\r\n-    \r\n-    public TestEmbeddedPessimisticLocking(String name)\r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-\r\n-\tpublic void setUp() throws Exception{\r\n-\t\tsuper.setUp();\r\n-\t\temf = (OpenJPAEntityManagerFactory)getEmf(getProps());\r\n-\t}\r\n-\r\n-\r\n-\r\n-    public void setUpTestCase() {\r\n-\r\n-\t\tJDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\r\n-\r\n-        supportsLocking = conf.getDBDictionaryInstance().supportsSelectForUpdate;\r\n-\r\n-       deleteAll(EmbeddedOwnerPC.class);\r\n-\r\n-        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(em);\r\n-        EmbeddedOwnerPC owner = new EmbeddedOwnerPC(10, 20);\r\n-        em.persist(owner);\r\n-\r\n-        EmbeddedPC embedded = new EmbeddedPC();\r\n-        embedded.setIntField(4);\r\n-        embedded.setStringField(\"foo\");\r\n-        owner.setEmbedded(embedded);\r\n-\r\n-        EmbeddedPC embedded2 = new EmbeddedPC();\r\n-        embedded2.setIntField(8);\r\n-        embedded2.setStringField(\"bar\");\r\n-        ComplexEmbeddedPC complex = new ComplexEmbeddedPC();\r\n-        complex.setStringField(\"complex\");\r\n-        complex.setEmbedded(embedded2);\r\n-        owner.setComplexEmbedded(complex);\r\n-\r\n-        endTx(em);\r\n-\r\n-        oid = em.getObjectId(owner);\r\n-        em.close();\r\n-    }\r\n-\r\n-    private void prepareEMF(OpenJPAEntityManagerFactory emf) {\r\n-        // do this to ensure that the SELECT DISTINCT gets performed here.\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-\r\n-        //FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n-        //em.getTransaction().setOptimistic(false);\r\n-        startTx(em);\r\n-\r\n-        try {\r\n-            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n-        } finally {\r\n-            rollbackTx(em);\r\n-            em.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testEmbeddedFieldsWithLockedParent() {\r\n-        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-        prepareEMF(em.getEntityManagerFactory());\r\n-        ((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"embedded\");\r\n-//FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n-//        pm.currentTransaction().setOptimistic(false);\r\n-        startTx(em);\r\n-        try {\r\n-            sql.clear();\r\n-            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n-            assertEquals(1, sql.size());\r\n-\r\n-            pc.getEmbedded().setStringField\r\n-                (pc.getEmbedded().getStringField() + \"bar\");\r\n-            // should not go to the db for another lock; we use <=, since\r\n-            // some databases (like HSQL) don't support locking at all\r\n-            assertTrue(sql.size() <= 1);\r\n-        } finally {\r\n-            rollbackTx(em);\r\n-            em.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testEmbeddedFieldsWithUnlockedParent() {\r\n-\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-\t\tprepareEMF(em.getEntityManagerFactory());\r\n-\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"embedded\");\r\n-\r\n-\r\n-//FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n-//        pm.currentTransaction().setOptimistic(false);\r\n-        startTx(em);\r\n-\r\n-        try {\r\n-\r\n-            //FIXME jthomas - no equivalent found for LockLevels.LOCK_NONE\r\n-            //((FetchPlan) pm.getFetchPlan()).setReadLockMode(LockLevels.LOCK_NONE);\r\n-\r\n-            sql.clear();\r\n-            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n-            EmbeddedPC embedded = pc.getEmbedded();\r\n-\r\n-            assertNull(getStateManager(pc, em).getLock());\r\n-            assertNull(getStateManager(embedded, em).getLock());\r\n-            assertEquals(1, sql.size());\r\n-            sql.clear();\r\n-\r\n-            embedded.setStringField(embedded.getStringField() + \"bar\");\r\n-            // should not go to the db for another lock -- should have gotten\r\n-            // one along with the embedded field's lock\r\n-            assertTrue(sql.size() <= 1);\r\n-            assertNotNull(getStateManager(pc, em).getLock());\r\n-\r\n-            // embeddeds don't get locks at all.\r\n-            assertNull(getStateManager(embedded, em).getLock());\r\n-\r\n-            // owner is dirtied when embedded record is changed\r\n-            assertTrue(getStateManager(pc, em).isDirty());\r\n-            assertTrue(getStateManager(embedded, em).isDirty());\r\n-\r\n-            pc.setStringField(pc.getStringField() + \"bar\");\r\n-            // should not go to the db for another lock.\r\n-            assertTrue(sql.size() <= 1);\r\n-        } finally {\r\n-            rollbackTx(em);\r\n-            em.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testComplexEmbeddedFieldsWithLockedParent() {\r\n-\r\n-\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-\t\tprepareEMF(em.getEntityManagerFactory());\r\n-\t\tem.getFetchPlan().setMaxFetchDepth(-1);\r\n-\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"complexEmbedded\");\r\n-\t\t((FetchPlan) em.getFetchPlan()).addField(RecursivelyEmbeddedPC.class, \"embedded\");\r\n-\r\n-//FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n-//        pm.currentTransaction().setOptimistic(false);\r\n-        startTx(em);\r\n-        try {\r\n-            sql.clear();\r\n-            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n-            assertEquals(1, sql.size());\r\n-\r\n-            pc.getComplexEmbedded().getEmbedded().setStringField\r\n-                (pc.getComplexEmbedded().getEmbedded().getStringField() +\r\n-                    \"bar\");\r\n-            // should not go to the db for another lock.\r\n-            assertTrue(sql.size() <= 1);\r\n-        } finally {\r\n-            rollbackTx(em);\r\n-            em.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testComplexEmbeddedFieldsWithUnlockedParent() {\r\n-        // doing this because setting the read lock level\r\n-        // does not seem to be disabling FOR UPDATE.\r\n-\r\n-\r\n-\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-\t\tprepareEMF(em.getEntityManagerFactory());\r\n-\t\tem.getFetchPlan().setMaxFetchDepth(-1);\r\n-\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"complexEmbedded\");\r\n-\t\t((FetchPlan) em.getFetchPlan()).addField(RecursivelyEmbeddedPC.class, \"embedded\");\r\n-\r\n-\r\n-\r\n-//FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n-//        pm.currentTransaction().setOptimistic(false);\r\n-        startTx(em);\r\n-\r\n-        try {\r\n-            //FIXME jthomas FetchPlan.LOCK_NONE??\r\n-            //((FetchPlan) em.getFetchPlan()).setReadLockLevel\r\n-            //    (FetchPlan.LOCK_NONE);\r\n-\r\n-            sql.clear();\r\n-            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n-            ComplexEmbeddedPC complex = pc.getComplexEmbedded();\r\n-            EmbeddedPC embedded = complex.getEmbedded();\r\n-\r\n-            assertNull(getStateManager(pc, em).getLock());\r\n-            assertNull(getStateManager(complex, em).getLock());\r\n-            assertNull(getStateManager(embedded, em).getLock());\r\n-            assertEquals(1, sql.size());\r\n-            sql.clear();\r\n-\r\n-            embedded.setStringField(embedded.getStringField() + \"bar\");\r\n-            // should not go to the db for another lock -- should have gotten\r\n-            // one along with the embedded field's lock\r\n-            assertTrue(sql.size() <= 1);\r\n-            assertNotNull(getStateManager(pc, em).getLock());\r\n-\r\n-            // embeddeds don't get locks at all.\r\n-            assertNull(getStateManager(complex, em).getLock());\r\n-            assertNull(getStateManager(embedded, em).getLock());\r\n-\r\n-            // owner is dirtied when embedded record is changed\r\n-            assertTrue(getStateManager(pc, em).isDirty());\r\n-            assertTrue(getStateManager(complex, em).isDirty());\r\n-            assertTrue(getStateManager(embedded, em).isDirty());\r\n-\r\n-            complex.setStringField(complex.getStringField() + \"bar\");\r\n-            // should not go to the db for another lock.\r\n-            assertTrue(sql.size() <= 1);\r\n-\r\n-            pc.setStringField(pc.getStringField() + \"bar\");\r\n-            // should not go to the db for another lock.\r\n-            assertTrue(sql.size() <= 1);\r\n-        } finally {\r\n-            rollbackTx(em);\r\n-            em.close();\r\n-        }\r\n-    }\r\n-\r\n-\tprivate Map getProps() {\r\n-\t\tMap props=new HashMap();\r\n-\t\tprops.put(\"openjpa.DataCache\", \"true\");\r\n-\t\tprops.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-\t\tprops.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-\t\tprops.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n-\t\t//propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n-\t\treturn props;\r\n-\t}\r\n-\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+\n+import java.util.*;\n+import org.apache.openjpa.kernel.*;\n+import org.apache.openjpa.jdbc.conf.*;\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase; \n+\n+\n+/**\n+ * Test various bits of embedded-field functionality.\n+ * <p/>\n+ * ##### this should test embedded-element collections, maps, at least to ensure\n+ * ##### that the state managers of values in embedded collections, maps do not\n+ * ##### have owners. Not relevant in 3.x; will be important in 4.0.\n+ */\n+public class TestEmbeddedPessimisticLocking\n+    extends TestSQLListenerTestCase {\n+\n+\n+    private boolean supportsLocking;\n+    private Object oid;\n+    private OpenJPAEntityManagerFactory emf;\n+    \n+    public TestEmbeddedPessimisticLocking(String name)\n+    {\n+    \tsuper(name);\n+    }\n+\n+\tpublic void setUp() throws Exception{\n+\t\tsuper.setUp();\n+\t\temf = (OpenJPAEntityManagerFactory)getEmf(getProps());\n+\t}\n+\n+\n+\n+    public void setUpTestCase() {\n+\n+\t\tJDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\n+\n+        supportsLocking = conf.getDBDictionaryInstance().supportsSelectForUpdate;\n+\n+       deleteAll(EmbeddedOwnerPC.class);\n+\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(em);\n+        EmbeddedOwnerPC owner = new EmbeddedOwnerPC(10, 20);\n+        em.persist(owner);\n+\n+        EmbeddedPC embedded = new EmbeddedPC();\n+        embedded.setIntField(4);\n+        embedded.setStringField(\"foo\");\n+        owner.setEmbedded(embedded);\n+\n+        EmbeddedPC embedded2 = new EmbeddedPC();\n+        embedded2.setIntField(8);\n+        embedded2.setStringField(\"bar\");\n+        ComplexEmbeddedPC complex = new ComplexEmbeddedPC();\n+        complex.setStringField(\"complex\");\n+        complex.setEmbedded(embedded2);\n+        owner.setComplexEmbedded(complex);\n+\n+        endTx(em);\n+\n+        oid = em.getObjectId(owner);\n+        em.close();\n+    }\n+\n+    private void prepareEMF(OpenJPAEntityManagerFactory emf) {\n+        // do this to ensure that the SELECT DISTINCT gets performed here.\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+\n+        //FIXME jthomas commenting this since setOptimistic is not available for userTx\n+        //em.getTransaction().setOptimistic(false);\n+        startTx(em);\n+\n+        try {\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\n+        } finally {\n+            rollbackTx(em);\n+            em.close();\n+        }\n+    }\n+\n+    public void testEmbeddedFieldsWithLockedParent() {\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+        prepareEMF(em.getEntityManagerFactory());\n+        ((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"embedded\");\n+//FIXME jthomas commenting this since setOptimistic is not available for userTx\n+//        pm.currentTransaction().setOptimistic(false);\n+        startTx(em);\n+        try {\n+            sql.clear();\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\n+            assertEquals(1, sql.size());\n+\n+            pc.getEmbedded().setStringField\n+                (pc.getEmbedded().getStringField() + \"bar\");\n+            // should not go to the db for another lock; we use <=, since\n+            // some databases (like HSQL) don't support locking at all\n+            assertTrue(sql.size() <= 1);\n+        } finally {\n+            rollbackTx(em);\n+            em.close();\n+        }\n+    }\n+\n+    public void testEmbeddedFieldsWithUnlockedParent() {\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+\t\tprepareEMF(em.getEntityManagerFactory());\n+\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"embedded\");\n+\n+\n+//FIXME jthomas commenting this since setOptimistic is not available for userTx\n+//        pm.currentTransaction().setOptimistic(false);\n+        startTx(em);\n+\n+        try {\n+\n+            //FIXME jthomas - no equivalent found for LockLevels.LOCK_NONE\n+            //((FetchPlan) pm.getFetchPlan()).setReadLockMode(LockLevels.LOCK_NONE);\n+\n+            sql.clear();\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\n+            EmbeddedPC embedded = pc.getEmbedded();\n+\n+            assertNull(getStateManager(pc, em).getLock());\n+            assertNull(getStateManager(embedded, em).getLock());\n+            assertEquals(1, sql.size());\n+            sql.clear();\n+\n+            embedded.setStringField(embedded.getStringField() + \"bar\");\n+            // should not go to the db for another lock -- should have gotten\n+            // one along with the embedded field's lock\n+            assertTrue(sql.size() <= 1);\n+            assertNotNull(getStateManager(pc, em).getLock());\n+\n+            // embeddeds don't get locks at all.\n+            assertNull(getStateManager(embedded, em).getLock());\n+\n+            // owner is dirtied when embedded record is changed\n+            assertTrue(getStateManager(pc, em).isDirty());\n+            assertTrue(getStateManager(embedded, em).isDirty());\n+\n+            pc.setStringField(pc.getStringField() + \"bar\");\n+            // should not go to the db for another lock.\n+            assertTrue(sql.size() <= 1);\n+        } finally {\n+            rollbackTx(em);\n+            em.close();\n+        }\n+    }\n+\n+    public void testComplexEmbeddedFieldsWithLockedParent() {\n+\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+\t\tprepareEMF(em.getEntityManagerFactory());\n+\t\tem.getFetchPlan().setMaxFetchDepth(-1);\n+\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"complexEmbedded\");\n+\t\t((FetchPlan) em.getFetchPlan()).addField(RecursivelyEmbeddedPC.class, \"embedded\");\n+\n+//FIXME jthomas commenting this since setOptimistic is not available for userTx\n+//        pm.currentTransaction().setOptimistic(false);\n+        startTx(em);\n+        try {\n+            sql.clear();\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\n+            assertEquals(1, sql.size());\n+\n+            pc.getComplexEmbedded().getEmbedded().setStringField\n+                (pc.getComplexEmbedded().getEmbedded().getStringField() +\n+                    \"bar\");\n+            // should not go to the db for another lock.\n+            assertTrue(sql.size() <= 1);\n+        } finally {\n+            rollbackTx(em);\n+            em.close();\n+        }\n+    }\n+\n+    public void testComplexEmbeddedFieldsWithUnlockedParent() {\n+        // doing this because setting the read lock level\n+        // does not seem to be disabling FOR UPDATE.\n+\n+\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+\t\tprepareEMF(em.getEntityManagerFactory());\n+\t\tem.getFetchPlan().setMaxFetchDepth(-1);\n+\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"complexEmbedded\");\n+\t\t((FetchPlan) em.getFetchPlan()).addField(RecursivelyEmbeddedPC.class, \"embedded\");\n+\n+\n+\n+//FIXME jthomas commenting this since setOptimistic is not available for userTx\n+//        pm.currentTransaction().setOptimistic(false);\n+        startTx(em);\n+\n+        try {\n+            //FIXME jthomas FetchPlan.LOCK_NONE??\n+            //((FetchPlan) em.getFetchPlan()).setReadLockLevel\n+            //    (FetchPlan.LOCK_NONE);\n+\n+            sql.clear();\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\n+            ComplexEmbeddedPC complex = pc.getComplexEmbedded();\n+            EmbeddedPC embedded = complex.getEmbedded();\n+\n+            assertNull(getStateManager(pc, em).getLock());\n+            assertNull(getStateManager(complex, em).getLock());\n+            assertNull(getStateManager(embedded, em).getLock());\n+            assertEquals(1, sql.size());\n+            sql.clear();\n+\n+            embedded.setStringField(embedded.getStringField() + \"bar\");\n+            // should not go to the db for another lock -- should have gotten\n+            // one along with the embedded field's lock\n+            assertTrue(sql.size() <= 1);\n+            assertNotNull(getStateManager(pc, em).getLock());\n+\n+            // embeddeds don't get locks at all.\n+            assertNull(getStateManager(complex, em).getLock());\n+            assertNull(getStateManager(embedded, em).getLock());\n+\n+            // owner is dirtied when embedded record is changed\n+            assertTrue(getStateManager(pc, em).isDirty());\n+            assertTrue(getStateManager(complex, em).isDirty());\n+            assertTrue(getStateManager(embedded, em).isDirty());\n+\n+            complex.setStringField(complex.getStringField() + \"bar\");\n+            // should not go to the db for another lock.\n+            assertTrue(sql.size() <= 1);\n+\n+            pc.setStringField(pc.getStringField() + \"bar\");\n+            // should not go to the db for another lock.\n+            assertTrue(sql.size() <= 1);\n+        } finally {\n+            rollbackTx(em);\n+            em.close();\n+        }\n+    }\n+\n+\tprivate Map getProps() {\n+\t\tMap props=new HashMap();\n+\t\tprops.put(\"openjpa.DataCache\", \"true\");\n+\t\tprops.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+\t\tprops.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+\t\tprops.put(\"javax.jdo.option.IgnoreCache\", \"false\");\n+\t\t//propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\n+\t\treturn props;\n+\t}\n+\n+\n+}"},{"sha":"7c3a4d15cdecf96ec5ae2f9967eac71fcab65ba9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,112 +1,112 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-import java.sql.*;\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import javax.persistence.Persistence;\r\n-import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n-import org.apache.openjpa.kernel.StoreManager;\r\n-import org.apache.openjpa.kernel.DelegatingStoreManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-\r\n-public class TestIncrementalJDBCFlushes\r\n-        extends BaseJDBCTest {\r\n-    \r\n-    private EntityManagerFactory emf;\r\n-    \r\n-\r\n-//    private boolean  = true;\r\n-//    \r\n-    \r\n-    public TestIncrementalJDBCFlushes(String str) {\r\n-        super(str);\r\n-    }\r\n-    \r\n-    \r\n-    public void setUp() {\r\n-        emf = getEmf(getProps());\r\n-        \r\n-        EntityManager em =emf.createEntityManager();\r\n-       deleteAll(RuntimeTest1.class,em);\r\n-        \r\n-    }\r\n-    \r\n-    \r\n-    public void testFlushHappened() throws java.sql.SQLException{\r\n-        \r\n-        \r\n-        \r\n-        EntityManager em =emf.createEntityManager();\r\n-        startTx(em);\r\n-        RuntimeTest1 a = new RuntimeTest1(\"a-name\", 10);\r\n-        em.persist(a);\r\n-        em.flush();\r\n-        JDBCStore store = (JDBCStore) getStoreManager(em, true);\r\n-        Connection conn = store.getConnection();\r\n-        ClassMapping mapping = store.getConfiguration().\r\n-                getMappingRepositoryInstance().getMapping(RuntimeTest1.class,\r\n-                null, true);\r\n-        FieldMapping fm = mapping.getFieldMapping(\"stringField\");\r\n-        String tableName = store.getConfiguration().getDBDictionaryInstance().getFullName(fm.getTable(), false);\r\n-        String colName = fm.getColumns()[0].getName();\r\n-        Statement st = conn.createStatement();\r\n-        ResultSet rs = st.executeQuery(\"SELECT \" + colName + \" FROM \"\r\n-                + tableName + \" WHERE \" + colName + \" = 'a-name'\");\r\n-        int count = 0;\r\n-        while (rs.next())\r\n-            count++;\r\n-        assertEquals(1, count);\r\n-        rollbackTx(em);\r\n-        endEm(em);\r\n-        \r\n-        \r\n-    }\r\n-    \r\n-    private StoreManager getStoreManager(EntityManager em, boolean innermost) {\r\n-        DelegatingStoreManager mgr = JPAFacadeHelper.toBroker(em).getStoreManager();\r\n-        if (innermost)\r\n-            return mgr.getInnermostDelegate();\r\n-        return mgr;\r\n-    }\r\n-    \r\n-    private Map getProps() {\r\n-        Map props=new HashMap();\r\n-        props.put(\"openjpa.DataCache\", \"true\");\r\n-        props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        props.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-        props.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n-        //propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n-        return props;\r\n-    }\r\n-    \r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+import java.sql.*;\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import javax.persistence.Persistence;\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+\n+public class TestIncrementalJDBCFlushes\n+        extends BaseJDBCTest {\n+    \n+    private EntityManagerFactory emf;\n+    \n+\n+//    private boolean  = true;\n+//    \n+    \n+    public TestIncrementalJDBCFlushes(String str) {\n+        super(str);\n+    }\n+    \n+    \n+    public void setUp() {\n+        emf = getEmf(getProps());\n+        \n+        EntityManager em =emf.createEntityManager();\n+       deleteAll(RuntimeTest1.class,em);\n+        \n+    }\n+    \n+    \n+    public void testFlushHappened() throws java.sql.SQLException{\n+        \n+        \n+        \n+        EntityManager em =emf.createEntityManager();\n+        startTx(em);\n+        RuntimeTest1 a = new RuntimeTest1(\"a-name\", 10);\n+        em.persist(a);\n+        em.flush();\n+        JDBCStore store = (JDBCStore) getStoreManager(em, true);\n+        Connection conn = store.getConnection();\n+        ClassMapping mapping = store.getConfiguration().\n+                getMappingRepositoryInstance().getMapping(RuntimeTest1.class,\n+                null, true);\n+        FieldMapping fm = mapping.getFieldMapping(\"stringField\");\n+        String tableName = store.getConfiguration().getDBDictionaryInstance().getFullName(fm.getTable(), false);\n+        String colName = fm.getColumns()[0].getName();\n+        Statement st = conn.createStatement();\n+        ResultSet rs = st.executeQuery(\"SELECT \" + colName + \" FROM \"\n+                + tableName + \" WHERE \" + colName + \" = 'a-name'\");\n+        int count = 0;\n+        while (rs.next())\n+            count++;\n+        assertEquals(1, count);\n+        rollbackTx(em);\n+        endEm(em);\n+        \n+        \n+    }\n+    \n+    private StoreManager getStoreManager(EntityManager em, boolean innermost) {\n+        DelegatingStoreManager mgr = JPAFacadeHelper.toBroker(em).getStoreManager();\n+        if (innermost)\n+            return mgr.getInnermostDelegate();\n+        return mgr;\n+    }\n+    \n+    private Map getProps() {\n+        Map props=new HashMap();\n+        props.put(\"openjpa.DataCache\", \"true\");\n+        props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        props.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+        props.put(\"javax.jdo.option.IgnoreCache\", \"false\");\n+        //propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\n+        return props;\n+    }\n+    \n }\n\\ No newline at end of file"},{"sha":"a62a7c67718ddefa5961f2343605c64b11bfab45","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","status":"modified","additions":319,"deletions":319,"changes":638,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,319 +1,319 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-\r\n-\r\n-public class TestOperationOrderUpdateManager\r\n-    extends AbstractTestCase {\r\n-\r\n-\r\n-//\tprivate boolean  = true;//Boolean.valueOf(bool);\r\n-\r\n-\r\n-    private static boolean _mapped = false;\r\n-\r\n-    private EntityManagerFactory emf;\r\n-\r\n-    /*protected boolean skipTest() {\r\n-        if (!getName().startsWith(\"testAuto\"))\r\n-            return false;\r\n-\r\n-\t\temf = getEmf();\r\n-\r\n-\t\tJDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\r\n-        DBDictionary dict = conf.getDBDictionaryInstance();\r\n-        return !dict.supportsAutoAssign;\r\n-    }\r\n-*/\r\n-    public TestOperationOrderUpdateManager(String name)\r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-\r\n-    private void insertTest(boolean autoAssign) {\r\n-        OpOrder oid = (autoAssign) ? insertAutoAssign() : insert();\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        OpOrder pc = (OpOrder) em.find(OpOrder.class,oid.getId());\r\n-        assertEquals(\"pc\", pc.getSecondary());\r\n-        assertEquals(\"pcsub\", pc.getSub());\r\n-        assertNotNull(pc.getRel());\r\n-        assertEquals(\"rel\", pc.getRel().getSecondary());\r\n-        assertEquals(2, pc.getRelList().size());\r\n-        assertTrue(((OpOrder) pc.getRelList().iterator().next()).\r\n-            getSecondary().startsWith(\"child\"));\r\n-        assertEquals(2, pc.getMappedRelList().size());\r\n-        assertTrue(((OpOrder) pc.getMappedRelList().iterator().next()).\r\n-            getSecondary().startsWith(\"mapped\"));\r\n-        assertEquals(2, pc.getInverseKeyRelList().size());\r\n-        assertTrue(((OpOrder) pc.getInverseKeyRelList().iterator().\r\n-            next()).getSecondary().startsWith(\"inverse\"));\r\n-        em.close();\r\n-    }\r\n-\r\n-\r\n-\r\n-    private OpOrder insert() {\r\n-        OpOrderPCSub pc = new OpOrderPCSub();\r\n-        pc.setSecondary(\"pc\");\r\n-        pc.setSub(\"pcsub\");\r\n-        OpOrderPCSub rel = new OpOrderPCSub();\r\n-        rel.setSecondary(\"rel\");\r\n-        pc.setRel(rel);\r\n-        for (int i = 0; i < 2; i++) {\r\n-            OpOrderPCSub child = new OpOrderPCSub();\r\n-            child.setSecondary(\"child\" + i);\r\n-            pc.getRelList().add(child);\r\n-\r\n-            OpOrderPCSub mapped = new OpOrderPCSub();\r\n-            mapped.setSecondary(\"mapped\" + i);\r\n-            mapped.setOwner(pc);\r\n-            pc.getMappedRelList().add(mapped);\r\n-\r\n-            OpOrderPCSub inverse = new OpOrderPCSub();\r\n-            inverse.setSecondary(\"inverse\" + i);\r\n-            pc.getInverseKeyRelList().add(inverse);\r\n-        }\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-        em.persist(rel);\r\n-        persistAll(em,pc.getInverseKeyRelList());\r\n-        em.persist(pc);\r\n-        endTx(em);\r\n-        OpOrder oid = em.find(OpOrder.class,pc.getId());\r\n-        //em.getObjectId(pc);\r\n-        em.close();\r\n-        return oid;\r\n-    }\r\n-\r\n-    private OpOrder insertAutoAssign() {\r\n-        AutoIncrementOpOrderPCSub pc = new AutoIncrementOpOrderPCSub();\r\n-        pc.setSecondary(\"pc\");\r\n-        pc.setSub(\"pcsub\");\r\n-        AutoIncrementOpOrderPCSub rel = new AutoIncrementOpOrderPCSub();\r\n-        rel.setSecondary(\"rel\");\r\n-        pc.setRel(rel);\r\n-        for (int i = 0; i < 2; i++) {\r\n-            AutoIncrementOpOrderPCSub child = new AutoIncrementOpOrderPCSub();\r\n-            child.setSecondary(\"child\" + i);\r\n-            pc.getRelList().add(child);\r\n-\r\n-            AutoIncrementOpOrderPCSub mapped = new AutoIncrementOpOrderPCSub();\r\n-            mapped.setSecondary(\"mapped\" + i);\r\n-            mapped.setOwner(pc);\r\n-            pc.getMappedRelList().add(mapped);\r\n-\r\n-            AutoIncrementOpOrderPCSub inverse = new AutoIncrementOpOrderPCSub();\r\n-            inverse.setSecondary(\"inverse\" + i);\r\n-            pc.getInverseKeyRelList().add(inverse);\r\n-        }\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        em.persist(rel);\r\n-        persistAll(em,pc.getInverseKeyRelList());\r\n-        em.persist(pc);\r\n-        endTx(em);\r\n-        OpOrder oid = em.find(AutoIncrementOpOrderPCSub.class,pc.getId());\r\n-        em.close();\r\n-        return oid;\r\n-    }\r\n-\r\n-\r\n-    private void insertCircularConstraintTest(boolean autoAssign) {\r\n-        OpOrder oid = (autoAssign) ? insertCircularAutoAssign()\r\n-            : insertCircular();\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        OpOrder pc1 = (OpOrder) em.find(OpOrder.class,oid.getId());\r\n-        assertEquals(\"pc1\", pc1.getSecondary());\r\n-        assertNotNull(pc1.getRel());\r\n-        assertEquals(\"pc2\", pc1.getRel().getSecondary());\r\n-        assertNotNull(pc1.getRel().getRel());\r\n-        assertEquals(pc1, pc1.getRel().getRel());\r\n-        em.close();\r\n-    }\r\n-\r\n-    private OpOrder insertCircular() {\r\n-        OpOrderPCSub pc1 = new OpOrderPCSub();\r\n-        pc1.setSecondary(\"pc1\");\r\n-        pc1.setSub(\"pcsub\");\r\n-        OpOrderPCSub pc2 = new OpOrderPCSub();\r\n-        pc2.setSecondary(\"pc2\");\r\n-        pc1.setRel(pc2);\r\n-        pc2.setRel(pc1);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        em.persist(pc1);\r\n-        em.persist(pc2);\r\n-        endTx(em);\r\n-        OpOrder oid = em.find(OpOrder.class,pc1.getId());\r\n-        em.close();\r\n-        return oid;\r\n-    }\r\n-\r\n-    private OpOrder insertCircularAutoAssign() {\r\n-        AutoIncrementOpOrderPCSub pc1 = new AutoIncrementOpOrderPCSub();\r\n-        pc1.setSecondary(\"pc1\");\r\n-        pc1.setSub(\"pcsub\");\r\n-        AutoIncrementOpOrderPCSub pc2 = new AutoIncrementOpOrderPCSub();\r\n-        pc2.setSecondary(\"pc2\");\r\n-        pc1.setRel(pc2);\r\n-        pc2.setRel(pc1);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        em.persist(pc1);\r\n-        em.persist(pc2);\r\n-        endTx(em);\r\n-        OpOrder oid = em.find(OpOrder.class,pc1.getId());\r\n-        em.close();\r\n-        return oid;\r\n-    }\r\n-\r\n-\r\n-    private void deleteCircularTest(boolean autoAssign) {\r\n-        OpOrder oid = (autoAssign) ? insertCircularAutoAssign()\r\n-            : insertCircular();\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        OpOrder pc1 = (OpOrder) em.find(OpOrder.class,oid.getId());\r\n-        em.remove(pc1.getRel());\r\n-        em.remove(pc1);\r\n-        endTx(em);\r\n-        em.close();\r\n-\r\n-/*        pm = _pmf.getPersistenceManager();\r\n-        if (autoAssign)\r\n-            assertEquals(0, ((KodoExtent) pm.getExtent\r\n-                (AutoIncrementOpOrderPCSub.class, true)).list().size());\r\n-        else\r\n-            assertEquals(0, ((KodoExtent) pm.getExtent(OpOrderPC.class,\r\n-                true)).list().size());\r\n-        pm.close();\r\n-*/\r\n-    }\r\n-\r\n-    private void deleteTest(boolean autoAssign) {\r\n-        OpOrder oid = (autoAssign) ? insertAutoAssign() : insert();\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        OpOrder pc = (OpOrder) em.find(OpOrder.class,oid.getId());\r\n-        removeAll(em,pc.getMappedRelList());\r\n-        removeAll(em,pc.getInverseKeyRelList());\r\n-        removeAll(em,pc.getRelList());\r\n-        em.remove(pc.getRel());\r\n-        em.remove(pc);\r\n-        endTx(em);\r\n-        em.close();\r\n-/*\r\n-        pm = _pmf.getPersistenceManager();\r\n-        if (autoAssign)\r\n-            assertEquals(0, ((KodoExtent) pm.getExtent\r\n-                (AutoIncrementOpOrderPCSub.class, true)).list().size());\r\n-        else\r\n-            assertEquals(0, ((KodoExtent) pm.getExtent(OpOrderPC.class,\r\n-                true)).list().size());\r\n-        pm.close();\r\n-*/\r\n-    }\r\n-\r\n-\r\n-    public void testInsert() {\r\n-        insertTest(false);\r\n-    }\r\n-\r\n-    public void testAutoAssignInsert() {\r\n-        insertTest(true);\r\n-    }\r\n-\r\n-\r\n-    public void testDeleteCircular() {\r\n-        deleteCircularTest(false);\r\n-    }\r\n-\r\n-    public void testAutoAssignDeleteCircular() {\r\n-        deleteCircularTest(true);\r\n-    }\r\n-\r\n-    public void testDelete() {\r\n-        deleteTest(false);\r\n-    }\r\n-\r\n-    public void testAutoAssignDelete() {\r\n-        deleteTest(true);\r\n-    }\r\n-\r\n-\r\n-    public void testInsertCircularConstraint() {\r\n-        insertCircularConstraintTest(false);\r\n-    }\r\n-\r\n-    public void testAutoAssignInsertCircularConstraint() {\r\n-        insertCircularConstraintTest(true);\r\n-    }\r\n-\r\n-\r\n-\r\n-    private void persistAll(EntityManager em, List list) {\r\n-\r\n-\t\tIterator i = list.iterator();\r\n-\t\twhile(i.hasNext()) {\r\n-\t\t\tObject o = i.next();\r\n-\t\t\tem.persist(o);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\r\n-\tprivate void removeAll(EntityManager em, List list) {\r\n-\r\n-\t\tIterator i = list.iterator();\r\n-\t\twhile(i.hasNext()) {\r\n-\t\t\tObject o = i.next();\r\n-\t\t\tem.remove(o);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+\n+public class TestOperationOrderUpdateManager\n+    extends AbstractTestCase {\n+\n+\n+//\tprivate boolean  = true;//Boolean.valueOf(bool);\n+\n+\n+    private static boolean _mapped = false;\n+\n+    private EntityManagerFactory emf;\n+\n+    /*protected boolean skipTest() {\n+        if (!getName().startsWith(\"testAuto\"))\n+            return false;\n+\n+\t\temf = getEmf();\n+\n+\t\tJDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        return !dict.supportsAutoAssign;\n+    }\n+*/\n+    public TestOperationOrderUpdateManager(String name)\n+    {\n+    \tsuper(name);\n+    }\n+\n+    private void insertTest(boolean autoAssign) {\n+        OpOrder oid = (autoAssign) ? insertAutoAssign() : insert();\n+\n+        EntityManager em = currentEntityManager();\n+\n+        OpOrder pc = (OpOrder) em.find(OpOrder.class,oid.getId());\n+        assertEquals(\"pc\", pc.getSecondary());\n+        assertEquals(\"pcsub\", pc.getSub());\n+        assertNotNull(pc.getRel());\n+        assertEquals(\"rel\", pc.getRel().getSecondary());\n+        assertEquals(2, pc.getRelList().size());\n+        assertTrue(((OpOrder) pc.getRelList().iterator().next()).\n+            getSecondary().startsWith(\"child\"));\n+        assertEquals(2, pc.getMappedRelList().size());\n+        assertTrue(((OpOrder) pc.getMappedRelList().iterator().next()).\n+            getSecondary().startsWith(\"mapped\"));\n+        assertEquals(2, pc.getInverseKeyRelList().size());\n+        assertTrue(((OpOrder) pc.getInverseKeyRelList().iterator().\n+            next()).getSecondary().startsWith(\"inverse\"));\n+        em.close();\n+    }\n+\n+\n+\n+    private OpOrder insert() {\n+        OpOrderPCSub pc = new OpOrderPCSub();\n+        pc.setSecondary(\"pc\");\n+        pc.setSub(\"pcsub\");\n+        OpOrderPCSub rel = new OpOrderPCSub();\n+        rel.setSecondary(\"rel\");\n+        pc.setRel(rel);\n+        for (int i = 0; i < 2; i++) {\n+            OpOrderPCSub child = new OpOrderPCSub();\n+            child.setSecondary(\"child\" + i);\n+            pc.getRelList().add(child);\n+\n+            OpOrderPCSub mapped = new OpOrderPCSub();\n+            mapped.setSecondary(\"mapped\" + i);\n+            mapped.setOwner(pc);\n+            pc.getMappedRelList().add(mapped);\n+\n+            OpOrderPCSub inverse = new OpOrderPCSub();\n+            inverse.setSecondary(\"inverse\" + i);\n+            pc.getInverseKeyRelList().add(inverse);\n+        }\n+\n+        EntityManager em = currentEntityManager();\n+\t\tstartTx(em);\n+        em.persist(rel);\n+        persistAll(em,pc.getInverseKeyRelList());\n+        em.persist(pc);\n+        endTx(em);\n+        OpOrder oid = em.find(OpOrder.class,pc.getId());\n+        //em.getObjectId(pc);\n+        em.close();\n+        return oid;\n+    }\n+\n+    private OpOrder insertAutoAssign() {\n+        AutoIncrementOpOrderPCSub pc = new AutoIncrementOpOrderPCSub();\n+        pc.setSecondary(\"pc\");\n+        pc.setSub(\"pcsub\");\n+        AutoIncrementOpOrderPCSub rel = new AutoIncrementOpOrderPCSub();\n+        rel.setSecondary(\"rel\");\n+        pc.setRel(rel);\n+        for (int i = 0; i < 2; i++) {\n+            AutoIncrementOpOrderPCSub child = new AutoIncrementOpOrderPCSub();\n+            child.setSecondary(\"child\" + i);\n+            pc.getRelList().add(child);\n+\n+            AutoIncrementOpOrderPCSub mapped = new AutoIncrementOpOrderPCSub();\n+            mapped.setSecondary(\"mapped\" + i);\n+            mapped.setOwner(pc);\n+            pc.getMappedRelList().add(mapped);\n+\n+            AutoIncrementOpOrderPCSub inverse = new AutoIncrementOpOrderPCSub();\n+            inverse.setSecondary(\"inverse\" + i);\n+            pc.getInverseKeyRelList().add(inverse);\n+        }\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        em.persist(rel);\n+        persistAll(em,pc.getInverseKeyRelList());\n+        em.persist(pc);\n+        endTx(em);\n+        OpOrder oid = em.find(AutoIncrementOpOrderPCSub.class,pc.getId());\n+        em.close();\n+        return oid;\n+    }\n+\n+\n+    private void insertCircularConstraintTest(boolean autoAssign) {\n+        OpOrder oid = (autoAssign) ? insertCircularAutoAssign()\n+            : insertCircular();\n+\n+        EntityManager em = currentEntityManager();\n+        OpOrder pc1 = (OpOrder) em.find(OpOrder.class,oid.getId());\n+        assertEquals(\"pc1\", pc1.getSecondary());\n+        assertNotNull(pc1.getRel());\n+        assertEquals(\"pc2\", pc1.getRel().getSecondary());\n+        assertNotNull(pc1.getRel().getRel());\n+        assertEquals(pc1, pc1.getRel().getRel());\n+        em.close();\n+    }\n+\n+    private OpOrder insertCircular() {\n+        OpOrderPCSub pc1 = new OpOrderPCSub();\n+        pc1.setSecondary(\"pc1\");\n+        pc1.setSub(\"pcsub\");\n+        OpOrderPCSub pc2 = new OpOrderPCSub();\n+        pc2.setSecondary(\"pc2\");\n+        pc1.setRel(pc2);\n+        pc2.setRel(pc1);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        em.persist(pc1);\n+        em.persist(pc2);\n+        endTx(em);\n+        OpOrder oid = em.find(OpOrder.class,pc1.getId());\n+        em.close();\n+        return oid;\n+    }\n+\n+    private OpOrder insertCircularAutoAssign() {\n+        AutoIncrementOpOrderPCSub pc1 = new AutoIncrementOpOrderPCSub();\n+        pc1.setSecondary(\"pc1\");\n+        pc1.setSub(\"pcsub\");\n+        AutoIncrementOpOrderPCSub pc2 = new AutoIncrementOpOrderPCSub();\n+        pc2.setSecondary(\"pc2\");\n+        pc1.setRel(pc2);\n+        pc2.setRel(pc1);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        em.persist(pc1);\n+        em.persist(pc2);\n+        endTx(em);\n+        OpOrder oid = em.find(OpOrder.class,pc1.getId());\n+        em.close();\n+        return oid;\n+    }\n+\n+\n+    private void deleteCircularTest(boolean autoAssign) {\n+        OpOrder oid = (autoAssign) ? insertCircularAutoAssign()\n+            : insertCircular();\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        OpOrder pc1 = (OpOrder) em.find(OpOrder.class,oid.getId());\n+        em.remove(pc1.getRel());\n+        em.remove(pc1);\n+        endTx(em);\n+        em.close();\n+\n+/*        pm = _pmf.getPersistenceManager();\n+        if (autoAssign)\n+            assertEquals(0, ((KodoExtent) pm.getExtent\n+                (AutoIncrementOpOrderPCSub.class, true)).list().size());\n+        else\n+            assertEquals(0, ((KodoExtent) pm.getExtent(OpOrderPC.class,\n+                true)).list().size());\n+        pm.close();\n+*/\n+    }\n+\n+    private void deleteTest(boolean autoAssign) {\n+        OpOrder oid = (autoAssign) ? insertAutoAssign() : insert();\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        OpOrder pc = (OpOrder) em.find(OpOrder.class,oid.getId());\n+        removeAll(em,pc.getMappedRelList());\n+        removeAll(em,pc.getInverseKeyRelList());\n+        removeAll(em,pc.getRelList());\n+        em.remove(pc.getRel());\n+        em.remove(pc);\n+        endTx(em);\n+        em.close();\n+/*\n+        pm = _pmf.getPersistenceManager();\n+        if (autoAssign)\n+            assertEquals(0, ((KodoExtent) pm.getExtent\n+                (AutoIncrementOpOrderPCSub.class, true)).list().size());\n+        else\n+            assertEquals(0, ((KodoExtent) pm.getExtent(OpOrderPC.class,\n+                true)).list().size());\n+        pm.close();\n+*/\n+    }\n+\n+\n+    public void testInsert() {\n+        insertTest(false);\n+    }\n+\n+    public void testAutoAssignInsert() {\n+        insertTest(true);\n+    }\n+\n+\n+    public void testDeleteCircular() {\n+        deleteCircularTest(false);\n+    }\n+\n+    public void testAutoAssignDeleteCircular() {\n+        deleteCircularTest(true);\n+    }\n+\n+    public void testDelete() {\n+        deleteTest(false);\n+    }\n+\n+    public void testAutoAssignDelete() {\n+        deleteTest(true);\n+    }\n+\n+\n+    public void testInsertCircularConstraint() {\n+        insertCircularConstraintTest(false);\n+    }\n+\n+    public void testAutoAssignInsertCircularConstraint() {\n+        insertCircularConstraintTest(true);\n+    }\n+\n+\n+\n+    private void persistAll(EntityManager em, List list) {\n+\n+\t\tIterator i = list.iterator();\n+\t\twhile(i.hasNext()) {\n+\t\t\tObject o = i.next();\n+\t\t\tem.persist(o);\n+\t\t}\n+\t}\n+\n+\n+\tprivate void removeAll(EntityManager em, List list) {\n+\n+\t\tIterator i = list.iterator();\n+\t\twhile(i.hasNext()) {\n+\t\t\tObject o = i.next();\n+\t\t\tem.remove(o);\n+\t\t}\n+\t}\n+\n+\n+\n+\n+\n+\n+\n+}"},{"sha":"5a6ddfd0b147f38e91a3b5f246cbc13c69e059b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","status":"modified","additions":656,"deletions":656,"changes":1312,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,656 +1,656 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.*;\r\n-import org.apache.openjpa.jdbc.meta.*;\r\n-import org.apache.openjpa.jdbc.sql.*;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-//import org.apache.openjpa.kernel.Extent;\r\n-import org.apache.openjpa.persistence.Extent;\r\n-\r\n-/**\r\n- * <p>Test large result, to-many eager paging.</p>\r\n- *\r\n- */\r\n-public class TestPagingResultObjectProvider\r\n-    extends TestSQLListenerTestCase {\r\n-\r\n-\tprivate OpenJPAEntityManagerFactory emf;\r\n-\r\n-\tpublic TestPagingResultObjectProvider(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-    public void setUp() throws Exception{\r\n-\t\tsuper.setUp();\r\n-\t\temf = getEmf(getProps());\r\n-    \tEntityManager em =currentEntityManager();\r\n-    }\r\n-\r\n-\r\n-\r\n-    public boolean skipTest() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\r\n-        DBDictionary dict = conf.getDBDictionaryInstance();\r\n-        if (dict.joinSyntax == Join.SYNTAX_TRADITIONAL)\r\n-            return true;\r\n-\r\n-        // skip test case that requires subselect for DBs that don't support it\r\n-        if (\"testPagingRangeQuery\".equals(getName())\r\n-            || \"testNonPagingRangeQuery\".equals(getName())) {\r\n-            if (!conf.getDBDictionaryInstance().supportsSubselect)\r\n-                return true;\r\n-        }\r\n-\r\n-        return false;\r\n-    }\r\n-\r\n-\r\n-    public void testNonPagingExtent() {\r\n-        initializePagingPCs();\r\n-\r\n-        EntityManager em= currentEntityManager();\r\n-        //EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        Extent extent = kem.createExtent(PagingPC.class, true);\r\n-\r\n-        extent.getFetchPlan().setFetchBatchSize(0);\r\n-        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n-\r\n-        // if we only access the rel field, we should only have used 1 select\r\n-        List list = extent.list();\r\n-        assertEquals(4, list.size());\r\n-        assertRel(list, 4);\r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        sql.clear();\r\n-\r\n-        // now accessing the rels collection should add selects\r\n-        assertRels(list, 4);\r\n-        assertEquals(sql.toString(), 4, sql.size());\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testNonPagingQuery()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n-\r\n-\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n-\r\n-        //OpenJPAQuery q = kem.createQuery(PagingPC.class.getSimpleName(), \"intField >= 0\");\r\n-        OpenJPAQuery q = kem.createQuery(theQuery);\r\n-\r\n-        q.getFetchPlan().setFetchBatchSize(0);\r\n-        q.getFetchPlan().addFetchGroups(\"rel\");\r\n-\r\n-        // if we only access the rel field, we should only have used two\r\n-        // selects: one for the query and one for the size\r\n-        List list = (List) q.getResultList();\r\n-        assertEquals(4, list.size());\r\n-        assertRel(list, 4);\r\n-        assertEquals(sql.toString(), 2, sql.size());\r\n-        assertTrue((String) sql.get(0),\r\n-            matches(\" >= \", (String) sql.get(0)));\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" COUNT\", (String) sql.get(1)));\r\n-        sql.clear();\r\n-\r\n-        // now accessing the rels collection should add selects\r\n-        assertRels(list, 4);\r\n-        assertEquals(sql.toString(), 4, sql.size());\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    /**\r\n-     * Check that the rel field was retrieved correctly.\r\n-     */\r\n-   private void assertRel(List pcs, int size) {\r\n-        PagingPC pc;\r\n-        for (int i = 0; i < size; i++) {\r\n-            pc = (PagingPC) pcs.get(i);\r\n-            assertNotNull(pc.getRel());\r\n-            assertEquals(pc.getIntField() + 1, pc.getRel().getIntField());\r\n-        }\r\n-        try {\r\n-            pcs.get(size + 1);\r\n-            fail(\"Retrieved past end of list\");\r\n-        } catch (Exception e) {\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Check that the rels field was retrieved correctly.\r\n-     */\r\n-    private void assertRels(List pcs, int size) {\r\n-        PagingPC pc;\r\n-        for (int i = 0; i < size; i++) {\r\n-            pc = (PagingPC) pcs.get(i);\r\n-            assertEquals(2, pc.getRels().size());\r\n-            assertEquals(pc.getIntField() + 1, ((PagingHelperPC)\r\n-                pc.getRels().get(0)).getIntField());\r\n-            assertEquals(pc.getIntField() + 2, ((PagingHelperPC)\r\n-                pc.getRels().get(1)).getIntField());\r\n-        }\r\n-        try {\r\n-            pcs.get(size + 1);\r\n-            fail(\"Retrieved past end of list\");\r\n-        } catch (Exception e) {\r\n-        }\r\n-    }\r\n-\r\n-    public void testPagingExtent()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        Extent extent = kem.createExtent(PagingPC.class, true);\r\n-        extent.getFetchPlan().setFetchBatchSize(0);\r\n-        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n-        extent.getFetchPlan().addFetchGroup(\"rels\");\r\n-\r\n-\r\n-        // we should get two selects: the initial select and the IN eager stmnt\r\n-        List list = extent.list();\r\n-        assertEquals(4, list.size());\r\n-        assertRel(list, 4);\r\n-        assertRels(list, 4);\r\n-        assertEquals(sql.toString(), 2, sql.size());\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" IN \", (String) sql.get(1)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testPagingQuery()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-\r\n-\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n-        OpenJPAQuery q = kem.createQuery(theQuery);\r\n-        q.getFetchPlan().setFetchBatchSize(0);\r\n-        q.getFetchPlan().addFetchGroups(\"rel\");\r\n-        q.getFetchPlan().addFetchGroups(\"rels\");\r\n-\r\n-\r\n-        // we should get three selects: the initial select, the COUNT for the\r\n-        // size, and the IN eager stmnt\r\n-        List list = (List) q.getResultList();\r\n-        assertEquals(4, list.size());\r\n-        assertRel(list, 4);\r\n-        assertRels(list, 4);\r\n-        assertEquals(sql.toString(), 3, sql.size());\r\n-        assertTrue((String) sql.get(0),\r\n-            matches(\" >= \", (String) sql.get(0)));\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" COUNT\", (String) sql.get(1)));\r\n-        assertTrue((String) sql.get(2),\r\n-            matches(\" IN \", (String) sql.get(2)));\r\n-        assertFalse((String) sql.get(2),\r\n-            matches(\" >= \", (String) sql.get(2)));\r\n-        sql.clear();\r\n-\r\n-        // if we execute and traverse a result before getting the size, we\r\n-        // should only get 2 selects, since the caching of the page should\r\n-        // reach the end of the list and therefore know the total size\r\n-        list = (List) q.getResultList();\r\n-        list.get(0);\r\n-        assertEquals(4, list.size());\r\n-        assertRel(list, 4);\r\n-        assertRels(list, 4);\r\n-        assertEquals(sql.toString(), 2, sql.size());\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" IN \", (String) sql.get(1)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testPagingAppIdExtent()\r\n-        throws Exception {\r\n-        initializePagingAppIdPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        Extent extent = kem.createExtent(PagingAppIdPC.class, true);\r\n-\r\n-        extent.getFetchPlan().setFetchBatchSize(0);\r\n-        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n-        extent.getFetchPlan().addFetchGroup(\"rels\");\r\n-\r\n-        // we should get two selects: the initial select and the IN eager stmnt\r\n-        List list = extent.list();\r\n-        assertEquals(4, list.size());\r\n-        assertAppIdRel(list, 4);\r\n-        assertAppIdRels(list, 4);\r\n-        assertEquals(sql.toString(), 2, sql.size());\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" OR \", (String) sql.get(1)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testPagingAppIdQuery()\r\n-        throws Exception {\r\n-        initializePagingAppIdPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n-\r\n-\t\tString theQuery=\"select a FROM \"+PagingAppIdPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n-        OpenJPAQuery q = kem.createQuery(theQuery);\r\n-\r\n-\r\n-        q.getFetchPlan().setFetchBatchSize(0);\r\n-        q.getFetchPlan().addFetchGroups(\"rel\");\r\n-        q.getFetchPlan().addFetchGroups(\"rels\");\r\n-\r\n-        // we should get three selects: the initial select, the COUNT for the\r\n-        // size, and the OR eager stmnt\r\n-        List list = (List) q.getResultList();\r\n-        assertEquals(4, list.size());\r\n-        assertAppIdRel(list, 4);\r\n-        assertAppIdRels(list, 4);\r\n-        assertEquals(sql.toString(), 3, sql.size());\r\n-        assertTrue((String) sql.get(0),\r\n-            matches(\" >= \", (String) sql.get(0)));\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" COUNT\", (String) sql.get(1)));\r\n-        assertTrue((String) sql.get(2),\r\n-            matches(\" OR \", (String) sql.get(2)));\r\n-        assertFalse((String) sql.get(2),\r\n-            matches(\" >= \", (String) sql.get(2)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    /**\r\n-     * Check that the rel field was retrieved correctly.\r\n-     */\r\n-    private void assertAppIdRel(List pcs, int size) {\r\n-        PagingAppIdPC pc;\r\n-        for (int i = 0; i < size; i++) {\r\n-            pc = (PagingAppIdPC) pcs.get(i);\r\n-            assertNotNull(pc.getRel());\r\n-            assertEquals(pc.getIntField() + 1, pc.getRel().getIntField());\r\n-        }\r\n-        try {\r\n-            pcs.get(size + 1);\r\n-            fail(\"Retrieved past end of list\");\r\n-        } catch (Exception e) {\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Check that the rels field was retrieved correctly.\r\n-     */\r\n-    private void assertAppIdRels(List pcs, int size) {\r\n-        PagingAppIdPC pc;\r\n-        for (int i = 0; i < size; i++) {\r\n-            pc = (PagingAppIdPC) pcs.get(i);\r\n-            assertEquals(2, pc.getRels().size());\r\n-            assertEquals(pc.getIntField() + 1, ((PagingHelperPC)\r\n-                pc.getRels().get(0)).getIntField());\r\n-            assertEquals(pc.getIntField() + 2, ((PagingHelperPC)\r\n-                pc.getRels().get(1)).getIntField());\r\n-        }\r\n-        try {\r\n-            pcs.get(size + 1);\r\n-            fail(\"Retrieved past end of list\");\r\n-        } catch (Exception e) {\r\n-        }\r\n-    }\r\n-\r\n-    public void testMultiPageExtent()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n-        Extent extent = kem.createExtent(PagingPC.class, true);\r\n-\r\n-        extent.getFetchPlan().setFetchBatchSize(2);    // 2 pages of 2\r\n-        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n-        extent.getFetchPlan().addFetchGroup(\"rels\");\r\n-\r\n-        // we should get two selects: the initial select and the IN eager stmnt\r\n-        List list = extent.list();\r\n-        assertEquals(list.toString(), 4, list.size());\r\n-        assertRel(list, 4);\r\n-        assertRels(list, 4);\r\n-        assertEquals(sql.toString(), 3, sql.size());\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" IN \", (String) sql.get(1)));\r\n-        assertTrue((String) sql.get(2),\r\n-            matches(\" IN \", (String) sql.get(2)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testMultiPageQuery()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n-\r\n-\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n-        OpenJPAQuery q = kem.createQuery(theQuery);\r\n-\r\n-\r\n-\t\t//FIXME jthomas commenting till we find how ordering can be done\r\n-        //q.setOrdering(\"intField ascending\");\r\n-        q.getFetchPlan().setFetchBatchSize(2);    // 2 pages of 2\r\n-        q.getFetchPlan().addFetchGroup(\"rel\");\r\n-        q.getFetchPlan().addFetchGroup(\"rels\");\r\n-\r\n-        // we should get four selects: the initial select, the count, and the\r\n-        // two IN eager stmnts\r\n-        List list = (List) q.getResultList();\r\n-        assertEquals(list.toString(), 4, list.size());\r\n-        // so we don't have to re-execute to move back to beginning\r\n-        list = new ArrayList(list);\r\n-        assertRel(list, 4);\r\n-        assertRels(list, 4);\r\n-\r\n-        assertEquals(sql.toString(), 4, sql.size());\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" COUNT\", (String) sql.get(1)));\r\n-        assertTrue((String) sql.get(2),\r\n-            matches(\" IN \", (String) sql.get(2)));\r\n-        assertTrue((String) sql.get(3),\r\n-            matches(\" IN \", (String) sql.get(3)));\r\n-        sql.clear();\r\n-\r\n-        // if we access a result object on the second page, we should get only\r\n-        // three selects: the initial select, the count, and the IN eager stmnt\r\n-        // for page 2\r\n-        list = (List) q.getResultList();\r\n-        assertEquals(list.toString(), 4, list.size());\r\n-        PagingPC pc = (PagingPC) list.get(2);\r\n-        assertEquals(2, pc.getIntField());\r\n-        assertEquals(sql.toString(), 3, sql.size());\r\n-        assertTrue((String) sql.get(2),\r\n-            matches(\" IN\", (String) sql.get(2)));\r\n-\r\n-        assertRel(list, 4);\r\n-        assertRels(list, 4);\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testLastPageQuery()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n-\r\n-\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n-        OpenJPAQuery q = kem.createQuery(theQuery);\r\n-\r\n-\r\n-        //FIXME jthomas commenting till we find how ordering can be done\r\n-        //q.setOrdering(\"intField ascending\");\r\n-        q.getFetchPlan().setFetchBatchSize(3);    // 1 on page 2\r\n-        q.getFetchPlan().addFetchGroups(\"rel\");\r\n-        q.getFetchPlan().addFetchGroups(\"rels\");\r\n-\r\n-        // if we access a result object on the second page, we should get only\r\n-        // two selects: the initial select and the eager stmnt for page\r\n-        List list = (List) q.getResultList();\r\n-        PagingPC pc = (PagingPC) list.get(3);\r\n-        assertEquals(3, pc.getIntField());\r\n-        assertEquals(list.toString(), 4, list.size());\r\n-        assertEquals(sql.toString(), 2, sql.size());\r\n-        // for single result, should use standard select, not IN\r\n-        assertFalse((String) sql.get(1),\r\n-            matches(\" IN \", (String) sql.get(1)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testSingleResultPage()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-\t    EntityManager em =currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        Extent extent = kem.createExtent(PagingPC.class, true);\r\n-        extent.getFetchPlan().setFetchBatchSize(3);    // 1 on page 2\r\n-        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n-        extent.getFetchPlan().addFetchGroup(\"rels\");\r\n-\r\n-        // we should get two selects: the initial select and the IN eager stmnt\r\n-        List list = extent.list();\r\n-        assertEquals(list.toString(), 4, list.size());\r\n-        assertRel(list, 4);\r\n-        assertRels(list, 4);\r\n-        assertEquals(sql.toString(), 3, sql.size());\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" IN \", (String) sql.get(1)));\r\n-        assertFalse((String) sql.get(2),\r\n-            matches(\" IN \", (String) sql.get(2)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-  /*  public void testNonPagingRangeQuery()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        Query q = em.newQuery(PagingPC.class, \"intField >= 0\");\r\n-\r\n-        //FIXME jthomas commenting till we find how ordering can be done\r\n-        //q.setOrdering(\"intField ascending\");\r\n-        q.setRange(1, 3);\r\n-        q.getFetchPlan().setFetchSize(0);\r\n-        q.getFetchPlan().addGroup(\"rel\");\r\n-\r\n-        // if we only access the rel field, we should only have used one\r\n-        // select; there won't be a size select since the range will be\r\n-        // greedily consumed as it's so small\r\n-        List list = (List) q.execute();\r\n-        assertEquals(2, list.size());\r\n-        assertRel(list, 2);\r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertTrue((String) sql.get(0),\r\n-            matches(\" >= \", (String) sql.get(0)));\r\n-        sql.clear();\r\n-\r\n-        // now accessing the rels collection should add selects\r\n-        assertRels(list, 2);\r\n-        assertEquals(sql.toString(), 2, sql.size());\r\n-        sql.clear();\r\n-\r\n-        // now execute with a big range and small fetch size and bigger range\r\n-        // and this time we should get a select for the size too\r\n-        q.getFetchPlan().setFetchSize(2);\r\n-        q.setRange(1, 4);\r\n-        list = (List) q.execute();\r\n-        assertEquals(3, list.size());\r\n-        // so we don't have to re-execute to move back to beginning\r\n-        list = new ArrayList(list);\r\n-        assertRel(list, 3);\r\n-        assertEquals(sql.toString(), 2, sql.size());\r\n-        assertTrue((String) sql.get(0),\r\n-            matches(\" >= \", (String) sql.get(0)));\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" COUNT\", (String) sql.get(1)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-/*\r\n-    public void testPagingRangeQuery()\r\n-        throws Exception {\r\n-        initializePagingPCs();\r\n-\r\n-        EntityManager em =currentEntityManager();\r\n-        Query q = em.newQuery(PagingPC.class, \"intField >= 0\");\r\n-\r\n-        //FIXME jthomas commenting till we find how ordering can be done\r\n-        //q.setOrdering(\"intField ascending\");\r\n-        q.setRange(1, 3);\r\n-        q.getFetchPlan().setFetchSize(0);\r\n-        q.getFetchPlan().addGroup(\"rel\");\r\n-        q.getFetchPlan().addGroup(\"rels\");\r\n-\r\n-        // expect two selects: the primary select and the IN select; no size\r\n-        // select expected because the range will be consumed greedily since\r\n-        // it's so small\r\n-        List list = (List) q.execute();\r\n-        assertEquals(2, list.size());\r\n-        assertRel(list, 2);\r\n-        assertRels(list, 2);\r\n-        assertEquals(sql.toString(), 2, sql.size());\r\n-        assertTrue((String) sql.get(0),\r\n-            matches(\" >= \", (String) sql.get(0)));\r\n-        assertTrue(sql + \"\",\r\n-            matches(\" IN \", (String) sql.get(1)));\r\n-        sql.clear();\r\n-\r\n-        // now execute with a big range and small fetch size and bigger range\r\n-        // and this time we should get a select for the size too\r\n-        q.getFetchPlan().setFetchSize(2);\r\n-        q.setRange(1, 4);\r\n-        list = (List) q.execute();\r\n-        assertEquals(3, list.size());\r\n-        // so we don't have to re-execute to move back to beginning\r\n-        list = new ArrayList(list);\r\n-        assertRel(list, 3);\r\n-        assertRels(list, 3);\r\n-        assertEquals(sql.toString(), 4, sql.size());\r\n-        assertTrue((String) sql.get(0),\r\n-            matches(\" >= \", (String) sql.get(0)));\r\n-        assertTrue((String) sql.get(1),\r\n-            matches(\" COUNT\", (String) sql.get(1)));\r\n-        assertTrue((String) sql.get(2),\r\n-            matches(\" IN \", (String) sql.get(2)));\r\n-        assertFalse((String) sql.get(3),\r\n-            matches(\" IN \", (String) sql.get(3)));\r\n-        sql.clear();\r\n-\r\n-        em.close();\r\n-    }\r\n-*/\r\n-    private void initializePagingPCs() {\r\n-        EntityManager em =currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-       deleteAll(PagingPC.class,em);\r\n-       deleteAll(PagingHelperPC.class,em);\r\n-\r\n-        endTx(em);\r\n-\r\n-        startTx(em);\r\n-        PagingPC pc;\r\n-        PagingHelperPC rel;\r\n-        for (int i = 0; i < 4; i++) {\r\n-            pc = new PagingPC();\r\n-            pc.setIntField(i);\r\n-            rel = new PagingHelperPC();\r\n-            rel.setIntField(i + 1);\r\n-            pc.setRel(rel);\r\n-            pc.getRels().add(rel);\r\n-            rel = new PagingHelperPC();\r\n-            rel.setIntField(i + 2);\r\n-            pc.getRels().add(rel);\r\n-            em.persist(pc);\r\n-        }\r\n-\r\n-        endTx(em);\r\n-        em.close();\r\n-        sql.clear();\r\n-    }\r\n-\r\n-    private void initializePagingAppIdPCs() {\r\n-        EntityManager em =currentEntityManager();\r\n-        startTx(em);\r\n-       deleteAll(PagingAppIdPC.class,em);\r\n-       deleteAll(PagingHelperPC.class,em);\r\n-        startTx(em);\r\n-\r\n-        startTx(em);\r\n-        PagingAppIdPC pc;\r\n-        PagingHelperPC rel;\r\n-        for (int i = 0; i < 4; i++) {\r\n-            pc = new PagingAppIdPC();\r\n-            pc.setIntField(i);\r\n-            pc.setLongField(i + 100);\r\n-            rel = new PagingHelperPC();\r\n-            rel.setIntField(i + 1);\r\n-            pc.setRel(rel);\r\n-            pc.getRels().add(rel);\r\n-            rel = new PagingHelperPC();\r\n-            rel.setIntField(i + 2);\r\n-            pc.getRels().add(rel);\r\n-            em.persist(pc);\r\n-        }\r\n-\r\n-        endTx(em);\r\n-     \tem.close();\r\n-        sql.clear ();\r\n-\t}\r\n-\r\n-\tprivate Map getProps() {\r\n-\t\tMap props=new HashMap();\r\n-\t\tprops.put(\"openjpa.DataCache\", \"true\");\r\n-\t\tprops.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-\t\tprops.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-\t\tprops.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n-\t\t//propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n-\t\treturn props;\r\n-\t}\r\n-\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.*;\n+import org.apache.openjpa.jdbc.meta.*;\n+import org.apache.openjpa.jdbc.sql.*;\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+//import org.apache.openjpa.kernel.Extent;\n+import org.apache.openjpa.persistence.Extent;\n+\n+/**\n+ * <p>Test large result, to-many eager paging.</p>\n+ *\n+ */\n+public class TestPagingResultObjectProvider\n+    extends TestSQLListenerTestCase {\n+\n+\tprivate OpenJPAEntityManagerFactory emf;\n+\n+\tpublic TestPagingResultObjectProvider(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+    public void setUp() throws Exception{\n+\t\tsuper.setUp();\n+\t\temf = getEmf(getProps());\n+    \tEntityManager em =currentEntityManager();\n+    }\n+\n+\n+\n+    public boolean skipTest() {\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        if (dict.joinSyntax == Join.SYNTAX_TRADITIONAL)\n+            return true;\n+\n+        // skip test case that requires subselect for DBs that don't support it\n+        if (\"testPagingRangeQuery\".equals(getName())\n+            || \"testNonPagingRangeQuery\".equals(getName())) {\n+            if (!conf.getDBDictionaryInstance().supportsSubselect)\n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+\n+    public void testNonPagingExtent() {\n+        initializePagingPCs();\n+\n+        EntityManager em= currentEntityManager();\n+        //EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        Extent extent = kem.createExtent(PagingPC.class, true);\n+\n+        extent.getFetchPlan().setFetchBatchSize(0);\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\n+\n+        // if we only access the rel field, we should only have used 1 select\n+        List list = extent.list();\n+        assertEquals(4, list.size());\n+        assertRel(list, 4);\n+        assertEquals(sql.toString(), 1, sql.size());\n+        sql.clear();\n+\n+        // now accessing the rels collection should add selects\n+        assertRels(list, 4);\n+        assertEquals(sql.toString(), 4, sql.size());\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    public void testNonPagingQuery()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+\n+\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\n+\n+        //OpenJPAQuery q = kem.createQuery(PagingPC.class.getSimpleName(), \"intField >= 0\");\n+        OpenJPAQuery q = kem.createQuery(theQuery);\n+\n+        q.getFetchPlan().setFetchBatchSize(0);\n+        q.getFetchPlan().addFetchGroups(\"rel\");\n+\n+        // if we only access the rel field, we should only have used two\n+        // selects: one for the query and one for the size\n+        List list = (List) q.getResultList();\n+        assertEquals(4, list.size());\n+        assertRel(list, 4);\n+        assertEquals(sql.toString(), 2, sql.size());\n+        assertTrue((String) sql.get(0),\n+            matches(\" >= \", (String) sql.get(0)));\n+        assertTrue((String) sql.get(1),\n+            matches(\" COUNT\", (String) sql.get(1)));\n+        sql.clear();\n+\n+        // now accessing the rels collection should add selects\n+        assertRels(list, 4);\n+        assertEquals(sql.toString(), 4, sql.size());\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    /**\n+     * Check that the rel field was retrieved correctly.\n+     */\n+   private void assertRel(List pcs, int size) {\n+        PagingPC pc;\n+        for (int i = 0; i < size; i++) {\n+            pc = (PagingPC) pcs.get(i);\n+            assertNotNull(pc.getRel());\n+            assertEquals(pc.getIntField() + 1, pc.getRel().getIntField());\n+        }\n+        try {\n+            pcs.get(size + 1);\n+            fail(\"Retrieved past end of list\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    /**\n+     * Check that the rels field was retrieved correctly.\n+     */\n+    private void assertRels(List pcs, int size) {\n+        PagingPC pc;\n+        for (int i = 0; i < size; i++) {\n+            pc = (PagingPC) pcs.get(i);\n+            assertEquals(2, pc.getRels().size());\n+            assertEquals(pc.getIntField() + 1, ((PagingHelperPC)\n+                pc.getRels().get(0)).getIntField());\n+            assertEquals(pc.getIntField() + 2, ((PagingHelperPC)\n+                pc.getRels().get(1)).getIntField());\n+        }\n+        try {\n+            pcs.get(size + 1);\n+            fail(\"Retrieved past end of list\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testPagingExtent()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        Extent extent = kem.createExtent(PagingPC.class, true);\n+        extent.getFetchPlan().setFetchBatchSize(0);\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\n+        extent.getFetchPlan().addFetchGroup(\"rels\");\n+\n+\n+        // we should get two selects: the initial select and the IN eager stmnt\n+        List list = extent.list();\n+        assertEquals(4, list.size());\n+        assertRel(list, 4);\n+        assertRels(list, 4);\n+        assertEquals(sql.toString(), 2, sql.size());\n+        assertTrue((String) sql.get(1),\n+            matches(\" IN \", (String) sql.get(1)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    public void testPagingQuery()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+\n+        EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+\n+\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\n+        OpenJPAQuery q = kem.createQuery(theQuery);\n+        q.getFetchPlan().setFetchBatchSize(0);\n+        q.getFetchPlan().addFetchGroups(\"rel\");\n+        q.getFetchPlan().addFetchGroups(\"rels\");\n+\n+\n+        // we should get three selects: the initial select, the COUNT for the\n+        // size, and the IN eager stmnt\n+        List list = (List) q.getResultList();\n+        assertEquals(4, list.size());\n+        assertRel(list, 4);\n+        assertRels(list, 4);\n+        assertEquals(sql.toString(), 3, sql.size());\n+        assertTrue((String) sql.get(0),\n+            matches(\" >= \", (String) sql.get(0)));\n+        assertTrue((String) sql.get(1),\n+            matches(\" COUNT\", (String) sql.get(1)));\n+        assertTrue((String) sql.get(2),\n+            matches(\" IN \", (String) sql.get(2)));\n+        assertFalse((String) sql.get(2),\n+            matches(\" >= \", (String) sql.get(2)));\n+        sql.clear();\n+\n+        // if we execute and traverse a result before getting the size, we\n+        // should only get 2 selects, since the caching of the page should\n+        // reach the end of the list and therefore know the total size\n+        list = (List) q.getResultList();\n+        list.get(0);\n+        assertEquals(4, list.size());\n+        assertRel(list, 4);\n+        assertRels(list, 4);\n+        assertEquals(sql.toString(), 2, sql.size());\n+        assertTrue((String) sql.get(1),\n+            matches(\" IN \", (String) sql.get(1)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    public void testPagingAppIdExtent()\n+        throws Exception {\n+        initializePagingAppIdPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        Extent extent = kem.createExtent(PagingAppIdPC.class, true);\n+\n+        extent.getFetchPlan().setFetchBatchSize(0);\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\n+        extent.getFetchPlan().addFetchGroup(\"rels\");\n+\n+        // we should get two selects: the initial select and the IN eager stmnt\n+        List list = extent.list();\n+        assertEquals(4, list.size());\n+        assertAppIdRel(list, 4);\n+        assertAppIdRels(list, 4);\n+        assertEquals(sql.toString(), 2, sql.size());\n+        assertTrue((String) sql.get(1),\n+            matches(\" OR \", (String) sql.get(1)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    public void testPagingAppIdQuery()\n+        throws Exception {\n+        initializePagingAppIdPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+\n+\t\tString theQuery=\"select a FROM \"+PagingAppIdPC.class.getSimpleName()+\" a where a.intField >= 0\";\n+        OpenJPAQuery q = kem.createQuery(theQuery);\n+\n+\n+        q.getFetchPlan().setFetchBatchSize(0);\n+        q.getFetchPlan().addFetchGroups(\"rel\");\n+        q.getFetchPlan().addFetchGroups(\"rels\");\n+\n+        // we should get three selects: the initial select, the COUNT for the\n+        // size, and the OR eager stmnt\n+        List list = (List) q.getResultList();\n+        assertEquals(4, list.size());\n+        assertAppIdRel(list, 4);\n+        assertAppIdRels(list, 4);\n+        assertEquals(sql.toString(), 3, sql.size());\n+        assertTrue((String) sql.get(0),\n+            matches(\" >= \", (String) sql.get(0)));\n+        assertTrue((String) sql.get(1),\n+            matches(\" COUNT\", (String) sql.get(1)));\n+        assertTrue((String) sql.get(2),\n+            matches(\" OR \", (String) sql.get(2)));\n+        assertFalse((String) sql.get(2),\n+            matches(\" >= \", (String) sql.get(2)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    /**\n+     * Check that the rel field was retrieved correctly.\n+     */\n+    private void assertAppIdRel(List pcs, int size) {\n+        PagingAppIdPC pc;\n+        for (int i = 0; i < size; i++) {\n+            pc = (PagingAppIdPC) pcs.get(i);\n+            assertNotNull(pc.getRel());\n+            assertEquals(pc.getIntField() + 1, pc.getRel().getIntField());\n+        }\n+        try {\n+            pcs.get(size + 1);\n+            fail(\"Retrieved past end of list\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    /**\n+     * Check that the rels field was retrieved correctly.\n+     */\n+    private void assertAppIdRels(List pcs, int size) {\n+        PagingAppIdPC pc;\n+        for (int i = 0; i < size; i++) {\n+            pc = (PagingAppIdPC) pcs.get(i);\n+            assertEquals(2, pc.getRels().size());\n+            assertEquals(pc.getIntField() + 1, ((PagingHelperPC)\n+                pc.getRels().get(0)).getIntField());\n+            assertEquals(pc.getIntField() + 2, ((PagingHelperPC)\n+                pc.getRels().get(1)).getIntField());\n+        }\n+        try {\n+            pcs.get(size + 1);\n+            fail(\"Retrieved past end of list\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testMultiPageExtent()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+        Extent extent = kem.createExtent(PagingPC.class, true);\n+\n+        extent.getFetchPlan().setFetchBatchSize(2);    // 2 pages of 2\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\n+        extent.getFetchPlan().addFetchGroup(\"rels\");\n+\n+        // we should get two selects: the initial select and the IN eager stmnt\n+        List list = extent.list();\n+        assertEquals(list.toString(), 4, list.size());\n+        assertRel(list, 4);\n+        assertRels(list, 4);\n+        assertEquals(sql.toString(), 3, sql.size());\n+        assertTrue((String) sql.get(1),\n+            matches(\" IN \", (String) sql.get(1)));\n+        assertTrue((String) sql.get(2),\n+            matches(\" IN \", (String) sql.get(2)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    public void testMultiPageQuery()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+\n+\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\n+        OpenJPAQuery q = kem.createQuery(theQuery);\n+\n+\n+\t\t//FIXME jthomas commenting till we find how ordering can be done\n+        //q.setOrdering(\"intField ascending\");\n+        q.getFetchPlan().setFetchBatchSize(2);    // 2 pages of 2\n+        q.getFetchPlan().addFetchGroup(\"rel\");\n+        q.getFetchPlan().addFetchGroup(\"rels\");\n+\n+        // we should get four selects: the initial select, the count, and the\n+        // two IN eager stmnts\n+        List list = (List) q.getResultList();\n+        assertEquals(list.toString(), 4, list.size());\n+        // so we don't have to re-execute to move back to beginning\n+        list = new ArrayList(list);\n+        assertRel(list, 4);\n+        assertRels(list, 4);\n+\n+        assertEquals(sql.toString(), 4, sql.size());\n+        assertTrue((String) sql.get(1),\n+            matches(\" COUNT\", (String) sql.get(1)));\n+        assertTrue((String) sql.get(2),\n+            matches(\" IN \", (String) sql.get(2)));\n+        assertTrue((String) sql.get(3),\n+            matches(\" IN \", (String) sql.get(3)));\n+        sql.clear();\n+\n+        // if we access a result object on the second page, we should get only\n+        // three selects: the initial select, the count, and the IN eager stmnt\n+        // for page 2\n+        list = (List) q.getResultList();\n+        assertEquals(list.toString(), 4, list.size());\n+        PagingPC pc = (PagingPC) list.get(2);\n+        assertEquals(2, pc.getIntField());\n+        assertEquals(sql.toString(), 3, sql.size());\n+        assertTrue((String) sql.get(2),\n+            matches(\" IN\", (String) sql.get(2)));\n+\n+        assertRel(list, 4);\n+        assertRels(list, 4);\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    public void testLastPageQuery()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+\n+\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\n+        OpenJPAQuery q = kem.createQuery(theQuery);\n+\n+\n+        //FIXME jthomas commenting till we find how ordering can be done\n+        //q.setOrdering(\"intField ascending\");\n+        q.getFetchPlan().setFetchBatchSize(3);    // 1 on page 2\n+        q.getFetchPlan().addFetchGroups(\"rel\");\n+        q.getFetchPlan().addFetchGroups(\"rels\");\n+\n+        // if we access a result object on the second page, we should get only\n+        // two selects: the initial select and the eager stmnt for page\n+        List list = (List) q.getResultList();\n+        PagingPC pc = (PagingPC) list.get(3);\n+        assertEquals(3, pc.getIntField());\n+        assertEquals(list.toString(), 4, list.size());\n+        assertEquals(sql.toString(), 2, sql.size());\n+        // for single result, should use standard select, not IN\n+        assertFalse((String) sql.get(1),\n+            matches(\" IN \", (String) sql.get(1)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+    public void testSingleResultPage()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+\t    EntityManager em =currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        Extent extent = kem.createExtent(PagingPC.class, true);\n+        extent.getFetchPlan().setFetchBatchSize(3);    // 1 on page 2\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\n+        extent.getFetchPlan().addFetchGroup(\"rels\");\n+\n+        // we should get two selects: the initial select and the IN eager stmnt\n+        List list = extent.list();\n+        assertEquals(list.toString(), 4, list.size());\n+        assertRel(list, 4);\n+        assertRels(list, 4);\n+        assertEquals(sql.toString(), 3, sql.size());\n+        assertTrue((String) sql.get(1),\n+            matches(\" IN \", (String) sql.get(1)));\n+        assertFalse((String) sql.get(2),\n+            matches(\" IN \", (String) sql.get(2)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+\n+  /*  public void testNonPagingRangeQuery()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        Query q = em.newQuery(PagingPC.class, \"intField >= 0\");\n+\n+        //FIXME jthomas commenting till we find how ordering can be done\n+        //q.setOrdering(\"intField ascending\");\n+        q.setRange(1, 3);\n+        q.getFetchPlan().setFetchSize(0);\n+        q.getFetchPlan().addGroup(\"rel\");\n+\n+        // if we only access the rel field, we should only have used one\n+        // select; there won't be a size select since the range will be\n+        // greedily consumed as it's so small\n+        List list = (List) q.execute();\n+        assertEquals(2, list.size());\n+        assertRel(list, 2);\n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertTrue((String) sql.get(0),\n+            matches(\" >= \", (String) sql.get(0)));\n+        sql.clear();\n+\n+        // now accessing the rels collection should add selects\n+        assertRels(list, 2);\n+        assertEquals(sql.toString(), 2, sql.size());\n+        sql.clear();\n+\n+        // now execute with a big range and small fetch size and bigger range\n+        // and this time we should get a select for the size too\n+        q.getFetchPlan().setFetchSize(2);\n+        q.setRange(1, 4);\n+        list = (List) q.execute();\n+        assertEquals(3, list.size());\n+        // so we don't have to re-execute to move back to beginning\n+        list = new ArrayList(list);\n+        assertRel(list, 3);\n+        assertEquals(sql.toString(), 2, sql.size());\n+        assertTrue((String) sql.get(0),\n+            matches(\" >= \", (String) sql.get(0)));\n+        assertTrue((String) sql.get(1),\n+            matches(\" COUNT\", (String) sql.get(1)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+/*\n+    public void testPagingRangeQuery()\n+        throws Exception {\n+        initializePagingPCs();\n+\n+        EntityManager em =currentEntityManager();\n+        Query q = em.newQuery(PagingPC.class, \"intField >= 0\");\n+\n+        //FIXME jthomas commenting till we find how ordering can be done\n+        //q.setOrdering(\"intField ascending\");\n+        q.setRange(1, 3);\n+        q.getFetchPlan().setFetchSize(0);\n+        q.getFetchPlan().addGroup(\"rel\");\n+        q.getFetchPlan().addGroup(\"rels\");\n+\n+        // expect two selects: the primary select and the IN select; no size\n+        // select expected because the range will be consumed greedily since\n+        // it's so small\n+        List list = (List) q.execute();\n+        assertEquals(2, list.size());\n+        assertRel(list, 2);\n+        assertRels(list, 2);\n+        assertEquals(sql.toString(), 2, sql.size());\n+        assertTrue((String) sql.get(0),\n+            matches(\" >= \", (String) sql.get(0)));\n+        assertTrue(sql + \"\",\n+            matches(\" IN \", (String) sql.get(1)));\n+        sql.clear();\n+\n+        // now execute with a big range and small fetch size and bigger range\n+        // and this time we should get a select for the size too\n+        q.getFetchPlan().setFetchSize(2);\n+        q.setRange(1, 4);\n+        list = (List) q.execute();\n+        assertEquals(3, list.size());\n+        // so we don't have to re-execute to move back to beginning\n+        list = new ArrayList(list);\n+        assertRel(list, 3);\n+        assertRels(list, 3);\n+        assertEquals(sql.toString(), 4, sql.size());\n+        assertTrue((String) sql.get(0),\n+            matches(\" >= \", (String) sql.get(0)));\n+        assertTrue((String) sql.get(1),\n+            matches(\" COUNT\", (String) sql.get(1)));\n+        assertTrue((String) sql.get(2),\n+            matches(\" IN \", (String) sql.get(2)));\n+        assertFalse((String) sql.get(3),\n+            matches(\" IN \", (String) sql.get(3)));\n+        sql.clear();\n+\n+        em.close();\n+    }\n+*/\n+    private void initializePagingPCs() {\n+        EntityManager em =currentEntityManager();\n+        startTx(em);\n+\n+       deleteAll(PagingPC.class,em);\n+       deleteAll(PagingHelperPC.class,em);\n+\n+        endTx(em);\n+\n+        startTx(em);\n+        PagingPC pc;\n+        PagingHelperPC rel;\n+        for (int i = 0; i < 4; i++) {\n+            pc = new PagingPC();\n+            pc.setIntField(i);\n+            rel = new PagingHelperPC();\n+            rel.setIntField(i + 1);\n+            pc.setRel(rel);\n+            pc.getRels().add(rel);\n+            rel = new PagingHelperPC();\n+            rel.setIntField(i + 2);\n+            pc.getRels().add(rel);\n+            em.persist(pc);\n+        }\n+\n+        endTx(em);\n+        em.close();\n+        sql.clear();\n+    }\n+\n+    private void initializePagingAppIdPCs() {\n+        EntityManager em =currentEntityManager();\n+        startTx(em);\n+       deleteAll(PagingAppIdPC.class,em);\n+       deleteAll(PagingHelperPC.class,em);\n+        startTx(em);\n+\n+        startTx(em);\n+        PagingAppIdPC pc;\n+        PagingHelperPC rel;\n+        for (int i = 0; i < 4; i++) {\n+            pc = new PagingAppIdPC();\n+            pc.setIntField(i);\n+            pc.setLongField(i + 100);\n+            rel = new PagingHelperPC();\n+            rel.setIntField(i + 1);\n+            pc.setRel(rel);\n+            pc.getRels().add(rel);\n+            rel = new PagingHelperPC();\n+            rel.setIntField(i + 2);\n+            pc.getRels().add(rel);\n+            em.persist(pc);\n+        }\n+\n+        endTx(em);\n+     \tem.close();\n+        sql.clear ();\n+\t}\n+\n+\tprivate Map getProps() {\n+\t\tMap props=new HashMap();\n+\t\tprops.put(\"openjpa.DataCache\", \"true\");\n+\t\tprops.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+\t\tprops.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+\t\tprops.put(\"javax.jdo.option.IgnoreCache\", \"false\");\n+\t\t//propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\n+\t\treturn props;\n+\t}\n+\n+\n+}"},{"sha":"ef66634821d7e41c2b10f2700377fe28d451a60b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","status":"modified","additions":180,"deletions":180,"changes":360,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,180 +1,180 @@\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-import java.sql.*;\r\n-import java.util.*;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n-import org.apache.openjpa.jdbc.sql.ResultSetResult;\r\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n-import org.apache.openjpa.jdbc.kernel.GenericResultObjectProvider;\r\n-import org.apache.openjpa.lib.rop.ResultList;\r\n-import org.apache.openjpa.lib.rop.EagerResultList;\r\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n-import org.apache.openjpa.kernel.AbstractPCResultObjectProvider;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.FetchConfiguration;\r\n-/**\r\n- *\r\n- */\r\n-\r\n-\r\n-public class TestRawSQL extends BaseJDBCTest {\r\n-    \r\n-    /** Creates a new instance of TestRawSQL */\r\n-    private Object[] _oids = new Object[3];\r\n-    private String[] _strings = new String[]{ \"a\", \"b\", \"c\" };\r\n-    private int[] _ints = new int[]{ 1, 2, 3 };\r\n-\r\n-    public TestRawSQL(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-       deleteAll(RawSQL.class);\r\n-        EntityManager em = currentEntityManager();\r\n-        Broker broker = JPAFacadeHelper.toBroker(em);\r\n-\r\n-        broker.begin();\r\n-        RawSQL raw;\r\n-        for (int i = 0; i < _oids.length; i++) {\r\n-            raw = new RawSQL(_strings[i], _ints[i]);\r\n-            broker.persist(raw, null);\r\n-            _oids[i] = broker.getUserObject(raw);\r\n-        }\r\n-        broker.commit();\r\n-        broker.close();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testLoadWithResult()\r\n-        throws Exception {\r\n-        \r\n-        EntityManager em = currentEntityManager();\r\n-        Broker broker = JPAFacadeHelper.toBroker(em);\r\n-       \r\n-        JDBCStore store = (JDBCStore)broker.getStoreManager();\r\n-\r\n-        Connection conn = store.getConnection();\r\n-        Statement stmnt = conn.createStatement();\r\n-        ResultSet rs = stmnt.executeQuery(\"SELECT * FROM RAWSQL \"\r\n-        + \"ORDER BY INTFIELD\");\r\n-        ResultSetResult res = new ResultSetResult(rs,\r\n-        store.getConfiguration().getDBDictionaryInstance());\r\n-        ResultObjectProvider rop = new GenericResultObjectProvider\r\n-        (RawSQL.class, store, null, res);\r\n-        ResultList rl = new EagerResultList(rop);\r\n-        check(rl, broker);\r\n-        rl.close();\r\n-        broker.close();\r\n-        em.close();\r\n-    }\r\n-\r\n-        public void testLoadWithPCROP()\r\n-        throws Exception {\r\n-            \r\n-        EntityManager em = currentEntityManager();    \r\n-        Broker broker = JPAFacadeHelper.toBroker(em);\r\n-        ResultObjectProvider rop = new AbstractPCResultObjectProvider(broker) {\r\n-            private int _row = -1;\r\n-\r\n-            public boolean supportsRandomAccess() {\r\n-                return true;\r\n-            }\r\n-\r\n-            public boolean next() {\r\n-                return ++_row < _oids.length;\r\n-            }\r\n-\r\n-            public boolean absolute(int pos) {\r\n-                _row = pos;\r\n-                return _row < _oids.length;\r\n-            }\r\n-\r\n-            public int size() {\r\n-                return _oids.length;\r\n-            }\r\n-\r\n-            public void close() {\r\n-            }\r\n-\r\n-            public void handleCheckedException(Exception e) {\r\n-                throw new RuntimeException(e.toString());\r\n-            }\r\n-\r\n-            protected Object getObjectId(ClassMetaData meta) {\r\n-                return _oids[_row];\r\n-            }\r\n-\r\n-            protected Class getPCType() {\r\n-                return RawSQL.class;\r\n-            }\r\n-\r\n-            protected void load(OpenJPAStateManager sm, \r\n-                FetchConfiguration fetch) {\r\n-                ClassMetaData meta = sm.getMetaData();\r\n-                sm.storeStringField(meta.getField(\"stringField\").getIndex(),\r\n-                    _strings[_row]);\r\n-                sm.storeIntField(meta.getField(\"intField\").getIndex(),\r\n-                    _ints[_row]);\r\n-\r\n-                // note that we're not loading version info here, so the system\r\n-                // will go out and get it after this intial load; kinda neat\r\n-            }\r\n-        };\r\n-        ResultList rl = new EagerResultList(rop);\r\n-        check(rl, broker);\r\n-        rl.close();\r\n-        broker.close();\r\n-    }\r\n-\r\n-    \r\n-    \r\n-    private void check(ResultList rl, Broker broker) {\r\n-        RawSQL raw;\r\n-        int i = 0;\r\n-        for (Iterator itr = rl.iterator(); itr.hasNext(); i++) {\r\n-            raw = (RawSQL) itr.next();\r\n-            assertTrue(broker.getStateManager(raw).getLoaded().get(0));\r\n-            assertTrue(broker.getStateManager(raw).getLoaded().get(1));\r\n-            if (i < _oids.length) {\r\n-                assertEquals(_strings[i], raw.getStringField());\r\n-                assertEquals(_ints[i], raw.getIntField());\r\n-            }\r\n-        }\r\n-        assertEquals(_oids.length, i);\r\n-        assertEquals(_oids.length, rl.size());\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import java.sql.*;\n+import java.util.*;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.sql.ResultSetResult;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.jdbc.kernel.GenericResultObjectProvider;\n+import org.apache.openjpa.lib.rop.ResultList;\n+import org.apache.openjpa.lib.rop.EagerResultList;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.kernel.AbstractPCResultObjectProvider;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+/**\n+ *\n+ */\n+\n+\n+public class TestRawSQL extends BaseJDBCTest {\n+    \n+    /** Creates a new instance of TestRawSQL */\n+    private Object[] _oids = new Object[3];\n+    private String[] _strings = new String[]{ \"a\", \"b\", \"c\" };\n+    private int[] _ints = new int[]{ 1, 2, 3 };\n+\n+    public TestRawSQL(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+       deleteAll(RawSQL.class);\n+        EntityManager em = currentEntityManager();\n+        Broker broker = JPAFacadeHelper.toBroker(em);\n+\n+        broker.begin();\n+        RawSQL raw;\n+        for (int i = 0; i < _oids.length; i++) {\n+            raw = new RawSQL(_strings[i], _ints[i]);\n+            broker.persist(raw, null);\n+            _oids[i] = broker.getUserObject(raw);\n+        }\n+        broker.commit();\n+        broker.close();\n+        em.close();\n+    }\n+\n+    public void testLoadWithResult()\n+        throws Exception {\n+        \n+        EntityManager em = currentEntityManager();\n+        Broker broker = JPAFacadeHelper.toBroker(em);\n+       \n+        JDBCStore store = (JDBCStore)broker.getStoreManager();\n+\n+        Connection conn = store.getConnection();\n+        Statement stmnt = conn.createStatement();\n+        ResultSet rs = stmnt.executeQuery(\"SELECT * FROM RAWSQL \"\n+        + \"ORDER BY INTFIELD\");\n+        ResultSetResult res = new ResultSetResult(rs,\n+        store.getConfiguration().getDBDictionaryInstance());\n+        ResultObjectProvider rop = new GenericResultObjectProvider\n+        (RawSQL.class, store, null, res);\n+        ResultList rl = new EagerResultList(rop);\n+        check(rl, broker);\n+        rl.close();\n+        broker.close();\n+        em.close();\n+    }\n+\n+        public void testLoadWithPCROP()\n+        throws Exception {\n+            \n+        EntityManager em = currentEntityManager();    \n+        Broker broker = JPAFacadeHelper.toBroker(em);\n+        ResultObjectProvider rop = new AbstractPCResultObjectProvider(broker) {\n+            private int _row = -1;\n+\n+            public boolean supportsRandomAccess() {\n+                return true;\n+            }\n+\n+            public boolean next() {\n+                return ++_row < _oids.length;\n+            }\n+\n+            public boolean absolute(int pos) {\n+                _row = pos;\n+                return _row < _oids.length;\n+            }\n+\n+            public int size() {\n+                return _oids.length;\n+            }\n+\n+            public void close() {\n+            }\n+\n+            public void handleCheckedException(Exception e) {\n+                throw new RuntimeException(e.toString());\n+            }\n+\n+            protected Object getObjectId(ClassMetaData meta) {\n+                return _oids[_row];\n+            }\n+\n+            protected Class getPCType() {\n+                return RawSQL.class;\n+            }\n+\n+            protected void load(OpenJPAStateManager sm, \n+                FetchConfiguration fetch) {\n+                ClassMetaData meta = sm.getMetaData();\n+                sm.storeStringField(meta.getField(\"stringField\").getIndex(),\n+                    _strings[_row]);\n+                sm.storeIntField(meta.getField(\"intField\").getIndex(),\n+                    _ints[_row]);\n+\n+                // note that we're not loading version info here, so the system\n+                // will go out and get it after this intial load; kinda neat\n+            }\n+        };\n+        ResultList rl = new EagerResultList(rop);\n+        check(rl, broker);\n+        rl.close();\n+        broker.close();\n+    }\n+\n+    \n+    \n+    private void check(ResultList rl, Broker broker) {\n+        RawSQL raw;\n+        int i = 0;\n+        for (Iterator itr = rl.iterator(); itr.hasNext(); i++) {\n+            raw = (RawSQL) itr.next();\n+            assertTrue(broker.getStateManager(raw).getLoaded().get(0));\n+            assertTrue(broker.getStateManager(raw).getLoaded().get(1));\n+            if (i < _oids.length) {\n+                assertEquals(_strings[i], raw.getStringField());\n+                assertEquals(_ints[i], raw.getIntField());\n+            }\n+        }\n+        assertEquals(_oids.length, i);\n+        assertEquals(_oids.length, rl.size());\n+    }\n+    \n+    \n+}"},{"sha":"432b80ffe45e98dc5b8d91a2caa91e9cdbd9d796","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","status":"modified","additions":176,"deletions":176,"changes":352,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,176 +1,176 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-import java.util.*;\r\n-\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.lib.jdbc.*;\r\n-\r\n-/**\r\n- * Test case that provides access to all the SQL that is executed.\r\n- *\r\n- */\r\n-public abstract class TestSQLListenerTestCase\r\n-    extends BaseJDBCTest {\r\n-\r\n-    protected static final Collection brokers = new HashSet();\r\n-    public static List sql = new ArrayList();\r\n-\r\n-    public TestSQLListenerTestCase() {\r\n-    }\r\n-\r\n-    public TestSQLListenerTestCase(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        super.setUp();\r\n-        setUpTestCase();\r\n-        sql.clear();\r\n-    }\r\n-\r\n-    /**\r\n-     * Override for setUp() behavior.\r\n-     */\r\n-    public void setUpTestCase() {\r\n-    }\r\n-\r\n-    public final void tearDown()\r\n-        throws Exception {\r\n-        super.tearDown();\r\n-        tearDownTestCase();\r\n-        sql.clear();\r\n-    }\r\n-\r\n-    /**\r\n-     * Override for tearDown() behavior.\r\n-     */\r\n-    public void tearDownTestCase() {\r\n-    }\r\n-\r\n-    /**\r\n-     * Confirm that the specified SQL has been executed.\r\n-     *\r\n-     * @param sqlExp the SQL expression. E.g., \"SELECT FOO .*\"\r\n-     */\r\n-    public void assertSQL(String sqlExp)\r\n-        throws Exception {\r\n-        for (Iterator i = sql.iterator(); i.hasNext();) {\r\n-            String statement = (String) i.next();\r\n-            if (matches(sqlExp, statement))\r\n-                return;\r\n-        }\r\n-\r\n-        fail(\"Expected regular expression <\" + sqlExp + \"> to have\"\r\n-            + \" existed in SQL statements: \" + sql);\r\n-    }\r\n-\r\n-    /**\r\n-     * Confirm that the specified SQL has not been executed.\r\n-     *\r\n-     * @param sqlExp the SQL expression. E.g., \"SELECT BADCOLUMN .*\"\r\n-     */\r\n-    public void assertNotSQL(String sqlExp)\r\n-        throws Exception {\r\n-        boolean failed = false;\r\n-\r\n-        for (Iterator i = sql.iterator(); i.hasNext();) {\r\n-            String statement = (String) i.next();\r\n-            if (matches(sqlExp, statement))\r\n-                failed = true;\r\n-        }\r\n-\r\n-        if (failed)\r\n-            fail(\"Regular expression <\" + sqlExp + \">\"\r\n-                + \" should not have been executed in SQL statements: \" + sql);\r\n-    }\r\n-/*\r\n-\r\n-    public KodoPersistenceManager getPM() {\r\n-        KodoPersistenceManager pm = (KodoPersistenceManager) getPMFactory().\r\n-            getPersistenceManager();\r\n-        brokers.add(KodoJDOHelper.toBroker(pm));\r\n-        return pm;\r\n-    }\r\n-\r\n-    public KodoPersistenceManagerFactory getPMFactory() {\r\n-        return getPMFactory(null);\r\n-    }\r\n-    public BrokerFactory getBrokerFactory(String[] props) {\r\n-        String[] builtin = new String[]{\r\n-            \"openjpa.jdbc.JDBCListeners\", Listener.class.getName()\r\n-        };\r\n-\r\n-        if (props == null)\r\n-            props = builtin;\r\n-        else {\r\n-            String[] tmp = new String[props.length + builtin.length];\r\n-            System.arraycopy(props, 0, tmp, 0, props.length);\r\n-            System.arraycopy(builtin, 0, tmp, props.length, builtin.length);\r\n-            props = tmp;\r\n-        }\r\n-\r\n-        return super.getBrokerFactory(props);\r\n-    }\r\n-    public KodoPersistenceManagerFactory getPMFactory(String[] props) {\r\n-        String[] builtin = new String[]{\r\n-            \"openjpa.jdbc.JDBCListeners\", Listener.class.getName()\r\n-        };\r\n-\r\n-        if (props == null)\r\n-            props = builtin;\r\n-        else {\r\n-            String[] tmp = new String[props.length + builtin.length];\r\n-            System.arraycopy(props, 0, tmp, 0, props.length);\r\n-            System.arraycopy(builtin, 0, tmp, props.length, builtin.length);\r\n-            props = tmp;\r\n-        }\r\n-\r\n-        return super.getPMFactory(props);\r\n-    }\r\n-\r\n-    public Broker getBroker() {\r\n-        Broker broker = getBrokerFactory().newBroker();\r\n-        brokers.add(broker);\r\n-        return broker;\r\n-    }\r\n-\r\n-    public BrokerFactory getBrokerFactory() {\r\n-        return getBrokerFactory(null);\r\n-    }\r\n-\r\n-*/\r\n-\r\n-\r\n-\r\n-    public static class Listener\r\n-        extends AbstractJDBCListener {\r\n-\r\n-        public void beforeExecuteStatement(JDBCEvent event) {\r\n-            if (event.getSQL() != null)\r\n-                sql.add(event.getSQL());\r\n-\t\t}\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+import java.util.*;\n+\n+\n+import org.apache.openjpa.kernel.*;\n+\n+\n+\n+import org.apache.openjpa.lib.jdbc.*;\n+\n+/**\n+ * Test case that provides access to all the SQL that is executed.\n+ *\n+ */\n+public abstract class TestSQLListenerTestCase\n+    extends BaseJDBCTest {\n+\n+    protected static final Collection brokers = new HashSet();\n+    public static List sql = new ArrayList();\n+\n+    public TestSQLListenerTestCase() {\n+    }\n+\n+    public TestSQLListenerTestCase(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        super.setUp();\n+        setUpTestCase();\n+        sql.clear();\n+    }\n+\n+    /**\n+     * Override for setUp() behavior.\n+     */\n+    public void setUpTestCase() {\n+    }\n+\n+    public final void tearDown()\n+        throws Exception {\n+        super.tearDown();\n+        tearDownTestCase();\n+        sql.clear();\n+    }\n+\n+    /**\n+     * Override for tearDown() behavior.\n+     */\n+    public void tearDownTestCase() {\n+    }\n+\n+    /**\n+     * Confirm that the specified SQL has been executed.\n+     *\n+     * @param sqlExp the SQL expression. E.g., \"SELECT FOO .*\"\n+     */\n+    public void assertSQL(String sqlExp)\n+        throws Exception {\n+        for (Iterator i = sql.iterator(); i.hasNext();) {\n+            String statement = (String) i.next();\n+            if (matches(sqlExp, statement))\n+                return;\n+        }\n+\n+        fail(\"Expected regular expression <\" + sqlExp + \"> to have\"\n+            + \" existed in SQL statements: \" + sql);\n+    }\n+\n+    /**\n+     * Confirm that the specified SQL has not been executed.\n+     *\n+     * @param sqlExp the SQL expression. E.g., \"SELECT BADCOLUMN .*\"\n+     */\n+    public void assertNotSQL(String sqlExp)\n+        throws Exception {\n+        boolean failed = false;\n+\n+        for (Iterator i = sql.iterator(); i.hasNext();) {\n+            String statement = (String) i.next();\n+            if (matches(sqlExp, statement))\n+                failed = true;\n+        }\n+\n+        if (failed)\n+            fail(\"Regular expression <\" + sqlExp + \">\"\n+                + \" should not have been executed in SQL statements: \" + sql);\n+    }\n+/*\n+\n+    public KodoPersistenceManager getPM() {\n+        KodoPersistenceManager pm = (KodoPersistenceManager) getPMFactory().\n+            getPersistenceManager();\n+        brokers.add(KodoJDOHelper.toBroker(pm));\n+        return pm;\n+    }\n+\n+    public KodoPersistenceManagerFactory getPMFactory() {\n+        return getPMFactory(null);\n+    }\n+    public BrokerFactory getBrokerFactory(String[] props) {\n+        String[] builtin = new String[]{\n+            \"openjpa.jdbc.JDBCListeners\", Listener.class.getName()\n+        };\n+\n+        if (props == null)\n+            props = builtin;\n+        else {\n+            String[] tmp = new String[props.length + builtin.length];\n+            System.arraycopy(props, 0, tmp, 0, props.length);\n+            System.arraycopy(builtin, 0, tmp, props.length, builtin.length);\n+            props = tmp;\n+        }\n+\n+        return super.getBrokerFactory(props);\n+    }\n+    public KodoPersistenceManagerFactory getPMFactory(String[] props) {\n+        String[] builtin = new String[]{\n+            \"openjpa.jdbc.JDBCListeners\", Listener.class.getName()\n+        };\n+\n+        if (props == null)\n+            props = builtin;\n+        else {\n+            String[] tmp = new String[props.length + builtin.length];\n+            System.arraycopy(props, 0, tmp, 0, props.length);\n+            System.arraycopy(builtin, 0, tmp, props.length, builtin.length);\n+            props = tmp;\n+        }\n+\n+        return super.getPMFactory(props);\n+    }\n+\n+    public Broker getBroker() {\n+        Broker broker = getBrokerFactory().newBroker();\n+        brokers.add(broker);\n+        return broker;\n+    }\n+\n+    public BrokerFactory getBrokerFactory() {\n+        return getBrokerFactory(null);\n+    }\n+\n+*/\n+\n+\n+\n+    public static class Listener\n+        extends AbstractJDBCListener {\n+\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null)\n+                sql.add(event.getSQL());\n+\t\t}\n+\t}\n+}"},{"sha":"a8ed49f5b1b2847a5c1b1723f79249f974da24bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","status":"modified","additions":138,"deletions":138,"changes":276,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,138 +1,138 @@\n-/*\r\n- * TestUnknownSubclass.java\r\n- *\r\n- * Created on September 29, 2006, 3:55 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.kernel;\r\n-\r\n-\r\n-import java.sql.*;\r\n-import javax.sql.*;\r\n-import org.apache.openjpa.jdbc.conf.*;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-\r\n-\r\n-public class TestUnknownSubclass  extends JDBCTestCase {\r\n-\r\n-    private String parentName =\r\n-        \"openjpa.jdbc.kernel.UnknownSubclassParent\";\r\n-    private String childName =\r\n-        \"openjpa.jdbc.kernel.UnknownSubclassChild\";\r\n-\r\n-    /** Creates a new instance of TestUnknownSubclass */\r\n-    public TestUnknownSubclass() {\r\n-    }\r\n- \r\n-    public TestUnknownSubclass(String name) {\r\n-        super(name);\r\n-    }\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        // pcl: in the new (registration-less) system, this should not\r\n-        // matter.\r\n-        //assertNotRegistered (parentName);\r\n-        //assertNotRegistered (childName);\r\n-\r\n-        EntityManager em= currentEntityManager();\r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n-        \r\n-        \r\n-        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();\r\n-        boolean flat = !isInheritanceStrategyVertical();\r\n-\r\n-        DataSource ds = (DataSource) conf.getConnectionFactory();\r\n-        Connection c = ds.getConnection(conf.getConnectionUserName(),\r\n-            conf.getConnectionPassword());\r\n-        if (c.getAutoCommit())\r\n-            c.setAutoCommit(false);\r\n-\r\n-        c.createStatement()\r\n-            .executeUpdate(\"DELETE FROM UNKNOWNSUBCLASSPARENT\");\r\n-        if (!flat)\r\n-            c.createStatement()\r\n-                .executeUpdate(\"DELETE FROM UNKNOWNSUBCLASSCHILD\");\r\n-\r\n-        String insert = \"INSERT INTO UNKNOWNSUBCLASSPARENT\"\r\n-            + \"(TYP, ID, VERSN) VALUES (\";\r\n-\r\n-        c.createStatement().executeUpdate(insert\r\n-            + \"'\" + parentName + \"', 1, 1)\");\r\n-        c.createStatement().executeUpdate(insert\r\n-            + \"'\" + childName + \"', 2, 1)\");\r\n-\r\n-        if (!flat) {\r\n-            insert = \"INSERT INTO UNKNOWNSUBCLASSCHILD (ID) VALUES (\";\r\n-            c.createStatement().executeUpdate(insert + \"1)\");\r\n-            c.createStatement().executeUpdate(insert + \"2)\");\r\n-        }\r\n-\r\n-        c.commit();\r\n-        em.close();\r\n-        kem.close();\r\n-    }\r\n-\r\n-        public void testUnknownSubclass()\r\n-        throws Exception {\r\n-        // assertNotRegistered (parentName);\r\n-        // assertNotRegistered (childName);\r\n-\r\n-        Class c = UnknownSubclassParent.class;\r\n-\r\n-        // assertNotRegistered (childName);\r\n-\r\n-        EntityManager em= currentEntityManager();            \r\n-        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n-\r\n-        \r\n-        startTx(em);\r\n-        // c = UnknownSubclassChild.class;\r\n-\r\n-        //FIXME jthomas conversion incomplete \r\n-        /*\r\n-        assertSize(1, kem.createExtent(UnknownSubclassParent.class, false));\r\n-        assertSize(1, kem.newQuery(\r\n-            kem.createExtent(UnknownSubclassParent.class, false), \"\"));\r\n-\r\n-        assertSize(2, kem.createExtent(UnknownSubclassParent.class, true));\r\n-        assertSize(2, kem.createQuery(kem.createExtent(UnknownSubclassParent.class, true), \"\"));\r\n-        */\r\n-        endTx(em);\r\n-        \r\n-        em.close();\r\n-        kem.close();\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestUnknownSubclass.java\n+ *\n+ * Created on September 29, 2006, 3:55 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+\n+import java.sql.*;\n+import javax.sql.*;\n+import org.apache.openjpa.jdbc.conf.*;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+\n+public class TestUnknownSubclass  extends JDBCTestCase {\n+\n+    private String parentName =\n+        \"openjpa.jdbc.kernel.UnknownSubclassParent\";\n+    private String childName =\n+        \"openjpa.jdbc.kernel.UnknownSubclassChild\";\n+\n+    /** Creates a new instance of TestUnknownSubclass */\n+    public TestUnknownSubclass() {\n+    }\n+ \n+    public TestUnknownSubclass(String name) {\n+        super(name);\n+    }\n+    public void setUp()\n+        throws Exception {\n+        // pcl: in the new (registration-less) system, this should not\n+        // matter.\n+        //assertNotRegistered (parentName);\n+        //assertNotRegistered (childName);\n+\n+        EntityManager em= currentEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\n+        \n+        \n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();\n+        boolean flat = !isInheritanceStrategyVertical();\n+\n+        DataSource ds = (DataSource) conf.getConnectionFactory();\n+        Connection c = ds.getConnection(conf.getConnectionUserName(),\n+            conf.getConnectionPassword());\n+        if (c.getAutoCommit())\n+            c.setAutoCommit(false);\n+\n+        c.createStatement()\n+            .executeUpdate(\"DELETE FROM UNKNOWNSUBCLASSPARENT\");\n+        if (!flat)\n+            c.createStatement()\n+                .executeUpdate(\"DELETE FROM UNKNOWNSUBCLASSCHILD\");\n+\n+        String insert = \"INSERT INTO UNKNOWNSUBCLASSPARENT\"\n+            + \"(TYP, ID, VERSN) VALUES (\";\n+\n+        c.createStatement().executeUpdate(insert\n+            + \"'\" + parentName + \"', 1, 1)\");\n+        c.createStatement().executeUpdate(insert\n+            + \"'\" + childName + \"', 2, 1)\");\n+\n+        if (!flat) {\n+            insert = \"INSERT INTO UNKNOWNSUBCLASSCHILD (ID) VALUES (\";\n+            c.createStatement().executeUpdate(insert + \"1)\");\n+            c.createStatement().executeUpdate(insert + \"2)\");\n+        }\n+\n+        c.commit();\n+        em.close();\n+        kem.close();\n+    }\n+\n+        public void testUnknownSubclass()\n+        throws Exception {\n+        // assertNotRegistered (parentName);\n+        // assertNotRegistered (childName);\n+\n+        Class c = UnknownSubclassParent.class;\n+\n+        // assertNotRegistered (childName);\n+\n+        EntityManager em= currentEntityManager();            \n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+\n+        \n+        startTx(em);\n+        // c = UnknownSubclassChild.class;\n+\n+        //FIXME jthomas conversion incomplete \n+        /*\n+        assertSize(1, kem.createExtent(UnknownSubclassParent.class, false));\n+        assertSize(1, kem.newQuery(\n+            kem.createExtent(UnknownSubclassParent.class, false), \"\"));\n+\n+        assertSize(2, kem.createExtent(UnknownSubclassParent.class, true));\n+        assertSize(2, kem.createQuery(kem.createExtent(UnknownSubclassParent.class, true), \"\"));\n+        */\n+        endTx(em);\n+        \n+        em.close();\n+        kem.close();\n+    }\n+    \n+    \n+}"},{"sha":"518adfa5c067f4becd9da7f72e63c4da56d7d4b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","status":"modified","additions":264,"deletions":264,"changes":528,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,264 +1,264 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.mapping;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.*;\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-import junit.framework.*;\r\n-\r\n-\r\n-public class TestCompositeIdTraversalInSQLMapping extends AbstractTestCase \r\n-{\r\n-\t\r\n-\t\r\n-\tpublic TestCompositeIdTraversalInSQLMapping(String name)\r\n-\t{\r\n-\t\tsuper(name, \"jdbccactusapp\");\r\n-\t}\r\n-\r\n-\t\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll(OwnerOfEntityWithCompositeId.class);\r\n-\t\tdeleteAll(EntityWithCompositeId.class);\r\n-\t}\r\n-\tprivate void persist(Integer uniqueId, String uniqueName, String relName)\r\n-\t{\r\n-\t\tOwnerOfEntityWithCompositeId owner = new OwnerOfEntityWithCompositeId();\r\n-\t\tEntityWithCompositeId relative = new EntityWithCompositeId();\r\n-\t\towner.setName(uniqueName);\r\n-\t\trelative.setId(uniqueId);\r\n-\t\trelative.setName(relName);\r\n-\t\trelative.setValue(\"foo\");\r\n-\t\towner.setRelation(relative);\r\n-\t\t\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tem.persist(owner);\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\t}\r\n-\tpublic void testTraversalWhenSQLSelectsBothEndOfTheRelation ()\r\n-\t{\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tInteger uid  = new Integer((int) (System.currentTimeMillis()%100000));\r\n-\t\tString uName = \"P\"+uid;\r\n-\t\tString rName = \"R\"+uName;\r\n-\t\t\r\n-\t\tpersist(uid, uName, rName);\r\n-\t\t\r\n-\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID as REL_ID,\" +\r\n-\t\t             \"a.RELATION_NAME as REL_NAME, b.ID as C_ID,\" +\r\n-\t\t\t\t\t \"b.NAME as C_NAME, b.VALUE as C_VALUE \" +\r\n-\t\t             \"FROM OWNER_OF_COMPOSITE_ID a, COMPOSITE_ID b \" +\r\n-\t\t             \"WHERE a.RELATION_ID=b.ID AND a.RELATION_NAME=b.NAME \" +\r\n-\t\t             \"AND a.NAME='\" + uName + \"'\";\r\n-\t\t\r\n-\t\tQuery query = em.createNativeQuery(sql, \r\n-\t\t\t\"SQLSelectsBothEndOfTheRelation\");\r\n-\t\t\r\n-\t\tList result = query.getResultList();\r\n-\t\t\r\n-\t\tassertEquals(1,result.size());\r\n-\t\tObject object = result.get(0);\r\n-\t\tassertEquals(Object[].class, object.getClass());\r\n-\t\tObject[] array = (Object[])object;\r\n-\t\tassertEquals(2,array.length);\r\n-\t\tassertEquals(OwnerOfEntityWithCompositeId.class,array[0].getClass());\r\n-\t\tassertEquals(EntityWithCompositeId.class,array[1].getClass());\r\n-\t\t\r\n-\t\tOwnerOfEntityWithCompositeId owner = (OwnerOfEntityWithCompositeId)\r\n-\t\t\tarray[0];\r\n-\t\t\r\n-\t\tEntityWithCompositeId relative = (EntityWithCompositeId)array[1];\r\n-\t\t\r\n-\t\tassertEquals(uName, owner.getName());\r\n-\t\tassertEquals(owner.getRelation(), relative);\r\n-\t\tassertEquals(relative.getId(),uid);\r\n-\t\tassertEquals(relative.getName(), rName);\r\n-\t\tassertEquals(\"foo\", relative.getValue());\r\n-\t\tendEm(em);\r\n-\t}\r\n-\r\n-\tpublic void testTraversalWhenSQLSelectsOnlyOneEndOfTheRelation ()\r\n-\t{\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tInteger uid  = new Integer((int) (System.currentTimeMillis()%100000));\r\n-\t\tString uName = \"P\"+uid;\r\n-\t\tString rName = \"R\"+uName;\r\n-\t\t\r\n-\t\tpersist (uid, uName, rName);\r\n-\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID as REL_ID,\" +\r\n-\t\t             \"a.RELATION_NAME as REL_NAME \"+\r\n-\t\t             \"FROM OWNER_OF_COMPOSITE_ID a \" +\r\n-\t\t             \"WHERE  a.NAME='\" + uName + \"'\";\r\n-\t\t\r\n-\t\tQuery query = em.createNativeQuery(sql, \r\n-\t\t\t\"SQLSelectsOnlyOneEndOfTheRelation\");\r\n-\t\t\r\n-\t\tList result = query.getResultList();\r\n-\t\t\r\n-\t\tassertEquals(1,result.size());\r\n-\t\tObject object = result.get(0);\r\n-\t\tassertEquals(OwnerOfEntityWithCompositeId.class,object.getClass());\r\n-\t\t\r\n-\t\tOwnerOfEntityWithCompositeId owner = (OwnerOfEntityWithCompositeId)\r\n-\t\t\tobject;\r\n-\t\t\r\n-\t\tEntityWithCompositeId relative = owner.getRelation();\r\n-\t\t\r\n-\t\tassertEquals(uName, owner.getName());\r\n-\t\tassertEquals(relative.getId(),uid);\r\n-\t\tassertEquals(relative.getName(), rName);\r\n-\t\tassertEquals(\"foo\", relative.getValue());\r\n-\t\tendEm(em);\r\n-\t}\r\n-\tpublic void testTraversalWhenSQLSelectsUnrelatedInstances ()\r\n-\t{\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tInteger uid1  = new Integer((int) (System.currentTimeMillis()%100000));\r\n-\t\tInteger uid2  = new Integer(uid1.intValue()+1);\r\n-\t\tString uName1 = \"P\"+uid1;\r\n-\t\tString rName1 = \"R\"+uName1;\r\n-\t\tString uName2 = \"P\"+uid2;\r\n-\t\tString rName2 = \"R\"+uName2;\r\n-\t\t\r\n-\t\tpersist(uid1, uName1, rName1);\r\n-\t\tpersist(uid2, uName2, rName2);\r\n-\t\t\r\n-\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID AS REL_ID,\" +\r\n-        \"a.RELATION_NAME AS REL_NAME, \" +\r\n-        \"b.ID AS C_ID, b.NAME AS C_NAME, b.VALUE AS C_VALUE \"+\r\n-        \"FROM OWNER_OF_COMPOSITE_ID a, COMPOSITE_ID b \" +\r\n-        \"WHERE b.NAME='\"+ rName2 +\"' \" +\r\n-        \"AND a.NAME='\" + uName1 + \"'\";\r\n-\t\t\r\n-\t\tQuery query = em.createNativeQuery(sql, \r\n-\t\t\t\t\"SQLSelectsUnrelatedInstances\");\r\n-\t\t\r\n-\t\tList result = query.getResultList();\r\n-\t\t\r\n-\t\tassertEquals(1,result.size());\r\n-\t\tObject object = result.get(0);\r\n-\t\tassertEquals(Object[].class, object.getClass());\r\n-\t\tObject[] array = (Object[])object;\r\n-\t\tassertEquals(2,array.length);\r\n-\t\tassertEquals(OwnerOfEntityWithCompositeId.class,array[0].getClass());\r\n-\t\tassertEquals(EntityWithCompositeId.class,array[1].getClass());\r\n-\t\t\r\n-\t\tOwnerOfEntityWithCompositeId owner1 = (OwnerOfEntityWithCompositeId)\r\n-\t\t\tarray[0];\r\n-\t\tEntityWithCompositeId relative1 = owner1.getRelation();\r\n-\t\t\r\n-\t\tEntityWithCompositeId relative2 = (EntityWithCompositeId)array[1];\r\n-\t\t\r\n-\t\tassertEquals(uName1, owner1.getName());\r\n-\t\tassertEquals(uid1, relative1.getId());\r\n-\t\tassertEquals(rName1, relative1.getName());\r\n-\t\tassertEquals(uid2, relative2.getId());\r\n-\t\tassertEquals(rName2, relative2.getName());\r\n-\t\tendEm(em); \r\n-\t}\r\n-\t\r\n-\tpublic void testRecursiveTraversal () \r\n-\t{\r\n-\t\tInteger rootId  = new Integer((int)(System.currentTimeMillis()%100000));\r\n-\t\t\r\n-\t\tint depth = 3;\r\n-\t\tpersistChainedRelative(rootId, depth);\r\n-\t\t\r\n-\t\tString sql = createSelfJoinSQL(\"RECURSIVE_ENTITY\",\r\n-\t\t\t\tdepth,rootId);\r\n-\t\t\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tQuery query = em.createNativeQuery(sql, \"SQLSelectsChainedRelation\");\r\n-\r\n-\t\tList result = query.getResultList();\r\n-\t\t\r\n-\t\tassertEquals(1, result.size());\r\n-\t\tassertEquals(RecursiveEntityWithCompositeId.class,\r\n-\t\t\t\tresult.get(0).getClass());\r\n-\t\t\r\n-\t\tRecursiveEntityWithCompositeId root = (RecursiveEntityWithCompositeId)\r\n-\t\t\t\t\t\t\t\t\t\t\t\tresult.get(0);\r\n-\t\tassertEquals(rootId,root.getId());\r\n-\t\tassertEquals(\"P\"+rootId,root.getName());\r\n-\t\tfor (int i=1; i<depth;i++){\r\n-\t\t\tRecursiveEntityWithCompositeId relative = root.getRelation();\r\n-\t\t\tInteger expecetedId = root.getId()+1;\r\n-\t\t\tassertEquals (expecetedId,relative.getId());\r\n-\t\t\tassertEquals (\"P\"+expecetedId, relative.getName());\r\n-\t\t\troot = relative;\r\n-\t\t}\r\n-\t\t \r\n-\t}\r\n-\t\r\n-\tvoid persistChainedRelative(Integer rootId, int depth)\r\n-\t{\r\n-\t\tRecursiveEntityWithCompositeId root = \r\n-\t\t\tnew RecursiveEntityWithCompositeId();\r\n-\t\troot.setId(rootId);\r\n-\t\troot.setName(\"P\"+rootId);\r\n-\t\tRecursiveEntityWithCompositeId head = root;\r\n-\t\tfor (int i=1; i<=depth; i++)\r\n-\t\t{\r\n-\t\t\tRecursiveEntityWithCompositeId relation = \r\n-\t\t\t\tnew RecursiveEntityWithCompositeId();\r\n-\t\t\trelation.setId(rootId+i);\r\n-\t\t\trelation.setName(\"P\"+(rootId+i));\r\n-\t\t\thead.setRelation(relation);\r\n-\t\t\thead = relation;\r\n-\t\t}\r\n-\t\tEntityManager em = currentEntityManager();\r\n-\t\tstartTx(em);\r\n-\t\tem.persist(root);\r\n-\t\tendTx(em);\r\n-\t\tendEm(em);\r\n-\t}\r\n-\t\r\n-\tString createSelfJoinSQL(String table, int depth, int id)\r\n-\t{\r\n-\t\t\r\n-\t\tStringBuffer sql = new StringBuffer(\"SELECT \");\r\n-\t\tfor (int i=0; i<depth; i++)\r\n-\t\t\tsql.append(\"t\"+i+\".ID AS T\"+i+\"_ID, \")\r\n-\t\t\t   .append(\"t\"+i+\".NAME AS T\"+i+\"_NAME, \")\r\n-\t\t\t   .append(\"t\"+i+\".RELATION_ID AS T\"+i+\"_REL_ID, \")\r\n-\t\t\t   .append(\"t\"+i+\".RELATION_NAME AS T\"+i+\"_REL_NAME\")\r\n-\t\t\t   .append((i==(depth-1))?\" \" : \", \");\r\n-\t\t\r\n-\t\tsql.append(\" FROM \");\r\n-\t\tfor (int i=0; i<depth; i++)\r\n-\t\t\tsql.append(table + \" t\"+i)\r\n-\t\t\t   .append((i==(depth-1))?\" \" : \", \");\r\n-\t\t\r\n-\t\tsql.append(\" WHERE \");\r\n-\t\tfor (int i=0; i<(depth-1); i++)\r\n-\t\t\tsql.append(\"t\"+i+\".RELATION_ID=t\"+(i+1)+\".ID AND \")\r\n-\t\t\t   .append(\"t\"+i+\".RELATION_NAME=t\"+(i+1)+\".NAME AND \" );\r\n-\t\t\r\n-\t\tsql.append(\"t0.ID=\"+id);\r\n-\t\t\r\n-\t\treturn sql.toString();\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.mapping;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.*;\n+import org.apache.openjpa.persistence.common.utils.*;\n+import junit.framework.*;\n+\n+\n+public class TestCompositeIdTraversalInSQLMapping extends AbstractTestCase \n+{\n+\t\n+\t\n+\tpublic TestCompositeIdTraversalInSQLMapping(String name)\n+\t{\n+\t\tsuper(name, \"jdbccactusapp\");\n+\t}\n+\n+\t\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll(OwnerOfEntityWithCompositeId.class);\n+\t\tdeleteAll(EntityWithCompositeId.class);\n+\t}\n+\tprivate void persist(Integer uniqueId, String uniqueName, String relName)\n+\t{\n+\t\tOwnerOfEntityWithCompositeId owner = new OwnerOfEntityWithCompositeId();\n+\t\tEntityWithCompositeId relative = new EntityWithCompositeId();\n+\t\towner.setName(uniqueName);\n+\t\trelative.setId(uniqueId);\n+\t\trelative.setName(relName);\n+\t\trelative.setValue(\"foo\");\n+\t\towner.setRelation(relative);\n+\t\t\n+\t\tEntityManager em = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tem.persist(owner);\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\t}\n+\tpublic void testTraversalWhenSQLSelectsBothEndOfTheRelation ()\n+\t{\n+\t\tEntityManager em = currentEntityManager();\n+\t\tInteger uid  = new Integer((int) (System.currentTimeMillis()%100000));\n+\t\tString uName = \"P\"+uid;\n+\t\tString rName = \"R\"+uName;\n+\t\t\n+\t\tpersist(uid, uName, rName);\n+\t\t\n+\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID as REL_ID,\" +\n+\t\t             \"a.RELATION_NAME as REL_NAME, b.ID as C_ID,\" +\n+\t\t\t\t\t \"b.NAME as C_NAME, b.VALUE as C_VALUE \" +\n+\t\t             \"FROM OWNER_OF_COMPOSITE_ID a, COMPOSITE_ID b \" +\n+\t\t             \"WHERE a.RELATION_ID=b.ID AND a.RELATION_NAME=b.NAME \" +\n+\t\t             \"AND a.NAME='\" + uName + \"'\";\n+\t\t\n+\t\tQuery query = em.createNativeQuery(sql, \n+\t\t\t\"SQLSelectsBothEndOfTheRelation\");\n+\t\t\n+\t\tList result = query.getResultList();\n+\t\t\n+\t\tassertEquals(1,result.size());\n+\t\tObject object = result.get(0);\n+\t\tassertEquals(Object[].class, object.getClass());\n+\t\tObject[] array = (Object[])object;\n+\t\tassertEquals(2,array.length);\n+\t\tassertEquals(OwnerOfEntityWithCompositeId.class,array[0].getClass());\n+\t\tassertEquals(EntityWithCompositeId.class,array[1].getClass());\n+\t\t\n+\t\tOwnerOfEntityWithCompositeId owner = (OwnerOfEntityWithCompositeId)\n+\t\t\tarray[0];\n+\t\t\n+\t\tEntityWithCompositeId relative = (EntityWithCompositeId)array[1];\n+\t\t\n+\t\tassertEquals(uName, owner.getName());\n+\t\tassertEquals(owner.getRelation(), relative);\n+\t\tassertEquals(relative.getId(),uid);\n+\t\tassertEquals(relative.getName(), rName);\n+\t\tassertEquals(\"foo\", relative.getValue());\n+\t\tendEm(em);\n+\t}\n+\n+\tpublic void testTraversalWhenSQLSelectsOnlyOneEndOfTheRelation ()\n+\t{\n+\t\tEntityManager em = currentEntityManager();\n+\t\tInteger uid  = new Integer((int) (System.currentTimeMillis()%100000));\n+\t\tString uName = \"P\"+uid;\n+\t\tString rName = \"R\"+uName;\n+\t\t\n+\t\tpersist (uid, uName, rName);\n+\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID as REL_ID,\" +\n+\t\t             \"a.RELATION_NAME as REL_NAME \"+\n+\t\t             \"FROM OWNER_OF_COMPOSITE_ID a \" +\n+\t\t             \"WHERE  a.NAME='\" + uName + \"'\";\n+\t\t\n+\t\tQuery query = em.createNativeQuery(sql, \n+\t\t\t\"SQLSelectsOnlyOneEndOfTheRelation\");\n+\t\t\n+\t\tList result = query.getResultList();\n+\t\t\n+\t\tassertEquals(1,result.size());\n+\t\tObject object = result.get(0);\n+\t\tassertEquals(OwnerOfEntityWithCompositeId.class,object.getClass());\n+\t\t\n+\t\tOwnerOfEntityWithCompositeId owner = (OwnerOfEntityWithCompositeId)\n+\t\t\tobject;\n+\t\t\n+\t\tEntityWithCompositeId relative = owner.getRelation();\n+\t\t\n+\t\tassertEquals(uName, owner.getName());\n+\t\tassertEquals(relative.getId(),uid);\n+\t\tassertEquals(relative.getName(), rName);\n+\t\tassertEquals(\"foo\", relative.getValue());\n+\t\tendEm(em);\n+\t}\n+\tpublic void testTraversalWhenSQLSelectsUnrelatedInstances ()\n+\t{\n+\t\tEntityManager em = currentEntityManager();\n+\t\tInteger uid1  = new Integer((int) (System.currentTimeMillis()%100000));\n+\t\tInteger uid2  = new Integer(uid1.intValue()+1);\n+\t\tString uName1 = \"P\"+uid1;\n+\t\tString rName1 = \"R\"+uName1;\n+\t\tString uName2 = \"P\"+uid2;\n+\t\tString rName2 = \"R\"+uName2;\n+\t\t\n+\t\tpersist(uid1, uName1, rName1);\n+\t\tpersist(uid2, uName2, rName2);\n+\t\t\n+\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID AS REL_ID,\" +\n+        \"a.RELATION_NAME AS REL_NAME, \" +\n+        \"b.ID AS C_ID, b.NAME AS C_NAME, b.VALUE AS C_VALUE \"+\n+        \"FROM OWNER_OF_COMPOSITE_ID a, COMPOSITE_ID b \" +\n+        \"WHERE b.NAME='\"+ rName2 +\"' \" +\n+        \"AND a.NAME='\" + uName1 + \"'\";\n+\t\t\n+\t\tQuery query = em.createNativeQuery(sql, \n+\t\t\t\t\"SQLSelectsUnrelatedInstances\");\n+\t\t\n+\t\tList result = query.getResultList();\n+\t\t\n+\t\tassertEquals(1,result.size());\n+\t\tObject object = result.get(0);\n+\t\tassertEquals(Object[].class, object.getClass());\n+\t\tObject[] array = (Object[])object;\n+\t\tassertEquals(2,array.length);\n+\t\tassertEquals(OwnerOfEntityWithCompositeId.class,array[0].getClass());\n+\t\tassertEquals(EntityWithCompositeId.class,array[1].getClass());\n+\t\t\n+\t\tOwnerOfEntityWithCompositeId owner1 = (OwnerOfEntityWithCompositeId)\n+\t\t\tarray[0];\n+\t\tEntityWithCompositeId relative1 = owner1.getRelation();\n+\t\t\n+\t\tEntityWithCompositeId relative2 = (EntityWithCompositeId)array[1];\n+\t\t\n+\t\tassertEquals(uName1, owner1.getName());\n+\t\tassertEquals(uid1, relative1.getId());\n+\t\tassertEquals(rName1, relative1.getName());\n+\t\tassertEquals(uid2, relative2.getId());\n+\t\tassertEquals(rName2, relative2.getName());\n+\t\tendEm(em); \n+\t}\n+\t\n+\tpublic void testRecursiveTraversal () \n+\t{\n+\t\tInteger rootId  = new Integer((int)(System.currentTimeMillis()%100000));\n+\t\t\n+\t\tint depth = 3;\n+\t\tpersistChainedRelative(rootId, depth);\n+\t\t\n+\t\tString sql = createSelfJoinSQL(\"RECURSIVE_ENTITY\",\n+\t\t\t\tdepth,rootId);\n+\t\t\n+\t\tEntityManager em = currentEntityManager();\n+\t\tQuery query = em.createNativeQuery(sql, \"SQLSelectsChainedRelation\");\n+\n+\t\tList result = query.getResultList();\n+\t\t\n+\t\tassertEquals(1, result.size());\n+\t\tassertEquals(RecursiveEntityWithCompositeId.class,\n+\t\t\t\tresult.get(0).getClass());\n+\t\t\n+\t\tRecursiveEntityWithCompositeId root = (RecursiveEntityWithCompositeId)\n+\t\t\t\t\t\t\t\t\t\t\t\tresult.get(0);\n+\t\tassertEquals(rootId,root.getId());\n+\t\tassertEquals(\"P\"+rootId,root.getName());\n+\t\tfor (int i=1; i<depth;i++){\n+\t\t\tRecursiveEntityWithCompositeId relative = root.getRelation();\n+\t\t\tInteger expecetedId = root.getId()+1;\n+\t\t\tassertEquals (expecetedId,relative.getId());\n+\t\t\tassertEquals (\"P\"+expecetedId, relative.getName());\n+\t\t\troot = relative;\n+\t\t}\n+\t\t \n+\t}\n+\t\n+\tvoid persistChainedRelative(Integer rootId, int depth)\n+\t{\n+\t\tRecursiveEntityWithCompositeId root = \n+\t\t\tnew RecursiveEntityWithCompositeId();\n+\t\troot.setId(rootId);\n+\t\troot.setName(\"P\"+rootId);\n+\t\tRecursiveEntityWithCompositeId head = root;\n+\t\tfor (int i=1; i<=depth; i++)\n+\t\t{\n+\t\t\tRecursiveEntityWithCompositeId relation = \n+\t\t\t\tnew RecursiveEntityWithCompositeId();\n+\t\t\trelation.setId(rootId+i);\n+\t\t\trelation.setName(\"P\"+(rootId+i));\n+\t\t\thead.setRelation(relation);\n+\t\t\thead = relation;\n+\t\t}\n+\t\tEntityManager em = currentEntityManager();\n+\t\tstartTx(em);\n+\t\tem.persist(root);\n+\t\tendTx(em);\n+\t\tendEm(em);\n+\t}\n+\t\n+\tString createSelfJoinSQL(String table, int depth, int id)\n+\t{\n+\t\t\n+\t\tStringBuffer sql = new StringBuffer(\"SELECT \");\n+\t\tfor (int i=0; i<depth; i++)\n+\t\t\tsql.append(\"t\"+i+\".ID AS T\"+i+\"_ID, \")\n+\t\t\t   .append(\"t\"+i+\".NAME AS T\"+i+\"_NAME, \")\n+\t\t\t   .append(\"t\"+i+\".RELATION_ID AS T\"+i+\"_REL_ID, \")\n+\t\t\t   .append(\"t\"+i+\".RELATION_NAME AS T\"+i+\"_REL_NAME\")\n+\t\t\t   .append((i==(depth-1))?\" \" : \", \");\n+\t\t\n+\t\tsql.append(\" FROM \");\n+\t\tfor (int i=0; i<depth; i++)\n+\t\t\tsql.append(table + \" t\"+i)\n+\t\t\t   .append((i==(depth-1))?\" \" : \", \");\n+\t\t\n+\t\tsql.append(\" WHERE \");\n+\t\tfor (int i=0; i<(depth-1); i++)\n+\t\t\tsql.append(\"t\"+i+\".RELATION_ID=t\"+(i+1)+\".ID AND \")\n+\t\t\t   .append(\"t\"+i+\".RELATION_NAME=t\"+(i+1)+\".NAME AND \" );\n+\t\t\n+\t\tsql.append(\"t0.ID=\"+id);\n+\t\t\n+\t\treturn sql.toString();\n+\t}\n+}"},{"sha":"17d957c1a060e8bca73e1b3133e0e222cd947ad5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","status":"modified","additions":170,"deletions":170,"changes":340,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,170 +1,170 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.mapping;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.*;\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-import junit.framework.*;\r\n-\r\n-\r\n-public class TestNativeQueries\textends AbstractTestCase\r\n-{\r\n-\t\r\n-\tpublic TestNativeQueries(String name)\r\n-\t{\r\n-\t\tsuper(name, \"jdbccactusapp\");\r\n-\t}\r\n-\r\n-    public void setUp ()\r\n-\t{\r\n-\t\tdeleteAll (Entity1.class);\r\n-\t}\r\n-\r\n-\tpublic void testSimple ()\r\n-\t{\r\n-\t\tdeleteAll (Entity1.class);\r\n-\r\n-\t\t// test create\r\n-\t\t{\r\n-\t\t\tEntityManager em = currentEntityManager( );\r\n-\t\t\tstartTx(em);\r\n-\t\t\tem.persist (new Entity1 (0, \"testSimple\", 12));\r\n-\t\t\tendTx(em);\r\n-\t\t\tendEm(em);\r\n-\t\t}\r\n-\r\n-\t\t// test Query\r\n-\t\t{\r\n-/*\t\t\tJDBCConfiguration conf = (JDBCConfiguration)getConfiguration ();\r\n-\t\t\tDBDictionary dict = conf.getDBDictionaryInstance ();*/\r\n-\r\n-/*\t\t\tString tableName = dict.getFullName (conf.getMappingRepository ().\r\n-\t\t\t\tgetMapping (Entity1.class, getClass ().getClassLoader (), true).\r\n-\t\t\t\tgetTable (), false);*/\r\n-\r\n-\t\t\tEntityManager em = currentEntityManager( );\r\n-\t\t\tstartTx(em);\r\n-\t\t\tString tableName = \"entity_1\";\r\n-\t\t\tassertSize (1, em.createNativeQuery\r\n-\t\t\t\t(\"SELECT * FROM \" + tableName, Entity1.class).\r\n-\t\t\t\tgetResultList ());\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = 12\", Entity1.class).\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = ?1\", Entity1.class).\r\n-\t\t\t\tsetParameter (1, 12).\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-\t\t\t// make sure that out-of-order parameters work\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = ?2 AND STRINGFIELD = ?1\", Entity1.class).\r\n-\t\t\t\tsetParameter (2, 12).\r\n-\t\t\t\tsetParameter (1, \"testSimple\").\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-\t\t\t// make sure duplicate parameters work\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?1\", Entity1.class).\r\n-\t\t\t\tsetParameter (1, 12).\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = ?1 OR INTFIELD = ?2\", Entity1.class).\r\n-\t\t\t\tsetParameter (1, 12).\r\n-\t\t\t\tsetParameter (2, 13).\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-\t\t\t// make sure that quoted parameters are ignored as expected\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = ?1 OR STRINGFIELD = '?5'\", Entity1.class).\r\n-\t\t\t\tsetParameter (1, 12).\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-\t\t\t// test without spaces\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD=?1 OR STRINGFIELD='?5'\", Entity1.class).\r\n-\t\t\t\tsetParameter (1, 12).\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-/*\t\t\tassertSize (1, ((QueryImpl)em.createNativeQuery\r\n-\t\t\t\t(\"SELECT * FROM \" + tableName\r\n-\t\t\t\t\t+ \" WHERE INTFIELD = ?1 OR INTFIELD = ?2\", Entity1.class)).\r\n-\t\t\t\tsetParameters (12, 1).\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-\t\t\tassertSize (0, ((QueryImpl)em.createNativeQuery\r\n-\t\t\t\t(\"SELECT * FROM \" + tableName\r\n-\t\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?2\", Entity1.class)).\r\n-\t\t\t\tsetParameters (12, 1).\r\n-\t\t\t\tgetResultList ());\r\n-*/\r\n-\t\t\tassertSize (0, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?2\", Entity1.class).\r\n-\t\t\t\tsetParameter (1, 12).\r\n-\t\t\t\tsetParameter (2, 13).\r\n-\t\t\t\tgetResultList ());\r\n-\r\n-\t\t\ttry\r\n-\t\t\t{\r\n-\t\t\t\tem.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t\t+ \" WHERE INTFIELD = ?1\", Entity1.class).\r\n-\t\t\t\t\tsetParameter (0, 12).\r\n-\t\t\t\t\tgetResultList ();\r\n-\t\t\t\tfail (\"Should not have been able to use param index 0\");\r\n-\t\t\t}\r\n-\t\t\tcatch (Exception e)\r\n-\t\t\t{\r\n-\t\t\t\t// as expected\r\n-\t\t\t}\r\n-\r\n-\r\n-\t\t\t/*\r\n-\t\t\t * Named parameters are not supported according to 19 June 3.5.2:\r\n-\t\t\t *\r\n-\t\t\t * The use of named parameters is not defined for\r\n-\t\t\t * native queries. Only positional parameter binding\r\n-\t\t\t * for SQL queries may be used by portable applications.\r\n-\t\t\t *\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = :p\",  Entity1.class).\r\n-\t\t\t\tsetParameter (\"p\", 12).\r\n-\t\t\t\tgetResultList ());\r\n-\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n-\t\t\t\t+ \" WHERE INTFIELD = :p OR INTFIELD = :p\", Entity1.class).\r\n-\t\t\t\tsetParameter (\"p\", 12).\r\n-\t\t\t\tgetResultList ());\r\n-\t\t\t*/\r\n-\r\n-\t\t\tendTx(em);\r\n-\t\t\tendEm(em);\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\tpublic boolean assertSize(int num, List l)\r\n-\t{\r\n-\t\treturn(num == l.size());\r\n-\t}\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.mapping;\n+\n+\n+import javax.persistence.*;\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.*;\n+import org.apache.openjpa.persistence.common.utils.*;\n+import junit.framework.*;\n+\n+\n+public class TestNativeQueries\textends AbstractTestCase\n+{\n+\t\n+\tpublic TestNativeQueries(String name)\n+\t{\n+\t\tsuper(name, \"jdbccactusapp\");\n+\t}\n+\n+    public void setUp ()\n+\t{\n+\t\tdeleteAll (Entity1.class);\n+\t}\n+\n+\tpublic void testSimple ()\n+\t{\n+\t\tdeleteAll (Entity1.class);\n+\n+\t\t// test create\n+\t\t{\n+\t\t\tEntityManager em = currentEntityManager( );\n+\t\t\tstartTx(em);\n+\t\t\tem.persist (new Entity1 (0, \"testSimple\", 12));\n+\t\t\tendTx(em);\n+\t\t\tendEm(em);\n+\t\t}\n+\n+\t\t// test Query\n+\t\t{\n+/*\t\t\tJDBCConfiguration conf = (JDBCConfiguration)getConfiguration ();\n+\t\t\tDBDictionary dict = conf.getDBDictionaryInstance ();*/\n+\n+/*\t\t\tString tableName = dict.getFullName (conf.getMappingRepository ().\n+\t\t\t\tgetMapping (Entity1.class, getClass ().getClassLoader (), true).\n+\t\t\t\tgetTable (), false);*/\n+\n+\t\t\tEntityManager em = currentEntityManager( );\n+\t\t\tstartTx(em);\n+\t\t\tString tableName = \"entity_1\";\n+\t\t\tassertSize (1, em.createNativeQuery\n+\t\t\t\t(\"SELECT * FROM \" + tableName, Entity1.class).\n+\t\t\t\tgetResultList ());\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = 12\", Entity1.class).\n+\t\t\t\tgetResultList ());\n+\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = ?1\", Entity1.class).\n+\t\t\t\tsetParameter (1, 12).\n+\t\t\t\tgetResultList ());\n+\n+\t\t\t// make sure that out-of-order parameters work\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = ?2 AND STRINGFIELD = ?1\", Entity1.class).\n+\t\t\t\tsetParameter (2, 12).\n+\t\t\t\tsetParameter (1, \"testSimple\").\n+\t\t\t\tgetResultList ());\n+\n+\t\t\t// make sure duplicate parameters work\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?1\", Entity1.class).\n+\t\t\t\tsetParameter (1, 12).\n+\t\t\t\tgetResultList ());\n+\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = ?1 OR INTFIELD = ?2\", Entity1.class).\n+\t\t\t\tsetParameter (1, 12).\n+\t\t\t\tsetParameter (2, 13).\n+\t\t\t\tgetResultList ());\n+\n+\t\t\t// make sure that quoted parameters are ignored as expected\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = ?1 OR STRINGFIELD = '?5'\", Entity1.class).\n+\t\t\t\tsetParameter (1, 12).\n+\t\t\t\tgetResultList ());\n+\n+\t\t\t// test without spaces\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD=?1 OR STRINGFIELD='?5'\", Entity1.class).\n+\t\t\t\tsetParameter (1, 12).\n+\t\t\t\tgetResultList ());\n+\n+/*\t\t\tassertSize (1, ((QueryImpl)em.createNativeQuery\n+\t\t\t\t(\"SELECT * FROM \" + tableName\n+\t\t\t\t\t+ \" WHERE INTFIELD = ?1 OR INTFIELD = ?2\", Entity1.class)).\n+\t\t\t\tsetParameters (12, 1).\n+\t\t\t\tgetResultList ());\n+\n+\t\t\tassertSize (0, ((QueryImpl)em.createNativeQuery\n+\t\t\t\t(\"SELECT * FROM \" + tableName\n+\t\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?2\", Entity1.class)).\n+\t\t\t\tsetParameters (12, 1).\n+\t\t\t\tgetResultList ());\n+*/\n+\t\t\tassertSize (0, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?2\", Entity1.class).\n+\t\t\t\tsetParameter (1, 12).\n+\t\t\t\tsetParameter (2, 13).\n+\t\t\t\tgetResultList ());\n+\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tem.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t\t+ \" WHERE INTFIELD = ?1\", Entity1.class).\n+\t\t\t\t\tsetParameter (0, 12).\n+\t\t\t\t\tgetResultList ();\n+\t\t\t\tfail (\"Should not have been able to use param index 0\");\n+\t\t\t}\n+\t\t\tcatch (Exception e)\n+\t\t\t{\n+\t\t\t\t// as expected\n+\t\t\t}\n+\n+\n+\t\t\t/*\n+\t\t\t * Named parameters are not supported according to 19 June 3.5.2:\n+\t\t\t *\n+\t\t\t * The use of named parameters is not defined for\n+\t\t\t * native queries. Only positional parameter binding\n+\t\t\t * for SQL queries may be used by portable applications.\n+\t\t\t *\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = :p\",  Entity1.class).\n+\t\t\t\tsetParameter (\"p\", 12).\n+\t\t\t\tgetResultList ());\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\n+\t\t\t\t+ \" WHERE INTFIELD = :p OR INTFIELD = :p\", Entity1.class).\n+\t\t\t\tsetParameter (\"p\", 12).\n+\t\t\t\tgetResultList ());\n+\t\t\t*/\n+\n+\t\t\tendTx(em);\n+\t\t\tendEm(em);\n+\t\t}\n+\t}\n+\t\n+\tpublic boolean assertSize(int num, List l)\n+\t{\n+\t\treturn(num == l.size());\n+\t}\n+}\n+"},{"sha":"779286efdbea91d3343a18c2a906e3a5323c00aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,91 +1,91 @@\n-/*\r\n- * TestBuildSchema.java\r\n- *\r\n- * Created on October 4, 2006, 4:52 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.io.BufferedReader;\r\n-import java.io.InputStreamReader;\r\n-import java.io.StringWriter;\r\n-\r\n-import org.apache.regexp.REUtil;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.MappingTool;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-public class TestBuildSchema extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-       \r\n-    /** Creates a new instance of TestBuildSchema */\r\n-    public TestBuildSchema() {\r\n-    }\r\n-    public TestBuildSchema(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public void testSchema()\r\n-        throws Exception {\r\n-        StringWriter out = new StringWriter();\r\n-\r\n-        MappingTool tool = new MappingTool((JDBCConfiguration)\r\n-            getConfiguration(), MappingTool.ACTION_BUILD_SCHEMA, false);\r\n-        tool.setMappingWriter(new StringWriter());    // throw away\r\n-        tool.setSchemaWriter(out);\r\n-        tool.run(BuildSchemaPC.class);\r\n-        tool.record();\r\n-\r\n-        BufferedReader in = new BufferedReader(new InputStreamReader\r\n-            (getClass().getResourceAsStream(\"TestBuildSchema-schema.rsrc\")));\r\n-        StringBuffer buf = new StringBuffer();\r\n-        for (int ch; (ch = in.read()) != -1;)\r\n-            buf.append((char) ch);\r\n-        in.close();\r\n-\r\n-        // the <schema> sometimes has a name (depending on whether the database\r\n-        // reports a schema name or not). If there is a\r\n-        // <scheme name=\"something\">, then replace it with <schema> so\r\n-        // the match is successful.\r\n-        String schema = out.toString();\r\n-        schema = REUtil.createRE\r\n-            (\"<schema name=\\\"*\\\">\").subst(schema, \"<schema>\");\r\n-\r\n-        // convert CRLF to CR so we pass on Windows\r\n-        assertEquals(fixNewline(buf.toString()).trim(),\r\n-            fixNewline(schema).trim());\r\n-    }\r\n-\r\n-    private String fixNewline(String str) {\r\n-        //FIXME \r\n-        /*\r\n-        return serp.util.Strings.join\r\n-            (serp.util.Strings.split\r\n-                (str, \"\\r\\n\", -1), \"\\n\");\r\n-         */\r\n-        return \"\";\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestBuildSchema.java\n+ *\n+ * Created on October 4, 2006, 4:52 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.StringWriter;\n+\n+import org.apache.regexp.REUtil;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.MappingTool;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+public class TestBuildSchema extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+       \n+    /** Creates a new instance of TestBuildSchema */\n+    public TestBuildSchema() {\n+    }\n+    public TestBuildSchema(String test) {\n+        super(test);\n+    }\n+\n+    public void testSchema()\n+        throws Exception {\n+        StringWriter out = new StringWriter();\n+\n+        MappingTool tool = new MappingTool((JDBCConfiguration)\n+            getConfiguration(), MappingTool.ACTION_BUILD_SCHEMA, false);\n+        tool.setMappingWriter(new StringWriter());    // throw away\n+        tool.setSchemaWriter(out);\n+        tool.run(BuildSchemaPC.class);\n+        tool.record();\n+\n+        BufferedReader in = new BufferedReader(new InputStreamReader\n+            (getClass().getResourceAsStream(\"TestBuildSchema-schema.rsrc\")));\n+        StringBuffer buf = new StringBuffer();\n+        for (int ch; (ch = in.read()) != -1;)\n+            buf.append((char) ch);\n+        in.close();\n+\n+        // the <schema> sometimes has a name (depending on whether the database\n+        // reports a schema name or not). If there is a\n+        // <scheme name=\"something\">, then replace it with <schema> so\n+        // the match is successful.\n+        String schema = out.toString();\n+        schema = REUtil.createRE\n+            (\"<schema name=\\\"*\\\">\").subst(schema, \"<schema>\");\n+\n+        // convert CRLF to CR so we pass on Windows\n+        assertEquals(fixNewline(buf.toString()).trim(),\n+            fixNewline(schema).trim());\n+    }\n+\n+    private String fixNewline(String str) {\n+        //FIXME \n+        /*\n+        return serp.util.Strings.join\n+            (serp.util.Strings.split\n+                (str, \"\\r\\n\", -1), \"\\n\");\n+         */\n+        return \"\";\n+    }\n+    \n+}"},{"sha":"4f1540875f24dbb564c5f565cad026ad2d1de4f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,115 +1,115 @@\n-/*\r\n- * TestDFG.java\r\n- *\r\n- * Created on October 2, 2006, 5:55 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.EntityTransaction;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-\r\n-public class TestDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-    private Object oid;\r\n-    /** Creates a new instance of TestDFG */\r\n-    public TestDFG(String name)\r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-       deleteAll(DFGTest.class);\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        EntityTransaction t= pm.getTransaction();\r\n-        t.begin();\r\n-        DFGTest a = new DFGTest();\r\n-        pm.persist(a);\r\n-        a.setNonDFGField(2);\r\n-        t.commit();\r\n-        \r\n-        // modify a field so that if we're examining sql we can see\r\n-        // how much is flushed.\r\n-        t.begin();\r\n-        a.setDFGField(1);\r\n-        t.commit();\r\n-        \r\n-        oid = pm.getObjectId(a);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testDFG() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        DFGTest a = (DFGTest) pm.getObjectId(oid);\r\n-        \r\n-        // check the non-dfg fields\r\n-        \r\n-        OpenJPAStateManager sm = getStateManager(a,pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"nonDFGField\");\r\n-        assertTrue(\"nonDFGField should not be loaded\",\r\n-                !sm.getLoaded().get(fmd.getIndex()));\r\n-        \r\n-        fmd = sm.getMetaData().getField(\"dfgField\");\r\n-        assertTrue(\"dfgField should be loaded\",\r\n-                sm.getLoaded().get(fmd.getIndex()));\r\n-        \r\n-        int val = a.getNonDFGField();\r\n-        assertTrue(\"nonDFGField should be loaded\",\r\n-                sm.getLoaded().get(fmd.getIndex()));\r\n-        assertEquals(2, val);\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    // it'd be nice if we could actually automate this test. As it\r\n-    // stands, this is just here so that there's an easy place to look\r\n-    // at the SQL.\r\n-    public void testDFGWrites() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        \r\n-        \r\n-        DFGTest a = (DFGTest) pm.getObjectId(oid);\r\n-        a.setDFGField(3);\r\n-        endTx(pm);\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestDFG.java\n+ *\n+ * Created on October 2, 2006, 5:55 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import javax.persistence.EntityTransaction;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+\n+public class TestDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+    private Object oid;\n+    /** Creates a new instance of TestDFG */\n+    public TestDFG(String name)\n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public void setUp() {\n+       deleteAll(DFGTest.class);\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        EntityTransaction t= pm.getTransaction();\n+        t.begin();\n+        DFGTest a = new DFGTest();\n+        pm.persist(a);\n+        a.setNonDFGField(2);\n+        t.commit();\n+        \n+        // modify a field so that if we're examining sql we can see\n+        // how much is flushed.\n+        t.begin();\n+        a.setDFGField(1);\n+        t.commit();\n+        \n+        oid = pm.getObjectId(a);\n+        pm.close();\n+    }\n+    \n+    public void testDFG() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        \n+        DFGTest a = (DFGTest) pm.getObjectId(oid);\n+        \n+        // check the non-dfg fields\n+        \n+        OpenJPAStateManager sm = getStateManager(a,pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"nonDFGField\");\n+        assertTrue(\"nonDFGField should not be loaded\",\n+                !sm.getLoaded().get(fmd.getIndex()));\n+        \n+        fmd = sm.getMetaData().getField(\"dfgField\");\n+        assertTrue(\"dfgField should be loaded\",\n+                sm.getLoaded().get(fmd.getIndex()));\n+        \n+        int val = a.getNonDFGField();\n+        assertTrue(\"nonDFGField should be loaded\",\n+                sm.getLoaded().get(fmd.getIndex()));\n+        assertEquals(2, val);\n+        \n+        pm.close();\n+    }\n+    \n+    // it'd be nice if we could actually automate this test. As it\n+    // stands, this is just here so that there's an easy place to look\n+    // at the SQL.\n+    public void testDFGWrites() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        \n+        \n+        DFGTest a = (DFGTest) pm.getObjectId(oid);\n+        a.setDFGField(3);\n+        endTx(pm);\n+        \n+        pm.close();\n+    }\n+    \n+}"},{"sha":"3b4f1ab2597ae4dc3e4cdebb5fc61536ebe87d92","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","status":"modified","additions":140,"deletions":140,"changes":280,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,140 +1,140 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n-\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBByteArray extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int _null;\r\n-\tprivate int _empty;\r\n-\tprivate int _small;\r\n-\tprivate int _large;\r\n-\r\n-\r\n-\tpublic TestEJBByteArray(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp() throws Exception\r\n-\t{\r\n-\t\tdeleteAll(ByteArray.class);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\r\n-\t\tByteArray pc = new ByteArray (\"Null\", 1);\r\n-\t\tpm.persist (pc);\r\n-\t\t_null = 1;\r\n-\r\n-\t\tpc = new ByteArray (\"Empty\", 2);\r\n-\t\tpc.setBytes (new byte[0]);\r\n-\t\tpm.persist (pc);\r\n-\t\t_empty = 2;\r\n-\r\n-\t\tpc = new ByteArray (\"Small\", 3);\r\n-\t\tpc.setBytes (pc.getString ().getBytes ());\r\n-\t\tpm.persist (pc);\r\n-\t\t_small = 3;\r\n-\r\n-\t\tbyte[] bytes = new byte [10000];\r\n-\t\tfor (int i = 0; i < bytes.length; i++)\r\n-\t\t\tbytes[i] = (byte) (i % 8);\r\n-\r\n-\t\tpc = new ByteArray (\"Large\", 4);\r\n-\t\tpc.setBytes (bytes);\r\n-\t\tpm.persist (pc);\r\n-\t\t_large = 4;\r\n-\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testNull ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\r\n-\t\tByteArray pc = pm.find(ByteArray.class, _null);\r\n-\t\tassertNull (pc.getBytes ());\r\n-\r\n-\r\n-\t\tpc.setBytes (\"Not Null\".getBytes ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ByteArray.class, _null);\r\n-\r\n-\t\tassertEquals (\"Not Null\", new String (pc.getBytes ()));\r\n-\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testEmpty ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\r\n-\t\tByteArray pc = pm.find(ByteArray.class, _empty);\r\n-\t\tbyte [] bytes = pc.getBytes ();\r\n-\t\tassertNotNull (bytes);\r\n-\t\tassertEquals (0, bytes.length);\r\n-\r\n-\t\tpc.setBytes (\"Not Empty\".getBytes ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ByteArray.class, _empty);\r\n-\t\tassertEquals (\"Not Empty\", new String (pc.getBytes ()));\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testLarge ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tByteArray pc = pm.find(ByteArray.class, _large);\r\n-\t\tbyte [] bytes = pc.getBytes ();\r\n-\t\tassertNotNull (bytes);\r\n-\t\tassertEquals (10000, bytes.length);\r\n-\t\tfor (int i = 0; i < bytes.length; i++)\r\n-\t\t\tassertEquals (bytes[i], (byte) (i % 8));\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\n+\n+import junit.framework.*;\n+\n+public class TestEJBByteArray extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int _null;\n+\tprivate int _empty;\n+\tprivate int _small;\n+\tprivate int _large;\n+\n+\n+\tpublic TestEJBByteArray(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp() throws Exception\n+\t{\n+\t\tdeleteAll(ByteArray.class);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\n+\t\tByteArray pc = new ByteArray (\"Null\", 1);\n+\t\tpm.persist (pc);\n+\t\t_null = 1;\n+\n+\t\tpc = new ByteArray (\"Empty\", 2);\n+\t\tpc.setBytes (new byte[0]);\n+\t\tpm.persist (pc);\n+\t\t_empty = 2;\n+\n+\t\tpc = new ByteArray (\"Small\", 3);\n+\t\tpc.setBytes (pc.getString ().getBytes ());\n+\t\tpm.persist (pc);\n+\t\t_small = 3;\n+\n+\t\tbyte[] bytes = new byte [10000];\n+\t\tfor (int i = 0; i < bytes.length; i++)\n+\t\t\tbytes[i] = (byte) (i % 8);\n+\n+\t\tpc = new ByteArray (\"Large\", 4);\n+\t\tpc.setBytes (bytes);\n+\t\tpm.persist (pc);\n+\t\t_large = 4;\n+\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testNull ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\n+\t\tByteArray pc = pm.find(ByteArray.class, _null);\n+\t\tassertNull (pc.getBytes ());\n+\n+\n+\t\tpc.setBytes (\"Not Null\".getBytes ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ByteArray.class, _null);\n+\n+\t\tassertEquals (\"Not Null\", new String (pc.getBytes ()));\n+\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testEmpty ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\n+\t\tByteArray pc = pm.find(ByteArray.class, _empty);\n+\t\tbyte [] bytes = pc.getBytes ();\n+\t\tassertNotNull (bytes);\n+\t\tassertEquals (0, bytes.length);\n+\n+\t\tpc.setBytes (\"Not Empty\".getBytes ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ByteArray.class, _empty);\n+\t\tassertEquals (\"Not Empty\", new String (pc.getBytes ()));\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testLarge ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tByteArray pc = pm.find(ByteArray.class, _large);\n+\t\tbyte [] bytes = pc.getBytes ();\n+\t\tassertNotNull (bytes);\n+\t\tassertEquals (10000, bytes.length);\n+\t\tfor (int i = 0; i < bytes.length; i++)\n+\t\t\tassertEquals (bytes[i], (byte) (i % 8));\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\n+\n+\n+\n+\n+}"},{"sha":"0ba31f8780a893053a6351fa1c4b22aff39d50bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","status":"modified","additions":165,"deletions":165,"changes":330,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,165 +1,165 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBColumnIOMappings extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tpublic TestEJBColumnIOMappings(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll(ColumnIOPC.class);\r\n-\t}\r\n-\r\n-\tpublic void testIgnoreInsert ()\r\n-\t{\r\n-\t\tColumnIOPC pc = new ColumnIOPC (2);\r\n-\t\tpc.setName (\"pc\");\r\n-\t\tpc.setIgnoreInsert (10);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tstartTx(pm);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tint oid = pc.getId();\r\n-        endTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tpc.setIgnoreInsert (10);\r\n-\t\tendTx(pm);\r\n-\t\tstartTx(pm);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testIgnoreUpdate ()\r\n-\t{\r\n-\t\tColumnIOPC pc = new ColumnIOPC (3);\r\n-\t\tpc.setName (\"pc\");\r\n-\t\tpc.setIgnoreUpdate (10);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tObject oid = pc.getId();\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tstartTx(pm);\r\n-\t\tpc.setIgnoreUpdate (100);\r\n-\t\tassertEquals (100, pc.getIgnoreUpdate ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\r\n-\tpublic void testPrimitiveMappedToFieldOfForeignKey ()\r\n-\t{\r\n-\t\t// have to make rel persistent before setting ident field b/c not\r\n-\t\t// insertable\r\n-\t\tColumnIOPC rel = new ColumnIOPC (1);\r\n-\t\trel.setName (\"rel\");\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(rel);\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tstartTx(pm);\r\n-\t\tColumnIOPC pc = new ColumnIOPC (2);\r\n-\t\tpc.setName (\"pc\");\r\n-\t\trel = pm.find(ColumnIOPC.class, 1);\r\n-\t\tpc.setRel (rel);\r\n-\t\trel.setIdent (10);\r\n-\t\tpm.persist(pc);\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, 2);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (0, pc.getIdent ());\r\n-\t\tassertNotNull (pc.getRel ());\r\n-\t\tassertEquals (\"rel\", pc.getRel ().getName ());\r\n-\r\n-\t\tpc.setIdent (50);\r\n-\t\tpc.setRel (new ColumnIOPC (3));\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, 2);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (50, pc.getIdent());\r\n-\t\tassertNotNull (pc.getRel());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\n+import junit.framework.*;\n+\n+public class TestEJBColumnIOMappings extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tpublic TestEJBColumnIOMappings(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll(ColumnIOPC.class);\n+\t}\n+\n+\tpublic void testIgnoreInsert ()\n+\t{\n+\t\tColumnIOPC pc = new ColumnIOPC (2);\n+\t\tpc.setName (\"pc\");\n+\t\tpc.setIgnoreInsert (10);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tendTx(pm);\n+\n+\t\tstartTx(pm);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tint oid = pc.getId();\n+        endTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tpc.setIgnoreInsert (10);\n+\t\tendTx(pm);\n+\t\tstartTx(pm);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testIgnoreUpdate ()\n+\t{\n+\t\tColumnIOPC pc = new ColumnIOPC (3);\n+\t\tpc.setName (\"pc\");\n+\t\tpc.setIgnoreUpdate (10);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\n+\t\tendTx(pm);\n+\n+\t\tObject oid = pc.getId();\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\n+\t\tendTx(pm);\n+\n+\t\tstartTx(pm);\n+\t\tpc.setIgnoreUpdate (100);\n+\t\tassertEquals (100, pc.getIgnoreUpdate ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\n+\tpublic void testPrimitiveMappedToFieldOfForeignKey ()\n+\t{\n+\t\t// have to make rel persistent before setting ident field b/c not\n+\t\t// insertable\n+\t\tColumnIOPC rel = new ColumnIOPC (1);\n+\t\trel.setName (\"rel\");\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(rel);\n+\t\tendTx(pm);\n+\n+\t\tstartTx(pm);\n+\t\tColumnIOPC pc = new ColumnIOPC (2);\n+\t\tpc.setName (\"pc\");\n+\t\trel = pm.find(ColumnIOPC.class, 1);\n+\t\tpc.setRel (rel);\n+\t\trel.setIdent (10);\n+\t\tpm.persist(pc);\n+\t\tendTx(pm);\n+\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, 2);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (0, pc.getIdent ());\n+\t\tassertNotNull (pc.getRel ());\n+\t\tassertEquals (\"rel\", pc.getRel ().getName ());\n+\n+\t\tpc.setIdent (50);\n+\t\tpc.setRel (new ColumnIOPC (3));\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, 2);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (50, pc.getIdent());\n+\t\tassertNotNull (pc.getRel());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\n+\n+\n+}"},{"sha":"4f7d9ab0692bba361db414b161e68f80c545bce8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,110 +1,110 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.Iterator;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5;\r\n-\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBConstantJoinOnSameRefTable extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int oid;\r\n-\t\r\n-\tpublic TestEJBConstantJoinOnSameRefTable(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic void setUp ()\r\n-\t{\r\n-\t\tdeleteAll(ConstantJoinPC4.class);\r\n-\t\tdeleteAll(ConstantJoinPC5.class);\r\n-\r\n-\t\tConstantJoinPC4 pc4 = new ConstantJoinPC4 (\"pc4-1\", 1);\r\n-\t\tpc4.setOneToOne1 (new ConstantJoinPC5 (\"pc5-one-to-one-1\"));\r\n-\t\t//### see note in testConstantOneToOne2\r\n-\t\t//### pc4.setOneToOne2 (new ConstantJoinPC5 (\"pc5-one-to-one-2\"));\r\n-\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-1\"));\r\n-\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-2\"));\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc4);\r\n-\t\tendTx(pm);\r\n-\t\toid = pc4.getId();\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testConstantManyToMany ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\r\n-\t\tassertEquals (2, pc4.getManyToMany ().size ());\r\n-\t\tIterator iter = pc4.getManyToMany ().iterator ();\r\n-\t\tConstantJoinPC5 pc5_1 = (ConstantJoinPC5) iter.next ();\r\n-\t\tConstantJoinPC5 pc5_2 = (ConstantJoinPC5) iter.next ();\r\n-\t\tif (\"pc5-many-to-many-2\".equals (pc5_1.getName ()))\r\n-\t\t{\r\n-\t\t\tConstantJoinPC5 other = pc5_1;\r\n-\t\t\tpc5_1 = pc5_2;\r\n-\t\t\tpc5_2 = other;\r\n-\t\t}\r\n-\t\tassertEquals (\"pc5-many-to-many-1\", pc5_1.getName ());\r\n-\t\tassertEquals (\"pc5-many-to-many-2\", pc5_2.getName ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\r\n-\tpublic void testConstantOneToOne1 ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tConstantJoinPC4 pc4 =  pm.find(ConstantJoinPC4.class, oid);\r\n-\t\tassertEquals (2, pc4.getManyToMany ().size ());\r\n-\t\tassertEquals (\"pc5-one-to-one-1\", pc4.getOneToOne1 ().getName ());\r\n-\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testSharedJoinTableModifications ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\r\n-\t\tstartTx(pm);\r\n-\t\tpc4.getManyToMany ().clear ();\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tEntityManager pm2 = currentEntityManager();\r\n-\t\tpc4 = pm2.find(ConstantJoinPC4.class, oid);\r\n-\t\tassertNotNull (pc4.getOneToOne1 ());\r\n-\t\tassertEquals (0, pc4.getManyToMany ().size ());\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.Iterator;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4;\n+import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5;\n+\n+import junit.framework.*;\n+\n+public class TestEJBConstantJoinOnSameRefTable extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int oid;\n+\t\n+\tpublic TestEJBConstantJoinOnSameRefTable(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void setUp ()\n+\t{\n+\t\tdeleteAll(ConstantJoinPC4.class);\n+\t\tdeleteAll(ConstantJoinPC5.class);\n+\n+\t\tConstantJoinPC4 pc4 = new ConstantJoinPC4 (\"pc4-1\", 1);\n+\t\tpc4.setOneToOne1 (new ConstantJoinPC5 (\"pc5-one-to-one-1\"));\n+\t\t//### see note in testConstantOneToOne2\n+\t\t//### pc4.setOneToOne2 (new ConstantJoinPC5 (\"pc5-one-to-one-2\"));\n+\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-1\"));\n+\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-2\"));\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc4);\n+\t\tendTx(pm);\n+\t\toid = pc4.getId();\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testConstantManyToMany ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\n+\t\tassertEquals (2, pc4.getManyToMany ().size ());\n+\t\tIterator iter = pc4.getManyToMany ().iterator ();\n+\t\tConstantJoinPC5 pc5_1 = (ConstantJoinPC5) iter.next ();\n+\t\tConstantJoinPC5 pc5_2 = (ConstantJoinPC5) iter.next ();\n+\t\tif (\"pc5-many-to-many-2\".equals (pc5_1.getName ()))\n+\t\t{\n+\t\t\tConstantJoinPC5 other = pc5_1;\n+\t\t\tpc5_1 = pc5_2;\n+\t\t\tpc5_2 = other;\n+\t\t}\n+\t\tassertEquals (\"pc5-many-to-many-1\", pc5_1.getName ());\n+\t\tassertEquals (\"pc5-many-to-many-2\", pc5_2.getName ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\n+\tpublic void testConstantOneToOne1 ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tConstantJoinPC4 pc4 =  pm.find(ConstantJoinPC4.class, oid);\n+\t\tassertEquals (2, pc4.getManyToMany ().size ());\n+\t\tassertEquals (\"pc5-one-to-one-1\", pc4.getOneToOne1 ().getName ());\n+\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testSharedJoinTableModifications ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\n+\t\tstartTx(pm);\n+\t\tpc4.getManyToMany ().clear ();\n+\t\tendTx(pm);\n+\n+\t\tEntityManager pm2 = currentEntityManager();\n+\t\tpc4 = pm2.find(ConstantJoinPC4.class, oid);\n+\t\tassertNotNull (pc4.getOneToOne1 ());\n+\t\tassertEquals (0, pc4.getManyToMany ().size ());\n+\t}\n+\n+}"},{"sha":"dd199aac271340b7096f800bd93cec647c43a99c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,85 +1,85 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC;\r\n-import junit.framework.*;\r\n-\r\n-\r\n-public class TestEJBCustomMapping extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int _oid;\r\n-\r\n-\tpublic TestEJBCustomMapping(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp ()\r\n-\t{\r\n-\t\tdeleteAll(CustomMappingPC.class);\r\n-\r\n-\t\tCustomMappingPC pc = new CustomMappingPC (2);\r\n-\t\tpc.setName (\"name\");\r\n-\t\tpc.setFemale (true);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tendTx(pm);\r\n-\t\t_oid = pc.getId();\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testInsert ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\r\n-\t\tassertNotNull (pc);\r\n-\r\n-\t\tassertEquals (\"name\", pc.getName ());\r\n-\t\tassertEquals (true, pc.isFemale ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testUpdate ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\r\n-\r\n-\t\tpc.setName (\"name2\");\r\n-\t\tpc.setFemale (false);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(CustomMappingPC.class, _oid);\r\n-\t\tassertEquals (\"name2\", pc.getName ());\r\n-\t\tassertTrue (!pc.isFemale ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC;\n+import junit.framework.*;\n+\n+\n+public class TestEJBCustomMapping extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int _oid;\n+\n+\tpublic TestEJBCustomMapping(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp ()\n+\t{\n+\t\tdeleteAll(CustomMappingPC.class);\n+\n+\t\tCustomMappingPC pc = new CustomMappingPC (2);\n+\t\tpc.setName (\"name\");\n+\t\tpc.setFemale (true);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tendTx(pm);\n+\t\t_oid = pc.getId();\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testInsert ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\n+\t\tassertNotNull (pc);\n+\n+\t\tassertEquals (\"name\", pc.getName ());\n+\t\tassertEquals (true, pc.isFemale ());\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testUpdate ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\n+\n+\t\tpc.setName (\"name2\");\n+\t\tpc.setFemale (false);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(CustomMappingPC.class, _oid);\n+\t\tassertEquals (\"name2\", pc.getName ());\n+\t\tassertTrue (!pc.isFemale ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+}"},{"sha":"48ff4826cdcf84ec7cdb15d3f67174d3196818cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,119 +1,119 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.DateVersion;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBDateVersion extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int oid;\r\n-\r\n-\tpublic TestEJBDateVersion(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp() throws Exception\r\n-\t{\r\n-\t\tdeleteAll(DateVersion.class);\r\n-\r\n-\t\tDateVersion pc = new DateVersion (\"pc1\", 1);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\r\n-\t\toid = pc.getId();\r\n-\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testOptLock ()\tthrows InterruptedException\r\n-{\r\n-\tEntityManager pm1 = currentEntityManager();\r\n-\tEntityManager pm2 = currentEntityManager();\r\n-\r\n-\r\n-\tstartTx(pm1);\r\n-\tstartTx(pm2);\r\n-\tDateVersion pc1 = (DateVersion) pm1.find(DateVersion.class, oid);\r\n-\tDateVersion pc2 = (DateVersion) pm2.find(DateVersion.class, oid);\r\n-\r\n-\tpc1.setString (\"pc-2-1\");\r\n-\tpc2.setString (\"pc-2-2\");\r\n-\r\n-\t// some DBs do not distinguish dates unless there is 1 sec diff\r\n-\tThread.currentThread ().sleep (1 * 1000);\r\n-\tendTx(pm1);\r\n-\ttry\r\n-\t{\r\n-\t\tThread.currentThread ().sleep (1 * 1000);\r\n-\t\tendTx(pm2);\r\n-\t\tfail (\"Should have caused OL exception.\");\r\n-\t}\r\n-\tcatch (Exception jfe)\r\n-\t{\r\n-\t\tstartTx(pm2);\r\n-\t\tpm2.refresh (pc2);\r\n-\t\tpc2.setString (\"pc-3-2\");\r\n-\t\tendTx(pm2);\r\n-\t}\r\n-\r\n-\t// make sure the next transaction works too\r\n-\tstartTx(pm2);\r\n-\tpc2.setString (\"pc-string-4-2\");\r\n-\tendTx(pm2);\r\n-\r\n-\tstartTx(pm1);\r\n-\tpm1.refresh (pc1);\r\n-\tpc1.setString (\"pc-string-3-1\");\r\n-\r\n-\tstartTx(pm2);\r\n-\tpc2.setString (\"pc-string-5-2\");\r\n-\r\n-\tThread.currentThread ().sleep (1 * 1000);\r\n-\tendTx(pm1);\r\n-\ttry\r\n-\t{\r\n-\t\tThread.currentThread ().sleep (1 * 1000);\r\n-\t\tendTx(pm2);\r\n-\t\tfail (\"Should have caused OL exception2.\");\r\n-\t}\r\n-\tcatch (Exception jfe)\r\n-\t{\r\n-\t\tstartTx(pm2);\r\n-\t\tpm2.refresh (pc2);\r\n-\t\tpc2.setString (\"pc-string-6-2\");\r\n-\t\tendTx(pm2);\r\n-\t}\r\n-\tendEm(pm1);\r\n-\tendEm(pm2);\r\n-\r\n-\tEntityManager pm = currentEntityManager();\r\n-\tDateVersion pc = pm.find(DateVersion.class, oid);\r\n-\tassertEquals (\"pc-string-6-2\", pc.toString ());\r\n-\tendEm(pm);\r\n-  }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.DateVersion;\n+import junit.framework.*;\n+\n+public class TestEJBDateVersion extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int oid;\n+\n+\tpublic TestEJBDateVersion(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp() throws Exception\n+\t{\n+\t\tdeleteAll(DateVersion.class);\n+\n+\t\tDateVersion pc = new DateVersion (\"pc1\", 1);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\n+\t\toid = pc.getId();\n+\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testOptLock ()\tthrows InterruptedException\n+{\n+\tEntityManager pm1 = currentEntityManager();\n+\tEntityManager pm2 = currentEntityManager();\n+\n+\n+\tstartTx(pm1);\n+\tstartTx(pm2);\n+\tDateVersion pc1 = (DateVersion) pm1.find(DateVersion.class, oid);\n+\tDateVersion pc2 = (DateVersion) pm2.find(DateVersion.class, oid);\n+\n+\tpc1.setString (\"pc-2-1\");\n+\tpc2.setString (\"pc-2-2\");\n+\n+\t// some DBs do not distinguish dates unless there is 1 sec diff\n+\tThread.currentThread ().sleep (1 * 1000);\n+\tendTx(pm1);\n+\ttry\n+\t{\n+\t\tThread.currentThread ().sleep (1 * 1000);\n+\t\tendTx(pm2);\n+\t\tfail (\"Should have caused OL exception.\");\n+\t}\n+\tcatch (Exception jfe)\n+\t{\n+\t\tstartTx(pm2);\n+\t\tpm2.refresh (pc2);\n+\t\tpc2.setString (\"pc-3-2\");\n+\t\tendTx(pm2);\n+\t}\n+\n+\t// make sure the next transaction works too\n+\tstartTx(pm2);\n+\tpc2.setString (\"pc-string-4-2\");\n+\tendTx(pm2);\n+\n+\tstartTx(pm1);\n+\tpm1.refresh (pc1);\n+\tpc1.setString (\"pc-string-3-1\");\n+\n+\tstartTx(pm2);\n+\tpc2.setString (\"pc-string-5-2\");\n+\n+\tThread.currentThread ().sleep (1 * 1000);\n+\tendTx(pm1);\n+\ttry\n+\t{\n+\t\tThread.currentThread ().sleep (1 * 1000);\n+\t\tendTx(pm2);\n+\t\tfail (\"Should have caused OL exception2.\");\n+\t}\n+\tcatch (Exception jfe)\n+\t{\n+\t\tstartTx(pm2);\n+\t\tpm2.refresh (pc2);\n+\t\tpc2.setString (\"pc-string-6-2\");\n+\t\tendTx(pm2);\n+\t}\n+\tendEm(pm1);\n+\tendEm(pm2);\n+\n+\tEntityManager pm = currentEntityManager();\n+\tDateVersion pc = pm.find(DateVersion.class, oid);\n+\tassertEquals (\"pc-string-6-2\", pc.toString ());\n+\tendEm(pm);\n+  }\n }\n\\ No newline at end of file"},{"sha":"6af5dbc2898f3fb46e89ba756a9dd6f1ce6772fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","status":"modified","additions":153,"deletions":153,"changes":306,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,153 +1,153 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBEager extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int _oid;\r\n-\r\n-\tpublic TestEJBEager(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll(EagerPCSub.class);\r\n-\t\tdeleteAll(EagerPC.class);\r\n-\t\tdeleteAll(HelperPC.class);\r\n-\t\tdeleteAll(HelperPC2.class);\r\n-\t\tdeleteAll(HelperPC4.class);\r\n-\t\tdeleteAll(HelperPC3.class);\r\n-\r\n-\t\tEagerPCSub pc = new EagerPCSub (1);\r\n-\t\tpc.setStringField (\"string1\");\r\n-\t\tEagerPCSub pc2 = new EagerPCSub (2);\r\n-\t\tpc2.setStringField (\"string2\");\r\n-\r\n-\t\tHelperPC helper1 = new HelperPC (4);\r\n-\t\thelper1.setStringField (\"helper1\");\r\n-\t\tpc.setHelper (helper1);\r\n-\r\n-\t\tHelperPC2 helperCollection1 = new HelperPC2 ();\r\n-\t\thelperCollection1.setStringField (\"helperCollection1\");\r\n-\t\thelperCollection1.getHelperCollection ().add (new HelperPC (5));\r\n-\t\tHelperPC2 helperCollection2 = new HelperPC2 (6);\r\n-\t\thelperCollection2.setStringField (\"helperCollection2\");\r\n-\t\tpc.getHelperCollection ().add (helperCollection1);\r\n-\t\tpc.getHelperCollection ().add (helperCollection2);\r\n-\r\n-\t\tHelperPC eager = new HelperPC (7);\r\n-\t\teager.setStringField (\"eager\");\r\n-\t\tpc.setEager (eager);\r\n-\r\n-\t\tHelperPC4 eagerSub = new HelperPC4 ();\r\n-\t\teagerSub.setStringField (\"eagerSub\");\r\n-\t\teagerSub.setIntField (1);\r\n-\t\tpc.setEagerSub (eagerSub);\r\n-\r\n-\t\tHelperPC eagerCollection1 = new HelperPC (8);\r\n-\t\teagerCollection1.setStringField (\"eagerCollection1\");\r\n-\t\tHelperPC eagerCollection2 = new HelperPC (9);\r\n-\t\teagerCollection2.setStringField (\"eagerCollection2\");\r\n-\t\tpc.getEagerCollection ().add (eagerCollection1);\r\n-\t\tpc.getEagerCollection ().add (eagerCollection2);\r\n-\t\teagerCollection1.setEager (pc);\r\n-\t\teagerCollection2.setEager (pc);\r\n-\t\tpc.getEagerCollection2 ().add (eagerCollection1);\r\n-\t\tpc.getEagerCollection2 ().add (eagerCollection2);\r\n-\r\n-\t\tHelperPC eagerCollection3 = new HelperPC (10);\r\n-\t\teagerCollection3.setStringField (\"eagerCollection3\");\r\n-\t\tpc2.getEagerCollection ().add (eagerCollection3);\r\n-\r\n-\t\tHelperPC2 recurse = new HelperPC2 (11);\r\n-\t\trecurse.setStringField (\"recurse\");\r\n-\t\tHelperPC3 helper3 = new HelperPC3 (12);\r\n-\t\thelper3.setStringField (\"helper3\");\r\n-\t\trecurse.setHelper (helper3);\r\n-\t\teager.setHelper (helper1);\r\n-\t\tpc.setRecurse (recurse);\r\n-\r\n-\t\tHelperPC2 recurseCollection1 = new HelperPC2 (13);\r\n-\t\trecurseCollection1.setStringField (\"recurseCollection1\");\r\n-\t\tHelperPC2 recurseCollection2 = new HelperPC2 (14);\r\n-\t\trecurseCollection2.setStringField (\"recurseCollection2\");\r\n-\t\tpc.getRecurseCollection ().add (recurseCollection1);\r\n-\t\tpc.getRecurseCollection ().add (recurseCollection2);\r\n-\t\trecurseCollection1.getHelperCollection ().add (helper1);\r\n-\t\tHelperPC helper2 = new HelperPC (15);\r\n-\t\thelper2.setStringField (\"helper2\");\r\n-\t\trecurseCollection1.getHelperCollection ().add (helper2);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tpm.persist(pc2);\r\n-\t\tendTx(pm);\r\n-\t\t_oid = pc.getId();\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testOuterJoin ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\r\n-\t\tpc.setEager (null);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tpc = pm.find(EagerPCSub.class, _oid);\r\n-\t\tassertNull (pc.getEager());\r\n-\t\tassertNotNull (pc.getRecurse ());\r\n-\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().\r\n-\t\t\tgetStringField ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testOuterJoinToSubclass ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\r\n-\t\tpc.setEagerSub (null);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(EagerPCSub.class, _oid);\r\n-\t\tassertNull (pc.getEagerSub ());\r\n-\t\tassertNotNull (pc.getRecurse ());\r\n-\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().getStringField ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import junit.framework.*;\n+\n+public class TestEJBEager extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int _oid;\n+\n+\tpublic TestEJBEager(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll(EagerPCSub.class);\n+\t\tdeleteAll(EagerPC.class);\n+\t\tdeleteAll(HelperPC.class);\n+\t\tdeleteAll(HelperPC2.class);\n+\t\tdeleteAll(HelperPC4.class);\n+\t\tdeleteAll(HelperPC3.class);\n+\n+\t\tEagerPCSub pc = new EagerPCSub (1);\n+\t\tpc.setStringField (\"string1\");\n+\t\tEagerPCSub pc2 = new EagerPCSub (2);\n+\t\tpc2.setStringField (\"string2\");\n+\n+\t\tHelperPC helper1 = new HelperPC (4);\n+\t\thelper1.setStringField (\"helper1\");\n+\t\tpc.setHelper (helper1);\n+\n+\t\tHelperPC2 helperCollection1 = new HelperPC2 ();\n+\t\thelperCollection1.setStringField (\"helperCollection1\");\n+\t\thelperCollection1.getHelperCollection ().add (new HelperPC (5));\n+\t\tHelperPC2 helperCollection2 = new HelperPC2 (6);\n+\t\thelperCollection2.setStringField (\"helperCollection2\");\n+\t\tpc.getHelperCollection ().add (helperCollection1);\n+\t\tpc.getHelperCollection ().add (helperCollection2);\n+\n+\t\tHelperPC eager = new HelperPC (7);\n+\t\teager.setStringField (\"eager\");\n+\t\tpc.setEager (eager);\n+\n+\t\tHelperPC4 eagerSub = new HelperPC4 ();\n+\t\teagerSub.setStringField (\"eagerSub\");\n+\t\teagerSub.setIntField (1);\n+\t\tpc.setEagerSub (eagerSub);\n+\n+\t\tHelperPC eagerCollection1 = new HelperPC (8);\n+\t\teagerCollection1.setStringField (\"eagerCollection1\");\n+\t\tHelperPC eagerCollection2 = new HelperPC (9);\n+\t\teagerCollection2.setStringField (\"eagerCollection2\");\n+\t\tpc.getEagerCollection ().add (eagerCollection1);\n+\t\tpc.getEagerCollection ().add (eagerCollection2);\n+\t\teagerCollection1.setEager (pc);\n+\t\teagerCollection2.setEager (pc);\n+\t\tpc.getEagerCollection2 ().add (eagerCollection1);\n+\t\tpc.getEagerCollection2 ().add (eagerCollection2);\n+\n+\t\tHelperPC eagerCollection3 = new HelperPC (10);\n+\t\teagerCollection3.setStringField (\"eagerCollection3\");\n+\t\tpc2.getEagerCollection ().add (eagerCollection3);\n+\n+\t\tHelperPC2 recurse = new HelperPC2 (11);\n+\t\trecurse.setStringField (\"recurse\");\n+\t\tHelperPC3 helper3 = new HelperPC3 (12);\n+\t\thelper3.setStringField (\"helper3\");\n+\t\trecurse.setHelper (helper3);\n+\t\teager.setHelper (helper1);\n+\t\tpc.setRecurse (recurse);\n+\n+\t\tHelperPC2 recurseCollection1 = new HelperPC2 (13);\n+\t\trecurseCollection1.setStringField (\"recurseCollection1\");\n+\t\tHelperPC2 recurseCollection2 = new HelperPC2 (14);\n+\t\trecurseCollection2.setStringField (\"recurseCollection2\");\n+\t\tpc.getRecurseCollection ().add (recurseCollection1);\n+\t\tpc.getRecurseCollection ().add (recurseCollection2);\n+\t\trecurseCollection1.getHelperCollection ().add (helper1);\n+\t\tHelperPC helper2 = new HelperPC (15);\n+\t\thelper2.setStringField (\"helper2\");\n+\t\trecurseCollection1.getHelperCollection ().add (helper2);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tpm.persist(pc2);\n+\t\tendTx(pm);\n+\t\t_oid = pc.getId();\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testOuterJoin ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\n+\t\tpc.setEager (null);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tpc = pm.find(EagerPCSub.class, _oid);\n+\t\tassertNull (pc.getEager());\n+\t\tassertNotNull (pc.getRecurse ());\n+\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().\n+\t\t\tgetStringField ());\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testOuterJoinToSubclass ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\n+\t\tpc.setEagerSub (null);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(EagerPCSub.class, _oid);\n+\t\tassertNull (pc.getEagerSub ());\n+\t\tassertNotNull (pc.getRecurse ());\n+\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().getStringField ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+}"},{"sha":"edf56828c03f0f407dca8118920f95103b643e37","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,83 +1,83 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.InvertA;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.InvertB;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBInverseOneToOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tpublic TestEJBInverseOneToOne(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp ()\r\n-\t{\r\n-\t\tdeleteAll(InvertA.class);\r\n-\t\tdeleteAll(InvertB.class);\r\n-\t}\r\n-\r\n-\r\n-\tprivate static Object insertData (EntityManager pm)\r\n-\t{\r\n-\t\tInvertA a;\r\n-\t\tInvertB b;\r\n-\t\ta = new InvertA (1);\r\n-\t\tb = new InvertB (2);\r\n-\t\ta.setTest (\"testA\");\r\n-\t\tb.setTest (\"testB\");\r\n-\t\tb.setInvertA (a);\r\n-\r\n-\t\tEntityTransaction t = pm.getTransaction ();\r\n-\t\tt.begin ();\r\n-\t\tpm.persist(b);\r\n-\t\t//pm.makeTransactional (b);\r\n-\r\n-\t\treturn (pm.find(InvertB.class, 2));\r\n-\t}\r\n-\r\n-\r\n-\tpublic void testLoad ()\r\n-\t{\r\n-\t\tInvertA a;\r\n-\t\tInvertB b;\r\n-\t\tObject aId;\r\n-\t\tObject bId;\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\taId = insertData (pm);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tb = (InvertB) aId;\r\n-\r\n-\t\tassertNotNull(b.getInvertA().getTest());\r\n-\t\tassertEquals (b.getInvertA().getTest (), \"testA\");\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.InvertA;\n+import org.apache.openjpa.persistence.jdbc.common.apps.InvertB;\n+import junit.framework.*;\n+\n+public class TestEJBInverseOneToOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tpublic TestEJBInverseOneToOne(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp ()\n+\t{\n+\t\tdeleteAll(InvertA.class);\n+\t\tdeleteAll(InvertB.class);\n+\t}\n+\n+\n+\tprivate static Object insertData (EntityManager pm)\n+\t{\n+\t\tInvertA a;\n+\t\tInvertB b;\n+\t\ta = new InvertA (1);\n+\t\tb = new InvertB (2);\n+\t\ta.setTest (\"testA\");\n+\t\tb.setTest (\"testB\");\n+\t\tb.setInvertA (a);\n+\n+\t\tEntityTransaction t = pm.getTransaction ();\n+\t\tt.begin ();\n+\t\tpm.persist(b);\n+\t\t//pm.makeTransactional (b);\n+\n+\t\treturn (pm.find(InvertB.class, 2));\n+\t}\n+\n+\n+\tpublic void testLoad ()\n+\t{\n+\t\tInvertA a;\n+\t\tInvertB b;\n+\t\tObject aId;\n+\t\tObject bId;\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\taId = insertData (pm);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tb = (InvertB) aId;\n+\n+\t\tassertNotNull(b.getInvertA().getTest());\n+\t\tassertEquals (b.getInvertA().getTest (), \"testA\");\n+\t}\n+\n+}"},{"sha":"68b872f8af24f5d66269899e2ac450e7a12052ff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,101 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBOuterJoinValues extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tpublic int oid = 0;\r\n-\r\n-\tpublic TestEJBOuterJoinValues(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll(OuterJoinValuePC.class);\r\n-\r\n-\t\tOuterJoinValuePC pc = new OuterJoinValuePC (10);\r\n-\t\tpc.setStringField (\"pc\");\r\n-\t\tpc.setValue1 (1);\r\n-\t\tpc.setValue2 (2);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tendTx(pm);\r\n-\r\n-\t\toid = pc.getId();\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testNull ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n-\r\n-\t\tpc.setValue1 (0);\r\n-\t\tpc.setValue2 (0);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tpc = pm.find(OuterJoinValuePC.class, oid);\r\n-\t\tassertEquals (0, pc.getValue1 ());\r\n-\t\tassertEquals (0, pc.getValue2 ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testUpdate ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n-\t\tpc.setValue1 (3);\r\n-\t\tpc.setValue2 (0);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tpc = pm.find(OuterJoinValuePC.class, oid);\r\n-\t\tassertEquals (3, pc.getValue1 ());\r\n-\t\tassertEquals (0, pc.getValue2 ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testInsert ()\r\n-\t{\r\n-\t\t// just tests the values inserted in the setup method\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n-\t\tassertEquals (\"pc\", pc.getStringField ());\r\n-\t\tassertEquals (1, pc.getValue1 ());\r\n-\t\tassertEquals (2, pc.getValue2 ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC;\n+import junit.framework.*;\n+\n+public class TestEJBOuterJoinValues extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tpublic int oid = 0;\n+\n+\tpublic TestEJBOuterJoinValues(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll(OuterJoinValuePC.class);\n+\n+\t\tOuterJoinValuePC pc = new OuterJoinValuePC (10);\n+\t\tpc.setStringField (\"pc\");\n+\t\tpc.setValue1 (1);\n+\t\tpc.setValue2 (2);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tendTx(pm);\n+\n+\t\toid = pc.getId();\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testNull ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\n+\n+\t\tpc.setValue1 (0);\n+\t\tpc.setValue2 (0);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tpc = pm.find(OuterJoinValuePC.class, oid);\n+\t\tassertEquals (0, pc.getValue1 ());\n+\t\tassertEquals (0, pc.getValue2 ());\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testUpdate ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\n+\t\tpc.setValue1 (3);\n+\t\tpc.setValue2 (0);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tpc = pm.find(OuterJoinValuePC.class, oid);\n+\t\tassertEquals (3, pc.getValue1 ());\n+\t\tassertEquals (0, pc.getValue2 ());\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testInsert ()\n+\t{\n+\t\t// just tests the values inserted in the setup method\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\n+\t\tassertEquals (\"pc\", pc.getStringField ());\n+\t\tassertEquals (1, pc.getValue1 ());\n+\t\tassertEquals (2, pc.getValue2 ());\n+\t\tendEm(pm);\n+\t}\n+\n+}"},{"sha":"53d79e48804b54cd7b8de6cf23660117a0199ea0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","status":"modified","additions":242,"deletions":242,"changes":484,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,242 +1,242 @@\n-/*\r\n- * TestEagerDistinct.java\r\n- *\r\n- * Created on October 4, 2006, 4:27 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.Join;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestEagerDistinct extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \r\n-{\r\n-        \r\n-    /** Creates a new instance of TestEagerDistinct */\r\n-    public TestEagerDistinct(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public boolean skipTest() {\r\n-        return ((JDBCConfiguration) getConfiguration()).\r\n-                getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n-    }\r\n-    \r\n-    public void setUpTestCase() {\r\n-       deleteAll(EagerPC.class);\r\n-       deleteAll(HelperPC.class);\r\n-       deleteAll(HelperPC2.class);\r\n-        \r\n-        HelperPC shared = new HelperPC();\r\n-        shared.setStringField(\"shared\");\r\n-        \r\n-        HelperPC2 pc1 = new HelperPC2();\r\n-        pc1.setStringField(\"pc1\");\r\n-        pc1.getHelperCollection().add(shared);\r\n-        pc1.getHelperCollection().add(new HelperPC());\r\n-        \r\n-        HelperPC2 pc2 = new HelperPC2();\r\n-        pc2.setStringField(\"pc2\");\r\n-        pc2.getHelperCollection().add(shared);\r\n-        pc2.getHelperCollection().add(new HelperPC());\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);\r\n-        \r\n-        // to make sure subclasses are selected, etc\r\n-        //FIXME jthomas\r\n-        //pm.createNativeQuery(\"\",HelperPC.class).execute();\r\n-        //pm.newQuery(HelperPC2.class).execute();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public OpenJPAEntityManager getPM() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().setMaxFetchDepth(-1);\r\n-        return pm;\r\n-    }\r\n-    \r\n-    public void testEagerParallelWithNonDistinctQuery()\r\n-    throws Exception {\r\n-        eagerParallelWithNonDistinctQuery(-1);\r\n-    }\r\n-    \r\n-    public void testPagingEagerParallelWithNonDistinctQuery()\r\n-    throws Exception {\r\n-        eagerParallelWithNonDistinctQuery(0);\r\n-    }\r\n-    \r\n-    private void eagerParallelWithNonDistinctQuery(int fetchSize)\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"stringField.startsWith ('pc')\",HelperPC2.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"stringField ascending\");\r\n-        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n-        List res = (List) q.getResultList();\r\n-        \r\n-        if (fetchSize == -1)\r\n-            assertEquals(2, sql.size());\r\n-        \r\n-        assertEquals(2, res.size());\r\n-        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\r\n-        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\r\n-        \r\n-        assertNotSQL(\"DISTINCT\");\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void assertHelperPC2(String stringField, HelperPC2 pc) {\r\n-        assertEquals(stringField, pc.getStringField());\r\n-        assertEquals(2, pc.getHelperCollection().size());\r\n-        assertEquals(\"shared\", ((HelperPC) pc.getHelperCollection().get(0)).\r\n-                getStringField());\r\n-        assertNull(((HelperPC) pc.getHelperCollection().get(1)).\r\n-                getStringField());\r\n-    }\r\n-    \r\n-    public void testEagerParallelWithDistinctQuery()\r\n-    throws Exception {\r\n-        eagerParallelWithDistinctQuery(-1);\r\n-    }\r\n-    \r\n-    public void testPagingEagerParallelWithDistinctQuery()\r\n-    throws Exception {\r\n-        eagerParallelWithDistinctQuery(0);\r\n-    }\r\n-    \r\n-    private void eagerParallelWithDistinctQuery(int fetchSize)\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q =  pm.createNativeQuery(\"helperCollection.contains (h) && h.stringField == 'shared'\",HelperPC2.class);\r\n-        //FIXME  jthomas\r\n-        //q.setOrdering(\"stringField ascending\");\r\n-        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n-        List res = (List) q.getResultList();\r\n-        \r\n-        if (fetchSize == -1) {\r\n-            sql.remove(0);    // orig sel\r\n-            assertSQL(\"DISTINCT\");\r\n-        }\r\n-        \r\n-        assertEquals(2, res.size());\r\n-        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\r\n-        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testNestedEagerParallel()\r\n-    throws Exception {\r\n-        nestedEagerParallel(-1);\r\n-    }\r\n-    \r\n-    public void testPagingNestedEagerParallel()\r\n-    throws Exception {\r\n-        nestedEagerParallel(0);\r\n-    }\r\n-    \r\n-    private void nestedEagerParallel(int fetchSize)\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",HelperPC2.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"stringField ascending\");\r\n-        List helpers = (List) q.getResultList();\r\n-        \r\n-        EagerPC eager1 = new EagerPC();\r\n-        eager1.setStringField(\"eager1\");\r\n-        eager1.getRecurseCollection().addAll(helpers);\r\n-        \r\n-        EagerPC eager2 = new EagerPC();\r\n-        eager2.setStringField(\"eager2\");\r\n-        eager2.getRecurseCollection().addAll(helpers);\r\n-        HelperPC2 pc3 = new HelperPC2();\r\n-        pc3.setStringField(\"pc3\");\r\n-        pc3.getHelperCollection().add(new HelperPC());\r\n-        pc3.getHelperCollection().add(new HelperPC());\r\n-        pc3.getHelperCollection().add(new HelperPC());\r\n-        eager2.getRecurseCollection().add(pc3);\r\n-        \r\n-        startTx(pm);;\r\n-        pm.persist(eager1);\r\n-        pm.persist(eager2);\r\n-        endTx(pm);;\r\n-        // make sure subclasses selected, etc\r\n-        //FIXME jthomas\r\n-        pm.createNativeQuery(\"\",EagerPC.class).getResultList();\r\n-        pm.close();\r\n-        sql.clear();\r\n-        \r\n-        pm = getPM();\r\n-        q = pm.createNativeQuery(\"stringField.startsWith ('eager')\",EagerPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"stringField ascending\");\r\n-        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n-        List res = (List) q.getResultList();\r\n-        \r\n-        if (fetchSize == -1) {\r\n-            sql.remove(0); // orig sel\r\n-            assertSQL(\"DISTINCT\");\r\n-        }\r\n-        \r\n-        assertEquals(2, res.size());\r\n-        eager1 = (EagerPC) res.get(0);\r\n-        assertEquals(\"eager1\", eager1.getStringField());\r\n-        assertEquals(2, eager1.getRecurseCollection().size());\r\n-        assertHelperPC2(\"pc1\", (HelperPC2) eager1.getRecurseCollection().\r\n-                get(0));\r\n-        assertHelperPC2(\"pc2\", (HelperPC2) eager1.getRecurseCollection().\r\n-                get(1));\r\n-        \r\n-        eager2 = (EagerPC) res.get(1);\r\n-        assertEquals(\"eager2\", eager2.getStringField());\r\n-        assertEquals(3, eager2.getRecurseCollection().size());\r\n-        assertHelperPC2(\"pc1\", (HelperPC2) eager2.getRecurseCollection().\r\n-                get(0));\r\n-        assertHelperPC2(\"pc2\", (HelperPC2) eager2.getRecurseCollection().\r\n-                get(1));\r\n-        pc3 = (HelperPC2) eager2.getRecurseCollection().get(2);\r\n-        assertEquals(\"pc3\", pc3.getStringField());\r\n-        assertEquals(3, pc3.getHelperCollection().size());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestEagerDistinct.java\n+ *\n+ * Created on October 4, 2006, 4:27 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.Join;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestEagerDistinct extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \n+{\n+        \n+    /** Creates a new instance of TestEagerDistinct */\n+    public TestEagerDistinct(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public boolean skipTest() {\n+        return ((JDBCConfiguration) getConfiguration()).\n+                getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\n+    }\n+    \n+    public void setUpTestCase() {\n+       deleteAll(EagerPC.class);\n+       deleteAll(HelperPC.class);\n+       deleteAll(HelperPC2.class);\n+        \n+        HelperPC shared = new HelperPC();\n+        shared.setStringField(\"shared\");\n+        \n+        HelperPC2 pc1 = new HelperPC2();\n+        pc1.setStringField(\"pc1\");\n+        pc1.getHelperCollection().add(shared);\n+        pc1.getHelperCollection().add(new HelperPC());\n+        \n+        HelperPC2 pc2 = new HelperPC2();\n+        pc2.setStringField(\"pc2\");\n+        pc2.getHelperCollection().add(shared);\n+        pc2.getHelperCollection().add(new HelperPC());\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);\n+        \n+        // to make sure subclasses are selected, etc\n+        //FIXME jthomas\n+        //pm.createNativeQuery(\"\",HelperPC.class).execute();\n+        //pm.newQuery(HelperPC2.class).execute();\n+        pm.close();\n+    }\n+    \n+    public OpenJPAEntityManager getPM() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().setMaxFetchDepth(-1);\n+        return pm;\n+    }\n+    \n+    public void testEagerParallelWithNonDistinctQuery()\n+    throws Exception {\n+        eagerParallelWithNonDistinctQuery(-1);\n+    }\n+    \n+    public void testPagingEagerParallelWithNonDistinctQuery()\n+    throws Exception {\n+        eagerParallelWithNonDistinctQuery(0);\n+    }\n+    \n+    private void eagerParallelWithNonDistinctQuery(int fetchSize)\n+    throws Exception {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createNativeQuery(\"stringField.startsWith ('pc')\",HelperPC2.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"stringField ascending\");\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\n+        List res = (List) q.getResultList();\n+        \n+        if (fetchSize == -1)\n+            assertEquals(2, sql.size());\n+        \n+        assertEquals(2, res.size());\n+        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\n+        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\n+        \n+        assertNotSQL(\"DISTINCT\");\n+        pm.close();\n+    }\n+    \n+    private void assertHelperPC2(String stringField, HelperPC2 pc) {\n+        assertEquals(stringField, pc.getStringField());\n+        assertEquals(2, pc.getHelperCollection().size());\n+        assertEquals(\"shared\", ((HelperPC) pc.getHelperCollection().get(0)).\n+                getStringField());\n+        assertNull(((HelperPC) pc.getHelperCollection().get(1)).\n+                getStringField());\n+    }\n+    \n+    public void testEagerParallelWithDistinctQuery()\n+    throws Exception {\n+        eagerParallelWithDistinctQuery(-1);\n+    }\n+    \n+    public void testPagingEagerParallelWithDistinctQuery()\n+    throws Exception {\n+        eagerParallelWithDistinctQuery(0);\n+    }\n+    \n+    private void eagerParallelWithDistinctQuery(int fetchSize)\n+    throws Exception {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q =  pm.createNativeQuery(\"helperCollection.contains (h) && h.stringField == 'shared'\",HelperPC2.class);\n+        //FIXME  jthomas\n+        //q.setOrdering(\"stringField ascending\");\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\n+        List res = (List) q.getResultList();\n+        \n+        if (fetchSize == -1) {\n+            sql.remove(0);    // orig sel\n+            assertSQL(\"DISTINCT\");\n+        }\n+        \n+        assertEquals(2, res.size());\n+        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\n+        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\n+        pm.close();\n+    }\n+    \n+    public void testNestedEagerParallel()\n+    throws Exception {\n+        nestedEagerParallel(-1);\n+    }\n+    \n+    public void testPagingNestedEagerParallel()\n+    throws Exception {\n+        nestedEagerParallel(0);\n+    }\n+    \n+    private void nestedEagerParallel(int fetchSize)\n+    throws Exception {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",HelperPC2.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"stringField ascending\");\n+        List helpers = (List) q.getResultList();\n+        \n+        EagerPC eager1 = new EagerPC();\n+        eager1.setStringField(\"eager1\");\n+        eager1.getRecurseCollection().addAll(helpers);\n+        \n+        EagerPC eager2 = new EagerPC();\n+        eager2.setStringField(\"eager2\");\n+        eager2.getRecurseCollection().addAll(helpers);\n+        HelperPC2 pc3 = new HelperPC2();\n+        pc3.setStringField(\"pc3\");\n+        pc3.getHelperCollection().add(new HelperPC());\n+        pc3.getHelperCollection().add(new HelperPC());\n+        pc3.getHelperCollection().add(new HelperPC());\n+        eager2.getRecurseCollection().add(pc3);\n+        \n+        startTx(pm);;\n+        pm.persist(eager1);\n+        pm.persist(eager2);\n+        endTx(pm);;\n+        // make sure subclasses selected, etc\n+        //FIXME jthomas\n+        pm.createNativeQuery(\"\",EagerPC.class).getResultList();\n+        pm.close();\n+        sql.clear();\n+        \n+        pm = getPM();\n+        q = pm.createNativeQuery(\"stringField.startsWith ('eager')\",EagerPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"stringField ascending\");\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\n+        List res = (List) q.getResultList();\n+        \n+        if (fetchSize == -1) {\n+            sql.remove(0); // orig sel\n+            assertSQL(\"DISTINCT\");\n+        }\n+        \n+        assertEquals(2, res.size());\n+        eager1 = (EagerPC) res.get(0);\n+        assertEquals(\"eager1\", eager1.getStringField());\n+        assertEquals(2, eager1.getRecurseCollection().size());\n+        assertHelperPC2(\"pc1\", (HelperPC2) eager1.getRecurseCollection().\n+                get(0));\n+        assertHelperPC2(\"pc2\", (HelperPC2) eager1.getRecurseCollection().\n+                get(1));\n+        \n+        eager2 = (EagerPC) res.get(1);\n+        assertEquals(\"eager2\", eager2.getStringField());\n+        assertEquals(3, eager2.getRecurseCollection().size());\n+        assertHelperPC2(\"pc1\", (HelperPC2) eager2.getRecurseCollection().\n+                get(0));\n+        assertHelperPC2(\"pc2\", (HelperPC2) eager2.getRecurseCollection().\n+                get(1));\n+        pc3 = (HelperPC2) eager2.getRecurseCollection().get(2);\n+        assertEquals(\"pc3\", pc3.getStringField());\n+        assertEquals(3, pc3.getHelperCollection().size());\n+        pm.close();\n+    }\n+    \n+}"},{"sha":"89814d79e0b35bf69bafed78266dd10efcdace70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","status":"modified","additions":874,"deletions":874,"changes":1748,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,874 +1,874 @@\n-/*\r\n- * TestEagerOuterToManyJoins.java\r\n- *\r\n- * Created on October 3, 2006, 10:53 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.persistence.FetchPlan;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.EagerOuterJoinPC;\r\n-\r\n-\r\n-public class TestEagerOuterToManyJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-    /** Creates a new instance of TestEagerOuterToManyJoins */\r\n-    public TestEagerOuterToManyJoins(String name) {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public boolean skipTest() {\r\n-        DBDictionary dict = ((JDBCConfiguration) getConfiguration()).\r\n-                getDBDictionaryInstance();\r\n-        return !dict.supportsSubselect;\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-        \r\n-       deleteAll(HelperPC.class);\r\n-       deleteAll(EagerOuterJoinPC2.class);\r\n-       deleteAll(EagerOuterJoinPC.class);\r\n-    }\r\n-    \r\n-    \r\n-    public void testStringCollectionById() {\r\n-        stringCollectionByIdTest(false);\r\n-    }\r\n-    \r\n-    public void testEmptyStringCollectionById() {\r\n-        stringCollectionByIdTest(true);\r\n-    }\r\n-    \r\n-    private void stringCollectionByIdTest(boolean empty) {\r\n-        Object oid = insertStringCollection((empty) ? 1 : 0);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if (empty)\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    0, pc.getStringCollection().size());\r\n-        else {\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    2, pc.getStringCollection().size());\r\n-            assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-            assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        }\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testStringCollectionByQuery() {\r\n-        stringCollectionByQueryTest(0);\r\n-    }\r\n-    \r\n-    public void testEmptyStringCollectionByQuery1() {\r\n-        stringCollectionByQueryTest(1);\r\n-    }\r\n-    \r\n-    public void testEmptyStringCollectionByQuery2() {\r\n-        stringCollectionByQueryTest(2);\r\n-    }\r\n-    \r\n-    public void testEmptyStringCollectionByQuery3() {\r\n-        stringCollectionByQueryTest(3);\r\n-    }\r\n-    \r\n-    private void stringCollectionByQueryTest(int empty) {\r\n-        insertStringCollection(empty);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        \r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if ((empty & 1) > 0)\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    0, pc.getStringCollection().size());\r\n-        else {\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    2, pc.getStringCollection().size());\r\n-            assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-            assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        }\r\n-        \r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        if ((empty & 2) > 0)\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    0, pc.getStringCollection().size());\r\n-        else {\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    2, pc.getStringCollection().size());\r\n-            assertTrue(pc.getStringCollection().contains(\"2.1\"));\r\n-            assertTrue(pc.getStringCollection().contains(\"2.2\"));\r\n-        }\r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertStringCollection(int empty) {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        if ((empty & 1) == 0) {\r\n-            pc1.getStringCollection().add(\"1.1\");\r\n-            pc1.getStringCollection().add(\"1.2\");\r\n-        }\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        if ((empty & 2) == 0) {\r\n-            pc2.getStringCollection().add(\"2.1\");\r\n-            pc2.getStringCollection().add(\"2.2\");\r\n-        }\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        startTx(pm);;\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testStringListById() {\r\n-        Object oid = insertStringList();\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        \r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringList().size());\r\n-        assertEquals(\"1.1\", pc.getStringList().get(0));\r\n-        assertEquals(\"1.2\", pc.getStringList().get(1));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testStringListByQuery() {\r\n-        insertStringList();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringList().size());\r\n-        assertEquals(\"1.1\", pc.getStringList().get(0));\r\n-        assertEquals(\"1.2\", pc.getStringList().get(1));\r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        assertEquals(2, pc.getStringList().size());\r\n-        assertEquals(\"2.1\", pc.getStringList().get(0));\r\n-        assertEquals(\"2.2\", pc.getStringList().get(1));\r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertStringList() {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        pc1.getStringList().add(\"1.1\");\r\n-        pc1.getStringList().add(\"1.2\");\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        pc2.getStringList().add(\"2.1\");\r\n-        pc2.getStringList().add(\"2.2\");\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testOneManyCollectionById() {\r\n-        oneManyCollectionByIdTest(false);\r\n-    }\r\n-    \r\n-    public void testEmptyOneManyCollectionById() {\r\n-        oneManyCollectionByIdTest(true);\r\n-    }\r\n-    \r\n-    private void oneManyCollectionByIdTest(boolean empty) {\r\n-        Object oid = insertOneManyCollection((empty) ? 1 : 0);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if (empty)\r\n-            assertEquals(0, pc.getOneManyCollection().size());\r\n-        else\r\n-            assertEquals(2, pc.getOneManyCollection().size());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testOneManyCollectionByQuery() {\r\n-        oneManyCollectionByQueryTest(0);\r\n-    }\r\n-    \r\n-    public void testEmptyOneManyCollectionByQuery1() {\r\n-        oneManyCollectionByQueryTest(1);\r\n-    }\r\n-    \r\n-    public void testEmptyOneManyCollectionByQuery2() {\r\n-        oneManyCollectionByQueryTest(2);\r\n-    }\r\n-    \r\n-    public void testEmptyOneManyCollectionByQuery3() {\r\n-        oneManyCollectionByQueryTest(3);\r\n-    }\r\n-    \r\n-    private void oneManyCollectionByQueryTest(int empty) {\r\n-        insertOneManyCollection(empty);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if ((empty & 1) > 0)\r\n-            assertEquals(0, pc.getOneManyCollection().size());\r\n-        else\r\n-            assertEquals(2, pc.getOneManyCollection().size());\r\n-        \r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        if ((empty & 2) > 0)\r\n-            assertEquals(0, pc.getOneManyCollection().size());\r\n-        else\r\n-            assertEquals(2, pc.getOneManyCollection().size());\r\n-        \r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertOneManyCollection(int empty) {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        EagerOuterJoinPC2 hpc;\r\n-        if ((empty & 1) == 0) {\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"1.1\");\r\n-            hpc.setRef(pc1);\r\n-            pc1.getOneManyCollection().add(hpc);\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"1.2\");\r\n-            hpc.setRef(pc1);\r\n-            pc1.getOneManyCollection().add(hpc);\r\n-        }\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        if ((empty & 2) == 0) {\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"2.1\");\r\n-            hpc.setRef(pc2);\r\n-            pc2.getOneManyCollection().add(hpc);\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"2.2\");\r\n-            hpc.setRef(pc2);\r\n-            pc2.getOneManyCollection().add(hpc);\r\n-        }\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testManyManyCollectionById() {\r\n-        Object oid = insertManyManyCollection();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyCollection().size());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testManyManyCollectionByQuery() {\r\n-        insertManyManyCollection();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyCollection().size());\r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyCollection().size());\r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertManyManyCollection() {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"1.1\");\r\n-        pc1.getManyManyCollection().add(hpc);\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"1.2\");\r\n-        pc1.getManyManyCollection().add(hpc);\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"2.1\");\r\n-        pc2.getManyManyCollection().add(hpc);\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"2.2\");\r\n-        pc2.getManyManyCollection().add(hpc);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testManyManyListById() {\r\n-        manyManyListByIdTest(false);\r\n-    }\r\n-    \r\n-    public void testEmptyManyManyListById() {\r\n-        manyManyListByIdTest(true);\r\n-    }\r\n-    \r\n-    private void manyManyListByIdTest(boolean empty) {\r\n-        Object oid = insertManyManyList((empty) ? 1 : 0);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if (empty)\r\n-            assertEquals(0, pc.getManyManyList().size());\r\n-        else {\r\n-            assertEquals(2, pc.getManyManyList().size());\r\n-            EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n-            pc.getManyManyList().get(0);\r\n-            assertEquals(\"1.1\", hpc.getName());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-            assertEquals(\"1.2\", hpc.getName());\r\n-        }\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testManyManyListByQuery() {\r\n-        manyManyListByQueryTest(0);\r\n-    }\r\n-    \r\n-    public void testEmptyManyManyListByQuery1() {\r\n-        manyManyListByQueryTest(1);\r\n-    }\r\n-    \r\n-    public void testEmptyManyManyListByQuery2() {\r\n-        manyManyListByQueryTest(2);\r\n-    }\r\n-    \r\n-    public void testEmptyManyManyListByQuery3() {\r\n-        manyManyListByQueryTest(3);\r\n-    }\r\n-    \r\n-    private void manyManyListByQueryTest(int empty) {\r\n-        insertManyManyList(empty);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        EagerOuterJoinPC2 hpc;\r\n-        if ((empty & 1) > 0)\r\n-            assertEquals(0, pc.getManyManyList().size());\r\n-        else {\r\n-            assertEquals(2, pc.getManyManyList().size());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n-            assertEquals(\"1.1\", hpc.getName());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-            assertEquals(\"1.2\", hpc.getName());\r\n-        }\r\n-        \r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        if ((empty & 2) > 0)\r\n-            assertEquals(0, pc.getManyManyList().size());\r\n-        else {\r\n-            assertEquals(2, pc.getManyManyList().size());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n-            assertEquals(\"2.1\", hpc.getName());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-            assertEquals(\"2.2\", hpc.getName());\r\n-        }\r\n-        \r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertManyManyList(int empty) {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        EagerOuterJoinPC2 hpc;\r\n-        if ((empty & 1) == 0) {\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"1.1\");\r\n-            pc1.getManyManyList().add(hpc);\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"1.2\");\r\n-            pc1.getManyManyList().add(hpc);\r\n-        }\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        if ((empty & 2) == 0) {\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"2.1\");\r\n-            pc2.getManyManyList().add(hpc);\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"2.2\");\r\n-            pc2.getManyManyList().add(hpc);\r\n-        }\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testTwoCollectionsInFetchGroupsById() {\r\n-        Object oid = insertTwoCollections();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringCollection().size());\r\n-        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n-        pc.getManyManyList().get(0);\r\n-        assertEquals(\"1.1\", hpc.getName());\r\n-        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"1.2\", hpc.getName());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testTwoCollectionsInFetchGroupsByQuery() {\r\n-        insertTwoCollections();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        \r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringCollection().size());\r\n-        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n-        pc.getManyManyList().get(0);\r\n-        assertEquals(\"1.1\", hpc.getName());\r\n-        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"1.2\", hpc.getName());\r\n-        \r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        assertEquals(2, pc.getStringCollection().size());\r\n-        assertTrue(pc.getStringCollection().contains(\"2.1\"));\r\n-        assertTrue(pc.getStringCollection().contains(\"2.2\"));\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n-        assertEquals(\"2.1\", hpc.getName());\r\n-        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"2.2\", hpc.getName());\r\n-        \r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertTwoCollections() {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        pc1.getStringCollection().add(\"1.1\");\r\n-        pc1.getStringCollection().add(\"1.2\");\r\n-        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"1.1\");\r\n-        pc1.getManyManyList().add(hpc);\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"1.2\");\r\n-        pc1.getManyManyList().add(hpc);\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        pc2.getStringCollection().add(\"2.1\");\r\n-        pc2.getStringCollection().add(\"2.2\");\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"2.1\");\r\n-        pc2.getManyManyList().add(hpc);\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"2.2\");\r\n-        pc2.getManyManyList().add(hpc);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testQueryRandomAccess() {\r\n-        insertManyStringList();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n-        fetch.setFetchBatchSize(3);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        List results = (List) q.getResultList();\r\n-        assertEquals(10, results.size());\r\n-        \r\n-        for (int i = 5; i < results.size(); i++) {\r\n-            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\r\n-            assertEquals(String.valueOf(i), pc.getName());\r\n-            assertEquals(2, pc.getStringList().size());\r\n-            assertEquals(i + \".1\", pc.getStringList().get(0));\r\n-            assertEquals(i + \".2\", pc.getStringList().get(1));\r\n-        }\r\n-        q.closeAll();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testQueryRange() {\r\n-        insertManyStringList();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n-        fetch.setFetchBatchSize(3);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        //q.setRange(5, 20);\r\n-        \r\n-        List results = (List) q.getResultList();\r\n-        assertEquals(5, results.size());\r\n-        \r\n-        for (int i = 0; i < results.size(); i++) {\r\n-            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\r\n-            assertEquals(String.valueOf(i + 5), pc.getName());\r\n-            assertEquals(2, pc.getStringList().size());\r\n-            assertEquals((i + 5) + \".1\", pc.getStringList().get(0));\r\n-            assertEquals((i + 5) + \".2\", pc.getStringList().get(1));\r\n-        }\r\n-        q.closeAll();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void insertManyStringList() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        for (int i = 0; i < 10; i++) {\r\n-            EagerOuterJoinPC pc = new EagerOuterJoinPC();\r\n-            pc.setName(String.valueOf(i));\r\n-            pc.getStringList().add(i + \".1\");\r\n-            pc.getStringList().add(i + \".2\");\r\n-            pm.persist(pc);\r\n-        }\r\n-        endTx(pm);;\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testEagerToOneThenEagerToMany() {\r\n-        insertEagers();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC2.class, \"ref\");\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC2.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        assertEquals(new ArrayList(results).toString(), 2, results.size());\r\n-        \r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\r\n-        assertEquals(\"r1\", ref.getName());\r\n-        EagerOuterJoinPC pc = ref.getRef();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringCollection().size());\r\n-        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        \r\n-        ref = (EagerOuterJoinPC2) itr.next();\r\n-        assertEquals(\"r2\", ref.getName());\r\n-        assertTrue(pc == ref.getRef());\r\n-        \r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testEagerToManyThenEagerToOne() {\r\n-        insertEagers();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        assertEquals(1, results.size());\r\n-        \r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\r\n-        pc.getManyManyList().get(0);\r\n-        assertEquals(\"r1\", ref.getName());\r\n-        assertEquals(\"h1\", ref.getHelper().getStringField());\r\n-        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"r2\", ref.getName());\r\n-        assertEquals(\"h2\", ref.getHelper().getStringField());\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testEagerToManyThenEagerToMany() {\r\n-        insertEagers();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        fetch.addField(EagerOuterJoinPC2.class, \"stringCollection\");\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        assertEquals(1, results.size());\r\n-        \r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\r\n-        pc.getManyManyList().get(0);\r\n-        assertEquals(\"r1\", ref.getName());\r\n-        assertEquals(2, ref.getStringCollection().size());\r\n-        assertTrue(ref.getStringCollection().contains(\"r1.1\"));\r\n-        assertTrue(ref.getStringCollection().contains(\"r1.2\"));\r\n-        \r\n-        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"r2\", ref.getName());\r\n-        assertEquals(2, ref.getStringCollection().size());\r\n-        assertTrue(ref.getStringCollection().contains(\"r2.1\"));\r\n-        assertTrue(ref.getStringCollection().contains(\"r2.2\"));\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testEagerToOneAndToManyThenEagerToOne() {\r\n-        Object oid = insertEagers();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n-        fetch.addField(EagerOuterJoinPC.class, \"helper\");\r\n-        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        assertEquals(1, results.size());\r\n-        \r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(\"h3\", pc.getHelper().getStringField());\r\n-        assertEquals(2, pc.getOneManyCollection().size());\r\n-        Iterator itr = pc.getOneManyCollection().iterator();\r\n-        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\r\n-        if (\"r1\".equals(ref.getName())) {\r\n-            assertEquals(\"h1\", ref.getHelper().getStringField());\r\n-            ref = (EagerOuterJoinPC2) itr.next();\r\n-            assertEquals(\"r2\", ref.getName());\r\n-            assertEquals(\"h2\", ref.getHelper().getStringField());\r\n-        } else {\r\n-            assertEquals(\"r2\", ref.getName());\r\n-            assertEquals(\"h2\", ref.getHelper().getStringField());\r\n-            ref = (EagerOuterJoinPC2) itr.next();\r\n-            assertEquals(\"r1\", ref.getName());\r\n-            assertEquals(\"h1\", ref.getHelper().getStringField());\r\n-        }\r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertEagers() {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        pc1.getStringCollection().add(\"1.1\");\r\n-        pc1.getStringCollection().add(\"1.2\");\r\n-        \r\n-        EagerOuterJoinPC2 ref1 = new EagerOuterJoinPC2();\r\n-        ref1.setName(\"r1\");\r\n-        ref1.getStringCollection().add(\"r1.1\");\r\n-        ref1.getStringCollection().add(\"r1.2\");\r\n-        \r\n-        EagerOuterJoinPC2 ref2 = new EagerOuterJoinPC2();\r\n-        ref2.setName(\"r2\");\r\n-        ref2.getStringCollection().add(\"r2.1\");\r\n-        ref2.getStringCollection().add(\"r2.2\");\r\n-        \r\n-        HelperPC hpc1 = new HelperPC();\r\n-        hpc1.setStringField(\"h1\");\r\n-        \r\n-        HelperPC hpc2 = new HelperPC();\r\n-        hpc2.setStringField(\"h2\");\r\n-        \r\n-        HelperPC hpc3 = new HelperPC();\r\n-        hpc3.setStringField(\"h3\");\r\n-        \r\n-        pc1.getManyManyList().add(ref1);\r\n-        pc1.getOneManyCollection().add(ref1);\r\n-        ref1.setRef(pc1);\r\n-        pc1.getManyManyList().add(ref2);\r\n-        pc1.getOneManyCollection().add(ref2);\r\n-        ref2.setRef(pc1);\r\n-        \r\n-        ref1.setHelper(hpc1);\r\n-        ref2.setHelper(hpc2);\r\n-        pc1.setHelper(hpc3);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        pm.persist(pc1);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestEagerOuterToManyJoins.java\n+ *\n+ * Created on October 3, 2006, 10:53 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.jdbc.common.apps.EagerOuterJoinPC;\n+\n+\n+public class TestEagerOuterToManyJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+    /** Creates a new instance of TestEagerOuterToManyJoins */\n+    public TestEagerOuterToManyJoins(String name) {\n+    \tsuper(name);\n+    }\n+    \n+    public boolean skipTest() {\n+        DBDictionary dict = ((JDBCConfiguration) getConfiguration()).\n+                getDBDictionaryInstance();\n+        return !dict.supportsSubselect;\n+    }\n+    \n+    public void setUp() {\n+        \n+       deleteAll(HelperPC.class);\n+       deleteAll(EagerOuterJoinPC2.class);\n+       deleteAll(EagerOuterJoinPC.class);\n+    }\n+    \n+    \n+    public void testStringCollectionById() {\n+        stringCollectionByIdTest(false);\n+    }\n+    \n+    public void testEmptyStringCollectionById() {\n+        stringCollectionByIdTest(true);\n+    }\n+    \n+    private void stringCollectionByIdTest(boolean empty) {\n+        Object oid = insertStringCollection((empty) ? 1 : 0);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        if (empty)\n+            assertEquals(pc.getStringCollection().toString(),\n+                    0, pc.getStringCollection().size());\n+        else {\n+            assertEquals(pc.getStringCollection().toString(),\n+                    2, pc.getStringCollection().size());\n+            assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+            assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        }\n+        pm.close();\n+    }\n+    \n+    public void testStringCollectionByQuery() {\n+        stringCollectionByQueryTest(0);\n+    }\n+    \n+    public void testEmptyStringCollectionByQuery1() {\n+        stringCollectionByQueryTest(1);\n+    }\n+    \n+    public void testEmptyStringCollectionByQuery2() {\n+        stringCollectionByQueryTest(2);\n+    }\n+    \n+    public void testEmptyStringCollectionByQuery3() {\n+        stringCollectionByQueryTest(3);\n+    }\n+    \n+    private void stringCollectionByQueryTest(int empty) {\n+        insertStringCollection(empty);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        \n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        if ((empty & 1) > 0)\n+            assertEquals(pc.getStringCollection().toString(),\n+                    0, pc.getStringCollection().size());\n+        else {\n+            assertEquals(pc.getStringCollection().toString(),\n+                    2, pc.getStringCollection().size());\n+            assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+            assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        }\n+        \n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        if ((empty & 2) > 0)\n+            assertEquals(pc.getStringCollection().toString(),\n+                    0, pc.getStringCollection().size());\n+        else {\n+            assertEquals(pc.getStringCollection().toString(),\n+                    2, pc.getStringCollection().size());\n+            assertTrue(pc.getStringCollection().contains(\"2.1\"));\n+            assertTrue(pc.getStringCollection().contains(\"2.2\"));\n+        }\n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertStringCollection(int empty) {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        if ((empty & 1) == 0) {\n+            pc1.getStringCollection().add(\"1.1\");\n+            pc1.getStringCollection().add(\"1.2\");\n+        }\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        if ((empty & 2) == 0) {\n+            pc2.getStringCollection().add(\"2.1\");\n+            pc2.getStringCollection().add(\"2.2\");\n+        }\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        \n+        startTx(pm);;\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testStringListById() {\n+        Object oid = insertStringList();\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        \n+        \n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringList().size());\n+        assertEquals(\"1.1\", pc.getStringList().get(0));\n+        assertEquals(\"1.2\", pc.getStringList().get(1));\n+        pm.close();\n+    }\n+    \n+    public void testStringListByQuery() {\n+        insertStringList();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringList().size());\n+        assertEquals(\"1.1\", pc.getStringList().get(0));\n+        assertEquals(\"1.2\", pc.getStringList().get(1));\n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        assertEquals(2, pc.getStringList().size());\n+        assertEquals(\"2.1\", pc.getStringList().get(0));\n+        assertEquals(\"2.2\", pc.getStringList().get(1));\n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertStringList() {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        pc1.getStringList().add(\"1.1\");\n+        pc1.getStringList().add(\"1.2\");\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        pc2.getStringList().add(\"2.1\");\n+        pc2.getStringList().add(\"2.2\");\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testOneManyCollectionById() {\n+        oneManyCollectionByIdTest(false);\n+    }\n+    \n+    public void testEmptyOneManyCollectionById() {\n+        oneManyCollectionByIdTest(true);\n+    }\n+    \n+    private void oneManyCollectionByIdTest(boolean empty) {\n+        Object oid = insertOneManyCollection((empty) ? 1 : 0);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        if (empty)\n+            assertEquals(0, pc.getOneManyCollection().size());\n+        else\n+            assertEquals(2, pc.getOneManyCollection().size());\n+        pm.close();\n+    }\n+    \n+    public void testOneManyCollectionByQuery() {\n+        oneManyCollectionByQueryTest(0);\n+    }\n+    \n+    public void testEmptyOneManyCollectionByQuery1() {\n+        oneManyCollectionByQueryTest(1);\n+    }\n+    \n+    public void testEmptyOneManyCollectionByQuery2() {\n+        oneManyCollectionByQueryTest(2);\n+    }\n+    \n+    public void testEmptyOneManyCollectionByQuery3() {\n+        oneManyCollectionByQueryTest(3);\n+    }\n+    \n+    private void oneManyCollectionByQueryTest(int empty) {\n+        insertOneManyCollection(empty);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        if ((empty & 1) > 0)\n+            assertEquals(0, pc.getOneManyCollection().size());\n+        else\n+            assertEquals(2, pc.getOneManyCollection().size());\n+        \n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        if ((empty & 2) > 0)\n+            assertEquals(0, pc.getOneManyCollection().size());\n+        else\n+            assertEquals(2, pc.getOneManyCollection().size());\n+        \n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertOneManyCollection(int empty) {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        EagerOuterJoinPC2 hpc;\n+        if ((empty & 1) == 0) {\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"1.1\");\n+            hpc.setRef(pc1);\n+            pc1.getOneManyCollection().add(hpc);\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"1.2\");\n+            hpc.setRef(pc1);\n+            pc1.getOneManyCollection().add(hpc);\n+        }\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        if ((empty & 2) == 0) {\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"2.1\");\n+            hpc.setRef(pc2);\n+            pc2.getOneManyCollection().add(hpc);\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"2.2\");\n+            hpc.setRef(pc2);\n+            pc2.getOneManyCollection().add(hpc);\n+        }\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testManyManyCollectionById() {\n+        Object oid = insertManyManyCollection();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getManyManyCollection().size());\n+        pm.close();\n+    }\n+    \n+    public void testManyManyCollectionByQuery() {\n+        insertManyManyCollection();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getManyManyCollection().size());\n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        assertEquals(2, pc.getManyManyCollection().size());\n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertManyManyCollection() {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"1.1\");\n+        pc1.getManyManyCollection().add(hpc);\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"1.2\");\n+        pc1.getManyManyCollection().add(hpc);\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"2.1\");\n+        pc2.getManyManyCollection().add(hpc);\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"2.2\");\n+        pc2.getManyManyCollection().add(hpc);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testManyManyListById() {\n+        manyManyListByIdTest(false);\n+    }\n+    \n+    public void testEmptyManyManyListById() {\n+        manyManyListByIdTest(true);\n+    }\n+    \n+    private void manyManyListByIdTest(boolean empty) {\n+        Object oid = insertManyManyList((empty) ? 1 : 0);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        if (empty)\n+            assertEquals(0, pc.getManyManyList().size());\n+        else {\n+            assertEquals(2, pc.getManyManyList().size());\n+            EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\n+            pc.getManyManyList().get(0);\n+            assertEquals(\"1.1\", hpc.getName());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+            assertEquals(\"1.2\", hpc.getName());\n+        }\n+        pm.close();\n+    }\n+    \n+    public void testManyManyListByQuery() {\n+        manyManyListByQueryTest(0);\n+    }\n+    \n+    public void testEmptyManyManyListByQuery1() {\n+        manyManyListByQueryTest(1);\n+    }\n+    \n+    public void testEmptyManyManyListByQuery2() {\n+        manyManyListByQueryTest(2);\n+    }\n+    \n+    public void testEmptyManyManyListByQuery3() {\n+        manyManyListByQueryTest(3);\n+    }\n+    \n+    private void manyManyListByQueryTest(int empty) {\n+        insertManyManyList(empty);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        EagerOuterJoinPC2 hpc;\n+        if ((empty & 1) > 0)\n+            assertEquals(0, pc.getManyManyList().size());\n+        else {\n+            assertEquals(2, pc.getManyManyList().size());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\n+            assertEquals(\"1.1\", hpc.getName());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+            assertEquals(\"1.2\", hpc.getName());\n+        }\n+        \n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        if ((empty & 2) > 0)\n+            assertEquals(0, pc.getManyManyList().size());\n+        else {\n+            assertEquals(2, pc.getManyManyList().size());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\n+            assertEquals(\"2.1\", hpc.getName());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+            assertEquals(\"2.2\", hpc.getName());\n+        }\n+        \n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertManyManyList(int empty) {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        EagerOuterJoinPC2 hpc;\n+        if ((empty & 1) == 0) {\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"1.1\");\n+            pc1.getManyManyList().add(hpc);\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"1.2\");\n+            pc1.getManyManyList().add(hpc);\n+        }\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        if ((empty & 2) == 0) {\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"2.1\");\n+            pc2.getManyManyList().add(hpc);\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"2.2\");\n+            pc2.getManyManyList().add(hpc);\n+        }\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testTwoCollectionsInFetchGroupsById() {\n+        Object oid = insertTwoCollections();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringCollection().size());\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        assertEquals(2, pc.getManyManyList().size());\n+        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\n+        pc.getManyManyList().get(0);\n+        assertEquals(\"1.1\", hpc.getName());\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"1.2\", hpc.getName());\n+        pm.close();\n+    }\n+    \n+    public void testTwoCollectionsInFetchGroupsByQuery() {\n+        insertTwoCollections();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        fetch.setFetchBatchSize(-1);\n+        \n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringCollection().size());\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        assertEquals(2, pc.getManyManyList().size());\n+        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\n+        pc.getManyManyList().get(0);\n+        assertEquals(\"1.1\", hpc.getName());\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"1.2\", hpc.getName());\n+        \n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        assertEquals(2, pc.getStringCollection().size());\n+        assertTrue(pc.getStringCollection().contains(\"2.1\"));\n+        assertTrue(pc.getStringCollection().contains(\"2.2\"));\n+        assertEquals(2, pc.getManyManyList().size());\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\n+        assertEquals(\"2.1\", hpc.getName());\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"2.2\", hpc.getName());\n+        \n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertTwoCollections() {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        pc1.getStringCollection().add(\"1.1\");\n+        pc1.getStringCollection().add(\"1.2\");\n+        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"1.1\");\n+        pc1.getManyManyList().add(hpc);\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"1.2\");\n+        pc1.getManyManyList().add(hpc);\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        pc2.getStringCollection().add(\"2.1\");\n+        pc2.getStringCollection().add(\"2.2\");\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"2.1\");\n+        pc2.getManyManyList().add(hpc);\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"2.2\");\n+        pc2.getManyManyList().add(hpc);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testQueryRandomAccess() {\n+        insertManyStringList();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        fetch.setFetchBatchSize(3);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        List results = (List) q.getResultList();\n+        assertEquals(10, results.size());\n+        \n+        for (int i = 5; i < results.size(); i++) {\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\n+            assertEquals(String.valueOf(i), pc.getName());\n+            assertEquals(2, pc.getStringList().size());\n+            assertEquals(i + \".1\", pc.getStringList().get(0));\n+            assertEquals(i + \".2\", pc.getStringList().get(1));\n+        }\n+        q.closeAll();\n+        pm.close();\n+    }\n+    \n+    public void testQueryRange() {\n+        insertManyStringList();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        fetch.setFetchBatchSize(3);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        //q.setRange(5, 20);\n+        \n+        List results = (List) q.getResultList();\n+        assertEquals(5, results.size());\n+        \n+        for (int i = 0; i < results.size(); i++) {\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\n+            assertEquals(String.valueOf(i + 5), pc.getName());\n+            assertEquals(2, pc.getStringList().size());\n+            assertEquals((i + 5) + \".1\", pc.getStringList().get(0));\n+            assertEquals((i + 5) + \".2\", pc.getStringList().get(1));\n+        }\n+        q.closeAll();\n+        pm.close();\n+    }\n+    \n+    private void insertManyStringList() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        for (int i = 0; i < 10; i++) {\n+            EagerOuterJoinPC pc = new EagerOuterJoinPC();\n+            pc.setName(String.valueOf(i));\n+            pc.getStringList().add(i + \".1\");\n+            pc.getStringList().add(i + \".2\");\n+            pm.persist(pc);\n+        }\n+        endTx(pm);;\n+        pm.close();\n+    }\n+    \n+    public void testEagerToOneThenEagerToMany() {\n+        insertEagers();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC2.class, \"ref\");\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC2.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        assertEquals(new ArrayList(results).toString(), 2, results.size());\n+        \n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\n+        assertEquals(\"r1\", ref.getName());\n+        EagerOuterJoinPC pc = ref.getRef();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringCollection().size());\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        \n+        ref = (EagerOuterJoinPC2) itr.next();\n+        assertEquals(\"r2\", ref.getName());\n+        assertTrue(pc == ref.getRef());\n+        \n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    public void testEagerToManyThenEagerToOne() {\n+        insertEagers();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        assertEquals(1, results.size());\n+        \n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getManyManyList().size());\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\n+        pc.getManyManyList().get(0);\n+        assertEquals(\"r1\", ref.getName());\n+        assertEquals(\"h1\", ref.getHelper().getStringField());\n+        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"r2\", ref.getName());\n+        assertEquals(\"h2\", ref.getHelper().getStringField());\n+        \n+        pm.close();\n+    }\n+    \n+    public void testEagerToManyThenEagerToMany() {\n+        insertEagers();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        fetch.addField(EagerOuterJoinPC2.class, \"stringCollection\");\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        assertEquals(1, results.size());\n+        \n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getManyManyList().size());\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\n+        pc.getManyManyList().get(0);\n+        assertEquals(\"r1\", ref.getName());\n+        assertEquals(2, ref.getStringCollection().size());\n+        assertTrue(ref.getStringCollection().contains(\"r1.1\"));\n+        assertTrue(ref.getStringCollection().contains(\"r1.2\"));\n+        \n+        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"r2\", ref.getName());\n+        assertEquals(2, ref.getStringCollection().size());\n+        assertTrue(ref.getStringCollection().contains(\"r2.1\"));\n+        assertTrue(ref.getStringCollection().contains(\"r2.2\"));\n+        \n+        pm.close();\n+    }\n+    \n+    public void testEagerToOneAndToManyThenEagerToOne() {\n+        Object oid = insertEagers();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\n+        fetch.addField(EagerOuterJoinPC.class, \"helper\");\n+        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        assertEquals(1, results.size());\n+        \n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(\"h3\", pc.getHelper().getStringField());\n+        assertEquals(2, pc.getOneManyCollection().size());\n+        Iterator itr = pc.getOneManyCollection().iterator();\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\n+        if (\"r1\".equals(ref.getName())) {\n+            assertEquals(\"h1\", ref.getHelper().getStringField());\n+            ref = (EagerOuterJoinPC2) itr.next();\n+            assertEquals(\"r2\", ref.getName());\n+            assertEquals(\"h2\", ref.getHelper().getStringField());\n+        } else {\n+            assertEquals(\"r2\", ref.getName());\n+            assertEquals(\"h2\", ref.getHelper().getStringField());\n+            ref = (EagerOuterJoinPC2) itr.next();\n+            assertEquals(\"r1\", ref.getName());\n+            assertEquals(\"h1\", ref.getHelper().getStringField());\n+        }\n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertEagers() {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        pc1.getStringCollection().add(\"1.1\");\n+        pc1.getStringCollection().add(\"1.2\");\n+        \n+        EagerOuterJoinPC2 ref1 = new EagerOuterJoinPC2();\n+        ref1.setName(\"r1\");\n+        ref1.getStringCollection().add(\"r1.1\");\n+        ref1.getStringCollection().add(\"r1.2\");\n+        \n+        EagerOuterJoinPC2 ref2 = new EagerOuterJoinPC2();\n+        ref2.setName(\"r2\");\n+        ref2.getStringCollection().add(\"r2.1\");\n+        ref2.getStringCollection().add(\"r2.2\");\n+        \n+        HelperPC hpc1 = new HelperPC();\n+        hpc1.setStringField(\"h1\");\n+        \n+        HelperPC hpc2 = new HelperPC();\n+        hpc2.setStringField(\"h2\");\n+        \n+        HelperPC hpc3 = new HelperPC();\n+        hpc3.setStringField(\"h3\");\n+        \n+        pc1.getManyManyList().add(ref1);\n+        pc1.getOneManyCollection().add(ref1);\n+        ref1.setRef(pc1);\n+        pc1.getManyManyList().add(ref2);\n+        pc1.getOneManyCollection().add(ref2);\n+        ref2.setRef(pc1);\n+        \n+        ref1.setHelper(hpc1);\n+        ref2.setHelper(hpc2);\n+        pc1.setHelper(hpc3);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        pm.persist(pc1);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    \n+}"},{"sha":"7cbc469e3fccc4f93884980bcac890a87090eb32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","status":"modified","additions":132,"deletions":132,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,132 +1,132 @@\n-/*\r\n- * TestIntermediate.java\r\n- *\r\n- * Created on October 3, 2006, 12:01 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestIntermediate extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-    \r\n-    private Object _pc;\r\n-    private Object _rel;\r\n-    \r\n-    public TestIntermediate(String test) {\r\n-        super(test);\r\n-    }\r\n-    \r\n-    /** Creates a new instance of TestIntermediate */\r\n-    public TestIntermediate() {\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-        RuntimeTest1 pc = new RuntimeTest1(\"pc\", 1);\r\n-        RuntimeTest1 rel = new RuntimeTest1(\"rel\", 2);\r\n-        pc.setSelfOneOne(rel);\r\n-        \r\n-        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-        Broker broker = JPAFacadeHelper.toBroker(em);\r\n-        broker.begin();\r\n-        broker.persist(pc, null);\r\n-        broker.commit();\r\n-        _pc = broker.getObjectId(pc);\r\n-        _rel = broker.getObjectId(rel);\r\n-        broker.close();\r\n-        em.close();\r\n-    }\r\n-    \r\n-    public void testOneOneSetsIntermediate() {\r\n-        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-        Broker broker = JPAFacadeHelper.toBroker(em);\r\n-        try {\r\n-            oneOneIntermediateTest(broker);\r\n-        } finally {\r\n-            broker.close();\r\n-            em.close();\r\n-        }\r\n-    }\r\n-    \r\n-    public void testDataCacheOneOneSetsIntermediate() {\r\n-        BrokerFactory factory = getBrokerFactory(new String[]{\r\n-            \"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-        });\r\n-        \r\n-        // get obj into cache\r\n-        Broker broker = factory.newBroker();\r\n-        try {\r\n-            broker.find(_pc, true, null);\r\n-        } finally {\r\n-            broker.close();\r\n-        }\r\n-        \r\n-        // test from cache\r\n-        broker = factory.newBroker();\r\n-        try {\r\n-            oneOneIntermediateTest(broker);\r\n-        } finally {\r\n-            broker.close();\r\n-            try {\r\n-                factory.close();\r\n-            } catch (Exception e) {\r\n-            }\r\n-        }\r\n-    }\r\n-    \r\n-    /**\r\n-     * Helper method to see that the one to one uses an intermediate values.\r\n-     */\r\n-    private void oneOneIntermediateTest(Broker broker) {\r\n-        RuntimeTest1 pc = (RuntimeTest1) broker.find(_pc, true, null);\r\n-        OpenJPAStateManager sm = broker.getStateManager(pc);\r\n-        assertNotNull(sm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"selfOneOne\");\r\n-        assertNotNull(fmd);\r\n-        assertEquals(_rel, sm.getIntermediate(fmd.getIndex()));\r\n-        assertEquals(_rel, broker.getObjectId(pc.getSelfOneOne()));\r\n-        assertNull(sm.getIntermediate(fmd.getIndex()));\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestIntermediate.java\n+ *\n+ * Created on October 3, 2006, 12:01 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestIntermediate extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+    \n+    private Object _pc;\n+    private Object _rel;\n+    \n+    public TestIntermediate(String test) {\n+        super(test);\n+    }\n+    \n+    /** Creates a new instance of TestIntermediate */\n+    public TestIntermediate() {\n+    }\n+    \n+    public void setUp() {\n+        RuntimeTest1 pc = new RuntimeTest1(\"pc\", 1);\n+        RuntimeTest1 rel = new RuntimeTest1(\"rel\", 2);\n+        pc.setSelfOneOne(rel);\n+        \n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+        Broker broker = JPAFacadeHelper.toBroker(em);\n+        broker.begin();\n+        broker.persist(pc, null);\n+        broker.commit();\n+        _pc = broker.getObjectId(pc);\n+        _rel = broker.getObjectId(rel);\n+        broker.close();\n+        em.close();\n+    }\n+    \n+    public void testOneOneSetsIntermediate() {\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+        Broker broker = JPAFacadeHelper.toBroker(em);\n+        try {\n+            oneOneIntermediateTest(broker);\n+        } finally {\n+            broker.close();\n+            em.close();\n+        }\n+    }\n+    \n+    public void testDataCacheOneOneSetsIntermediate() {\n+        BrokerFactory factory = getBrokerFactory(new String[]{\n+            \"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+        });\n+        \n+        // get obj into cache\n+        Broker broker = factory.newBroker();\n+        try {\n+            broker.find(_pc, true, null);\n+        } finally {\n+            broker.close();\n+        }\n+        \n+        // test from cache\n+        broker = factory.newBroker();\n+        try {\n+            oneOneIntermediateTest(broker);\n+        } finally {\n+            broker.close();\n+            try {\n+                factory.close();\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Helper method to see that the one to one uses an intermediate values.\n+     */\n+    private void oneOneIntermediateTest(Broker broker) {\n+        RuntimeTest1 pc = (RuntimeTest1) broker.find(_pc, true, null);\n+        OpenJPAStateManager sm = broker.getStateManager(pc);\n+        assertNotNull(sm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"selfOneOne\");\n+        assertNotNull(fmd);\n+        assertEquals(_rel, sm.getIntermediate(fmd.getIndex()));\n+        assertEquals(_rel, broker.getObjectId(pc.getSelfOneOne()));\n+        assertNull(sm.getIntermediate(fmd.getIndex()));\n+    }\n+    \n+    \n+}"},{"sha":"5c1a436cdc7870cf0408ea4251db8e2289b6bace","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","status":"modified","additions":363,"deletions":363,"changes":726,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,363 +1,363 @@\n-/*\r\n- * TestIrregularJoins.java\r\n- *\r\n- * Created on October 3, 2006, 12:47 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.NonPKJoinPC2;\r\n-\r\n-\r\n-\r\n-public class TestIrregularJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-\r\n-    private Object _nonpk = null;\r\n-    private Object _nonpk3 = null;\r\n-    private Object _partial = null;\r\n-    private Object _partial3 = null;\r\n-    private Object _constant2 = null;\r\n-    private Object _constant3 = null;\r\n-\r\n-    public TestIrregularJoins(String test) {\r\n-        super(test);\r\n-    }\r\n-    \r\n-    /** Creates a new instance of TestIrregularJoins */\r\n-    public TestIrregularJoins() {\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        // make sure these classes are registered since we're using metadata\r\n-        // values for the class indicator\r\n-        new ConstantJoinPC();\r\n-        new ConstantJoinPC2();\r\n-        new ConstantJoinPC3();\r\n-\r\n-       deleteAll(PartialJoinPC.class);\r\n-       deleteAll(NonPKJoinPC.class);\r\n-       deleteAll(ConstantJoinPC.class);\r\n-\r\n-        PartialJoinPC partial = new PartialJoinPC();\r\n-        partial.setPk1(1);\r\n-        partial.setPk2(2);\r\n-        PartialJoinPC2 partial2 = new PartialJoinPC2();\r\n-        partial2.setPk1(2);\r\n-        partial2.setPk2(3);\r\n-        PartialJoinPC3 partial3 = new PartialJoinPC3();\r\n-        partial3.setPk1(3);\r\n-        partial3.setPk2(4);\r\n-\r\n-        NonPKJoinPC nonpk = new NonPKJoinPC();\r\n-        nonpk.setId1(1);\r\n-        nonpk.setId2(2);\r\n-        NonPKJoinPC2 nonpk2 = new NonPKJoinPC2();\r\n-        nonpk2.setId1(2);\r\n-        nonpk2.setId2(3);\r\n-        NonPKJoinPC3 nonpk3 = new NonPKJoinPC3();\r\n-        nonpk3.setId1(3);\r\n-        nonpk3.setId2(4);\r\n-\r\n-        partial.setNonPK(nonpk);\r\n-        partial.getNonPKs().add(nonpk);\r\n-        nonpk.setPartial(partial);\r\n-        nonpk.getPartials().add(partial);\r\n-\r\n-        partial3.setNonPK(nonpk);\r\n-        partial3.setNonPK3(nonpk3);\r\n-        partial3.getNonPKs().add(nonpk);\r\n-        partial3.getNonPK2s().add(nonpk2);\r\n-        nonpk3.setPartial(partial);\r\n-        nonpk3.setPartial3(partial3);\r\n-        nonpk3.getPartials().add(partial);\r\n-        nonpk3.getPartial2s().add(partial2);\r\n-\r\n-        ConstantJoinPC2 constant2 = new ConstantJoinPC2();\r\n-        constant2.setPk1(1);\r\n-        constant2.setPk2(2);\r\n-        constant2.setNonPK(nonpk3);\r\n-        constant2.setNonPK2(nonpk3);\r\n-\r\n-        // set the object's inverse on diff objects so we can be sure\r\n-        // that its 1-many includes only the object with the right constant\r\n-        nonpk.setConstant(constant2);\r\n-        nonpk2.setConstant(constant2);\r\n-        nonpk3.setConstant(constant2);\r\n-\r\n-        ConstantJoinPC3 constant3 = new ConstantJoinPC3();\r\n-        constant3.setPk1(1);\r\n-        constant3.setPk2(3);\r\n-\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        \r\n-        pm.persist(partial);\r\n-        pm.persist(partial3);\r\n-        pm.persist(constant2);\r\n-        pm.persist(constant3);\r\n-        endTx(pm);\r\n-        _partial = pm.getObjectId(partial);\r\n-        _partial3 = pm.getObjectId(partial3);\r\n-        _nonpk = pm.getObjectId(nonpk);\r\n-        _nonpk3 = pm.getObjectId(nonpk3);\r\n-        _constant2 = pm.getObjectId(constant2);\r\n-        _constant3 = pm.getObjectId(constant3);\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testNonPKOneOne() {\r\n-        \r\n-        nonPKOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerNonPKOneOne() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPK\");\r\n-        nonPKOneOne(pm);\r\n-    }\r\n-\r\n-    private void nonPKOneOne(OpenJPAEntityManager pm) {\r\n-        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\r\n-        NonPKJoinPC nonpk = partial.getNonPK();\r\n-        assertEquals(1, nonpk.getId1());\r\n-        assertEquals(2, nonpk.getId2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testPartialOneOne() {\r\n-        partialOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerPartialOneOne() {\r\n-        \r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"partial\");\r\n-        partialOneOne(pm);\r\n-    }\r\n-\r\n-    private void partialOneOne(OpenJPAEntityManager pm) {\r\n-        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\r\n-        PartialJoinPC partial = nonpk.getPartial();\r\n-        assertEquals(1, partial.getPk1());\r\n-        assertEquals(2, partial.getPk2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalNonPKOneOne() {\r\n-        verticalNonPKOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerVerticalNonPKOneOne() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPK3\");\r\n-        verticalNonPKOneOne(pm);\r\n-    }\r\n-\r\n-    private void verticalNonPKOneOne(OpenJPAEntityManager pm) {\r\n-        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\r\n-        NonPKJoinPC nonpk = partial3.getNonPK();\r\n-        assertEquals(1, nonpk.getId1());\r\n-        assertEquals(2, nonpk.getId2());\r\n-        NonPKJoinPC3 nonpk3 = partial3.getNonPK3();\r\n-        assertEquals(3, nonpk3.getId1());\r\n-        assertEquals(4, nonpk3.getId2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalPartialOneOne() {\r\n-        verticalPartialOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerVerticalPartialOneOne() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"partial3\");\r\n-        verticalPartialOneOne(pm);\r\n-    }\r\n-\r\n-    private void verticalPartialOneOne(OpenJPAEntityManager pm) {\r\n-        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\r\n-        PartialJoinPC partial = nonpk3.getPartial();\r\n-        assertEquals(1, partial.getPk1());\r\n-        assertEquals(2, partial.getPk2());\r\n-        PartialJoinPC3 partial3 = nonpk3.getPartial3();\r\n-        assertEquals(3, partial3.getPk1());\r\n-        assertEquals(4, partial3.getPk2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testNonPKManyMany() {\r\n-        nonPKManyMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerNonPKManyMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\r\n-        nonPKManyMany(pm);\r\n-    }\r\n-\r\n-    private void nonPKManyMany(OpenJPAEntityManager pm) {\r\n-        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\r\n-        Collection nonpks = partial.getNonPKs();\r\n-        assertEquals(1, nonpks.size());\r\n-        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\r\n-        assertEquals(1, nonpk.getId1());\r\n-        assertEquals(2, nonpk.getId2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testPartialManyMany() {\r\n-        partialManyMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerPartialManyMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"partials\");\r\n-        partialManyMany(pm);\r\n-    }\r\n-\r\n-    private void partialManyMany(OpenJPAEntityManager pm) {\r\n-        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\r\n-        Collection partials = nonpk.getPartials();\r\n-        assertEquals(1, partials.size());\r\n-        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\r\n-        assertEquals(1, partial.getPk1());\r\n-        assertEquals(2, partial.getPk2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalNonPKManyMany() {\r\n-        verticalNonPKManyMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerVerticalNonPKManyMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPK2s\");\r\n-        verticalNonPKManyMany(pm);\r\n-    }\r\n-\r\n-    private void verticalNonPKManyMany(OpenJPAEntityManager pm) {\r\n-        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\r\n-        Collection nonpks = partial3.getNonPKs();\r\n-        assertEquals(1, nonpks.size());\r\n-        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\r\n-        assertEquals(1, nonpk.getId1());\r\n-        assertEquals(2, nonpk.getId2());\r\n-        Collection nonpk2s = partial3.getNonPK2s();\r\n-        assertEquals(1, nonpk2s.size());\r\n-        NonPKJoinPC2 nonpk2 = (NonPKJoinPC2) nonpk2s.iterator().next();\r\n-        assertEquals(2, nonpk2.getId1());\r\n-        assertEquals(3, nonpk2.getId2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalPartialManyMany() {\r\n-        verticalPartialManyMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerVerticalPartialManyMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"partial2s\");\r\n-        verticalPartialManyMany(pm);\r\n-    }\r\n-\r\n-    private void verticalPartialManyMany(OpenJPAEntityManager pm) {\r\n-        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\r\n-        Collection partials = nonpk3.getPartials();\r\n-        assertEquals(1, partials.size());\r\n-        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\r\n-        assertEquals(1, partial.getPk1());\r\n-        assertEquals(2, partial.getPk2());\r\n-        Collection partial2s = nonpk3.getPartial2s();\r\n-        assertEquals(1, partial2s.size());\r\n-        PartialJoinPC2 partial2 = (PartialJoinPC2) partial2s.iterator().next();\r\n-        assertEquals(2, partial2.getPk1());\r\n-        assertEquals(3, partial2.getPk2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalConstant() {\r\n-        \r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n-        assertEquals(1, constant2.getPk1());\r\n-        assertEquals(2, constant2.getPk2());\r\n-        ConstantJoinPC3 constant3 = (ConstantJoinPC3) pm.getObjectId(_constant3);\r\n-        assertEquals(1, constant3.getPk1());\r\n-        assertEquals(3, constant3.getPk2());\r\n-    }\r\n-\r\n-    public void testConstantOneOne() {\r\n-        constantOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerConstantOneOne() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPK\");\r\n-        constantOneOne(pm);\r\n-    }\r\n-\r\n-    private void constantOneOne(OpenJPAEntityManager pm) {\r\n-        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n-\r\n-        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK()));\r\n-        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK2()));\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testConstantOneMany() {\r\n-        constantOneMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerConstantOneMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\r\n-        constantOneMany(pm);\r\n-    }\r\n-\r\n-    private void constantOneMany(OpenJPAEntityManager pm) {\r\n-        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n-\r\n-        Collection nonpks = constant2.getNonPKs();\r\n-        assertEquals(1, nonpks.size());\r\n-        assertEquals(_nonpk, pm.getObjectId\r\n-            (nonpks.iterator().next()));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestIrregularJoins.java\n+ *\n+ * Created on October 3, 2006, 12:47 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.jdbc.common.apps.NonPKJoinPC2;\n+\n+\n+\n+public class TestIrregularJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+\n+    private Object _nonpk = null;\n+    private Object _nonpk3 = null;\n+    private Object _partial = null;\n+    private Object _partial3 = null;\n+    private Object _constant2 = null;\n+    private Object _constant3 = null;\n+\n+    public TestIrregularJoins(String test) {\n+        super(test);\n+    }\n+    \n+    /** Creates a new instance of TestIrregularJoins */\n+    public TestIrregularJoins() {\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        // make sure these classes are registered since we're using metadata\n+        // values for the class indicator\n+        new ConstantJoinPC();\n+        new ConstantJoinPC2();\n+        new ConstantJoinPC3();\n+\n+       deleteAll(PartialJoinPC.class);\n+       deleteAll(NonPKJoinPC.class);\n+       deleteAll(ConstantJoinPC.class);\n+\n+        PartialJoinPC partial = new PartialJoinPC();\n+        partial.setPk1(1);\n+        partial.setPk2(2);\n+        PartialJoinPC2 partial2 = new PartialJoinPC2();\n+        partial2.setPk1(2);\n+        partial2.setPk2(3);\n+        PartialJoinPC3 partial3 = new PartialJoinPC3();\n+        partial3.setPk1(3);\n+        partial3.setPk2(4);\n+\n+        NonPKJoinPC nonpk = new NonPKJoinPC();\n+        nonpk.setId1(1);\n+        nonpk.setId2(2);\n+        NonPKJoinPC2 nonpk2 = new NonPKJoinPC2();\n+        nonpk2.setId1(2);\n+        nonpk2.setId2(3);\n+        NonPKJoinPC3 nonpk3 = new NonPKJoinPC3();\n+        nonpk3.setId1(3);\n+        nonpk3.setId2(4);\n+\n+        partial.setNonPK(nonpk);\n+        partial.getNonPKs().add(nonpk);\n+        nonpk.setPartial(partial);\n+        nonpk.getPartials().add(partial);\n+\n+        partial3.setNonPK(nonpk);\n+        partial3.setNonPK3(nonpk3);\n+        partial3.getNonPKs().add(nonpk);\n+        partial3.getNonPK2s().add(nonpk2);\n+        nonpk3.setPartial(partial);\n+        nonpk3.setPartial3(partial3);\n+        nonpk3.getPartials().add(partial);\n+        nonpk3.getPartial2s().add(partial2);\n+\n+        ConstantJoinPC2 constant2 = new ConstantJoinPC2();\n+        constant2.setPk1(1);\n+        constant2.setPk2(2);\n+        constant2.setNonPK(nonpk3);\n+        constant2.setNonPK2(nonpk3);\n+\n+        // set the object's inverse on diff objects so we can be sure\n+        // that its 1-many includes only the object with the right constant\n+        nonpk.setConstant(constant2);\n+        nonpk2.setConstant(constant2);\n+        nonpk3.setConstant(constant2);\n+\n+        ConstantJoinPC3 constant3 = new ConstantJoinPC3();\n+        constant3.setPk1(1);\n+        constant3.setPk2(3);\n+\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        \n+        pm.persist(partial);\n+        pm.persist(partial3);\n+        pm.persist(constant2);\n+        pm.persist(constant3);\n+        endTx(pm);\n+        _partial = pm.getObjectId(partial);\n+        _partial3 = pm.getObjectId(partial3);\n+        _nonpk = pm.getObjectId(nonpk);\n+        _nonpk3 = pm.getObjectId(nonpk3);\n+        _constant2 = pm.getObjectId(constant2);\n+        _constant3 = pm.getObjectId(constant3);\n+        pm.close();\n+    }\n+\n+    public void testNonPKOneOne() {\n+        \n+        nonPKOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerNonPKOneOne() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPK\");\n+        nonPKOneOne(pm);\n+    }\n+\n+    private void nonPKOneOne(OpenJPAEntityManager pm) {\n+        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\n+        NonPKJoinPC nonpk = partial.getNonPK();\n+        assertEquals(1, nonpk.getId1());\n+        assertEquals(2, nonpk.getId2());\n+        pm.close();\n+    }\n+\n+    public void testPartialOneOne() {\n+        partialOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerPartialOneOne() {\n+        \n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"partial\");\n+        partialOneOne(pm);\n+    }\n+\n+    private void partialOneOne(OpenJPAEntityManager pm) {\n+        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\n+        PartialJoinPC partial = nonpk.getPartial();\n+        assertEquals(1, partial.getPk1());\n+        assertEquals(2, partial.getPk2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalNonPKOneOne() {\n+        verticalNonPKOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerVerticalNonPKOneOne() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPK3\");\n+        verticalNonPKOneOne(pm);\n+    }\n+\n+    private void verticalNonPKOneOne(OpenJPAEntityManager pm) {\n+        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\n+        NonPKJoinPC nonpk = partial3.getNonPK();\n+        assertEquals(1, nonpk.getId1());\n+        assertEquals(2, nonpk.getId2());\n+        NonPKJoinPC3 nonpk3 = partial3.getNonPK3();\n+        assertEquals(3, nonpk3.getId1());\n+        assertEquals(4, nonpk3.getId2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalPartialOneOne() {\n+        verticalPartialOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerVerticalPartialOneOne() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"partial3\");\n+        verticalPartialOneOne(pm);\n+    }\n+\n+    private void verticalPartialOneOne(OpenJPAEntityManager pm) {\n+        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\n+        PartialJoinPC partial = nonpk3.getPartial();\n+        assertEquals(1, partial.getPk1());\n+        assertEquals(2, partial.getPk2());\n+        PartialJoinPC3 partial3 = nonpk3.getPartial3();\n+        assertEquals(3, partial3.getPk1());\n+        assertEquals(4, partial3.getPk2());\n+        pm.close();\n+    }\n+\n+    public void testNonPKManyMany() {\n+        nonPKManyMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerNonPKManyMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\n+        nonPKManyMany(pm);\n+    }\n+\n+    private void nonPKManyMany(OpenJPAEntityManager pm) {\n+        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\n+        Collection nonpks = partial.getNonPKs();\n+        assertEquals(1, nonpks.size());\n+        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\n+        assertEquals(1, nonpk.getId1());\n+        assertEquals(2, nonpk.getId2());\n+        pm.close();\n+    }\n+\n+    public void testPartialManyMany() {\n+        partialManyMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerPartialManyMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"partials\");\n+        partialManyMany(pm);\n+    }\n+\n+    private void partialManyMany(OpenJPAEntityManager pm) {\n+        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\n+        Collection partials = nonpk.getPartials();\n+        assertEquals(1, partials.size());\n+        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\n+        assertEquals(1, partial.getPk1());\n+        assertEquals(2, partial.getPk2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalNonPKManyMany() {\n+        verticalNonPKManyMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerVerticalNonPKManyMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPK2s\");\n+        verticalNonPKManyMany(pm);\n+    }\n+\n+    private void verticalNonPKManyMany(OpenJPAEntityManager pm) {\n+        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\n+        Collection nonpks = partial3.getNonPKs();\n+        assertEquals(1, nonpks.size());\n+        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\n+        assertEquals(1, nonpk.getId1());\n+        assertEquals(2, nonpk.getId2());\n+        Collection nonpk2s = partial3.getNonPK2s();\n+        assertEquals(1, nonpk2s.size());\n+        NonPKJoinPC2 nonpk2 = (NonPKJoinPC2) nonpk2s.iterator().next();\n+        assertEquals(2, nonpk2.getId1());\n+        assertEquals(3, nonpk2.getId2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalPartialManyMany() {\n+        verticalPartialManyMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerVerticalPartialManyMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"partial2s\");\n+        verticalPartialManyMany(pm);\n+    }\n+\n+    private void verticalPartialManyMany(OpenJPAEntityManager pm) {\n+        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\n+        Collection partials = nonpk3.getPartials();\n+        assertEquals(1, partials.size());\n+        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\n+        assertEquals(1, partial.getPk1());\n+        assertEquals(2, partial.getPk2());\n+        Collection partial2s = nonpk3.getPartial2s();\n+        assertEquals(1, partial2s.size());\n+        PartialJoinPC2 partial2 = (PartialJoinPC2) partial2s.iterator().next();\n+        assertEquals(2, partial2.getPk1());\n+        assertEquals(3, partial2.getPk2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalConstant() {\n+        \n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\n+        assertEquals(1, constant2.getPk1());\n+        assertEquals(2, constant2.getPk2());\n+        ConstantJoinPC3 constant3 = (ConstantJoinPC3) pm.getObjectId(_constant3);\n+        assertEquals(1, constant3.getPk1());\n+        assertEquals(3, constant3.getPk2());\n+    }\n+\n+    public void testConstantOneOne() {\n+        constantOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerConstantOneOne() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPK\");\n+        constantOneOne(pm);\n+    }\n+\n+    private void constantOneOne(OpenJPAEntityManager pm) {\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\n+\n+        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK()));\n+        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK2()));\n+        pm.close();\n+    }\n+\n+    public void testConstantOneMany() {\n+        constantOneMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerConstantOneMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\n+        constantOneMany(pm);\n+    }\n+\n+    private void constantOneMany(OpenJPAEntityManager pm) {\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\n+\n+        Collection nonpks = constant2.getNonPKs();\n+        assertEquals(1, nonpks.size());\n+        assertEquals(_nonpk, pm.getObjectId\n+            (nonpks.iterator().next()));\n+        pm.close();\n+    }\n+    \n+    \n+    \n+}"},{"sha":"6cb687ae511534fb62b60417ce20afd4d04fc909","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab","patch":"@@ -1,119 +1,119 @@\n-/*\r\n- * TestJDBCType.java\r\n- *\r\n- * Created on October 3, 2006, 4:11 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n-import org.apache.openjpa.jdbc.meta.RefreshStrategyInstaller;\r\n-import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\r\n-import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n-import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n-import org.apache.openjpa.jdbc.schema.Column;\r\n-import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n-import org.apache.openjpa.jdbc.schema.Table;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\r\n-import org.apache.openjpa.jdbc.schema.Column;\r\n-\r\n-public class TestJDBCType extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\t\r\n-    /** Creates a new instance of TestJDBCType */\r\n-    public TestJDBCType(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    /**\r\n-     * Tests that application identity classes are returned correctly.\r\n-     */\r\n-    public void testSchemaGeneration() {\r\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n-        DBDictionary dict = conf.getDBDictionaryInstance();\r\n-        MappingRepository repos = conf.getMappingRepositoryInstance();\r\n-        repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\r\n-        ClassMapping mapping = repos.getMapping(Column.class, null, true);\r\n-\r\n-        Class cls;\r\n-        if (dict.getPreferredType(JavaSQLTypes.CLOB) ==  JavaSQLTypes.CLOB) {\r\n-            if (dict.maxEmbeddedClobSize > 0) {\r\n-                cls = mapping.getFieldMapping(\"toClob\").getStrategy().\r\n-                    getClass();\r\n-                assertTrue(cls.getName(),\r\n-                    MaxEmbeddedClobFieldStrategy.class.isAssignableFrom(cls));\r\n-            } else {\r\n-                cls = mapping.getFieldMapping(\"toClob\").getHandler().\r\n-                    getClass();\r\n-                assertTrue(cls.getName(),\r\n-                    ClobValueHandler.class.isAssignableFrom(cls));\r\n-            }\r\n-        } else\r\n-            assertTrue(mapping.getFieldMapping(\"toClob\").getStrategy()\r\n-                instanceof StringFieldStrategy);\r\n-\r\n-        cls = mapping.getFieldMapping(\"toBlob\").getHandler().getClass();\r\n-        assertTrue(cls.getName(),\r\n-            BlobValueHandler.class.isAssignableFrom(cls));\r\n-\r\n-        SchemaGroup schema = repos.getSchemaGroup();\r\n-        Table table = schema.getSchemas()[0].getTables()[0];\r\n-        Column[] cols = table.getColumns();\r\n-        for (int i = 0; i < cols.length; i++) {\r\n-            if (cols[i].getName().equalsIgnoreCase(\"id\")\r\n-                || cols[i].getName().equalsIgnoreCase(\"versn\")\r\n-                || cols[i].getName().equalsIgnoreCase(\"typ\"))\r\n-                continue;\r\n-            if (\"longToInt\".equalsIgnoreCase(cols[i].getName()))\r\n-                assertEquals(dict.getPreferredType(JavaSQLTypes.INT),\r\n-                    cols[i].getType());\r\n-            else if (\"longToSQL\".equalsIgnoreCase(cols[i].getName()))\r\n-                assertEquals(\"varchar\", cols[i].getTypeName());\r\n-            else if (\"toClob\".equalsIgnoreCase(cols[i].getName()))\r\n-                assertEquals(dict.getPreferredType(JavaSQLTypes.CLOB),\r\n-                    cols[i].getType());\r\n-            else if (\"toBlob\".equalsIgnoreCase(cols[i].getName()))\r\n-                assertEquals(dict.getPreferredType(JavaSQLTypes.BLOB),\r\n-                    cols[i].getType());\r\n-            else\r\n-                fail(\"Unknown column:\" + cols[i].getName());\r\n-        }\r\n-    }    \r\n-}\r\n+/*\n+ * TestJDBCType.java\n+ *\n+ * Created on October 3, 2006, 4:11 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\n+import org.apache.openjpa.jdbc.meta.RefreshStrategyInstaller;\n+import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.schema.Column;\n+\n+public class TestJDBCType extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\t\n+    /** Creates a new instance of TestJDBCType */\n+    public TestJDBCType(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    /**\n+     * Tests that application identity classes are returned correctly.\n+     */\n+    public void testSchemaGeneration() {\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        MappingRepository repos = conf.getMappingRepositoryInstance();\n+        repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\n+        ClassMapping mapping = repos.getMapping(Column.class, null, true);\n+\n+        Class cls;\n+        if (dict.getPreferredType(JavaSQLTypes.CLOB) ==  JavaSQLTypes.CLOB) {\n+            if (dict.maxEmbeddedClobSize > 0) {\n+                cls = mapping.getFieldMapping(\"toClob\").getStrategy().\n+                    getClass();\n+                assertTrue(cls.getName(),\n+                    MaxEmbeddedClobFieldStrategy.class.isAssignableFrom(cls));\n+            } else {\n+                cls = mapping.getFieldMapping(\"toClob\").getHandler().\n+                    getClass();\n+                assertTrue(cls.getName(),\n+                    ClobValueHandler.class.isAssignableFrom(cls));\n+            }\n+        } else\n+            assertTrue(mapping.getFieldMapping(\"toClob\").getStrategy()\n+                instanceof StringFieldStrategy);\n+\n+        cls = mapping.getFieldMapping(\"toBlob\").getHandler().getClass();\n+        assertTrue(cls.getName(),\n+            BlobValueHandler.class.isAssignableFrom(cls));\n+\n+        SchemaGroup schema = repos.getSchemaGroup();\n+        Table table = schema.getSchemas()[0].getTables()[0];\n+        Column[] cols = table.getColumns();\n+        for (int i = 0; i < cols.length; i++) {\n+            if (cols[i].getName().equalsIgnoreCase(\"id\")\n+                || cols[i].getName().equalsIgnoreCase(\"versn\")\n+                || cols[i].getName().equalsIgnoreCase(\"typ\"))\n+                continue;\n+            if (\"longToInt\".equalsIgnoreCase(cols[i].getName()))\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.INT),\n+                    cols[i].getType());\n+            else if (\"longToSQL\".equalsIgnoreCase(cols[i].getName()))\n+                assertEquals(\"varchar\", cols[i].getTypeName());\n+            else if (\"toClob\".equalsIgnoreCase(cols[i].getName()))\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.CLOB),\n+                    cols[i].getType());\n+            else if (\"toBlob\".equalsIgnoreCase(cols[i].getName()))\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.BLOB),\n+                    cols[i].getType());\n+            else\n+                fail(\"Unknown column:\" + cols[i].getName());\n+        }\n+    }    \n+}"},{"sha":"1cdd1607a6e0bf7351d4548b10b73f00db093831","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"84f2e672db31aa5a3fa3e736e67020798f90882c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","status":"modified","additions":601,"deletions":601,"changes":1202,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"69daf02d15151131cee4b1a9153edddbebe407d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","status":"modified","additions":229,"deletions":229,"changes":458,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3acd04bcc31161087014bcb5c3ec9cc951a8119d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","status":"modified","additions":268,"deletions":268,"changes":536,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"987d44bc8babc9e21d9473198a638def55504a95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","status":"modified","additions":141,"deletions":141,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cb4557bca74f786bd5b4a13f98dedb760e37c52c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8b3980d79bb6a57cd1f31f815ec9cb4fa95864bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","status":"modified","additions":237,"deletions":237,"changes":474,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5750afd1b0e55850b9544af9377690f57bc67b0d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","status":"modified","additions":209,"deletions":209,"changes":418,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d4032338abff9b46d961b6734010ca611a3847bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"45e8316de6568a4a40c4a121504e1b41f562a301","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c00a0c9764adbfb686bbe33c13e5e831700b2253","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","status":"modified","additions":241,"deletions":241,"changes":482,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"86ce1e0462c0cdae68a4d62a4c051a0913038bc2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f8be2ea390a29750c164f53b4b800901243476c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cdcbc473d3442ab865ee689e9e50023cf14c2489","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9ff8163ce83bd681c363cd01b1f13b9ba71b4a51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","status":"modified","additions":221,"deletions":221,"changes":442,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a1a133e4403e5c5afcc57b9495a56bf2d7c4086b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","status":"modified","additions":287,"deletions":287,"changes":574,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c22d1f9b09298c46301bd4e35d267fe0da02c598","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","status":"modified","additions":229,"deletions":229,"changes":458,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b2cc5e9da661419c07925bc614028212028f2a1d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","status":"modified","additions":466,"deletions":466,"changes":932,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"dab4bab802e139b2cfdbd4ae6c99ce25c0e4c0fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6769f171b9632e08dae150b637d5f653fd233f30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"825bc921f4e31383174f3234c87e5c4c8b8f3286","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"76943bd50da7867ef9be3f4dcbb23a2dc1cb4d28","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"67ad1da4e173f522d89d637b665f8bd7d39eb69a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d8486750267047765cd3f314e770ad61e30f19d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"25aa14dde8c28c49ce3119c6728910617a2f7492","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","status":"modified","additions":464,"deletions":464,"changes":928,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"bea38ad11fb18bd5e12f7c9b3960eb453a61e845","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d6bbd08352adc1e71ab35f44a0e19233762f2331","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","status":"modified","additions":137,"deletions":137,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"32917de42ffc8c17d4f389bc13f1688414952133","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"05eba56e4dda2d67c921e7f9fad2c1eb6a8dc881","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"28491f9bc49c97c532f5ae9ed1d04e1fd70f7268","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c6046e6a79c641813ec55856ae7eab8d2917e1e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"56cde58e964bf1734b6e43e0cdfc176ec3f119b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ba156701a70b498eedeccda60a2b3661b124b448","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"06174fd3dedccda1a42e247299e7cec70375770f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"modified","additions":180,"deletions":180,"changes":360,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"54d266f0582b068389bc3f49e834b444faf11cd6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f6e631303c9eeba27e29c2226593d8cd6ab9920b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"853d1c85a046428fbc10b37c06a2d013b8a68b95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"85d3a959d76e18eb5bd3f093ed13c16a3bbd2b1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6bfbe3050500c66c2832deba331162d57754f4c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3aeaf52cf7dd89fdd4d9a94f4b45d7a2f4a4c0d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c2761173ccab7f46becde63cc1650a16ef107619","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","status":"modified","additions":237,"deletions":237,"changes":474,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"38ab5a8324b551946b5e85af7eb7a9b0e682dbe3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","status":"modified","additions":208,"deletions":208,"changes":416,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"71de87a491f758ed93e45e6a5e6e204e28daa11c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9080d60989590f34e9d2064b1b16323035a5e252","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0888dd432463889b2c661674d11c52e7b3a92dbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"fbc3220e5cb4f142434cede7ab78b1c4dac1bec9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"028b753273ee21bfd4e7096e1bc46cf76fc43ed9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ca68ecbffbd2d814e0839f37f7023a28af918ad3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","status":"modified","additions":331,"deletions":331,"changes":662,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1e869d7171736035d0ff003e1c30303b83561563","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"52e6269439dad3e11f5efe550b794f6740fa41b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","status":"modified","additions":131,"deletions":131,"changes":262,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1881eb99a7cde1260470013ba089482c293f3a34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"629407da7ed2faf1cc30cd46e00f255ea136b242","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","status":"modified","additions":239,"deletions":239,"changes":478,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"04d12485e8000d19c5c44219a9642f02f6b59857","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1fb87f9e8dda93fb8d6b6b391e833e991a8fc2e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f237937ebbf963c927c69a6a1c605687978d71c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"7adcf44c6cfc9e23f8ca4f04af15302fa607b4f1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ccbce7463402041e069deac2a0cf8122d93e8f0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"541b81da3b40b777ac97bab4afe30e1186bd8ef5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ac9cd9084f03b0c54aa79e8efea4963644d7db02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","status":"modified","additions":213,"deletions":213,"changes":426,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"87096d5db2e8cb0c459d52984cf3a4810a4a5e8e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","status":"modified","additions":163,"deletions":163,"changes":326,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a64df993849162f4447f568cdeb9b41a74626919","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"34cb00ce402cb3f9001bfeba2cbf762f211e99f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","status":"modified","additions":152,"deletions":152,"changes":304,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ddd504a65408d4981db7f41ae3b000e2b44cb634","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"modified","additions":323,"deletions":323,"changes":646,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e97fe8dc414d3f35861e36f008bd7e4d955bb49b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","status":"modified","additions":397,"deletions":397,"changes":794,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"360c81d20ecf71119495088c242aee2a5613bb30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","status":"modified","additions":180,"deletions":180,"changes":360,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c3817cf30314537f5bb3c107356cbc9e37b4682f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","status":"modified","additions":207,"deletions":207,"changes":414,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e7bf9842875cf20b2c8871c3dd6eaf769e03701a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","status":"modified","additions":135,"deletions":135,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ae112788785c9d2fbb3ffa4c8207c6c93476666e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8d6383d0f5e00125997a316bfb8c72bbaba08aac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","status":"modified","additions":466,"deletions":466,"changes":932,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6a4415e5507c53e98955f58248607a5096df39f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"78b0e703945dc6fe5003e71466361673bd3bbdb7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b0920bb58d16f5f5d4806c5daeaa0f72e204bd94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","status":"modified","additions":242,"deletions":242,"changes":484,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"47206acf5c8e00ab17306746fd352917672a61cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","status":"modified","additions":404,"deletions":404,"changes":808,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0c8d683afcff7725d24dc181fadcd7cd8192baa2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e0eba0117cb732be8fc40440880925a7deca9a1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"77d253f961bced02dc609e4b1f286ce57b897bbb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","status":"modified","additions":134,"deletions":134,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a598c93fe4c74261ab065ad48de439d897e33aa9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","status":"modified","additions":566,"deletions":566,"changes":1132,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"230afe3e5c200fd21e5785a34208444654a033d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","status":"modified","additions":542,"deletions":542,"changes":1084,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"30b10a6ee7f8f08c2e8126babc4ddfdd7da2b84b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","status":"modified","additions":245,"deletions":245,"changes":490,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e497d6a93e5fc381c674a77241998f47ac045ee2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","status":"modified","additions":141,"deletions":141,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a807c6ce1fb8ca537997ff051b9a94b6b7978bac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5db5402435c2f7fd4216cdd253bbd8396c3d44da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"70893c4780bd4b7e8da11c4fc1ad71c1c42036d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","status":"modified","additions":120,"deletions":120,"changes":240,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cd9c95f8c37ce13a26960cd9c0de3489111ecd52","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","status":"modified","additions":176,"deletions":176,"changes":352,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"478c0414a75dc94f798e64365e86db0db728edd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"290072392e130ad34cccc3ed8eae33cff960a974","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","status":"modified","additions":93,"deletions":93,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"afca6c93dd3ece07419ce31efd5abaf8a66248c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"510a63d6ebe914bd9096e612a7508ad7cf7ad393","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"87edfd15509340de55e8456baf79196723c065b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"82294f86a86f6b035331fddf7376efaa604feee5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"747d17baae083c3afbd7465a2e7a5162144ba634","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"459e50f985a4ddd8a8dda13e3b2dc344e9873ec6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"07afd5f785124e8ef46acef53ba8e3631ef15997","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"60b63c37fb8af246db0f596136ac3b116efe173f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"98d2cef3b5b5730549bde5617f7b93f9bc05a4be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","status":"modified","additions":199,"deletions":199,"changes":398,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8df8554cda685d6ea21aecf4a43d3f5ecc95a6ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","status":"modified","additions":402,"deletions":402,"changes":804,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9823033d58260337036b72bcde19db4435d2a318","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8c07d5aa75f122e513d25a674be4b00e47763c53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"207f7971c14d438dd27d49b15be16a1065f1bc51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","status":"modified","additions":526,"deletions":526,"changes":1052,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6f684b6f5b9af814ef66775e1b051a160e43e534","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","status":"modified","additions":383,"deletions":383,"changes":766,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9103fbf55eb47f406caa29ca10f5bf4fb069cb60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","status":"modified","additions":232,"deletions":232,"changes":464,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"095be9638e7ee57a575f67824333a7e26d04913f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b6c78636018569a55a5af5e49a98ec41618ced6a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"84816f3555a250b6a986a4e11bd90fa79059dbfa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","status":"modified","additions":448,"deletions":448,"changes":896,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"538645825a2c796cd8e64280d07cfd5dd2ad6ba6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","status":"modified","additions":137,"deletions":137,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"485d0771c9da5b4cb96fbc380af9936336ec0879","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","status":"modified","additions":148,"deletions":148,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"86a31b229dc874ef5ad9cb8192646e0b7227b1d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","status":"modified","additions":181,"deletions":181,"changes":362,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"888d1569fcff36a987af4f691cedda0e187bc8eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","status":"modified","additions":291,"deletions":291,"changes":582,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9e57ee81eb678f1435517d4e8639b9f4b7cab3ab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","status":"modified","additions":148,"deletions":148,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e107596eee021af8aea17c1ba3e0b6e2171a6558","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"189b2ddaf985836d7180628ce375555542750685","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"36a656ab84add2c163beb166e4f1987b3f25f054","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cf4cf1102ce6b897b7125e47b9b2837452b65df7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","status":"modified","additions":358,"deletions":358,"changes":716,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"84ec4b4ff4c7669a0393670d986ebc5f642f2590","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","status":"modified","additions":156,"deletions":156,"changes":312,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f820cc0129c8d9b9d75af127534987b9b308d0e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","status":"modified","additions":296,"deletions":296,"changes":592,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0dde414c9219454cf52756db24cc705364d851c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","status":"modified","additions":431,"deletions":431,"changes":862,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"72cc7dad135c52ae48c177103f118a77824f4cbb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","status":"modified","additions":229,"deletions":229,"changes":458,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c2148309ba7118d43a6f2bf0c1bc0d27836d1bad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","status":"modified","additions":352,"deletions":352,"changes":704,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5c24b494e0ec8b53a8ec1561813a0a4610d9eb57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","status":"modified","additions":274,"deletions":274,"changes":548,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1aec2fe1a3191ab6c77babffb205f03213c21ea4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"933ffaf9531491bf243f44bbf16fc8c4804718fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","status":"modified","additions":526,"deletions":526,"changes":1052,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1aa5be740078705c29b3cf3c4e8a5cbd33b8552c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","status":"modified","additions":224,"deletions":224,"changes":448,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"913bcf9688e713594fbfe8cf1353f16ec63830af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","status":"modified","additions":142,"deletions":142,"changes":284,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d8aac1d8f5c8cd237448229e4bfab062c37e40bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","status":"modified","additions":183,"deletions":183,"changes":366,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ee3bf894fd6494f5ef32e71acc44e56bcd0b7c68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","status":"modified","additions":300,"deletions":300,"changes":600,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"bcd51d56e272e16510533da9bcbfd6eb03dfa966","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f0d0ab391dcfb5dd289076d06f7a973876dd0b8d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","status":"modified","additions":268,"deletions":268,"changes":536,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"2d0758e7d50e0d81167a19f87ba539d4e78ea375","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","status":"modified","additions":509,"deletions":509,"changes":1018,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"425e9cf0e5391542f646f0595a5698c451dab7b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","status":"modified","additions":780,"deletions":780,"changes":1560,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"094fd710e60c847afee2af4547ac31e483474aae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","status":"modified","additions":286,"deletions":286,"changes":572,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"682b17aae45af9aa1e94ce6ba349a0a894b81ad1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"60743ede8a430edd4b3b6170a868aada7eaf0440","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","status":"modified","additions":93,"deletions":93,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c1b574756f25d8012a41aff5545d1521a1038975","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","status":"modified","additions":136,"deletions":136,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"022d526221bc89fb67b8e38b6c7059bed6617adb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","status":"modified","additions":315,"deletions":315,"changes":630,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"af2f8e50ebdf21cbfa1b0b6a89d1fe40ec043cee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","status":"modified","additions":285,"deletions":285,"changes":570,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"68cc3650803047d81893407759ceff27fddadc3c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","status":"modified","additions":193,"deletions":193,"changes":386,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"dd09b918af09b5ab5c3d355bc606a7f15a08fd37","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","status":"modified","additions":141,"deletions":141,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5657ee31dcb1c90bc65a81ad2cfbbf2c46b02298","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"201b48f883c60beb5d693207b83392eb6521bbc3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","status":"modified","additions":994,"deletions":994,"changes":1988,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d10ad43fb46e3bcb7329986a110a66ab4980a14a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"5de5f8c9666165964fbc574145dcaf5268cf4886","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"34da30eb38ec53366a3cf9985ed4093ea88d8c51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"696627043eb6f23f1ddc887ed886c52e84f2018f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","status":"modified","additions":303,"deletions":303,"changes":606,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"486c6d6ffd1b832b3ccb05f651ca23b1d4160be8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","status":"modified","additions":269,"deletions":269,"changes":538,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"adceb19d746ba0824025fa729c4be266a526d573","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"98e51cb6c7a32ff690b9016ed7be8fc07982acb7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","status":"modified","additions":179,"deletions":179,"changes":358,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1f2cf0cf967927e6d983b0121e3606c86e31d00f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3b027a166061c9d7229b6f261c73b24f27bc27eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c297bc786a44c8d4ce133d8c0194fd46fb3afdbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","status":"modified","additions":113,"deletions":113,"changes":226,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1b53fc82d0bf555aaa8ba403f291d1aba2c6ead4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e7b77f48d1383cc148c4a213c16b6a3ba31aa6fe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4200a7e0ce7f912c282b0fd6dddb989be7686096","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"322d1b30b83c4bc629bbe82475fa0a61e85644ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"073bb36e5df34886460a286303280c833e5d839e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","status":"modified","additions":277,"deletions":277,"changes":554,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1898552ebfd2ca900ace76788ce2acbf12f6eebb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9a5c2fca9b29ae2528efe21cf22047b7fb54e6b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","status":"modified","additions":100,"deletions":100,"changes":200,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"c643ac5978c6c24c4301427126b950a617b1d30f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"2923164e21eb34cfeba928d4b7a790ea782ab7b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","status":"modified","additions":174,"deletions":174,"changes":348,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1684a70af004c360a038b5f278e4955c56d259f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","status":"modified","additions":127,"deletions":127,"changes":254,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9da171e9adad87d8e9227c9e1ecb0352df759f9f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","status":"modified","additions":166,"deletions":166,"changes":332,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"2d27496afcd46434567af9ae7cbb723ae2aa1bec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"eaf1cec8927cb99047e3697e690325ccd4e1724a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"659892230f52e2f7985210f91b0f175a1f071db6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e2716409e016d476d6f7581b147f62559e1ea933","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4837432b4567b7bbf55c89f2b2fad4b891de831b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4ba008e3828ac6498ccc6d1eb6940ab67c644d0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"6253465010fdd1baa1bca3e5f41e89d7eb81a502","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"52532637288a9223861e6970ad0895bb7bed3a8a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1257ff0df8b006ce4cec869693683b78ab0f2523","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"de22f8fb230f545e49eed9bce23c8b636caadc95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"505c54f6412f96dc39fe9164963d84d9a57784da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","status":"modified","additions":155,"deletions":155,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cf68771d855c19fc0641de807d7187b7a03ae90d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"e2f30141084ea6588042f46510871c2c9ef244ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"9a2404d9c34cc7b1c4d85f2b2bfe086b42c83f0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8d7cf8f7ea76ff1d0c1ad4cf375771a0c9450ef9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8c199b6ab3e9fc3022fe3d8dec18f96c1791736d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"424da9d069a58ccadebd10a3a0130fe704fdbf54","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","status":"modified","additions":129,"deletions":129,"changes":258,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"66461e53cc6b41b0669a6a33501dab8947a688b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","status":"modified","additions":157,"deletions":157,"changes":314,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"1eb3e9329b53ed8b1c284656a8478b9e30101997","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"779fbfaa0065c66929622fb4b11394ff9a2cb459","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"2f057b33d0d889530cb73ce87edeabbc295a9859","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","status":"modified","additions":186,"deletions":186,"changes":372,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b6301523c160aec17aa29fa47f3c5d325cfc40ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3507abfd370d8544d2aa5845cc29a109967ff47a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"880842924eb9c348229bb88fca59f278593a4957","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"20eadee808f7b40868ffb001c4034c75303afda6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a587064b07db315932d528549c43eb76016ad8cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"14da1b7b899f4eab2330088b03c2e216e116757c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"0801d457d78b02d480bb199fad9fd0f2d8973227","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3a92ab8652f0e2c3419d8b0215e1db51abe25af7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ad9884e507e7a2bcb21db5861dc970d20aa959f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"647be156f388cbdfadb7bb82007d7d11b0c4ab15","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"dd0db4db6a1c46df695f9a5bc0f3c8896f48dabe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"a293740284bd41d551ea9282a30d4deb497cd1d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"f193df343cbc82182dc68bee783287279da1c2d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"7b700b5624b5c7bd0138d0c1c06b61260c8cce87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"dfc58064717299331cad90abbd5af964ba9a35eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3061c8b050717d7d30ba60770b31b0de7c502e32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"d31da3157bda47c8434732e6cffd9af25bf2066b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"3c1c3955da11d47ab22df1f6e0b34c21afafbf64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"2f53e6325ef1909004511d659eb33e10fac86acd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"8081aeb3ba08302a69e70da4e3ffa09044146806","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ff32fd616c119f11983daa4bc57d2aa6b748fd96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"fb26d26f88a3e2de52d35fd2061e829adecd834b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"32d9eb54fad96bcbc44ddfa6447f4b1396b0867b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"b4eb8dcf419c82445d234c97eb67113a93a6d1be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"4ad85ad788fa5a3b80b3dde66accfe5f02253b1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"cc728c579e797fd2e386ac9fa582565166e7dcfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","status":"modified","additions":186,"deletions":186,"changes":372,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"edbf318ba5008eff2b8d4dec0d5f7ab6ef061819","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"85840185e14bd740700822e9f87897710b3f90a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"ccc608c9e01b8213b435e7b66819e57c04b0361f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"df366940f692faa50a449374f93869729982e340","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"},{"sha":"29074c687d0ed2d1d569aa3a5dced0704f7700f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","raw_url":"https://github.com/apache/openjpa/raw/115af5954d8ba917d83b7dceb181b01257c359ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java?ref=115af5954d8ba917d83b7dceb181b01257c359ab"}]}

