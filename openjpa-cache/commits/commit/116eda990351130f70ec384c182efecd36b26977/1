{"sha":"116eda990351130f70ec384c182efecd36b26977","node_id":"MDY6Q29tbWl0MjA2MzY0OjExNmVkYTk5MDM1MTEzMGY3MGVjMzg0YzE4MmVmZWNkMzZiMjY5Nzc=","commit":{"author":{"name":"Thomas Andraschko","email":"tandraschko@apache.org","date":"2021-07-12T13:51:47Z"},"committer":{"name":"Thomas Andraschko","email":"tandraschko@apache.org","date":"2021-07-12T13:51:47Z"},"message":"OPENJPA-2877","tree":{"sha":"5a7a96402599c0ffb7ceffe0fe63ba403faace8b","url":"https://api.github.com/repos/apache/openjpa/git/trees/5a7a96402599c0ffb7ceffe0fe63ba403faace8b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/116eda990351130f70ec384c182efecd36b26977","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/116eda990351130f70ec384c182efecd36b26977","html_url":"https://github.com/apache/openjpa/commit/116eda990351130f70ec384c182efecd36b26977","comments_url":"https://api.github.com/repos/apache/openjpa/commits/116eda990351130f70ec384c182efecd36b26977/comments","author":{"login":"tandraschko","id":2485545,"node_id":"MDQ6VXNlcjI0ODU1NDU=","avatar_url":"https://avatars.githubusercontent.com/u/2485545?v=4","gravatar_id":"","url":"https://api.github.com/users/tandraschko","html_url":"https://github.com/tandraschko","followers_url":"https://api.github.com/users/tandraschko/followers","following_url":"https://api.github.com/users/tandraschko/following{/other_user}","gists_url":"https://api.github.com/users/tandraschko/gists{/gist_id}","starred_url":"https://api.github.com/users/tandraschko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tandraschko/subscriptions","organizations_url":"https://api.github.com/users/tandraschko/orgs","repos_url":"https://api.github.com/users/tandraschko/repos","events_url":"https://api.github.com/users/tandraschko/events{/privacy}","received_events_url":"https://api.github.com/users/tandraschko/received_events","type":"User","site_admin":false},"committer":{"login":"tandraschko","id":2485545,"node_id":"MDQ6VXNlcjI0ODU1NDU=","avatar_url":"https://avatars.githubusercontent.com/u/2485545?v=4","gravatar_id":"","url":"https://api.github.com/users/tandraschko","html_url":"https://github.com/tandraschko","followers_url":"https://api.github.com/users/tandraschko/followers","following_url":"https://api.github.com/users/tandraschko/following{/other_user}","gists_url":"https://api.github.com/users/tandraschko/gists{/gist_id}","starred_url":"https://api.github.com/users/tandraschko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tandraschko/subscriptions","organizations_url":"https://api.github.com/users/tandraschko/orgs","repos_url":"https://api.github.com/users/tandraschko/repos","events_url":"https://api.github.com/users/tandraschko/events{/privacy}","received_events_url":"https://api.github.com/users/tandraschko/received_events","type":"User","site_admin":false},"parents":[{"sha":"c5b97348fcfcb77d1a0c00813bc4c18bf85140f7","url":"https://api.github.com/repos/apache/openjpa/commits/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7","html_url":"https://github.com/apache/openjpa/commit/c5b97348fcfcb77d1a0c00813bc4c18bf85140f7"}],"stats":{"total":182,"additions":118,"deletions":64},"files":[{"sha":"98c9d9805b84b26ede5029c2eef4481783c4fe50","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":107,"deletions":63,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/116eda990351130f70ec384c182efecd36b26977/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/116eda990351130f70ec384c182efecd36b26977/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=116eda990351130f70ec384c182efecd36b26977","patch":"@@ -188,6 +188,7 @@\n     private Boolean _serializableField = null;\n     private boolean _generated = false;\n     private boolean _useSchemaElement = true;\n+    private Class _converter;\n \n     // Members aren't serializable. Use a proxy that can provide a Member\n     // to avoid writing the full Externalizable implementation.\n@@ -1317,35 +1318,52 @@ public Object getExternalValue(Object val, StoreContext ctx) {\n         }\n \n         Method externalizer = getExternalizerMethod();\n-        if (externalizer == null)\n-            return val;\n+        if (externalizer != null) {\n+            // special case for queries: allow the given value to pass through\n+            // as-is if it is already in externalized form\n+            if (val != null && getType().isInstance(val)\n+                && (!getDeclaredType().isInstance(val)\n+                || getDeclaredType() == Object.class))\n+                return val;\n \n-        // special case for queries: allow the given value to pass through\n-        // as-is if it is already in externalized form\n-        if (val != null && getType().isInstance(val)\n-            && (!getDeclaredType().isInstance(val)\n-            || getDeclaredType() == Object.class))\n-            return val;\n+            try {\n+                // either invoke the static toExternal(val[, ctx]) method, or the\n+                // non-static val.toExternal([ctx]) method\n+                if (Modifier.isStatic(externalizer.getModifiers())) {\n+                    if (externalizer.getParameterTypes().length == 1)\n+                        return externalizer.invoke(null, new Object[]{ val });\n+                    return externalizer.invoke(null, new Object[]{ val, ctx });\n+                }\n+                if (val == null)\n+                    return null;\n+                if (externalizer.getParameterTypes().length == 0)\n+                    return externalizer.invoke(val, (Object[]) null);\n+                return externalizer.invoke(val, new Object[]{ ctx });\n+            } catch (OpenJPAException ke) {\n+                throw ke;\n+            } catch (Exception e) {\n+                throw new MetaDataException(_loc.get(\"externalizer-err\", this,\n+                    Exceptions.toString(val), e.toString())).setCause(e);\n+            }\n+        }\n \n-        try {\n-            // either invoke the static toExternal(val[, ctx]) method, or the\n-            // non-static val.toExternal([ctx]) method\n-            if (Modifier.isStatic(externalizer.getModifiers())) {\n-                if (externalizer.getParameterTypes().length == 1)\n-                    return externalizer.invoke(null, new Object[]{ val });\n-                return externalizer.invoke(null, new Object[]{ val, ctx });\n+        Class converter = getConverter();\n+        if (converter != null) {\n+            try {\n+                // TODO support CDI (OPENJPA-2714)\n+                Object instance = converter.getDeclaredConstructor().newInstance();\n+                // see AttributeConverter.java from the JPA specs\n+                Method method = converter.getDeclaredMethod(\"convertToDatabaseColumn\", Object.class);\n+                return method.invoke(instance, val);\n+            } catch (OpenJPAException ke) {\n+                throw ke;\n+            } catch (Exception e) {\n+                throw new MetaDataException(_loc.get(\"converter-err\", this,\n+                    Exceptions.toString(val), e.toString())).setCause(e);\n             }\n-            if (val == null)\n-                return null;\n-            if (externalizer.getParameterTypes().length == 0)\n-                return externalizer.invoke(val, (Object[]) null);\n-            return externalizer.invoke(val, new Object[]{ ctx });\n-        } catch (OpenJPAException ke) {\n-            throw ke;\n-        } catch (Exception e) {\n-            throw new MetaDataException(_loc.get(\"externalizer-err\", this,\n-                Exceptions.toString(val), e.toString())).setCause(e);\n         }\n+\n+        return val;\n     }\n \n     /**\n@@ -1359,50 +1377,67 @@ public Object getFieldValue(Object val, StoreContext ctx) {\n             return fieldValues.get(val);\n \n         Member factory = getFactoryMethod();\n-        if (factory == null)\n-            return val;\n+        if (factory != null) {\n+            try {\n+                if (val == null && getNullValue() == NULL_DEFAULT)\n+                    return AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(getDeclaredType()));\n+\n+                // invoke either the constructor for the field type,\n+                // or the static type.toField(val[, ctx]) method\n+                if (factory instanceof Constructor) {\n+                    if (val == null)\n+                        return null;\n+                    return ((Constructor) factory).newInstance\n+                        (new Object[]{ val });\n+                }\n \n-        try {\n-            if (val == null && getNullValue() == NULL_DEFAULT)\n-                return AccessController.doPrivileged(\n-                    J2DoPrivHelper.newInstanceAction(getDeclaredType()));\n+                Method meth = (Method) factory;\n+                if (meth.getParameterTypes().length == 1)\n+                    return meth.invoke(null, new Object[]{ val });\n+                return meth.invoke(null, new Object[]{ val, ctx });\n+            } catch (Exception e) {\n+                // unwrap cause\n+                if (e instanceof InvocationTargetException) {\n+                    Throwable t = ((InvocationTargetException) e).\n+                        getTargetException();\n+                    if (t instanceof Error)\n+                        throw (Error) t;\n+                    e = (Exception) t;\n+\n+                    // allow null values to cause NPEs and illegal arg exceptions\n+                    // without error\n+                    if (val == null && (e instanceof NullPointerException\n+                        || e instanceof IllegalArgumentException))\n+                        return null;\n+                }\n \n-            // invoke either the constructor for the field type,\n-            // or the static type.toField(val[, ctx]) method\n-            if (factory instanceof Constructor) {\n-                if (val == null)\n-                    return null;\n-                return ((Constructor) factory).newInstance\n-                    (new Object[]{ val });\n+                if (e instanceof OpenJPAException)\n+                    throw (OpenJPAException) e;\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n+                throw new MetaDataException(_loc.get(\"factory-err\", this,\n+                    Exceptions.toString(val), e.toString())).setCause(e);\n             }\n+        }\n \n-            Method meth = (Method) factory;\n-            if (meth.getParameterTypes().length == 1)\n-                return meth.invoke(null, new Object[]{ val });\n-            return meth.invoke(null, new Object[]{ val, ctx });\n-        } catch (Exception e) {\n-            // unwrap cause\n-            if (e instanceof InvocationTargetException) {\n-                Throwable t = ((InvocationTargetException) e).\n-                    getTargetException();\n-                if (t instanceof Error)\n-                    throw (Error) t;\n-                e = (Exception) t;\n-\n-                // allow null values to cause NPEs and illegal arg exceptions\n-                // without error\n-                if (val == null && (e instanceof NullPointerException\n-                    || e instanceof IllegalArgumentException))\n-                    return null;\n+        Class converter = getConverter();\n+        if (converter != null) {\n+            try {\n+                // TODO support CDI (OPENJPA-2714)\n+                Object instance = converter.getDeclaredConstructor().newInstance();\n+                // see AttributeConverter.java from the JPA specs\n+                Method method = converter.getDeclaredMethod(\"convertToEntityAttribute\", Object.class);\n+                return method.invoke(instance, val);\n+            } catch (OpenJPAException ke) {\n+                throw ke;\n+            } catch (Exception e) {\n+                throw new MetaDataException(_loc.get(\"converter-err\", this,\n+                    Exceptions.toString(val), e.toString())).setCause(e);\n             }\n-\n-            if (e instanceof OpenJPAException)\n-                throw (OpenJPAException) e;\n-            if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException) e).getException();\n-            throw new MetaDataException(_loc.get(\"factory-err\", this,\n-                Exceptions.toString(val), e.toString())).setCause(e);\n         }\n+\n+        return val;\n     }\n \n     /**\n@@ -1420,6 +1455,10 @@ public void setExternalizer(String externalizer) {\n         _extMethod = DEFAULT_METHOD;\n     }\n \n+    public void setConverter(Class converter) {\n+        _converter = converter;\n+    }\n+    \n     /**\n      * The name of this field's factory, or null if none.\n      */\n@@ -2044,6 +2083,7 @@ public void copy(FieldMetaData field) {\n         _access = field._access;\n         _orderDec = field._orderDec;\n         _useSchemaElement = field._useSchemaElement;\n+        _converter = field._converter;\n \n         // embedded fields can't be versions\n         if (_owner.getEmbeddingMetaData() == null && _version == null)\n@@ -2523,4 +2563,8 @@ public String getSetterName() {\n         }\n         return setterName;\n     }\n+\n+    public Class getConverter() {\n+        return _converter;\n+    }\n }"},{"sha":"a9deb4b4b567ddf53d0b8483ad8500cc4df761a0","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/116eda990351130f70ec384c182efecd36b26977/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/116eda990351130f70ec384c182efecd36b26977/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=116eda990351130f70ec384c182efecd36b26977","patch":"@@ -119,6 +119,8 @@ bad-externalizer: The externalizer method \"{1}\" on field \"{0}\" is not valid. \\\n \t\"<owning-class>.<method-name>\", and that the method is static.\n externalizer-err: There was an error invoking the externalizer for field \\\n \t\"{0}\" on Java value \"{1}\": {2}\n+converter-err: There was an error invoking the converter for field \\\n+\t\"{0}\" on Java value \"{1}\": {2}\n factory-err: There was an error invoking the factory for field \\\n \t\"{0}\" on datastore value \"{1}\": {2}\n bad-factory: The factory method supplied for field \"{0}\" does not exist or \\"},{"sha":"fd9a6847e6bdc61831edf54d2fc53b19de00dc54","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/116eda990351130f70ec384c182efecd36b26977/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/116eda990351130f70ec384c182efecd36b26977/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=116eda990351130f70ec384c182efecd36b26977","patch":"@@ -96,6 +96,7 @@\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n+import javax.persistence.Convert;\n import javax.persistence.ElementCollection;\n import javax.persistence.Embeddable;\n import javax.persistence.Embedded;\n@@ -174,6 +175,7 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n+import static org.apache.openjpa.persistence.MetaDataTag.CONVERT;\n \n \n /**\n@@ -231,6 +233,7 @@\n         _tags.put(ElementType.class, ELEM_TYPE);\n         _tags.put(ExternalValues.class, EXTERNAL_VALS);\n         _tags.put(Externalizer.class, EXTERNALIZER);\n+        _tags.put(Convert.class, CONVERT);\n         _tags.put(Factory.class, FACTORY);\n         _tags.put(FetchGroup.class, FETCH_GROUP);\n         _tags.put(FetchGroups.class, FETCH_GROUPS);\n@@ -1326,6 +1329,10 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n                         fmd.setTypeOverride(toOverrideType(((Type) anno).\n                             value()));\n                     break;\n+                case CONVERT:\n+                    if (isMetaDataMode() && !((Convert) anno).disableConversion())\n+                        fmd.setConverter(((Convert) anno).converter());\n+                    break;\n                 default:\n                     throw new UnsupportedException(_loc.get(\"unsupported\", fmd,\n                         anno.toString()));"},{"sha":"45cc9478e1627601bbfd2c83be7034ca9961b53d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/116eda990351130f70ec384c182efecd36b26977/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","raw_url":"https://github.com/apache/openjpa/raw/116eda990351130f70ec384c182efecd36b26977/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=116eda990351130f70ec384c182efecd36b26977","patch":"@@ -91,5 +91,6 @@\n     OPENJPA_VERSION,\n     // JPA 2.1\n     STOREDPROCEDURE_QUERIES,\n-    STOREDPROCEDURE_QUERY\n+    STOREDPROCEDURE_QUERY,\n+    CONVERT\n }"}]}

