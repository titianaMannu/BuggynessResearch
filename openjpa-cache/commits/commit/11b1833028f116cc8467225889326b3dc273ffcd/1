{"sha":"11b1833028f116cc8467225889326b3dc273ffcd","node_id":"MDY6Q29tbWl0MjA2MzY0OjExYjE4MzMwMjhmMTE2Y2M4NDY3MjI1ODg5MzI2YjNkYzI3M2ZmY2Q=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-17T21:03:33Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-17T21:03:33Z"},"message":"Do not execute testcases which require subselects if the dictionary doesn't provide that support\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@805141 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c2b913eaa64c5f2e57940c52f81172b5f879d63","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c2b913eaa64c5f2e57940c52f81172b5f879d63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/11b1833028f116cc8467225889326b3dc273ffcd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/11b1833028f116cc8467225889326b3dc273ffcd","html_url":"https://github.com/apache/openjpa/commit/11b1833028f116cc8467225889326b3dc273ffcd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/11b1833028f116cc8467225889326b3dc273ffcd/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"129dc13af8cef747084963090042b1858f5583d7","url":"https://api.github.com/repos/apache/openjpa/commits/129dc13af8cef747084963090042b1858f5583d7","html_url":"https://github.com/apache/openjpa/commit/129dc13af8cef747084963090042b1858f5583d7"}],"stats":{"total":189,"additions":115,"deletions":74},"files":[{"sha":"f3cf4e3d4e1877a08b4011e473f4c930faf9fee2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","status":"modified","additions":30,"deletions":26,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/11b1833028f116cc8467225889326b3dc273ffcd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","raw_url":"https://github.com/apache/openjpa/raw/11b1833028f116cc8467225889326b3dc273ffcd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java?ref=11b1833028f116cc8467225889326b3dc273ffcd","patch":"@@ -146,32 +146,36 @@ public void testStringDiscriminators() {\n         em.close();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testExistsQuery() {\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-\n-        StringRootEntity e = new StringRootEntity();\n-        e.setName(\"foo\");\n-        em.persist(e);\n-\n-        e = new StringRootEntity();\n-        e.setName(\"foo\");\n-        em.persist(e);\n-\n-        e = new StringRootEntity();\n-        e.setName(\"bar\");\n-        em.persist(e);\n-\n-        em.getTransaction().commit();\n-        em.close();\n-\n-        em = emf.createEntityManager();\n-        Query q = em.createQuery(\"select o from StringAbstractEntity o \" +\n-            \"where exists (select o2 from StringLeafEntity o2)\");\n-        List<StringAbstractEntity> list = q.getResultList();\n-        assertEquals(0, list.size());\n-        for (StringAbstractEntity entity : list)\n-            assertTrue(entity instanceof StringLeafEntity);\n-        em.close();\n+        if (getDBDictionary(emf).supportsSubselect) {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+\n+            StringRootEntity e = new StringRootEntity();\n+            e.setName(\"foo\");\n+            em.persist(e);\n+\n+            e = new StringRootEntity();\n+            e.setName(\"foo\");\n+            em.persist(e);\n+\n+            e = new StringRootEntity();\n+            e.setName(\"bar\");\n+            em.persist(e);\n+\n+            em.getTransaction().commit();\n+            em.close();\n+\n+            em = emf.createEntityManager();\n+            Query q =\n+                em.createQuery(\"select o from StringAbstractEntity o \"\n+                    + \"where exists (select o2 from StringLeafEntity o2)\");\n+            List<StringAbstractEntity> list = q.getResultList();\n+            assertEquals(0, list.size());\n+            for (StringAbstractEntity entity : list)\n+                assertTrue(entity instanceof StringLeafEntity);\n+            em.close();\n+        }\n     }\n }"},{"sha":"b28a80492610d297c227c28c9eb779089ef06dc2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","status":"modified","additions":47,"deletions":23,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/11b1833028f116cc8467225889326b3dc273ffcd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","raw_url":"https://github.com/apache/openjpa/raw/11b1833028f116cc8467225889326b3dc273ffcd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java?ref=11b1833028f116cc8467225889326b3dc273ffcd","patch":"@@ -18,12 +18,23 @@\n  */\n package org.apache.openjpa.persistence.models.company;\n \n-import java.beans.*;\n-import java.io.*;\n-import java.util.*;\n-import javax.persistence.*;\n-import junit.framework.*;\n-import org.apache.openjpa.persistence.test.*;\n+import java.beans.ExceptionListener;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.beans.XMLDecoder;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n /** \n  * Generic test case that will be extended by a concrete company\n@@ -36,11 +47,13 @@\n \n     private static Map<Class,Class> factoryClasses;\n     private Map<Class,Class> impls;\n+    \n+    private static Boolean canExecute = null; \n \n     public void setUp() {\n         // make a map of the implementations based on the class names in\n         // the current package of the test subclass\n-        impls = new HashMap<Class,Class>();\n+        impls = new HashMap<Class, Class>();\n         impls.put(IAddress.class, localClass(\"Address\"));\n         impls.put(ICompany.class, localClass(\"Company\"));\n         impls.put(ICustomer.class, localClass(\"Customer\"));\n@@ -53,7 +66,15 @@ public void setUp() {\n         impls.put(IProduct.class, localClass(\"Product\"));\n \n         setUp(impls.values().toArray(new Class[impls.size()]));\n-        checkModel();\n+        \n+        if (canExecute == null) {\n+            // This testcase requires subselects. Skip it if subselects will not\n+            // work.\n+            canExecute = getDBDictionary(emf).supportsSubselect;\n+        }\n+        if (canExecute) {\n+            checkModel();\n+        }\n     }\n \n     private Class localClass(String name) {\n@@ -72,26 +93,29 @@ private Class localClass(String name) {\n      * should always return all known instances in the database.\n      */\n     public void testBasicQueries() throws Exception {\n-        for (Class c : impls.values()) {\n-            for (PropertyDescriptor pd :\n-                Introspector.getBeanInfo(c).getPropertyDescriptors()) {\n+        if (canExecute) {\n+            for (Class c : impls.values()) {\n+                for (PropertyDescriptor pd : Introspector.getBeanInfo(c)\n+                    .getPropertyDescriptors()) {\n \n-                if (pd.getWriteMethod() == null) // ignore read-only\n-                    continue;\n+                    if (pd.getWriteMethod() == null) // ignore read-only\n+                        continue;\n \n-                Set<String> queries = new TreeSet<String>();\n-                getBasicQueries(queries, pd, \"x.\");\n+                    Set<String> queries = new TreeSet<String>();\n+                    getBasicQueries(queries, pd, \"x.\");\n \n-                StringBuilder str = new StringBuilder();\n+                    StringBuilder str = new StringBuilder();\n \n-                // execute the individual queries\n-                for (String query : queries) {\n-                    find(c, \"where \" + query);\n-                    str.append(str.length() > 0 ? \" or \" : \"\").append(query);\n-                }\n+                    // execute the individual queries\n+                    for (String query : queries) {\n+                        find(c, \"where \" + query);\n+                        str.append(str.length() > 0 ? \" or \" : \"\")\n+                            .append(query);\n+                    }\n \n-                // now execute all the queries combined\n-                find(c, \"where \" + str);\n+                    // now execute all the queries combined\n+                    find(c, \"where \" + str);\n+                }\n             }\n         }\n     }"},{"sha":"f0a8a4308c6c66c8118eb5e7879ff6eb66b3a68b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"modified","additions":27,"deletions":23,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/11b1833028f116cc8467225889326b3dc273ffcd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/11b1833028f116cc8467225889326b3dc273ffcd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=11b1833028f116cc8467225889326b3dc273ffcd","patch":"@@ -87,41 +87,45 @@ public void setUp() {\n \n \n     public void testSubquery() {\n-        EntityManager em = emf.createEntityManager();\n-        for (int i = 0; i < querys.length; i++) {\n-            String q = querys[i];\n-            List rs = em.createQuery(q).getResultList();\n-            assertEquals(0, rs.size());\n-        }\n+        if(getDBDictionary(emf).supportsSubselect) {\n+            EntityManager em = emf.createEntityManager();\n+            for (int i = 0; i < querys.length; i++) {\n+                String q = querys[i];\n+                List rs = em.createQuery(q).getResultList();\n+                assertEquals(0, rs.size());\n+            }\n \n-        em.getTransaction().begin();\n-        for (int i = 0; i < updates.length; i++) {\n-            int updateCount = em.createQuery(updates[i]).executeUpdate();\n-            assertEquals(0, updateCount);\n-        }\n+            em.getTransaction().begin();\n+            for (int i = 0; i < updates.length; i++) {\n+                int updateCount = em.createQuery(updates[i]).executeUpdate();\n+                assertEquals(0, updateCount);\n+            }\n \n-        em.getTransaction().rollback();\n-        em.close();\n+            em.getTransaction().rollback();\n+            em.close();\n+        }\n     }\n     \n     /**\n      * Verify a sub query can contain MAX and additional date comparisons \n      * without losing the correct alias information. This sort of query \n      * originally caused problems for DBDictionaries which used DATABASE syntax. \n      */\n-    public void testSubSelectMaxDateRange() {        \n-        String query =\n-            \"SELECT e,d from Employee e, Dependent d \"\n+    public void testSubSelectMaxDateRange() {\n+        if(getDBDictionary(emf).supportsSubselect) { \n+            String query =\n+                \"SELECT e,d from Employee e, Dependent d \"\n                 + \"WHERE e.empId = :empid \"\n                 + \"AND d.id.empid = (SELECT MAX (e2.empId) FROM Employee e2) \"\n                 + \"AND d.id.effDate > :minDate \"\n                 + \"AND d.id.effDate < :maxDate \";\n-        EntityManager em = emf.createEntityManager();\n-        Query q = em.createQuery(query);\n-        q.setParameter(\"empid\", (long) 101);\n-        q.setParameter(\"minDate\", new Date(100));\n-        q.setParameter(\"maxDate\", new Date(100000));\n-        q.getResultList();\n-        em.close();\n+            EntityManager em = emf.createEntityManager();\n+            Query q = em.createQuery(query);\n+            q.setParameter(\"empid\", (long) 101);\n+            q.setParameter(\"minDate\", new Date(100));\n+            q.setParameter(\"maxDate\", new Date(100000));\n+            q.getResultList();\n+            em.close();\n+        }\n     }\n }"},{"sha":"1e462decf4b8328841d671a26c2ffbd81eb1d4f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/11b1833028f116cc8467225889326b3dc273ffcd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/11b1833028f116cc8467225889326b3dc273ffcd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=11b1833028f116cc8467225889326b3dc273ffcd","patch":"@@ -20,21 +20,25 @@\n \n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.HashMap;\n+\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.Persistence;\n \n import junit.framework.TestCase;\n import junit.framework.TestResult;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n \n /**\n  * Base test class providing persistence utilities.\n@@ -195,4 +199,9 @@ protected String entityName(EntityManagerFactory emf, Class c) {\n         ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\n         return (meta == null) ? null : meta.getTypeAlias();\n     }\n+    \n+    protected DBDictionary getDBDictionary(OpenJPAEntityManagerFactorySPI emf) {\n+        return ((JDBCConfiguration) emf.getConfiguration())\n+            .getDBDictionaryInstance();\n+    }\n }"}]}

