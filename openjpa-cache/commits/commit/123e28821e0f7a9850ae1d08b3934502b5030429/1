{"sha":"123e28821e0f7a9850ae1d08b3934502b5030429","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyM2UyODgyMWUwZjdhOTg1MGFlMWQwOGIzOTM0NTAyYjUwMzA0Mjk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2013-06-24T17:05:05Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2013-06-24T17:05:05Z"},"message":"OPENJPA-2390 - commit patch contributed by Di Lau.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1496124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef250a194cb4e01cf9c2a6ce2667b244e97a6d53","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef250a194cb4e01cf9c2a6ce2667b244e97a6d53"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/123e28821e0f7a9850ae1d08b3934502b5030429","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/123e28821e0f7a9850ae1d08b3934502b5030429","html_url":"https://github.com/apache/openjpa/commit/123e28821e0f7a9850ae1d08b3934502b5030429","comments_url":"https://api.github.com/repos/apache/openjpa/commits/123e28821e0f7a9850ae1d08b3934502b5030429/comments","author":null,"committer":null,"parents":[{"sha":"5e9ecb0bbe6bf6dff60d73388b0a9added2e3544","url":"https://api.github.com/repos/apache/openjpa/commits/5e9ecb0bbe6bf6dff60d73388b0a9added2e3544","html_url":"https://github.com/apache/openjpa/commit/5e9ecb0bbe6bf6dff60d73388b0a9added2e3544"}],"stats":{"total":263,"additions":263,"deletions":0},"files":[{"sha":"da85e660f6d69b42dae32c2955b28bc26f80acec","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/123e28821e0f7a9850ae1d08b3934502b5030429/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/123e28821e0f7a9850ae1d08b3934502b5030429/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=123e28821e0f7a9850ae1d08b3934502b5030429","patch":"@@ -50,6 +50,7 @@\n     public boolean cacheTables = false;\n \n     private int dbMajorVersion;\n+    private int dbMinorVersion;\n \n     private SQLBuffer _oneBuffer = new SQLBuffer(this).append(\"1\");\n \n@@ -114,6 +115,9 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n             // but doesn't support it for columns references (\"schema.table.column\")\n             useSchemaName = false;\n         }\n+        if (dbMajorVersion > 1 && dbMinorVersion > 0) {\n+            nextSequenceQuery += \" LIMIT 1\";\n+        }\n     }\n \n     /**\n@@ -126,11 +130,13 @@ protected void determineHSQLDBVersion(Connection con) throws SQLException {\n \n         if (isJDBC3) {\n             dbMajorVersion = metaData.getDatabaseMajorVersion();\n+            dbMinorVersion = metaData.getDatabaseMinorVersion();\n         } else {\n             // String is like \"2.0.0\"\n             String productVersion = metaData.getDatabaseProductVersion();\n             String[] version = productVersion.split(\"\\\\.\") ;\n             dbMajorVersion = Integer.parseInt(version[0]) ;\n+            dbMinorVersion = Integer.parseInt(version[1]);\n         }\n     }\n "},{"sha":"ad32deabd890e45a28aab9feb85dac4d22015a58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/HSQLEmployee.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/123e28821e0f7a9850ae1d08b3934502b5030429/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/HSQLEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/123e28821e0f7a9850ae1d08b3934502b5030429/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/HSQLEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/HSQLEmployee.java?ref=123e28821e0f7a9850ae1d08b3934502b5030429","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence.hsql;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+\n+@Entity\n+@SequenceGenerator(name = \"HEmpSeq\", sequenceName = \"native(Sequence=HEMP_SEQ)\", allocationSize = 1)\n+public class HSQLEmployee {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"HEmpSeq\")\n+    private int id;\n+\n+    private String firstName;\n+    private String lastName;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+}"},{"sha":"5fe05771d48b11767fca294fc46b6d2373fc155f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/HSQLEmployee2.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/123e28821e0f7a9850ae1d08b3934502b5030429/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/HSQLEmployee2.java","raw_url":"https://github.com/apache/openjpa/raw/123e28821e0f7a9850ae1d08b3934502b5030429/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/HSQLEmployee2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/HSQLEmployee2.java?ref=123e28821e0f7a9850ae1d08b3934502b5030429","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence.hsql;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+\n+@Entity\n+@SequenceGenerator(name = \"HEmpSeq2\", sequenceName = \"native(Sequence=HEMP_SEQ)\", allocationSize = 2)\n+public class HSQLEmployee2 {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"HEmpSeq2\")\n+    private int id;\n+\n+    private String firstName;\n+    private String lastName;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+}"},{"sha":"303549c73d3b53222241d177ad9cd0d038a0cd87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/TestHSQLSequence.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/apache/openjpa/blob/123e28821e0f7a9850ae1d08b3934502b5030429/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/TestHSQLSequence.java","raw_url":"https://github.com/apache/openjpa/raw/123e28821e0f7a9850ae1d08b3934502b5030429/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/TestHSQLSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/hsql/TestHSQLSequence.java?ref=123e28821e0f7a9850ae1d08b3934502b5030429","patch":"@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence.hsql;\n+\n+import java.util.List;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * The test case demonstrates the expected return id sequence should be:\n+ * \"1, 2, 3, 4, 5, ...\" regardless of the HSQL database version being used.\n+ * \n+ * In version 2.1.* onward, \"SELECT NEXT VALUE ...\" query returns two times the\n+ * sequence's \"INCREMENT BY\" value, for example: allocationSize=1 returns\n+ * \"1, 2\". The next call returns \"3, 4\". Therefore, the id sequence returned\n+ * (without \"LIMIT 1\") are: \"1, 3, 5, 7, 9, ...\". By the same token, using\n+ * allocationSize=2 returns \"1, 2, 3, 4\". The next call returns \"5, 6, 7, 8\".\n+ * The id sequence returned then (without \"LIMIT 1\") are: \"1, 2, 5, 6, 9, ...\".\n+ * \n+ * For HSQL version 2.1.0 rc4 and beyond, the dictionary needs to append\n+ * \"LIMIT 1\" to the nextSequenceQuery field in HSQLDictionary.java to ensure\n+ * single value is returned in \"SELECT NEXT VALUE ...\" request. This forces HSQL\n+ * to hand back only one value at a time. Therefore, the returned id sequence is\n+ * \"1, 2, 3, 4, 5, ...\" independent of HSQL version.\n+ */\n+public class TestHSQLSequence extends SQLListenerTestCase {\n+    OpenJPAEntityManager em;\n+    JDBCConfiguration conf;\n+    DBDictionary dict;\n+\n+    public void setUp() throws Exception {\n+        setSupportedDatabases(org.apache.openjpa.jdbc.sql.HSQLDictionary.class);\n+        if (isTestsDisabled()) {\n+            return;\n+        }\n+\n+        super.setUp(HSQLEmployee.class, HSQLEmployee2.class, DROP_TABLES,\n+                \"openjpa.ConnectionFactoryProperties\", \"PrintParameters=true\"\n+                );\n+        assertNotNull(emf);\n+\n+        conf = (JDBCConfiguration) emf.getConfiguration();\n+        dict = conf.getDBDictionaryInstance();\n+        boolean supportsNativeSequence = dict.nextSequenceQuery != null;\n+        if (supportsNativeSequence) {\n+            em = emf.createEntityManager();\n+            // Drop all sequences to eliminate non-consecutive \"SELECT NEXT VALUE FOR ...\"\n+            assertNotNull(em);\n+            Query q = em.createNativeQuery(\n+                    \"SELECT SEQUENCE_SCHEMA, SEQUENCE_NAME FROM INFORMATION_SCHEMA.SYSTEM_SEQUENCES\");\n+            List<Object[]> rs = q.getResultList();\n+            em.getTransaction().begin();\n+            for(Object[] os : rs) {\n+                String schemaQualifier = (String)os[0];\n+                String schemaName = (String)os[1];\n+                if( \"PUBLIC\".equals(schemaQualifier) && !schemaName.equals(\"HEMP_SEQ\")) {\n+                    q = em.createNativeQuery(\"DROP SEQUENCE \" + schemaName);\n+                    q.executeUpdate();\n+                }\n+            }\n+            em.getTransaction().commit();\n+            em.clear();\n+        }\n+    }\n+\n+    // create HSQLEmployee entity and persist it\n+    public HSQLEmployee createHSQLEmployee(String first, String last) {\n+        HSQLEmployee e = new HSQLEmployee();\n+        e.setFirstName(first);\n+        e.setLastName(last);\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        int id = e.getId();\n+        em.clear();\n+        return em.find(HSQLEmployee.class, id);\n+    }\n+\n+    public HSQLEmployee2 createHSQLEmployee2(String first, String last) {\n+        HSQLEmployee2 e = new HSQLEmployee2();\n+        e.setFirstName(first);\n+        e.setLastName(last);\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        int id = e.getId();\n+        em.clear();\n+        return em.find(HSQLEmployee2.class, id);\n+    }\n+\n+    public void testId() {\n+        int counter = 1;\n+        int id = 0;\n+        while (counter <= 20) {\n+            HSQLEmployee2 e = createHSQLEmployee2(\"Ferris\" + counter, \"Erris\");\n+            assertNotNull(e);\n+            id = e.getId();\n+            assertEquals(counter, id);\n+            ++counter;\n+        }\n+    }\n+\n+    public void testId2() {\n+        int counter = 1;\n+        int id = 0;\n+        while (counter <= 20) {\n+            HSQLEmployee e = createHSQLEmployee(\"Ferris\" + counter, \"Erris\");\n+            assertNotNull(e);\n+            id = e.getId();\n+            assertEquals(counter, id);\n+            ++counter;\n+        }\n+    }\n+}"}]}

