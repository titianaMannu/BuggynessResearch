{"sha":"126ed03a3b7bc4c66fa50c867a760c9fd6d37380","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyNmVkMDNhM2I3YmM0YzY2ZmE1MGM4NjdhNzYwYzlmZDZkMzczODA=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-23T22:19:28Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-23T22:19:28Z"},"message":"OPENJPA-266 process dbdictionaryPlugin values for vendor specific DB Dictionary.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558881 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34a51c290454c5348dbaf54eecd2c91690b6cc62","url":"https://api.github.com/repos/apache/openjpa/git/trees/34a51c290454c5348dbaf54eecd2c91690b6cc62"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/126ed03a3b7bc4c66fa50c867a760c9fd6d37380","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/126ed03a3b7bc4c66fa50c867a760c9fd6d37380","html_url":"https://github.com/apache/openjpa/commit/126ed03a3b7bc4c66fa50c867a760c9fd6d37380","comments_url":"https://api.github.com/repos/apache/openjpa/commits/126ed03a3b7bc4c66fa50c867a760c9fd6d37380/comments","author":null,"committer":null,"parents":[{"sha":"19dc613dd0ad379cb2806fc7dcf16992c43da66c","url":"https://api.github.com/repos/apache/openjpa/commits/19dc613dd0ad379cb2806fc7dcf16992c43da66c","html_url":"https://github.com/apache/openjpa/commit/19dc613dd0ad379cb2806fc7dcf16992c43da66c"}],"stats":{"total":28,"additions":20,"deletions":8},"files":[{"sha":"bc4c5c0b603c2085e8b01e07fc65989fb05c6a7c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":20,"deletions":8,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/126ed03a3b7bc4c66fa50c867a760c9fd6d37380/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/126ed03a3b7bc4c66fa50c867a760c9fd6d37380/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=126ed03a3b7bc4c66fa50c867a760c9fd6d37380","patch":"@@ -27,6 +27,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n@@ -77,9 +78,9 @@ public static DBDictionary newDBDictionary(JDBCConfiguration conf,\n      */\n     public static DBDictionary calculateDBDictionary(JDBCConfiguration conf,\n         String url, String driver, String props) {\n-        String dclass = dictionaryClassForString(url);\n+        String dclass = dictionaryClassForString(url, conf);\n         if (dclass == null)\n-            dclass = dictionaryClassForString(driver);\n+            dclass = dictionaryClassForString(driver, conf);\n         if (dclass == null)\n             return null;\n         return newDBDictionary(conf, dclass, props);\n@@ -94,10 +95,10 @@ public static DBDictionary newDBDictionary(JDBCConfiguration conf,\n         try {\n             conn = ds.getConnection();\n             DatabaseMetaData meta = conn.getMetaData();\n-            String dclass = dictionaryClassForString(meta.getURL());\n+            String dclass = dictionaryClassForString(meta.getURL(), conf);\n             if (dclass == null)\n                 dclass = dictionaryClassForString\n-                    (meta.getDatabaseProductName());\n+                    (meta.getDatabaseProductName(), conf);\n             if (dclass == null)\n                 dclass = DBDictionary.class.getName();\n             return newDBDictionary(conf, dclass, props, conn);\n@@ -170,15 +171,15 @@ private static DBDictionary newDBDictionary(JDBCConfiguration conf,\n     /**\n      * Guess the dictionary class name to use based on the product string.\n      */\n-    private static String dictionaryClassForString(String prod) {\n+    private static String dictionaryClassForString(String prod, JDBCConfiguration conf) {\n         if (StringUtils.isEmpty(prod))\n             return null;\n         prod = prod.toLowerCase();\n \n         if (prod.indexOf(\"oracle\") != -1)\n-            return ORACLE_DICT_NAME;\n+            return getDBDictionaryPluginValue(conf, \"oracle\");\n         if (prod.indexOf(\"sqlserver\") != -1)\n-            return SQLServerDictionary.class.getName();\n+            return getDBDictionaryPluginValue(conf, \"sqlserver\");\n         if (prod.indexOf(\"jsqlconnect\") != -1)\n             return SQLServerDictionary.class.getName();\n         if (prod.indexOf(\"mysql\") != -1)\n@@ -223,7 +224,7 @@ private static String dictionaryClassForString(String prod) {\n         // appear in the URL of another database (like if the db is named\n         // \"testdb2\" or something)\n         if (prod.indexOf(\"db2\") != -1 || prod.indexOf(\"as400\") != -1)\n-            return DB2Dictionary.class.getName();\n+            return getDBDictionaryPluginValue(conf, \"db2\");\n \n         // known dbs that we don't support\n         if (prod.indexOf(\"cloudscape\") != -1)\n@@ -608,4 +609,15 @@ public static String toString(DatabaseMetaData meta)\n \n         return buf.toString();\n     }\n+    \n+    private static String getDBDictionaryPluginValue(JDBCConfiguration conf\n+        , String alias) {\n+        String[] aliases = ((JDBCConfigurationImpl) conf)\n+            .dbdictionaryPlugin.getAliases();\n+        for (int i = 0; i < aliases.length; i++) {\n+            if (StringUtils.equals(alias, aliases[i]))\n+                return aliases[++i];\n+        }\n+        return null;\n+    }\n }"}]}

