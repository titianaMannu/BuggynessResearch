{"sha":"127e14669806ab8f287a06eb6384d97d99f149b2","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyN2UxNDY2OTgwNmFiOGYyODdhMDZlYjYzODRkOTdkOTlmMTQ5YjI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-08T14:59:28Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-08T14:59:28Z"},"message":"OPENJPA-1400: Fix PersistenceCapable.pcIsDetached() when using no statemanager and version is zero.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@888422 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95c7bc550d8660fc7e3e5bfc6c3b459e7d31b47e","url":"https://api.github.com/repos/apache/openjpa/git/trees/95c7bc550d8660fc7e3e5bfc6c3b459e7d31b47e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/127e14669806ab8f287a06eb6384d97d99f149b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/127e14669806ab8f287a06eb6384d97d99f149b2","html_url":"https://github.com/apache/openjpa/commit/127e14669806ab8f287a06eb6384d97d99f149b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/127e14669806ab8f287a06eb6384d97d99f149b2/comments","author":null,"committer":null,"parents":[{"sha":"87bf3e21c5b1ba0a020adfee29e1ceea030b9d68","url":"https://api.github.com/repos/apache/openjpa/commits/87bf3e21c5b1ba0a020adfee29e1ceea030b9d68","html_url":"https://github.com/apache/openjpa/commit/87bf3e21c5b1ba0a020adfee29e1ceea030b9d68"}],"stats":{"total":259,"additions":256,"deletions":3},"files":[{"sha":"bcd2f9561b81922bfabf8943bdbaca7cda4b9acb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":48,"deletions":3,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/127e14669806ab8f287a06eb6384d97d99f149b2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/127e14669806ab8f287a06eb6384d97d99f149b2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=127e14669806ab8f287a06eb6384d97d99f149b2","patch":"@@ -113,6 +113,8 @@\n     // Each enhanced class will return the value of this field via\n     // public int getEnhancementContractVersion()\n     public static final int ENHANCER_VERSION = 2;\n+    \n+    boolean _addVersionInitFlag = true;\n \n     public static final int ENHANCE_NONE = 0;\n     public static final int ENHANCE_AWARE = 2 << 0;\n@@ -134,6 +136,8 @@\n     private static final String SUPER = PRE + \"PCSuperclass\";\n     private static final Class OIDFSTYPE = FieldSupplier.class;\n     private static final Class OIDFCTYPE = FieldConsumer.class;\n+    \n+    private static final String VERSION_INIT_STR =  PRE + \"VersionInit\";\n \n     private static final Localizer _loc = Localizer.forPackage\n         (PCEnhancer.class);\n@@ -428,6 +432,7 @@ public boolean getCreateSubclass() {\n      */\n     public void setCreateSubclass(boolean subclass) {\n         _subclass = subclass;\n+        _addVersionInitFlag = false;\n     }\n \n     /**\n@@ -1347,6 +1352,16 @@ private void addReplaceFieldsMethods()\n                     code.checkcast().setType(fmds[i].getDeclaredType());\n \n                 addSetManagedValueCode(code, fmds[i]);\n+                \n+                if(_addVersionInitFlag){\n+                    if(fmds[i].isVersion()){\n+                        // If this case is setting the version field\n+                        // pcVersionInit = true;\n+                        loadManagedInstance(code, false);\n+                        code.constant().setValue(1);\n+                        putfield(code, null, VERSION_INIT_STR, boolean.class);\n+                    }\n+                }\n                 code.vreturn();\n             }\n \n@@ -2705,7 +2720,12 @@ private void addFields() {\n         _pc.declareField(PRE + \"FieldTypes\", Class[].class).setStatic(true);\n         _pc.declareField(PRE + \"FieldFlags\", byte[].class).setStatic(true);\n         _pc.declareField(SUPER, Class.class).setStatic(true);\n-\n+        if (_addVersionInitFlag && _meta.getVersionField() != null) {\n+            // protected transient boolean pcVersionInit;\n+            BCField field = _pc.declareField(VERSION_INIT_STR, boolean.class);\n+            field.makeProtected();\n+            field.setTransient(true);\n+        }\n         if (_meta.getPCSuperclass() == null || getCreateSubclass()) {\n             BCField field = _pc.declareField(SM, SMTYPE);\n             field.makeProtected();\n@@ -3154,8 +3174,25 @@ private boolean writeIsDetachedMethod(Code code)\n             ifins = ifDefaultValue(code, version);\n             code.getstatic().setField(Boolean.class, \"TRUE\", Boolean.class);\n             code.areturn();\n-            ifins.setTarget(code.getstatic().setField(Boolean.class, \"FALSE\",\n-                Boolean.class));\n+            if (!_addVersionInitFlag){\n+                // else return false;\n+                ifins.setTarget(code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class));\n+            }else{\n+                FieldMetaData versionInit = _meta.getDeclaredField(VERSION_INIT_STR);\n+                // noop\n+                ifins.setTarget(code.nop());\n+                // if (pcVersionInit)\n+                // return true\n+                // else return false;\n+                loadManagedInstance(code, false);\n+                getfield(code, null, versionInit.getName());\n+                ifins = ifDefaultValue(code, versionInit);\n+                code.getstatic().setField(Boolean.class, \"TRUE\", Boolean.class);\n+                code.areturn();\n+                ifins.setTarget(code.nop());\n+                code.getstatic().setField(Boolean.class, \"FALSE\", Boolean.class);\n+                \n+            }\n             code.areturn();\n             return false;\n         }\n@@ -3618,6 +3655,13 @@ private void addSetMethod(int index, FieldMetaData fmd)\n         loadManagedInstance(code, true);\n         code.xload().setParam(firstParamOffset);\n         addSetManagedValueCode(code, fmd);\n+        if(fmd.isVersion()==true && _addVersionInitFlag){\n+            // if we are setting the version, flip the versionInit flag to true\n+            FieldMetaData v = _meta.addDeclaredField(VERSION_INIT_STR, boolean.class);\n+            loadManagedInstance(code, true);\n+            code.constant().setValue(1);\n+            addSetManagedValueCode(code, v);   \n+        }\n         code.vreturn();\n \n         // inst.pcStateManager.setting<fieldType>Field (inst,\n@@ -4224,6 +4268,7 @@ private void addGetManagedValueCode(Code code, FieldMetaData fmd,\n         } else {\n             // regular enhancement + property access\n             Method meth = (Method) fmd.getBackingMember();\n+\n             code.invokevirtual().setMethod(PRE + meth.getName(),\n                 meth.getReturnType(), meth.getParameterTypes());\n         }"},{"sha":"9de2231c8b763eddec9fc3f63dc182c3c3798131","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachNoStateField.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/127e14669806ab8f287a06eb6384d97d99f149b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachNoStateField.java","raw_url":"https://github.com/apache/openjpa/raw/127e14669806ab8f287a06eb6384d97d99f149b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachNoStateField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachNoStateField.java?ref=127e14669806ab8f287a06eb6384d97d99f149b2","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.detachment.featureSelection.NoDetachedStateEntityFieldAccess;\n+import org.apache.openjpa.persistence.detachment.featureSelection.NoDetachedStateEntityPropertyAccess;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDetachNoStateField extends SingleEMFTestCase {\n+\n+    @Override\n+    protected void setUp(Object... props) {\n+        super.setUp(CLEAR_TABLES, \"openjpa.DetachState\", \"loaded(DetachedStateField=false)\",\n+            NoDetachedStateEntityPropertyAccess.class, NoDetachedStateEntityFieldAccess.class);\n+        loadDB();\n+    }\n+\n+    /**\n+     * This testcase was added for OPENJPA-1400.\n+     */\n+    public void testIsDetchedNoStateManagerZeroVersionField() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        NoDetachedStateEntityPropertyAccess property = em.find(NoDetachedStateEntityPropertyAccess.class, 1);\n+        NoDetachedStateEntityFieldAccess field = em.find(NoDetachedStateEntityFieldAccess.class, 1);\n+        em.close();\n+\n+        PersistenceCapable pcProperty = (PersistenceCapable) property;\n+        PersistenceCapable pcField = (PersistenceCapable) field;\n+\n+        assertTrue(pcProperty.pcIsDetached());\n+        assertTrue(pcField.pcIsDetached());\n+    }\n+\n+    /**\n+     * This testcase was added for OPENJPA-1400.\n+     */\n+    public void testPersistRelationshipToDetchedEntityZeroVersion() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        NoDetachedStateEntityPropertyAccess property = em.find(NoDetachedStateEntityPropertyAccess.class, 1);\n+        em.close();\n+\n+        // Make sure we don't hit any exceptions when persisting a relationship to a detached\n+        // entity.\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        NoDetachedStateEntityFieldAccess field = em.find(NoDetachedStateEntityFieldAccess.class, 1);\n+        field.setRelationship(property);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        // Make sure that the relationship was persisted\n+        em = emf.createEntityManager();\n+        field = em.find(NoDetachedStateEntityFieldAccess.class, 1);\n+        property = field.getRelationship();\n+        assertNotNull(property);\n+        assertEquals(1, property.getId());\n+\n+    }\n+\n+    void loadDB() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createNativeQuery(\"INSERT INTO NoDetachedStateEntityPropertyAccess (ID,VERSION) VALUES (1,0)\")\n+            .executeUpdate();\n+        em.createNativeQuery(\"INSERT INTO NoDetachedStateEntityFieldAccess (ID,VERSION) VALUES (1,0)\")\n+            .executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"},{"sha":"74f08f4608f4d64eba09bf88ec72fd2b934a4cf1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/NoDetachedStateEntityFieldAccess.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/127e14669806ab8f287a06eb6384d97d99f149b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/NoDetachedStateEntityFieldAccess.java","raw_url":"https://github.com/apache/openjpa/raw/127e14669806ab8f287a06eb6384d97d99f149b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/NoDetachedStateEntityFieldAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/NoDetachedStateEntityFieldAccess.java?ref=127e14669806ab8f287a06eb6384d97d99f149b2","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class NoDetachedStateEntityFieldAccess {\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\n+\tint id;\n+\t\n+\t@Version\n+\tint version;\n+\t\n+\t@Basic\n+\tString string;\n+\t\n+\t@ManyToOne\n+\tNoDetachedStateEntityPropertyAccess relationship;\n+\t\n+\tpublic NoDetachedStateEntityFieldAccess(){\n+\t\t\n+\t}\n+\t\n+\tpublic void setString(String s){\n+\t\tstring = s;\n+\t}\n+\tpublic void setRelationship(NoDetachedStateEntityPropertyAccess r){\n+\t\trelationship = r;\n+\t}\n+\tpublic NoDetachedStateEntityPropertyAccess getRelationship(){\n+\t\treturn relationship;\n+\t}\n+}"},{"sha":"3007fb3cd31ed626eb01d7c5b8cf1f8690396946","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/NoDetachedStateEntityPropertyAccess.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/127e14669806ab8f287a06eb6384d97d99f149b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/NoDetachedStateEntityPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/127e14669806ab8f287a06eb6384d97d99f149b2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/NoDetachedStateEntityPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/NoDetachedStateEntityPropertyAccess.java?ref=127e14669806ab8f287a06eb6384d97d99f149b2","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment.featureSelection;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class NoDetachedStateEntityPropertyAccess {\n+\tint id;\n+\tint version;\n+\tString string;\n+\tpublic NoDetachedStateEntityPropertyAccess(){\n+\t\t\n+\t}\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\t@Version\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\tpublic void setVersion(int version) {\n+\t\tthis.version = version;\n+\t}\n+\t@Basic\n+\tpublic String getString() {\n+\t\treturn string;\n+\t}\n+\n+\tpublic void setString(String string) {\n+\t\tthis.string = string;\n+\t}\n+\t\n+\t\n+}"}]}

