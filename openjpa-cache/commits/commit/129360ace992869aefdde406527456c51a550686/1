{"sha":"129360ace992869aefdde406527456c51a550686","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyOTM2MGFjZTk5Mjg2OWFlZmRkZTQwNjUyNzQ1NmM1MWE1NTA2ODY=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-04-20T17:24:32Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-04-20T17:24:32Z"},"message":"OPENJPA-222 clean up\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@530860 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b858fe2f66f913aaab3a2f0507919b882e909c6c","url":"https://api.github.com/repos/apache/openjpa/git/trees/b858fe2f66f913aaab3a2f0507919b882e909c6c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/129360ace992869aefdde406527456c51a550686","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/129360ace992869aefdde406527456c51a550686","html_url":"https://github.com/apache/openjpa/commit/129360ace992869aefdde406527456c51a550686","comments_url":"https://api.github.com/repos/apache/openjpa/commits/129360ace992869aefdde406527456c51a550686/comments","author":null,"committer":null,"parents":[{"sha":"0bc9685aa77959c9898853af18789859fb14412f","url":"https://api.github.com/repos/apache/openjpa/commits/0bc9685aa77959c9898853af18789859fb14412f","html_url":"https://github.com/apache/openjpa/commit/0bc9685aa77959c9898853af18789859fb14412f"}],"stats":{"total":262,"additions":130,"deletions":132},"files":[{"sha":"f6117d8cd3725267dc8cf09d666db60d2ae94683","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/129360ace992869aefdde406527456c51a550686/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/129360ace992869aefdde406527456c51a550686/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=129360ace992869aefdde406527456c51a550686","patch":"@@ -37,11 +37,11 @@\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n     private int db2ServerType = 0;\r\n-    private static final int db2ISeriesV5R3AndEarlier = 1;\r\n+    private static final int db2ISeriesV5R3OrEarlier = 1;\r\n     private static final int db2UDBV81OrEarlier = 2;\r\n     private static final int db2ZOSV8xOrLater = 3;\r\n-    private static final int db2UDBV82AndLater = 4;\r\n-    private static final int db2ISeriesV5R4AndLater = 5;\r\n+    private static final int db2UDBV82OrLater = 4;\r\n+    private static final int db2ISeriesV5R4OrLater = 5;\r\n \tprivate static final String forUpdateOfClause = \"FOR UPDATE OF\";\r\n     private static final String withRSClause = \"WITH RS\";\r\n     private static final String withRRClause = \"WITH RR\";\r\n@@ -191,16 +191,16 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n \t    \tint min = metaData.getDatabaseMinorVersion();\r\n \r\n \t    \t// Determine the type of DB2 database\r\n-\t    \tif (isDB2ISeriesV5R3AndEarlier(metaData))\r\n-\t    \t    db2ServerType = db2ISeriesV5R3AndEarlier;\r\n+\t    \tif (isDB2ISeriesV5R3OrEarlier(metaData))\r\n+\t    \t    db2ServerType = db2ISeriesV5R3OrEarlier;\r\n \t    \telse if (isDB2UDBV81OrEarlier(metaData,maj,min))\r\n \t    \t    db2ServerType = db2UDBV81OrEarlier;\r\n \t    \telse if (isDB2ZOSV8xOrLater(metaData,maj))\r\n \t    \t    db2ServerType = db2ZOSV8xOrLater;\r\n-\t    \telse if (isDB2UDBV82AndLater(metaData,maj,min))\r\n-\t    \t    db2ServerType = db2UDBV82AndLater;\r\n-\t    \telse if (isDB2ISeriesV5R4AndLater(metaData))\r\n-\t    \t    db2ServerType = db2ISeriesV5R4AndLater;\r\n+\t    \telse if (isDB2UDBV82OrLater(metaData,maj,min))\r\n+\t    \t    db2ServerType = db2UDBV82OrLater;\r\n+\t    \telse if (isDB2ISeriesV5R4OrLater(metaData))\r\n+\t    \t    db2ServerType = db2ISeriesV5R4OrLater;\r\n \r\n \t    \tif (maj >= 9 || (maj == 8 && min >= 2)) {\r\n \t    \t\tsupportsLockingWithMultipleTables = true;\r\n@@ -247,7 +247,7 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n \r\n             if (forUpdate) {\r\n                 switch(db2ServerType) {\r\n-                case db2ISeriesV5R3AndEarlier:\r\n+                case db2ISeriesV5R3OrEarlier:\r\n                 case db2UDBV81OrEarlier:\r\n                     if (isolationLevel ==\r\n                         Connection.TRANSACTION_READ_UNCOMMITTED) {\r\n@@ -257,7 +257,7 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n                         forUpdateString.append(\" \").append(forUpdateOfClause);\r\n                     break;\r\n                 case db2ZOSV8xOrLater:\r\n-                case db2UDBV82AndLater:\r\n+                case db2UDBV82OrLater:\r\n                     if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n                         forUpdateString.append(\" \").append(forReadOnlyClause)\r\n                             .append(\" \").append(withRRClause)\r\n@@ -268,7 +268,7 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n                             .append(\" \").append(useKeepUpdateLockClause);                            \r\n                     }\r\n                     break;\r\n-                case db2ISeriesV5R4AndLater:\r\n+                case db2ISeriesV5R4OrLater:\r\n                     if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n                         forUpdateString.append(\" \").append(forReadOnlyClause)\r\n                             .append(\" \").append(withRRClause)\r\n@@ -289,7 +289,7 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         return forUpdateString.toString();\r\n     }\r\n \r\n-    public boolean isDB2UDBV82AndLater(DatabaseMetaData metadata, int maj,\r\n+    public boolean isDB2UDBV82OrLater(DatabaseMetaData metadata, int maj,\r\n         int min) throws SQLException {\r\n         boolean match = false;\r\n         if (metadata.getDatabaseProductVersion().indexOf(\"SQL\") != -1\r\n@@ -307,7 +307,7 @@ public boolean isDB2ZOSV8xOrLater(DatabaseMetaData metadata, int maj)\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R3AndEarlier(DatabaseMetaData metadata)\r\n+    public boolean isDB2ISeriesV5R3OrEarlier(DatabaseMetaData metadata)\r\n        throws SQLException {\r\n        boolean match = false;\r\n        if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1\r\n@@ -317,7 +317,7 @@ public boolean isDB2ISeriesV5R3AndEarlier(DatabaseMetaData metadata)\n        return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R4AndLater(DatabaseMetaData metadata)\r\n+    public boolean isDB2ISeriesV5R4OrLater(DatabaseMetaData metadata)\r\n        throws SQLException {\r\n        boolean match = false;\r\n        if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1\r"},{"sha":"9cc24fd5a80559d756466fa50d9f44e630ad2cf3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":77,"deletions":78,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/129360ace992869aefdde406527456c51a550686/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/129360ace992869aefdde406527456c51a550686/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=129360ace992869aefdde406527456c51a550686","patch":"@@ -68,7 +68,7 @@ public void testIsolationLevelOverride(boolean useHintsAndQueries,\n             em.getTransaction().begin();\n             if (useHintsAndQueries) {\n                 Query q = em.createQuery(\n-                    \"select o from AllFieldTypes o where o.intField = :p\");\n+                \"select o from AllFieldTypes o where o.intField = :p\");\n                 q.setParameter(\"p\", 0);\n                 if (useStringHints) {\n                     q.setHint(\"openjpa.FetchPlan.Isolation\", \"SERIALIZABLE\");\n@@ -82,89 +82,88 @@ public void testIsolationLevelOverride(boolean useHintsAndQueries,\n                         .getIsolation());\n \n                 q.getResultList();\n-                if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n-                    getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n-                        .getDb2ServerType()== 2)) {\n-                    assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField, \"\n-                        + \"t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                        + \" FOR UPDATE OF\");\n-                }\n-\n-                // it is DB2 v82 or later\n-                else if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n-                    getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n-                        .getDb2ServerType() == 4)) {\n-                    assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField, \"\n-                        + \"t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                        + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\");\n-                }\n-\n-                else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n-                    getDb2ServerType() == 5){\n-                    assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n-                        + \" t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField, \"\n-                        + \"t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n-                        + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE \" \n-                        + \"LOCKS\");\n+                if (dict instanceof DB2Dictionary) {\n+                    if ((((DB2Dictionary)dict).getDb2ServerType() == 1)\n+                        || (((DB2Dictionary)dict).getDb2ServerType()== 2)) {\n+                        assertEquals(1, sql.size());\n+                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                            + \" t0.floatField, t0.intField, t0.longField, \"\n+                            + \"t0.shortField, t0.stringField FROM \"\n+                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                            + \" FOR UPDATE OF\");\n+                    }\n+                    // it is DB2 v82 or later\n+                    else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n+                        || (((DB2Dictionary)dict).getDb2ServerType() == 4)) {\n+                        assertEquals(1, sql.size());\n+                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                            + \" t0.floatField, t0.intField, t0.longField, \"\n+                            + \"t0.shortField, t0.stringField FROM \"\n+                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                            + \" FOR READ ONLY WITH RR USE AND KEEP \" \n+                            + \"UPDATE LOCKS\");\n+                    }\n+                    else if (((DB2Dictionary)dict).getDb2ServerType() == 5) {\n+                        assertEquals(1, sql.size());\n+                        assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n+                            + \" t0.charField, t0.dateField, t0.doubleField,\"\n+                            + \" t0.floatField, t0.intField, t0.longField, \"\n+                            + \"t0.shortField, t0.stringField FROM \"\n+                            + \"AllFieldTypes t0 WHERE \\\\(t0.intField = \\\\?\\\\) \"\n+                            + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE \" \n+                            + \"LOCKS\");\n+                    }    \n+                    else {\n+                        fail(\"OpenJPA currently only supports \" \n+                            +\"per-query isolation level configuration on the\" \n+                            +\" following databases: DB2\");\n+                    }\n                 }    \n-                else if (dict instanceof DB2Dictionary) {\n-                    fail(\"OpenJPA currently only supports per-query isolation \" \n-                    + \"level configuration on the following databases: DB2\");\n-                }\n             } else {\n                 ((JDBCFetchPlan) em.getFetchPlan())\n                     .setIsolation(IsolationLevel.SERIALIZABLE);\n                 em.find(AllFieldTypes.class, 0);\n-                if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n-                    getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n-                        .getDb2ServerType()== 2)) {\n-                    assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                        + \" FOR UPDATE OF optimize for 1 row\");\n-                }\n-                // it is DB2 v82 or later\n-                else if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n-                    getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n-                        .getDb2ServerType() == 4)) {\n-                    assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                        + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\" \n-                        + \" optimize for 1 row\");\n-                }\n-                else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n-                    getDb2ServerType() == 5) {\n-                    assertEquals(1, sql.size());\n-                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                        + \" t0.floatField, t0.intField, t0.longField,\"\n-                        + \" t0.shortField, t0.stringField FROM \"\n-                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                        + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE LOCKS\"\n-                        + \" optimize for 1 row\");\n+                if (dict instanceof DB2Dictionary ) {\n+                    if ((((DB2Dictionary)dict).getDb2ServerType() == 1)\n+                        || (((DB2Dictionary)dict).getDb2ServerType()== 2)) {\n+                        assertEquals(1, sql.size());\n+                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                            + \" t0.floatField, t0.intField, t0.longField,\"\n+                            + \" t0.shortField, t0.stringField FROM \"\n+                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                            + \" FOR UPDATE OF optimize for 1 row\");\n+                    }\n+                    // it is DB2 v82 or later\n+                    else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n+                        || (((DB2Dictionary)dict).getDb2ServerType() == 4)) {\n+                        assertEquals(1, sql.size());\n+                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                            + \" t0.floatField, t0.intField, t0.longField,\"\n+                            + \" t0.shortField, t0.stringField FROM \"\n+                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                            + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\" \n+                            + \" optimize for 1 row\");\n+                    }\n+                    else if (((DB2Dictionary)dict).getDb2ServerType() == 5) {\n+                        assertEquals(1, sql.size());\n+                        assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                            + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                            + \" t0.floatField, t0.intField, t0.longField,\"\n+                            + \" t0.shortField, t0.stringField FROM \"\n+                            + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                            + \" FOR READ ONLY WITH RR USE AND KEEP EXCLUSIVE\" \n+                            + \" LOCKS optimize for 1 row\");\n+                    }    \n+                    else {\n+                        fail(\"OpenJPA currently only supports per-query\" \n+                            +\" isolation level configuration on the following\" \n+                            +\" databases: DB2\");\n+                    }\n                 }    \n-                else if (dict instanceof DB2Dictionary) {\n-                    fail(\"OpenJPA currently only supports per-query isolation \" \n-                    + \"level configuration on the following databases: DB2\");\n-                }\n             }\n         } catch (InvalidStateException pe) {\n             // if we're not using DB2, we expect an InvalidStateException."},{"sha":"189a24aaedb42e17628835083f15af5c671c9a1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"modified","additions":38,"deletions":39,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/129360ace992869aefdde406527456c51a550686/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/129360ace992869aefdde406527456c51a550686/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=129360ace992869aefdde406527456c51a550686","patch":"@@ -57,47 +57,46 @@ public void testSelectForUpdateOverride() {\n             OpenJPAPersistence.cast(em).getFetchPlan()\n                 .setReadLockMode(LockModeType.WRITE);\n             em.find(AllFieldTypes.class, 0);\n-\n             assertEquals(1, sql.size());\n-            if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n-                getDb2ServerType() == 1) || ((DB2Dictionary)dict)\n-                    .getDb2ServerType()== 2)) {\n-                assertEquals(1, sql.size());\n-                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                    + \" t0.floatField, t0.intField, t0.longField,\"\n-                    + \" t0.shortField, t0.stringField FROM \"\n-                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                    + \" FOR UPDATE OF optimize for 1 row\");\n-            }\n-            // it is DB2 v82 or later\n-            else if (dict instanceof DB2Dictionary &&((((DB2Dictionary)dict).\n-                getDb2ServerType() == 3) || ((DB2Dictionary)dict)\n-                    .getDb2ServerType() == 4)) {\n-                assertEquals(1, sql.size());\n-                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                    + \" t0.floatField, t0.intField, t0.longField,\"\n-                    + \" t0.shortField, t0.stringField FROM \"\n-                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                    + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\" \n-                    + \" optimize for 1 row\");\n-            }\n-            else if (dict instanceof DB2Dictionary && ((DB2Dictionary)dict).\n-                getDb2ServerType() == 5) {\n-                assertEquals(1, sql.size());\n-                assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n-                    + \"t0.charField, t0.dateField, t0.doubleField,\"\n-                    + \" t0.floatField, t0.intField, t0.longField,\"\n-                    + \" t0.shortField, t0.stringField FROM \"\n-                    + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n-                    + \" FOR READ ONLY WITH RS USE AND KEEP EXCLUSIVE LOCKS\"\n-                    + \" optimize for 1 row\");\n+            if (dict instanceof DB2Dictionary) {\n+                if ((((DB2Dictionary)dict).getDb2ServerType() == 1)\n+                    || (((DB2Dictionary)dict).getDb2ServerType()== 2)) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR UPDATE OF optimize for 1 row\");\n+                }\n+                // it is DB2 v82 or later\n+                else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n+                    || (((DB2Dictionary)dict).getDb2ServerType() == 4)) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\" \n+                        + \" optimize for 1 row\");\n+                }\n+                else if (((DB2Dictionary)dict).getDb2ServerType() == 5) {\n+                    assertEquals(1, sql.size());\n+                    assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n+                        + \"t0.charField, t0.dateField, t0.doubleField,\"\n+                        + \" t0.floatField, t0.intField, t0.longField,\"\n+                        + \" t0.shortField, t0.stringField FROM \"\n+                        + \"AllFieldTypes t0 WHERE t0.id = \\\\? \"\n+                        + \" FOR READ ONLY WITH RS USE AND KEEP EXCLUSIVE LOCKS\"\n+                        + \" optimize for 1 row\");\n+                }    \n+                else {\n+                    fail(\"OpenJPA currently only supports per-query isolation \" \n+                        + \"level configuration on the following databases: \"\n+                        + \"DB2\");\n+                }\n             }    \n-            else if (dict instanceof DB2Dictionary) {\n-                fail(\"OpenJPA currently only supports per-query isolation \" +\n-                \"level configuration on the following databases: DB2\");\n-            }\n         } finally {\n             em.getTransaction().rollback();\n             em.close();"}]}

