{"sha":"12b4b769cc27b86edb92730786b642f20b591f3c","node_id":"MDY6Q29tbWl0MjA2MzY0OjEyYjRiNzY5Y2MyN2I4NmVkYjkyNzMwNzg2YjY0MmYyMGI1OTFmM2M=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T02:59:45Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T02:59:45Z"},"message":"OPENJPA-187 Merging changes to 1.2.x branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@681265 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98e9630856039ad52be6374dd0a62b5ebf2aa171","url":"https://api.github.com/repos/apache/openjpa/git/trees/98e9630856039ad52be6374dd0a62b5ebf2aa171"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/12b4b769cc27b86edb92730786b642f20b591f3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/12b4b769cc27b86edb92730786b642f20b591f3c","html_url":"https://github.com/apache/openjpa/commit/12b4b769cc27b86edb92730786b642f20b591f3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/12b4b769cc27b86edb92730786b642f20b591f3c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e","url":"https://api.github.com/repos/apache/openjpa/commits/bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e","html_url":"https://github.com/apache/openjpa/commit/bf04e45bfdebf1a3c77688dd1da3dc9f819e5e9e"}],"stats":{"total":394,"additions":388,"deletions":6},"files":[{"sha":"89a48eefee1bfc940d82a752fb71181746337d74","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":89,"deletions":6,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=12b4b769cc27b86edb92730786b642f20b591f3c","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.meta;\n \n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -31,6 +33,8 @@\n import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n@@ -228,12 +232,19 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n         // from other persistence contexts, so try to get sm directly from\n         // instance before asking our context\n         OpenJPAStateManager sm;\n-        if (ImplHelper.isManageable(obj))\n-            sm = (OpenJPAStateManager) (ImplHelper.toPersistenceCapable(obj,\n-                getRepository().getConfiguration()))\n-                .pcGetStateManager();\n-        else\n+        if (ImplHelper.isManageable(obj)) {\n+        \tPersistenceCapable pc = ImplHelper.toPersistenceCapable(obj,\n+                    getRepository().getConfiguration());\n+            sm = (OpenJPAStateManager) pc.pcGetStateManager();\n+            if (sm == null) {\n+            \tret = getValueFromUnmanagedInstance(obj, cols, true);\n+            } else if (sm.isDetached()) {\n+            \tobj = store.getContext().find(sm.getObjectId(), false, null);\n+            \tsm = store.getContext().getStateManager(obj);\n+            }\n+        } else {\n             sm = store.getContext().getStateManager(obj);\n+        }\n         if (sm == null)\n             return ret;\n \n@@ -247,7 +258,7 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n         }\n         return ret;\n     }\n-\n+    \n     /**\n      * Return the joinable for the given column, or throw an exception if\n      * none is available.\n@@ -979,4 +990,76 @@ private ClassStrategy assertStrategy() {\n             throw new InternalException();\n         return _strategy;\n     }\n+    \n+    /**\n+     * Find the field mappings that correspond to the given columns.\n+     * \n+     * @return null if no columns are given or no field mapping uses the given\n+     * columns.\n+     */\n+    private List<FieldMapping> getFieldMappings(Column[] cols, boolean prime) {\n+    \tif (cols == null || cols.length == 0)\n+    \t\treturn null;\n+    \tList<FieldMapping> result = null;\n+    \tfor (Column c : cols) {\n+    \t\tList<FieldMapping> fms = hasColumn(c, prime);\n+    \t\tif (fms == null) continue;\n+\t\t\tif (result == null)\n+\t\t\t\tresult = new ArrayList<FieldMapping>();\n+\t\t\tfor (FieldMapping fm : fms)\n+\t\t\t\tif (!result.contains(fm))\n+\t\t\t\t\tresult.add(fm);\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    /**\n+     * Looks up in reverse to find the list of field mappings that include the\n+     * given column. Costly.\n+     * \n+     * @return null if no field mappings carry this column. \n+     */\n+    private List<FieldMapping> hasColumn(Column c, boolean prime) {\n+    \tList<FieldMapping> result = null;\n+    \tFieldMapping[] fms = (prime) ? \n+    \t\tgetPrimaryKeyFieldMappings() : getFieldMappings();\n+    \tfor (FieldMapping fm : fms) {\n+    \t\tColumn[] cols = fm.getColumns();\n+    \t\tif (contains(cols, c)) {\n+    \t\t\tif (result == null)\n+    \t\t\t\tresult = new ArrayList<FieldMapping>();\n+    \t\t\tresult.add(fm);\n+    \t\t}\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    boolean contains(Column[] cols, Column c) {\n+    \tfor (Column col : cols)\n+    \t\tif (col == c)\n+    \t\t\treturn true;\n+    \treturn false;\n+    }\n+    \n+    /**\n+     * Gets the field values of the given instance for the given columns.\n+     * The given columns are used to identify the fields by a reverse lookup.\n+     *  \n+     * @return a single object or an array of objects based on number of \n+     * fields the given columns represent.\n+     */\n+    private Object getValueFromUnmanagedInstance(Object obj, Column[] cols, \n+    \t\tboolean prime) {\n+    \tList<FieldMapping> fms = getFieldMappings(cols, prime);\n+    \tif (fms == null)\n+    \t\treturn null;\n+    \tif (fms.size() == 1)\n+    \t\treturn Reflection.getValue(obj, fms.get(0).getName(), true);\n+    \tObject[] result = new Object[fms.size()];\n+    \tint i = 0;\n+    \tfor (FieldMapping fm : fms) {\n+    \t\tresult[i++] = Reflection.getValue(obj, fm.getName(), true);\n+    \t}\n+    \treturn result;\n+    }\n }"},{"sha":"8b578368ad881978faa631f3fefc1110242a9050","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=12b4b769cc27b86edb92730786b642f20b591f3c","patch":"@@ -220,6 +220,30 @@ public static Object get(Object target, Field field) {\n             throw wrapReflectionException(t);\n         }\n     }\n+    \n+    /**\n+     * Get the value of the given named field or a corresponding getter method.\n+     * \n+     * @return null if the field does not exist and mustExist is set to false or\n+     * the given target is null.\n+     * \n+     * @exception UserException if mustExist is true and the field or getter \n+     * method is non-existent\n+     */\n+    public static Object getValue(Object obj, String prop, boolean mustExist) {\n+    \tif (obj == null)\n+    \t\treturn null;\n+    \tClass cls = obj.getClass();\n+    \tField field = findField(cls, prop, false);\n+    \tif (field != null)\n+    \t\treturn get(obj, field);\n+    \tMethod getter = findGetter(cls, prop, false);\n+    \tif (getter != null)\n+    \t\treturn get(obj, getter);\n+        if (mustExist)\n+            throw new UserException(_loc.get(\"bad-field\", cls, prop));\n+        return null; // should not reach\n+    }\n \n     /**\n      * Make the given member accessible if it isn't already."},{"sha":"def0a03001285d8c29cb9e8d2f2c1bfc18b9faa0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","raw_url":"https://github.com/apache/openjpa/raw/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java?ref=12b4b769cc27b86edb92730786b642f20b591f3c","patch":"@@ -0,0 +1,133 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.Osoba;\r\n+import org.apache.openjpa.persistence.query.common.apps.Projekt;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests that managed, unmanaged or even transient Entity can be used as a \r\n+ * query parameter.\r\n+ * \r\n+ * Originally raised as a JIRA Issue\r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-187\">OPENJPA-187</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestNewEntityAsQueryParameter extends SingleEMFTestCase {\r\n+\t\r\n+\tpublic static final String ID_PROJEKT1 = \"OpenJPA\";\r\n+\tpublic static final String ID_PROJEKT2 = \"Tomcat\";\r\n+\t\r\n+\tpublic static final int MEMBER_COUNT_PROJEKT1 = 6;\r\n+\tpublic static final int MEMBER_COUNT_PROJEKT2 = 4;\r\n+\tpublic static final int MEMBER_COUNT_TOTAL    = 8;\r\n+\t\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Osoba.class, Projekt.class,\r\n+\t\t\t\t\"openjpa.Log\", \"SQL=TRACE\");\r\n+\t\tcreateData();\r\n+\t}\r\n+\t\r\n+\tprivate void createData() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\t\r\n+\t\tOsoba[] osoby = new Osoba[MEMBER_COUNT_TOTAL];\r\n+\t\tfor (int i=0; i<MEMBER_COUNT_TOTAL; i++) {\r\n+\t\t\tosoby[i] = new Osoba(\"Osoba-\"+(i+1), 20+i);\r\n+\t\t\tem.persist(osoby[i]);\r\n+\t\t}\r\n+\t\t\r\n+\t\t\r\n+\t\tProjekt projekt1 = new Projekt(ID_PROJEKT1);\r\n+\t\tProjekt projekt2 = new Projekt(ID_PROJEKT2);\r\n+\t\tem.persist(projekt1);\r\n+\t\tem.persist(projekt2);\r\n+\t\t\r\n+\t\tfor (int i=0; i<MEMBER_COUNT_PROJEKT1; i++)\r\n+\t\t\tlink(osoby[i], projekt1);\r\n+\t\tfor (int i=0; i<MEMBER_COUNT_PROJEKT2; i++)\r\n+\t\t\tlink(osoby[osoby.length-i-1], projekt2);\r\n+\t\t\t\t\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.clear();\r\n+\t}\r\n+\r\n+\tpublic void tearDown() throws Exception {\r\n+\t\tsuper.tearDown();\r\n+\t}\r\n+\t\r\n+\tpublic void testQueryWithTransientInstanceAsParameter() {\r\n+\t\tProjekt projekt1 = new Projekt(ID_PROJEKT1);\r\n+\t\tProjekt projekt2 = new Projekt(ID_PROJEKT2);\r\n+\t\t\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tqueryWithParameter(em, projekt1, projekt2);\r\n+\t}\r\n+\t\r\n+\tpublic void testQueryWithUnmanagedPersistentInstanceAsParameter() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tProjekt projekt1 = em.find(Projekt.class, ID_PROJEKT1);\r\n+\t\tProjekt projekt2 = em.find(Projekt.class, ID_PROJEKT2);\r\n+\t\tem.clear();\r\n+\t\tassertFalse(em.contains(projekt1));\r\n+\t\tassertFalse(em.contains(projekt2));\r\n+\t\t\r\n+\t\tqueryWithParameter(em, projekt1, projekt2);\r\n+\t}\r\n+\r\n+\tpublic void testQueryWithManagedPersistentInstanceAsParameter() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tProjekt projekt1 = em.find(Projekt.class, ID_PROJEKT1);\r\n+\t\tProjekt projekt2 = em.find(Projekt.class, ID_PROJEKT2);\r\n+\t\tassertTrue(em.contains(projekt1));\r\n+\t\tassertTrue(em.contains(projekt2));\r\n+\t\t\r\n+\t\tqueryWithParameter(em, projekt1, projekt2);\r\n+\t}\r\n+\t\r\n+\tvoid queryWithParameter(EntityManager em, Projekt projekt1, Projekt projekt2) {\r\n+\t\tString jpql = \"SELECT DISTINCT o FROM Osoba o WHERE :projekt MEMBER OF o.projekty\";\r\n+\t\tem.getTransaction().begin();\r\n+\t\tQuery query = em.createQuery(jpql);\r\n+\t\t\r\n+\t\tquery.setParameter(\"projekt\", projekt1);\r\n+\t\tList<Osoba> osoby = query.getResultList();\r\n+\t\tassertEquals(MEMBER_COUNT_PROJEKT1, osoby.size()); \r\n+\t\t\r\n+\t\tquery.setParameter(\"projekt\", projekt2);\r\n+\t\tosoby = query.getResultList();\r\n+\t\tassertEquals(MEMBER_COUNT_PROJEKT2, osoby.size());\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\tvoid link(Osoba o, Projekt p) {\r\n+\t\to.addProjekty(p);\r\n+\t\tp.addOsoba(o);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"14710cc02c7630d2b0799c5fb420718d7b00acd1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","raw_url":"https://github.com/apache/openjpa/raw/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java?ref=12b4b769cc27b86edb92730786b642f20b591f3c","patch":"@@ -0,0 +1,80 @@\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+@Entity\r\n+public class Osoba {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\tprivate int age;\r\n+\t\r\n+\tprotected Osoba() {\r\n+\t\tthis(\"?\", 0);\r\n+\t}\r\n+\t\r\n+\tpublic Osoba(String name, int age) {\r\n+\t\tsuper();\r\n+\t\tthis.name = name;\r\n+\t\tthis.age = age;\r\n+\t}\r\n+\t\r\n+\t@ManyToMany\r\n+\tprivate List<Projekt> projekty;\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic List<Projekt> getProjekty() {\r\n+\t\treturn projekty;\r\n+\t}\r\n+\t\r\n+\tpublic void addProjekty(Projekt projekt) {\r\n+\t\tif (projekty == null)\r\n+\t\t\tprojekty = new ArrayList<Projekt>();\r\n+\t\tprojekty.add(projekt);\r\n+\t}\r\n+\t\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic int getAge() {\r\n+\t\treturn age;\r\n+\t}\r\n+\t\r\n+\tpublic void setAge(int age) {\r\n+\t\tthis.age = age;\r\n+\t}\r\n+}\r"},{"sha":"ae5edf61735b4c58e97a7069f186fde767291e22","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","raw_url":"https://github.com/apache/openjpa/raw/12b4b769cc27b86edb92730786b642f20b591f3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java?ref=12b4b769cc27b86edb92730786b642f20b591f3c","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+\r\n+@Entity\r\n+public class Projekt {\r\n+\t@Id\r\n+\tprivate String name;\r\n+\t\r\n+\t@ManyToMany\r\n+\tprivate List<Osoba> osoby;\r\n+\r\n+\tprotected Projekt() {\r\n+\t\tthis(\"?\");\r\n+\t}\r\n+\t\r\n+\tpublic Projekt(String name) {\r\n+\t\tsuper();\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic List<Osoba> getOsoby() {\r\n+\t\treturn osoby;\r\n+\t}\r\n+\r\n+\tpublic void addOsoba(Osoba osoba) {\r\n+\t\tif (osoby ==null)\r\n+\t\t\tosoby = new ArrayList<Osoba>();\r\n+\t\tosoby.add(osoba);\r\n+\t}\t\r\n+}\r"}]}

