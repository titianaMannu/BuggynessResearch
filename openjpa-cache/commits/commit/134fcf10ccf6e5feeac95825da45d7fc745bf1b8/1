{"sha":"134fcf10ccf6e5feeac95825da45d7fc745bf1b8","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzNGZjZjEwY2NmNmU1ZmVlYWM5NTgyNWRhNDVkN2ZjNzQ1YmYxYjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:57:05Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:57:05Z"},"message":"OPENJPA-369\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577877 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c1184648e62637cd9b7842a6153f9004c62e11ce","url":"https://api.github.com/repos/apache/openjpa/git/trees/c1184648e62637cd9b7842a6153f9004c62e11ce"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/134fcf10ccf6e5feeac95825da45d7fc745bf1b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/134fcf10ccf6e5feeac95825da45d7fc745bf1b8","html_url":"https://github.com/apache/openjpa/commit/134fcf10ccf6e5feeac95825da45d7fc745bf1b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b6af06b64f9126fdcfb5afae95cd05bbf89bc421","url":"https://api.github.com/repos/apache/openjpa/commits/b6af06b64f9126fdcfb5afae95cd05bbf89bc421","html_url":"https://github.com/apache/openjpa/commit/b6af06b64f9126fdcfb5afae95cd05bbf89bc421"}],"stats":{"total":158,"additions":128,"deletions":30},"files":[{"sha":"38b194abafa63ae95d18710a6aec01f4c2fb7f51","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=134fcf10ccf6e5feeac95825da45d7fc745bf1b8","patch":"@@ -99,10 +99,9 @@ public synchronized void scheduleEviction(DataCache cache, String times) {\n         _caches.put(cache, schedule);\n         _stop = false;\n         if (_thread == null) {\n-            _thread = (Thread) AccessController\n-                .doPrivileged(J2DoPrivHelper.newThreadAction(this, _loc.get(\n-                    \"scheduler-name\").getMessage()));\n-            _thread.setDaemon(true);\n+            _thread = (Thread) AccessController.doPrivileged(J2DoPrivHelper\n+                .newDaemonThreadAction(this, _loc.get(\"scheduler-name\")\n+                    .getMessage()));\n             _thread.start();\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"scheduler-start\", _thread.getName()));"},{"sha":"3911785788dede4ad36e322ad8250807a6a575c6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":63,"deletions":2,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=134fcf10ccf6e5feeac95825da45d7fc745bf1b8","patch":"@@ -24,6 +24,7 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.lang.reflect.AccessibleObject;\n+import java.lang.reflect.AnnotatedElement;\n import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.ServerSocket;\n@@ -48,6 +49,9 @@\n  * methods:\n  * <ul>\n  * <li>AccessibleObject.setAccessible\n+ * <li>AnnotatedElement.getAnnotations\n+ * <li>AnnotatedElement.getDeclaredAnnotations\n+ * <li>AnnotatedElement.isAnnotationPresent\n  * <li>Class.forName\n  * <li>Class.getClassLoader\n  * <li>Class.getDeclaredField\n@@ -324,6 +328,60 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegeAction object for AnnotatedElement.getAnnotations().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     * \n+     * @return Annotation[]\n+     */\n+    public static final PrivilegedAction getAnnotationsAction(\n+        final AnnotatedElement element) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return element.getAnnotations();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for \n+     *   AnnotatedElement.getDeclaredAnnotations().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     * \n+     * @return Annotation[]\n+     */\n+    public static final PrivilegedAction getDeclaredAnnotationsAction(\n+        final AnnotatedElement element) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return element.getDeclaredAnnotations();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for\n+     *   AnnotatedElement.isAnnotationPresent().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     * \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction isAnnotationPresentAction(\n+        final AnnotatedElement element, final Class annotationClazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return element.isAnnotationPresent(annotationClazz)\n+                    ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegedExceptionAction object for clazz.newInstance().\n      * \n@@ -794,14 +852,17 @@ public Object run() {\n      * \n      * Requires security policy:\n      *   'permission java.lang.RuntimePermission \"modifyThreadGroup\";'\n+     *   'permission java.lang.RuntimePermission \"modifyThread\";'\n      * \n      * @return Thread\n      */\n-    public static final PrivilegedAction newThreadAction(\n+    public static final PrivilegedAction newDaemonThreadAction(\n         final Runnable target, final String name) {\n         return new PrivilegedAction() {\n             public Object run() {\n-                return new Thread(target, name);\n+                Thread thread = new Thread(target, name);\n+                thread.setDaemon(true);\n+                return thread;\n             }\n         };\n     }"},{"sha":"747c9fdb364fa02ef42539820d97702163804373","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=134fcf10ccf6e5feeac95825da45d7fc745bf1b8","patch":"@@ -21,6 +21,7 @@\n import java.lang.annotation.Annotation;\n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n import java.sql.Types;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -74,6 +75,7 @@\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -1058,7 +1060,9 @@ protected void parseColumns(FieldMapping fm,\n             \n             if (xmlTypeClass != null\n                 && StringUtils.isEmpty(pcols[i].columnDefinition())\n-                && fm.getDeclaredType().isAnnotationPresent(xmlTypeClass)) {\n+                && ((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    .isAnnotationPresentAction(fm.getDeclaredType(),\n+                        xmlTypeClass))).booleanValue()) {\n                 DBDictionary dict = ((MappingRepository) getRepository())\n                     .getDBDictionary();\n                 if (dict.supportsXMLColumn)"},{"sha":"60834deea7f3cda016cb3e8261253166a2a3b21c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=134fcf10ccf6e5feeac95825da45d7fc745bf1b8","patch":"@@ -465,9 +465,14 @@ private ClassMetaData parseClassAnnotations() {\n         // check immediately whether the user is using any annotations,\n         // regardless of mode.  this prevents adding non-entity classes to\n         // repository if we're ignoring these annotations in mapping mode\n-        if (!_cls.isAnnotationPresent(Entity.class)\n-            && !_cls.isAnnotationPresent(Embeddable.class)\n-            && !_cls.isAnnotationPresent(MappedSuperclass.class))\n+        if (!((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            .isAnnotationPresentAction(_cls, Entity.class))).booleanValue()\n+            && !((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(_cls, Embeddable.class)))\n+                .booleanValue()\n+            && !((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(_cls, MappedSuperclass.class)))\n+                .booleanValue())\n             return null;\n \n         // find / create metadata\n@@ -762,7 +767,9 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n                 J2DoPrivHelper.getDeclaredFieldsAction(\n                     meta.getDescribedType())); \n             for (int i = 0; i < fields.length; i++)\n-                if (fields[i].isAnnotationPresent(DetachedState.class))\n+                if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    .isAnnotationPresentAction(fields[i], DetachedState.class)))\n+                    .booleanValue())\n                     meta.setDetachedState(fields[i].getName());\n         }\n     }\n@@ -818,7 +825,8 @@ else if (StringUtils.isEmpty(detached.fieldName()))\n \n         MetaDataDefaults def = repos.getMetaDataFactory().getDefaults();\n         for (Method m : methods) {\n-            for (Annotation anno : m.getDeclaredAnnotations()) {\n+            for (Annotation anno : (Annotation[]) AccessController\n+                .doPrivileged(J2DoPrivHelper.getDeclaredAnnotationsAction(m))) {\n                 MetaDataTag tag = _tags.get(anno.annotationType());\n                 if (tag == null)\n                     continue;\n@@ -956,7 +964,8 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n         fmd.setExplicit(true);\n \n         AnnotatedElement el = (AnnotatedElement) member;\n-        boolean lob = el.isAnnotationPresent(Lob.class);\n+        boolean lob = ((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            .isAnnotationPresentAction(el, Lob.class))).booleanValue();\n         if (isMetaDataMode()) {\n             switch (pstrat) {\n                 case BASIC:"},{"sha":"845bcc05bb87d5ba52f793945a4ce80e9e0d1c23","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=134fcf10ccf6e5feeac95825da45d7fc745bf1b8","patch":"@@ -22,10 +22,12 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n+import java.security.AccessController;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -171,8 +173,11 @@ public void parse(FieldMetaData fmd) {\n     private XMLMetaData parseXMLClassAnnotations() {\n         // check immediately whether the class has JAXB XML annotations\n         if (_cls == null || xmlTypeClass == null\n-            || !(_cls.isAnnotationPresent(xmlTypeClass)\n-                && _cls.isAnnotationPresent(xmlRootElementClass)))\n+            || !(((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(_cls, xmlTypeClass))).booleanValue()\n+                && ((Boolean) AccessController\n+                .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls,\n+                    xmlRootElementClass))).booleanValue()))\n             return null;\n \n         // find / create metadata\n@@ -220,7 +225,9 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n         Class superclass = cls.getSuperclass();\n \n         // handle inheritance at sub-element level\n-        if (superclass.isAnnotationPresent(xmlTypeClass))\n+        if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            .isAnnotationPresentAction(superclass, xmlTypeClass)))\n+            .booleanValue())\n             populateFromReflection(superclass, meta);\n \n         try {\n@@ -240,8 +247,9 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n                     // avoid JAXB XML bind default name\n                     if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n                         xmlname = member.getName();\n-                    if (((Field) member).getType()\n-                        .isAnnotationPresent(xmlTypeClass)) {\n+                    if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                        .isAnnotationPresentAction(((Field) member).getType(),\n+                            xmlTypeClass))).booleanValue()) {\n                         field = _repos.addXMLMetaData(((Field) member).getType()\n                             , member.getName());\n                         parseXmlRootElement(((Field) member).getType(), field);"},{"sha":"cba14fbfc6e1a9acc73d56373fa8a6eabd534730","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=134fcf10ccf6e5feeac95825da45d7fc745bf1b8","patch":"@@ -116,7 +116,8 @@ public PersistenceMetaDataDefaults() {\n         if (member == null)\n             return null;\n         AnnotatedElement el = (AnnotatedElement) member;\n-        if (el.isAnnotationPresent(Transient.class))\n+        if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            .isAnnotationPresentAction(el, Transient.class))).booleanValue())\n             return TRANSIENT;\n         if (fmd != null\n             && fmd.getManagement() != FieldMetaData.MANAGE_PERSISTENT)\n@@ -182,7 +183,8 @@ public PersistenceMetaDataDefaults() {\n         }\n \n         //### EJB3: what if defined in XML?\n-        if (type.isAnnotationPresent(Embeddable.class))\n+        if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            .isAnnotationPresentAction(type, Embeddable.class))).booleanValue())\n             return EMBEDDED;\n         if (Serializable.class.isAssignableFrom(type))\n             return BASIC;\n@@ -271,7 +273,8 @@ private static boolean usesAccess(AnnotatedElement[] members) {\n         Annotation[] annos;\n         String name;\n         for (int i = 0; i < members.length; i++) {\n-            annos = members[i].getAnnotations();\n+            annos = (Annotation[]) AccessController.doPrivileged(J2DoPrivHelper\n+                .getAnnotationsAction(members[i]));\n             for (int j = 0; j < annos.length; j++) {\n                 name = annos[j].annotationType().getName();\n                 if ((name.startsWith(\"javax.persistence.\")\n@@ -317,7 +320,9 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n \n     private boolean isAnnotatedTransient(Member member) {\n         return member instanceof AnnotatedElement\n-            && ((AnnotatedElement) member).isAnnotationPresent(Transient.class);\n+            && ((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(((AnnotatedElement) member),\n+                    Transient.class))).booleanValue();\n     }\n \n     private void logNoSetter(ClassMetaData meta, String name, Exception e) {"},{"sha":"665aea56c571d5d5d71a2708ccae5cf492ece854","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":20,"deletions":8,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/134fcf10ccf6e5feeac95825da45d7fc745bf1b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=134fcf10ccf6e5feeac95825da45d7fc745bf1b8","patch":"@@ -293,18 +293,26 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n             return null;\n         Collection classes = repos.loadPersistentTypes(false, loader);\n         for (Class cls : (Collection<Class>) classes) {\n-            if (cls.isAnnotationPresent(NamedQuery.class) && hasNamedQuery\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(cls, NamedQuery.class)))\n+                .booleanValue() && hasNamedQuery\n                 (queryName, (NamedQuery) cls.getAnnotation(NamedQuery.class)))\n                 return cls;\n-            if (cls.isAnnotationPresent(NamedQueries.class) &&\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(cls, NamedQueries.class)))\n+                .booleanValue() &&\n                 hasNamedQuery(queryName, ((NamedQueries) cls.\n                     getAnnotation(NamedQueries.class)).value()))\n                 return cls;\n-            if (cls.isAnnotationPresent(NamedNativeQuery.class) &&\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(cls, NamedNativeQuery.class)))\n+                .booleanValue() &&\n                 hasNamedNativeQuery(queryName, (NamedNativeQuery) cls.\n                     getAnnotation(NamedNativeQuery.class)))\n                 return cls;\n-            if (cls.isAnnotationPresent(NamedNativeQueries.class) &&\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(cls, NamedNativeQueries.class)))\n+                .booleanValue() &&\n                 hasNamedNativeQuery(queryName, ((NamedNativeQueries) cls.\n                     getAnnotation(NamedNativeQueries.class)).value()))\n                 return cls;\n@@ -320,13 +328,17 @@ public Class getResultSetMappingScope(String rsMappingName,\n         \n         Collection classes = repos.loadPersistentTypes(false, loader);\n         for (Class cls : (Collection<Class>) classes) {\n-            \n-            if (cls.isAnnotationPresent(SqlResultSetMapping.class) && \n+\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(cls, SqlResultSetMapping.class)))\n+                .booleanValue() &&\n                 hasRSMapping(rsMappingName, (SqlResultSetMapping) cls.\n                 getAnnotation(SqlResultSetMapping.class)))\n                 return cls;\n-            \n-            if (cls.isAnnotationPresent(SqlResultSetMappings.class) && \n+\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isAnnotationPresentAction(cls, SqlResultSetMappings.class)))\n+                .booleanValue() &&\n                 hasRSMapping(rsMappingName, ((SqlResultSetMappings) cls.\n                 getAnnotation(SqlResultSetMappings.class)).value()))\n                 return cls;"}]}

