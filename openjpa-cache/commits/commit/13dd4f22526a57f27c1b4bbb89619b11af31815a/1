{"sha":"13dd4f22526a57f27c1b4bbb89619b11af31815a","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzZGQ0ZjIyNTI2YTU3ZjI3YzFiNGJiYjg5NjE5YjExYWYzMTgxNWE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T18:15:09Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-23T18:15:09Z"},"message":"Improve error message when checking metadata access types; correct recursive method to always include superclass information.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614606 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b7772a5d6a9bce4d3cc38109b139e63b16818952","url":"https://api.github.com/repos/apache/openjpa/git/trees/b7772a5d6a9bce4d3cc38109b139e63b16818952"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/13dd4f22526a57f27c1b4bbb89619b11af31815a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/13dd4f22526a57f27c1b4bbb89619b11af31815a","html_url":"https://github.com/apache/openjpa/commit/13dd4f22526a57f27c1b4bbb89619b11af31815a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/13dd4f22526a57f27c1b4bbb89619b11af31815a/comments","author":null,"committer":null,"parents":[{"sha":"3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04","url":"https://api.github.com/repos/apache/openjpa/commits/3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04","html_url":"https://github.com/apache/openjpa/commit/3aa60007ddf8ead90b2fa5aa4c44f731dfa86e04"}],"stats":{"total":204,"additions":192,"deletions":12},"files":[{"sha":"5a7a5eba0e57866ca04a7452f83d0c6ede4b4cfe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":40,"deletions":3,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=13dd4f22526a57f27c1b4bbb89619b11af31815a","patch":"@@ -24,6 +24,7 @@\n import java.lang.reflect.Modifier;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n+import java.util.List;\n \n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.Reflection;\n@@ -153,9 +154,17 @@ public void populate(ClassMetaData meta, int access) {\n             // the same time\n             access = getAccessType(meta);\n             if ((access & ClassMetaData.ACCESS_FIELD) != 0\n-                && (access & ClassMetaData.ACCESS_PROPERTY) != 0)\n-                throw new UserException(_loc.get(\"access-field-and-prop\",\n-                    meta.getDescribedType().getName()));\n+                && (access & ClassMetaData.ACCESS_PROPERTY) != 0) {\n+                List fields = getFieldAccessNames(meta);\n+                List props = getPropertyAccessNames(meta);\n+                if (fields != null || props != null)\n+                    throw new UserException(_loc.get(\n+                        \"access-field-and-prop-hints\",\n+                        meta.getDescribedType().getName(), fields, props));\n+                else\n+                    throw new UserException(_loc.get(\"access-field-and-prop\",\n+                        meta.getDescribedType().getName()));\n+            }\n         }\n         meta.setAccessType(access);\n \n@@ -263,6 +272,34 @@ protected int getAccessType(ClassMetaData meta) {\n         return ClassMetaData.ACCESS_FIELD;\n     }\n \n+    /**\n+     * Return the list of fields in <code>meta</code> that use field access,\n+     * or <code>null</code> if a list of fields is unobtainable. An empty list\n+     * should be returned if the list of fields is obtainable, but there\n+     * happens to be no field access in <code>meta</code>.\n+     *\n+     * This is used for error reporting purposes only, so need not be efficient.\n+     *\n+     * This implementation returns <code>null</code>.\n+     */\n+    protected List getFieldAccessNames(ClassMetaData meta) {\n+        return null;\n+    }\n+\n+    /**\n+     * Return the list of methods in <code>meta</code> that use property access,\n+     * or <code>null</code> if a list of methods is unobtainable. An empty list\n+     * should be returned if the list of methods is obtainable, but there\n+     * happens to be no property access in <code>meta</code>.\n+     *\n+     * This is used for error reporting purposes only, so need not be efficient.\n+     *\n+     * This implementation returns <code>null</code>.\n+     */\n+    protected List getPropertyAccessNames(ClassMetaData meta) {\n+        return null;\n+    }\n+\n     /**\n      * Return the field name for the given member. This will only be invoked\n      * on members of the right type (field vs. method). Return null if the"},{"sha":"d5100131aa68de4f1b70be49cd462dd2e0d430ea","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=13dd4f22526a57f27c1b4bbb89619b11af31815a","patch":"@@ -267,6 +267,10 @@ lifecycle-resolved: Could add the following callback adapters to \"{0}\", as \\\n \tthe lifecycle metadata is already resolved: {1}\n access-field-and-prop: Type \"{0}\" attempts to use both field and property \\\n \taccess. Only one access method is permitted.\n+access-field-and-prop-hints: Type \"{0}\" attempts to use both field and \\\n+\tproperty access. Only one access method is permitted. Field access is used \\\n+    on the following fields: {1}. Property access is used on the following \\\n+    methods: {2}.\n unsupported-id-type: Type \"{0}\" declares field \"{1}\" as a primary key, but \\\n \tkeys of type \"{2}\" are not supported.\n empty-fg-name: Attempt to add an unnamed fetch group to \"{0}\"."},{"sha":"af8cf486da9be6a9682abc0738c1f8503826c821","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java?ref=13dd4f22526a57f27c1b4bbb89619b11af31815a","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.PersistenceException;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n+\r\n+public class TestMixedAccess extends PersistenceTestCase {\r\n+\r\n+    public void testMixedAccessEntityError() {\r\n+        try {\r\n+            EntityManagerFactory emf = createEMF(UnenhancedMixedAccess.class);\r\n+            emf.createEntityManager().close();\r\n+        } catch (RuntimeException e) {\r\n+            String msg = e.getMessage();\r\n+            if (!(msg.contains(\"UnenhancedMixedAccess.id\") &&\r\n+                msg.contains(\"UnenhancedMixedAccess.getStringField\")))\r\n+                throw e;\r\n+        }\r\n+    }\r\n+\r\n+    public void testInappropriateTransientError() {\r\n+        try {\r\n+            EntityManagerFactory emf = createEMF(\r\n+                UnenhancedInappropriateTransient.class);\r\n+            emf.createEntityManager().close();\r\n+         } catch (RuntimeException e) {\r\n+            String msg = e.getMessage();\r\n+            if (!(msg.contains(\"UnenhancedInappropriateTransient.id\") &&\r\n+                msg.contains(\"UnenhancedInappropriateTransient.prePersist\")))\r\n+                throw e;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"14c34ef89d631cf17458280c5d9e0773fc624839","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","raw_url":"https://github.com/apache/openjpa/raw/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java?ref=13dd4f22526a57f27c1b4bbb89619b11af31815a","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Transient;\r\n+import javax.persistence.PrePersist;\r\n+\r\n+@Entity\r\n+public class UnenhancedInappropriateTransient {\r\n+\r\n+    @Id private int id;\r\n+\r\n+    @Transient @PrePersist public void prePersist() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"b1a9752abf62d36849068462fcfb1d7e66da3674","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java?ref=13dd4f22526a57f27c1b4bbb89619b11af31815a","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Transient;\r\n+\r\n+@Entity\r\n+public class UnenhancedMixedAccess {\r\n+\r\n+    @Id private int id;\r\n+\r\n+    @Transient public String getStringField() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    public void setStringField(String str) {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+}\r"},{"sha":"dbbc4bb7fa6355e9bff9c6b698238335bafdc831","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/13dd4f22526a57f27c1b4bbb89619b11af31815a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=13dd4f22526a57f27c1b4bbb89619b11af31815a","patch":"@@ -30,6 +30,8 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.List;\n+import java.util.ArrayList;\n import javax.persistence.Basic;\n import javax.persistence.Embeddable;\n import javax.persistence.Embedded;\n@@ -257,22 +259,36 @@ private int getAccessType(Class cls) {\n             return ClassMetaData.ACCESS_UNKNOWN;\n \n         int access = 0;\n-        if (usesAccess((Field[]) AccessController.doPrivileged(\n-            J2DoPriv5Helper.getDeclaredFieldsAction(cls))))\n+        if (annotated((Field[]) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getDeclaredFieldsAction(cls))).size() > 0)\n             access |= ClassMetaData.ACCESS_FIELD;\n-        if (usesAccess((Method[]) AccessController.doPrivileged(\n-            J2DoPriv5Helper.getDeclaredMethodsAction(cls)))\n+        if (annotated((Method[]) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getDeclaredMethodsAction(cls))).size() > 0\n             || cls.isInterface()) // OpenJPA managed ifaces must use prop access\n             access |= ClassMetaData.ACCESS_PROPERTY;\n-        return (access == 0) ? getAccessType(cls.getSuperclass()) : access;\n+        return getAccessType(cls.getSuperclass()) | access;\n+    }\n+\n+    @Override\n+    protected List getFieldAccessNames(ClassMetaData meta) {\n+        return annotated((Field[]) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getDeclaredFieldsAction(meta.getDescribedType())));\n+    }\n+\n+    @Override\n+    protected List getPropertyAccessNames(ClassMetaData meta) {\n+        return annotated((Method[]) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getDeclaredMethodsAction(meta.getDescribedType())));\n     }\n \n     /**\n-     * Return whether the given members have persistence annotations.\n+     * Return the members of <code>members</code> that have persistence\n+     * annotations.\n      */\n-    private static boolean usesAccess(AnnotatedElement[] members) {\n+    private static List annotated(AnnotatedElement[] members) {\n         Annotation[] annos;\n         String name;\n+        List annotated = new ArrayList(members.length);\n         for (int i = 0; i < members.length; i++) {\n             annos = (Annotation[]) AccessController.doPrivileged(J2DoPriv5Helper\n                 .getAnnotationsAction(members[i]));\n@@ -281,10 +297,10 @@ private static boolean usesAccess(AnnotatedElement[] members) {\n                 if ((name.startsWith(\"javax.persistence.\")\n                     || name.startsWith(\"org.apache.openjpa.persistence.\"))\n                     && !_ignoredAnnos.contains(name))\n-                    return true;\n+                    annotated.add(members[i]);\n             }\n         }\n-        return false;\n+        return annotated;\n     }\n \n     protected boolean isDefaultPersistent(ClassMetaData meta, Member member,"}]}

