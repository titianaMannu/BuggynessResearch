{"sha":"13e3c48caea0c7c8125b72f398f6443ce231902f","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzZTNjNDhjYWVhMGM3YzgxMjViNzJmMzk4ZjY0NDNjZTIzMTkwMmY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-18T23:52:33Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-18T23:52:33Z"},"message":"OPENJPA-1580: disable query cache when pagination is involved.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925048 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8bbaf0d2912949079c31b44dc160a00efd23d05c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8bbaf0d2912949079c31b44dc160a00efd23d05c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/13e3c48caea0c7c8125b72f398f6443ce231902f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/13e3c48caea0c7c8125b72f398f6443ce231902f","html_url":"https://github.com/apache/openjpa/commit/13e3c48caea0c7c8125b72f398f6443ce231902f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/13e3c48caea0c7c8125b72f398f6443ce231902f/comments","author":null,"committer":null,"parents":[{"sha":"15c64cb8f4db54346a10cc5c9183b3343db5c0b5","url":"https://api.github.com/repos/apache/openjpa/commits/15c64cb8f4db54346a10cc5c9183b3343db5c0b5","html_url":"https://github.com/apache/openjpa/commit/15c64cb8f4db54346a10cc5c9183b3343db5c0b5"}],"stats":{"total":40,"additions":37,"deletions":3},"files":[{"sha":"558e8569e4fbac7165d0f9827242a3a5dc74e9eb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/13e3c48caea0c7c8125b72f398f6443ce231902f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/13e3c48caea0c7c8125b72f398f6443ce231902f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=13e3c48caea0c7c8125b72f398f6443ce231902f","patch":"@@ -178,10 +178,14 @@ public Exclusion initialize(Object result) {\n         SQLBuffer buffer = selector.getSQL();\n         if (buffer == null)\n             return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-sql\", _id).getMessage());;\n-        boolean useFieldStrategy = isUsingFieldStrategy(); \n-        if (useFieldStrategy)\n+        if (isUsingFieldStrategy())\n             return new PreparedQueryCacheImpl.StrongExclusion(_id, \n                 _loc.get(\"exclude-user-strategy\", _id).getMessage());;\n+                \n+        if (isPaginated())\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, \n+                _loc.get(\"exclude-pagination\", _id).getMessage());;\n+\n         setTargetQuery(buffer.getSQL());\n         setParameters(buffer.getParameters());\n         setUserParameterPositions(buffer.getUserParameters());\n@@ -259,6 +263,14 @@ private boolean isUsingExternalizedParameter(QueryExpressions exp) {\n         return false;\n     }\n     \n+    private boolean isPaginated() {\n+        if (select instanceof SelectImpl) {\n+            if (((SelectImpl)select).getStartIndex() != 0 || \n+                ((SelectImpl)select).getEndIndex() != Long.MAX_VALUE)\n+                return true;\n+        }\n+        return false;\n+    }        \n     private boolean isUsingFieldStrategy() {\n         for (int i = 0; i < _exps.length; i++) {\n             if (isUsingFieldStrategy(_exps[i])) {"},{"sha":"5bb99f68a6e8c03380a31175ed03dc69bc875e15","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/13e3c48caea0c7c8125b72f398f6443ce231902f/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/13e3c48caea0c7c8125b72f398f6443ce231902f/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=13e3c48caea0c7c8125b72f398f6443ce231902f","patch":"@@ -168,4 +168,6 @@ exclude-not-executor: Query \"{0}\" is not cached because it was not executed on a\n exclude-externalized-param: Query \"{0}\" is not cached because some parameterized \\\n     field values are externalized.  \n exclude-user-strategy: This query \"{0}\" is not cached because some parameterized \\\n-    field value depends on user-defined field strategy.        \n\\ No newline at end of file\n+    field value depends on user-defined field strategy.        \n+exclude-pagination: This query \"{0}\" involves pagination and is not cached.\n+      \n\\ No newline at end of file"},{"sha":"c65b0fa2c568e6e6bc048932e57a5ddcab952ca2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/13e3c48caea0c7c8125b72f398f6443ce231902f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/13e3c48caea0c7c8125b72f398f6443ce231902f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=13e3c48caea0c7c8125b72f398f6443ce231902f","patch":"@@ -974,7 +974,27 @@ public void testPartiallyRepeatedParameterInMainquery() {\n         em.getTransaction().rollback();\n     }\n \n+    public void testRangeIsExcluded() {\n+        List<Company> l = null;\n \n+        l = getAllCompaniesPaged(0, 1);\n+        assertEquals(1, l.size());\n+        assertEquals(\"acme.org\", l.get(0).getName());\n+        l = getAllCompaniesPaged(1, 1);\n+        assertEquals(1, l.size());\n+        assertEquals(\"BEA\", l.get(0).getName());\n+        l = getAllCompaniesPaged(2, 1);\n+        assertEquals(1, l.size());\n+        assertEquals(\"IBM\", l.get(0).getName());\n+    }\n+\n+    public List<Company> getAllCompaniesPaged(int start, int max) {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select p from Company p order by p.name\");\n+        q.setFirstResult(start);\n+        q.setMaxResults(max);\n+        return (List<Company>) q.getResultList();\n+    }\n     \n     PreparedQueryCache getPreparedQueryCache() {\n         return emf.getConfiguration().getQuerySQLCacheInstance();"}]}

