{"sha":"13e48971736a7727f65293895c175ef992c30d1e","node_id":"MDY6Q29tbWl0MjA2MzY0OjEzZTQ4OTcxNzM2YTc3MjdmNjUyOTM4OTVjMTc1ZWY5OTJjMzBkMWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T20:26:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T20:26:48Z"},"message":"OPENJPA-647: Change cardinality of listeners for Value update so that ClassMetaData (and others) can sync with dynamic configuration changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673484 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"465052863e75e9dbc1e80ece643b1b90ef23bdf0","url":"https://api.github.com/repos/apache/openjpa/git/trees/465052863e75e9dbc1e80ece643b1b90ef23bdf0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/13e48971736a7727f65293895c175ef992c30d1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/13e48971736a7727f65293895c175ef992c30d1e","html_url":"https://github.com/apache/openjpa/commit/13e48971736a7727f65293895c175ef992c30d1e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/13e48971736a7727f65293895c175ef992c30d1e/comments","author":null,"committer":null,"parents":[{"sha":"50aaa9764abc4c606488b1c0493403a351b6a26a","url":"https://api.github.com/repos/apache/openjpa/commits/50aaa9764abc4c606488b1c0493403a351b6a26a","html_url":"https://github.com/apache/openjpa/commit/50aaa9764abc4c606488b1c0493403a351b6a26a"}],"stats":{"total":51,"additions":38,"deletions":13},"files":[{"sha":"ff281018388d031b17ea3a43b71a659ad610341d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/13e48971736a7727f65293895c175ef992c30d1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/13e48971736a7727f65293895c175ef992c30d1e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=13e48971736a7727f65293895c175ef992c30d1e","patch":"@@ -2363,7 +2363,7 @@ public void registerForValueUpdate(String...values) {\n     \t\tValue value = getRepository().getConfiguration()\n     \t\t\t.getValue(key);\n     \t\tif (value != null)\n-    \t\t\tvalue.setListener(this);\n+    \t\t\tvalue.addListener(this);\n     \t}\n     }\n     "},{"sha":"9cddb36180d30ef9fb6c78dfe2601b3c4020e21f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/13e48971736a7727f65293895c175ef992c30d1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/13e48971736a7727f65293895c175ef992c30d1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=13e48971736a7727f65293895c175ef992c30d1e","patch":"@@ -912,13 +912,13 @@ public Object clone() {\n     public boolean removeValue(Value val) {\n         if (!_vals.remove(val))\n             return false;\n-        val.setListener(null);\n+        val.removeListener(this);\n         return true;\n     }\n \n     public Value addValue(Value val) {\n         _vals.add(val);\n-        val.setListener(this);\n+        val.addListener(this);\n         return val;\n     }\n "},{"sha":"36c7cdc32c0385654fbca122a698cde326807ff9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":35,"deletions":10,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/13e48971736a7727f65293895c175ef992c30d1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/13e48971736a7727f65293895c175ef992c30d1e/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=13e48971736a7727f65293895c175ef992c30d1e","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n@@ -41,7 +44,7 @@\n     private String def = null;\n     private String[] aliases = null;\n     private String getter = null;\n-    private ValueListener listen = null;\n+    private List<ValueListener> listeners = null;\n     private boolean aliasListComprehensive = false;\n     private Class scope = null;\n     private boolean isDynamic = false;\n@@ -368,25 +371,37 @@ boolean isDefault(Object val) {\n     protected abstract void setInternalObject(Object obj);\n \n     /**\n-     * Listener for value changes.\n+     * Gets unmodifable list of listeners for value changes.\n      */\n-    public ValueListener getListener() {\n-        return this.listen;\n+    public List<ValueListener> getListeners() {\n+        return Collections.unmodifiableList(this.listeners);\n     }\n \n     /**\n      * Listener for value changes.\n      */\n-    public void setListener(ValueListener listen) {\n-        this.listen = listen;\n+    public void addListener(ValueListener listener) {\n+    \tif (listener == null)\n+    \t\treturn;\n+    \tif (listeners == null)\n+    \t\tlisteners = new ArrayList<ValueListener>();\n+        listeners.add(listener);\n+    }\n+    \n+    public void removeListener(ValueListener listener) {\n+    \tif (listener == null)\n+    \t\treturn;\n+        listeners.remove(listener);\n     }\n \n     /**\n      * Subclasses should call this method when their internal value changes.\n      */\n     public void valueChanged() {\n-        if (listen != null) {\n-        \tlisten.valueChanged(this);\n+        if (listeners == null) \n+        \treturn;\n+        for (ValueListener listener : listeners) {\n+        \tlistener.valueChanged(this);\n         }\n     }\n     \n@@ -401,13 +416,23 @@ public void valueChanged() {\n      * <LI>Configuration is read-only\n      */\n     protected void assertChangeable() {\n-    \tif (!isDynamic() && listen instanceof Configuration && \n-        \t((Configuration)listen).isReadOnly()) {\n+    \tif (!isDynamic() && containsReadOnlyConfigurationAsListener()) {\n         \tthrow new RuntimeException(s_loc.get(\"veto-change\",\n         \t\tthis.getProperty()).toString());\n        \t}\n     }\n     \n+    boolean containsReadOnlyConfigurationAsListener() {\n+    \tif (listeners == null)\n+    \t\treturn false;\n+    \tfor (ValueListener listener : listeners) {\n+    \t\tif (listener instanceof Configuration\n+    \t\t&& ((Configuration)listener).isReadOnly())\n+    \t\t\treturn true;\n+    \t}\n+    \treturn false;\n+    }\n+    \n     /**\n      * Sets if this receiver can be mutated even when the configuration it \n      * belongs to has been {@link Configuration#isReadOnly() frozen}."}]}

