{"sha":"148db96a8cea463537ffa4a530694e45de5820bf","node_id":"MDY6Q29tbWl0MjA2MzY0OjE0OGRiOTZhOGNlYTQ2MzUzN2ZmYTRhNTMwNjk0ZTQ1ZGU1ODIwYmY=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-20T04:11:05Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-03-20T04:11:05Z"},"message":"OPENJPA-1585: Additional trace helps users to relate query or entity actions to SQL pushdowns\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925540 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec0b11aec866ae6baaa776598bd28190aff62d0d","url":"https://api.github.com/repos/apache/openjpa/git/trees/ec0b11aec866ae6baaa776598bd28190aff62d0d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/148db96a8cea463537ffa4a530694e45de5820bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/148db96a8cea463537ffa4a530694e45de5820bf","html_url":"https://github.com/apache/openjpa/commit/148db96a8cea463537ffa4a530694e45de5820bf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/148db96a8cea463537ffa4a530694e45de5820bf/comments","author":null,"committer":null,"parents":[{"sha":"1b9d80003a2ef71cdba8d49f63f8ecf113fd9435","url":"https://api.github.com/repos/apache/openjpa/commits/1b9d80003a2ef71cdba8d49f63f8ecf113fd9435","html_url":"https://github.com/apache/openjpa/commit/1b9d80003a2ef71cdba8d49f63f8ecf113fd9435"}],"stats":{"total":63,"additions":61,"deletions":2},"files":[{"sha":"931af86c57199d423cbfb81a79193498ac766a38","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java?ref=148db96a8cea463537ffa4a530694e45de5820bf","patch":"@@ -53,6 +53,12 @@\n      */\n     public static final String LOG_SQL = \"openjpa.jdbc.SQL\";\n \n+    /**\n+     * Name of the logger for additional jdbc messages:\n+     * <code>openjpa.jdbc.DIAG</code>.\n+     */\n+    public static final String LOG_DIAG = \"openjpa.jdbc.SQLDiag\";\n+\n     /**\n      * Name of the logger for JDBC-related messages:\n      * <code>openjpa.jdbc.JDBC</code>."},{"sha":"c77f549ac6c6fe74c0a84a100c35c8f010bf5c28","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":39,"deletions":2,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=148db96a8cea463537ffa4a530694e45de5820bf","patch":"@@ -69,6 +69,8 @@\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.jdbc.DelegatingStatement;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.log.LogFactoryImpl.LogImpl;\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.lib.util.ConcreteClassGenerator;\n@@ -107,6 +109,7 @@\n     private DataSource _ds = null;\n     private RefCountConnection _conn = null;\n     private boolean _active = false;\n+    private Log _log = null;\n \n     // track the pending statements so we can cancel them\n     private Set<Statement> _stmnts = Collections.synchronizedSet(new HashSet<Statement>());\n@@ -144,6 +147,7 @@ public void setContext(StoreContext ctx, JDBCConfiguration conf) {\n         _conf = conf;\n         _dict = _conf.getDBDictionaryInstance();\n         _sql = _conf.getSQLFactoryInstance();\n+        _log = _conf.getLog(JDBCConfiguration.LOG_DIAG);\n \n         LockManager lm = ctx.getLockManager();\n         if (lm instanceof JDBCLockManager)\n@@ -299,6 +303,9 @@ private boolean exists(ClassMapping mapping, Object oid, Object context) {\n             mapping = mapping.getJoinablePCSuperclassMapping();\n \n         sel.wherePrimaryKey(oid, mapping, this);\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"exists: oid=\"+oid+\" \"+mapping.getDescribedType());\n+        }\n         try {\n             return sel.getCount(this) != 0;\n         } catch (SQLException se) {\n@@ -564,6 +571,9 @@ private Result getInitializeStateResult(OpenJPAStateManager sm,\n             return null;\n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n         sel.setExpectedResultCount(1, false);\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"getInitializeStateResult: oid=\"+sm.getObjectId()+\" \"+mapping.getDescribedType());\n+        }\n         Result result = sel.execute(this, fetch);\n         cacheFinder(mapping, sel, fetch);\n         return result;\n@@ -615,6 +625,9 @@ private boolean selectPrimaryKey(OpenJPAStateManager sm,\n         Select sel = _sql.newSelect();\n         sel.select(base.getPrimaryKeyColumns());\n         sel.wherePrimaryKey(sm.getObjectId(), base, this);\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"selectPrimaryKey: oid=\"+sm.getObjectId()+\" \"+mapping.getDescribedType());\n+        }\n         Result exists = sel.execute(this, fetch);\n         try {\n             if (isEmptyResult(exists))\n@@ -666,6 +679,9 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             if (select(sel, mapping, Select.SUBS_EXACT, sm, fields, jfetch,\n                 EagerFetchModes.EAGER_JOIN, true, false)) {\n                 sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n+                if (_log.isTraceEnabled()) {\n+                    _log.trace(\"load: \"+mapping.getDescribedType()+\" oid: \"+sm.getObjectId()); \n+                }\n                 res = sel.execute(this, jfetch, lockLevel);\n                 try {\n                  \tif (isEmptyResult(res))\n@@ -679,8 +695,13 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             // now allow the fields to load themselves individually too\n             FieldMapping[] fms = mapping.getFieldMappings();\n             for (int i = 0; i < fms.length; i++)\n-                if (fields.get(i) && !sm.getLoaded().get(i))\n+                if (fields.get(i) && !sm.getLoaded().get(i)) {\n+                    if (_log.isTraceEnabled()) {\n+                        _log.trace(\"load field: '\"+ fms[i].getName() + \"' for oid=\"+sm.getObjectId()\n+                            +\" \"+mapping.getDescribedType());\n+                    }\n                     fms[i].load(sm, this, jfetch.traverseJDBC(fms[i]));\n+                }\n             mapping.getVersion().afterLoad(sm, this);\n             return true;\n         } catch (ClassNotFoundException cnfe) {\n@@ -714,6 +735,11 @@ public Collection flush(Collection sms) {\n                 _conn.setReadOnly(false);\n         } catch (SQLException e) {\n         }\n+        if (_log.isTraceEnabled()) {\n+            for (OpenJPAStateManager sm: (Collection<OpenJPAStateManager>)sms) {\n+                _log.trace(\"flush: \"+sm.getPCState().getClass().getName() + \" for oid=\"+sm.getObjectId());\n+            }\n+        }\n         return _conf.getUpdateManagerInstance().flush(sms, this);\n     }\n \n@@ -824,6 +850,10 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n \n                     Select sel = _sql.newSelect();\n                     sel.setLRS(true);\n+                    if (_log.isTraceEnabled()) {\n+                        _log.trace(\"executeExtent: \"+mappings[i].getDescribedType());\n+                        sel.logEagerRelations();\n+                    }\n                     BitSet paged = selectExtent(sel, mappings[i], jfetch,\n                         subclasses);\n                     if (paged == null)\n@@ -958,6 +988,9 @@ public Object find(Object oid, ValueMapping vm,\n         JDBCFetchConfiguration fetch) {\n         if (oid == null)\n             return null;\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(\"find: oid=\"+oid+\" \"+vm.getDeclaredTypeMapping().getDescribedType());\n+        }\n         Object pc = _ctx.find(oid, fetch, null, null, 0);\n         if (pc == null && vm != null) {\n             OrphanedKeyAction action = _conf.getOrphanedKeyActionInstance();\n@@ -1016,9 +1049,13 @@ private BitSet excludeInverseRelation(ClassMapping mapping,\n     private void load(ClassMapping mapping, OpenJPAStateManager sm,\n         JDBCFetchConfiguration fetch, Result res) throws SQLException {\n         FieldMapping eagerToMany = load(mapping, sm, fetch, res, null);\n-        if (eagerToMany != null)\n+        if (eagerToMany != null) {\n+            if (_log.isTraceEnabled()) {\n+                _log.trace(\"Loading eager toMany: \"+eagerToMany.getName()+\" for \"+mapping);\n+            }\n             eagerToMany.loadEagerJoin(sm, this, fetch.traverseJDBC(eagerToMany),\n                 res);\n+        }\n         if (_active && _lm != null && res.isLocking())\n             _lm.loadedForUpdate(sm);\n     }"},{"sha":"d612f8e87a62cd161990c069c239c322a24a3965","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=148db96a8cea463537ffa4a530694e45de5820bf","patch":"@@ -901,6 +901,10 @@ public Context ctx() {\n         public void setSchemaAlias(String schemaAlias) {\n             sel.setSchemaAlias(schemaAlias);\n         }\n+\n+        public void logEagerRelations() {\n+            sel.logEagerRelations();            \n+        }\n     }\n \n     /**"},{"sha":"4f0674356238839e56ed8388410e544afcbbf19e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=148db96a8cea463537ffa4a530694e45de5820bf","patch":"@@ -733,4 +733,8 @@ public SelectExecutor eagerClone(FieldMapping key, int eagerType,\n      */\n     public boolean getHasSubselect();\n    \n+    /**\n+     * Extended trace that logs eager relations\n+     */\n+    public void logEagerRelations();\n }"},{"sha":"d4e67a17c90d535617f7cdd83ce3e89ac9bfeef0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/148db96a8cea463537ffa4a530694e45de5820bf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=148db96a8cea463537ffa4a530694e45de5820bf","patch":"@@ -377,6 +377,7 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n                 forUpdate = lm.selectForUpdate(this, lockLevel);\n         }\n \n+        logEagerRelations();\n         SQLBuffer sql = toSelect(forUpdate, fetch);\n         boolean isLRS = isLRS();\n         int rsType = (isLRS && supportsRandomAccess(forUpdate))\n@@ -1768,6 +1769,13 @@ public Map getEagerMap() {\n         return _eager;\n     }\n \n+    public void logEagerRelations() {\n+        if (_eagerKeys != null) {\n+            _conf.getLog(JDBCConfiguration.LOG_DIAG).trace(\n+                \"Eager relations: \"+_eagerKeys);\n+        }\n+    }\n+\n     public SelectExecutor getEager(FieldMapping key) {\n         if (_eager == null || !_eagerKeys.contains(key))\n             return null;"}]}

