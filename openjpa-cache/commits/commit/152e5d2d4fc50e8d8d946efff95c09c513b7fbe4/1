{"sha":"152e5d2d4fc50e8d8d946efff95c09c513b7fbe4","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1MmU1ZDJkNGZjNTBlOGQ4ZDk0NmVmZmY5NWMwOWM1MTNiN2ZiZTQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-15T14:16:06Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-15T14:16:06Z"},"message":" OPENJPA-1696: setting eol-style\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@954905 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"23081293ac0b0cc643369b36063d9e4cf8b0eab8","url":"https://api.github.com/repos/apache/openjpa/git/trees/23081293ac0b0cc643369b36063d9e4cf8b0eab8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/152e5d2d4fc50e8d8d946efff95c09c513b7fbe4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/152e5d2d4fc50e8d8d946efff95c09c513b7fbe4","html_url":"https://github.com/apache/openjpa/commit/152e5d2d4fc50e8d8d946efff95c09c513b7fbe4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/152e5d2d4fc50e8d8d946efff95c09c513b7fbe4/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"703bd8db8a82c09051e5c453bd5c849bc532b556","url":"https://api.github.com/repos/apache/openjpa/commits/703bd8db8a82c09051e5c453bd5c849bc532b556","html_url":"https://github.com/apache/openjpa/commit/703bd8db8a82c09051e5c453bd5c849bc532b556"}],"stats":{"total":354,"additions":177,"deletions":177},"files":[{"sha":"3dba47da2eb50b639b2855378e94613201a398e7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/152e5d2d4fc50e8d8d946efff95c09c513b7fbe4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/152e5d2d4fc50e8d8d946efff95c09c513b7fbe4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java?ref=152e5d2d4fc50e8d8d946efff95c09c513b7fbe4","patch":"@@ -1,90 +1,90 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.jdbc.kernel.exps;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\r\n-import org.apache.openjpa.jdbc.sql.Select;\r\n-\r\n-/**\r\n- * Compares two entity types.\r\n- *\r\n- * @author Catalina Wei\r\n- */\r\n-class EqualTypeExpression\r\n-    extends CompareEqualExpression {\r\n-\r\n-    /**\r\n-     * Constructor. Supply values to compare.\r\n-     */\r\n-    public EqualTypeExpression(Val val1, Val val2) {\r\n-        super(val1, val2);\r\n-    }\r\n-\r\n-    public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \r\n-        SQLBuffer buf, boolean val1Null, boolean val2Null) {\r\n-        if (val1Null && val2Null)\r\n-            buf.append(\"1 = 1\");\r\n-        else if (val1Null || val2Null) {\r\n-            Val val = (val1Null) ? getValue2() : getValue1();\r\n-            ExpState state = (val1Null) ? bstate.state2 : bstate.state1;\r\n-            if (!isDirectComparison()) {\r\n-                int len = val.length(sel, ctx, state);\r\n-                for (int i = 0; i < len; i++) {\r\n-                    if (i > 0)\r\n-                        buf.append(\" AND \");\r\n-                    val.appendTo(sel, ctx, state, buf, i);\r\n-                    buf.append(\" IS \").appendValue(null);\r\n-                }\r\n-            } else\r\n-                val.appendIsNull(sel, ctx, state, buf);\r\n-        } else {\r\n-            Val val1 = getValue1();\r\n-            Val val2 = getValue2();\r\n-            if (val1.length(sel, ctx, bstate.state1) == 1 \r\n-                && val2.length(sel, ctx, bstate.state2) == 1) {\r\n-                String op = \"=\";\r\n-                if (sel.getTablePerClassMeta() != null) {\r\n-                    if (val1 instanceof Type) {\r\n-                        if ((ClassMapping) val2.getMetaData() != sel.getTablePerClassMeta())\r\n-                            op = \"<>\";\r\n-                    }\r\n-                    else {\r\n-                        if ((ClassMapping) val1.getMetaData() != sel.getTablePerClassMeta())\r\n-                            op = \"<>\";\r\n-                    }\r\n-                }\r\n-                ctx.store.getDBDictionary().comparison(buf, op,\r\n-                    new FilterValueImpl(sel, ctx, bstate.state1, val1),\r\n-                    new FilterValueImpl(sel, ctx, bstate.state2, val2));\r\n-            } else {\r\n-                int len = java.lang.Math.min(val1.length(sel, ctx, \r\n-                    bstate.state1), val2.length(sel, ctx, bstate.state2));\r\n-                for (int i = 0; i < len; i++) {\r\n-                    if (i > 0)\r\n-                        buf.append(\" AND \");\r\n-\r\n-                    val1.appendTo(sel, ctx, bstate.state1, buf, i);\r\n-                    buf.append(\" = \");\r\n-                    val2.appendTo(sel, ctx, bstate.state2, buf, i);\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+\n+/**\n+ * Compares two entity types.\n+ *\n+ * @author Catalina Wei\n+ */\n+class EqualTypeExpression\n+    extends CompareEqualExpression {\n+\n+    /**\n+     * Constructor. Supply values to compare.\n+     */\n+    public EqualTypeExpression(Val val1, Val val2) {\n+        super(val1, val2);\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \n+        SQLBuffer buf, boolean val1Null, boolean val2Null) {\n+        if (val1Null && val2Null)\n+            buf.append(\"1 = 1\");\n+        else if (val1Null || val2Null) {\n+            Val val = (val1Null) ? getValue2() : getValue1();\n+            ExpState state = (val1Null) ? bstate.state2 : bstate.state1;\n+            if (!isDirectComparison()) {\n+                int len = val.length(sel, ctx, state);\n+                for (int i = 0; i < len; i++) {\n+                    if (i > 0)\n+                        buf.append(\" AND \");\n+                    val.appendTo(sel, ctx, state, buf, i);\n+                    buf.append(\" IS \").appendValue(null);\n+                }\n+            } else\n+                val.appendIsNull(sel, ctx, state, buf);\n+        } else {\n+            Val val1 = getValue1();\n+            Val val2 = getValue2();\n+            if (val1.length(sel, ctx, bstate.state1) == 1 \n+                && val2.length(sel, ctx, bstate.state2) == 1) {\n+                String op = \"=\";\n+                if (sel.getTablePerClassMeta() != null) {\n+                    if (val1 instanceof Type) {\n+                        if ((ClassMapping) val2.getMetaData() != sel.getTablePerClassMeta())\n+                            op = \"<>\";\n+                    }\n+                    else {\n+                        if ((ClassMapping) val1.getMetaData() != sel.getTablePerClassMeta())\n+                            op = \"<>\";\n+                    }\n+                }\n+                ctx.store.getDBDictionary().comparison(buf, op,\n+                    new FilterValueImpl(sel, ctx, bstate.state1, val1),\n+                    new FilterValueImpl(sel, ctx, bstate.state2, val2));\n+            } else {\n+                int len = java.lang.Math.min(val1.length(sel, ctx, \n+                    bstate.state1), val2.length(sel, ctx, bstate.state2));\n+                for (int i = 0; i < len; i++) {\n+                    if (i > 0)\n+                        buf.append(\" AND \");\n+\n+                    val1.appendTo(sel, ctx, bstate.state1, buf, i);\n+                    buf.append(\" = \");\n+                    val2.appendTo(sel, ctx, bstate.state2, buf, i);\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"5d9b5ab23760cccd54e99fa11caa3d036435d002","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/152e5d2d4fc50e8d8d946efff95c09c513b7fbe4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/152e5d2d4fc50e8d8d946efff95c09c513b7fbe4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java?ref=152e5d2d4fc50e8d8d946efff95c09c513b7fbe4","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.jdbc.kernel.exps;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\r\n-import org.apache.openjpa.jdbc.sql.Select;\r\n-\r\n-/**\r\n- * Compares two entity types.\r\n- *\r\n- * @author Catalina Wei\r\n- */\r\n-class NotEqualTypeExpression\r\n-    extends CompareEqualExpression {\r\n-\r\n-    /**\r\n-     * Constructor. Supply values to compare.\r\n-     */\r\n-    public NotEqualTypeExpression(Val val1, Val val2) {\r\n-        super(val1, val2);\r\n-    }\r\n-\r\n-    public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \r\n-        SQLBuffer buf, boolean val1Null, boolean val2Null) {\r\n-        if (val1Null && val2Null)\r\n-            buf.append(\"1 <> 1\");\r\n-        else if (val1Null || val2Null) {\r\n-            Val val = (val1Null) ? getValue2() : getValue1();\r\n-            ExpState state = (val1Null) ? bstate.state2 : bstate.state1;\r\n-            if (!isDirectComparison()) {\r\n-                int len = val.length(sel, ctx, state);\r\n-                for (int i = 0; i < len; i++) {\r\n-                    if (i > 0)\r\n-                        buf.append(\" AND \");\r\n-                    val.appendTo(sel, ctx, state, buf, i);\r\n-                    buf.append(\" IS NOT \").appendValue(null);\r\n-                }\r\n-            } else\r\n-                val.appendIsNotNull(sel, ctx, state, buf);\r\n-        } else {\r\n-            Val val1 = getValue1();\r\n-            Val val2 = getValue2();\r\n-            if (val1.length(sel, ctx, bstate.state1) == 1 \r\n-                && val2.length(sel, ctx, bstate.state2) == 1) {\r\n-                String op = \"<>\";\r\n-                if (val1 instanceof Type)\r\n-                    if ((ClassMapping) val2.getMetaData() != sel.getTablePerClassMeta())\r\n-                        op = \"=\";\r\n-                else\r\n-                    if ((ClassMapping) val1.getMetaData() != sel.getTablePerClassMeta())\r\n-                        op = \"=\";\r\n-                ctx.store.getDBDictionary().comparison(buf, op,\r\n-                    new FilterValueImpl(sel, ctx, bstate.state1, val1),\r\n-                    new FilterValueImpl(sel, ctx, bstate.state2, val2));\r\n-            } else {\r\n-                int len = java.lang.Math.max(val1.length(sel, ctx, \r\n-                    bstate.state1), val2.length(sel, ctx, bstate.state2));\r\n-                buf.append(\"(\");\r\n-                for (int i = 0; i < len; i++) {\r\n-                    if (i > 0)\r\n-                        buf.append(\" OR \");\r\n-                    val1.appendTo(sel, ctx, bstate.state1, buf, i);\r\n-                    buf.append(\" <> \");\r\n-                    val2.appendTo(sel, ctx, bstate.state2, buf, i);\r\n-                }\r\n-                buf.append(\")\");\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+\n+/**\n+ * Compares two entity types.\n+ *\n+ * @author Catalina Wei\n+ */\n+class NotEqualTypeExpression\n+    extends CompareEqualExpression {\n+\n+    /**\n+     * Constructor. Supply values to compare.\n+     */\n+    public NotEqualTypeExpression(Val val1, Val val2) {\n+        super(val1, val2);\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \n+        SQLBuffer buf, boolean val1Null, boolean val2Null) {\n+        if (val1Null && val2Null)\n+            buf.append(\"1 <> 1\");\n+        else if (val1Null || val2Null) {\n+            Val val = (val1Null) ? getValue2() : getValue1();\n+            ExpState state = (val1Null) ? bstate.state2 : bstate.state1;\n+            if (!isDirectComparison()) {\n+                int len = val.length(sel, ctx, state);\n+                for (int i = 0; i < len; i++) {\n+                    if (i > 0)\n+                        buf.append(\" AND \");\n+                    val.appendTo(sel, ctx, state, buf, i);\n+                    buf.append(\" IS NOT \").appendValue(null);\n+                }\n+            } else\n+                val.appendIsNotNull(sel, ctx, state, buf);\n+        } else {\n+            Val val1 = getValue1();\n+            Val val2 = getValue2();\n+            if (val1.length(sel, ctx, bstate.state1) == 1 \n+                && val2.length(sel, ctx, bstate.state2) == 1) {\n+                String op = \"<>\";\n+                if (val1 instanceof Type)\n+                    if ((ClassMapping) val2.getMetaData() != sel.getTablePerClassMeta())\n+                        op = \"=\";\n+                else\n+                    if ((ClassMapping) val1.getMetaData() != sel.getTablePerClassMeta())\n+                        op = \"=\";\n+                ctx.store.getDBDictionary().comparison(buf, op,\n+                    new FilterValueImpl(sel, ctx, bstate.state1, val1),\n+                    new FilterValueImpl(sel, ctx, bstate.state2, val2));\n+            } else {\n+                int len = java.lang.Math.max(val1.length(sel, ctx, \n+                    bstate.state1), val2.length(sel, ctx, bstate.state2));\n+                buf.append(\"(\");\n+                for (int i = 0; i < len; i++) {\n+                    if (i > 0)\n+                        buf.append(\" OR \");\n+                    val1.appendTo(sel, ctx, bstate.state1, buf, i);\n+                    buf.append(\" <> \");\n+                    val2.appendTo(sel, ctx, bstate.state2, buf, i);\n+                }\n+                buf.append(\")\");\n+            }\n+        }\n+    }\n+}"}]}

