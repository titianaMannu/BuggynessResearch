{"sha":"153b2664308915658a6957bc9df55b2a85ee0964","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1M2IyNjY0MzA4OTE1NjU4YTY5NTdiYzlkZjU1YjJhODVlZTA5NjQ=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T23:27:59Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-04-09T23:27:59Z"},"message":"OPENJPA-565 - Add test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@646596 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dccb316ff8829d311cdfd8551555d43f3dd2f213","url":"https://api.github.com/repos/apache/openjpa/git/trees/dccb316ff8829d311cdfd8551555d43f3dd2f213"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/153b2664308915658a6957bc9df55b2a85ee0964","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/153b2664308915658a6957bc9df55b2a85ee0964","html_url":"https://github.com/apache/openjpa/commit/153b2664308915658a6957bc9df55b2a85ee0964","comments_url":"https://api.github.com/repos/apache/openjpa/commits/153b2664308915658a6957bc9df55b2a85ee0964/comments","author":null,"committer":null,"parents":[{"sha":"d20c7705218c2c76f4f38997a1bc77af4a2463d5","url":"https://api.github.com/repos/apache/openjpa/commits/d20c7705218c2c76f4f38997a1bc77af4a2463d5","html_url":"https://github.com/apache/openjpa/commit/d20c7705218c2c76f4f38997a1bc77af4a2463d5"}],"stats":{"total":197,"additions":197,"deletions":0},"files":[{"sha":"0e241b68f9501081b4cc14291e21d5665833aff3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/153b2664308915658a6957bc9df55b2a85ee0964/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/153b2664308915658a6957bc9df55b2a85ee0964/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java?ref=153b2664308915658a6957bc9df55b2a85ee0964","patch":"@@ -27,9 +27,19 @@\n import javax.persistence.Id;\r\n import javax.persistence.NamedNativeQueries;\r\n import javax.persistence.NamedNativeQuery;\r\n+import javax.persistence.NamedQueries;\r\n+import javax.persistence.NamedQuery;\r\n import javax.persistence.SqlResultSetMapping;\r\n import javax.persistence.Table;\r\n \r\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = :fname\")\r\n+\r\n+@NamedQueries( {\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\r\n+})\r\n+\r\n @NamedNativeQueries( { \r\n     @NamedNativeQuery(name = \"findSimpleEntitites\",\r\n         query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \r"},{"sha":"920fd2a0103fe1e5bdef4ebd2264d70df24de866","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/153b2664308915658a6957bc9df55b2a85ee0964/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/153b2664308915658a6957bc9df55b2a85ee0964/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java?ref=153b2664308915658a6957bc9df55b2a85ee0964","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.NamedQueries;\r\n+import javax.persistence.NamedQuery;\r\n+import javax.persistence.Table;\r\n+\r\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = :fname\")\r\n+\r\n+@NamedQueries( {\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"Find2All\", query=\"select s from simple2 s\")\r\n+})\r\n+\r\n+@Entity(name = \"simple2\")\r\n+@Table(name = \"SIMPLE_ENTITY2\")\r\n+public class SimpleEntity2 {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    @Column(name = \"ID\")\r\n+    private long id;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"NAME\")\r\n+    private String name;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"VALUE\")\r\n+    private String value;\r\n+\r\n+    public SimpleEntity2() {\r\n+    }\r\n+\r\n+    public SimpleEntity2(String name, String value) {\r\n+        this();\r\n+        this.name = name;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+}\r"},{"sha":"630a61878ad48054b7943f4a203c4cf3af443fc4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/153b2664308915658a6957bc9df55b2a85ee0964/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/153b2664308915658a6957bc9df55b2a85ee0964/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java?ref=153b2664308915658a6957bc9df55b2a85ee0964","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDupNamedQuery extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SimpleEntity.class, SimpleEntity2.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SimpleEntity(\"Name One\", \"Value One\"));\n+        em.persist(new SimpleEntity(\"Name Two\", \"Value Two\"));\n+        em.persist(new SimpleEntity2(\"Name2 One\", \"Value2 One\"));\n+        em.persist(new SimpleEntity2(\"Name2 Two\", \"Value2 Two\"));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testSimpleQuery() {\n+        simpleQuery(false, \"FindOne\", \"FindAll\", \"Name One\", \"Value One\",\n+            \"Name Two\", \"Value Two\");\n+        simpleQuery(true, \"Find2One\", \"Find2All\", \"Name2 One\", \"Value2 One\",\n+            \"Name2 Two\", \"Value2 Two\");\n+\n+        simpleQuery(false, \"FindXTwo\", null, \"Name Two\", \"Value Two\", null,\n+            null);\n+    }\n+\n+    private void simpleQuery(boolean simple2, String findOneQName,\n+        String findAllQName, String nameOne, String ValueOne, String nameTwo,\n+        String ValueTwo) {\n+        EntityManager em = emf.createEntityManager();\n+\n+        List list = em.createNamedQuery(findOneQName).setParameter(1, nameOne)\n+            .getResultList();\n+        assertNotNull(list);\n+        assertEquals(list.size(), 1);\n+        Object o = list.get(0);\n+        assertSame(o.getClass(), simple2 ? SimpleEntity2.class\n+            : SimpleEntity.class);\n+        assertEquals(simple2 ? ((SimpleEntity2) o).getValue()\n+            : ((SimpleEntity) o).getValue(), ValueOne);\n+\n+        if (findAllQName != null) {\n+            list = em.createNamedQuery(findAllQName).getResultList();\n+            assertNotNull(list);\n+            assertEquals(list.size(), 2);\n+            for (Iterator resultIter = list.iterator(); resultIter.hasNext();) {\n+                o = resultIter.next();\n+                assertSame(o.getClass(), simple2 ? SimpleEntity2.class\n+                    : SimpleEntity.class);\n+                String n = null;\n+                String v = null;\n+                if (simple2) {\n+                    n = ((SimpleEntity2) o).getName();\n+                    v = ((SimpleEntity2) o).getValue();\n+                } else {\n+                    n = ((SimpleEntity) o).getName();\n+                    v = ((SimpleEntity) o).getValue();\n+                }\n+                if (n.equals(nameOne)) {\n+                    assertTrue(v.equals(ValueOne));\n+                } else if (n.equals(nameTwo)) {\n+                    assertTrue(v.equals(ValueTwo));\n+                } else {\n+                    assertTrue(false);\n+                }\n+            }\n+        }\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestDupNamedQuery.class);\n+    }\n+}"}]}

