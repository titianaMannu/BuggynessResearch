{"sha":"156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1NmE3ZmZkZDBiNzZmZDAwZDhmMzFmNzYzNzE3ZDczYTJlN2ZiNmE=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T05:53:17Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-08-06T05:53:17Z"},"message":"OPENJPA240 applied patch by Catalina Wei to remove static dependency on JAXB classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563031 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3df344a7c976ec0328816d6bbb4a1bd99c923dbb","url":"https://api.github.com/repos/apache/openjpa/git/trees/3df344a7c976ec0328816d6bbb4a1bd99c923dbb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","html_url":"https://github.com/apache/openjpa/commit/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a/comments","author":null,"committer":null,"parents":[{"sha":"9382677eb148b417ae0328330e858cb6396c1a4c","url":"https://api.github.com/repos/apache/openjpa/commits/9382677eb148b417ae0328330e858cb6396c1a4c","html_url":"https://github.com/apache/openjpa/commit/9382677eb148b417ae0328330e858cb6396c1a4c"}],"stats":{"total":175,"additions":107,"deletions":68},"files":[{"sha":"a73304941b62de335b3e2dc080e439dab23b5540","filename":"openjpa-persistence/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","patch":"@@ -45,11 +45,6 @@\n             <version>1.0</version>\n             <scope>compile</scope>\n         </dependency>\n-\t    <dependency>\n-\t\t    <groupId>javax.xml.bind</groupId>\n-\t\t    <artifactId>jaxb-api</artifactId>\n-\t\t    <version>2.0</version>\n-\t    </dependency>\n     </dependencies>\n     <build>\n         <plugins>"},{"sha":"4c17d9a8a956fc31327b1458549d7501c27a2b0a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":107,"deletions":63,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=156a7ffdd0b76fd00d8f31f763717d73a2e7fb6a","patch":"@@ -21,13 +21,7 @@\n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Field;\n import java.lang.reflect.Member;\n-\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlAttribute;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n+import java.lang.reflect.Method;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n@@ -58,13 +52,53 @@\n     // the class we were invoked to parse\n     private Class _cls = null;\n     private FieldMetaData _fmd = null;\n+    \n+    // cache the JAXB Xml... classes if they are present so we do not\n+    // have a hard-wired dependency on JAXB here\n+    private Class xmlTypeClass = null;\n+    private Class xmlRootElementClass = null;\n+    private Class xmlAccessorTypeClass = null;\n+    private Class xmlAttributeClass = null;\n+    private Class xmlElementClass = null;\n+    private Method xmlTypeName = null;\n+    private Method xmlTypeNamespace = null;\n+    private Method xmlRootName = null;\n+    private Method xmlRootNamespace = null;\n+    private Method xmlAttributeName = null;\n+    private Method xmlAttributeNamespace = null;\n+    private Method xmlElementName = null;\n+    private Method xmlElementNamespace = null;\n+    private Method xmlAccessorValue = null;\n \n     /**\n      * Constructor; supply configuration.\n      */\n     public AnnotationPersistenceXMLMetaDataParser(OpenJPAConfiguration conf) {\n         _conf = conf;\n         _log = conf.getLog(OpenJPAConfiguration.LOG_METADATA);\n+        try {\n+            xmlTypeClass = Class.forName(\n+                \"javax.xml.bind.annotation.XmlType\");\n+            xmlTypeName = xmlTypeClass.getMethod(\"name\", null);\n+            xmlTypeNamespace = xmlTypeClass.getMethod(\"namespace\", null);\n+            xmlRootElementClass = Class.forName(\n+                \"javax.xml.bind.annotation.XmlRootElement\");\n+            xmlRootName = xmlRootElementClass.getMethod(\"name\", null);\n+            xmlRootNamespace = xmlRootElementClass.getMethod(\"namespace\", null);\n+            xmlAccessorTypeClass = Class.forName(\n+                \"javax.xml.bind.annotation.XmlAccessorType\");\n+            xmlAccessorValue = xmlAccessorTypeClass.getMethod(\"value\", null);\n+            xmlAttributeClass = Class.forName(\n+                \"javax.xml.bind.annotation.XmlAttribute\");\n+            xmlAttributeName = xmlAttributeClass.getMethod(\"name\", null);\n+            xmlAttributeNamespace = xmlAttributeClass.getMethod(\"namespace\"\n+                , null);\n+            xmlElementClass = Class.forName(\n+                \"javax.xml.bind.annotation.XmlElement\");\n+            xmlElementName = xmlElementClass.getMethod(\"name\", null);\n+            xmlElementNamespace = xmlElementClass.getMethod(\"namespace\", null);\n+        } catch (Exception e) {\n+        }\n     }\n \n     /**\n@@ -135,7 +169,7 @@ public void parse(FieldMetaData fmd) {\n      */\n     private XMLMetaData parseXMLClassAnnotations() {\n         // check immediately whether the class has JAXB XML annotations\n-        if (!_cls.isAnnotationPresent(XmlType.class))\n+        if (!_cls.isAnnotationPresent(xmlTypeClass))\n             return null;\n \n         // find / create metadata\n@@ -159,19 +193,22 @@ private synchronized XMLMetaData getXMLMetaData() {\n     }\n     \n     private void parseXmlRootElement(Class type, XMLMetaData meta) {\n-        if (type.getAnnotation(XmlRootElement.class) != null) {\n-            meta.setXmlRootElement(true);\n-            meta.setXmlname(((XmlRootElement) type.getAnnotation\n-                (XmlRootElement.class)).name());\n-            meta.setXmlnamespace(((XmlRootElement) type.getAnnotation\n-                (XmlRootElement.class)).namespace());\n+        try {\n+            if (type.getAnnotation(xmlRootElementClass) != null) {\n+                meta.setXmlRootElement(true);\n+                meta.setXmlname((String) xmlRootName.invoke(type.getAnnotation\n+                    (xmlRootElementClass), new Object[]{}));\n+                meta.setXmlnamespace((String) xmlRootNamespace.invoke(type\n+                    .getAnnotation(xmlRootElementClass), new Object[]{}));\n+            }\n+            else {\n+                meta.setXmlname((String) xmlTypeName.invoke(type.getAnnotation\n+                    (xmlTypeClass), new Object[]{}));\n+                meta.setXmlnamespace((String) xmlTypeNamespace.invoke(type\n+                    .getAnnotation(xmlTypeClass), new Object[]{}));           \n+            }\n+        } catch (Exception e) {            \n         }\n-        else {\n-            meta.setXmlname(((XmlType) type.getAnnotation\n-                (XmlType.class)).name());\n-            meta.setXmlnamespace(((XmlType) type.getAnnotation\n-                (XmlType.class)).namespace());           \n-        }        \n     }\n \n     private void populateFromReflection(Class cls, XMLMetaData meta) {\n@@ -180,55 +217,62 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n         Class superclass = cls.getSuperclass();\n \n         // handle inheritance at sub-element level\n-        if (superclass.isAnnotationPresent(XmlType.class))\n+        if (superclass.isAnnotationPresent(xmlTypeClass))\n             populateFromReflection(superclass, meta);\n \n-        if (((XmlAccessorType) cls.getAnnotation(XmlAccessorType.class)).value()\n-            == XmlAccessType.FIELD)\n-            members = cls.getDeclaredFields();\n-        else\n-            members = cls.getDeclaredMethods();\n-\n-        for (int i = 0; i < members.length; i++) {\n-            Member member = members[i];\n-            AnnotatedElement el = (AnnotatedElement) member;\n-            XMLMetaData field = null;\n-            if (el.getAnnotation(XmlElement.class) != null) {\n-                String xmlname = el.getAnnotation(XmlElement.class).name();\n-                // avoid JAXB XML bind default name\n-                if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n-                    xmlname = member.getName();\n-                if (((Field) member).getType()\n-                    .isAnnotationPresent(XmlType.class)) {\n-                    field = _repos.addXMLMetaData(((Field) member).getType()\n-                        , member.getName());\n-                    parseXmlRootElement(((Field) member).getType(), field);\n-                    populateFromReflection(((Field) member).getType(), field);\n-                    field.setXmltype(XMLMetaData.XMLTYPE);\n-                    field.setXmlname(xmlname);\n+        try {\n+            if (StringUtils.equals(xmlAccessorValue.invoke(cls.getAnnotation(\n+                xmlAccessorTypeClass), new Object[]{}).toString(), \"FIELD\"))\n+                members = cls.getDeclaredFields();\n+            else\n+                members = cls.getDeclaredMethods();\n+\n+            for (int i = 0; i < members.length; i++) {\n+                Member member = members[i];\n+                AnnotatedElement el = (AnnotatedElement) member;\n+                XMLMetaData field = null;\n+                if (el.getAnnotation(xmlElementClass) != null) {\n+                    String xmlname = (String) xmlElementName.invoke(el\n+                        .getAnnotation(xmlElementClass), new Object[]{});\n+                    // avoid JAXB XML bind default name\n+                    if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n+                        xmlname = member.getName();\n+                    if (((Field) member).getType()\n+                        .isAnnotationPresent(xmlTypeClass)) {\n+                        field = _repos.addXMLMetaData(((Field) member).getType()\n+                            , member.getName());\n+                        parseXmlRootElement(((Field) member).getType(), field);\n+                        populateFromReflection(((Field) member).getType()\n+                            , field);\n+                        field.setXmltype(XMLMetaData.XMLTYPE);\n+                        field.setXmlname(xmlname);\n+                    }\n+                    else {\n+                        field = _repos.newXMLFieldMetaData(((Field) member)\n+                            .getType(), member.getName());\n+                        field.setXmltype(XMLMetaData.ELEMENT);\n+                        field.setXmlname(xmlname);\n+                        field.setXmlnamespace((String) xmlElementNamespace\n+                            .invoke(el.getAnnotation(xmlElementClass)\n+                            , new Object[]{}));                    \n+                    }\n                 }\n-                else {\n+                else if (el.getAnnotation(xmlAttributeClass) != null) {\n                     field = _repos.newXMLFieldMetaData(((Field) member)\n                         .getType(), member.getName());\n-                    field.setXmltype(XMLMetaData.ELEMENT);\n-                    field.setXmlname(xmlname);\n-                    field.setXmlnamespace(el.getAnnotation(XmlElement.class)\n-                        .namespace());                    \n+                    field.setXmltype(XMLFieldMetaData.ATTRIBUTE);\n+                    String xmlname = (String) xmlAttributeName.invoke(\n+                        el.getAnnotation(xmlAttributeClass), new Object[]{});\n+                    // avoid JAXB XML bind default name\n+                    if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n+                        xmlname = member.getName();\n+                    field.setXmlname(\"@\"+xmlname);\n+                    field.setXmlnamespace((String) xmlAttributeNamespace.invoke(\n+                        el.getAnnotation(xmlAttributeClass), new Object[]{}));               \n                 }\n+                meta.addField(member.getName(), field);\n             }\n-            else if (el.getAnnotation(XmlAttribute.class) != null) {\n-                field = _repos.newXMLFieldMetaData(((Field) member).getType()\n-                    , member.getName());\n-                field.setXmltype(XMLFieldMetaData.ATTRIBUTE);\n-                String xmlname = el.getAnnotation(XmlAttribute.class).name();\n-                // avoid JAXB XML bind default name\n-                if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n-                    xmlname = member.getName();\n-                field.setXmlname(\"@\"+xmlname);\n-                field.setXmlnamespace(el.getAnnotation(XmlAttribute.class)\n-                    .namespace());                \n-            }\n-            meta.addField(member.getName(), field);\n-        }        \n+        } catch(Exception e) {\n+        }\n     }\n }"}]}

