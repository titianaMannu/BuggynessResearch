{"sha":"15715ab0dbe3b50ed599b541bb4b968e20e583fa","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1NzE1YWIwZGJlM2I1MGVkNTk5YjU0MWJiNGI5NjhlMjBlNTgzZmE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-10T23:54:22Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-10T23:54:22Z"},"message":"OPENJPA-644 Merge 675806 from trunk to 1.0.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@675811 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d2806d60ded3360e6c77142ba6e55a1535326e0","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d2806d60ded3360e6c77142ba6e55a1535326e0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/15715ab0dbe3b50ed599b541bb4b968e20e583fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/15715ab0dbe3b50ed599b541bb4b968e20e583fa","html_url":"https://github.com/apache/openjpa/commit/15715ab0dbe3b50ed599b541bb4b968e20e583fa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/15715ab0dbe3b50ed599b541bb4b968e20e583fa/comments","author":null,"committer":null,"parents":[{"sha":"722e07f72b853919cbb7e648af32d4fdda83e795","url":"https://api.github.com/repos/apache/openjpa/commits/722e07f72b853919cbb7e648af32d4fdda83e795","html_url":"https://github.com/apache/openjpa/commit/722e07f72b853919cbb7e648af32d4fdda83e795"}],"stats":{"total":101,"additions":53,"deletions":48},"files":[{"sha":"fbad2bfa016153b4d16ea2252ee17e1b34ab5107","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":53,"deletions":48,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/15715ab0dbe3b50ed599b541bb4b968e20e583fa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/15715ab0dbe3b50ed599b541bb4b968e20e583fa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=15715ab0dbe3b50ed599b541bb4b968e20e583fa","patch":"@@ -68,8 +68,8 @@\n     private static final String useKeepExclusiveLockClause\r\n         = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n     private static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n-    protected String databaseProductName = null;\r\n-    protected String databaseProductVersion = null;\r\n+    protected String databaseProductName = \"\";\r\n+    protected String databaseProductVersion = \"\";\r\n     protected int maj = 0;\r\n     protected int min = 0;\r\n \r\n@@ -216,8 +216,8 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n     \tsuper.connectedConfiguration(conn);\r\n \r\n     \tDatabaseMetaData metaData = conn.getMetaData();\r\n-        databaseProductName = metaData.getDatabaseProductName();\r\n-        databaseProductVersion = metaData.getDatabaseProductVersion();\r\n+        databaseProductName = nullSafe(metaData.getDatabaseProductName());\r\n+        databaseProductVersion = nullSafe(metaData.getDatabaseProductVersion());\r\n         \r\n         // Determine the type of DB2 database\r\n         // First check for AS/400\r\n@@ -358,51 +358,32 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n     }\r\n \r\n     public boolean isDB2UDBV82OrLater() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1\r\n-            || databaseProductName.indexOf(\"DB2/\") != -1)\r\n-            && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1\r\n+             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n+             && ((maj == 8 && min >= 2) || (maj >= 9));\r\n     }\r\n \r\n     public boolean isDB2ZOSV8xOrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           (databaseProductVersion.indexOf(\"DSN\") != -1\r\n-           || databaseProductName.indexOf(\"DB2/\") == -1)\r\n-           && maj >= 8)\r\n-           match = true;\r\n-        return match;\r\n+       return (databaseProductVersion.indexOf(\"DSN\") != -1\r\n+            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n+            && maj >= 8;\r\n+           \r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R3OrEarlier() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && ((maj == 5 && min <=3) || maj < 5))\r\n-           match = true;\r\n-       return match;\r\n+       return (databaseProductName.indexOf(\"AS\") != -1\r\n+           && ((maj == 5 && min <=3) || maj < 5));\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R4OrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && (maj >=6 || (maj == 5 && min >=4)))\r\n-           match = true;\r\n-      return match;\r\n+       return databaseProductName.indexOf(\"AS\") != -1\r\n+           && (maj >=6 || (maj == 5 && min >=4));\r\n     }\r\n \r\n     public boolean isDB2UDBV81OrEarlier() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n-            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n-            ((maj == 8 && min <= 1) || maj < 8))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+            || databaseProductName.indexOf(\"DB2/\") != -1) \r\n+            && ((maj == 8 && min <= 1) || maj < 8);\r\n     }\r\n \r\n     /** Get the version Major/Minor for the ISeries\r\n@@ -413,17 +394,37 @@ private void getProductVersionMajorMinorForISeries() {\n         // ISeries                               DB2 UDB for AS/400\r\n         //   (Native)                            V5R4M0\r\n         if (databaseProductName.indexOf(\"AS\") != -1) {\r\n-            String s = databaseProductVersion.substring(databaseProductVersion\r\n-                .indexOf('V'));\r\n-            s = s.toUpperCase();\r\n-\r\n-            StringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\"\r\n-                , false);\r\n-            if (stringtokenizer.countTokens() == 3) {\r\n-                String s1 = stringtokenizer.nextToken();\r\n-                maj = Integer.parseInt(s1);\r\n-                String s2 =  stringtokenizer.nextToken();\r\n-                min = Integer.parseInt(s2);\r\n+            // default to V5R4\r\n+            maj = 5;\r\n+            min = 4;\r\n+            int index = databaseProductVersion.indexOf('V');\r\n+            if (index != -1) {\r\n+            \tString s = databaseProductVersion.substring(index);\r\n+            \ts = s.toUpperCase();\r\n+\r\n+            \tStringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\"\r\n+            \t\t\t, false);\r\n+            \tif (stringtokenizer.countTokens() == 3) {\r\n+            \t\tString s1 = stringtokenizer.nextToken();\r\n+            \t\tmaj = Integer.parseInt(s1);\r\n+            \t\tString s2 =  stringtokenizer.nextToken();\r\n+            \t\tmin = Integer.parseInt(s2);\r\n+            \t}\r\n+            }\r\n+            else {\r\n+            \tindex = databaseProductVersion.indexOf('0');\r\n+            \tif (index != -1) {\r\n+            \t\tString s = databaseProductVersion.substring(index);\r\n+            \t\ts = s.toUpperCase();\r\n+           \t\t\tStringTokenizer stringtokenizer = new StringTokenizer(s, \"0\"\r\n+           \t\t\t\t\t, false);                    \r\n+           \t\t\tif (stringtokenizer.countTokens() == 2) {\r\n+           \t\t\t\tString s1 = stringtokenizer.nextToken();\r\n+           \t\t\t\tmaj = Integer.parseInt(s1);\r\n+           \t\t\t\tString s2 =  stringtokenizer.nextToken();\r\n+           \t\t\t\tmin = Integer.parseInt(s2);\r\n+           \t\t\t}\r\n+                }\r\n             }\r\n         }\r\n     }\r\n@@ -772,4 +773,8 @@ public void createIndexIfNecessary(Schema schema, String table,\n             idx.addColumn(pkColumn);\r\n         }\r\n     }\r\n+    \r\n+    String nullSafe(String s) {\r\n+    \treturn s == null ? \"\" : s;\r\n+    }\r\n }\r"}]}

