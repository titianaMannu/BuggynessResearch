{"sha":"15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1YjVlYzIwZGRmMDEwZjRhMzViYzVlMDVjM2RkZDk0MjU0MmI5YjA=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T21:05:30Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-11T21:05:30Z"},"message":"fix unique constraint syntax in the test case for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814029 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e0acb624245d8f52f2779b10cf62f3c8efd574f5","url":"https://api.github.com/repos/apache/openjpa/git/trees/e0acb624245d8f52f2779b10cf62f3c8efd574f5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","html_url":"https://github.com/apache/openjpa/commit/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0/comments","author":null,"committer":null,"parents":[{"sha":"46734cf443c69afc0221c427a349aa251f9a1969","url":"https://api.github.com/repos/apache/openjpa/commits/46734cf443c69afc0221c427a349aa251f9a1969","html_url":"https://github.com/apache/openjpa/commit/46734cf443c69afc0221c427a349aa251f9a1969"}],"stats":{"total":89,"additions":72,"deletions":17},"files":[{"sha":"b6919e6a6691a37d62b25ab345a28d7fce075b1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraint.java","status":"modified","additions":47,"deletions":8,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraint.java?ref=15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","patch":"@@ -18,18 +18,25 @@\n  */\n package org.apache.openjpa.persistence.jdbc.unique;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.StringTokenizer;\n \n import javax.persistence.EntityManager;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.jdbc.SQLSniffer;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n public class TestNamedUniqueConstraint extends SQLListenerTestCase {\n+\n+    DBDictionary dict;\n+    \n     @Override\n     public void setUp(Object... props) {\n         super.setUp(DROP_TABLES, NamedUniqueA.class, NamedUniqueB.class);\n@@ -50,26 +57,58 @@ public void testMapping() {\n         List<String> sqls = super.sql;\n         \n         assertSQLFragnments(sqls, \"CREATE TABLE N_UNIQUE_A\",\n-            \"uca_f1_f2 UNIQUE .*\\\\(f1, f2\\\\)\", \n-            \"uca_f3_f4 UNIQUE .*\\\\(f3, f4\\\\).*\");\n+            getUniqueConstraint(\"uca_f1_f2 UNIQUE .*\\\\(f1, f2\\\\)\"), \n+            getUniqueConstraint(\"uca_f3_f4 UNIQUE .*\\\\(f3, f4\\\\).*\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE N_UNIQUE_B\",\n-            \"ucb_f1_f2 UNIQUE .*\\\\(f1, f2\\\\).*\");\n+            getUniqueConstraint(\"ucb_f1_f2 UNIQUE .*\\\\(f1, f2\\\\).*\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE N_UNIQUE_SECONDARY\",\n-            \"uca_sf1 UNIQUE .*\\\\(sf1\\\\)\");\n+            getUniqueConstraint(\"uca_sf1 UNIQUE .*\\\\(sf1\\\\)\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE N_UNIQUE_GENERATOR\",\n-            \"ucb_gen1_gen2 UNIQUE .*\\\\(GEN1, GEN2\\\\)\");\n+            getUniqueConstraint(\"ucb_gen1_gen2 UNIQUE .*\\\\(GEN1, GEN2\\\\)\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE N_UNIQUE_JOINTABLE\",\n-            \"uca_fka_fkb UNIQUE .*\\\\(FK_A, FK_B\\\\)\");\n+            getUniqueConstraint(\"uca_fka_fkb UNIQUE .*\\\\(FK_A, FK_B\\\\)\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE N_U_COLL_TBL\",\n-            \"ucb_f3 UNIQUE .*\\\\(f3\\\\).*\");\n+            getUniqueConstraint(\"ucb_f3 UNIQUE .*\\\\(f3\\\\).*\"));\n     }\n         \n     private boolean supportsUniqueConstraints() {\n         OpenJPAEntityManagerFactorySPI emfs = (OpenJPAEntityManagerFactorySPI)emf;\n         JDBCConfiguration jdbccfg = (JDBCConfiguration)emfs.getConfiguration();\n-        return jdbccfg.getDBDictionaryInstance().supportsUniqueConstraints;\n+        dict = jdbccfg.getDBDictionaryInstance();\n+        return dict.supportsUniqueConstraints;\n     }\n \n+    private String getUniqueConstraint(String unique) {\n+        if (dict instanceof MySQLDictionary) {\n+            //CREATE TABLE N_UNIQUE_A (aid INTEGER NOT NULL, f1 INTEGER NOT NULL, f2 INTEGER NOT NULL, \n+            //f3 INTEGER NOT NULL, f4 INTEGER NOT NULL, f5 INTEGER, f6 INTEGER, PRIMARY KEY (aid), \n+            //UNIQUE U_N_UNQU__F1 (f1), \n+            //UNIQUE uca_f1_f2 (f1, f2), \n+            //UNIQUE uca_f3_f4 (f3, f4)) TYPE = innodb\n+            return getUniqueConstraint(dict, unique);\n+        }\n+        return unique;\n+    }\n+    \n+    public static String getUniqueConstraint(DBDictionary dict, String unique) {\n+        List<String> tokens = new ArrayList<String>();\n+        List<String> tokens1 = new ArrayList<String>();\n+        StringTokenizer st = new StringTokenizer(unique);\n+        while (st.hasMoreTokens()) {\n+            tokens.add(st.nextToken());\n+        }\n+        tokens1.add(tokens.get(1));\n+        tokens1.add(tokens.get(0));\n+        for (int i = 2; i < tokens.size(); i++) {\n+            tokens1.add(tokens.get(i));\n+        }\n+        StringBuffer buf = new StringBuffer();\n+        for (String token : tokens1) {\n+            buf.append(token).append(\" \");\n+        }\n+        return buf.toString().trim();\n+    }\n+    \n     void assertSQLFragnments(List<String> list, String... keys) {\n         if (SQLSniffer.matches(list, keys))\n             return;"},{"sha":"cb3a0069582fe07f93edb480b70ae17b686acea5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraintWithXMLDescriptor.java","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraintWithXMLDescriptor.java","raw_url":"https://github.com/apache/openjpa/raw/15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraintWithXMLDescriptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraintWithXMLDescriptor.java?ref=15b5ec20ddf010f4a35bc5e05c3ddd942542b9b0","patch":"@@ -24,12 +24,16 @@\n import javax.persistence.EntityManager;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.jdbc.SQLSniffer;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n public class TestNamedUniqueConstraintWithXMLDescriptor extends SQLListenerTestCase {\n+    DBDictionary dict;\n+\n     @Override\n     public void setUp(Object... props) {\n         super.setUp(DROP_TABLES, NamedUniqueA.class, NamedUniqueB.class);\n@@ -54,27 +58,39 @@ public void testMapping() {\n         List<String> sqls = super.sql;\n         \n         assertSQLFragnments(sqls, \"CREATE TABLE NX_UNIQUE_A\",\n-            \"ucxa_f1_f2 UNIQUE .*\\\\(f1x, f2x\\\\)\", \n-            \"ucxa_f3_f4 UNIQUE .*\\\\(f3x, f4x\\\\).*\");\n+            getUniqueConstraint(\"ucxa_f1_f2 UNIQUE .*\\\\(f1x, f2x\\\\)\"), \n+            getUniqueConstraint(\"ucxa_f3_f4 UNIQUE .*\\\\(f3x, f4x\\\\).*\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE NX_UNIQUE_B\",\n-            \"ucxb_f1_f2 UNIQUE .*\\\\(f1x, f2x\\\\).*\");\n+            getUniqueConstraint(\"ucxb_f1_f2 UNIQUE .*\\\\(f1x, f2x\\\\).*\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE NX_UNIQUE_SECONDARY\",\n-            \"ucxa_sf1 UNIQUE .*\\\\(sf1x\\\\)\");\n+            getUniqueConstraint(\"ucxa_sf1 UNIQUE .*\\\\(sf1x\\\\)\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE NX_UNIQUE_GENERATOR\",\n-            \"ucxb_gen1_gen2 UNIQUE .*\\\\(GEN1_XML, GEN2_XML\\\\)\");\n+            getUniqueConstraint(\"ucxb_gen1_gen2 UNIQUE .*\\\\(GEN1_XML, GEN2_XML\\\\)\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE NX_UNIQUE_JOINTABLE\",\n-            \"ucxa_fka_fkb UNIQUE .*\\\\(FK_A_XML, FK_B_XML\\\\)\");\n+            getUniqueConstraint(\"ucxa_fka_fkb UNIQUE .*\\\\(FK_A_XML, FK_B_XML\\\\)\"));\n         assertSQLFragnments(sqls, \"CREATE TABLE NX_U_COLL_TBL\",\n-            \"ucxb_f3 UNIQUE .*\\\\(f3x\\\\).*\");\n-\n+            getUniqueConstraint(\"ucxb_f3 UNIQUE .*\\\\(f3x\\\\).*\"));\n     }\n         \n     private boolean supportsUniqueConstraints() {\n         OpenJPAEntityManagerFactorySPI emfs = (OpenJPAEntityManagerFactorySPI)emf;\n         JDBCConfiguration jdbccfg = (JDBCConfiguration)emfs.getConfiguration();\n-        return jdbccfg.getDBDictionaryInstance().supportsUniqueConstraints;\n+        dict = jdbccfg.getDBDictionaryInstance();\n+        return dict.supportsUniqueConstraints;\n     }\n \n+    private String getUniqueConstraint(String unique) {\n+        if (dict instanceof MySQLDictionary) {\n+            //CREATE TABLE N_UNIQUE_A (aid INTEGER NOT NULL, f1 INTEGER NOT NULL, f2 INTEGER NOT NULL, \n+            //f3 INTEGER NOT NULL, f4 INTEGER NOT NULL, f5 INTEGER, f6 INTEGER, PRIMARY KEY (aid), \n+            //UNIQUE U_N_UNQU__F1 (f1), \n+            //UNIQUE uca_f1_f2 (f1, f2), \n+            //UNIQUE uca_f3_f4 (f3, f4)) TYPE = innodb\n+            return TestNamedUniqueConstraint.getUniqueConstraint(dict, unique);\n+        }\n+        return unique;\n+    }\n+    \n     void assertSQLFragnments(List<String> list, String... keys) {\n         if (SQLSniffer.matches(list, keys))\n             return;"}]}

