{"sha":"15c64cb8f4db54346a10cc5c9183b3343db5c0b5","node_id":"MDY6Q29tbWl0MjA2MzY0OjE1YzY0Y2I4ZjRkYjU0MzQ2YTEwY2M1YzkxODNiMzM0M2RiNWMwYjU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T23:01:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T23:01:30Z"},"message":"OPENJPA-1584: Reparameterization when main and subquery using share query parameters in same or different declaration order\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@925036 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"72a4c5c634ab28320b393bd039357456c59bd81b","url":"https://api.github.com/repos/apache/openjpa/git/trees/72a4c5c634ab28320b393bd039357456c59bd81b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/15c64cb8f4db54346a10cc5c9183b3343db5c0b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/15c64cb8f4db54346a10cc5c9183b3343db5c0b5","html_url":"https://github.com/apache/openjpa/commit/15c64cb8f4db54346a10cc5c9183b3343db5c0b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/comments","author":null,"committer":null,"parents":[{"sha":"c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710","url":"https://api.github.com/repos/apache/openjpa/commits/c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710","html_url":"https://github.com/apache/openjpa/commit/c864f5dfc024d01052d59f0f6f9fd1ab5c0c2710"}],"stats":{"total":253,"additions":229,"deletions":24},"files":[{"sha":"1b3a99b329ec3ffe3d7061c316d4b4a5b8e7f508","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=15c64cb8f4db54346a10cc5c9183b3343db5c0b5","patch":"@@ -156,30 +156,30 @@ else if (_cols != null)\n                         _cols.add(paramIndex, null);\n             }\n         }\n-        if (buf._userIndex != null) {\n-            if (_userIndex == null)\n-                _userIndex = new ArrayList();\n-            for (int i = 0; i < buf._userIndex.size(); i+=2) {\n-                int newIndex = ((Integer)buf._userIndex.get(i)).intValue() \n-                    + paramIndex;\n-                Object userParam = buf._userIndex.get(i+1);\n-                _userIndex.add(newIndex);\n-                _userIndex.add(userParam);\n-            }\n-        } else { \n-            if (_userIndex != null) {\n-                List userIndex = new ArrayList();\n-                for (int i = 0; i < _userIndex.size(); i+=2) {\n-                    int oldIndex = ((Integer)_userIndex.get(i)).intValue();\n-                    Object userParam = _userIndex.get(i+1);\n-                    if (oldIndex >= paramIndex) \n-                        userIndex.add(oldIndex + paramIndex);\n-                    else \n-                        userIndex.add(oldIndex);\n-                    userIndex.add(userParam);\n-                }\n-                _userIndex = userIndex;\n+        \n+        // adding user parameters from another buffer to this buffer\n+        // this buffer's user parameter index gets modified\n+        if (buf._userIndex == null && this._userIndex == null) {\n+            // do nothing\n+        } else if (buf._userIndex != null && this._userIndex == null) {\n+            // copy the other buffers data\n+            this._userIndex = new ArrayList(buf._userIndex);\n+        } else if (buf._userIndex == null && this._userIndex != null) {\n+            // nothing to add from the other buffer\n+        } else { // both has data. \n+            // modify this buffer's user parameter index\n+            int otherSize = buf._userIndex.size()/2;\n+            for (int i = 0; i < _userIndex.size(); i+=2) {\n+                int newIndex = ((Integer)_userIndex.get(i)).intValue() + otherSize;\n+                _userIndex.set(i, newIndex);\n             }\n+            // append the other buffer's user parameters to this one\n+            for (int i = 0; i < buf._userIndex.size(); i+=2) {\n+                Object otherIndex = buf._userIndex.get(i);\n+                Object otherParam = buf._userIndex.get(i+1);\n+                _userIndex.add(otherIndex);\n+                _userIndex.add(otherParam);\n+            }            \n         }\n     }\n     "},{"sha":"87d77aae68da89f41f947e09f601a604efeb1150","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/OrderJPA.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/OrderJPA.java","raw_url":"https://github.com/apache/openjpa/raw/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/OrderJPA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/OrderJPA.java?ref=15c64cb8f4db54346a10cc5c9183b3343db5c0b5","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+/**\n+ * A simple entity for a complex test.\n+ * This entity is used to test complex parameterization and reparametrization of Prepared Queries.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class OrderJPA {\n+    @Id\n+    long OrderId;\n+    int CustomerId;\n+    int DistrictId;\n+    int WarehouseId;\n+    \n+    \n+    public long getOrderId() {\n+        return OrderId;\n+    }\n+    public void setOrderId(long orderId) {\n+        OrderId = orderId;\n+    }\n+    public int getCustomerId() {\n+        return CustomerId;\n+    }\n+    public void setCustomerId(int customerId) {\n+        CustomerId = customerId;\n+    }\n+    public int getDistrictId() {\n+        return DistrictId;\n+    }\n+    public void setDistrictId(int districtId) {\n+        DistrictId = districtId;\n+    }\n+    public int getWarehouseId() {\n+        return WarehouseId;\n+    }\n+    public void setWarehouseId(int warehouseId) {\n+        WarehouseId = warehouseId;\n+    }\n+}"},{"sha":"59b88a1f66504a7dacb87ee69d1d60fe76c9eac3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":141,"deletions":1,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=15c64cb8f4db54346a10cc5c9183b3343db5c0b5","patch":"@@ -187,7 +187,24 @@ void createTestData() {\n         em.persist(b1); em.persist(b2);\n         em.persist(c1); em.persist(c2);\n \n-\t    em.getTransaction().commit();\n+        id = (int)System.currentTimeMillis();\n+        OrderJPA o1 = new OrderJPA();\n+        o1.setOrderId(id++);\n+        o1.setCustomerId(339);\n+        o1.setDistrictId(3);\n+        o1.setWarehouseId(23);\n+        \n+        OrderJPA o2 = new OrderJPA();\n+        o2.setOrderId(id++);\n+        o2.setCustomerId(2967);\n+        o2.setDistrictId(5);\n+        o2.setWarehouseId(22);\n+        \n+        em.persist(o1);\n+        em.persist(o2);\n+        \n+        \n+        em.getTransaction().commit();\n \t}\n \n \tpublic void tearDown() throws Exception {\n@@ -835,6 +852,129 @@ public void testNoParameterOnExternalizedFieldIsIncluded() {\n        assertFalse(q2.getResultList().isEmpty());\n     }\n     \n+    public void testRepeatedParameterInSubqueryInDifferentOrder() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql =  \"select o from OrderJPA o \" \n+                             + \"where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 \"\n+                                   +  \"where ((o1.CustomerId = :customerId) \" \n+                                   +  \"and   (o1.DistrictId = :districtId) \" \n+                                   +  \"and   (o1.WarehouseId = :warehouseId))) \" \n+                    +  \"and (o.CustomerId = :customerId) \"\n+                    +  \"and (o.WarehouseId = :warehouseId) \"\n+                    +  \"and (o.DistrictId = :districtId)\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());\n+        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+    }\n+    \n+    public void testRepeatedParameterInSubqueryInSameOrder() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql =  \"select o from OrderJPA o \" \n+                             + \"where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 \"\n+                             +  \"where ((o1.CustomerId = :customerId) \" \n+                             +  \"and   (o1.DistrictId = :districtId) \" \n+                             +  \"and   (o1.WarehouseId = :warehouseId))) \" \n+                        +  \"and (o.CustomerId = :customerId) \"\n+                        +  \"and (o.DistrictId = :districtId) \"\n+                        +  \"and (o.WarehouseId = :warehouseId)\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());\n+        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+    }\n+    \n+    public void testPartiallyRepeatedParameterInSubquery() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql =  \"select o from OrderJPA o \" \n+                             + \"where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 \"\n+                             +  \"where ((o1.CustomerId = :customerId) \" \n+                             +  \"and   (o1.WarehouseId = :warehouseId))) \" \n+                        +  \"and (o.CustomerId = :customerId) \"\n+                        +  \"and (o.DistrictId = :districtId) \"\n+                        +  \"and (o.WarehouseId = :warehouseId)\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());\n+        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+    }\n+    \n+    public void testPartiallyRepeatedParameterInMainquery() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql =  \"select o from OrderJPA o \" \n+                             + \"where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 \"\n+                             +  \"where ((o1.CustomerId = :customerId) \" \n+                             +  \"and   (o1.DistrictId = :districtId) \" \n+                             +  \"and   (o1.WarehouseId = :warehouseId))) \" \n+                        +  \"and (o.CustomerId = :customerId) \"\n+                        +  \"and (o.WarehouseId = :warehouseId)\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());\n+        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+    }\n+\n+\n     \n     PreparedQueryCache getPreparedQueryCache() {\n         return emf.getConfiguration().getQuerySQLCacheInstance();"},{"sha":"6231182dd02ce862555a151af243983fb504ad05","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/15c64cb8f4db54346a10cc5c9183b3343db5c0b5/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=15c64cb8f4db54346a10cc5c9183b3343db5c0b5","patch":"@@ -207,6 +207,7 @@\n \t\t<class>org.apache.openjpa.persistence.jdbc.sqlcache.Merchandise</class>\n \t\t<class>org.apache.openjpa.persistence.jdbc.sqlcache.Person</class>\n \t\t<class>org.apache.openjpa.persistence.jdbc.sqlcache.Singer</class>\n+        <class>org.apache.openjpa.persistence.jdbc.sqlcache.OrderJPA</class>\n \t\t\n \t\t<properties>\n \t\t  <property name=\"openjpa.jdbc.QuerySQLCache\""}]}

