{"sha":"1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","node_id":"MDY6Q29tbWl0MjA2MzY0OjE2NzljMDVjODkyMDNmOWQ4ZDBjM2YxZWExY2ZkYzY0OTQzNTY0YTU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-28T17:43:35Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-28T17:43:35Z"},"message":"Cleanup and fixes to changes for OPENJPA-168.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@523425 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b5c325aee788fd6d059e6383adb84239857da325","url":"https://api.github.com/repos/apache/openjpa/git/trees/b5c325aee788fd6d059e6383adb84239857da325"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","html_url":"https://github.com/apache/openjpa/commit/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/comments","author":null,"committer":null,"parents":[{"sha":"3a5d06436c7528885763e69ae6eee539fedb668e","url":"https://api.github.com/repos/apache/openjpa/commits/3a5d06436c7528885763e69ae6eee539fedb668e","html_url":"https://github.com/apache/openjpa/commit/3a5d06436c7528885763e69ae6eee539fedb668e"}],"stats":{"total":336,"additions":123,"deletions":213},"files":[{"sha":"5c4863952e7294416c08cd34126183bc0676c1a6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -43,7 +43,6 @@\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.LockManager;\n@@ -363,17 +362,14 @@ private Boolean customLoad(OpenJPAStateManager sm, ClassMapping mapping,\n      * null if there is no data in the current fetch groups to select.\n      */\n     private Result getInitializeStateResult(OpenJPAStateManager sm,\n-            ClassMapping mapping, JDBCFetchConfiguration fetch, int subs)\n-    throws SQLException {\n+        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs)\n+        throws SQLException {\n         Select sel = _sql.newSelect();\n         if (!select(sel, mapping, subs, sm, null, fetch,\n-                JDBCFetchConfiguration.EAGER_JOIN, true, false))\n+            JDBCFetchConfiguration.EAGER_JOIN, true, false))\n             return null;\n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n-        // Set the expectedResultCount for the select as 1 as a single\n-        // object is being loaded. force = true is an indicator that it is \n-        // internally generated value\n-        sel.setExpectedResultCount(1,true);\n+        sel.setExpectedResultCount(1, false);\n         return sel.execute(this, fetch);\n     }\n \n@@ -389,7 +385,7 @@ private Result getInitializeStateUnionResult(final OpenJPAStateManager sm,\n             JDBCFetchConfiguration.EAGER_JOIN);\n \n         Union union = _sql.newUnion(mappings.length);\n-        union.setExpectedResultCount(1,true);\n+        union.setExpectedResultCount(1, false);\n         if (fetch.getSubclassFetchMode(mapping) != fetch.EAGER_JOIN)\n             union.abortUnion();\n         union.select(new Union.Selector() {"},{"sha":"e4b558d40d402f44cf3c518dae64332d7f0b3bd2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -310,32 +310,25 @@ private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n         List selMappings, boolean subclasses, BitSet subclassBits,\n         BitSet nextBits, ExpressionFactory[] facts, QueryExpressions[] exps,\n         QueryExpressionsState[] states, ExpContext ctx, int subclassMode) {\n+        Number optHint = (Number) ctx.fetch.getHint\n+            (QueryHints.HINT_RESULT_COUNT);\n         ClassMapping[] verts;\n         boolean unionable = true;\n         Select sel;\n-        Object optHint = null;\n         for (int i = 0; i < mappings.length; i++) {\n             // determine vertical mappings to select separately\n             verts = getVerticalMappings(mappings[i], subclasses, exps[i],\n                 subclassMode);\n             if (verts.length == 1 && subclasses)\n                 subclassBits.set(sels.size());\n+\n             // create criteria select and clone for each vert mapping\n             sel = ((JDBCExpressionFactory) facts[i]).getSelectConstructor().\n                 evaluate(ctx, null, null, exps[i], states[i]);\n-            // It means it is coming from getSingleResult so set the \n-            // expectedResultCount to 1.force = true indicates that this is \n-            // internally generated value\n-            if (this.ctx.isUnique())\n-                sel.setExpectedResultCount(1,true);\n-            // It means this is coming from getResultList so set the \n-            // expectedResultCount based on any optimize hint if provided\n-            else {\n-                if ((optHint = ctx.fetch.getHint\n-                              (QueryHints.HINT_RESULT_COUNT))!= null)\n-                   sel.setExpectedResultCount\n-                   (((Integer)optHint).intValue(),false);\n-            }\n+            if (optHint != null)\n+               sel.setExpectedResultCount(optHint.intValue(), true);\n+            else if (this.ctx.isUnique())\n+                sel.setExpectedResultCount(1, false);\n             for (int j = 0; j < verts.length; j++) {\n                 selMappings.add(verts[j]);\n                 if (j == verts.length - 1) {"},{"sha":"91ea0d64e3af8d15658afaedb1a4fb7c55e7d5a4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -236,9 +236,8 @@ protected Object value(final Object obj) {\n         final JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n         final ClassMapping[] clss = _strat.getIndependentValueMappings(true);\n         final Joins[] resJoins = new Joins[Math.max(1, clss.length)];\n-        Union union = store.getSQLFactory().newUnion\n-            (Math.max(1, clss.length));\n-        union.setExpectedResultCount(1,true);\n+        Union union = store.getSQLFactory().newUnion(Math.max(1, clss.length));\n+        union.setExpectedResultCount(1, false);\n         if (fetch.getSubclassFetchMode(_strat.getFieldMapping().\n             getElementMapping().getTypeMapping())\n             != JDBCFetchConfiguration.EAGER_JOIN)"},{"sha":"aac23845a47fbd6945599a43ca452a3c2847c7c2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -578,7 +578,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         // back to our fk table if not an inverse mapping (in which case we\n         // can just make sure the inverse cols == our pk values)\n         Union union = store.getSQLFactory().newUnion(rels.length);\n-        union.setExpectedResultCount(1,true);\n+        union.setExpectedResultCount(1, false);\n         if (fetch.getSubclassFetchMode(field.getTypeMapping())\n             != JDBCFetchConfiguration.EAGER_JOIN)\n             union.abortUnion();"},{"sha":"02a9d7137a1b9a49c179d95f5e7ac9b6f818d5bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":9,"deletions":55,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -28,9 +28,10 @@\n  */\r\n public class DB2Dictionary\r\n     extends AbstractDB2Dictionary {\r\n-    // variables to support optimize clause\r\n+\r\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n+\r\n     public DB2Dictionary() {\r\n         platform = \"DB2\";\r\n         validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\r\n@@ -197,60 +198,13 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n         }\r\n     }\r\n     \r\n-    /** Based on the expectedResultCount of the select create the optimize\r\n-     *  for clause\r\n-     */ \r\n-    public String getOptimizeClause(JDBCFetchConfiguration fetch, \r\n-            int expectedResultCount) {\r\n-        Integer rows = null;\r\n-        StringBuffer optimizeString = new StringBuffer();\r\n-        if (expectedResultCount != 0)\r\n-            optimizeString.append(\" \").append(optimizeClause).append(\" \")\r\n-            .append(expectedResultCount).append(\" \")\r\n-            .append(rowClause).append(\" \");\r\n-        return optimizeString.toString();    \r\n-    }\r\n-\r\n-    /** Override the DBDictionary toSelect to call getOptimizeClause and append \r\n-    *   to the select string\r\n-    */   \r\n-    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\r\n-            SQLBuffer from, SQLBuffer where, SQLBuffer group,\r\n-            SQLBuffer having, SQLBuffer order,\r\n-            boolean distinct, boolean forUpdate, long start, long end,\r\n-            int expectedResultCount) {\r\n-        String optimizeString = null;\r\n-        SQLBuffer selString = toOperation(getSelectOperation(fetch), \r\n-                selects, from, where,\r\n-                group, having, order, distinct,\r\n-                forUpdate, start, end);\r\n-        if (fetch != null)\r\n-            optimizeString = getOptimizeClause(fetch, expectedResultCount);\r\n-        if (optimizeString != null && optimizeString.length() > 0)\r\n-            selString.append(optimizeString);\r\n-        return selString;\r\n-    }\r\n-    \r\n-    /** Override the DBDictionary toSelect to pass expectedResultcount to the \r\n-     * other toSelect method\r\n-     */\r\n     public SQLBuffer toSelect(Select sel, boolean forUpdate,\r\n-            JDBCFetchConfiguration fetch) {\r\n-        sel.addJoinClassConditions();\r\n-        boolean update = forUpdate && sel.getFromSelect() == null;\r\n-        SQLBuffer select = getSelects(sel, false, update);\r\n-        SQLBuffer ordering = null;\r\n-        if (!sel.isAggregate() || sel.getGrouping() != null)\r\n-            ordering = sel.getOrdering();\r\n-        SQLBuffer from;\r\n-        if (sel.getFromSelect() != null)\r\n-            from = getFromSelect(sel, forUpdate);\r\n-        else\r\n-            from = getFrom(sel, update);\r\n-        SQLBuffer where = getWhere(sel, update);\r\n-        return toSelect(select, fetch, from, where, sel.getGrouping(),\r\n-                sel.getHaving(), ordering, sel.isDistinct(), forUpdate,\r\n-                sel.getStartIndex(), \r\n-                sel.getEndIndex(),sel.getExpectedResultCount());\r\n+        JDBCFetchConfiguration fetch) {\r\n+        SQLBuffer buf = super.toSelect(sel, forUpdate, fetch); \r\n+        if (sel.getExpectedResultCount() > 0)\r\n+            buf.append(\" \").append(optimizeClause).append(\" \").\r\n+                append(String.valueOf(sel.getExpectedResultCount())).\r\n+                append(\" \").append(rowClause);\r\n+        return buf;\r\n     }\r\n }\r"},{"sha":"762b4aed144a157c56f0b5c0c4d75a5233043699","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":16,"deletions":32,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -47,8 +47,7 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (LogicalUnion.class);\n-    protected int expectedResultCount = 0;\n-    protected boolean force = false;\n+\n     protected final UnionSelect[] sels;\n     protected final DBDictionary dict;\n     protected final ClassMapping[] mappings;\n@@ -157,6 +156,16 @@ public void setLRS(boolean lrs) {\n             sels[i].setLRS(lrs);\n     }\n \n+    public int getExpectedResultCount() {\n+        return sels[0].getExpectedResultCount();\n+    }\n+    \n+    public void setExpectedResultCount(int expectedResultCount,\n+        boolean force) {\n+        for (int i = 0; i < sels.length; i++)\n+            sels[i].setExpectedResultCount(expectedResultCount, force);\n+    }\n+\n     public int getJoinSyntax() {\n         return sels[0].getJoinSyntax();\n     }\n@@ -208,13 +217,9 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n             return res;\n         }\n \n-        if (this.getExpectedResultCount()== 1) {\n+        if (getExpectedResultCount() == 1) {\n             AbstractResult res;\n             for (int i = 0; i < sels.length; i++) {\n-                // For each select set the expected result count to 1\n-                // and force true indicating that this internally generated \n-                // value\n-                sels[i].sel.setExpectedResultCount(1,true);\n                 res = (AbstractResult) sels[i].execute(store, fetch,\n                     lockLevel);\n                 res.setBaseMapping(mappings[i]);\n@@ -302,8 +307,6 @@ public String toString() {\n         protected final int pos;\n         protected int orders = 0;\n         protected List orderIdxs = null;\n-        protected int expectedResultCount = 0;\n-        protected boolean force = false;\n        \n         public UnionSelect(SelectImpl sel, int pos) {\n             this.sel = sel;\n@@ -839,17 +842,12 @@ public String toString() {\n         }\n \n         public int getExpectedResultCount() {\n-            return expectedResultCount;\n+            return sel.getExpectedResultCount();\n         }\n \n-        public void setExpectedResultCount(int expectedResultCount,\n-                boolean force) {\n-            this.expectedResultCount = expectedResultCount;\n-            this.force = force;\n-        }\n-        \n-        public boolean isExpRsltCntForced() {\n-            return force;\n+        public void setExpectedResultCount(int expectedResultCount, \n+            boolean force) {\n+            sel.setExpectedResultCount(expectedResultCount, force);\n         }\n     }\n \n@@ -931,18 +929,4 @@ public int compare(Object o1, Object o2) {\n             return a1.length - a2.length;\n         }\n     }\n-\n-    public int getExpectedResultCount() {\n-        return expectedResultCount;\n-    }\n-    \n-    public void setExpectedResultCount(int expectedResultCount,\n-            boolean force) {\n-        this.expectedResultCount = expectedResultCount;\n-        this.force = force;\n-    }\n-    \n-    public boolean isExpRsltCntForced() {\n-        return force;\n-    }\n }"},{"sha":"d3dddf1dfd626bad28998eb63e1bd0a4d2791b86","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -78,6 +78,19 @@\n      * result set.\n      */\n     public void setLRS(boolean lrs);\n+    \n+    /**\n+     * The expected result count for the query.\n+     */\n+    public int getExpectedResultCount();\n+\n+    /**\n+     * The expected result count for the query.\n+     *\n+     * @param force if false, the count will be discarded if this select has\n+     * any to-many eager joins that would throw off the result count\n+     */\n+    public void setExpectedResultCount(int expectedResultCount, boolean force);\n \n     /**\n      * The join syntax for this select, as one of the syntax constants from\n@@ -119,21 +132,4 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch)\n     public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n         int lockLevel)\n         throws SQLException;\n-    \n-    /**\n-     * Return the expected result count for the query\n-     */\n-    public int getExpectedResultCount() ;\n-\n-    /**\n-     * Set the expected result count for the query\n-     * force indicates whether the count is internally generated\n-     * or given by the user as optimize hint\n-     */\n-    public void setExpectedResultCount(int expectedResultCount,boolean force) ;\n-\n-    /**\n-     * Indicates whether the expectedResultCount is internally generated\n-     */\n-    public boolean isExpRsltCntForced();\n }"},{"sha":"c118195d6f7cba729031e62c43c678162e9806db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":20,"deletions":31,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -82,6 +82,7 @@\n     private static final int EAGER_TO_MANY = 2 << 10;\n     private static final int RECORD_ORDERED = 2 << 11;\n     private static final int GROUPING = 2 << 12;\n+    private static final int FORCE_COUNT = 2 << 13;\n \n     private static final String[] TABLE_ALIASES = new String[16];\n     private static final String[] ORDER_ALIASES = new String[16];\n@@ -128,6 +129,7 @@\n     private int _nullIds = 0;\n     private int _orders = 0;\n     private int _placeholders = 0;\n+    private int _expectedResultCount = 0;\n \n     // query clauses\n     private SQLBuffer _ordering = null;\n@@ -153,9 +155,6 @@\n     // from select if this select selects from a tmp table created by another\n     private SelectImpl _from = null;\n     private SelectImpl _outer = null;\n-    \n-    private int expectedResultCount = 0;\n-    private boolean force = false;\n      \n     /**\n      * Helper method to return the proper table alias for the given alias index.\n@@ -245,6 +244,22 @@ public void setLRS(boolean lrs) {\n             _flags &= ~LRS;\n     }\n \n+    public int getExpectedResultCount() {\n+        // if the count isn't forced and we have to-many eager joins that could\n+        // throw the count off, don't pay attention to it\n+        if ((_flags & FORCE_COUNT) == 0 && hasEagerJoin(true))\n+            return 0;\n+        return _expectedResultCount;\n+    }\n+\n+    public void setExpectedResultCount(int expectedResultCount, boolean force) {\n+        _expectedResultCount = expectedResultCount;\n+        if (force)\n+            _flags |= FORCE_COUNT;\n+        else \n+            _flags &= ~FORCE_COUNT;\n+    }\n+\n     public int getJoinSyntax() {\n         return _joinSyntax;\n     }\n@@ -307,20 +322,6 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n         JDBCFetchConfiguration fetch, int lockLevel)\n         throws SQLException {\n         boolean forUpdate = false;\n-        \n-        // ExpectedResultCount = 1 and force means that it is internally  \n-        // generated value for getSingleResult,single valued relationship. \n-        // We need to check if there are any eager joins in the select if  \n-        // there are then the optimize for 1 row clause is not generated  \n-        // else we do. if !force then it is set by the user through hint  \n-        // and we do not check the eager joins\n-        if (this.expectedResultCount == 1 && force ) {\n-            if (this.hasEagerJoin(true))\n-                this.setExpectedResultCount(0,false);\n-            else\n-                this.setExpectedResultCount(1,false); \n-        }\n-\n         if (!isAggregate() && _grouping == null) {\n             JDBCLockManager lm = store.getLockManager();\n             if (lm != null)\n@@ -1503,6 +1504,7 @@ public SelectExecutor whereClone(int sels) {\n             sel._flags &= ~LRS;\n             sel._flags &= ~EAGER_TO_ONE;\n             sel._flags &= ~EAGER_TO_MANY;\n+            sel._flags &= ~FORCE_COUNT;\n             sel._joinSyntax = _joinSyntax;\n             if (_aliases != null)\n                 sel._aliases = new HashMap(_aliases);\n@@ -1548,6 +1550,7 @@ public SelectExecutor fullClone(int sels) {\n         for (int i = 0; i < sels; i++) {\n             sel = (SelectImpl) whereClone(1);\n             sel._flags = _flags;\n+            sel._expectedResultCount = _expectedResultCount;\n             sel._selects.addAll(_selects);\n             if (_ordering != null)\n                 sel._ordering = new SQLBuffer(_ordering);\n@@ -2816,20 +2819,6 @@ public void clear() {\n             _idents = null;\n         }\n     }\n-\n-    public int getExpectedResultCount() {\n-        return expectedResultCount;\n-    }\n-\n-    public void setExpectedResultCount(int expectedResultCount,\n-            boolean force) {\n-        this.expectedResultCount = expectedResultCount;\n-        this.force = force;\n-    }\n-\n-    public boolean isExpRsltCntForced() {\n-        return force;\n-    }\n }\n \n /**"},{"sha":"80b1c796be7301622c43446e9ecca58805ea5bcd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","status":"modified","additions":28,"deletions":25,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryHints.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -1,25 +1,28 @@\n-/*\r\n- * Copyright 2006 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.openjpa.kernel;\r\n-\r\n-public interface QueryHints {\r\n-    \r\n-    /** Hint to specify the number of rows for the optimize\r\n-     * clause for DB2\r\n-     */\r\n-    public static final String HINT_RESULT_COUNT =\r\n-        \"openjpa.hint.OptimizeResultCount\";\r\n-}\r\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.kernel;\n+\n+/**\n+ * Standard query hint keys.\n+ */\n+public interface QueryHints {\n+    \n+    /** \n+     * Hint to specify the number of rows to optimize for.\n+     */\n+    public static final String HINT_RESULT_COUNT =\n+        \"openjpa.hint.OptimizeResultCount\";\n+}"},{"sha":"be23214de6e8384de174dd162de2778b19e21d07","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -1273,14 +1273,17 @@ private Object singleResult(ResultObjectProvider rop,\n             boolean next = rop.next();\n \n             // extract single result; throw an exception if multiple results\n-            // match and not constrainted by range, as per spec\n+            // match and not constrainted by range, or if a unique query with\n+            // no results\n             Object single = null;\n             if (next) {\n                 single = rop.getResultObject();\n                 if (range.end != range.start + 1 && rop.next())\n                     throw new InvalidStateException(_loc.get(\"not-unique\",\n                         _class, _query));\n-            }\n+            } else if (_unique == Boolean.TRUE)\n+                throw new InvalidStateException(_loc.get(\"no-result\", \n+                    _class, _query));\n \n             // if unique set to false, use collection\n             if (_unique == Boolean.FALSE) {\n@@ -1289,10 +1292,6 @@ private Object singleResult(ResultObjectProvider rop,\n                 // Collections.singletonList is JDK 1.3, so...\n                 return Arrays.asList(new Object[]{ single });\n             }\n-             \n-            if (single == null)\n-                throw new InvalidStateException(_loc.get(\"is-null\",\n-                        _class, _query));\n             \n             // return single result\n             return single;"},{"sha":"e9e8ab50cd0c27c170de193024d27c04400f2b1d","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -259,7 +259,7 @@ executing-query-with-params: Executing query: [{0}] with parameters: {1}\n not-unique: The query on candidate type \"{0}\" with filter \"{1}\" was \\\n \tconfigured to have a unique result, but more than one instance matched \\\n \tthe query.\n-is-null: The query on candidate type \"{0}\" with filter \"{1}\" was \\\n+no-result: The query on candidate type \"{0}\" with filter \"{1}\" was \\\n \tconfigured to have a unique result, but no instance matched \\\n \tthe query.\n serialized: Queries that have been serialized do not support this operation."},{"sha":"44565ff5630c1cf263bb60f1f5e0c584df586920","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -279,12 +279,12 @@ public List getResultList() {\n      */\n     public Object getSingleResult() {\n         _em.assertNotCloseInvoked();\n-        // Indicate that this query returns single result.Later copied into\n-        // select.expectedResultCount\n+        // temporarily set query to unique so that a single result is validated\n+        // and returned; unset again in case the user executes query again\n+        // via getResultList\n         _query.setUnique(true);\n         try {\n-            Object ob = execute();\n-            return ob;\n+            return execute();\n         } finally {\n             _query.setUnique(false);\n         }\n@@ -367,29 +367,25 @@ else if (\"FilterListeners\".equals(k)) {\n                 Filters.hintToSetter(getFetchPlan(), k, value);\n             } else if (k.startsWith(\"hint.\")) {\n                 if (\"hint.OptimizeResultCount\".equals(k)) {\n-                    if ((!(value instanceof String)&&! (value instanceof Integer))\n-                            || (value instanceof String &&(Integer.parseInt\n-                                    ((String)value)< 0))||\n-                                    ((value instanceof Integer)\n-                                            && (((Integer)value).intValue()<0)))\n+                    if (value instanceof String) {\n+                        try {\n+                            value = new Integer((String) value);\n+                        } catch (NumberFormatException nfe) {\n+                        }\n+                    }\n+                    if (!(value instanceof Number) \n+                        || ((Number) value).intValue() < 0)\n                         throw new ArgumentException(_loc.get\n-                                (\"bad-hint-value\", key),\n-                                null, null, false);\n-                    if (value instanceof String)\n-                        value = new Integer((String)value);\n+                            (\"bad-query-hint-value\", key, value), null, null, \n+                            false);\n                 }\n                 _query.getFetchConfiguration().setHint(key, value);\n             }\n             else\n                 throw new ArgumentException(_loc.get(\"bad-query-hint\", key),\n                     null, null, false);\n             return this;\n-        }\n-         catch (NumberFormatException e1) {\n-            throw new ArgumentException(_loc.get(\"bad-hint-value\", key),\n-                    null, null, false); \n-        }\n-         catch (Exception e) {\n+        } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n     }"},{"sha":"1601f8f3c97857dcbc901e0d84a7a9ba6945ae50","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1679c05c89203f9d8d0c3f1ea1cfdc64943564a5/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=1679c05c89203f9d8d0c3f1ea1cfdc64943564a5","patch":"@@ -64,6 +64,7 @@ mult-results: Query returned multiple results: \"{0}\".\n no-pos-named-params-mix: Cannot mix named and positional parameters in query \\\n \t\"{0}\".\n bad-query-hint: \"{0}\" is not a recognized query hint.\n+bad-query-hint-value: Invalid value specified for query hint \"{0}\": {1}\n detached: Cannot perform this operation on detached entity \"{0}\".\n removed: Cannot perform this operation on removed entity \"{0}\".\n bad-alias: There is no known entity class for entity name \"{0}\".  It is \\"}]}

