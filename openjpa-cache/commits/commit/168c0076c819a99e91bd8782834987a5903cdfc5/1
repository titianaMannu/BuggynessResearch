{"sha":"168c0076c819a99e91bd8782834987a5903cdfc5","node_id":"MDY6Q29tbWl0MjA2MzY0OjE2OGMwMDc2YzgxOWE5OWU5MWJkODc4MjgzNDk4N2E1OTAzY2RmYzU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-20T20:37:08Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-20T20:37:08Z"},"message":"OPENJPA-263 : Introducing getAll(List) method for data cache to be called by loadAll() \nwill allow data cache plug-ins to leverage the advantage of any third-party cache that\nprovides a way to get multiple object in one call by providing a list of keys (oids).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@558125 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d6952be81b7d287ff3b942104bec893e2f9c7c76","url":"https://api.github.com/repos/apache/openjpa/git/trees/d6952be81b7d287ff3b942104bec893e2f9c7c76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/168c0076c819a99e91bd8782834987a5903cdfc5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/168c0076c819a99e91bd8782834987a5903cdfc5","html_url":"https://github.com/apache/openjpa/commit/168c0076c819a99e91bd8782834987a5903cdfc5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/168c0076c819a99e91bd8782834987a5903cdfc5/comments","author":null,"committer":null,"parents":[{"sha":"a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","url":"https://api.github.com/repos/apache/openjpa/commits/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82","html_url":"https://github.com/apache/openjpa/commit/a5d1acd44ec6f9a2a47d7fcda05bd51ae9ab9a82"}],"stats":{"total":195,"additions":160,"deletions":35},"files":[{"sha":"82a10701a88de2cf5a5986d90be182c173c65797","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=168c0076c819a99e91bd8782834987a5903cdfc5","patch":"@@ -21,7 +21,10 @@\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.event.RemoteCommitEvent;\n@@ -439,4 +442,14 @@ protected void fireEvent(Object event, Object listener) {\n                 log.warn(s_loc.get(\"exp-listener-ex\"), e);\n \t\t}\n \t}\n+\n+    /**\n+     * Returns the objects for the given key List.\n+     */\n+    public Map getAll(List keys) {\n+        Map resultMap = new HashMap(keys.size());\n+        for(int i=0; i<keys.size(); i++)\n+            resultMap.put(keys.get(i), get(keys.get(i)));\n+        return resultMap;\n+    }\n }"},{"sha":"cb3d09c62a10700e7a0c0399a7606bce54ac99c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java?ref=168c0076c819a99e91bd8782834987a5903cdfc5","patch":"@@ -20,6 +20,7 @@\n \n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.openjpa.lib.util.Closeable;\n@@ -258,4 +259,9 @@ public void commit(Collection additions, Collection newUpdates,\n      * Free the resources used by this cache.\n \t */\n \tpublic void close ();\n+    \n+    /**\n+\t * returns objects from the caches for a given list of keys\n+     */\n+    public Map getAll(List keys);\n }"},{"sha":"0f9353d8937e731f152389cd821dc8cf2c95ce0f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":51,"deletions":19,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=168c0076c819a99e91bd8782834987a5903cdfc5","patch":"@@ -41,6 +41,7 @@\n import org.apache.openjpa.kernel.StoreQuery;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.util.OpenJPAId;\n import org.apache.openjpa.util.OptimisticException;\n \n /**\n@@ -409,6 +410,8 @@ public Collection loadAll(Collection sms, PCState state, int load,\n             return super.loadAll(sms, state, load, fetch, edata);\n \n         Map unloaded = null;\n+        List smList = null;\n+        Map caches = new HashMap();\n         OpenJPAStateManager sm;\n         DataCache cache;\n         DataCachePCData data;\n@@ -422,29 +425,58 @@ public Collection loadAll(Collection sms, PCState state, int load,\n                 continue;\n             }\n \n-            if (sm.getManagedInstance() == null) {\n-                data = cache.get(sm.getObjectId());\n-                if (data != null) {\n-                    //### the 'data.type' access here probably needs\n-                    //### to be addressed for bug 511\n-                    sm.initialize(data.getType(), state);\n-                    data.load(sm, fetch, edata);\n-                } else\n-                    unloaded = addUnloaded(sm, null, unloaded);\n-            } else if (load != FORCE_LOAD_NONE\n+            if (sm.getManagedInstance() == null\n+                || load != FORCE_LOAD_NONE\n                 || sm.getPCState() == PCState.HOLLOW) {\n-                data = cache.get(sm.getObjectId());\n-                if (data != null) {\n-                    // load unloaded fields\n-                    fields = sm.getUnloaded(fetch);\n-                    data.load(sm, fields, fetch, edata);\n-                    if (fields.length() > 0)\n-                        unloaded = addUnloaded(sm, fields, unloaded);\n-                } else\n-                    unloaded = addUnloaded(sm, null, unloaded);\n+                smList = (List) caches.get(cache);\n+                if (smList == null) {\n+                    smList = new ArrayList();\n+                    caches.put(cache, smList);\n+                }\n+                smList.add(sm);\n             } else if (!cache.contains(sm.getObjectId()))\n                 unloaded = addUnloaded(sm, null, unloaded);\n         }\n+        \n+        for (Iterator itr = caches.keySet().iterator(); itr.hasNext();) {\n+            cache = (DataCache) itr.next();\n+            smList = (List) caches.get(cache);\n+            List oidList = new ArrayList(smList.size());\n+\n+            for (itr=smList.iterator();itr.hasNext();) {\n+                sm = (OpenJPAStateManager) itr.next();\n+                oidList.add((OpenJPAId) sm.getObjectId());\n+            }\n+            \n+            Map dataMap = cache.getAll(oidList);\n+\n+            for (itr=smList.iterator();itr.hasNext();) {\n+                sm = (OpenJPAStateManager) itr.next();\n+                data = (DataCachePCData) dataMap.get(\n+                        (OpenJPAId) sm.getObjectId());\n+\n+                if (sm.getManagedInstance() == null) {\n+                    if (data != null) {\n+                        //### the 'data.type' access here probably needs\n+                        //### to be addressed for bug 511\n+                        sm.initialize(data.getType(), state);\n+                        data.load(sm, fetch, edata);\n+                    } else\n+                        unloaded = addUnloaded(sm, null, unloaded);\n+                } else if (load != FORCE_LOAD_NONE\n+                        || sm.getPCState() == PCState.HOLLOW) {\n+                    data = cache.get(sm.getObjectId());\n+                    if (data != null) {\n+                        // load unloaded fields\n+                        fields = sm.getUnloaded(fetch);\n+                        data.load(sm, fields, fetch, edata);\n+                        if (fields.length() > 0)\n+                            unloaded = addUnloaded(sm, fields, unloaded);\n+                    } else\n+                        unloaded = addUnloaded(sm, null, unloaded);\n+                }\n+            }\n+        }\n \n         if (unloaded == null)\n             return Collections.EMPTY_LIST;"},{"sha":"8db30d3a95514238157f751d250be97eb8cc8d3f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java?ref=168c0076c819a99e91bd8782834987a5903cdfc5","patch":"@@ -20,6 +20,8 @@\n \n import java.util.BitSet;\n import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n \n import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n@@ -333,4 +335,14 @@ public void close() {\n             throw translate(re);\n \t\t}\n \t}\n+\n+    public Map getAll(List keys) {\n+        if (_cache == null)\n+            return null;\n+        try {\n+            return _cache.getAll(keys);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"6bf11e427db04f10173d18d8a292375a7ae31ff8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":68,"deletions":14,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=168c0076c819a99e91bd8782834987a5903cdfc5","patch":"@@ -75,9 +75,8 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n             case JavaTypes.COLLECTION:\n                 ProxyDataList c = (ProxyDataList) data;\n                 Collection c2 = (Collection) sm.newFieldProxy(fmd.getIndex());\n-                for (int i = 0; i < c.size(); i++)\n-                    c2.add(toNestedField(sm, fmd.getElement(), c.get(i),\n-                        fetch, context));\n+                c2 = toNestedFields(sm, fmd.getElement(), (Collection) data,\n+                    fetch, context);\n                 if (c2 instanceof Proxy) {\n                     ChangeTracker ct = ((Proxy) c2).getChangeTracker();\n                     if (ct != null)\n@@ -87,17 +86,18 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n             case JavaTypes.MAP:\n                 Map m = (Map) data;\n                 Map m2 = (Map) sm.newFieldProxy(fmd.getIndex());\n-                Map.Entry e;\n-                Object key;\n-                Object value;\n-                for (Iterator mi = m.entrySet().iterator(); mi.hasNext();) {\n-                    e = (Map.Entry) mi.next();\n-                    key = toNestedField(sm, fmd.getKey(), e.getKey(),\n-                        fetch, context);\n-                    value = toNestedField(sm, fmd.getElement(), e.getValue(),\n-                        fetch, context);\n-                    m2.put(key, value);\n-                }\n+                Collection keys = new ArrayList (m.size());\n+\n+                for (Iterator mi = m.entrySet().iterator(); mi.hasNext();)\n+                    keys.add(mi.next());\n+\n+                Object[] keyArray = keys.toArray();\n+                Object[] values = toNestedFields(sm, fmd.getElement(),\n+                    keys, fetch, context).toArray();\n+                int idx = 0;\n+                for (Iterator mi = m.entrySet().iterator(); mi.hasNext(); idx++)\n+                    m2.put(keyArray[idx], values[idx]);\n+\n                 return m2;\n             case JavaTypes.ARRAY:\n                 int length = Array.getLength(data);\n@@ -151,6 +151,51 @@ protected Object toNestedField(OpenJPAStateManager sm, ValueMetaData vmd,\n         }\n     }\n \n+    /**\n+     * Transform the given data value to its field value. The data value\n+     * may be a key, value, or element of a map or collection.\n+     */\n+    protected Collection toNestedFields(OpenJPAStateManager sm, \n+        ValueMetaData vmd, Collection data, FetchConfiguration fetch,\n+        Object context) {\n+        if (data == null)\n+            return null;\n+\n+        Collection ret = new ArrayList(data.size());\n+        switch (vmd.getDeclaredTypeCode()) {\n+            case JavaTypes.DATE:\n+                for (Iterator itr=data.iterator(); itr.hasNext();)\n+                    ret.add(((Date)itr.next()).clone());\n+                return ret;\n+            case JavaTypes.LOCALE:\n+                for (Iterator itr=data.iterator(); itr.hasNext();)\n+                    ret.add((Locale) itr.next());\n+                return ret;\n+            case JavaTypes.PC:\n+                if (vmd.isEmbedded())\n+                    for (Iterator itr=data.iterator(); itr.hasNext();)\n+                        ret.add(toEmbeddedField(sm, vmd, itr.next(), fetch\n+                            , context));\n+                // no break\n+            case JavaTypes.PC_UNTYPED:\n+                Object[] r = toRelationFields(sm, data, fetch);\n+                if (r != null) {\n+                    for (int i = 0; i < r.length; i++)\n+                        if (r[i] != null)\n+                            ret.add(r[i]);\n+                        else {\n+                           ret.add(sm.getContext().getConfiguration().\n+                               getOrphanedKeyActionInstance().\n+                               orphan(data, sm, vmd));\n+                        }\n+                    return ret;\n+                }\n+            default:\n+                return data;\n+        }\n+    }\n+\n+    \n     /**\n      * Transform the given data into a relation field value. Default\n      * implementation assumes the data is an oid.\n@@ -160,6 +205,15 @@ protected Object toRelationField(OpenJPAStateManager sm, ValueMetaData vmd,\n         return sm.getContext().find(data, fetch, null, null, 0);\n     }\n \n+    /**\n+     * Transform the given data into relation field values. Default\n+     * implementation assumes the data is an oid.\n+     */\n+    protected Object[] toRelationFields(OpenJPAStateManager sm,\n+        Object data, FetchConfiguration fetch) {\n+        return sm.getContext().findAll((Collection) data, fetch, null, null, 0);\n+    }\n+\n     /**\n      * Transform the given data into an embedded PC field value. Default\n      * implementation assumes the data is an {@link AbstractPCData}."},{"sha":"370c5789b344218fc1478855868aba59999d2bfe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=168c0076c819a99e91bd8782834987a5903cdfc5","patch":"@@ -184,6 +184,7 @@\n     private Set _updatedClss = null;\n     private Set _deletedClss = null;\n     private Set _pending = null;\n+    private int findAllDepth = 0;\n \n     // track instances that become transactional after the first savepoint\n     // (the first uses the transactional cache)\n@@ -903,6 +904,8 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n      */\n     protected Object[] findAll(Collection oids, FetchConfiguration fetch,\n         BitSet exclude, Object edata, int flags, FindCallbacks call) {\n+        findAllDepth ++;\n+\n         // throw any exceptions for null oids up immediately\n         if (oids == null)\n             throw new NullPointerException(\"oids == null\");\n@@ -912,7 +915,9 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n         // we have to use a map of oid->sm rather than a simple\n         // array, so that we make sure not to create multiple sms for equivalent\n         // oids if the user has duplicates in the given array\n-        _loading = new HashMap((int) (oids.size() * 1.33 + 1));\n+        if (_loading == null)\n+            _loading = new HashMap((int) (oids.size() * 1.33 + 1));\n+\n         if (call == null)\n             call = this;\n         if (fetch == null)\n@@ -1007,7 +1012,9 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n         } catch (RuntimeException re) {\n             throw new GeneralException(re);\n         } finally {\n-            _loading = null;\n+            findAllDepth--;\n+            if (findAllDepth == 0)\n+                _loading = null;\n             endOperation();\n         }\n     }"},{"sha":"7b3233a7e5335b6227aecd3ad8aabca795a3647c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/168c0076c819a99e91bd8782834987a5903cdfc5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java?ref=168c0076c819a99e91bd8782834987a5903cdfc5","patch":"@@ -136,6 +136,7 @@ public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\n         loadImplData(sm);\n \n         FieldMetaData[] fmds = sm.getMetaData().getFields();\n+        ((StateManagerImpl)sm).setLoading(true);\n         for (int i = 0; i < fmds.length; i++) {\n             // load intermediate data for all unloaded fields and data for\n             // fields in configured fetch groups"}]}

