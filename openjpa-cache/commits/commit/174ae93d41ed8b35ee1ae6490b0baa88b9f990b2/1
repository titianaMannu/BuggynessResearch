{"sha":"174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3NGFlOTNkNDFlZDhiMzVlZTFhZTY0OTBiMGJhYTg4YjlmOTkwYjI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-03T18:36:45Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-03T18:36:45Z"},"message":"MetaDataFactory.newInstance method no longer needed.  Continue work on docs\n(note: docs may temporarily be in invalid state).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@452592 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"89923c5404a8ea323003655c2a1d3fb2ed27ba86","url":"https://api.github.com/repos/apache/openjpa/git/trees/89923c5404a8ea323003655c2a1d3fb2ed27ba86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","html_url":"https://github.com/apache/openjpa/commit/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/comments","author":null,"committer":null,"parents":[{"sha":"f18ea3dd3359f73a9c384e632d6316d639a10b38","url":"https://api.github.com/repos/apache/openjpa/commits/f18ea3dd3359f73a9c384e632d6316d639a10b38","html_url":"https://github.com/apache/openjpa/commit/f18ea3dd3359f73a9c384e632d6316d639a10b38"}],"stats":{"total":790,"additions":474,"deletions":316},"files":[{"sha":"d7b6d98464264f5648f35d05dc648d5e981ed70e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","patch":"@@ -266,14 +266,6 @@ private static Object getQueryResultKey(Class cls, String name) {\n         return getQueryKey(cls, name);\n     }\n \n-    public MetaDataRepository newInstance() {\n-        MappingRepository repos = new MappingRepository();\n-        repos.setConfiguration(getConfiguration());\n-        repos.startConfiguration();\n-        repos.endConfiguration();\n-        return repos;\n-    }\n-\n     public ClassMapping getMapping(Class cls, ClassLoader envLoader,\n         boolean mustExist) {\n         return (ClassMapping) super.getMetaData(cls, envLoader, mustExist);"},{"sha":"1da585b1f4f69ee98dbba3b56cf4f6b89671a728","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","patch":"@@ -146,11 +146,9 @@ public static DecoratingDataSource decorateDataSource(DataSource ds,\n                 ecd.addListener(listeners[i]);\n             decorators.add(ecd);\n \n-            // ask the DriverDataSource to provide any additional\n-            // decorators\n+            // ask the DriverDataSource to provide any additional decorators\n             if (ds instanceof DriverDataSource) {\n-                List decs = ((DriverDataSource) ds).\n-                    createConnectionDecorators();\n+                List decs = ((DriverDataSource)ds).createConnectionDecorators();\n                 if (decs != null)\n                     decorators.addAll(decs);\n             }"},{"sha":"2f850c3084be7029c88c20b3af9d798d3b59b963","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DriverDataSource.java","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DriverDataSource.java?ref=174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","patch":"@@ -30,34 +30,79 @@\n public interface DriverDataSource\n     extends DataSource {\n \n+    /**\n+     * JDBC URL.\n+     */\n     public void setConnectionURL(String connectionURL);\n \n+    /**\n+     * JDBC URL.\n+     */\n     public String getConnectionURL();\n \n+    /**\n+     * Driver class name.\n+     */\n     public void setConnectionDriverName(String connectionDriverName);\n \n+    /**\n+     * Driver class name.\n+     */\n     public String getConnectionDriverName();\n \n+    /**\n+     * JDBC user name.\n+     */\n     public void setConnectionUserName(String connectionUserName);\n \n+    /**\n+     * JDBC user name.\n+     */\n     public String getConnectionUserName();\n \n+    /**\n+     * JDBC password.\n+     */\n     public void setConnectionPassword(String connectionPassword);\n \n+    /**\n+     * JDBC password.\n+     */\n     public void setClassLoader(ClassLoader classLoader);\n \n+    /**\n+     * Classloader for loading driver class, etc.\n+     */\n     public ClassLoader getClassLoader();\n \n+    /**\n+     * Configuration of datasource properties.\n+     */\n     public void setConnectionFactoryProperties(Properties props);\n \n+    /**\n+     * Configuration of datasource properties.\n+     */\n     public Properties getConnectionFactoryProperties();\n \n+    /**\n+     * Configuration of connection.\n+     */\n     public void setConnectionProperties(Properties props);\n \n+    /**\n+     * Configuration of connection.\n+     */\n     public Properties getConnectionProperties();\n \n+    /**\n+     * Provide any built-in decorators; may be null.\n+     */\n     public List createConnectionDecorators();\n \n+    /**\n+     * Initialize self and dictionary once available.\n+     */\n     public void initDBDictionary(DBDictionary dict);\n }\n "},{"sha":"cba51c3658c4783e9455b3a350334532843c8793","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":35,"deletions":33,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","patch":"@@ -23,25 +23,21 @@\n import java.util.List;\n import java.util.Properties;\n \n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.util.StoreException;\n \n /**\n  * Non-pooling driver data source.\n  */\n public class SimpleDriverDataSource\n-    implements DriverDataSource, Configurable {\n+    implements DriverDataSource {\n \n     private String _connectionDriverName;\n     private String _connectionURL;\n     private String _connectionUserName;\n     private String _connectionPassword;\n     private Properties _connectionProperties;\n     private Properties _connectionFactoryProperties;\n-    private JDBCConfiguration _conf;\n     private Driver _driver;\n     private ClassLoader _classLoader;\n \n@@ -68,7 +64,7 @@ public Connection getConnection(String username, String password)\n \n     public Connection getConnection(Properties props)\n         throws SQLException {\n-        return _driver.connect(_conf.getConnectionURL(), props);\n+        return getDriver().connect(_connectionURL, props);\n     }\n \n     public int getLoginTimeout() {\n@@ -85,33 +81,6 @@ public PrintWriter getLogWriter() {\n     public void setLogWriter(PrintWriter out) {\n     }\n \n-    public void setConfiguration(Configuration conf) {\n-        _conf = (JDBCConfiguration) conf;\n-    }\n-\n-    public void startConfiguration() {\n-    }\n-\n-    public void endConfiguration() {\n-        try {\n-            _driver = DriverManager.getDriver(_connectionURL);\n-            if (_driver == null) {\n-                try {\n-                    Class.forName(_connectionDriverName, true, _classLoader);\n-                } catch (Exception e) {\n-                }\n-                _driver = DriverManager.getDriver(_connectionURL);\n-            }\n-            if (_driver == null)\n-                _driver = (Driver) Class.forName(_connectionDriverName,\n-                    true, _classLoader).newInstance();\n-        } catch (Exception e) {\n-            if (e instanceof RuntimeException)\n-                throw(RuntimeException) e;\n-            throw new StoreException(e);\n-        }\n-    }\n-\n     public void initDBDictionary(DBDictionary dict) {\n     }\n \n@@ -170,5 +139,38 @@ public void setConnectionDriverName(String connectionDriverName) {\n     public String getConnectionDriverName() {\n         return _connectionDriverName;\n     }\n+\n+    private Driver getDriver() {\n+        if (_driver != null)\n+            return _driver;\n+\n+        try { \n+            _driver = DriverManager.getDriver(_connectionURL);\n+            if (_driver != null)\n+                return _driver;\n+        } catch (Exception e) {\n+        }\n+\n+        try {\n+            Class.forName(_connectionDriverName, true, _classLoader);\n+        } catch (Exception e) {\n+        }\n+        try {\n+            _driver = DriverManager.getDriver(_connectionURL);\n+            if (_driver != null)\n+                return _driver;\n+        } catch (Exception e) {\n+        }\n+\n+        try {\n+            _driver = (Driver) Class.forName(_connectionDriverName,\n+                true, _classLoader).newInstance();\n+            return _driver;\n+        } catch (Exception e) {\n+            if (e instanceof RuntimeException)\n+                throw(RuntimeException) e;\n+            throw new StoreException(e);\n+        }\n+    }\n }\n "},{"sha":"ab2c11efc73d37e097682842175e421db3edd14d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","patch":"@@ -156,18 +156,6 @@ public Log getLog() {\n         return _log;\n     }\n \n-    /**\n-     * Create a new instance of the same type as this instance, using this\n-     * instance's configuration.\n-     */\n-    public MetaDataRepository newInstance() {\n-        MetaDataRepository repos = new MetaDataRepository();\n-        repos.setConfiguration(_conf);\n-        repos.startConfiguration();\n-        repos.endConfiguration();\n-        return repos;\n-    }\n-\n     /**\n      * The I/O used to load metadata.\n      */"},{"sha":"0dc8a3809ab50a6b8d4baac53cb0061421b43097","filename":"openjpa-project/src/doc/manual/img/string-rel-map.png","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/f18ea3dd3359f73a9c384e632d6316d639a10b38/openjpa-project/src/doc/manual/img/string-rel-map.png","raw_url":"https://github.com/apache/openjpa/raw/f18ea3dd3359f73a9c384e632d6316d639a10b38/openjpa-project/src/doc/manual/img/string-rel-map.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/img/string-rel-map.png?ref=f18ea3dd3359f73a9c384e632d6316d639a10b38"},{"sha":"499caad8da49ac45c9278b95367ef4773389e584","filename":"openjpa-project/src/doc/manual/ref_guide_deploy.xml","status":"modified","additions":177,"deletions":5,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-project/src/doc/manual/ref_guide_deploy.xml","raw_url":"https://github.com/apache/openjpa/raw/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-project/src/doc/manual/ref_guide_deploy.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_deploy.xml?ref=174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","patch":"@@ -13,7 +13,7 @@ turn.\n             Factory Deployment\n         </title>\n         <para>\n-OpenJPA offers several <classname>EntityManagerFactory</classname>\n+OpenJPA offers two <classname>EntityManagerFactory</classname>\n deployment options.\n         </para>\n         <section id=\"ref_guide_deploy_factory_standalone\">\n@@ -44,19 +44,191 @@ Javadoc</ulink> details these extensions.\n             </para>\n             <para>\n After obtaining the factory, you can cache it for all <classname>\n-EntityManager</classname> creation duties.\n+EntityManager</classname> creation duties.  OpenJPA factories support being \n+bound to JNDI as well.\n             </para>\n         </section>\n         <section id=\"ref_guide_deploy_inject\">\n             <title>\n                 EntityManager Injection\n             </title>\n-            <!-- ### -->\n             <para>\n-TBD\n+Java EE 5 application servers allow you to <emphasis>inject</emphasis> \n+entity managers into your session beans using the <literal>PersistenceContext\n+</literal> annotation.  See your application server documentation for details.\n             </para>\n         </section>\n     </section>\n+\t<section id=\"ref_guide_enterprise_trans\">\n+\t\t<title>\n+            Integrating with the Transaction Manager\n+        </title>\n+\t\t<indexterm zone=\"ref_guide_enterprise_trans\">\n+\t\t\t<primary>\n+                transactions\n+            </primary>\n+\t\t\t<secondary>\n+                managed\n+            </secondary>\n+\t\t</indexterm>\n+\t\t<indexterm zone=\"ref_guide_enterprise_trans\">\n+\t\t\t<primary>\n+                TransactionManager\n+            </primary>\n+\t\t\t<secondary>\n+                integration\n+            </secondary>\n+\t\t</indexterm>\n+\t\t<indexterm>\n+\t\t\t<primary>\n+                managed transactions\n+            </primary>\n+\t\t\t<see>\n+                transactions\n+            </see>\n+\t\t</indexterm>\n+\t\t<indexterm>\n+            <primary>\n+                TransactionMode\n+            </primary>\n+        </indexterm>\n+\t\t<para>\n+OpenJPA <classname>EntityManager</classname>s have the ability to automatically\n+synchronize their transactions with an external transaction manager.  \n+###\n+If you \n+deploy via <link linkend=\"ref_guide_deploy_inject\"><classname>EntityManager\n+</classname> injection</link> as described above, this synchronization is\n+typically automatic.   Whether \n+or not <classname>EntityManager</classname>s from a given <classname>\n+EntityManagerFactory</classname> exhibit this behavior by default depends on \n+the <link linkend=\"kodo.TransactionMode\">\n+\t\t<literal>kodo.TransactionMode</literal></link> configuration property.\n+\t\tThe property can take the following values:\n+\t\t</para>\n+\t\t<para condition=\"jdo_notcombo\">\n+\t\tKodo <classname>PersistenceManager</classname>s have the ability \n+\t\tto automatically synchronize their transactions with an external \n+\t\ttransaction manager.  Whether or not <classname>\n+\t\tPersistenceManager</classname>s from a given \n+\t\t<classname>PersistenceManagerFactory</classname> exhibit this behavior \n+\t\tby default depends on the <link linkend=\"kodo.TransactionMode\">\n+\t\t<literal>kodo.TransactionMode</literal></link> configuration property.\n+\t\tThe property can take the following values:\n+\t\t</para>\n+\t\t<para condition=\"combo\">\n+\t\tKodo <classname>EntityManager</classname>s and <classname>\n+\t\tPersistenceManager</classname>s have the ability \n+\t\tto automatically synchronize their transactions with an external \n+\t\ttransaction manager.  Whether or not <classname>\n+\t\tEntityManager</classname>s and <classname>\n+\t\tPersistenceManager</classname>s from a given factory exhibit this \n+\t\tbehavior by default depends on the <link linkend=\"kodo.TransactionMode\">\n+\t\t<literal>kodo.TransactionMode</literal></link> configuration property.\n+\t\tThe property can take the following values:\n+\t\t</para>\n+\t\t<itemizedlist> \n+\t\t\t<listitem>\n+\t\t\t\t<para>\n+\t\t\t\t<literal>local</literal>: Perform transaction operations\n+\t\t\t\tlocally.\n+\t\t\t\t</para>\n+\t\t\t</listitem>\n+\t\t\t<listitem>\n+\t\t\t\t<para>\n+\t\t\t\t<literal>managed</literal>: Integrate with the application\n+\t\t\t\tserver's managed global transactions.  \n+\t\t\t\t</para>\n+\t\t\t</listitem>\n+\t\t</itemizedlist> \n+\t\t<para condition=\"ejb\">\n+\t\tYou can override the global transaction mode setting when you obtain an\n+\t\t<classname>EntityManager</classname> using the \n+\t\t<ulink url=\"&api-dir;/kodo/persistence/KodoEntityManagerFactory.html\">\n+\t\t<classname>KodoEntityManagerFactory</classname></ulink>'s\n+\t\t<methodname>createEntityManager(PersistenceContextType ctype, boolean managed, int connRetainMode)\n+\t\t</methodname> method.\n+\t\t</para>\n+\t\t<para condition=\"jdo\">\n+\t\tYou can override the global transaction mode setting when you obtain a \n+\t\t<classname>PersistenceManager</classname> using the \n+\t\t<ulink url=\"&api-dir;/kodo/jdo/KodoPersistenceManagerFactory.html\">\n+\t\t<classname>KodoPersistenceManagerFactory</classname></ulink>'s\n+\t\t<methodname>getPersistenceManager(boolean managed, int connRetainMode)\n+\t\t</methodname> method.\n+\t\t</para>\n+\t\t<para>\n+\t\t<indexterm><primary>ManagedRuntime</primary></indexterm>\n+\t\tIn order to use global transactions, Kodo must be able to access\n+\t\tthe application server's <classname>javax.transaction.TransactionManager\n+\t\t</classname>.  Kodo can automatically discover the transaction\n+\t\tmanager for most major application servers.  Occasionally, however, \n+\t\tyou might have to point Kodo to the transaction manager for an \n+\t\tunrecognized or non-standard application server setup.  This is \n+\t\taccomplished through the <link linkend=\"kodo.ManagedRuntime\"><literal>\n+\t\tkodo.ManagedRuntime</literal></link> configuration property.  This\n+\t\tproperty describes a \n+\t\t<ulink url=\"&javadoc-dir;/kodo/ee/ManagedRuntime.html\"><classname>\n+\t\tkodo.ee.ManagedRuntime</classname></ulink> implementation to use\n+\t\tfor transaction manager discovery.  You can specify your own \n+\t\timplementation, or use one of the built-ins:\n+\t\t</para>\n+\t\t<itemizedlist>\n+\t\t\t<listitem>\n+\t\t\t\t<para>\n+\t\t\t\t<literal>auto</literal>: This is the default.  It is an alias \n+\t\t\t\tfor the\n+\t\t\t\t<ulink url=\"&javadoc-dir;/kodo/ee/AutomaticManagedRuntime.html\">\n+\t\t\t\t<classname>kodo.ee.AutomaticManagedRuntime</classname></ulink>\n+\t\t\t\tclass.  This managed runtime is able to automatically integrate\n+\t\t\t\twith several common application servers.\n+\t\t\t\t</para>\n+\t\t\t</listitem>\n+\t\t\t<listitem>\n+\t\t\t\t<para>\n+\t\t\t\t<literal>invocation</literal>: An alias for the\n+\t\t\t\t<ulink url=\"&javadoc-dir;/kodo/ee/InvocationManagedRuntime.html\">\n+\t\t\t\t<classname>kodo.ee.InvocationManagedRuntime</classname></ulink>\n+\t\t\t\tclass.  You can configure this runtime to invoke any static\n+\t\t\t\tmethod in order to obtain the appserver's transaction manager.\n+\t\t\t\t</para>\n+\t\t\t</listitem>\n+\t\t\t<listitem>\n+\t\t\t\t<para>\n+\t\t\t\t<literal>jndi</literal>: An alias for the\n+\t\t\t\t<ulink url=\"&javadoc-dir;/kodo/ee/JNDIManagedRuntime.html\">\n+\t\t\t\t<classname>kodo.ee.JNDIManagedRuntime</classname></ulink>\n+\t\t\t\tclass.  You can configure this runtime to look up the\n+\t\t\t\ttransaction manager at any JNDI location.\n+\t\t\t\t</para>\n+\t\t\t</listitem>\n+\t\t</itemizedlist>\n+\t\t<para>\n+\t\tSee the Javadoc for of each class for details on the bean properties \n+\t\tyou can pass to these plugins in your configuration string.  \n+\t\t</para>\n+\t\t&feature-enterprise;\n+\t\t<example id=\"ref_guide_enterprise_transex\">\n+\t\t\t<title>Configuring Transaction Manager Integration</title>\n+\t\t\t<para condition=\"combo\">JPA XML format:</para>\n+<programlisting condition=\"ejb\">\n+<![CDATA[<property name=\"kodo.TransactionMode\" value=\"managed\"/>\n+<property name=\"kodo.ManagedRuntime\" value=\"jndi(TransactionManagerName=java:/TransactionManager)\"/>]]>\n+</programlisting>\n+\t\t\t<para condition=\"combo\">JDO properties format:</para>\n+<programlisting condition=\"jdo\">\n+kodo.TransactionMode: managed\n+kodo.ManagedRuntime: jndi(TransactionManagerName=java:/TransactionManager)\n+</programlisting>\n+\t\t</example>\n+\t\t<para>\n+\t\tNote that even when Kodo is using managed transaction, you can control\n+\t\ttransactions through the specification local transaction APIs if you\n+\t\twish.  Kodo will propagate your transaction calls to the global\n+\t\ttransaction.\n+\t\t</para>\n+\t</section>\n+\n     <section id=\"ref_guide_enterprise_xa\">\n         <title>\n             XA Transactions\n@@ -128,7 +300,7 @@ managed environment. The following components are required:\n                 <listitem>\n                     <para>\n A managed environment that provides an XA compliant transaction manager.\n-Examples of this are application servers such as JBoss and WebLogic.\n+Examples of this are application servers such as WebLogic or JBoss.\n                     </para>\n                 </listitem>\n                 <listitem>"},{"sha":"ea90b538a28e44a95a0e685d1636950e23755f16","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":88,"deletions":254,"changes":342,"blob_url":"https://github.com/apache/openjpa/blob/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","patch":"@@ -46,8 +46,7 @@ specification.\n their corresponding database schema from your object featureSelection. OpenJPA supports\n forward mapping through the <emphasis>mapping tool</emphasis>. The next section\n presents several common mapping tool use cases. You can invoke the tool through\n-the <literal>mappingtool</literal> shell/batch script included in the OpenJPA\n-distribution, or through its Java class,\n+its Java class,\n <ulink url=\"../apidocs/org/apache/openjpa/jdbc/meta/MappingTool\"><classname>\n org.apache.openjpa.jdbc.meta.MappingTool</classname></ulink>.\n         </para>\n@@ -115,7 +114,7 @@ the same-named option on the schema tool.\n             </listitem>\n             <listitem>\n                 <para>\n-<literal>-openjpaTables/-kt &lt;true/t | false/f&gt;</literal>: Corresponds to\n+<literal>-openjpaTables/-ot &lt;true/t | false/f&gt;</literal>: Corresponds to\n the same-named option on the schema tool.\n                 </para>\n             </listitem>\n@@ -184,11 +183,10 @@ the action to take on each class. The available actions are:\n         <itemizedlist>\n             <listitem>\n                 <para>\n-<literal>buildSchema</literal>: This is the default action when using JPA\n-mapping defaults (see <xref linkend=\"ref_guide_mapping_defaults\"/> ). It\n+<literal>buildSchema</literal>: This is the default action. It\n makes the database schema match your existing mappings. If your provided\n-mappings conflict with a class definition, OpenJPA will fail with an informative\n-exception.\n+mappings conflict with your class definitions, OpenJPA will fail with an \n+informative exception.\n                 </para>\n             </listitem>\n             <listitem>\n@@ -222,7 +220,7 @@ The <filename>.class</filename> file of a persistent class.\n         <para>\n If you do not supply any arguments to the mapping tool, it will run on the\n classes in your persistent classes list (see\n-<xref linkend=\"ref_guide_pc_pcclasses\"/> ).\n+<xref linkend=\"ref_guide_pc_pcclasses\"/>).\n         </para>\n         <para>\n The mappings generated by the mapping tool are stored by the system <emphasis>\n@@ -245,13 +243,9 @@ discusses your mapping factory options.\n The JPA specification defines a comprehensive set of defaults for missing\n mapping information. Thus, forward mapping in JPA is virtually automatic. After\n using the mapping annotations covered in <xref linkend=\"jpa_overview_mapping\"/>\n- of the JPA Overview to override any unsatisfactory defaults, run the\n-mapping tool's <literal>buildSchema</literal> action on your persistent classes.\n-This is the default action when you use JPA mapping defaults (see\n-<xref linkend=\"ref_guide_mapping_defaults\"/> ).\n-            </para>\n-            <para>\n-The <literal>buildSchema</literal> action manipulates the database schema to\n+of the JPA Overview to override any unsatisfactory defaults, run the\n+mapping tool on your persistent classes.  The default <literal>buildSchema\n+</literal> mapping tool action manipulates the database schema to\n match your mappings. It fails if any of your mappings don't match your object\n featureSelection.\n             </para>\n@@ -309,21 +303,20 @@ This example uses your existing mappings to determine the needed schema, then\n writes the SQL to create that schema to <filename>create.sql</filename>.\n                 </para>\n <programlisting>\n-java org.apache.openjpa.jdbc.meta.MappingTool -a buildSchema -sa build -sql create.sql Magazine.java\n+java org.apache.openjpa.jdbc.meta.MappingTool -sa build -sql create.sql Magazine.java\n </programlisting>\n             </example>\n             <example id=\"ref_guid_mapping_ddl_part_ddl\">\n                 <title>\n-                    Create DDL to Update Database for Current\n-        Mappings\n+                    Create DDL to Update Database for Current Mappings\n                 </title>\n                 <para>\n This example uses your existing mappings to determine the needed schema. It then\n writes the SQL to add any missing tables and columns to the current schema to\n <filename>update.sql</filename>.\n                 </para>\n <programlisting>\n-java org.apache.openjpa.jdbc.meta.MappingTool -a buildSchema -sql update.sql Magazine.java\n+java org.apache.openjpa.jdbc.meta.MappingTool -sql update.sql Magazine.java\n </programlisting>\n             </example>\n         </section>\n@@ -356,8 +349,7 @@ meant for use during rapid test/debug cycles.\n             </para>\n             <para>\n In order to enable automatic runtime mapping, you must first list all your\n-persistent classes as described in <xref linkend=\"ref_guide_pc_pcclasses\"/>\n-.\n+persistent classes as described in <xref linkend=\"ref_guide_pc_pcclasses\"/>.\n             </para>\n             <para>\n OpenJPA will run the mapping tool on these classes when your application obtains\n@@ -423,13 +415,6 @@ in <xref linkend=\"ref_guide_mapping_middle\"/>. The reverse mapping tool,\n however, can give you an excellent starting point from which to grow your\n persistent classes.\n         </para>\n-        <!-- ### -->\n-        <note>\n-            <para>\n-The reverse mapping tool in this release does not yet output JPA annotations. It\n-is limited to JDO metadata output.\n-            </para>\n-        </note>\n         <para>\n To use the reverse mapping tool, follow the steps below:\n         </para>\n@@ -470,8 +455,7 @@ proper relations between the persistent classes it creates.\n                 <para>\n Run the reverse mapping tool on the finished schema file. If you do not supply\n the schema file to reverse map, the tool will run directly against the schema in\n-the database. The tool can be run via the included <literal>reversemappingtool\n-</literal> script, or through its Java class,\n+the database. The tool can be run via its Java class,\n <ulink url=\"../apidocs/org/apache/openjpa/jdbc/meta/ReverseMappingTool\">\n <classname>org.apache.openjpa.jdbc.meta.ReverseMappingTool</classname></ulink>.\n                 </para>\n@@ -484,7 +468,7 @@ java org.apache.openjpa.jdbc.meta.ReverseMappingTool -pkg com.xyz -d ~/src -cp c\n </programlisting>\n                 </example>\n                 <para>\n-In addition to OpenJPA's <link linkend=\"ref_guide_conf_devtools\"> standard\n+In addition to OpenJPA's <link linkend=\"ref_guide_conf_devtools\">standard\n configuration flags</link>, including\n <link linkend=\"ref_guide_conf_devtools_format\">code formatting options</link>,\n the reverse mapping tool recognizes the following command line arguments:\n@@ -630,8 +614,8 @@ the system defaults to a\n <classname>PropertiesReverseCustomizer</classname></ulink>. This customizer\n allows you to specify simple customization options in the properties file given\n with the <literal>-customizerProperties</literal> flag below. We present the\n-available property keys <link linkend=\"ref_guide_pc_reverse_custom\"> below\n-</link>.\n+available property keys <link linkend=\"ref_guide_pc_reverse_custom\"> \n+below</link>.\n                         </para>\n                     </listitem>\n                     <listitem>\n@@ -652,7 +636,8 @@ property in the specified reverse customizer, and set to the given value.\n                 <para>\n Running the tool will generate <filename>.java</filename> files for each\n generated class (and its application identity class, if applicable), along with\n-all necessary persistence metadata and mappings.\n+an <filename>orm.xml</filename> file containing the corresponding persistence \n+metadata.\n                 </para>\n             </listitem>\n             <listitem>\n@@ -664,10 +649,12 @@ generates.\n                 </para>\n                 <para>\n After you are satisfied with the generated classes and their mappings, you\n-should first compile them with <literal>javac</literal>, <literal>jikes\n-</literal>, or your favorite Java compiler. Make sure the classes and their\n-metadata are located in the directory corresponding to the <literal>-package\n-</literal> flag you gave the reverse mapping tool. Finally, enhance the classes\n+should first compile the classes with <literal>javac</literal>, <literal>\n+jikes</literal>, or your favorite Java compiler. Make sure the classes are \n+located in the directory corresponding to the <literal>-package</literal> flag \n+you gave the reverse mapping tool.  Next, move the generated <filename>\n+orm.xml</filename> file to a <filename>META-INF</filename> directory within a\n+directory in your classpath.  Finally, enhance the classes\n if necessary (see <xref linkend=\"ref_guide_pc_enhance\"/> ).\n                 </para>\n             </listitem>\n@@ -843,11 +830,6 @@ com.xyz.Magazine.identity:              datastore\n com.xyz.pub.Company.identity:           com.xyz.pub.CompanyId\n </programlisting>\n             </example>\n-            <para>\n-Your OpenJPA download includes the <classname> PropertiesReverseCustomizer\n-</classname> source code. You can use this code as an example when writing your\n-own customization class.\n-            </para>\n         </section>\n     </section>\n     <section id=\"ref_guide_mapping_middle\">\n@@ -883,10 +865,8 @@ In the <emphasis>meet-in-the-middle</emphasis>\n mapping approach, you control both the relational featureSelection and the object featureSelection. It\n is up to you to define the mappings between these models.  The mapping\n tool's <literal>validate</literal> action is useful to meet-in-the-middle\n-mappers. We examined the mapping tool in\n-<xref linkend=\"ref_guide_mapping_mappingtool\"/>. The <literal>validate\n-</literal> action verifies that the mapping information for a class matches the\n-class definition and the existing schema. It throws an informative exception\n+mappers. This action verifies that the mapping information for a class matches \n+the class definition and the existing schema. It throws an informative exception\n when your mappings are incorrect.\n         </para>\n         <example id=\"ref_guide_mapping_mappingtool_validate\">\n@@ -907,18 +887,6 @@ data is correct, and modifies the schema to match your mappings. This lets you\n modify your mapping data manually, but saves you the hassle of using your\n database's tools to bring the schema up-to-date.\n         </para>\n-        <para>\n-<literal>buildSchema</literal> is the default action when you use JPA mapping\n-defaults ( <xref linkend=\"ref_guide_mapping_defaults\"/> ).\n-        </para>\n-        <example id=\"ref_guide_mapping_middle_buildschema_mid\">\n-            <title>\n-                Creating the Relational Schema from Mappings\n-            </title>\n-<programlisting>\n-java org.apache.openjpa.jdbc.meta.MappingTool Magazine.java\n-</programlisting>\n-        </example>\n     </section>\n     <section id=\"ref_guide_mapping_defaults\">\n         <title>\n@@ -945,7 +913,7 @@ The previous sections showed how to use the mapping tool to generate default\n mappings. But how does the mapping tool know what mappings to generate? The\n answer lies in the\n <ulink url=\"../apidocs/org/apache/openjpa/jdbc/meta/MappingDefaults.html\">\n-<classname> org.apache.openjpa.jdbc.meta.MappingDefaults</classname></ulink>\n+<classname>org.apache.openjpa.jdbc.meta.MappingDefaults</classname></ulink>\n interface. OpenJPA uses an instance of this interface to decide how to name\n tables and columns, where to put foreign keys, and generally how to create a\n schema that matches your object featureSelection.\n@@ -954,15 +922,17 @@ schema that matches your object featureSelection.\n             <para>\n OpenJPA relies on foreign key constraint information at runtime to order SQL\n appropriately. Be sure to set your mapping defaults to reflect your existing\n-database constraints, or use explicit foreign key mappings as described in\n+database constraints, set the schema factory to reflect on the database for \n+constraint information (see <xref linkend=\"ref_guide_schema_info_factory\"/>), \n+or use explicit foreign key mappings as described in\n <xref linkend=\"ref_guide_mapping_jpa_fk\"/>.\n             </para>\n         </important>\n         <para>\n The <link linkend=\"openjpa.jdbc.MappingDefaults\"><literal>\n openjpa.jdbc.MappingDefaults</literal></link> configuration property controls\n the <classname>MappingDefaults</classname> interface implementation in use. This\n-is a plugin property (see <xref linkend=\"ref_guide_conf_plugins\"/> ), so\n+is a plugin property (see <xref linkend=\"ref_guide_conf_plugins\"/>), so\n you can substitute your own implementation or configure the existing ones.\n OpenJPA includes the following standard implementations:\n         </para>\n@@ -990,20 +960,16 @@ properties:\n                     <listitem>\n                         <para>\n <literal>DefaultMissingInfo</literal>: Whether to default missing column and\n-table names rather than throw an exception. Defaults to false, meaning full\n+table names rather than throw an exception. If set to false, full explicit\n mappings are required at runtime and when using mapping tool actions like\n <literal>buildSchema</literal> and <literal>validate</literal>.\n                         </para>\n-                        <para>\n-The <literal>jpa</literal> plugin above sets this property to true to meet the\n-JPA specification.\n-                        </para>\n                     </listitem>\n                     <listitem>\n                         <para>\n <literal>BaseClassStrategy</literal>: The default mapping strategy for base\n classes. You can specify a built-in strategy alias or the full class name of a\n-<link linkend=\"ref_guide_mapping_custom_class\"> custom class strategy</link>.\n+<link linkend=\"ref_guide_mapping_custom_class\">custom class strategy</link>.\n You can also use OpenJPA's plugin format (see\n <xref linkend=\"ref_guide_conf_plugins\"/>) to pass arguments to the\n strategy instance. See the\n@@ -1152,11 +1118,7 @@ indicator columns for embedded objects.\n                     <listitem>\n                         <para>\n <literal>OrderLists</literal>: Whether to create a database ordering column for\n-maintaining the order of persistent lists and arrays. Defaults to true.\n-                        </para>\n-                        <para>\n-The <literal>jpa</literal> plugin above sets this property to false in\n-accordance with the JPA specification.\n+maintaining the order of persistent lists and arrays.\n                         </para>\n                     </listitem>\n                     <listitem>\n@@ -1189,7 +1151,7 @@ value is the better choice.\n         <para>\n The example below turns on foreign key generation during schema creation and\n associates the <classname>org.mag.data.InfoStruct</classname> field type with\n-the custom <classname> org.mag.mapping.InfoStructHandler</classname> value\n+the custom <classname>org.mag.mapping.InfoStructHandler</classname> value\n handler.\n         </para>\n         <example id=\"ref_guide_mapping_defaults_conf\">\n@@ -1229,12 +1191,6 @@ to store the data necessary to map your persistent classes to the database\n schema.\n         </para>\n         <para>\n-In JPA, mapping metadata is defined in annotations. Future versions of the JPA\n-drafts will also define a mapping XML format.\n-<xref linkend=\"jpa_overview_mapping\"/> in the JPA Overview describes JPA\n-mapping options.\n-        </para>\n-        <para>\n <xref linkend=\"ref_guide_meta_factory\"/> introduced OpenJPA's <classname>\n MetaDataFactory</classname> interface. OpenJPA uses this same interface to\n abstract the storage and retrieval of mapping information. OpenJPA includes the\n@@ -1251,12 +1207,9 @@ The bundled mapping factories are:\n                 <para>\n <literal>-</literal>: Leaving the <literal> openjpa.jdbc.MappingFactory\n </literal> property unset allows your metadata factory to take over mappings as\n-well.\n-                </para>\n-                <para>\n-If you are using the <literal>jpa</literal> metadata factory, OpenJPA will read\n-mapping information from your annotations and <filename>orm.xml</filename> when\n-you leave the mapping factory unspecified.\n+well.  If you are using the default <literal>jpa</literal> metadata factory, \n+OpenJPA will read mapping information from your annotations and \n+<filename>orm.xml</filename> when you leave the mapping factory unspecified.\n                 </para>\n             </listitem>\n         </itemizedlist>\n@@ -1369,8 +1322,8 @@ accomplish this in mapping metadata.\n <programlisting>\n @Entity\n @Table(name=\"T1\")\n-public class ...\n-{\n+public class ...  {\n+\n     @ManyToOne\n     @JoinColumns({\n         @JoinColumn(name=\"FK\" referencedColumnName=\"PK1\"),\n@@ -1389,8 +1342,8 @@ need single quotes for numeric constants. For example, the syntax to join\n <programlisting>\n @Entity\n @Table(name=\"T1\")\n-public class ...\n-{\n+public class ...  {\n+\n     @ManyToOne\n     @JoinColumns({\n         @JoinColumn(name=\"FK\" referencedColumnName=\"PK2\"),\n@@ -1405,8 +1358,8 @@ Finally, from the inverse direction, these joins would look like this:\n <programlisting>\n @Entity\n @Table(name=\"T2\")\n-public class ...\n-{\n+public class ...  {\n+\n     @ManyToOne\n     @JoinColumns({\n         @JoinColumn(name=\"T1.FK\" referencedColumnName=\"PK1\"),\n@@ -1529,8 +1482,8 @@ import org.apache.openjpa.persistence.jdbc.*;\n @Entity\n @Table(name=\"LOGS\")\n @DataStoreIdColumn(name=\"ENTRY\")\n-public class LogEntry\n-{\n+public class LogEntry {\n+\n     @Lob\n     private String content;\n \n@@ -1675,8 +1628,8 @@ this with the\n annotation, which contains an array of <classname>Column</classname> values.\n             </para>\n             <para>\n-Remember to annotate custom field types with <classname> Persistent</classname>\n-, as described in <xref linkend=\"ref_guide_meta_jpa_persistent\"/>.\n+Remember to annotate custom field types with <classname>Persistent</classname>,\n+as described in <xref linkend=\"ref_guide_meta_jpa_persistent\"/>.\n             </para>\n         </section>\n         <section id=\"ref_guide_mapping_jpa_fieldjoin\">\n@@ -1692,7 +1645,7 @@ to. Suppose, however, that the related type is unmapped, or that it is part of a\n table-per-class inheritance hierarchy. Each subclass that might be assigned to\n the field could reside in a different table, and could use entirely different\n names for its primary key columns. It becomes impossible to supply a single\n-<literal> referencedColumnName</literal> that works for all subclasses.\n+<literal>referencedColumnName</literal> that works for all subclasses.\n             </para>\n             <para>\n OpenJPA rectifies this by allowing you to declare which <emphasis>attribute\n@@ -1712,7 +1665,7 @@ For compound keys, use the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/XJoinColumns.html\">\n <classname>org.apache.openjpa.persistence.jdbc.XJoinColumns</classname></ulink>\n annotation. The value of this annotation is an array of individual <classname>\n-XJoinColumn</classname> s.\n+XJoinColumn</classname>s.\n             </para>\n         </section>\n         <section id=\"ref_guide_mapping_jpa_embed\">\n@@ -1836,8 +1789,8 @@ owning field will load as null.\n import org.apache.openjpa.persistence.jdbc.*;\n \n @Embeddable\n-public class PathCoordinate\n-{\n+public class PathCoordinate {\n+\n     private String siteName;\n \n     @Persistent\n@@ -1848,8 +1801,8 @@ public class PathCoordinate\n }\n \n @Entity\n-public class Path\n-{\n+public class Path {\n+\n     @Embedded\n     @EmbeddedMapping(nullIndicatorFieldName=\"siteName\", overrides={\n         @MappingOverride(name=\"siteName\", columns=@Column(name=\"START_SITE\")),\n@@ -1991,28 +1944,6 @@ in the JPA Overview for a review of the <classname>JoinColumn</classname>\n annotation.\n                 </para>\n             </section>\n-            <section id=\"ref_guide_mapping_jpa_coll_embed\">\n-                <title>\n-                    Element Embedded Mapping\n-                </title>\n-                <indexterm zone=\"ref_guide_mapping_jpa_coll_embed\">\n-                    <primary>\n-                        ElementEmbeddedMapping\n-                    </primary>\n-                    <seealso>\n-                        mapping metadata\n-                    </seealso>\n-                </indexterm>\n-                <para>\n-The\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.ElementEmbeddedMapping\n-</classname></ulink> annotation allows you to map your collection or map's\n-embedded element type to your container table. This annotation has exactly the\n-same properties as the <classname>EmbeddedMapping</classname> annotation\n-described <link linkend=\"ref_guide_mapping_jpa_embed\">above</link>.\n-                </para>\n-            </section>\n             <section id=\"ref_guide_mapping_jpa_coll_order\">\n                 <title>\n                     Order Column\n@@ -2134,15 +2065,14 @@ import org.apache.openjpa.persistence.jdbc.*;\n \n @Entity\n @Table(name=\"LINE_ITEM\", schema=\"CNTRCT\")\n-public class LineItem\n-{\n+public class LineItem {\n     ...\n }\n \n @Entity\n @Table(name=\"SUB\", schema=\"CNTRCT\")\n-public class Subscription\n-{\n+public class Subscription {\n+\n     @Id private long id;\n \n     @OneToMany\n@@ -2168,11 +2098,8 @@ public class Subscription\n             </indexterm>\n             <para>\n We detailed the <literal>ContainerTable</literal> annotation in\n-<xref linkend=\"ref_guide_mapping_jpa_coll_table\"/>. We also discussed\n-join columns embedded mappings in\n-<xref linkend=\"ref_guide_mapping_jpa_coll_joincols\"/> and\n-<xref linkend=\"ref_guide_mapping_jpa_coll_embed\"/>. Key columns, join\n-columns, and embedded mappings are new, however; we tackle them below.\n+<xref linkend=\"ref_guide_mapping_jpa_coll_table\"/>. Custom map mappings may \n+also use this annotation to represent a map table.\n             </para>\n         </section>\n         <section id=\"ref_guide_mapping_jpa_constraints\">\n@@ -2188,8 +2115,8 @@ batch size.\n             </para>\n             <para>\n OpenJPA assumes certain columns have indexes or constraints based on your\n-mapping defaults, as detailed in <xref linkend=\"ref_guide_mapping_defaults\"/>\n-. You can override the configured defaults on individual joins, field\n+mapping defaults, as detailed in <xref linkend=\"ref_guide_mapping_defaults\"/>. \n+You can override the configured defaults on individual joins, field\n values, collection elements, map keys, or map values using the annotations\n presented in the following sections.\n             </para>\n@@ -2216,14 +2143,10 @@ The <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Index.html\">\n annotation represents an index on the columns of a field. It is also used within\n the <link linkend=\"ref_guide_mapping_jpa_coll_table\"><classname>ContainerTable\n </classname></link> annotation to index join columns.\n-                </para>\n-                <para>\n-To index the columns of a collection or map element or map key, use the\n+To index the columns of a collection element, use the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementIndex.html\">\n <classname> org.apache.openjpa.persistence.jdbc.ElementIndex</classname></ulink>\n-and <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyIndex.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyIndex</classname></ulink>\n-annotations, respectively. These annotations have the following properties:\n+annotation. These annotations have the following properties:\n                 </para>\n                 <itemizedlist>\n                     <listitem>\n@@ -2270,18 +2193,11 @@ The <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ForeignKey.html\">\n annotation represents a foreign key on the columns of a field. It is also used\n within the <link linkend=\"ref_guide_mapping_jpa_coll_table\"><classname>\n ContainerTable</classname></link> annotation to set a database foreign key on\n-join columns.\n-                </para>\n-                <para>\n-To set a constraint to the columns of a collection or map element or map value,\n-use the\n+join columns.  To set a constraint to the columns of a collection element, use \n+the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementForeignKey.html\">\n <classname> org.apache.openjpa.persistence.jdbc.ElementForeignKey</classname>\n-</ulink> and\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyForeignKey.html\">\n-<classname> org.apache.openjpa.persistence.jdbc.KeyForeignKey</classname>\n-</ulink> annotations, respectively. These annotations have the following\n-properties:\n+</ulink> annotation. These annotations have the following properties:\n                 </para>\n                 <itemizedlist>\n                     <listitem>\n@@ -2327,7 +2243,9 @@ Keep in mind that OpenJPA uses foreign key information at runtime to avoid\n constraint violations; it is important, therefore, that your\n <link linkend=\"ref_guide_mapping_defaults\">mapping defaults</link> and foreign\n key annotations combine to accurately reflect your existing database\n-constraints.\n+constraints, or that  you configure OpenJPA to reflect on your database schema\n+to discover existing foreign keys (see\n+<xref linkend=\"ref_guide_schema_info_factory\"/>).\n                 </para>\n             </section>\n             <section id=\"ref_guide_mapping_jpa_unique\">\n@@ -2351,7 +2269,7 @@ constraints.\n The <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Unique.html\">\n <classname>org.apache.openjpa.persistence.jdbc.Unique</classname></ulink>\n annotation represents a unqiue constraint on the columns of a field. It is more\n-convenient than using the <literal> uniqueConstraints</literal> property of\n+convenient than using the <literal>uniqueConstraints</literal> property of\n standard JPA <classname>Table</classname> and <classname>SecondaryTable\n </classname> annotations, because you can apply it directly to the constrained\n field. The <classname>Unique</classname> annotation has the following\n@@ -2379,22 +2297,6 @@ supported by the database.\n                     </listitem>\n                 </itemizedlist>\n             </section>\n-            <section id=\"ref_guide_mapping_jpa_constraintex\">\n-                <title>\n-                    Examples\n-                </title>\n-                <para>\n-Here again is our map example from <xref linkend=\"ref_guide_mapping_jpa_map\"/>\n-, now with explicit indexes and constraints added.\n-                </para>\n-                <mediaobject>\n-                    <imageobject>\n-                        <!-- PNG image data, 410 x 266 (see README) -->\n-                        <imagedata fileref=\"img/string-rel-map.png\" width=\"273px\"/>\n-\n-                    </imageobject>\n-                </mediaobject>\n-            </section>\n         </section>\n     </section>\n     <section id=\"ref_guide_mapping_limits\">\n@@ -2663,7 +2565,7 @@ efficiency of your relations.\n                 <note>\n                     <para>\n OpenJPA also includes the <literal>type</literal> metadata extension for\n-narrowing the declared type of a field See <xref linkend=\"type\"/>.\n+narrowing the declared type of a field. See <xref linkend=\"type\"/>.\n                     </para>\n                 </note>\n                 <para>\n@@ -2681,13 +2583,6 @@ OpenJPA defines the following extensions for nonpolymorphic values:\n                         <para>\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.html\">\n <classname>org.apache.openjpa.persistence.jdbc.ElementNonpolymorphic</classname>\n-</ulink>\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyNonpolymorphic.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyNonpolymorphic</classname>\n </ulink>\n                         </para>\n                     </listitem>\n@@ -2741,9 +2636,8 @@ In these cases, set the proper class critera extension to <literal>true\n </literal> to force OpenJPA to append class criteria to its select SQL.\n                 </para>\n                 <para>\n-OpenJPA defines the following class criteria annotations for field relations,\n-array, collection, and map element relations, and map key relations,\n-respectively:\n+OpenJPA defines the following class criteria annotations for field relations and\n+array or collection element relations, respectively:\n                 </para>\n                 <itemizedlist>\n                     <listitem>\n@@ -2756,13 +2650,6 @@ respectively:\n                         <para>\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.html\">\n <classname>org.apache.openjpa.persistence.jdbc.ElementClassCriteria</classname>\n-</ulink>\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyClassCriteria</classname>\n </ulink>\n                         </para>\n                     </listitem>\n@@ -2787,54 +2674,14 @@ respectively:\n                     </seealso>\n                 </indexterm>\n                 <para>\n-OpenJPA's family of strategy extensions allow you to specify a custom mapping\n+OpenJPA's \n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Strategy.html\">\n+<classname>org.apache.openjpa.persistence.jdbc.Strategy</classname></ulink>\n+extension allows you to specify a custom mapping\n strategy or value handler for a field. See\n <xref linkend=\"ref_guide_mapping_custom\"/> for information on custom\n mappings.\n                 </para>\n-                <para>\n-OpenJPA includes the following JPA strategy annotations:\n-                </para>\n-                <itemizedlist>\n-                    <listitem>\n-                        <para>\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Strategy.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.Strategy</classname></ulink>:\n-Field strategy or value handler plugin string.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/KeyStrategy.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.KeyStrategy</classname></ulink>:\n-Map key value handler plugin string.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n-                <itemizedlist>\n-                    <listitem>\n-                        <para>\n-<literal>jdbc-strategy</literal>: Field strategy or value handler plugin\n-string.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<literal>jdbc-element-strategy</literal>: Collection or array element value\n-handler plugin string.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<literal>jdbc-key-strategy</literal>: Map key value handler plugin string.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<literal>jdbc-value-strategy</literal>: Map value handler plugin string.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n             </section>\n         </section>\n     </section>\n@@ -2882,8 +2729,7 @@ The <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/Strategy.html\">\n annotation allows you to declare a custom class mapping strategy in JPA mapping\n metadata. Set the value of the annotation to the full class name of your custom\n strategy. You can configure your strategy class' bean properties using\n-OpenJPA's plugin syntax, detailed in <xref linkend=\"ref_guide_conf_plugins\"/>\n-.\n+OpenJPA's plugin syntax, detailed in <xref linkend=\"ref_guide_conf_plugins\"/>.\n             </para>\n         </section>\n         <section id=\"ref_guide_mapping_custom_versdiscrim\">\n@@ -2957,19 +2803,10 @@ Value handlers make it trivial to map any type that you can break down into one\n or more simple values. All value handlers implement the <classname>\n org.apache.openjpa.jdbc.meta.ValueHandler</classname> interface; see its\n <ulink url=\"../apidocs/org/apache/openjpa/jdbc/meta/ValueHandler.html\"> Javadoc\n-</ulink> for details. Rather than give synthetic examples of value handlers,\n-OpenJPA provides the source to most of the built-in handlers in the <filename>\n-src/openjpa/jdbc/meta/strats</filename> directory of your OpenJPA distribution.\n-Use these functional implementations as examples when you create your own value\n-handlers.\n-                </para>\n-                <para>\n-Note that value handlers are not only simple to write, but are highly reusable.\n-For example, imagine that you create a handler for <classname>java.awt.Point\n-</classname> values. You can not only use this handler to map fields of type\n-<classname>Point</classname>, but also to map <classname> Collection</classname>\n-s or <classname>Map</classname>s of <classname>Point</classname>s with no\n-additional work.\n+</ulink> for details.  Also, examine the built-in handlers in the <filename>\n+src/openjpa/jdbc/meta/strats</filename> directory of your OpenJPA source \n+distribution.  Use these functional implementations as examples when you \n+create your own value handlers.\n                 </para>\n             </section>\n             <section id=\"ref_guide_mapping_custom_fieldstrat\">\n@@ -3020,8 +2857,8 @@ MappingDefaults</classname> implementations allows you to globally associate\n field types with their corresponding custom value handler or strategy. OpenJPA\n will automatically use your custom strategies when it encounters a field of the\n associated type. OpenJPA will use your custom value handlers whenever it\n-encounters a field, collection element, map key, or map value of the associated\n-type. <xref linkend=\"ref_guide_mapping_defaults\"/> described mapping\n+encounters a field of the associated type. \n+<xref linkend=\"ref_guide_mapping_defaults\"/> described mapping\n defaults in detail.\n                 </para>\n                 <para>\n@@ -3032,7 +2869,7 @@ in the proper mapping metadata extension. OpenJPA includes the\n <classname>org.apache.openjpa.persistence.jdbc.Strategy</classname></ulink>\n annotation. You can configure the named strategy or handler's bean\n properties in these extensions using OpenJPA's plugin format (see\n-<xref linkend=\"ref_guide_conf_plugins\"/> ).\n+<xref linkend=\"ref_guide_conf_plugins\"/>).\n                 </para>\n             </section>\n         </section>\n@@ -3092,16 +2929,13 @@ openjpa.Runtime</literal>.\n             </listitem>\n             <listitem>\n                 <para>\n-<literal>exception</literal>: Throw an exception when OpenJPA discovers an\n+<literal>exception</literal>: Throw an <classname>\n+EntityNotFoundException</classname> when OpenJPA discovers an\n orphaned key. This is an alias for the\n <ulink url=\"../apidocs/org/apache/openjpa/event/ExceptionOrphanedKeyAction.html\">\n <classname>org.apache.openjpa.event.ExceptionOrphanedKeyAction</classname>\n </ulink> class.\n                 </para>\n-                <para>\n-In JPA, the exception type will be <classname>\n-javax.persistence.EntityNotFoundException</classname>.\n-                </para>\n             </listitem>\n             <listitem>\n                 <para>"},{"sha":"c335ff7092336d5528e0287126aa49763adc11ad","filename":"openjpa-project/src/doc/manual/ref_guide_meta.xml","status":"modified","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-project/src/doc/manual/ref_guide_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/174ae93d41ed8b35ee1ae6490b0baa88b9f990b2/openjpa-project/src/doc/manual/ref_guide_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_meta.xml?ref=174ae93d41ed8b35ee1ae6490b0baa88b9f990b2","patch":"@@ -230,6 +230,133 @@ annotation exists. For example, <xref linkend=\"ref_guide_mapping_jpa_columns\"/>\n to denote a persistent <classname>java.awt.Point</classname> field.\n             </para>\n         </section>\n+\t\t<section id=\"ref_guide_meta_jpa_persistent_coll\">\n+\t\t\t<title>Persistent Collection Fields</title>\n+\t\t\t<indexterm zone=\"ref_guide_meta_jpa_persistent_coll\">\n+\t\t\t\t<primary>persistent fields</primary>\n+\t\t\t\t<secondary>collection metadata</secondary>\n+\t\t\t</indexterm>\n+\t\t\t<para>\n+JPA standardizes support for collections of entities with the <literal>\n+OneToMany</literal> and <literal>ManyToMany</literal> persistence strategies.  \n+OpenJPA supports these strategies, and may be extended for other strategies as \n+well.  For extended strategies, use the \n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/PersistentCollection.html\">\n+<classname>kodo.persistence.PersistentCollection</classname></ulink> metadata \n+annotation to represents any persistent collection field.  It has the following\n+properties:\n+\t\t\t</para>\n+\t\t\t<itemizedlist>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>Class elementType</literal>: The class of the collection elements.  \n+This information is usually taken from the parameterized collection element \n+type.  You must supply it explicitly, however, if your field isn't a \n+parameterized type.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>FetchType fetch</literal>: Whether to load the collection eagerly or \n+lazily.  Corresponds exactly to the same-named property of standard JPA \n+annotations such as <link linkend=\"ejb3_overview_meta_basic\"><classname>\n+Basic</classname></link>. Defaults to <literal>FetchType.LAZY</literal>.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>String mappedBy</literal>: Names the field in the related entity that \n+maps this bidirectional relation.  Corresponds to the same-named property of \n+standard JPA annotations such as <link linkend=\"ejb3_overview_meta_manytomany\">\n+<classname>ManyToMany</classname></link>.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>CascadeType[] elementCascade</literal>: Array of enum values defining \n+cascade behavior for the collection elements.  Corresponds exactly to the \n+<literal>cascade</literal> property of standard JPA annotations such as \n+<link linkend=\"ejb3_overview_meta_manytomany\"><classname>\n+ManyToMany</classname></link>. Defaults to empty array.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>boolean elementEmbedded</literal>: Set this property to <literal>true\n+</literal> if the elements are stored as embedded objects.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t</itemizedlist>\n+\t\t</section>\n+\t\t<section id=\"ref_guide_meta_jpa_persistent_map\">\n+\t\t\t<title>Persistent Map Fields</title>\n+\t\t\t<indexterm zone=\"ref_guide_meta_jpa_persistent_map\">\n+\t\t\t\t<primary>persistent fields</primary>\n+\t\t\t\t<secondary>map metadata</secondary>\n+\t\t\t</indexterm>\n+\t\t\t<para>\n+JPA has limited support for maps.  If you extend JPA's standard map support to \n+encompass new mappings, use the \n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/PersistentMap.html\">\n+<classname>kodo.persistence.PersistentMap</classname></ulink> metadata \n+annotation to represent your custom persistent map fields.  It has the \n+following properties:\n+\t\t\t</para>\n+\t\t\t<itemizedlist>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>Class keyType</literal>: The class of the map keys.  This information \n+is usually taken from the parameterized map key type.  You must supply it \n+explicitly, however, if your field isn't a parameterized type.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>Class elementType</literal>: The class of the map values.  This \n+information is usually taken from the parameterized map value type.  You must \n+supply it explicitly, however, if your field isn't a parameterized type.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>FetchType fetch</literal>: Whether to load the collection eagerly or \n+lazily.  Corresponds exactly to the same-named property of standard JPA \n+annotations such as <link linkend=\"ejb3_overview_meta_basic\"><classname>\n+Basic</classname></link>. Defaults to <literal>FetchType.LAZY</literal>.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>CascadeType[] keyCascade</literal>: Array of enum values defining \n+cascade behavior for the map keys.  Corresponds exactly to the <literal>cascade\n+</literal> property of standard JPA annotations such as \n+<link linkend=\"ejb3_overview_meta_manytoone\"><classname>\n+ManyToOne</classname></link>. Defaults to empty array.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>CascadeType[] elementCascade</literal>: Array of enum values defining \n+cascade behavior for the map values.  Corresponds exactly to the \n+<literal>cascade</literal> property of standard JPA annotations such as \n+<link linkend=\"ejb3_overview_meta_manytoone\"><classname>\n+ManyToOne</classname></link>. Defaults to empty array.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>boolean keyEmbedded</literal>: Set this property to <literal>true\n+</literal> if the map keys are stored as embedded objects.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t\t<listitem>\n+\t\t\t\t\t<para>\n+<literal>boolean elementEmbedded</literal>: Set this property to <literal>\n+true</literal> if the map values are stored as embedded objects.\n+\t\t\t\t\t</para>\n+\t\t\t\t</listitem>\n+\t\t\t</itemizedlist>\n+\t\t</section>\n     </section>\n     <section id=\"ref_guide_meta_ext\">\n         <title>"}]}

