{"sha":"174f2af0ded2b32e949724b0027263a99d484960","node_id":"MDY6Q29tbWl0MjA2MzY0OjE3NGYyYWYwZGVkMmIzMmU5NDk3MjRiMDAyNzI2M2E5OWQ0ODQ5NjA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-28T14:23:36Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-28T14:23:36Z"},"message":"OPENJPA-1253:\nSetting svn:eol-style = native\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819549 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5269d563ae4401a9cf393e971daa0c41e4bb9373","url":"https://api.github.com/repos/apache/openjpa/git/trees/5269d563ae4401a9cf393e971daa0c41e4bb9373"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/174f2af0ded2b32e949724b0027263a99d484960","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/174f2af0ded2b32e949724b0027263a99d484960","html_url":"https://github.com/apache/openjpa/commit/174f2af0ded2b32e949724b0027263a99d484960","comments_url":"https://api.github.com/repos/apache/openjpa/commits/174f2af0ded2b32e949724b0027263a99d484960/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"363f7f6e3f16bf0693fce192683685894946e252","url":"https://api.github.com/repos/apache/openjpa/commits/363f7f6e3f16bf0693fce192683685894946e252","html_url":"https://github.com/apache/openjpa/commit/363f7f6e3f16bf0693fce192683685894946e252"}],"stats":{"total":316,"additions":158,"deletions":158},"files":[{"sha":"1eae81c9cb59e5b3d241c0d857aa393d5bd525bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_RelKey_FK.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/174f2af0ded2b32e949724b0027263a99d484960/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_RelKey_FK.java","raw_url":"https://github.com/apache/openjpa/raw/174f2af0ded2b32e949724b0027263a99d484960/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_RelKey_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_U1M_Map_RelKey_FK.java?ref=174f2af0ded2b32e949724b0027263a99d484960","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.compat;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-public class EntityC_U1M_Map_RelKey_FK {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        return name.hashCode() + (int)id;\r\n-    }\r\n-    \r\n-    public boolean equals(Object o) {\r\n-        if (!(o instanceof EntityC_U1M_Map_RelKey_FK)) return false;\r\n-        EntityC_U1M_Map_RelKey_FK c = (EntityC_U1M_Map_RelKey_FK)o;\r\n-        if (!c.name.equals(name)) return false;\r\n-        if (c.id != id) return false;\r\n-        return true;\r\n-    }\r\n-    \r\n-    public String toString() {\r\n-        return id + name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class EntityC_U1M_Map_RelKey_FK {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode() + (int)id;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof EntityC_U1M_Map_RelKey_FK)) return false;\n+        EntityC_U1M_Map_RelKey_FK c = (EntityC_U1M_Map_RelKey_FK)o;\n+        if (!c.name.equals(name)) return false;\n+        if (c.id != id) return false;\n+        return true;\n+    }\n+    \n+    public String toString() {\n+        return id + name;\n+    }\n+}"},{"sha":"98e2d1f50af238df46dfb8568c3e8d71ae8cf8e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_Map_RelKey_FK.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/174f2af0ded2b32e949724b0027263a99d484960/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_Map_RelKey_FK.java","raw_url":"https://github.com/apache/openjpa/raw/174f2af0ded2b32e949724b0027263a99d484960/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_Map_RelKey_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_Map_RelKey_FK.java?ref=174f2af0ded2b32e949724b0027263a99d484960","patch":"@@ -1,97 +1,97 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.compat;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-//non-default mapping\r\n-//Sec 11.1.36, Example 3: \r\n-//    Unidirectional One-to-Many association using a foreign key mapping\r\n-//    In Customer class:\r\n-//    @OneToMany(orphanRemoval=true)\r\n-//    @JoinColumn(name=\"CUST_ID\") // join column is in table for Order\r\n-//    public Set<Order> getOrders() {return orders;}\r\n-\r\n-@Entity\r\n-public class Uni_1ToM_Map_RelKey_FK {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @OneToMany(/*cascade = CascadeType.ALL,*/ fetch=FetchType.EAGER)\r\n-    @JoinColumn(name=\"Uni1MFK_ID\")\r\n-    private Map<EntityC, EntityC_U1M_Map_RelKey_FK> entityCs = null;\r\n-    \r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public Map<EntityC, EntityC_U1M_Map_RelKey_FK> getEntityCs() { \r\n-        return entityCs; \r\n-    }\r\n-\r\n-    public void setEntityCs(Map<EntityC, EntityC_U1M_Map_RelKey_FK> entityCs) { \r\n-        this.entityCs = entityCs; \r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        return name.hashCode();\r\n-    }\r\n-    \r\n-    public boolean equals(Object o) {\r\n-        if (!(o instanceof Uni_1ToM_Map_RelKey_FK)) return false;\r\n-        Uni_1ToM_Map_RelKey_FK b = (Uni_1ToM_Map_RelKey_FK)o;\r\n-        if (!b.name.equals(name)) return false;\r\n-        if (b.entityCs.size() != entityCs.size()) return false;\r\n-        \r\n-        Set<EntityC> coll = b.entityCs.keySet();\r\n-        for (EntityC cKey : coll) {\r\n-            EntityC_U1M_Map_RelKey_FK val = (EntityC_U1M_Map_RelKey_FK)getValue(b.entityCs, cKey);\r\n-            EntityC_U1M_Map_RelKey_FK val1 = (EntityC_U1M_Map_RelKey_FK)getValue(entityCs, cKey); \r\n-            if (!val.equals(val1))\r\n-                return false;\r\n-        }\r\n-        return true;\r\n-    }\r\n-    \r\n-    private Object getValue(Map map, Object mkey) {\r\n-        Set<Map.Entry> entries = map.entrySet();\r\n-        for (Map.Entry entry : entries) {\r\n-            if (entry.getKey().equals(mkey))\r\n-                return entry.getValue();\r\n-        }\r\n-        return null;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+//non-default mapping\n+//Sec 11.1.36, Example 3: \n+//    Unidirectional One-to-Many association using a foreign key mapping\n+//    In Customer class:\n+//    @OneToMany(orphanRemoval=true)\n+//    @JoinColumn(name=\"CUST_ID\") // join column is in table for Order\n+//    public Set<Order> getOrders() {return orders;}\n+\n+@Entity\n+public class Uni_1ToM_Map_RelKey_FK {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(/*cascade = CascadeType.ALL,*/ fetch=FetchType.EAGER)\n+    @JoinColumn(name=\"Uni1MFK_ID\")\n+    private Map<EntityC, EntityC_U1M_Map_RelKey_FK> entityCs = null;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public Map<EntityC, EntityC_U1M_Map_RelKey_FK> getEntityCs() { \n+        return entityCs; \n+    }\n+\n+    public void setEntityCs(Map<EntityC, EntityC_U1M_Map_RelKey_FK> entityCs) { \n+        this.entityCs = entityCs; \n+    }\n+\n+    public int hashCode() {\n+        return name.hashCode();\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof Uni_1ToM_Map_RelKey_FK)) return false;\n+        Uni_1ToM_Map_RelKey_FK b = (Uni_1ToM_Map_RelKey_FK)o;\n+        if (!b.name.equals(name)) return false;\n+        if (b.entityCs.size() != entityCs.size()) return false;\n+        \n+        Set<EntityC> coll = b.entityCs.keySet();\n+        for (EntityC cKey : coll) {\n+            EntityC_U1M_Map_RelKey_FK val = (EntityC_U1M_Map_RelKey_FK)getValue(b.entityCs, cKey);\n+            EntityC_U1M_Map_RelKey_FK val1 = (EntityC_U1M_Map_RelKey_FK)getValue(entityCs, cKey); \n+            if (!val.equals(val1))\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    private Object getValue(Map map, Object mkey) {\n+        Set<Map.Entry> entries = map.entrySet();\n+        for (Map.Entry entry : entries) {\n+            if (entry.getKey().equals(mkey))\n+                return entry.getValue();\n+        }\n+        return null;\n+    }\n+}"}]}

