{"sha":"18a1a04c773dd5c3e2288173f64f58f822cefb50","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4YTFhMDRjNzczZGQ1YzNlMjI4ODE3M2Y2NGY1OGY4MjJjZWZiNTA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T21:03:26Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T21:03:26Z"},"message":"OPENJPA-855 Initial JPQLIndex M2M tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917716 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a99d1018487897b3dad3ae8c27c7391398baa9ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/a99d1018487897b3dad3ae8c27c7391398baa9ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/18a1a04c773dd5c3e2288173f64f58f822cefb50","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/18a1a04c773dd5c3e2288173f64f58f822cefb50","html_url":"https://github.com/apache/openjpa/commit/18a1a04c773dd5c3e2288173f64f58f822cefb50","comments_url":"https://api.github.com/repos/apache/openjpa/commits/18a1a04c773dd5c3e2288173f64f58f822cefb50/comments","author":null,"committer":null,"parents":[{"sha":"11149ec5fba76796f2d3d9a2a8d26d7782d74a99","url":"https://api.github.com/repos/apache/openjpa/commits/11149ec5fba76796f2d3d9a2a8d26d7782d74a99","html_url":"https://github.com/apache/openjpa/commit/11149ec5fba76796f2d3d9a2a8d26d7782d74a99"}],"stats":{"total":342,"additions":318,"deletions":24},"files":[{"sha":"701be13e2829c3f6346f16cef94336321a2a6a53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IColumnEntity.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IColumnEntity.java","raw_url":"https://github.com/apache/openjpa/raw/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IColumnEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/IColumnEntity.java?ref=18a1a04c773dd5c3e2288173f64f58f822cefb50","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.List;\n+\n+public interface IColumnEntity extends INameEntity {\n+\n+    public List<IOrderedEntity> getEntities();\n+\n+    public void setEntities(List<IOrderedEntity> columns);\n+\n+    public void addEntity(IOrderedEntity entity);\n+\n+    public IOrderedEntity removeEntity(IOrderedEntity entity);\n+}"},{"sha":"8208ed9b42e05ac815a873beef00c666abd70bf2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedNameEntity.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedNameEntity.java","raw_url":"https://github.com/apache/openjpa/raw/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedNameEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/OrderedNameEntity.java?ref=18a1a04c773dd5c3e2288173f64f58f822cefb50","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OrderColumn;\n+\n+@Entity\n+public class OrderedNameEntity implements IColumnEntity, java.io.Serializable {\n+\n+    @Id\n+    private int id;\n+    \n+    private String name;\n+\n+    @ManyToMany\n+    @OrderColumn\n+    private List <IOrderedEntity> entities;\n+\n+    \n+    public OrderedNameEntity() {\n+    }\n+\n+    public OrderedNameEntity(String name) {\n+        this.id = name.charAt(0) - 'A' + 1;\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        return \"OrderedNameEntity[\" + id + \"]=\" + name;\n+    }\n+\n+    public List<IOrderedEntity> getEntities() {\n+        return entities;\n+    }\n+\n+    public void setEntities(List<IOrderedEntity> entities) {\n+        this.entities = entities;\n+    }\n+\n+    public void addEntity(IOrderedEntity entity) {\n+        if( entities == null) {\n+            entities = new ArrayList<IOrderedEntity>();\n+        }\n+        entities.add(entity);\n+    }\n+\n+    public IOrderedEntity removeEntity(IOrderedEntity entity) {\n+        IOrderedEntity rtnVal = null;\n+        if( entities != null) {\n+            if( entities.remove(entity) )\n+                rtnVal = entity;\n+        }\n+        return rtnVal;\n+    }\n+}"},{"sha":"06db2e88465927cbb4d69888f3ed24b89c1b294e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedNameEntity.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedNameEntity.java","raw_url":"https://github.com/apache/openjpa/raw/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedNameEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/entities/XMLOrderedNameEntity.java?ref=18a1a04c773dd5c3e2288173f64f58f822cefb50","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jpql.entities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OrderColumn;\n+\n+public class XMLOrderedNameEntity implements INameEntity, java.io.Serializable {\n+\n+    private int id;\n+    \n+    private String name;\n+\n+    @ManyToMany\n+    @OrderColumn\n+    private List <IColumnEntity> columns;\n+\n+\n+    public XMLOrderedNameEntity() {\n+    }\n+\n+    public XMLOrderedNameEntity(String name) {\n+        this.id = name.charAt(0) - 'A' + 1;\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        return \"XMLOrderedNameEntity[\" + id + \"]=\" + name;\n+    }\n+    \n+    public List<IColumnEntity> getColumns() {\n+        return columns;\n+    }\n+\n+    public void setColumns(List<IColumnEntity> columns) {\n+        this.columns = columns;\n+    }\n+\n+    public void addColumns(IColumnEntity column) {\n+        if( columns == null) {\n+            columns = new ArrayList<IColumnEntity>();\n+        }\n+        columns.add(column);\n+    }\n+\n+    public IColumnEntity removeColumns(IColumnEntity entity) {\n+        IColumnEntity rtnVal = null;\n+        if( columns != null) {\n+            if( columns.remove(entity) )\n+                rtnVal = entity;\n+        }\n+        return rtnVal;\n+    }\n+}"},{"sha":"91576db3d8e31e084c5da87258ecba7075936191","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","status":"modified","additions":90,"deletions":24,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","raw_url":"https://github.com/apache/openjpa/raw/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java?ref=18a1a04c773dd5c3e2288173f64f58f822cefb50","patch":"@@ -27,17 +27,18 @@\n import javax.persistence.Query;\n \n import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.jpql.entities.IColumnEntity;\n import org.apache.openjpa.persistence.jpql.entities.INameEntity;\n import org.apache.openjpa.persistence.jpql.entities.IOrderedElements;\n import org.apache.openjpa.persistence.jpql.entities.IOrderedEntity;\n import org.apache.openjpa.persistence.jpql.entities.OrderedElementEntity;\n import org.apache.openjpa.persistence.jpql.entities.OrderedManyToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.OrderedNameEntity;\n import org.apache.openjpa.persistence.jpql.entities.OrderedOneToManyEntity;\n import org.apache.openjpa.persistence.jpql.entities.UnorderedNameEntity;\n import org.apache.openjpa.persistence.jpql.entities.XMLOrderedElementEntity;\n import org.apache.openjpa.persistence.jpql.entities.XMLOrderedManyToManyEntity;\n+import org.apache.openjpa.persistence.jpql.entities.XMLOrderedNameEntity;\n import org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity;\n import org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity;\n import org.apache.openjpa.persistence.proxy.TreeNode;\n@@ -61,7 +62,8 @@\n         XMLOrderedOneToManyEntity(XMLOrderedOneToManyEntity.class),\n         XMLOrderedManyToManyEntity(XMLOrderedManyToManyEntity.class),\n         UnorderedNameEntity(UnorderedNameEntity.class),\n-        XMLUnorderedNameEntity(XMLUnorderedNameEntity.class);\n+        XMLUnorderedNameEntity(XMLUnorderedNameEntity.class),\n+        OrderedNameEntity(OrderedNameEntity.class);\n \n         private Class<?> clazz;\n         private String fullEntityName;\n@@ -92,20 +94,24 @@ public String getEntityName() {\n \n     @Override\n     protected String getPersistenceUnitName() {\n+        // this sets up the testcase code so our EMF is created and cleaned up for us\n         return \"JPQLIndex\";\n     }\n \n     @Override\n     public void setUp() {\n         super.setUp(CLEAR_TABLES, TreeNode.class, \n             OrderedElementEntity.class, UnorderedNameEntity.class,\n-            OrderedOneToManyEntity.class, OrderedManyToManyEntity.class);\n+            OrderedOneToManyEntity.class, OrderedManyToManyEntity.class,\n+            OrderedNameEntity.class);\n             // XMLOrderedOneToManyEntity.class, XMLOrderedManyToManyEntity.class,\n-            // XMLOrderedElementEntity.class, XMLUnorderedNameEntity.class);\n+            // XMLOrderedElementEntity.class, XMLUnorderedNameEntity.class,\n+            // XMLOrderedNameEntity.class);\n \n         log =  emf.getConfiguration().getLog(\"test\");\n     }\n-        \n+\n+    // original testcase by Catalina\n     public void testO2MTreeQueryIndex() {\n         int[] fanOuts = {2,3,4};\n         createTreeNodeEntities(fanOuts);\n@@ -120,6 +126,7 @@ public void testO2MTreeQueryIndex() {\n         em.close();                \n     }\n \n+    // Testcases added by Donald with code reused from annonxml tests by Albert\n     public void testO2MQueryIndex() {\n         createEntities(JPQLIndexEntityClasses.OrderedOneToManyEntity, UnorderedNameEntity.class);\n         verifyEntities(JPQLIndexEntityClasses.OrderedOneToManyEntity, UnorderedNameEntity.class);\n@@ -130,15 +137,15 @@ public void testO2MXMLQueryIndex() {\n         verifyEntities(JPQLIndexEntityClasses.XMLOrderedOneToManyEntity, XMLUnorderedNameEntity.class);\n     }\n \n-    /* TODO\n     public void testM2MQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.OrderedManyToManyEntity, OrderedNameEntity.class);\n+        verifyEntities(JPQLIndexEntityClasses.OrderedManyToManyEntity, OrderedNameEntity.class);\n     }\n-    */\n \n-    /* TODO\n     public void testM2MXMLQueryIndex() {\n+        createEntities(JPQLIndexEntityClasses.OrderedManyToManyEntity, XMLOrderedNameEntity.class);\n+        verifyEntities(JPQLIndexEntityClasses.OrderedManyToManyEntity, XMLOrderedNameEntity.class);\n     }\n-    */\n \n     public void testElementQueryIndex() {\n         createEntities(JPQLIndexEntityClasses.OrderedElementEntity, String.class);\n@@ -181,7 +188,10 @@ private void assertArrayEquals(int[] a, int[] b) {\n         if (IOrderedEntity.class.isAssignableFrom(entityType.getEntityClass())) {\n             if (INameEntity.class.isAssignableFrom(elementClass)) {\n                 log.trace(\"** Test INameEntity modifications on IOrderedEntity.\");\n-                createOrderedEntities(entityType, (Class<INameEntity>)elementClass);\n+                createO2MEntities(entityType, (Class<INameEntity>)elementClass);\n+            } else if (IColumnEntity.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Test IColumnEntity modifications on IOrderedEntity.\");\n+                createM2MEntities(entityType, (Class<IColumnEntity>)elementClass);\n             } else {\n                 fail(\"createEntities(IOrderedEntity) - Unexpected elementClass=\" + elementClass.getSimpleName());\n             }\n@@ -197,7 +207,7 @@ private void assertArrayEquals(int[] a, int[] b) {\n         }\n     }\n         \n-    private void createOrderedEntities(JPQLIndexEntityClasses entityType, Class<INameEntity> elementClass)\n+    private void createO2MEntities(JPQLIndexEntityClasses entityType, Class<INameEntity> elementClass)\n     {\n         EntityManager em = null;\n         \n@@ -209,9 +219,11 @@ private void createOrderedEntities(JPQLIndexEntityClasses entityType, Class<INam\n                 elementClass.getName().lastIndexOf('.') + 1);\n             Integer entityId = 1;\n             \n+            // create the entity\n             IOrderedEntity newEntity = (IOrderedEntity)constructNewEntityObject(entityType);\n             newEntity.setId(entityId);\n-            // create the entity elements to add\n+            \n+            // create the elements to add\n             Constructor<INameEntity> elementConstrctor = elementClass.getConstructor(String.class);\n             List<INameEntity> newElements = new ArrayList<INameEntity>();\n             for (int i=0; i<Element_Names.length; i++) {\n@@ -224,24 +236,75 @@ private void createOrderedEntities(JPQLIndexEntityClasses entityType, Class<INam\n             em.getTransaction().begin();\n             for (INameEntity newElement : newElements)\n             {\n-                /* For Many to Many cases\n-                    jpaRW.getEm().persist(newElementB);\n-                    if (elementClass == OrderedNameEntity.class || elementClass == XMLOrderedNameEntity.class) {\n-                        if( listFieldName.charAt(1) == 'o') {\n-                            setColumnMethod.invoke(new2Boy, newEntity);\n-                        } else {\n-                            addColumnsMethod.invoke(new2Boy, newEntity);\n-                        }\n-                    }\n-                */\n                 em.persist(newElement);\n                 newEntity.addEntity((INameEntity)newElement);\n             }\n             em.persist(newEntity);\n             em.getTransaction().commit();\n             em.clear();\n \n-            // verify the entities were stored\n+            // verify the entity was stored\n+            log.trace(\"Verifing the entity was stored\");\n+            IOrderedEntity findEntity = em.find(entityClass, entityId);\n+            assertNotNull(\"Found entity just created\", findEntity);\n+            assertEquals(\"Verify entity id = \" + entityId, entityId.intValue(), findEntity.getId());\n+            assertEquals(\"Verify entity name = \" + entityClass.getName(), entityClass.getName(),\n+                findEntity.getClass().getName());\n+\n+        } catch (Throwable t) {\n+            log.error(t);\n+            throw new RuntimeException(t);\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private void createM2MEntities(JPQLIndexEntityClasses entityType, Class<IColumnEntity> elementClass)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedEntity> entityClass =\n+                (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            String elementClassName = elementClass.getName().substring(\n+                elementClass.getName().lastIndexOf('.') + 1);\n+            Integer entityId = 1;\n+            \n+            // create the entity\n+            IOrderedEntity newEntity = (IOrderedEntity)constructNewEntityObject(entityType);\n+            newEntity.setId(entityId);\n+            // persist the entity\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.persist(newEntity);\n+            \n+            // create and persist the elements\n+            Constructor<IColumnEntity> elementConstrctor = elementClass.getConstructor(String.class);\n+            List<INameEntity> newElements = new ArrayList<INameEntity>();\n+            IColumnEntity newElement;\n+            for (int i=0; i<Element_Names.length; i++) {\n+                newElement = elementConstrctor.newInstance(Element_Names[i]);\n+                // add parent relationship\n+                newElement.addEntity(newEntity);\n+                em.persist(newElement);\n+                newElements.add(newElement);\n+            }\n+            \n+            // update entity with elements\n+            log.trace(\"Adding \" + newElements.size() + \" of \" + elementClassName + \" to \" + entityClassName);\n+            newEntity.setEntities(newElements);\n+            em.persist(newEntity);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // verify the entity was stored\n             log.trace(\"Verifing the entity was stored\");\n             IOrderedEntity findEntity = em.find(entityClass, entityId);\n             assertNotNull(\"Found entity just created\", findEntity);\n@@ -315,6 +378,9 @@ private void createOrderedElements(JPQLIndexEntityClasses entityType)\n             if (INameEntity.class.isAssignableFrom(elementClass)) {\n                 log.trace(\"** Verify INameEntity modifications on IOrderedEntity.\");\n                 verifyOrderedEntities(entityType, (Class<INameEntity>)elementClass);\n+            } else if (IColumnEntity.class.isAssignableFrom(elementClass)) {\n+                log.trace(\"** Verify IColumnEntity modifications on IOrderedEntity.\");\n+                verifyOrderedEntities(entityType, (Class<INameEntity>)elementClass);\n             } else {\n                 fail(\"verifyEntities(IOrderedEntity) - Unexpected elementClass=\" + elementClass.getSimpleName());\n             }"},{"sha":"f0b24f72c6f2b342ca92e8ec73a203065a15c339","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=18a1a04c773dd5c3e2288173f64f58f822cefb50","patch":"@@ -331,6 +331,8 @@\n         <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity</class>\n         <class>org.apache.openjpa.persistence.jpql.entities.UnorderedNameEntity</class>\n         <class>org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedNameEntity</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                 value=\"buildSchema\" />"},{"sha":"1e04f24cb8484da242adbca81bf19f4bcb813817","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/orm.xml?ref=18a1a04c773dd5c3e2288173f64f58f822cefb50","patch":"@@ -54,4 +54,14 @@\n         </attributes>\n     </entity>\n \n+    <entity class=\"org.apache.openjpa.persistence.jpql.entities.XMLOrderedNameEntity\">\n+        <attributes>\n+            <id name=\"id\" />\n+            <basic name=\"name\" />\n+            <many-to-many name=\"columns\">\n+                <order-column/>\n+            </many-to-many>\n+        </attributes>\n+    </entity>\n+\n </entity-mappings>"},{"sha":"f1da8f977a49a465752d5a6fbb9bdeee397955bd","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/18a1a04c773dd5c3e2288173f64f58f822cefb50/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jpql/expressions/persistence.xml?ref=18a1a04c773dd5c3e2288173f64f58f822cefb50","patch":"@@ -37,6 +37,8 @@\n         <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedOneToManyEntity</class>\n         <class>org.apache.openjpa.persistence.jpql.entities.UnorderedNameEntity</class>\n         <class>org.apache.openjpa.persistence.jpql.entities.XMLUnorderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.OrderedNameEntity</class>\n+        <class>org.apache.openjpa.persistence.jpql.entities.XMLOrderedNameEntity</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\" />\n             <!-- <property name=\"openjpa.Log\" value=\"SQL=TRACE\"/> -->"}]}

