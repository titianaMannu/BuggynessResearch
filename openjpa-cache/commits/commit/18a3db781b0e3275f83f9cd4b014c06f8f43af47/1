{"sha":"18a3db781b0e3275f83f9cd4b014c06f8f43af47","node_id":"MDY6Q29tbWl0MjA2MzY0OjE4YTNkYjc4MWIwZTMyNzVmODNmOWNkNGIwMTRjMDZmOGY0M2FmNDc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-23T01:10:43Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-23T01:10:43Z"},"message":"OPENJPA-562, OPENJPA-536, OPENJPA-564, OPENJPA-536, OPENJPA-576, OPENJPA-577. Merging changes from 1.1.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@650714 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7e4ab306c414204e1c50ae0727eae355db860a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/e7e4ab306c414204e1c50ae0727eae355db860a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/18a3db781b0e3275f83f9cd4b014c06f8f43af47","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/18a3db781b0e3275f83f9cd4b014c06f8f43af47","html_url":"https://github.com/apache/openjpa/commit/18a3db781b0e3275f83f9cd4b014c06f8f43af47","comments_url":"https://api.github.com/repos/apache/openjpa/commits/18a3db781b0e3275f83f9cd4b014c06f8f43af47/comments","author":null,"committer":null,"parents":[{"sha":"2ba16b488a9bd2fcab2865871e469a00f1dd5b1c","url":"https://api.github.com/repos/apache/openjpa/commits/2ba16b488a9bd2fcab2865871e469a00f1dd5b1c","html_url":"https://github.com/apache/openjpa/commit/2ba16b488a9bd2fcab2865871e469a00f1dd5b1c"}],"stats":{"total":238,"additions":174,"deletions":64},"files":[{"sha":"57232a4bc772ea16b0d5bdd503b91afe1177d629","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -410,14 +410,13 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         //### we selected the embedded object fields and load the object\n         //### immediately; this will be inefficient when the embedded object\n         //### was not selected after all\n-\n         StoreContext ctx = store.getContext();\n         OpenJPAStateManager em = ctx.embed(null, null, sm, field);\n         sm.storeObject(field.getIndex(), em.getManagedInstance());\n \n         FieldMapping[] fields = field.getEmbeddedMapping().getFieldMappings();\n         Object eres, processed;\n-        boolean loaded = false;\n+        boolean needsLoad = false;\n         for (int i = 0; i < fields.length; i++) {\n             eres = res.getEager(fields[i]);\n             res.startDataRequest(fields[i]);\n@@ -429,18 +428,24 @@ else if (eres != null) {\n                         fields[i].loadEagerParallel(em, store, fetch, eres);\n                     if (processed != eres)\n                         res.putEager(fields[i], processed);\n-                } else\n+                } else {\n                     fields[i].load(em, store, fetch, res);\n-                loaded |= em.getLoaded().get(i);\n+                }\n+                needsLoad = needsLoad || (!em.getLoaded().get(i) && \n+                    fetch.requiresFetch(fields[i])\n+                        == FetchConfiguration.FETCH_LOAD);\n             } finally {\n                 res.endDataRequest();\n             }\n         }\n \n-        // after loading everything from result, load the rest of the\n-        // configured fields\n-        if (loaded)\n-            em.load(fetch);\n+        // After loading everything from result, load the rest of the\n+        // configured fields if anything is missing.\n+        if (needsLoad && \n+            fetch.requiresFetch(field.getFieldMetaData()) == \n+                JDBCFetchConfiguration.FETCH_LOAD) {\n+          em.load(fetch);\n+        }\n     }\n \n     /**"},{"sha":"a36c1ed2d16a9cb742ec7be6f6378e1bf07ccbe1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -157,7 +157,8 @@ public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n \n         if (sm != null && sm.getIntermediate(field.getIndex()) != null)\n             return -1;\n-        if (sel.isDistinct() && _lob && !field.isPrimaryKey())\n+        if (_lob && !field.isPrimaryKey() && (sel.isDistinct() ||\n+                eagerMode == JDBCFetchConfiguration.EAGER_NONE))\n             return -1;\n         sel.select(_cols, field.join(sel));\n         return 1;"},{"sha":"a807f847d37a6ae6388d3e789aceb82e2fc48836","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -162,15 +162,13 @@ public static DecoratingDataSource decorateDataSource(DataSource ds,\n                     decorators.addAll(decs);\n             }\n \n-            if (jdbcLog.isTraceEnabled() || sqlLog.isTraceEnabled()) {\n-                // logging decorator\n-                LoggingConnectionDecorator lcd =\n-                    new LoggingConnectionDecorator();\n-                Configurations.configureInstance(lcd, conf, opts);\n-                lcd.getLogs().setJDBCLog(jdbcLog);\n-                lcd.getLogs().setSQLLog(sqlLog);\n-                decorators.add(lcd);\n-            }\n+            // logging decorator\n+            LoggingConnectionDecorator lcd =\n+                new LoggingConnectionDecorator();\n+            Configurations.configureInstance(lcd, conf, opts);\n+            lcd.getLogs().setJDBCLog(jdbcLog);\n+            lcd.getLogs().setSQLLog(sqlLog);\n+            decorators.add(lcd);\n \n             dds.addDecorators(decorators);\n             return dds;"},{"sha":"9b01fc66f0bf141874f1c8615416113504a6e3ba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":65,"deletions":3,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n@@ -51,7 +53,7 @@\n     /**\n      * Whether the driver automatically deserializes blobs.\n      */\n-    public boolean driverDeserializesBlobs = true;\n+    public boolean driverDeserializesBlobs = false;\n \n     /**\n      * Whether to inline multi-table bulk-delete operations into MySQL's \n@@ -70,11 +72,9 @@ public MySQLDictionary() {\n         supportsDeferredConstraints = false;\n         constraintNameMode = CONS_NAME_MID;\n         supportsMultipleNontransactionalResultSets = false;\n-        supportsSubselect = false; // old versions\n         requiresAliasForSubselect = true; // new versions\n         supportsSelectStartIndex = true;\n         supportsSelectEndIndex = true;\n-        allowsAliasInBulkClause = false;\n \n         concatenateFunction = \"CONCAT({0},{1})\";\n \n@@ -112,6 +112,68 @@ public MySQLDictionary() {\n             \"ZEROFILL\" }));\n     }\n \n+    public void connectedConfiguration(Connection conn) throws SQLException {\n+        super.connectedConfiguration(conn);\n+\n+        DatabaseMetaData metaData = conn.getMetaData();\n+        // The product version looks like 4.1.3-nt\n+        String productVersion = metaData.getDatabaseProductVersion();\n+        // The driver version looks like mysql-connector-java-3.1.11 (...)\n+        String driverVersion = metaData.getDriverVersion();\n+\n+        try {\n+            int[] versions = getMajorMinorVersions(productVersion);\n+            int maj = versions[0];\n+            int min = versions[1];\n+            if (maj < 4 || (maj == 4 && min < 1)) {\n+                supportsSubselect = false;\n+                allowsAliasInBulkClause = false;\n+            }\n+\n+            versions = getMajorMinorVersions(driverVersion);\n+            maj = versions[0];\n+            if (maj < 5) {\n+                driverDeserializesBlobs = true;\n+            }\n+        } catch (IllegalArgumentException e) {\n+            // we don't understand the version format.\n+            // That is ok. We just take the default values.\n+        }\n+    }\n+\n+    private static int[] getMajorMinorVersions(String versionStr)\n+        throws IllegalArgumentException {\n+        int beginIndex = 0;\n+        int endIndex = 0;\n+\n+        versionStr = versionStr.trim();\n+        char[] charArr = versionStr.toCharArray();\n+        for (int i = 0; i < charArr.length; i++) {\n+            if (Character.isDigit(charArr[i])) {\n+                beginIndex = i;\n+                break;\n+            }\n+        }\n+\n+        for (int i = beginIndex+1; i < charArr.length; i++) {\n+            if (charArr[i] != '.' && !Character.isDigit(charArr[i])) {\n+                endIndex = i;\n+                break;\n+            }\n+        }\n+\n+        if (endIndex < beginIndex)\n+            throw new IllegalArgumentException();\n+\n+        String[] arr = versionStr.substring(beginIndex, endIndex).split(\"\\\\.\");\n+        if (arr.length < 2)\n+            throw new IllegalArgumentException();\n+\n+        int maj = Integer.parseInt(arr[0]);\n+        int min = Integer.parseInt(arr[1]);\n+        return new int[]{maj, min};\n+    }\n+\n     public String[] getCreateTableSQL(Table table) {\n         String[] sql = super.getCreateTableSQL(table);\n         if (!StringUtils.isEmpty(tableType))"},{"sha":"467efdbfd952e18aa6e886f69f0ac7adb4814546","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -1124,9 +1124,11 @@ public void setUsesImplData(Boolean implData) {\n                     //set \"isUsedInOrderBy\" to the field\n                     ClassMetaData elemCls = getElement()\n                         .getDeclaredTypeMetaData();\n-                    FieldMetaData fmd = elemCls.getDeclaredField(decs[i]);\n-                    if (fmd != null)\n-                    \tfmd.setUsedInOrderBy(true);                    \n+                    if (elemCls != null) {\n+                      FieldMetaData fmd = elemCls.getDeclaredField(decs[i]);\n+                      if (fmd != null)\n+                        fmd.setUsedInOrderBy(true);                      \n+                    }\n                 }\n                 _orders = orders;\n             }"},{"sha":"12e18562756ee1c4cd65fa952818cd2d13927a83","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -30,7 +30,7 @@\n public class InheritanceComparator\n     implements Comparator, Serializable {\n \n-    private Class _base = null;\n+    private Class _base = Object.class;\n \n     /**\n      * Set the least-derived type possible; defaults to <code>null</code>.\n@@ -92,8 +92,6 @@ else if (i1 > i2)\n     private int levels(Class to) {\n         if (to.isInterface())\n             return to.getInterfaces().length;\n-        if (_base == null)\n-            return 0;\n         for (int i = 0; to != null; i++, to = to.getSuperclass())\n             if (to == _base)\n                 return i;"},{"sha":"79376fb717f684e500ec77e09c503c1762ba9259","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.ListIterator;\n+import java.io.Serializable;\n+\n+public class InheritanceOrderedMetaDataList\n+    implements Serializable {\n+\n+    private MetaDataInheritanceComparator _comp\n+        = new MetaDataInheritanceComparator();\n+    private LinkedList<ClassMetaData> buffer = new LinkedList<ClassMetaData>();\n+\n+    public boolean add(ClassMetaData meta) {\n+        if (meta == null || buffer.contains(meta))\n+            return false;\n+        for (ListIterator<ClassMetaData> itr = buffer.listIterator();\n+            itr.hasNext();) {\n+            int ord = _comp.compare(meta, itr.next());\n+            if (ord > 0)\n+                continue;\n+            if (ord == 0)\n+                return false;\n+            itr.previous();\n+            itr.add(meta);\n+            return true;\n+        }\n+        buffer.add(meta);\n+        return true;\n+    }\n+\n+    public boolean remove(ClassMetaData meta) {\n+        return buffer.remove(meta);\n+    }\n+\n+    public ClassMetaData peek() {\n+        return buffer.peek();\n+    }\n+    \n+    public int size() {\n+        return buffer.size();\n+    }\n+    \n+    public Iterator<ClassMetaData> iterator() {\n+        return buffer.iterator();\n+    }\n+    \n+    public boolean isEmpty() {\n+        return buffer.isEmpty();\n+    }\n+    \n+    public void clear() {\n+        buffer.clear();\n+    }\n+}"},{"sha":"1b5845769d80a1ba85922d93ec1d8be73f420fcf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":7,"deletions":29,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -31,7 +31,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.SortedSet;\n import java.util.TreeSet;\n \n import org.apache.commons.lang.StringUtils;\n@@ -137,10 +136,10 @@\n     private final Collection _registered = new HashSet();\n \n     // set of metadatas we're in the process of resolving\n-    private final SortedSet _resolving = new TreeSet\n-        (new MetaDataInheritanceComparator());\n-    private final SortedSet _mapping = new TreeSet\n-        (new MetaDataInheritanceComparator());\n+    private final InheritanceOrderedMetaDataList _resolving =\n+        new InheritanceOrderedMetaDataList();\n+    private final InheritanceOrderedMetaDataList _mapping =\n+        new InheritanceOrderedMetaDataList();\n     private final List _errs = new LinkedList();\n \n     // system listeners\n@@ -574,7 +573,6 @@ private void resolve(ClassMetaData meta) {\n      * if we're still in the process of resolving other metadatas.\n      */\n     private List resolveMeta(ClassMetaData meta) {\n-    \tsetBaseIfNecessary(meta);\n         if (meta.getPCSuperclass() == null) {\n             // set superclass\n             Class sup = meta.getDescribedType().getSuperclass();\n@@ -618,27 +616,6 @@ private List resolveMeta(ClassMetaData meta) {\n         return processBuffer(meta, _resolving, MODE_META);\n     }\n     \n-    private void setBaseIfNecessary(ClassMetaData meta) {\n-        if (_resolving == null)\n-            return;\n-\n-        InheritanceComparator comp =\n-            (InheritanceComparator) _resolving.comparator();\n-        if (meta.getPCSuperclass() == null) {\n-            Class sup = meta.getDescribedType().getSuperclass();\n-            Class pBase = null;\n-            while (sup != null && sup != Object.class) {\n-                pBase = sup;\n-                sup = sup.getSuperclass();\n-            }\n-            if (pBase != null && !pBase.equals(comp.getBase())) {\n-                // setBase() can be called because getMetaData() is\n-                // syncronized\n-                comp.setBase(pBase);\n-            }\n-        }\n-    }\n-\n     /**\n      * Load mapping information for the given metadata.\n      */\n@@ -719,7 +696,8 @@ private boolean resolveMapping(ClassMetaData meta) {\n     /**\n      * Process the given metadata and the associated buffer.\n      */\n-    private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n+    private List processBuffer(ClassMetaData meta,\n+        InheritanceOrderedMetaDataList buffer, int mode) {\n         // if we're already processing a metadata, just buffer this one; when\n         // the initial metadata finishes processing, we traverse the buffer\n         // and process all the others that were introduced during reentrant\n@@ -734,7 +712,7 @@ private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n         ClassMetaData buffered;\n         List processed = new ArrayList(5);\n         while (!buffer.isEmpty()) {\n-            buffered = (ClassMetaData) buffer.first();\n+            buffered = buffer.peek();\n             try {\n                 buffered.resolve(mode);\n                 processed.add(buffered);"},{"sha":"c93377fc49a13d7b2ebe26dd4e372bd07586841a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/18a3db781b0e3275f83f9cd4b014c06f8f43af47/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java?ref=18a3db781b0e3275f83f9cd4b014c06f8f43af47","patch":"@@ -25,10 +25,6 @@\n \r\n public class TestMetaDataInheritanceComparator extends PersistenceTestCase {\r\n \r\n-    public void testInheritanceComparatorWithoutBase() {\r\n-        inheritanceComparatorHelper(false);\r\n-    }\r\n-\r\n     public void testInheritanceComparatorWithBase() {\r\n         inheritanceComparatorHelper(true);\r\n     }\r\n@@ -47,10 +43,6 @@ private void inheritanceComparatorHelper(boolean base) {\n         assertTrue(comp.compare(AbstractThing.class, C.class) < 0);\r\n     }\r\n \r\n-    public void testMetaDataInheritanceComparatorWithoutBase() {\r\n-        metaDataInheritanceComparatorHelper(false);\r\n-    }\r\n-\r\n     public void testMetaDataInheritanceComparatorWithBase() {\r\n         metaDataInheritanceComparatorHelper(true);\r\n     }\r"}]}

