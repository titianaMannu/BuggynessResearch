{"sha":"191f26d72d58b992ee7a6f82c6973681a3bdc275","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5MWYyNmQ3MmQ1OGI5OTJlZTdhNmY4MmM2OTczNjgxYTNiZGMyNzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-28T21:12:17Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-28T21:12:17Z"},"message":"OPENJPA-669 DBDictionary can specify the type of native sequences.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680501 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7072cb21c58630ac94e43cdefa4a038fd9875a1c","url":"https://api.github.com/repos/apache/openjpa/git/trees/7072cb21c58630ac94e43cdefa4a038fd9875a1c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275","html_url":"https://github.com/apache/openjpa/commit/191f26d72d58b992ee7a6f82c6973681a3bdc275","comments_url":"https://api.github.com/repos/apache/openjpa/commits/191f26d72d58b992ee7a6f82c6973681a3bdc275/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d81f8652f85ffc83d728c92fc2262c64c64e17c","url":"https://api.github.com/repos/apache/openjpa/commits/3d81f8652f85ffc83d728c92fc2262c64c64e17c","html_url":"https://github.com/apache/openjpa/commit/3d81f8652f85ffc83d728c92fc2262c64c64e17c"}],"stats":{"total":16,"additions":15,"deletions":1},"files":[{"sha":"9ed5e5e0b2ad9056943aa7554e3884bbbb72e8b2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/191f26d72d58b992ee7a6f82c6973681a3bdc275/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/191f26d72d58b992ee7a6f82c6973681a3bdc275/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=191f26d72d58b992ee7a6f82c6973681a3bdc275","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -98,6 +99,7 @@ public void setSequence(String seqName) {\n      * @deprecated Use {@link #setSequence}. Retained for\n      * backwards-compatibility for auto-configuration.\n      */\n+    @Deprecated\n     public void setSequenceName(String seqName) {\n         setSequence(seqName);\n     }\n@@ -147,18 +149,21 @@ public void setIncrement(int increment) {\n     /**\n      * @deprecated Retained for backwards-compatibility for auto-configuration.\n      */\n+    @Deprecated\n     public void setTableName(String table) {\n         _tableName = table;\n     }\n \n     /**\n      * @deprecated Retained for backwards-compatibility for auto-configuration.\n      */\n+    @Deprecated\n     public void setFormat(String format) {\n         _format = format;\n         _subTable = true;\n     }\n \n+    @Override\n     public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         // sequence already exists?\n         if (group.isKnownSequence(_seqName))\n@@ -175,6 +180,7 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         schema.importSequence(_seq);\n     }\n \n+    @Override\n     public JDBCConfiguration getConfiguration() {\n         return _conf;\n     }\n@@ -202,8 +208,11 @@ public void endConfiguration() {\n         Object[] subs = (_subTable) ? new Object[]{ name, _tableName }\n             : new Object[]{ name };\n         _select = MessageFormat.format(_format, subs);\n+        \n+        type = dict.nativeSequenceType;\n     }\n     \n+    @Override\n     protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n         throws SQLException {\n         Connection conn = getConnection(store);"},{"sha":"30d474c0a9d8509c591798e3282635ffa442f908","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/191f26d72d58b992ee7a6f82c6973681a3bdc275/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/191f26d72d58b992ee7a6f82c6973681a3bdc275/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=191f26d72d58b992ee7a6f82c6973681a3bdc275","patch":"@@ -89,6 +89,7 @@\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.Seq;\n import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -327,6 +328,8 @@\n     public String sequenceSQL = null;\n     public String sequenceSchemaSQL = null;\n     public String sequenceNameSQL = null;\n+    // most native sequences can be run inside the business transaction\n+    public int nativeSequenceType= Seq.TYPE_CONTIGUOUS;\n \n     protected JDBCConfiguration conf = null;\n     protected Log log = null;"},{"sha":"904b330bc4d018dd2b978b204897811290d8d6d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/191f26d72d58b992ee7a6f82c6973681a3bdc275/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/191f26d72d58b992ee7a6f82c6973681a3bdc275/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=191f26d72d58b992ee7a6f82c6973681a3bdc275","patch":"@@ -270,7 +270,8 @@ protected Seq instantiate(ClassLoader envLoader) {\n                     J2DoPrivHelper.newInstanceAction(cls));\n                 Configurations.configureInstance(seq,\n                     _repos.getConfiguration(), props.toString());\n-                seq.setType(_type);\n+                if(_type != Seq.TYPE_DEFAULT)\n+                    seq.setType(_type);\n             } else if (_factory != null)\n                 seq = _factory.toSequence(cls, props.toString());\n             else\n@@ -339,6 +340,7 @@ public void close() {\n             }\n     }\n \n+    @Override\n     public String toString() {\n         return _name;\n     }"}]}

