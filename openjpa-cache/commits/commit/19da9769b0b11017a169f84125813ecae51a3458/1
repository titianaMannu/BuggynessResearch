{"sha":"19da9769b0b11017a169f84125813ecae51a3458","node_id":"MDY6Q29tbWl0MjA2MzY0OjE5ZGE5NzY5YjBiMTEwMTdhMTY5Zjg0MTI1ODEzZWNhZTUxYTM0NTg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-21T20:21:50Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-21T20:21:50Z"},"message":"OPENJPA-1253: support non-default uni-directional OneToMany mapping using foreign key strategy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817399 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61d2109ac66395f58f36348fbb06d72ed79bc5ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/61d2109ac66395f58f36348fbb06d72ed79bc5ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/19da9769b0b11017a169f84125813ecae51a3458","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/19da9769b0b11017a169f84125813ecae51a3458","html_url":"https://github.com/apache/openjpa/commit/19da9769b0b11017a169f84125813ecae51a3458","comments_url":"https://api.github.com/repos/apache/openjpa/commits/19da9769b0b11017a169f84125813ecae51a3458/comments","author":null,"committer":null,"parents":[{"sha":"828e08ee0e921f61df972f5b190b3bbf67c13b42","url":"https://api.github.com/repos/apache/openjpa/commits/828e08ee0e921f61df972f5b190b3bbf67c13b42","html_url":"https://github.com/apache/openjpa/commit/828e08ee0e921f61df972f5b190b3bbf67c13b42"}],"stats":{"total":61,"additions":55,"deletions":6},"files":[{"sha":"9ed2a303aa121765b120f0da4cb9b72846d6ab04","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/19da9769b0b11017a169f84125813ecae51a3458/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/19da9769b0b11017a169f84125813ecae51a3458/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=19da9769b0b11017a169f84125813ecae51a3458","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ChangeTracker;\n import org.apache.openjpa.util.InternalException;\n@@ -63,6 +64,7 @@\n \n     private boolean _orderInsert = false;\n     private boolean _orderUpdate = false;\n+    private boolean _uni1MFK = false;\n \n     protected ClassMapping[] getIndependentElementMappings(boolean traverse) {\n         return field.getElementMapping().getIndependentTypeMappings();\n@@ -153,10 +155,20 @@ public void map(boolean adapt) {\n             \tfield.setOrderColumnIO(finfo.getColumnIO());\n             }\n             return;\n+        } else { \n+            if (field.getValueInfo().getColumns().size() > 0 && \n+                field.getAccessType() == FieldMetaData.ONE_TO_MANY) {\n+                _uni1MFK = true;\n+            }\n         }\n \n         // map inverse foreign key in related table\n         ForeignKey fk = vinfo.getInverseTypeJoin(elem, field.getName(), adapt);\n+        if (_uni1MFK) {\n+            Column[] locals = fk.getColumns();\n+            for (int i = 0; i < locals.length; i++)\n+                locals[i].setUni1MFK(true);\n+        }\n         elem.setForeignKey(fk);\n         elem.setColumnIO(vinfo.getColumnIO());\n         elem.setColumns(elem.getTypeMapping().getPrimaryKeyColumns());"},{"sha":"ef3e827994f86250d1399654ee902ca76e43cb4d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/19da9769b0b11017a169f84125813ecae51a3458/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/19da9769b0b11017a169f84125813ecae51a3458/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=19da9769b0b11017a169f84125813ecae51a3458","patch":"@@ -75,6 +75,7 @@\n     private VersionStrategy _versionStrategy = null;\n     private String _comment = null;\n     private boolean _XML = false;\n+    private boolean _isUni1MFK = false;\n     \n     /**\n      * Default constructor.\n@@ -733,6 +734,8 @@ public void copy(Column from) {\n             _flags = from._flags;\n         if (!isXML())\n             setXML(from.isXML());\n+        if (!isUni1MFK())\n+            setUni1MFK(from.isUni1MFK());\n     }\n     \n     /**\n@@ -792,4 +795,26 @@ public boolean isImplicitRelation() {\n     public void setImplicitRelation(boolean flag) {\n     \t_implicitRelation |= flag;\n     }\n+    \n+    /**\n+     * Sets a marker to indicate that this instance represents a uni-directional \n+     * one to many relation using the foreign key strategy. This non-default \n+     * mapping of uni-directional one-to-many is supported in JPA 2.0.  \n+     * \n+     * @since 2.0\n+     */\n+    public boolean isUni1MFK() {\n+        return _isUni1MFK;\n+    }\n+    \n+    /** \n+     *  Affirms if this instance represents a uni-directional one to many relation\n+     *  using the foreign key strategy. This non-default mapping of uni-directional \n+     *  one-to-many is supported in JPA 2.0.  \n+     *\n+     * @since 2.0\n+     */\n+    public void setUni1MFK(boolean isUni1MFK) {\n+        _isUni1MFK = isUni1MFK;\n+    }\n }"},{"sha":"f551f7186f886c337d2c37a840f146de862d727b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/19da9769b0b11017a169f84125813ecae51a3458/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/19da9769b0b11017a169f84125813ecae51a3458/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java?ref=19da9769b0b11017a169f84125813ecae51a3458","patch":"@@ -361,8 +361,8 @@ protected void setObject(Column col, Object val, int metaType,\n      * is a default value or was not set and the column is not a primary key.\n      */\n     boolean allowsUpdate(Column col, Object old, Object cur) {\n-    \treturn !col.isPrimaryKey() && col.isImplicitRelation()\n-    \t   && (isDefaultValue(old));\n+    \treturn ((!col.isPrimaryKey() && col.isImplicitRelation()) ||\n+    \t   col.isUni1MFK()) && (isDefaultValue(old));\n     }\n     \n     boolean isDefaultValue(Object val) {"},{"sha":"556deea5e2818a086df21a8ed7321a513de4fed6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/19da9769b0b11017a169f84125813ecae51a3458/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/19da9769b0b11017a169f84125813ecae51a3458/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=19da9769b0b11017a169f84125813ecae51a3458","patch":"@@ -221,22 +221,34 @@ public void crudUni1MFK(EntityManager em) {\n         cs.add(c1);\n         em.persist(c1);\n         em.getTransaction().commit();\n+        \n+        // update by removing a c and then add this c to a new u\n+        em.getTransaction().begin();\n+        EntityC_U1MFK c2 = cs.remove(0);\n+        \n+        Uni_1ToM_FK u2 = new Uni_1ToM_FK();\n+        u2.setName(\"uni1mfk2\");\n+        List<EntityC_U1MFK> cs2 = new ArrayList<EntityC_U1MFK>();\n+        cs2.add(c2);\n+        u2.setEntityCs(cs2);\n+        em.persist(u2);\n+        em.getTransaction().commit();\n         em.clear();\n         \n         //query\n-        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_FK u\");\n+        Query q = em.createQuery(\"SELECT u FROM Uni_1ToM_FK u where u.name = 'newName'\");\n         Uni_1ToM_FK u1 = (Uni_1ToM_FK)q.getSingleResult();\n         assertEquals(u, u1);\n         em.clear();\n \n         //find\n         long id = u1.getId();\n-        Uni_1ToM_FK u2 = em.find(Uni_1ToM_FK.class, id);\n-        assertEquals(u, u2);\n+        Uni_1ToM_FK findU1 = em.find(Uni_1ToM_FK.class, id);\n+        assertEquals(findU1, u1);\n         \n         //remove\n         em.getTransaction().begin();\n-        em.remove(u2);\n+        em.remove(findU1);\n         em.getTransaction().commit();\n         em.clear();\n     }"}]}

