{"sha":"1a216e9fb71736bbcf2007c0e3a4463332280eeb","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhMjE2ZTlmYjcxNzM2YmJjZjIwMDdjMGUzYTQ0NjMzMzIyODBlZWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-02T07:58:31Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-02T07:58:31Z"},"message":"OPENJPA-1483: support count distinct compound key \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@905540 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58b38b901cdda7bb868602bb89f77d208d640021","url":"https://api.github.com/repos/apache/openjpa/git/trees/58b38b901cdda7bb868602bb89f77d208d640021"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a216e9fb71736bbcf2007c0e3a4463332280eeb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a216e9fb71736bbcf2007c0e3a4463332280eeb","html_url":"https://github.com/apache/openjpa/commit/1a216e9fb71736bbcf2007c0e3a4463332280eeb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a216e9fb71736bbcf2007c0e3a4463332280eeb/comments","author":null,"committer":null,"parents":[{"sha":"784e4560db9ed097c77b23d50eee4731d49510b2","url":"https://api.github.com/repos/apache/openjpa/commits/784e4560db9ed097c77b23d50eee4731d49510b2","html_url":"https://github.com/apache/openjpa/commit/784e4560db9ed097c77b23d50eee4731d49510b2"}],"stats":{"total":172,"additions":160,"deletions":12},"files":[{"sha":"023d2dc91ab409db4c4502dcbffb1982fb1d5dbd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","status":"modified","additions":28,"deletions":4,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java?ref=1a216e9fb71736bbcf2007c0e3a4463332280eeb","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n \n@@ -29,16 +30,30 @@\n class Count\n     extends UnaryOp {\n \n+    private boolean isCountMultiColumns = false;\n+    private boolean isCountDistinct = false;\n+    \n     /**\n      * Constructor. Provide the value to operate on.\n      */\n     public Count(Val val) {\n         super(val);\n+        if (val instanceof Distinct)\n+            isCountDistinct = true;\n     }\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         // join into related object if present\n-        return initializeValue(sel, ctx, JOIN_REL);\n+        ExpState expState = initializeValue(sel, ctx, JOIN_REL);\n+        Val val = isCountDistinct ? ((Distinct)getValue()).getValue() : getValue();\n+        if (val instanceof PCPath) {\n+            Column[] cols = ((PCPath)val).getColumns(expState);\n+            if (cols.length > 1) {\n+                isCountMultiColumns = true;\n+            }\n+        }\n+            \n+        return expState;\n     }\n \n     protected Class getType(Class c) {\n@@ -52,15 +67,24 @@ protected String getOperator() {\n     public boolean isAggregate() {\n         return true;\n     }\n-    \n+\n+    public boolean isCountDistinctMultiCols() {\n+        return isCountDistinct && isCountMultiColumns;\n+    }\n+\n     /**\n      * Overrides SQL formation by replacing COUNT(column) by COUNT(*) when specific conditions are met and\n      * DBDictionary configuration <code>useWildCardForCount</code> is set.\n      */\n     @Override\n     public void appendTo(Select sel, ExpContext ctx, ExpState state, SQLBuffer sql, int index) {\n-        super.appendTo(sel, ctx, state, sql, index);\n-        if (ctx.store.getDBDictionary().useWildCardForCount && state.joins.isEmpty()) {\n+        if (isCountDistinctMultiCols()) {\n+            getValue().appendTo(sel, ctx, state, sql, 0);\n+            sql.addCastForParam(getOperator(), getValue());\n+        } else\n+            super.appendTo(sel, ctx, state, sql, index);\n+        if ((ctx.store.getDBDictionary().useWildCardForCount && state.joins.isEmpty()) ||\n+            !isCountDistinct && isCountMultiColumns){\n             String s = sql.getSQL();\n             if (s.startsWith(\"COUNT(\") && s.endsWith(\")\")) {\n                 sql.replaceSqlString(\"COUNT(\".length(), s.length()-1, \"*\");"},{"sha":"486a940c7d6ca2eaccca7ec7962f772ff707b68b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java?ref=1a216e9fb71736bbcf2007c0e3a4463332280eeb","patch":"@@ -41,4 +41,22 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n     protected String getOperator() {\n         return \"DISTINCT\";\n     }\n+\n+    @Override\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        Val val = getValue();\n+        if (val instanceof PCPath) {\n+            boolean noParen = getNoParen();\n+            sql.append(getOperator());\n+            sql.append(noParen ? \" \" : \"(\");\n+            ((PCPath)val).appendTo(sel, ctx, state, sql); \n+            sql.addCastForParam(getOperator(), val);\n+            if (!noParen)\n+                sql.append(\")\");\n+            \n+        } else\n+            super.appendTo(sel, ctx, state, sql, index);\n+    }\n+    \n }"},{"sha":"ea59e783621cec4da6c9386c60277bb94c871dc7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=1a216e9fb71736bbcf2007c0e3a4463332280eeb","patch":"@@ -970,9 +970,23 @@ public int length(Select sel, ExpContext ctx, ExpState state) {\n         return getColumns(state).length;\n     }\n \n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql) {\n+        Column[] cols = getColumns(state);\n+        for (int i = 0; i < cols.length; i++) {\n+            appendTo(sel, state, sql, cols[i]);\n+            if (i < cols.length -1)\n+            sql.append(\", \");\n+        }\n+    }\n+    \n     public void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql, int index) {\n         Column col = getColumns(state)[index];\n+        appendTo(sel, state, sql, col);\n+    }\n+    \n+    public void appendTo(Select sel, ExpState state, SQLBuffer sql, Column col) {\n         if (sel != null)\n             sel.setSchemaAlias(_schemaAlias);\n "},{"sha":"204294a0ca15ebbcdb589e95f53d92a383b8c553","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":38,"deletions":4,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=1a216e9fb71736bbcf2007c0e3a4463332280eeb","patch":"@@ -36,6 +36,8 @@\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.UnsupportedException;\n \n /**\n  * Turns parsed queries into selects.\n@@ -48,6 +50,7 @@\n \n     private boolean _extent = false;\n     private Select _subselect = null;\n+    private static final Localizer _loc = Localizer.forPackage(SelectConstructor.class);\n \n     /**\n      * Return true if we know the select to have on criteria; to be an extent.\n@@ -115,6 +118,18 @@ public Select evaluate(ExpContext ctx, Select parent, String alias,\n         }\n         for (int i = 0; i < exps.grouping.length; i++)\n             ((Val) exps.grouping[i]).groupBy(sel, ctx, state.grouping[i]);\n+        \n+        if (exps.projections.length == 1) {\n+            Val val = (Val) exps.projections[0];\n+            if (val instanceof Count && ((Count)val).isCountDistinctMultiCols()) {\n+                Select newSel = ctx.store.getSQLFactory().newSelect();\n+                newSel.select(\"COUNT(*)\", val);\n+                newSel.setExpectedResultCount(1, true);\n+                newSel.setFromSelect(sel);\n+                sel.setExpectedResultCount(0, true);\n+                sel = newSel;\n+            }\n+        }        \n         return sel;\n     }\n \n@@ -235,6 +250,10 @@ private void initialize(Select sel, ExpContext ctx, QueryExpressions exps,\n                 // projections; this ensures that we have all our joins cached\n                 state.projections[i] = resultVal.initialize(sel, ctx, \n                     Val.JOIN_REL | Val.FORCE_OUTER);\n+                if (exps.projections.length > 1 && resultVal instanceof Count) {\n+                    if (((Count)resultVal).isCountDistinctMultiCols())\n+                        throw new UnsupportedException(_loc.get(\"count-distinct-multi-col-only\"));\n+                }\n                 joins = sel.and(joins, state.projections[i].joins);\n             }\n         }\n@@ -290,6 +309,8 @@ public void select(Select sel, ExpContext ctx, ClassMapping mapping,\n         Select inner = sel.getFromSelect();\n         Val val;\n         Joins joins = null;\n+        boolean isCountDistinctMultiCols = false;\n+\n         if (sel.getSubselectPath() != null)\n             joins = sel.newJoins().setSubselect(sel.getSubselectPath());\n \n@@ -307,19 +328,32 @@ public void select(Select sel, ExpContext ctx, ClassMapping mapping,\n             // subselect for objects; we really just need the primary key values\n             sel.select(mapping.getPrimaryKeyColumns(), joins);\n         } else {\n+            if (exps.projections.length == 1) {\n+                val = (Val) exps.projections[0];\n+                if (val instanceof Count && ((Count)val).isCountDistinctMultiCols()) {\n+                    isCountDistinctMultiCols = true;\n+                    if (sel.getParent() != null)\n+                        throw new UnsupportedException(_loc.get(\"count-distinct-multi-col-subselect-unsupported\"));\n+                }\n+            }            \n+\n             // if we have an inner select, we need to select the candidate\n             // class' pk columns to guarantee unique instances\n-            if (inner != null)\n+            if (inner != null && !isCountDistinctMultiCols)\n                 inner.select(mapping.getPrimaryKeyColumns(), joins);\n \n             // select each result value; no need to pass on the eager mode since\n             // under projections we always use EAGER_NONE\n             boolean pks = sel.getParent() != null;\n             for (int i = 0; i < exps.projections.length; i++) {\n                 val = (Val) exps.projections[i];\n-                if (inner != null)\n-                    val.selectColumns(inner, ctx, state.projections[i], pks);\n-                val.select(sel, ctx, state.projections[i], pks);\n+                if (inner != null) {\n+                    if (!isCountDistinctMultiCols)\n+                        val.selectColumns(inner, ctx, state.projections[i], pks);\n+                    else\n+                        val.select(inner, ctx, state.projections[i], pks);\n+                } else\n+                    val.select(sel, ctx, state.projections[i], pks);\n             }\n \n             // make sure having columns are selected since it is required by "},{"sha":"be543b64803fbd09b13466e86d9ad174031fdc12","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=1a216e9fb71736bbcf2007c0e3a4463332280eeb","patch":"@@ -74,6 +74,10 @@ public Class getType() {\n     public void setImplicitType(Class type) {\n         _cast = type;\n     }\n+    \n+    public boolean getNoParen() {\n+        return _noParen;\n+    }\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         return initializeValue(sel, ctx, flags);"},{"sha":"d3d033316ea372c94c210e1f8bb52d7903bddaea","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=1a216e9fb71736bbcf2007c0e3a4463332280eeb","patch":"@@ -3111,9 +3111,10 @@ public Object get(int i) {\n                         alias = alias + _dict.getStringVal;\n                         \n                     String as = null;\n-                    if (inner)\n-                        as = ((String) alias).replace('.', '_');\n-                    else if (_selectAs != null)\n+                    if (inner) {\n+                        if (alias instanceof String)\n+                            as = ((String) alias).replace('.', '_');\n+                    } else if (_selectAs != null)\n                         as = (String) _selectAs.get(id);\n                     else if (id instanceof Value)\n                         as = ((Value) id).getAlias();"},{"sha":"70fa2dd8a03b6936677f7cdc8170cdd2fcae4b03","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties?ref=1a216e9fb71736bbcf2007c0e3a4463332280eeb","patch":"@@ -30,4 +30,8 @@ invalid-unbound-var: Invalid unbound variable \"{0}\" in query.\n no-order-column: Field \"{0}\" does not have order column defined\".\n not-collection-parm: Invalid input parameter \"{0}\", a collection-valued \\\n     input parameter is expected.\n-empty-collection-parm: Input parameter \"{0}\" is empty.\n\\ No newline at end of file\n+empty-collection-parm: Input parameter \"{0}\" is empty.\n+count-distinct-multi-col-only: Count distinct compound primary key is not \\\n+    supported when there are other projection items.\n+count-distinct-multi-col-subselect-unsupported: Count distinct multiple columns \\\n+\tin the subselect is not supported.\n\\ No newline at end of file"},{"sha":"419f2d06de205d6fe67478caa14ee2d23e3d5383","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/1a216e9fb71736bbcf2007c0e3a4463332280eeb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=1a216e9fb71736bbcf2007c0e3a4463332280eeb","patch":"@@ -206,6 +206,55 @@ public void testEmbeddedIdContainedInIdClass() {\n         assertNotNull(newDep);\n     }\n     \n+    public void testCountDistinctMultiCols() {\n+        EntityManager em = emf.createEntityManager(); \n+\n+        Employee2 emp1 = new Employee2();\n+        EmployeeId2 empId1 = new EmployeeId2();\n+        empId1.setFirstName(\"James\");\n+        empId1.setLastName(\"Bond\");\n+        emp1.setEmpId(empId1);\n+        \n+        Employee2 emp2 = new Employee2();\n+        EmployeeId2 empId2 = new EmployeeId2();\n+        empId2.setFirstName(\"James\");\n+        empId2.setLastName(\"Obama\");\n+        emp2.setEmpId(empId2);\n+        \n+        Dependent2 dep1 = new Dependent2();\n+        DependentId2 depId1 = new DependentId2();\n+        depId1.setEmpPK(empId1);\n+        depId1.setName(\"Alan\");\n+        dep1.setId(depId1);\n+        \n+        Dependent2 dep2 = new Dependent2();\n+        DependentId2 depId2 = new DependentId2();\n+        depId2.setEmpPK(empId2);\n+        depId2.setName(\"Darren\");\n+        dep2.setId(depId2);\n+        \n+        em.persist(emp1);\n+        em.persist(emp2);\n+        em.persist(dep1);\n+        em.persist(dep2);\n+        \n+        em.getTransaction().begin();\n+        em.flush();        \n+        em.getTransaction().commit();\n+        \n+        String[] jpqls = {\n+            \"SELECT COUNT (DISTINCT d2.emp) FROM Dependent2 d2\",\n+            \"select count (DISTINCT d2) from Dependent2 d2\",\n+        };\n+        \n+        for (int i = 0; i < jpqls.length; i++) {\n+            Query q = em.createQuery(jpqls[i]) ;\n+            Long o = (Long)q.getSingleResult();\n+            int count = (int)o.longValue();\n+            assertEquals(2, count);\n+        }\n+    }\n+\n     public void createObj1() {\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();"}]}

