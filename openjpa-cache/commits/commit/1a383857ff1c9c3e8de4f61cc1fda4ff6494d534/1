{"sha":"1a383857ff1c9c3e8de4f61cc1fda4ff6494d534","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhMzgzODU3ZmYxYzljM2U4ZGU0ZjYxY2MxZmRhNGZmNjQ5NGQ1MzQ=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2011-12-13T22:05:28Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2011-12-13T22:05:28Z"},"message":"OPENJPA-2094: Metadata processing needs to support jar:file URLs that address Jar directories\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1213958 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8b117399a7caab77cc6d67dad837f542d7bd4b33","url":"https://api.github.com/repos/apache/openjpa/git/trees/8b117399a7caab77cc6d67dad837f542d7bd4b33"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534","html_url":"https://github.com/apache/openjpa/commit/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534/comments","author":null,"committer":null,"parents":[{"sha":"e3fbbfbcede0d4735a882e5208d2a20257c8b2f4","url":"https://api.github.com/repos/apache/openjpa/commits/e3fbbfbcede0d4735a882e5208d2a20257c8b2f4","html_url":"https://github.com/apache/openjpa/commit/e3fbbfbcede0d4735a882e5208d2a20257c8b2f4"}],"stats":{"total":249,"additions":243,"deletions":6},"files":[{"sha":"da42de8412bbc5e5fe158c689390056839dbdbb4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=1a383857ff1c9c3e8de4f61cc1fda4ff6494d534","patch":"@@ -44,6 +44,7 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.meta.ClasspathMetaDataIterator;\n import org.apache.openjpa.lib.meta.FileMetaDataIterator;\n+import org.apache.openjpa.lib.meta.JarFileURLMetaDataIterator;\n import org.apache.openjpa.lib.meta.MetaDataFilter;\n import org.apache.openjpa.lib.meta.MetaDataIterator;\n import org.apache.openjpa.lib.meta.MetaDataParser;\n@@ -703,12 +704,18 @@ protected ClassMetaData getDefiningMetaData(QueryMetaData query,\n                         continue;\n                     }\n                 }\n-                if (\"jar\".equals(url.getProtocol())\n-                    && url.getPath().endsWith(\"!/\")) {\n-                    if (log.isTraceEnabled())\n-                        log.trace(_loc.get(\"scanning-jar-url\", url));\n-                    scan(new ZipFileMetaDataIterator(url,\n-                        newMetaDataFilter()), cparser, names, true, url);\n+                if (\"jar\".equals(url.getProtocol())) {\n+                    if (url.getPath().endsWith(\"!/\")) {\n+                        if (log.isTraceEnabled())\n+                            log.trace(_loc.get(\"scanning-jar-url\", url));\n+                        scan(new ZipFileMetaDataIterator(url,\n+                            newMetaDataFilter()), cparser, names, true, url);\n+                    } else {\n+                        if (log.isTraceEnabled())\n+                            log.trace(_loc.get(\"scanning-jar-url\", url));\n+                        scan(new JarFileURLMetaDataIterator(url,\n+                            newMetaDataFilter()), cparser, names, true, url);\n+                    }                   \n                 } else if (url.getPath().endsWith(\".jar\")) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-jar-at-url\", url));"},{"sha":"7f094f474087dbc850935c08045ee58fd5660a8d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/JarFileURLMetaDataIterator.java","status":"added","additions":191,"deletions":0,"changes":191,"blob_url":"https://github.com/apache/openjpa/blob/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/JarFileURLMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/JarFileURLMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/JarFileURLMetaDataIterator.java?ref=1a383857ff1c9c3e8de4f61cc1fda4ff6494d534","patch":"@@ -0,0 +1,191 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.JarURLConnection;\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.NoSuchElementException;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n+/**\n+ * Iterator over all metadata resources in a given resource addressed by a jar:file URL.\n+ * \n+ */\n+public class JarFileURLMetaDataIterator implements MetaDataIterator, MetaDataFilter.Resource {\n+    private final MetaDataFilter _filter;\n+    private final JarFile _jarFile;\n+    private final JarEntry _jarTargetEntry;\n+\n+    private int index = 0;\n+    private JarEntry _last = null;\n+    private final ArrayList<JarEntry> _entryList = new ArrayList<JarEntry>();\n+\n+    public JarFileURLMetaDataIterator(URL url, MetaDataFilter filter) throws IOException {\n+        if (url == null) {\n+            _jarFile = null;\n+            _jarTargetEntry = null;\n+        } else {\n+            JarURLConnection jarURLConn = (JarURLConnection) url.openConnection();\n+            jarURLConn.setDefaultUseCaches(false);\n+\n+            try {\n+                _jarFile = AccessController.doPrivileged(J2DoPrivHelper.getJarFileAction(jarURLConn));\n+                _jarTargetEntry = AccessController.doPrivileged(J2DoPrivHelper.getJarEntryAction(jarURLConn));\n+\n+                if (_jarTargetEntry.isDirectory()) {\n+                    Enumeration<JarEntry> jarEntryEnum = _jarFile.entries();\n+                    while (jarEntryEnum.hasMoreElements()) {\n+                        JarEntry jarEntry = jarEntryEnum.nextElement();\n+                        if (jarEntry.getName().startsWith(_jarTargetEntry.getName())) {\n+                            _entryList.add(jarEntry);\n+                        }\n+                    }\n+                } else {\n+                    _entryList.add(_jarTargetEntry);\n+                }\n+            } catch (PrivilegedActionException pae) {\n+                throw (IOException) pae.getException();\n+            }\n+        }\n+\n+        _filter = filter;\n+    }\n+\n+    /**\n+     * Return whether there is another resource to iterate over.\n+     */\n+    public boolean hasNext() throws IOException {\n+        if (_entryList.size() <= index) {\n+            return false;\n+        }\n+\n+        // Search for next metadata file\n+        while (index < _entryList.size()) {\n+            if (_filter != null && !_filter.matches(this)) {\n+                index++;\n+                continue;\n+            }\n+            break;\n+        }\n+\n+        return (index < _entryList.size());\n+    }\n+\n+    /**\n+     * Return the next metadata resource.\n+     */\n+    public Object next() throws IOException {\n+        if (!hasNext()) {\n+            throw new NoSuchElementException();\n+        }\n+\n+        String ret = _entryList.get(index).getName();\n+        _last = _entryList.get(index);\n+        index++;\n+\n+        return ret;\n+    }\n+\n+    /**\n+     * Return the last-iterated metadata resource content as a stream.\n+     */\n+    public InputStream getInputStream() throws IOException {\n+        if (_last == null)\n+            throw new IllegalStateException();\n+        return _jarFile.getInputStream(_last);\n+    }\n+\n+    /**\n+     * Return the last-iterated metadata resource content as a file, or null if not an extant file.\n+     */\n+    public File getFile() throws IOException {\n+        if (_last == null)\n+            throw new IllegalStateException();\n+        return null;\n+    }\n+\n+    /**\n+     * Close the resources used by this iterator.\n+     */\n+    public void close() {\n+        try {\n+            if (_jarFile != null)\n+                _jarFile.close();\n+        } catch (IOException ioe) {\n+        }\n+    }\n+\n+    // ////////////////////////////////////////\n+    // MetaDataFilter.Resource implementation\n+    // ////////////////////////////////////////\n+\n+    /**\n+     * The name of the resource.\n+     */\n+    public String getName() {\n+        if (index < _entryList.size()) {\n+            return _entryList.get(index).getName();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Resource content.\n+     */\n+    public byte[] getContent() throws IOException {\n+        if (_entryList.size() <= index) {\n+            return new byte[0];\n+        }\n+\n+        long size = _entryList.get(index).getSize();\n+        if (size == 0)\n+            return new byte[0];\n+\n+        InputStream in = _jarFile.getInputStream(_entryList.get(index));\n+        byte[] content;\n+        if (size < 0) {\n+            ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+            byte[] buf = new byte[1024];\n+            for (int r; (r = in.read(buf)) != -1; bout.write(buf, 0, r))\n+                ;\n+            content = bout.toByteArray();\n+        } else {\n+            content = new byte[(int) size];\n+            int offset = 0;\n+            int read;\n+            while (offset < size && (read = in.read(content, offset, (int) size - offset)) != -1) {\n+                offset += read;\n+            }\n+        }\n+        in.close();\n+        return content;\n+    }\n+}"},{"sha":"c08e7979d9290bb62810fbf70b472b8c229e3e75","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/1a383857ff1c9c3e8de4f61cc1fda4ff6494d534/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=1a383857ff1c9c3e8de4f61cc1fda4ff6494d534","patch":"@@ -31,6 +31,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.net.InetAddress;\n+import java.net.JarURLConnection;\n import java.net.MalformedURLException;\n import java.net.ServerSocket;\n import java.net.Socket;\n@@ -43,6 +44,8 @@\n import java.util.Enumeration;\n import java.util.Properties;\n import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n import java.util.zip.ZipFile;\n \n import javax.validation.ConstraintViolation;\n@@ -962,6 +965,42 @@ public ZipFile run() throws IOException {\n             }\n         };\n     }\n+    \n+    /**\n+     * Return a PrivilegedExceptionAction object for con.getJarFile().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return JarFile\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction<JarFile> getJarFileAction(final JarURLConnection con)\n+        throws IOException {\n+        return new PrivilegedExceptionAction<JarFile>() {\n+            public JarFile run() throws IOException {\n+                return con.getJarFile();\n+            }\n+        };\n+    }\n+    \n+    /**\n+     * Return a PrivilegedExceptionAction object for con.getJarEntry().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return JarFile\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction<JarEntry> getJarEntryAction(final JarURLConnection con)\n+        throws IOException {\n+        return new PrivilegedExceptionAction<JarEntry>() {\n+            public JarEntry run() throws IOException {\n+                return con.getJarEntry();\n+            }\n+        };\n+    }   \n \n     /**\n      * Return a PrivilegeAction object for new serp.bytecode.Code()."}]}

