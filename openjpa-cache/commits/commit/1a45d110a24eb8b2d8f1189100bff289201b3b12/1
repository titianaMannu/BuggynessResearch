{"sha":"1a45d110a24eb8b2d8f1189100bff289201b3b12","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhNDVkMTEwYTI0ZWI4YjJkOGYxMTg5MTAwYmZmMjg5MjAxYjNiMTI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:55:03Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:55:03Z"},"message":"OPENJPA-130. Merging r655581 from 1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666914 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"24e647f217033976527141a43771e6dd71cb9db4","url":"https://api.github.com/repos/apache/openjpa/git/trees/24e647f217033976527141a43771e6dd71cb9db4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a45d110a24eb8b2d8f1189100bff289201b3b12","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a45d110a24eb8b2d8f1189100bff289201b3b12","html_url":"https://github.com/apache/openjpa/commit/1a45d110a24eb8b2d8f1189100bff289201b3b12","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a45d110a24eb8b2d8f1189100bff289201b3b12/comments","author":null,"committer":null,"parents":[{"sha":"753be68e244bc14ec66807ba6457d1fa2211d9c6","url":"https://api.github.com/repos/apache/openjpa/commits/753be68e244bc14ec66807ba6457d1fa2211d9c6","html_url":"https://github.com/apache/openjpa/commit/753be68e244bc14ec66807ba6457d1fa2211d9c6"}],"stats":{"total":358,"additions":330,"deletions":28},"files":[{"sha":"276fc7f2e4a97328674a33c9b1cf6bea136c12ac","filename":"openjpa-jdbc/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/pom.xml?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -49,6 +49,11 @@\n             <artifactId>hsqldb</artifactId>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <version>8.1-407.jdbc3</version>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>"},{"sha":"346e4e474a2f3e73e11e9f4cc28a1d972fe32cfe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -419,6 +419,13 @@ protected Object getSQLObjectInternal(Object obj, Map map, Joins joins)\n             return _res.getSQLObject(obj, map);\n         }\n \n+        protected Object getStreamInternal(JDBCStore store, Object obj,\n+            int metaTypeCode, Object arg, Joins joins) throws SQLException {\n+            if (obj instanceof Column)\n+                return _res.getObject((Column) obj, arg, joins);\n+            return _res.getObject(obj, metaTypeCode, arg);\n+        }\n+        \n         protected Ref getRefInternal(Object obj, Map map, Joins joins)\n             throws SQLException {\n             if (obj instanceof Column)"},{"sha":"9a1a0ad24cb6e5cea86dc0c8e12d647e9c7500cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","status":"modified","additions":37,"deletions":22,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -28,11 +28,13 @@\n import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\r\n import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\r\n import org.apache.openjpa.jdbc.sql.Result;\r\n import org.apache.openjpa.jdbc.sql.Row;\r\n import org.apache.openjpa.jdbc.sql.RowManager;\r\n import org.apache.openjpa.jdbc.sql.Select;\r\n import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n \r\n /**\r\n  * Direct mapping from a stream value to a column.\r\n@@ -43,6 +45,7 @@\n public class LobFieldStrategy extends AbstractFieldStrategy {\r\n \r\n     private int fieldType;\r\n+    private boolean isBlob;\r\n \r\n     public void map(boolean adapt) {\r\n         assertNotMappedBy();\r\n@@ -57,8 +60,9 @@ public void map(boolean adapt) {\n         vinfo.assertNoForeignKey(field, !adapt);\r\n         Column tmpCol = new Column();\r\n         tmpCol.setName(field.getName());\r\n-        tmpCol.setJavaType(field.getTypeCode());\r\n         tmpCol.setType(fieldType);\r\n+        tmpCol.setJavaType(field.getTypeCode());\r\n+        \r\n         tmpCol.setSize(-1);\r\n \r\n         Column[] cols = vinfo.getColumns(field, field.getName(),\r\n@@ -74,15 +78,22 @@ public Boolean isCustomInsert(OpenJPAStateManager sm, JDBCStore store) {\n         return null;\r\n     }\r\n \r\n+    public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n+        throws SQLException {\r\n+        Select sel = createSelect(sm, store);\r\n+        store.getDBDictionary().deleteStream(store, sel);\r\n+    }\r\n+    \r\n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n         throws SQLException {\r\n         Object ob = toDataStoreValue(sm.fetchObjectField\r\n             (field.getIndex()), store);\r\n         Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\r\n         if (field.getColumnIO().isInsertable(0, ob == null)) {\r\n-            if (isBlob()) {\r\n+            Select sel = createSelect(sm, store);\r\n+            if (isBlob) {\r\n                 store.getDBDictionary().insertBlobForStreamingLoad\r\n-                    (row, field.getColumns()[0], ob);\r\n+                    (row, field.getColumns()[0], store, ob, sel);\r\n             } else {\r\n                 store.getDBDictionary().insertClobForStreamingLoad\r\n                     (row, field.getColumns()[0], ob);\r\n@@ -97,7 +108,7 @@ public void customInsert(OpenJPAStateManager sm, JDBCStore store)\n         if (field.getColumnIO().isInsertable(0, ob == null)) {\r\n             if (ob != null) {\r\n                 Select sel = createSelect(sm, store);\r\n-                if (isBlob()) {\r\n+                if (isBlob) {\r\n                     store.getDBDictionary().updateBlob\r\n                         (sel, store, (InputStream)ob);\r\n                 } else {\r\n@@ -115,15 +126,16 @@ public Boolean isCustomUpdate(OpenJPAStateManager sm, JDBCStore store) {\n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n         throws SQLException {\r\n         Object ob = toDataStoreValue(sm.fetchObjectField\r\n-                (field.getIndex()), store);\r\n+            (field.getIndex()), store);\r\n         if (field.getColumnIO().isUpdatable(0, ob == null)) {\r\n             Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\r\n-            if (isBlob()) {\r\n+            Select sel = createSelect(sm, store);\r\n+            if (isBlob) {\r\n                 store.getDBDictionary().insertBlobForStreamingLoad\r\n-                    (row, field.getColumns()[0], ob);\r\n+                    (row, field.getColumns()[0], store, ob, sel);\r\n             } else {\r\n                 store.getDBDictionary().insertClobForStreamingLoad\r\n-                    (row, field.getColumns()[0], ob);\r\n+                    (row, field.getColumns()[0], sel);\r\n             }\r\n         }\r\n     }\r\n@@ -135,7 +147,7 @@ public void customUpdate(OpenJPAStateManager sm, JDBCStore store)\n         if (field.getColumnIO().isUpdatable(0, ob == null)) {\r\n             if (ob != null) {\r\n                 Select sel = createSelect(sm, store);\r\n-                if (isBlob()) {\r\n+                if (isBlob) {\r\n                     store.getDBDictionary().updateBlob\r\n                         (sel, store, (InputStream)ob);\r\n                 } else {\r\n@@ -163,8 +175,8 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, Result res) throws SQLException {\r\n         Column col = field.getColumns()[0];\r\n         if (res.contains(col)) {\r\n-            if (isBlob()) {\r\n-                sm.storeObject(field.getIndex(), res.getBinaryStream(col));\r\n+            if (isBlob) {\r\n+                sm.storeObject(field.getIndex(), res.getLOBStream(store, col));\r\n             } else {\r\n                 sm.storeObject(field.getIndex(), res.getCharacterStream(col));\r\n             }\r\n@@ -177,18 +189,21 @@ protected void assertNotMappedBy() {\n     }\r\n \r\n     public void setFieldMapping(FieldMapping owner) {\r\n-        if (owner.getType().isAssignableFrom(InputStream.class)) {\r\n-            fieldType = Types.BLOB;\r\n-        } else if (owner.getType().isAssignableFrom(Reader.class)) {\r\n-            fieldType = Types.CLOB;\r\n-        }\r\n         field = owner;\r\n-    }\r\n-\r\n-    private boolean isBlob() {\r\n-        if (fieldType == Types.BLOB)\r\n-            return true;\r\n-        return false;\r\n+        if (owner.getElementMapping().getMappingRepository().getDBDictionary()\r\n+            instanceof PostgresDictionary) {\r\n+            fieldType = Types.INTEGER;\r\n+            isBlob = true;\r\n+            field.setTypeCode(JavaTypes.INT);\r\n+        } else {\r\n+            if (owner.getType().isAssignableFrom(InputStream.class)) {\r\n+                isBlob = true;\r\n+                fieldType = Types.BLOB;\r\n+            } else if (owner.getType().isAssignableFrom(Reader.class)) {\r\n+                isBlob = false;\r\n+                fieldType = Types.CLOB;\r\n+            }\r\n+        }\r\n     }\r\n \r\n     private Select createSelect(OpenJPAStateManager sm, JDBCStore store) {\r"},{"sha":"ed780bef0c6d17eea673676bc79233054b306bcd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -49,6 +49,7 @@\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.UnsupportedException;\n+\n import serp.util.Strings;\n \n /**\n@@ -341,12 +342,23 @@ public InputStream getBinaryStream(Column col, Joins joins)\n         return getBinaryStreamInternal(translate(col, joins), joins);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException {\n+        return getLOBStreamInternal(store, translate(obj, null), null);\n+    }\n+\n     protected InputStream getBinaryStreamInternal(Object obj, Joins joins)\n         throws SQLException {\n         return (InputStream) checkNull(getObjectInternal(obj,\n             JavaSQLTypes.BINARY_STREAM, null, joins));\n     }\n \n+    protected InputStream getLOBStreamInternal(JDBCStore store, Object obj,\n+        Joins joins) throws SQLException {\n+        return (InputStream) checkNull(getStreamInternal(store, obj,\n+            JavaSQLTypes.BINARY_STREAM, null, joins));\n+    }\n+    \n     public Blob getBlob(Object obj)\n         throws SQLException {\n         return getBlobInternal(translate(obj, null), null);\n@@ -670,6 +682,9 @@ protected abstract Object getObjectInternal(Object obj, int metaType,\n         Object arg, Joins joins)\n         throws SQLException;\n \n+    protected abstract Object getStreamInternal(JDBCStore store, Object obj,\n+            int metaType, Object arg, Joins joins) throws SQLException;\n+    \n     public Object getSQLObject(Object obj, Map map)\n         throws SQLException {\n         return getSQLObjectInternal(translate(obj, null), map, null);"},{"sha":"2eb839fe7f379f946e1c0a17da0a58b4a5884987","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -60,6 +60,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -101,10 +102,12 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.OpenJPAException;\n+import org.apache.openjpa.util.ReferentialIntegrityException;\n import org.apache.openjpa.util.Serialization;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -506,6 +509,11 @@ public InputStream getBinaryStream(ResultSet rs, int column)\n         return rs.getBinaryStream(column);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, ResultSet rs,\n+        int column) throws SQLException {\n+        return rs.getBinaryStream(column);\n+    }\n+    \n     /**\n      * Convert the specified column of the SQL ResultSet to the proper\n      * java type.\n@@ -4189,11 +4197,11 @@ public String getVersionColumn(Column column, String tableAlias) {\n         return column.toString();\n     }\n     \n-    public void insertBlobForStreamingLoad(Row row, Column col, Object ob)\n-    throws SQLException {\n+    public void insertBlobForStreamingLoad(Row row, Column col, \n+        JDBCStore store, Object ob, Select sel) throws SQLException {\n         if (ob != null) {\n             row.setBinaryStream(col, \n-                    new ByteArrayInputStream(new byte[0]), 0);\n+                new ByteArrayInputStream(new byte[0]), 0);\n         } else {\n             row.setNull(col);\n         }\n@@ -4459,4 +4467,8 @@ public boolean getTrimSchemaName() {\n     public void setTrimSchemaName(boolean trimSchemaName) { \n         this.trimSchemaName = trimSchemaName; \n     }\n+    \n+    public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n+        // Do nothing\n+    }\n }"},{"sha":"26c77f06bf7b28be28743ffddccd33cb30b3e803","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -252,6 +252,11 @@ public InputStream getBinaryStream(Object obj)\n         return _res[_idx].getBinaryStream(obj);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException {\n+        return _res[_idx].getLOBStream(store, obj);\n+    }\n+    \n     public Blob getBlob(Object obj)\n         throws SQLException {\n         return _res[_idx].getBlob(obj);"},{"sha":"2aaf95d3b2d8984a788ae13d9fd242c4c0601ea6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -29,13 +32,19 @@\n import java.util.Arrays;\n import java.util.Date;\n \n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Sequence;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.lib.jdbc.DelegatingConnection;\n import org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.StoreException;\n+import org.postgresql.PGConnection;\n+import org.postgresql.largeobject.LargeObject;\n+import org.postgresql.largeobject.LargeObjectManager;\n \n /**\n  * Dictionary for Postgres.\n@@ -319,6 +328,151 @@ public Connection decorate(Connection conn)\n         return new PostgresConnection(super.decorate(conn), this);\n     }\n \n+    public InputStream getLOBStream(JDBCStore store, ResultSet rs,\n+        int column) throws SQLException {\n+        DelegatingConnection conn = (DelegatingConnection)store\n+            .getConnection();\n+        conn.setAutoCommit(false);\n+        LargeObjectManager lom = ((PGConnection)conn.getInnermostDelegate())\n+        .getLargeObjectAPI();\n+        if (rs.getInt(column) != -1) {\n+            LargeObject lo = lom.open(rs.getInt(column));\n+            return lo.getInputStream();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public void insertBlobForStreamingLoad(Row row, Column col, \n+        JDBCStore store, Object ob, Select sel) throws SQLException {\n+        if (row.getAction() == Row.ACTION_INSERT) {\n+            insertPostgresBlob(row, col, store, ob);\n+        } else if (row.getAction() == Row.ACTION_UPDATE) {\n+            updatePostgresBlob(row, col, store, ob, sel);\n+        }\n+    }\n+\n+    private void insertPostgresBlob(Row row, Column col, JDBCStore store,\n+        Object ob) throws SQLException {\n+        if (ob != null) {\n+            col.setType(Types.INTEGER);\n+            DelegatingConnection conn = (DelegatingConnection)store\n+            .getConnection();\n+            try {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection) conn.getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                // The create method is valid in versions previous 8.3\n+                // in 8.3 this methos is deprecated, use createLO\n+                int oid = lom.create();\n+                LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                OutputStream os = lo.getOutputStream();\n+                copy((InputStream)ob, os);\n+                lo.close();\n+                row.setInt(col, oid);\n+            } catch (IOException ioe) {\n+                throw new StoreException(ioe);\n+            } finally {\n+                conn.close();\n+            }\n+        } else {\n+            row.setInt(col, -1);\n+        }\n+    }\n+    \n+    private void updatePostgresBlob(Row row, Column col, JDBCStore store,\n+        Object ob, Select sel) throws SQLException {\n+        SQLBuffer sql = sel.toSelect(true, store.getFetchConfiguration());\n+        ResultSet res = null;\n+        DelegatingConnection conn = \n+            (DelegatingConnection) store.getConnection();\n+        PreparedStatement stmnt = null;\n+        try {\n+            stmnt = sql.prepareStatement(conn, store.getFetchConfiguration(),\n+                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n+            res = stmnt.executeQuery();\n+            if (!res.next()) {\n+                throw new InternalException(_loc.get(\"stream-exception\"));\n+            }\n+            int oid = res.getInt(1);\n+            if (oid != -1) {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection)conn\n+                    .getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                if (ob != null) {\n+                    LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                    OutputStream os = lo.getOutputStream();\n+                    copy((InputStream)ob, os);\n+                    lo.close();\n+                } else {\n+                    lom.delete(oid);\n+                    row.setInt(col, -1);\n+                }\n+            } else {\n+                if (ob != null) {\n+                    conn.setAutoCommit(false);\n+                    PGConnection pgconn = (PGConnection)conn\n+                        .getInnermostDelegate();\n+                    LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                    oid = lom.create();\n+                    LargeObject lo = lom.open(oid, LargeObjectManager.WRITE);\n+                    OutputStream os = lo.getOutputStream();\n+                    copy((InputStream)ob, os);\n+                    lo.close();\n+                    row.setInt(col, oid);\n+                }\n+            }\n+\n+        } catch (IOException ioe) {\n+            throw new StoreException(ioe);\n+        } finally {\n+            if (res != null)\n+                try { res.close (); } catch (SQLException e) {}\n+            if (stmnt != null)\n+                try { stmnt.close (); } catch (SQLException e) {}\n+            if (conn != null)\n+                try { conn.close (); } catch (SQLException e) {}\n+        }\n+\n+    }\n+    \n+    public void updateBlob(Select sel, JDBCStore store, InputStream is)\n+        throws SQLException {\n+        //Do nothing\n+    }\n+\n+    public void deleteStream(JDBCStore store, Select sel) throws SQLException {\n+        SQLBuffer sql = sel.toSelect(true, store.getFetchConfiguration());\n+        ResultSet res = null;\n+        DelegatingConnection conn = \n+            (DelegatingConnection) store.getConnection();\n+        PreparedStatement stmnt = null;\n+        try {\n+            stmnt = sql.prepareStatement(conn, store.getFetchConfiguration(),\n+                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n+            res = stmnt.executeQuery();\n+            if (!res.next()) {\n+                throw new InternalException(_loc.get(\"stream-exception\"));\n+            }\n+            int oid = res.getInt(1);\n+            if (oid != -1) {\n+                conn.setAutoCommit(false);\n+                PGConnection pgconn = (PGConnection)conn\n+                    .getInnermostDelegate();\n+                LargeObjectManager lom = pgconn.getLargeObjectAPI();\n+                lom.delete(oid);\n+            }\n+        } finally {\n+            if (res != null)\n+                try { res.close (); } catch (SQLException e) {}\n+            if (stmnt != null)\n+                try { stmnt.close (); } catch (SQLException e) {}\n+            if (conn != null)\n+                try { conn.close (); } catch (SQLException e) {}\n+        }\n+    }\n+    \n     /**\n      * Connection wrapper to work around the postgres empty result set bug.\n      */"},{"sha":"5eb3c417280cbc40504185f30022d8589edec6b0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -212,7 +212,9 @@ public BigInteger getBigInteger(Object obj)\n      */\n     public InputStream getBinaryStream(Object obj)\n         throws SQLException;\n-\n+    \n+    public InputStream getLOBStream(JDBCStore store, Object obj)\n+        throws SQLException;\n     /**\n      * Return the value stored in the given column or id; may not be supported\n      * by results that are not backed by a SQL result set."},{"sha":"2398c7fd0a8cdf6617c65ab13b3631150246568e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.meta.JavaTypes;\n+\n import serp.util.Numbers;\n \n /**\n@@ -345,6 +346,11 @@ protected long getLongInternal(Object obj, Joins joins)\n         return _dict.getLong(_rs, ((Number) obj).intValue());\n     }\n \n+    protected Object getStreamInternal(JDBCStore store, Object obj,\n+        int metaTypeCode, Object arg, Joins joins) throws SQLException {\n+        return getLOBStreamInternal(store, obj, joins);\n+    }\n+    \n     protected Object getObjectInternal(Object obj, int metaTypeCode,\n         Object arg, Joins joins)\n         throws SQLException {\n@@ -498,4 +504,9 @@ protected int findObject(Object obj, Joins joins)\n             return 0;\n         }\n     }\n+  \n+    protected InputStream getLOBStreamInternal(JDBCStore store, Object obj,\n+        Joins joins) throws SQLException {\n+        return _dict.getLOBStream(store, _rs, ((Number) obj).intValue());\n+    }\n }"},{"sha":"0745dfd2a91b4fc9d1f8781acf12a5c58219f881","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\r\n import org.apache.openjpa.jdbc.sql.SQLServerDictionary;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n@@ -56,7 +57,8 @@ public boolean isDatabaseSupported() {\n             .getDBDictionaryInstance();\r\n         if (dict instanceof MySQLDictionary ||\r\n             dict instanceof SQLServerDictionary ||\r\n-            dict instanceof OracleDictionary) {\r\n+            dict instanceof OracleDictionary ||\r\n+            dict instanceof PostgresDictionary) {\r\n             return true;\r\n         }\r\n         return false;\r\n@@ -81,6 +83,7 @@ public void testInsertAndSelect() throws IOException {\n         insert(newLobEntity(s, 1));\r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n+\r\n         Query query = em.createQuery(getSelectQuery());\r\n         LobEntity entity = (LobEntity) query.getSingleResult();\r\n         assertNotNull(entity.getStream());\r\n@@ -169,7 +172,7 @@ public void testDelete() {\n         em.getTransaction().commit();\r\n         em.close();\r\n     }\r\n-\r\n+    \r\n     public void testLifeCycleInsertFlushModify() {\r\n         if (!isDatabaseSupported()) return;\r\n         EntityManager em = emf.createEntityManager();\r"},{"sha":"b3bed5d447fc3e0c1778a459ffeedd700e5040ac","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -2400,6 +2400,38 @@ sequence value. May use a placeholder of <literal>{0}</literal> for the variable\n sequence name. Defaults to a database-appropriate value.\n                     </para>\n                 </listitem>\n+                <listitem id=\"DBDictionary.BlobBufferSize\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            BLOB\n+                        </primary>\n+                        <secondary>\n+                            BlobBufferSize\n+                        </secondary>\n+                    </indexterm>\n+<literal>BlobBufferSize</literal>: This property establishes the buffer size in\n+the <literal>INSERT/UPDATE</literal> operations with an \n+<literal>java.io.InputStream</literal>This is only used with OpenJPA's\n+<xref linkend=\"ref_guide_streamsupport\"/>. Defaults to 50000.\n+                    </para>\n+                </listitem>\n+                <listitem id=\"DBDictionary.ClobBufferSize\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            CLOB\n+                        </primary>\n+                        <secondary>\n+                            ClobBufferSize\n+                        </secondary>\n+                    </indexterm>\n+<literal>ClobBufferSize</literal>: This property establish the buffer size in \n+the <literal>INSERT/UPDATE</literal> operations with a \n+<literal>java.io.Reader</literal>This is only used with OpenJPA's\n+<xref linkend=\"ref_guide_streamsupport\"/>. Defaults to 50000.\n+                    </para>\n+                </listitem>\n             </itemizedlist>\n         </section>\n         <section id=\"ref_guide_dbsetup_dbsupport_mysql\">"},{"sha":"9d439eac091a2e6052e188379122232fad1a45d7","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/1a45d110a24eb8b2d8f1189100bff289201b3b12/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=1a45d110a24eb8b2d8f1189100bff289201b3b12","patch":"@@ -2677,6 +2677,47 @@ em.persist(o1);\n . select o.shipAddress.city from Order o  (INVALID)\r\n \r\n . select o from Order o where o.shipAddress.street = &quot;San Jose&quot;  (INVALID multi valued)\r\n+</programlisting>\r\n+            </example>\r\n+        </section>\r\n+        <section id=\"ref_guide_streamsupport\">\r\n+            <title>\r\n+              Stream LOB Support\r\n+            </title>\r\n+              <indexterm zone=\"ref_guide_streamsupport\">\r\n+                  <primary>\r\n+                      stream support\r\n+                  </primary>\r\n+              </indexterm>\r\n+              <indexterm zone=\"ref_guide_streamsupport\">\r\n+                  <primary>\r\n+                      stream lob support\r\n+                  </primary>\r\n+              </indexterm>\r\n+              <para>\r\n+Since the 1.1.0 release Apache OpenJPA added support for Streams. This feature\r\n+makes it possible to stream large amounts of data into and out of fields in\r\n+objects managed by OpenJPA without ever holding all the data in memory at the\r\n+same time.\r\n+              </para>\r\n+              <para>\r\n+To persist a stream, use the \r\n+<ulink url=\"../javadoc/org/apache/openjpa/persistence/Persistent.html\">\r\n+<classname>org.apache.openjpa.persistence.Persistent</classname></ulink> \r\n+annotation.\r\n+              </para>\r\n+            <example id=\"ref_guide_streamsupport_example\">\r\n+                <title>\r\n+                    Showing annotated InputStream\r\n+                </title>\r\n+<programlisting>\r\n+@Entity\r\n+public class Employee {\r\n+    ...\r\n+    @Persistent\r\n+    private InputStream photoStream;\r\n+    ...\r\n+} \r\n </programlisting>\r\n             </example>\r\n         </section>\r"}]}

