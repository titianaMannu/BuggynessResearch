{"sha":"1a8bcfb6b1bd08d3f0158c023307c3cea2512d98","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhOGJjZmI2YjFiZDA4ZDNmMDE1OGMwMjMzMDdjM2NlYTI1MTJkOTg=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-03-30T12:38:14Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-03-30T12:38:14Z"},"message":"OPENJPA-2849 fix UnaryOp to use DBDictionary\n\nUnaryOps should use the DBDictionary to resolve the requested data whenever possible.\nPreviously we always have been requesting JDBC native types when doing max(), min(), etc.\nBut this returns values of types which we potentially cannot handle.","tree":{"sha":"6df865a510b7493efbd01a405cec04864114e8ea","url":"https://api.github.com/repos/apache/openjpa/git/trees/6df865a510b7493efbd01a405cec04864114e8ea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98","html_url":"https://github.com/apache/openjpa/commit/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"8283ea0fb2d455118c133540ef7f2bea4ae597cd","url":"https://api.github.com/repos/apache/openjpa/commits/8283ea0fb2d455118c133540ef7f2bea4ae597cd","html_url":"https://github.com/apache/openjpa/commit/8283ea0fb2d455118c133540ef7f2bea4ae597cd"}],"stats":{"total":30,"additions":27,"deletions":3},"files":[{"sha":"0f22630d4f92d4babaa1bc69efd3d17356110d25","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=1a8bcfb6b1bd08d3f0158c023307c3cea2512d98","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.exps.ExpressionVisitor;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n \n /**\n  * Value produced by a unary operation on a value.\n@@ -129,8 +130,9 @@ private SQLBuffer newSQLBuffer(Select sel, ExpContext ctx, ExpState state) {\n     @Override\n     public Object load(ExpContext ctx, ExpState state, Result res)\n         throws SQLException {\n-        Object value = res.getObject(this, JavaSQLTypes.JDBC_DEFAULT, null);\n         Class<?> type = getType();\n+        int typeCode = type != null ? JavaTypes.getTypeCode(type) : JavaSQLTypes.JDBC_DEFAULT;\n+        Object value = res.getObject(this, typeCode, null);\n         if (value == null) {\n             if (nullableValue(ctx, state)) {  // OPENJPA-1794\n                 return null;"},{"sha":"8108f10e0620f5d6d08de520ee200cc38e0a0d17","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","raw_url":"https://github.com/apache/openjpa/raw/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java?ref=1a8bcfb6b1bd08d3f0158c023307c3cea2512d98","patch":"@@ -22,6 +22,11 @@\n import java.math.BigInteger;\n import java.sql.Time;\n import java.sql.Timestamp;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+import java.time.OffsetTime;\n \n import org.apache.openjpa.meta.JavaTypes;\n \n@@ -76,6 +81,17 @@ public static int getDateTypeCode(Class<?> dtype) {\n             return TIMESTAMP;\n         if (dtype == Time.class)\n             return TIME;\n+        if (dtype == LocalDate.class)\n+            return LOCAL_DATE;\n+        if (dtype == LocalDateTime.class)\n+            return LOCAL_DATETIME;\n+        if (dtype == LocalTime.class)\n+            return LOCAL_TIME;\n+        if (dtype == OffsetTime.class)\n+            return OFFSET_TIME;\n+        if (dtype == OffsetDateTime.class)\n+            return OFFSET_DATETIME;\n+\n         return OBJECT;\n     }\n "},{"sha":"6c80a1163f36cb4a0983df9d2176ff8588e8e6a4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=1a8bcfb6b1bd08d3f0158c023307c3cea2512d98","patch":"@@ -221,8 +221,7 @@ public static Object loadDataStore(ValueMapping vm, Result res,\n         if (cols.length == 0)\n             return null;\n         if (cols.length == 1)\n-            return res.getObject(cols[0], vm.getHandler().\n-                getResultArgument(vm), joins);\n+            return res.getObject(cols[0], vm.getHandler().getResultArgument(vm), joins);\n \n         Object[] vals = new Object[cols.length];\n         Object[] args = (Object[]) vm.getHandler().getResultArgument(vm);"},{"sha":"6b56abad3b5af4b87b0bae0f92e70557566d3339","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJava8TimeTypes.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJava8TimeTypes.java","raw_url":"https://github.com/apache/openjpa/raw/1a8bcfb6b1bd08d3f0158c023307c3cea2512d98/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJava8TimeTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJava8TimeTypes.java?ref=1a8bcfb6b1bd08d3f0158c023307c3cea2512d98","patch":"@@ -32,6 +32,7 @@\n import java.time.ZoneId;\n import java.time.ZoneOffset;\n import java.util.Date;\n+import java.util.List;\n \n /**\n  * Test for JPA-2.2 java.time.* functionality\n@@ -82,6 +83,12 @@ public void testJava8Types() {\n \n         // we've got reports from various functions not properly working with Java8 Dates.\n \n+        {\n+            final TypedQuery<LocalDate> qry = em.createQuery(\"select t.localDateField from Java8TimeTypes AS t\", LocalDate.class);\n+            final LocalDate date = qry.getSingleResult();\n+            assertNotNull(date);\n+        }\n+\n         // max function\n         {\n             final TypedQuery<LocalDate> qry = em.createQuery(\"select max(t.localDateField) from Java8TimeTypes AS t\", LocalDate.class);"}]}

