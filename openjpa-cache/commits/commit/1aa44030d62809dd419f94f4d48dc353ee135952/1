{"sha":"1aa44030d62809dd419f94f4d48dc353ee135952","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhYTQ0MDMwZDYyODA5ZGQ0MTlmOTRmNGQ0OGRjMzUzZWUxMzU5NTI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-07-01T20:32:48Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-07-01T20:32:48Z"},"message":"OPENJPA-634 - Use only the exception collection in the prepared statement to collect batch flush exceptions. This will preserve the order of exceptions thrown by underlying batch operations during the update manager flush processing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673197 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8f9569caf9a89c76b9f1a60c3bd1e65b8afd81c","url":"https://api.github.com/repos/apache/openjpa/git/trees/c8f9569caf9a89c76b9f1a60c3bd1e65b8afd81c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1aa44030d62809dd419f94f4d48dc353ee135952","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1aa44030d62809dd419f94f4d48dc353ee135952","html_url":"https://github.com/apache/openjpa/commit/1aa44030d62809dd419f94f4d48dc353ee135952","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1aa44030d62809dd419f94f4d48dc353ee135952/comments","author":null,"committer":null,"parents":[{"sha":"bae08e93e4f310b5b6499c3ea4adc4f890761fc2","url":"https://api.github.com/repos/apache/openjpa/commits/bae08e93e4f310b5b6499c3ea4adc4f890761fc2","html_url":"https://github.com/apache/openjpa/commit/bae08e93e4f310b5b6499c3ea4adc4f890761fc2"}],"stats":{"total":890,"additions":883,"deletions":7},"files":[{"sha":"db3f34345490a8ebcae64c6515159dd56d950b65","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1aa44030d62809dd419f94f4d48dc353ee135952/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/1aa44030d62809dd419f94f4d48dc353ee135952/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=1aa44030d62809dd419f94f4d48dc353ee135952","patch":"@@ -80,7 +80,7 @@ private Collection flush(Collection states, JDBCStore store,\n         // run through all the states and update them as necessary\n         RowManager rowMgr = newRowManager();\n         Collection customs = new LinkedList();\n-        Collection exceps = null;\n+        Collection exceps = psMgr.getExceptions();\n         for (Iterator itr = states.iterator(); itr.hasNext();)\n             exceps = populateRowManager((OpenJPAStateManager) itr.next(),\n                 rowMgr, store, exceps, customs);\n@@ -100,12 +100,6 @@ private Collection flush(Collection states, JDBCStore store,\n         }\n \n         // return all exceptions\n-        Collection psExceps = psMgr.getExceptions();\n-        if (exceps == null)\n-            return psExceps;\n-        if (psExceps == null)\n-            return exceps;\n-        exceps.addAll(psExceps);\n         return exceps;\n     }\n "},{"sha":"d35d9f7b00913a3e01f8a1496d87aab51e270b75","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","status":"added","additions":882,"deletions":0,"changes":882,"blob_url":"https://github.com/apache/openjpa/blob/1aa44030d62809dd419f94f4d48dc353ee135952/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","raw_url":"https://github.com/apache/openjpa/raw/1aa44030d62809dd419f94f4d48dc353ee135952/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestUpdateManagerFlushException.java?ref=1aa44030d62809dd419f94f4d48dc353ee135952","patch":"@@ -0,0 +1,882 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.ObjectOutput;\r\n+import java.sql.CallableStatement;\r\n+import java.sql.Connection;\r\n+import java.sql.DatabaseMetaData;\r\n+import java.sql.PreparedStatement;\r\n+import java.sql.SQLException;\r\n+import java.sql.SQLWarning;\r\n+import java.sql.Savepoint;\r\n+import java.sql.Statement;\r\n+import java.util.ArrayList;\r\n+import java.util.BitSet;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.enhance.StateManager;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.Strategy;\r\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.jdbc.sql.RowManager;\r\n+import org.apache.openjpa.jdbc.sql.SQLFactory;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.PCState;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * Tests AbstractUpdateManager flush's method exception return behavior.\r\n+ * </p>\r\n+ * \r\n+ * @author Albert Lee\r\n+ */\r\n+public class TestUpdateManagerFlushException extends /* Abstract */TestCase {\r\n+\r\n+    private TestUpdateManager updMgr;\r\n+\r\n+    public void setUp() {\r\n+        updMgr = new TestUpdateManager();\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests exception collection returns from UpdateManager flush method is in\r\n+     * the order the original exceptions are thrown.\r\n+     */\r\n+    public void testAddRetrieve() {\r\n+        \r\n+        Collection states = new ArrayList<OpenJPAStateManager>();\r\n+        states.add(new TestOpenJPAStateManager());\r\n+\r\n+        Collection exceps = updMgr.flush(states, new TestJDBCStore());\r\n+\r\n+        assertEquals(3, exceps.size());\r\n+        \r\n+        Iterator<Exception> itr = exceps.iterator();\r\n+        assertEquals(itr.next().getMessage(),\r\n+            \"TestUpdateManager.populateRowManager\");\r\n+        assertEquals(itr.next().getMessage(),\r\n+            \"TestUpdateManager.flush\");\r\n+        assertEquals(itr.next().getMessage(),\r\n+            \"TestUpdateManager.customInsert\");\r\n+    }\r\n+\r\n+    /*\r\n+     * Scaffolding test update manager.\r\n+     */\r\n+    class TestUpdateManager extends AbstractUpdateManager {\r\n+\r\n+        protected Collection flush(RowManager rowMgr,\r\n+            PreparedStatementManager psMgr, Collection exceps) {\r\n+\r\n+            exceps.add(new SQLException(\"TestUpdateManager.flush\"));\r\n+\r\n+            return exceps;\r\n+        }\r\n+\r\n+        protected PreparedStatementManager newPreparedStatementManager(\r\n+            JDBCStore store, Connection conn) {\r\n+            return new PreparedStatementManagerImpl(store, conn);\r\n+        }\r\n+\r\n+        protected RowManager newRowManager() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean orderDirty() {\r\n+            return false;\r\n+        }\r\n+\r\n+        protected Collection populateRowManager(OpenJPAStateManager sm,\r\n+            RowManager rowMgr, JDBCStore store, Collection exceps,\r\n+            Collection customs) {\r\n+            \r\n+            exceps.add(new SQLException(\r\n+                \"TestUpdateManager.populateRowManager\"));\r\n+            customs.add(new CustomMapping(CustomMapping.INSERT, sm,\r\n+                new Strategy() {\r\n+                    public void customDelete(OpenJPAStateManager sm,\r\n+                        JDBCStore store) throws SQLException {\r\n+                    }\r\n+\r\n+                    public void customInsert(OpenJPAStateManager sm,\r\n+                        JDBCStore store) throws SQLException {\r\n+                        throw new SQLException(\r\n+                            \"TestUpdateManager.customInsert\");\r\n+                    }\r\n+\r\n+                    public void customUpdate(OpenJPAStateManager sm,\r\n+                        JDBCStore store) throws SQLException {\r\n+                    }\r\n+\r\n+                    public void delete(OpenJPAStateManager sm, JDBCStore store,\r\n+                        RowManager rm) throws SQLException {\r\n+                    }\r\n+\r\n+                    public String getAlias() {\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    public void initialize() {\r\n+                    }\r\n+\r\n+                    public void insert(OpenJPAStateManager sm, JDBCStore store,\r\n+                        RowManager rm) throws SQLException {\r\n+\r\n+                    }\r\n+\r\n+                    public Boolean isCustomDelete(OpenJPAStateManager sm,\r\n+                        JDBCStore store) {\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    public Boolean isCustomInsert(OpenJPAStateManager sm,\r\n+                        JDBCStore store) {\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    public Boolean isCustomUpdate(OpenJPAStateManager sm,\r\n+                        JDBCStore store) {\r\n+                        return null;\r\n+                    }\r\n+\r\n+                    public void map(boolean adapt) {\r\n+                    }\r\n+\r\n+                    public void update(OpenJPAStateManager sm, JDBCStore store,\r\n+                        RowManager rm) throws SQLException {\r\n+                    }\r\n+                }));\r\n+            return exceps;\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Scaffolding test state manager.\r\n+     */\r\n+    class TestOpenJPAStateManager implements OpenJPAStateManager {\r\n+\r\n+        public boolean assignObjectId(boolean flush) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean beforeRefresh(boolean refreshAll) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void dirty(int field) {\r\n+        }\r\n+\r\n+        public Object fetch(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean fetchBoolean(int field) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public byte fetchByte(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public char fetchChar(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public double fetchDouble(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object fetchField(int field, boolean transitions) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public float fetchFloat(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object fetchInitialField(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public int fetchInt(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public long fetchLong(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object fetchObject(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public short fetchShort(int field) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public String fetchString(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public StoreContext getContext() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public BitSet getDirty() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public BitSet getFlushed() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getId() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getImplData() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getImplData(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getIntermediate(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public BitSet getLoaded() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getLock() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getManagedInstance() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public ClassMetaData getMetaData() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getObjectId() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public OpenJPAStateManager getOwner() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public int getOwnerIndex() {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public PCState getPCState() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PersistenceCapable getPersistenceCapable() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public BitSet getUnloaded(FetchConfiguration fetch) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getVersion() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void initialize(Class forType, PCState state) {\r\n+        }\r\n+\r\n+        public boolean isDefaultValue(int field) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isEmbedded() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isFlushed() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isFlushedDirty() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isImplDataCacheable() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isImplDataCacheable(int field) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isProvisional() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isVersionCheckRequired() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isVersionUpdateRequired() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void load(FetchConfiguration fetch) {\r\n+        }\r\n+\r\n+        public Object newFieldProxy(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object newProxy(int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void removed(int field, Object removed, boolean key) {\r\n+        }\r\n+\r\n+        public Object setImplData(Object data, boolean cacheable) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object setImplData(int field, Object data) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void setIntermediate(int field, Object value) {\r\n+        }\r\n+\r\n+        public void setLock(Object lock) {\r\n+        }\r\n+\r\n+        public void setNextVersion(Object version) {\r\n+        }\r\n+\r\n+        public void setObjectId(Object oid) {\r\n+        }\r\n+\r\n+        public void setRemote(int field, Object value) {\r\n+        }\r\n+\r\n+        public void setVersion(Object version) {\r\n+        }\r\n+\r\n+        public void store(int field, Object value) {\r\n+        }\r\n+\r\n+        public void storeBoolean(int field, boolean externalVal) {\r\n+        }\r\n+\r\n+        public void storeByte(int field, byte externalVal) {\r\n+        }\r\n+\r\n+        public void storeChar(int field, char externalVal) {\r\n+        }\r\n+\r\n+        public void storeDouble(int field, double externalVal) {\r\n+        }\r\n+\r\n+        public void storeField(int field, Object value) {\r\n+        }\r\n+\r\n+        public void storeFloat(int field, float externalVal) {\r\n+        }\r\n+\r\n+        public void storeInt(int field, int externalVal) {\r\n+        }\r\n+\r\n+        public void storeLong(int field, long externalVal) {\r\n+        }\r\n+\r\n+        public void storeObject(int field, Object externalVal) {\r\n+        }\r\n+\r\n+        public void storeShort(int field, short externalVal) {\r\n+        }\r\n+\r\n+        public void storeString(int field, String externalVal) {\r\n+        }\r\n+\r\n+        public void accessingField(int idx) {\r\n+        }\r\n+\r\n+        public void dirty(String field) {\r\n+        }\r\n+\r\n+        public Object fetchObjectId() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getGenericContext() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Object getPCPrimaryKey(Object oid, int field) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean isDeleted() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isDetached() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isDirty() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isNew() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isPersistent() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isTransactional() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void providedBooleanField(PersistenceCapable pc, int idx,\r\n+            boolean cur) {\r\n+        }\r\n+\r\n+        public void providedByteField(PersistenceCapable pc, int idx,\r\n+            byte cur) {\r\n+        }\r\n+\r\n+        public void providedCharField(PersistenceCapable pc, int idx, \r\n+            char cur) {\r\n+        }\r\n+\r\n+        public void providedDoubleField(PersistenceCapable pc, int idx,\r\n+            double cur) {\r\n+        }\r\n+\r\n+        public void providedFloatField(PersistenceCapable pc, int idx,\r\n+            float cur) {\r\n+        }\r\n+\r\n+        public void providedIntField(PersistenceCapable pc, int idx, \r\n+            int cur) {\r\n+        }\r\n+\r\n+        public void providedLongField(PersistenceCapable pc, int idx, \r\n+            long cur) {\r\n+        }\r\n+\r\n+        public void providedObjectField(PersistenceCapable pc, int idx,\r\n+            Object cur) {\r\n+        }\r\n+\r\n+        public void providedShortField(PersistenceCapable pc, int idx, \r\n+            short cur) {\r\n+        }\r\n+\r\n+        public void providedStringField(PersistenceCapable pc, int idx,\r\n+            String cur) {\r\n+        }\r\n+\r\n+        public void proxyDetachedDeserialized(int idx) {\r\n+        }\r\n+\r\n+        public boolean replaceBooleanField(PersistenceCapable pc, int idx) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public byte replaceByteField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public char replaceCharField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public double replaceDoubleField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public float replaceFloatField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public int replaceIntField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public long replaceLongField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object replaceObjectField(PersistenceCapable pc, int idx) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public short replaceShortField(PersistenceCapable pc, int idx) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public StateManager replaceStateManager(StateManager sm) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public String replaceStringField(PersistenceCapable pc, int idx) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean serializing() {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void settingBooleanField(PersistenceCapable pc, int idx,\r\n+            boolean cur, boolean next, int set) {\r\n+        }\r\n+\r\n+        public void settingByteField(PersistenceCapable pc, int idx, byte cur,\r\n+            byte next, int set) {\r\n+        }\r\n+\r\n+        public void settingCharField(PersistenceCapable pc, int idx, char cur,\r\n+            char next, int set) {\r\n+        }\r\n+\r\n+        public void settingDoubleField(PersistenceCapable pc, int idx,\r\n+            double cur, double next, int set) {\r\n+        }\r\n+\r\n+        public void settingFloatField(PersistenceCapable pc, int idx,\r\n+            float cur, float next, int set) {\r\n+        }\r\n+\r\n+        public void settingIntField(PersistenceCapable pc, int idx, int cur,\r\n+            int next, int set) {\r\n+        }\r\n+\r\n+        public void settingLongField(PersistenceCapable pc, int idx, long cur,\r\n+            long next, int set) {\r\n+        }\r\n+\r\n+        public void settingObjectField(PersistenceCapable pc, int idx,\r\n+            Object cur, Object next, int set) {\r\n+        }\r\n+\r\n+        public void settingShortField(PersistenceCapable pc, int idx,\r\n+            short cur, short next, int set) {\r\n+        }\r\n+\r\n+        public void settingStringField(PersistenceCapable pc, int idx,\r\n+            String cur, String next, int set) {\r\n+        }\r\n+\r\n+        public boolean writeDetached(ObjectOutput out) throws IOException {\r\n+            return false;\r\n+        }\r\n+\r\n+        public void storeBooleanField(int fieldIndex, boolean value) {\r\n+        }\r\n+\r\n+        public void storeByteField(int fieldIndex, byte value) {\r\n+        }\r\n+\r\n+        public void storeCharField(int fieldIndex, char value) {\r\n+        }\r\n+\r\n+        public void storeDoubleField(int fieldIndex, double value) {\r\n+        }\r\n+\r\n+        public void storeFloatField(int fieldIndex, float value) {\r\n+        }\r\n+\r\n+        public void storeIntField(int fieldIndex, int value) {\r\n+        }\r\n+\r\n+        public void storeLongField(int fieldIndex, long value) {\r\n+        }\r\n+\r\n+        public void storeObjectField(int fieldIndex, Object value) {\r\n+        }\r\n+\r\n+        public void storeShortField(int fieldIndex, short value) {\r\n+        }\r\n+\r\n+        public void storeStringField(int fieldIndex, String value) {\r\n+        }\r\n+\r\n+        public boolean fetchBooleanField(int fieldIndex) {\r\n+            return false;\r\n+        }\r\n+\r\n+        public byte fetchByteField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public char fetchCharField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public double fetchDoubleField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public float fetchFloatField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public int fetchIntField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public long fetchLongField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Object fetchObjectField(int fieldIndex) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public short fetchShortField(int fieldIndex) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public String fetchStringField(int fieldIndex) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Scaffolding test connection.\r\n+     */\r\n+    class TestConnection implements Connection {\r\n+\r\n+        public void clearWarnings() throws SQLException {\r\n+        }\r\n+\r\n+        public void close() throws SQLException {\r\n+        }\r\n+\r\n+        public void commit() throws SQLException {\r\n+        }\r\n+\r\n+        public Statement createStatement() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Statement createStatement(int resultSetType,\r\n+            int resultSetConcurrency) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Statement createStatement(int resultSetType,\r\n+            int resultSetConcurrency, int resultSetHoldability)\r\n+            throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean getAutoCommit() throws SQLException {\r\n+            return false;\r\n+        }\r\n+\r\n+        public String getCatalog() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public int getHoldability() throws SQLException {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public DatabaseMetaData getMetaData() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public int getTransactionIsolation() throws SQLException {\r\n+            return 0;\r\n+        }\r\n+\r\n+        public Map<String, Class<?>> getTypeMap() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public SQLWarning getWarnings() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean isClosed() throws SQLException {\r\n+            return false;\r\n+        }\r\n+\r\n+        public boolean isReadOnly() throws SQLException {\r\n+            return false;\r\n+        }\r\n+\r\n+        public String nativeSQL(String sql) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public CallableStatement prepareCall(String sql) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public CallableStatement prepareCall(String sql, int resultSetType,\r\n+            int resultSetConcurrency) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public CallableStatement prepareCall(String sql, int resultSetType,\r\n+            int resultSetConcurrency, int resultSetHoldability)\r\n+            throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql)\r\n+            throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            int autoGeneratedKeys) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            int[] columnIndexes) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            String[] columnNames) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            int resultSetType, int resultSetConcurrency) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public PreparedStatement prepareStatement(String sql,\r\n+            int resultSetType, int resultSetConcurrency,\r\n+            int resultSetHoldability) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void releaseSavepoint(Savepoint savepoint) throws SQLException {\r\n+        }\r\n+\r\n+        public void rollback() throws SQLException {\r\n+        }\r\n+\r\n+        public void rollback(Savepoint savepoint) throws SQLException {\r\n+        }\r\n+\r\n+        public void setAutoCommit(boolean autoCommit) throws SQLException {\r\n+        }\r\n+\r\n+        public void setCatalog(String catalog) throws SQLException {\r\n+        }\r\n+\r\n+        public void setHoldability(int holdability) throws SQLException {\r\n+        }\r\n+\r\n+        public void setReadOnly(boolean readOnly) throws SQLException {\r\n+        }\r\n+\r\n+        public Savepoint setSavepoint() throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Savepoint setSavepoint(String name) throws SQLException {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void setTransactionIsolation(int level) throws SQLException {\r\n+        }\r\n+\r\n+        public void setTypeMap(Map<String, Class<?>> map) throws SQLException {\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Scaffolding test store manager.\r\n+     */\r\n+    class TestJDBCStore implements JDBCStore {\r\n+\r\n+        public Object find(Object oid, ValueMapping vm,\r\n+            JDBCFetchConfiguration fetch) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public JDBCConfiguration getConfiguration() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public Connection getConnection() {\r\n+            return new TestConnection();\r\n+        }\r\n+\r\n+        public StoreContext getContext() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public DBDictionary getDBDictionary() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public JDBCFetchConfiguration getFetchConfiguration() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public JDBCLockManager getLockManager() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public SQLFactory getSQLFactory() {\r\n+            return null;\r\n+        }\r\n+\r\n+        public void loadSubclasses(ClassMapping mapping) {\r\n+\r\n+        }\r\n+\r\n+        public Id newDataStoreId(long id, ClassMapping mapping, boolean subs) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+}\r"}]}

