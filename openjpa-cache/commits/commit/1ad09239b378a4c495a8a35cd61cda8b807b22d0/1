{"sha":"1ad09239b378a4c495a8a35cd61cda8b807b22d0","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhZDA5MjM5YjM3OGE0YzQ5NWE4YTM1Y2Q2MWNkYThiODA3YjIyZDA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T19:50:37Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-02T19:50:37Z"},"message":"OPENJPA-647: ClassMetaData listens to value updates of dynamic property\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673476 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c0e94b94dd4de09d92492f01e0940ef68d3f31c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/c0e94b94dd4de09d92492f01e0940ef68d3f31c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1ad09239b378a4c495a8a35cd61cda8b807b22d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1ad09239b378a4c495a8a35cd61cda8b807b22d0","html_url":"https://github.com/apache/openjpa/commit/1ad09239b378a4c495a8a35cd61cda8b807b22d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1ad09239b378a4c495a8a35cd61cda8b807b22d0/comments","author":null,"committer":null,"parents":[{"sha":"25a69ffe0a49d07e3db2533856737c7613d6d58c","url":"https://api.github.com/repos/apache/openjpa/commits/25a69ffe0a49d07e3db2533856737c7613d6d58c","html_url":"https://github.com/apache/openjpa/commit/25a69ffe0a49d07e3db2533856737c7613d6d58c"}],"stats":{"total":54,"additions":53,"deletions":1},"files":[{"sha":"787823c656ea3ef688bd525295871199e34ee1ce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/1ad09239b378a4c495a8a35cd61cda8b807b22d0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/1ad09239b378a4c495a8a35cd61cda8b807b22d0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=1ad09239b378a4c495a8a35cd61cda8b807b22d0","patch":"@@ -41,6 +41,8 @@\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.lib.conf.Value;\n+import org.apache.openjpa.lib.conf.ValueListener;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n@@ -79,7 +81,7 @@\n public class ClassMetaData\n     extends Extensions\n     implements Comparable, SourceTracker, MetaDataContext, MetaDataModes,\n-    Commentable {\n+    Commentable, ValueListener {\n \n     /**\n      * Unkonwn identity type.\n@@ -196,6 +198,7 @@ protected ClassMetaData(Class type, MetaDataRepository repos) {\n         _repos = repos;\n         _owner = null;\n         setDescribedType(type);\n+        registerForValueUpdate(\"DataCacheTimeout\");\n     }\n \n     /**\n@@ -206,6 +209,7 @@ protected ClassMetaData(ValueMetaData owner) {\n         _repos = owner.getRepository();\n         setEnvClassLoader(owner.getFieldMetaData().getDefiningMetaData().\n             getEnvClassLoader());\n+        registerForValueUpdate(\"DataCacheTimeout\");\n     }\n \n     /**\n@@ -2351,4 +2355,24 @@ public int compare(Object o1, Object o2) {\n \t\t\treturn f1.getListingIndex () - f2.getListingIndex ();\n \t\t}\n \t}\n+    \n+    public void registerForValueUpdate(String...values) {\n+    \tif (values == null)\n+    \t\treturn;\n+    \tfor (String key : values) {\n+    \t\tValue value = getRepository().getConfiguration()\n+    \t\t\t.getValue(key);\n+    \t\tif (value != null)\n+    \t\t\tvalue.setListener(this);\n+    \t}\n+    }\n+    \n+    public void valueChanged(Value val) {\n+    \tif (val ==  null)\n+    \t\treturn;\n+    \tString key = val.getProperty();\n+    \tif (\"DataCacheTimeout\".equals(key)) {\n+    \t\t_cacheTimeout = Integer.MIN_VALUE;\n+    \t}\n+    }\n }"},{"sha":"5cebd277bc1861c51a0361f9bd1108ccc5aceb27","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/1ad09239b378a4c495a8a35cd61cda8b807b22d0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/1ad09239b378a4c495a8a35cd61cda8b807b22d0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java?ref=1ad09239b378a4c495a8a35cd61cda8b807b22d0","patch":"@@ -18,9 +18,13 @@\n  */\r\n package org.apache.openjpa.conf;\r\n \r\n+import javax.persistence.EntityManager;\r\n+\r\n import org.apache.openjpa.lib.conf.Value;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.PObject;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n /**\r\n@@ -31,6 +35,10 @@\n  */\r\n public class TestDynamicConfiguration extends SingleEMFTestCase {\r\n \r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(PObject.class);\r\n+\t}\r\n+\t\r\n     public void testConfigurationIsEqualByValueAndHashCode() {\r\n \t\tOpenJPAEntityManagerFactorySPI emf1 = createEMF();\r\n \t\tassertNotNull(emf1);\r\n@@ -102,4 +110,24 @@ public void testDynamicChangeDoesNotChangeHashCode() {\n \t\t\r\n \t\tassertEquals(oldHash, newHash);\r\n \t}\r\n+\t\r\n+\tpublic void testClassMetaDataRecognizesDataCacheTimeoutValueChange() {\r\n+\t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tPObject pc = new PObject();\r\n+\t\tem.persist(pc);\r\n+\t\t\r\n+\t\tint oldValue = conf.getDataCacheTimeout();\r\n+\t\t\r\n+\t\tClassMetaData meta = conf.getMetaDataRepositoryInstance().getCachedMetaData(PObject.class);\r\n+\t\tassertNotNull(meta);\r\n+\t\tassertEquals(oldValue, meta.getDataCacheTimeout());\r\n+\t\t\r\n+\t\tint newValue = oldValue + 10;\r\n+\t\tconf.setDataCacheTimeout(newValue);\r\n+\t\tassertEquals(newValue, conf.getDataCacheTimeout());\r\n+\t\tassertEquals(newValue, meta.getDataCacheTimeout());\r\n+\t\t\r\n+\t}\r\n }\r"}]}

