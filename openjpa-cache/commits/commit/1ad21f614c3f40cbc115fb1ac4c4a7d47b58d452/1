{"sha":"1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhZDIxZjYxNGMzZjQwY2JjMTE1ZmIxYWM0YzRhN2Q0N2I1OGQ0NTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-23T21:51:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-23T21:51:25Z"},"message":"OPENJPA-610 Adding some comments/formatting to the tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659679 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"905b8f6610c6f22545e9eb7b86371612da765a0d","url":"https://api.github.com/repos/apache/openjpa/git/trees/905b8f6610c6f22545e9eb7b86371612da765a0d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","html_url":"https://github.com/apache/openjpa/commit/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452/comments","author":null,"committer":null,"parents":[{"sha":"534778acf8a25814e153af4ea88d636b011ab2c0","url":"https://api.github.com/repos/apache/openjpa/commits/534778acf8a25814e153af4ea88d636b011ab2c0","html_url":"https://github.com/apache/openjpa/commit/534778acf8a25814e153af4ea88d636b011ab2c0"}],"stats":{"total":29,"additions":23,"deletions":6},"files":[{"sha":"6efa85f3b2cd1acb2782d93d78d9582eae562e2c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":23,"deletions":6,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=1ad21f614c3f40cbc115fb1ac4c4a7d47b58d452","patch":"@@ -263,8 +263,11 @@ public void testInconsitentBidirectionalRelationIsNotPreservedWithoutDataCache()\n \t * @param datacache the marker for the copy of the data cached instance\r\n \t * @param database the marker for the database record\r\n \t * @param lock lock to be used\r\n+\t * @param makeDirtyBeforeRefresh flags if the instance be dirtied before\r\n+\t * refresh()\r\n \t */\r\n-\tpublic void verifyRefresh(boolean useDataCache, LockModeType lock, boolean makeDirtyBeforeRefresh) {\r\n+\tpublic void verifyRefresh(boolean useDataCache, LockModeType lock, \r\n+\t\t\tboolean makeDirtyBeforeRefresh) {\r\n \t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n \t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n \t\t\t\r\n@@ -331,7 +334,8 @@ public void verifyRefresh(boolean useDataCache, LockModeType lock, boolean makeD\n \t * @param makeDirtyBeforeRefresh\r\n \t * @return\r\n \t */\r\n-\tString getExpectedMarker(boolean useDataCache, LockModeType lock, boolean makeDirtyBeforeRefresh) {\r\n+\tString getExpectedMarker(boolean useDataCache, LockModeType lock, \r\n+\t\t\tboolean makeDirtyBeforeRefresh) {\r\n \t\tif (useDataCache) {\r\n \t\t\treturn (lock != null && makeDirtyBeforeRefresh)\r\n \t\t\t\t? MARKER_DATABASE : MARKER_DATACACHE; \r\n@@ -376,8 +380,17 @@ public void testCleanRefreshWithoutDataCacheNeverHitsDatabase() {\n \t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY);\r\n \t}\r\n \t\r\n-\t\r\n-\tpublic void verifyDeleteDetectionOnRefresh(boolean useDataCache, LockModeType lock) {\r\n+\t/**\r\n+\t * Verify behavior of refreshing an instance which has been deleted by\r\n+\t * out-of-band process (e.g. a native SQL in a separate transaction).\r\n+\t * The behavior differs when refresh() without a lock fetches the data from\r\n+\t * DataCache even when the original database record is deleted.\r\n+\t * \r\n+\t * @param useDataCache\r\n+\t * @param lock\r\n+\t */\r\n+\tpublic void verifyDeleteDetectionOnRefresh(boolean useDataCache, \r\n+\t\t\tLockModeType lock) {\r\n \t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n \t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n \t\t\t\r\n@@ -405,8 +418,12 @@ public void verifyDeleteDetectionOnRefresh(boolean useDataCache, LockModeType lo\n \t\t// nor does the data cache\r\n \t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n \t\t\r\n-\t\tassertEquals(useDataCache ? MARKER_DATACACHE : MARKER_CACHE, pc.getName());\r\n-\t\t\r\n+\t\t/**\r\n+\t\t * refresh behavior depends on current lock. Having no lock will refresh\r\n+\t\t * the instance (wrongly) while any other lock will attempt to fetch the \r\n+\t\t * instance from database (correctly) raising EntityNotFoundException.\r\n+\t\t *   \r\n+\t\t */\r\n \t\tem.getTransaction().begin();\r\n \t\tif (lock != null)\r\n \t\t\tem.getFetchPlan().setReadLockMode(lock);\r"}]}

