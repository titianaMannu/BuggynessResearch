{"sha":"1aec5d3dde6d8e96e9bf537b74e87a149df29c20","node_id":"MDY6Q29tbWl0MjA2MzY0OjFhZWM1ZDNkZGU2ZDhlOTZlOWJmNTM3Yjc0ZTg3YTE0OWRmMjljMjA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-23T00:11:29Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-23T00:11:29Z"},"message":"Added support for PersistenceAwareClass -- wraps java.lang.Class thinly with SourceTracker.\nModified MetaDataRepository to add a container for PersistenceAwareClasses.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@433811 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e9d75ca7ea163ab8bf68e07d65f8c1fc51edab92","url":"https://api.github.com/repos/apache/openjpa/git/trees/e9d75ca7ea163ab8bf68e07d65f8c1fc51edab92"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1aec5d3dde6d8e96e9bf537b74e87a149df29c20","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1aec5d3dde6d8e96e9bf537b74e87a149df29c20","html_url":"https://github.com/apache/openjpa/commit/1aec5d3dde6d8e96e9bf537b74e87a149df29c20","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1aec5d3dde6d8e96e9bf537b74e87a149df29c20/comments","author":null,"committer":null,"parents":[{"sha":"ac98ba5c8084f6cb8d8973c31b7b907dbee63b53","url":"https://api.github.com/repos/apache/openjpa/commits/ac98ba5c8084f6cb8d8973c31b7b907dbee63b53","html_url":"https://github.com/apache/openjpa/commit/ac98ba5c8084f6cb8d8973c31b7b907dbee63b53"}],"stats":{"total":197,"additions":196,"deletions":1},"files":[{"sha":"324ce8e31a0cbdfa0c0292d5ec4202d85ba27747","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":74,"deletions":1,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/1aec5d3dde6d8e96e9bf537b74e87a149df29c20/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/1aec5d3dde6d8e96e9bf537b74e87a149df29c20/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=1aec5d3dde6d8e96e9bf537b74e87a149df29c20","patch":"@@ -20,6 +20,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n@@ -85,6 +86,8 @@\n     protected final ClassMetaData[] EMPTY_METAS;\n     protected final FieldMetaData[] EMPTY_FIELDS;\n     protected final Order[] EMPTY_ORDERS;\n+    protected static final PersistenceAwareClass[] EMPTY_PAWARE_CLASSES = \n+    \tnew PersistenceAwareClass[0];\n \n     private static final Localizer _loc = Localizer.forPackage\n         (MetaDataRepository.class);\n@@ -105,7 +108,8 @@\n     private final Map _queries = new HashMap();\n     private final Map _seqs = new HashMap();\n     private final Map _aliases = Collections.synchronizedMap(new HashMap());\n-\n+    private final Map _pawares = Collections.synchronizedMap(new HashMap());\n+    \n     // map of classes to lists of their subclasses\n     private final Map _subs = Collections.synchronizedMap(new HashMap());\n \n@@ -696,6 +700,19 @@ public ClassMetaData getCachedMetaData(Class cls) {\n         return (ClassMetaData) _metas.get(cls);\n     }\n \n+    /**\n+     * Gets all the registered persistence-aware classes.\n+     * \n+     * @return empty array if no class has been registered.\n+     * \n+     */\n+    public PersistenceAwareClass[] getPersistenceAwareClasses() {\n+    \tif (_pawares.isEmpty())\n+    \t\treturn EMPTY_PAWARE_CLASSES;\n+    \treturn (PersistenceAwareClass[])_pawares.values().toArray\n+    \t\t(new PersistenceAwareClass[_pawares.size()]);\n+    }\n+    \n     /**\n      * Create a new metadata, populate it with default information, add it to\n      * the repository, and return it. Use the default access type.\n@@ -726,12 +743,37 @@ public ClassMetaData addMetaData(Class cls, int access) {\n         return meta;\n     }\n \n+    /**\n+     * Add the given class as persitence-aware.\n+     * \n+     * @param cls non-null and must not alreaddy be added as persitence-capable.\n+     */\n+    public PersistenceAwareClass addPersistenceAware(Class cls) {\n+    \tif (cls == null)\n+    \t\treturn null;\n+    \tif (_pawares.containsKey(cls))\n+    \t\treturn (PersistenceAwareClass)_pawares.get(cls);\n+    \tif (getCachedMetaData(cls) == null) {\n+    \t\tsynchronized(this) {\n+\t    \t\tPersistenceAwareClass result = newPersistenceAwareClass(cls); \n+\t    \t\t_pawares.put(cls,result);\n+\t    \t\treturn result;\n+    \t\t}\n+    \t}\n+    \telse\n+    \t\tthrow new MetaDataException(_loc.get(\"pc-and-aware\", cls));\n+    }\n+    \n     /**\n      * Create a new class metadata instance.\n      */\n     protected ClassMetaData newClassMetaData(Class type) {\n         return new ClassMetaData(type, this);\n     }\n+    \n+    protected PersistenceAwareClass newPersistenceAwareClass(Class type) {\n+    \treturn new PersistenceAwareClass(type, this);\n+    }\n \n     /**\n      * Create a new array of the proper class metadata subclass.\n@@ -844,7 +886,26 @@ public synchronized boolean removeMetaData(Class cls) {\n         }\n         return false;\n     }\n+    \n+    /**\n+     * Remove a persitence-aware class from this receiver.\n+     * \n+     * @param cls a class possibly added earlier as persitence-aware.\n+     * \n+     * @return true if removed, false if not contained in this receiver\n+     */\n+    public synchronized boolean removePersistenceAware(Class cls) {\n+    \treturn _pawares.remove(cls) != null;\n+    }\n \n+    /**\n+     * Removes all persitence-aware classes from this receiver.\n+     *\n+     */\n+    public synchronized void removeAllPersistenceAware() {\n+    \t_pawares.clear();\n+    }\n+    \n     /**\n      * Return the least-derived class metadata for the given application\n      * identity object.\n@@ -1499,6 +1560,18 @@ private SequenceMetaData getSequenceMetaDataInternal(String name,\n             (new SequenceMetaData[_seqs.size()]);\n     }\n \n+    /**\n+     * Gets the persistence-aware class corresponding to the given class. Can\n+     * be null, if the given class is not registered as persistence-aware with\n+     * this receiver.\n+     * \n+     * @param cls a Java class possibly registered as persistence-aware earlier\n+     * with this receiver.\n+     */\n+    public synchronized PersistenceAwareClass getPersistenceAware(Class cls) {\n+    \treturn (PersistenceAwareClass)_pawares.get(cls);\n+    }\n+    \n     /**\n      * Return the cached a sequence metadata for the given name.\n      */"},{"sha":"31782a059d4835a04d2a4867089e635840f5029d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/1aec5d3dde6d8e96e9bf537b74e87a149df29c20/openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java","raw_url":"https://github.com/apache/openjpa/raw/1aec5d3dde6d8e96e9bf537b74e87a149df29c20/openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java?ref=1aec5d3dde6d8e96e9bf537b74e87a149df29c20","patch":"@@ -0,0 +1,122 @@\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.File;\r\n+\r\n+import org.apache.openjpa.lib.meta.SourceTracker;\r\n+import org.apache.openjpa.lib.xml.Commentable;\r\n+\r\n+public class PersistenceAwareClass \r\n+\timplements Comparable, SourceTracker,Commentable,MetaDataContext,\r\n+\tMetaDataModes {\r\n+\r\n+    private final MetaDataRepository _repos;\r\n+\tprivate final Class _class;\r\n+\t\r\n+    private File _srcFile = null;\r\n+    private int _srcType = SRC_OTHER;\r\n+    private String[] _comments = null;\r\n+    private int _listIndex = -1;\r\n+    private int _srcMode = MODE_META | MODE_MAPPING;\r\n+\t\r\n+\tpublic PersistenceAwareClass(Class cls, MetaDataRepository repos) {\r\n+\t\t_repos = repos;\r\n+\t\t_class = cls;\r\n+\t}\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn _class.getName();\r\n+\t}\r\n+\t\r\n+\tpublic MetaDataRepository getRepository() {\r\n+\t\treturn _repos;\r\n+\t}\r\n+\t\r\n+\tpublic Class getDescribedType() {\r\n+\t\treturn _class;\r\n+\t}\r\n+\t\r\n+    public File getSourceFile() {\r\n+        return _srcFile;\r\n+    }\r\n+\r\n+    public Object getSourceScope() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public int getSourceType() {\r\n+        return _srcType;\r\n+    }\r\n+\r\n+    public void setSource(File file, int srcType) {\r\n+        _srcFile = file;\r\n+        _srcType = srcType;\r\n+    }\r\n+\r\n+    public String getResourceName() {\r\n+        return _class.getName();\r\n+    }\r\n+\r\n+    /**\r\n+     * The source mode this metadata has been loaded under.\r\n+     */\r\n+    public int getSourceMode() {\r\n+        return _srcMode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The source mode this metadata has been loaded under.\r\n+     */\r\n+    public void setSourceMode(int mode) {\r\n+        _srcMode = mode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The source mode this metadata has been loaded under.\r\n+     */\r\n+    public void setSourceMode(int mode, boolean on) {\r\n+        if (mode == MODE_NONE)\r\n+            _srcMode = mode;\r\n+        else if (on)\r\n+            _srcMode |= mode;\r\n+        else\r\n+            _srcMode &= ~mode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The index in which this class was listed in the metadata. Defaults to\r\n+     * <code>-1</code> if this class was not listed in the metadata.\r\n+     */\r\n+    public int getListingIndex() {\r\n+        return _listIndex;\r\n+    }\r\n+\r\n+    /**\r\n+     * The index in which this field was listed in the metadata. Defaults to\r\n+     * <code>-1</code> if this class was not listed in the metadata.\r\n+     */\r\n+    public void setListingIndex(int index) {\r\n+        _listIndex = index;\r\n+    }\r\n+\r\n+    ///////////////\r\n+    // Commentable\r\n+    ///////////////\r\n+\r\n+    public String[] getComments() {\r\n+        return (_comments == null) ? ClassMetaData.EMPTY_COMMENTS : _comments;\r\n+    }\r\n+\r\n+    public void setComments(String[] comments) {\r\n+        _comments = comments;\r\n+    }\r\n+    \r\n+    public int compareTo(Object other) {\r\n+        if (other == this)\r\n+            return 0;\r\n+        if (other instanceof PersistenceAwareClass)\r\n+        \treturn 1;\r\n+        return _class.getName().compareTo(((ClassMetaData) other).\r\n+            getDescribedType().getName());\r\n+    }\r\n+\r\n+}\r"}]}

