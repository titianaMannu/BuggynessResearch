{"sha":"1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiMWI2MGM5YTdkNjMyNjhkYzI2YzFmZjVkYzYwMWEzNTJjZWUxYzk=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2013-07-10T15:43:18Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2013-07-10T15:43:18Z"},"message":"OPENJPA-2400: MariaDB support\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1501805 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5cce02b7ee6603f8b259c3c51c3f31d8761bdf59","url":"https://api.github.com/repos/apache/openjpa/git/trees/5cce02b7ee6603f8b259c3c51c3f31d8761bdf59"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","html_url":"https://github.com/apache/openjpa/commit/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/comments","author":null,"committer":null,"parents":[{"sha":"8cb451d1dfefe4f4d67332cd055310cf29b0b3a8","url":"https://api.github.com/repos/apache/openjpa/commits/8cb451d1dfefe4f4d67332cd055310cf29b0b3a8","html_url":"https://github.com/apache/openjpa/commit/8cb451d1dfefe4f4d67332cd055310cf29b0b3a8"}],"stats":{"total":736,"additions":713,"deletions":23},"files":[{"sha":"df3f8db9876e6e673add020d02af7c14083abd82","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -212,6 +212,7 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadGlobals) {\n             \"informix\", \"org.apache.openjpa.jdbc.sql.InformixDictionary\",\n             \"ingres\", \"org.apache.openjpa.jdbc.sql.IngresDictionary\",\n             \"jdatastore\", \"org.apache.openjpa.jdbc.sql.JDataStoreDictionary\",\n+            \"mariadb\", \"org.apache.openjpa.jdbc.sql.MariaDBDictionary\",\n             \"mysql\", \"org.apache.openjpa.jdbc.sql.MySQLDictionary\",\n             \"oracle\", \"org.apache.openjpa.jdbc.sql.OracleDictionary\",\n             \"pointbase\", \"org.apache.openjpa.jdbc.sql.PointbaseDictionary\","},{"sha":"4859b1156b1bff9dc53880273767384c8de565dd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n@@ -74,6 +75,7 @@ public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n         _hints.add(PREFIX + \".ResultSetType\");\n         _hints.add(PREFIX + \".SubclassFetchMode\");\n         \n+        _hints.add(MariaDBDictionary.SELECT_HINT);\n         _hints.add(MySQLDictionary.SELECT_HINT);\n         _hints.add(OracleDictionary.SELECT_HINT);\n         "},{"sha":"3a162b59bd6e6d46b6463b7803d850ca542ceeae","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -74,7 +74,7 @@ public static DBDictionary newDBDictionary(JDBCConfiguration conf,\n     public static DBDictionary calculateDBDictionary(JDBCConfiguration conf,\n         String url, String driver, String props) {\n         String dclass = dictionaryClassForString(getProtocol(url), conf);\n-        if (dclass == null)\n+        if (dclass == null || (dclass != null && dclass.contains(\"MySQL\")))\n             dclass = dictionaryClassForString(driver, conf);\n         if (dclass == null)\n             return null;\n@@ -90,11 +90,13 @@ public static DBDictionary newDBDictionary(JDBCConfiguration conf,\n         try {\n             conn = ds.getConnection();\n             DatabaseMetaData meta = conn.getMetaData();\n-            String dclass = dictionaryClassForString(meta\n-                .getDatabaseProductName(), conf);\n+            String dclass = dictionaryClassForString(meta.getDatabaseProductName(), conf);            \n             if (dclass == null)\n-                dclass = dictionaryClassForString(getProtocol(meta.getURL()),\n-                    conf);\n+                dclass = dictionaryClassForString(getProtocol(meta.getURL()), conf);\n+            if (dclass != null && dclass.contains(\"MySQL\")) {\n+                // MariaDB returns \"MySQL\" for product name, need to verify by looking at product version.\n+                dclass = dictionaryClassForString(meta.getDatabaseProductVersion(), conf);\n+            }\n             if (dclass == null)\n                 dclass = DBDictionary.class.getName();\n             return newDBDictionary(conf, dclass, props, conn);\n@@ -225,6 +227,8 @@ private static String dictionaryClassForString(String prod\n             return dbdictionaryPlugin.unalias(\"sqlserver\");\n         if (prod.indexOf(\"jsqlconnect\") != -1)\n             return dbdictionaryPlugin.unalias(\"sqlserver\");\n+        if (prod.indexOf(\"mariadb\") != -1)\n+            return dbdictionaryPlugin.unalias(\"mariadb\");\n         if (prod.indexOf(\"mysql\") != -1)\n             return dbdictionaryPlugin.unalias(\"mysql\");\n         if (prod.indexOf(\"postgres\") != -1)"},{"sha":"7171d7a4a34e167940908c9a6f73a49020e6f673","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MariaDBDictionary.java","status":"added","additions":483,"deletions":0,"changes":483,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MariaDBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MariaDBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MariaDBDictionary.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -0,0 +1,483 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.sql;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n+import org.apache.openjpa.jdbc.schema.Index;\n+import org.apache.openjpa.jdbc.schema.PrimaryKey;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.util.StoreException;\n+\n+/*\n+ * Dictionary for MariaDB, based off the MySQLDictionary.\n+ * \n+ */\n+public class MariaDBDictionary extends DBDictionary {\n+    public static final String SELECT_HINT = \"openjpa.hint.MariaDBSelectHint\";\n+\n+    public static final String DELIMITER_BACK_TICK = \"`\";\n+    \n+    /**\n+     * The MySQL table type to use when creating tables; defaults to innodb.\n+     */\n+    public String tableType = \"innodb\";\n+\n+    /**\n+     * Whether to use clobs; defaults to true. Set this to false if you have an\n+     * old version of MySQL which does not handle clobs properly.\n+     */\n+    public boolean useClobs = true;\n+\n+    /**\n+     * Whether the driver automatically deserializes blobs.\n+     */\n+    public boolean driverDeserializesBlobs = false;\n+\n+    /**\n+     * Whether to inline multi-table bulk-delete operations into MySQL's \n+     * combined <code>DELETE FROM foo, bar, baz</code> syntax. \n+     * Defaults to false, since this may fail in the presence of InnoDB tables\n+     * with foreign keys.\n+     * @see http://dev.mysql.com/doc/refman/5.0/en/delete.html\n+     */\n+    public boolean optimizeMultiTableDeletes = false;\n+\n+    public static final String tinyBlobTypeName = \"TINYBLOB\";\n+    public static final String mediumBlobTypeName = \"MEDIUMBLOB\";\n+    public static final String longBlobTypeName = \"LONGBLOB\";\n+\n+    public MariaDBDictionary() {\n+        platform = \"MariaDB\";\n+        validationSQL = \"SELECT NOW()\";\n+        distinctCountColumnSeparator = \",\";\n+\n+        supportsDeferredConstraints = false;\n+        constraintNameMode = CONS_NAME_MID;\n+        supportsMultipleNontransactionalResultSets = false;\n+        requiresAliasForSubselect = true; // new versions\n+        requiresTargetForDelete = true;\n+        supportsSelectStartIndex = true;\n+        supportsSelectEndIndex = true;\n+\n+        concatenateFunction = \"CONCAT({0},{1})\";\n+\n+        maxTableNameLength = 64;\n+        maxColumnNameLength = 64;\n+        maxIndexNameLength = 64;\n+        maxConstraintNameLength = 64;\n+        maxIndexesPerTable = 32;\n+        schemaCase = SCHEMA_CASE_PRESERVE;\n+\n+        supportsAutoAssign = true;\n+        lastGeneratedKeyQuery = \"SELECT LAST_INSERT_ID()\";\n+        autoAssignClause = \"AUTO_INCREMENT\";\n+\n+        clobTypeName = \"TEXT\";\n+        longVarcharTypeName = \"TEXT\";\n+        longVarbinaryTypeName = \"LONG VARBINARY\";\n+        timestampTypeName = \"DATETIME\";\n+        xmlTypeName = \"TEXT\";\n+        fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n+            \"BOOL\", \"LONG VARBINARY\", \"MEDIUMBLOB\", \"LONGBLOB\",\n+            \"TINYBLOB\", \"LONG VARCHAR\", \"MEDIUMTEXT\", \"LONGTEXT\", \"TEXT\",\n+            \"TINYTEXT\", \"DOUBLE PRECISION\", \"ENUM\", \"SET\", \"DATETIME\",\n+        }));\n+        reservedWordSet.addAll(Arrays.asList(new String[]{\n+            \"AUTO_INCREMENT\", \"BINARY\", \"BLOB\", \"CHANGE\", \"ENUM\", \"INFILE\",\n+            \"INT1\", \"INT2\", \"INT4\", \"FLOAT1\", \"FLOAT2\", \"FLOAT4\", \"LOAD\",\n+            \"MEDIUMINT\", \"OUTFILE\", \"REPLACE\", \"STARTING\", \"TEXT\", \"UNSIGNED\", \n+            \"ZEROFILL\", \"INDEX\", \n+        }));\n+\n+        // reservedWordSet subset that CANNOT be used as valid column names\n+        // (i.e., without surrounding them with double-quotes)\n+        invalidColumnWordSet.addAll(Arrays.asList(new String[]{\n+            \"ADD\", \"ALL\", \"ALTER\", \"AND\", \"AS\", \"ASC\", \"BETWEEN\", \"BINARY\",\n+            \"BLOB\", \"BOTH\", \"BY\", \"CASCADE\", \"CASE\", \"CHANGE\", \"CHAR\", \n+            \"CHARACTER\", \"CHECK\", \"COLLATE\", \"COLUMN\", \"CONSTRAINT\", \"CONTINUE\",\n+            \"CONVERT\", \"CREATE\", \"CROSS\", \"CURRENT_DATE\", \"CURRENT_TIME\",\n+            \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURSOR\", \"DEC\", \"DECIMAL\",\n+            \"DECLARE\", \"DEFAULT\", \"DELETE\", \"DESC\", \"DESCRIBE\", \"DISTINCT\",\n+            \"DOUBLE\", \"DROP\", \"ELSE\", \"END-EXEC\", \"EXISTS\", \"FALSE\", \"FETCH\",\n+            \"FLOAT\", \"FLOAT4\", \"FOR\", \"FOREIGN\", \"FROM\", \"GRANT\", \"GROUP\",\n+            \"HAVING\", \"IN\", \"INFILE\", \"INNER\", \"INSENSITIVE\", \"INSERT\", \"INT\",\n+            \"INT1\", \"INT2\", \"INT4\", \"INTEGER\", \"INTERVAL\", \"INTO\", \"IS\", \"JOIN\",\n+            \"KEY\", \"LEADING\", \"LEFT\", \"LIKE\", \"LOAD\", \"MATCH\", \"MEDIUMINT\",\n+            \"NATURAL\", \"NOT\", \"NULL\", \"NUMERIC\", \"ON\", \"OPTION\", \"OR\", \"ORDER\",\n+            \"OUTER\", \"OUTFILE\", \"PRECISION\", \"PRIMARY\", \"PROCEDURE\", \"READ\",\n+            \"REAL\", \"REFERENCES\", \"REPLACE\", \"RESTRICT\", \"REVOKE\", \"RIGHT\",\n+            \"SCHEMA\", \"SELECT\", \"SET\", \"SMALLINT\", \"SQL\", \"SQLSTATE\",\n+            \"STARTING\", \"TABLE\", \"THEN\", \"TO\", \"TRAILING\", \"TRUE\", \"UNION\",\n+            \"UNIQUE\", \"UNSIGNED\", \"UPDATE\", \"USAGE\", \"USING\", \"VALUES\",\n+            \"VARCHAR\", \"VARYING\", \"WHEN\", \"WHERE\", \"WITH\", \"WRITE\", \"ZEROFILL\",\n+            \"INDEX\", \n+        }));\n+\n+        requiresSearchStringEscapeForLike = true;\n+        // MariaDB requires double-escape for strings\n+        searchStringEscape = \"\\\\\\\\\";\n+\n+        typeModifierSet.addAll(Arrays.asList(new String[] { \"UNSIGNED\",\n+            \"ZEROFILL\" }));\n+\n+        setLeadingDelimiter(DELIMITER_BACK_TICK);\n+        setTrailingDelimiter(DELIMITER_BACK_TICK);\n+        \n+        fixedSizeTypeNameSet.remove(\"NUMERIC\");\n+    }\n+\n+    @Override\n+    public void connectedConfiguration(Connection conn) throws SQLException {\n+        super.connectedConfiguration(conn);\n+\n+        DatabaseMetaData metaData = conn.getMetaData();\n+        int maj = 0;\n+        int min = 0;\n+        try {\n+            // The product version looks like 4.1.3-nt or 5.1.30\n+            String productVersion = metaData.getDatabaseProductVersion();\n+            int[] versions = getMajorMinorVersions(productVersion);\n+            maj = versions[0];\n+            min = versions[1];\n+        } catch (IllegalArgumentException e) {\n+            // we don't understand the version format.\n+            // That is ok. We just take the default values.\n+            if (log.isWarnEnabled())\n+                log.warn(e.toString(), e);\n+        }\n+        \n+        supportsXMLColumn = true;\n+    }\n+    \n+    protected void setDelimitedCase(DatabaseMetaData metaData) {\n+        // Determination of case sensitivity is not accurate; MariaDB JIRA CONJ-55\n+        delimitedCase = SCHEMA_CASE_PRESERVE;\n+    }\n+\n+    @Override\n+    public Connection decorate(Connection conn)  throws SQLException {\n+        conn = super.decorate(conn);\n+        return conn;\n+    }\n+    \n+    private static int[] getMajorMinorVersions(String versionStr)\n+        throws IllegalArgumentException {\n+        int beginIndex = 0;\n+\n+        versionStr = versionStr.trim();\n+        char[] charArr = versionStr.toCharArray();\n+        for (int i = 0; i < charArr.length; i++) {\n+            if (Character.isDigit(charArr[i])) {\n+                beginIndex = i;\n+                break;\n+            }\n+        }\n+\n+        int endIndex = charArr.length;\n+        for (int i = beginIndex+1; i < charArr.length; i++) {\n+            if (charArr[i] != '.' && !Character.isDigit(charArr[i])) {\n+                endIndex = i;\n+                break;\n+            }\n+        }\n+\n+        String[] arr = versionStr.substring(beginIndex, endIndex).split(\"\\\\.\");\n+        if (arr.length < 2)\n+            throw new IllegalArgumentException();\n+\n+        int maj = Integer.parseInt(arr[0]);\n+        int min = Integer.parseInt(arr[1]);\n+        return new int[]{maj, min};\n+    }\n+\n+    @Override\n+    public String[] getCreateTableSQL(Table table) {\n+        String[] sql = super.getCreateTableSQL(table);\n+        if (!StringUtils.isEmpty(tableType))\n+            sql[0] = sql[0] + \" ENGINE = \" + tableType;\n+        return sql;\n+    }\n+\n+    @Override\n+    public String[] getDropIndexSQL(Index index) {\n+        return new String[]{ \"DROP INDEX \" + getFullName(index) + \" ON \"\n+            + getFullName(index.getTable(), false) };\n+    }\n+\n+    /**\n+     * Return <code>ALTER TABLE &lt;table name&gt; DROP PRIMARY KEY</code>.\n+     */\n+    @Override\n+    public String[] getDropPrimaryKeySQL(PrimaryKey pk) {\n+        if (DBIdentifier.isNull(pk.getIdentifier()))\n+            return new String[0];\n+        return new String[]{ \"ALTER TABLE \"\n+            + getFullName(pk.getTable(), false)\n+            + \" DROP PRIMARY KEY\" };\n+    }\n+\n+    /**\n+     * Return <code>ALTER TABLE &lt;table name&gt; DROP FOREIGN KEY\n+     * &lt;fk name&gt;</code>.\n+     */\n+    @Override\n+    public String[] getDropForeignKeySQL(ForeignKey fk, Connection conn) {\n+        if (DBIdentifier.isNull(fk.getIdentifier())) {\n+            DBIdentifier fkName = fk.loadIdentifierFromDB(this,conn);\n+            String[] retVal = (fkName == null) ?  new String[0] :\n+                new String[]{ \"ALTER TABLE \"\n+                + getFullName(fk.getTable(), false)\n+                + \" DROP FOREIGN KEY \" + toDBName(fkName) };\n+            return retVal;   \n+        }\n+        return new String[]{ \"ALTER TABLE \"\n+            + getFullName(fk.getTable(), false)\n+            + \" DROP FOREIGN KEY \" + toDBName(fk.getIdentifier()) };\n+    }\n+\n+    @Override\n+    public String[] getAddPrimaryKeySQL(PrimaryKey pk) {\n+        String[] sql = super.getAddPrimaryKeySQL(pk);\n+\n+        // mysql requires that a column be declared NOT NULL before\n+        // it can be made a primary key.\n+        Column[] cols = pk.getColumns();\n+        String[] ret = new String[cols.length + sql.length];\n+        for (int i = 0; i < cols.length; i++) {\n+            ret[i] = \"ALTER TABLE \" + getFullName(cols[i].getTable(), false)\n+                + \" CHANGE \" + toDBName(cols[i].getIdentifier())\n+                + \" \" + toDBName(cols[i].getIdentifier()) // name twice\n+                + \" \" + getTypeName(cols[i]) + \" NOT NULL\";\n+        }\n+\n+        System.arraycopy(sql, 0, ret, cols.length, sql.length);\n+        return ret;\n+    }\n+    \n+    @Override\n+    public String[] getDeleteTableContentsSQL(Table[] tables,Connection conn) {\n+        // mysql >= 4 supports more-optimal delete syntax\n+        if (!optimizeMultiTableDeletes)\n+            return super.getDeleteTableContentsSQL(tables,conn);\n+        else {\n+            StringBuilder buf = new StringBuilder(tables.length * 8);\n+            buf.append(\"DELETE FROM \");\n+            for (int i = 0; i < tables.length; i++) {\n+                buf.append(toDBName(tables[i].getFullIdentifier()));\n+                if (i < tables.length - 1)\n+                    buf.append(\", \");\n+            }\n+            return new String[] { buf.toString() };\n+        }\n+    }\n+\n+    @Override\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\n+        boolean subselect) {\n+        buf.append(\" LIMIT \").appendValue(start).append(\", \");\n+        if (end == Long.MAX_VALUE)\n+            buf.appendValue(Long.MAX_VALUE);\n+        else\n+            buf.appendValue(end - start);\n+    }\n+\n+    @Override\n+    protected Column newColumn(ResultSet colMeta)\n+        throws SQLException {\n+        Column col = super.newColumn(colMeta);\n+        if (col.isNotNull() && \"0\".equals(col.getDefaultString()))\n+            col.setDefaultString(null);\n+        return col;\n+    }\n+\n+    @Override\n+    public Object getBlobObject(ResultSet rs, int column, JDBCStore store)\n+        throws SQLException {\n+        // if the user has set a get-blob strategy explicitly or the driver\n+        // does not automatically deserialize, delegate to super\n+        if (useGetBytesForBlobs || useGetObjectForBlobs || !driverDeserializesBlobs)\n+            return super.getBlobObject(rs, column, store);\n+\n+        // most mysql drivers deserialize on getObject\n+        return rs.getObject(column);\n+    }\n+\n+    @Override\n+    public int getPreferredType(int type) {\n+        if (type == Types.CLOB && !useClobs)\n+            return Types.LONGVARCHAR;\n+        return super.getPreferredType(type);\n+    }\n+    \n+    /**\n+     * Append XML comparison.\n+     * \n+     * @param buf the SQL buffer to write the comparison\n+     * @param op the comparison operation to perform\n+     * @param lhs the left hand side of the comparison\n+     * @param rhs the right hand side of the comparison\n+     * @param lhsxml indicates whether the left operand maps to XML\n+     * @param rhsxml indicates whether the right operand maps to XML\n+     */\n+    @Override\n+    public void appendXmlComparison(SQLBuffer buf, String op, FilterValue lhs,\n+        FilterValue rhs, boolean lhsxml, boolean rhsxml) {\n+        super.appendXmlComparison(buf, op, lhs, rhs, lhsxml, rhsxml);\n+        if (lhsxml)\n+            appendXmlValue(buf, lhs);\n+        else\n+            lhs.appendTo(buf);\n+        buf.append(\" \").append(op).append(\" \");\n+        if (rhsxml)\n+            appendXmlValue(buf, rhs);\n+        else\n+            rhs.appendTo(buf);\n+    }\n+    \n+    /**\n+     * Append XML column value so that it can be used in comparisons.\n+     * \n+     * @param buf the SQL buffer to write the value\n+     * @param val the value to be written\n+     */\n+    private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n+        buf.append(\"ExtractValue(\").\n+            append(val.getColumnAlias(val.getFieldMapping().getColumns()[0])).\n+            append(\",'/*/\");\n+        val.appendTo(buf);\n+        buf.append(\"')\");\n+    }\n+    \n+    @Override\n+    public int getBatchFetchSize(int batchFetchSize) {\n+        return Integer.MIN_VALUE;\n+    }\n+\n+    /**\n+     * Check to see if we have set the {@link #SELECT_HINT} in the\n+     * fetch configuration, and if so, append the MySQL hint after the\n+     * \"SELECT\" part of the query.\n+     */\n+    @Override\n+    public String getSelectOperation(JDBCFetchConfiguration fetch) {\n+        Object hint = fetch == null ? null : fetch.getHint(SELECT_HINT);\n+        String select = \"SELECT\";\n+        if (hint != null)\n+            select += \" \" + hint;\n+        return select;\n+    }\n+    \n+    @Override\n+    protected Collection<String> getSelectTableAliases(Select sel) {\n+        Set<String> result = new HashSet<String>();\n+        List<String> selects = sel.getIdentifierAliases();\n+        for (String s : selects) {\n+            String tableAlias = s.substring(0, s.indexOf('.'));\n+            result.add(tableAlias);\n+        }\n+        return result;\n+    }\n+    \n+    @Override\n+    protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n+        int state = super.matchErrorState(errorStates, ex);\n+        \n+        if (state == StoreException.GENERAL && \n+                ex.getNextException() != null &&\n+                \"JZ0002\".equalsIgnoreCase(ex.getNextException().getSQLState())) {\n+            if (conf != null && conf.getLockTimeout() != -1) {\n+                state = StoreException.LOCK;\n+            } else {\n+                state = StoreException.QUERY;\n+            }\n+        }\n+\n+        return state;\n+    }\n+\n+    @Override\n+    public boolean isFatalException(int subtype, SQLException ex) {\n+        if ((subtype == StoreException.LOCK  && ex.getErrorCode() == 1205)\n+          ||(subtype == StoreException.LOCK  && \"JZ0002\".equalsIgnoreCase(ex.getSQLState()))\n+          ||(subtype == StoreException.QUERY && ex.getErrorCode() == 1317)) {\n+            return false;\n+        }\n+        if (ex.getErrorCode() == 0 && ex.getSQLState() == null)\n+            return false;\n+        return super.isFatalException(subtype, ex);\n+    }\n+\n+    /**\n+     * OPENJPA-740 Special case for MySql special column types,\n+     * like LONGTEXT, LONGBLOG etc..\n+     * @see org.apache.openjpa.jdbc.sql.DBDictionary#getTypeName(org.apache.openjpa.jdbc.schema.Column)\n+     */\n+    @Override\n+    public String getTypeName(Column col) {\n+        // handle blobs differently, if the DBItentifierType is NULL (e.g. no column definition is set). \n+        if (col.getType() == Types.BLOB && col.getTypeIdentifier().getType() == DBIdentifierType.NULL) {\n+            if (col.getSize() <= 0)   // unknown size\n+                return blobTypeName;  // return old default of 64KB\n+            else if (col.getSize() <= 255)\n+                return tinyBlobTypeName;\n+            else if (col.getSize() <= 65535)\n+                return blobTypeName;  // old default of 64KB\n+            else if (col.getSize() <= 16777215)\n+                return mediumBlobTypeName;\n+            else\n+                return longBlobTypeName;\n+        } else {\n+            return super.getTypeName(col);\n+        }\n+    }\n+\n+    @Override\n+    public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n+        FilterValue start) {\n+        buf.append(\"LOCATE(\");\n+        find.appendTo(buf);\n+        buf.append(\", \");\n+        str.appendTo(buf);\n+        if (start != null) {\n+            buf.append(\", \");\n+            start.appendTo(buf);\n+        }\n+        buf.append(\")\");\n+    }\n+}"},{"sha":"51aa9796bf35f2904f54529eb11cf00a5c809318","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -206,7 +206,8 @@ ConnectionDriverName-values: org.hsqldb.jdbcDriver,org.hsql.jdbcDriver,\\\n \tweblogic.jdbc.mssqlserver4.Driver,com.mysql.jdbc.DatabaseMetaData,\\\n \torg.gjt.mm.mysql.Driver,com.sap.dbtech.jdbc.DriverSapDB,\\\n \tcom.sybase.jdbc2.jdbc.SybDriver,com.sybase.jdbc.SybDriver,\\\n-\tcom.internetcds.jdbc.tds.Driver,weblogic.jdbc.pool.Driver\n+\tcom.internetcds.jdbc.tds.Driver,weblogic.jdbc.pool.Driver,\\\n+\torg.mariadb.jdbc.Driver,org.mariadb.jdbc.DatabaseMetaData\n ConnectionURL-values: jdbc:JSQLConnect://<hostname>/database=<database>,\\\n \tjdbc:cloudscape:<database>;create=true,\\\n \tjdbc:twtds:sqlserver://<hostname>/<database>,\\"},{"sha":"40ac3c1cb38603fd1bfc34942d5789937e439dbd","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -162,7 +162,16 @@\n \t\t<optimistic></optimistic>\n \t\t<query>70100</query>\n \t</dictionary>\n-\t\n+\n+    <dictionary class=\"org.apache.openjpa.jdbc.sql.MariaDBDictionary\">\n+        <lock>41000</lock>\n+        <referential-integrity>630,839,840,893,1062,1169,1215,1216,1217,1451,1452,1557</referential-integrity>\n+        <object-exists>23000</object-exists>\n+        <object-not-found></object-not-found>\n+        <optimistic></optimistic>\n+        <query>70100</query>\n+    </dictionary>\n+    \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.OracleDictionary\">\n \t\t<lock>42000,61000,72000</lock>\n \t\t<referential-integrity>1,1400,1722,2291,2292</referential-integrity>"},{"sha":"4f7e800d256e945464b7e70831c0edb05ee8f9a4","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -118,6 +118,35 @@\n                 <dbcp.minIdle>0</dbcp.minIdle>\n             </properties>\n         </profile>\n+        \n+        <!-- Profile for testing with MariaDB DB -->\n+        <profile>\n+            <id>test-mariadb</id>\n+            <activation>\n+                <property>\n+                    <name>test-mariadb</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>mariadb</groupId>\n+                    <artifactId>mariadb-connector-java</artifactId>\n+                    <version>${mariadb.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <connection.driver.name>org.mariadb.jdbc.Driver</connection.driver.name>\n+                <!--<connection.url>jdbc:mysql://localhost/OPENJPA</connection.url>-->\n+                <connection.url>${openjpa.mariadb.url}</connection.url>\n+                <connection.username>${openjpa.mariadb.username}</connection.username>\n+                <connection.password>${openjpa.mariadb.password}</connection.password>\n+                <jdbc.DBDictionary />\n+                <!-- DBCP overrides for MariaDB testing -->\n+                <dbcp.maxIdle>0</dbcp.maxIdle>\n+                <dbcp.minIdle>0</dbcp.minIdle>\n+            </properties>\n+        </profile>\n \n         <!-- Profile for testing with PostgreSQL DB -->\n         <profile>"},{"sha":"40b0d3569571f40009cd228ef958c7e156493ef0","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.conf.Specification;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n@@ -127,6 +128,7 @@ public boolean afterSpecificationSet(Configuration c) {\n         _hints.add(\"openjpa.FetchPlan.ResultSetType\");\n         _hints.add(\"openjpa.FetchPlan.SubclassFetchMode\");\n         \n+        _hints.add(MariaDBDictionary.SELECT_HINT);\n         _hints.add(MySQLDictionary.SELECT_HINT);\n         _hints.add(OracleDictionary.SELECT_HINT);\n         "},{"sha":"ab77d678a635d0ae5b4e4f0a85dcd15c4b3c9dda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryHints.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryHints.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryHints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryHints.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n \n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.kernel.QueryHints;\n@@ -51,6 +52,7 @@ public void setUp() {\n     public void testSupportedHintsContainProductDerivationHints() {\n         assertSupportedHint(OracleDictionary.SELECT_HINT, true);\n         assertSupportedHint(MySQLDictionary.SELECT_HINT, true);\n+        assertSupportedHint(MariaDBDictionary.SELECT_HINT, true);\n     }\n     \n     public void testSupportedHintsContainFetchPlanHints() {"},{"sha":"e851bdd934ff1369953c0a4817c8b148642ba096","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -31,6 +31,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.DataCachePCData;\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.jdbc.sql.SQLServerDictionary;"},{"sha":"85420ada421318f2f7818d396d4cc16251726623","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestBlobColumnType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestBlobColumnType.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestBlobColumnType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestBlobColumnType.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -41,7 +42,7 @@ public void setUp() throws Exception {\n         // need to do this without BlobColumnEntity.class since it contains a column definition which might\n         // not work with all databases. \n         super.setUp((Object) null);\n-        if (!(getDBDictionary() instanceof MySQLDictionary)) {\n+        if (!(getDBDictionary() instanceof MySQLDictionary || getDBDictionary() instanceof MariaDBDictionary)) {\n             // normal teardown will take care of the EMF.\n             return;\n         }"},{"sha":"ec17f0a640bb30ed57061ab811a3546c6394f428","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -106,6 +106,7 @@\n         EMPRESS,\n         HYPERSONIC,\n         POSTGRESQL,\n+        MARIADB,\n         MYSQL,\n         SQLSERVER,\n         DB2,"},{"sha":"400a4e2c0c5f2d0c16c35e1c19aa933aab4b5477","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -37,6 +37,7 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.lib.jdbc.JDBCListener;\n@@ -186,7 +187,7 @@ void executeAndCompareSQL(String jpql, Query cQ, Query jQ, String expectedSQL) {\n                 cSQL.size());\n         }\n \n-        if (!(dict instanceof DerbyDictionary || dict instanceof MySQLDictionary))\n+        if (!(dict instanceof DerbyDictionary || dict instanceof MySQLDictionary || dict instanceof MariaDBDictionary))\n             return;\n \n         for (int i = 0; i < jSQL.size(); i++) {\n@@ -219,7 +220,7 @@ void executeAndCompareSQL(String jpql, String expectedSQL) {\n             fail(\"JPQL \" + jpql + \" failed to execute\\r\\n\" + w);\n         }\n \n-        if (!(dict instanceof DerbyDictionary || dict instanceof MySQLDictionary))\n+        if (!(dict instanceof DerbyDictionary || dict instanceof MySQLDictionary || dict instanceof MariaDBDictionary))\n             return;\n \n         for (int i = 0; i < jSQL.size(); i++) {\n@@ -242,7 +243,7 @@ void executeAndCompareSQL(Query jQ, String expectedSQL) {\n             fail(w.toString());\n         }\n \n-        if (!(dict instanceof DerbyDictionary || dict instanceof MySQLDictionary))\n+        if (!(dict instanceof DerbyDictionary || dict instanceof MySQLDictionary || dict instanceof MariaDBDictionary))\n             return;\n \n         String jSql = jSQL.get(0).trim();"},{"sha":"ac3f0a78f72e340cd88949739afcf6b9ce474e13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n@@ -35,6 +36,7 @@\n     @Override\n     public void setUp() throws Exception {\n \n+        setUnsupportedDatabases(MariaDBDictionary.class);\n         setUnsupportedDatabases(MySQLDictionary.class);\n         if (isTestsDisabled())\n             return;"},{"sha":"1a9360c2c6c3632f6c6c6e576a445f60efc1f13f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -24,6 +24,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n@@ -42,6 +43,7 @@\n     @Override\n     public void setUp() throws Exception {\n         \n+        setUnsupportedDatabases(MariaDBDictionary.class);\n         setUnsupportedDatabases(MySQLDictionary.class);\n         if (isTestsDisabled())\n             return;"},{"sha":"4506a6553fac987bbf599b9611b7c9d76363f288","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -116,6 +116,18 @@ public void testSQLServerDynamicSchema() {\n         closeEMF(sqlserverEMF);\n     }\n \n+    \n+    public void testMariaDBDynamicSchema() {\n+        OpenJPAEntityManagerFactorySPI mysqlEMF = \n+            createEMF(EntityVeryLongNames.class, EntityReservedWords.class,\n+                \"openjpa.ConnectionURL\", \n+                \"jdbc:mysql://host1:1,host2:2/database?p1=v1&p2=v2\",\n+                \"openjpa.jdbc.SynchronizeMappings\", \"export\", \n+                \"openjpa.jdbc.SchemaFactory\", \"dynamic\", RETAIN_DATA);\n+        validateTableName( mysqlEMF );\n+        closeEMF(mysqlEMF);\n+    }\n+    \n \n     public void testMySQLDynamicSchema() {\n         OpenJPAEntityManagerFactorySPI mysqlEMF = "},{"sha":"f607557ba812b0c378a547d6133b78282202be6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.H2Dictionary;\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n@@ -46,6 +47,7 @@ public void setUp() {\n         // Need to skip tests on some databases.\n         // See createSchemas() comment at the bottom\n         setUnsupportedDatabases(\n+                MariaDBDictionary.class,\n                 MySQLDictionary.class,\n                 OracleDictionary.class,\n                 SQLServerDictionary.class, "},{"sha":"3efc4c0edcd6823afdfb787a805ebaaf20990dfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestHintedQuery.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestHintedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestHintedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestHintedQuery.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -25,6 +25,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.persistence.jdbc.query.domain.TimeKeeper;\n@@ -47,9 +48,11 @@ public void testHintedQuery() {\n         em.getTransaction().commit();\n \n         String jpql = \"SELECT tk FROM TimeKeeper tk\";\n+        String mariadbHint = \"SQL_NO_CACHE\";\n         String mysqlHint = \"SQL_NO_CACHE\";\n         String oracleHint = \"/*+ first_rows(100) */\";\n         Query query = em.createQuery(jpql);\n+        query.setHint(MariaDBDictionary.SELECT_HINT, mariadbHint);\n         query.setHint(MySQLDictionary.SELECT_HINT, mysqlHint);\n         query.setHint(OracleDictionary.SELECT_HINT, oracleHint);\n         List keepers = query.getResultList();\n@@ -59,6 +62,10 @@ public void testHintedQuery() {\n         // Other dictionaries should ignore them.\n         DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration())\n             .getDBDictionaryInstance();\n+        if (dict instanceof MariaDBDictionary) {\n+            assertContainsSQL(\"SELECT \" + mariadbHint + \" \");\n+            return;\n+        }\n         if (dict instanceof MySQLDictionary) {\n             assertContainsSQL(\"SELECT \" + mysqlHint + \" \");\n             return;\n@@ -67,6 +74,7 @@ public void testHintedQuery() {\n             assertContainsSQL(\"SELECT \" + oracleHint + \" \");\n             return;\n         }\n+        assertNotSQL(\".*\" + mariadbHint + \".*\");\n         assertNotSQL(\".*\" + mysqlHint + \".*\");\n         assertNotSQL(\".*\" + oracleHint + \".*\");\n     }"},{"sha":"16e12ab2938b6d5579a58267c150622e608bf688","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -56,7 +56,8 @@ public void setUp()\n         // kodo uses\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         _fks = conf.getDBDictionaryInstance().supportsForeignKeys\n-            && getCurrentPlatform() != AbstractTestCase.Platform.MYSQL;\n+            && getCurrentPlatform() != AbstractTestCase.Platform.MYSQL\n+            && getCurrentPlatform() != AbstractTestCase.Platform.MARIADB;\n \n         LazySchemaFactory factory = new LazySchemaFactory();\n         factory.setConfiguration(conf);"},{"sha":"eeafdb65e1e1f8471f099621bfa98fc307d1ef08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraint.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraint.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -27,6 +27,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.jdbc.SQLSniffer;\n@@ -78,7 +79,7 @@ private boolean supportsUniqueConstraints() {\n     }\n \n     private String getUniqueConstraint(String unique) {\n-        if (dict instanceof MySQLDictionary) {\n+        if (dict instanceof MySQLDictionary || dict instanceof MariaDBDictionary) {\n             //CREATE TABLE N_UNIQUE_A (aid INTEGER NOT NULL, f1 INTEGER NOT NULL, f2 INTEGER NOT NULL, \n             //f3 INTEGER NOT NULL, f4 INTEGER NOT NULL, f5 INTEGER, f6 INTEGER, PRIMARY KEY (aid), \n             //UNIQUE U_N_UNQU__F1 (f1), "},{"sha":"8a2056f026a926fd2dd21045f945147866403e14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraintWithXMLDescriptor.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraintWithXMLDescriptor.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraintWithXMLDescriptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestNamedUniqueConstraintWithXMLDescriptor.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -25,6 +25,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.jdbc.SQLSniffer;\n@@ -79,7 +80,7 @@ private boolean supportsUniqueConstraints() {\n     }\n \n     private String getUniqueConstraint(String unique) {\n-        if (dict instanceof MySQLDictionary) {\n+        if (dict instanceof MySQLDictionary || dict instanceof MariaDBDictionary) {\n             //CREATE TABLE N_UNIQUE_A (aid INTEGER NOT NULL, f1 INTEGER NOT NULL, f2 INTEGER NOT NULL, \n             //f3 INTEGER NOT NULL, f4 INTEGER NOT NULL, f5 INTEGER, f6 INTEGER, PRIMARY KEY (aid), \n             //UNIQUE U_N_UNQU__F1 (f1), "},{"sha":"d328e6dabcd13881e6cafc2f16989493b1c5f287","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -122,6 +122,7 @@ public void testFloatMax() {\n         } catch (Exception e) {\n             bug(EnumSet.of(AbstractTestCase.Platform.POSTGRESQL,\n                 AbstractTestCase.Platform.DB2,\n+                AbstractTestCase.Platform.MARIADB,\n                 AbstractTestCase.Platform.MYSQL,\n                 AbstractTestCase.Platform.DERBY), 494, e,\n                 \"Some datastores cannot store Float.MAX_VALUE\");\n@@ -142,7 +143,7 @@ public void testFloatMin() {\n                 AbstractTestCase.Platform.DERBY), 494, e,\n                 \"Some databases cannot store Float.MIN_VALUE\");\n         } catch (AssertionFailedError e) {\n-            bug(EnumSet.of(AbstractTestCase.Platform.MYSQL,\n+            bug(EnumSet.of(AbstractTestCase.Platform.MARIADB, AbstractTestCase.Platform.MYSQL,\n                 AbstractTestCase.Platform.SQLSERVER), 494, e,\n                 \"Some databases cannot store Float.MIN_VALUE\");\n         }\n@@ -167,6 +168,7 @@ public void testFloatNegativeInfinity() {\n         } catch (Exception e) {\n             bug(EnumSet.of(AbstractTestCase.Platform.POINTBASE,\n                 AbstractTestCase.Platform.POSTGRESQL,\n+                AbstractTestCase.Platform.MARIADB,\n                 AbstractTestCase.Platform.MYSQL,\n                 AbstractTestCase.Platform.DB2,\n                 AbstractTestCase.Platform.ORACLE,\n@@ -186,6 +188,7 @@ public void testFloatPostivieInfinity() {\n         } catch (Exception e) {\n             bug(EnumSet.of(AbstractTestCase.Platform.POINTBASE,\n                 AbstractTestCase.Platform.POSTGRESQL,\n+                AbstractTestCase.Platform.MARIADB,\n                 AbstractTestCase.Platform.MYSQL,\n                 AbstractTestCase.Platform.DB2,\n                 AbstractTestCase.Platform.ORACLE,\n@@ -204,6 +207,7 @@ public void testDoubleMax() {\n                 new Double(Double.MAX_VALUE));\n         } catch (Exception e) {\n             bug(EnumSet.of(AbstractTestCase.Platform.POINTBASE,\n+                AbstractTestCase.Platform.MARIADB,\n                 AbstractTestCase.Platform.MYSQL,\n                 AbstractTestCase.Platform.ORACLE,\n                 AbstractTestCase.Platform.POSTGRESQL,\n@@ -231,7 +235,7 @@ public void testDoubleMin() {\n                 AbstractTestCase.Platform.DERBY), 494, e,\n                 \"Some databases cannot store Double.MIN_VALUE\");\n         } catch (AssertionFailedError e) {\n-            bug(AbstractTestCase.Platform.MYSQL, 494, e,\n+            bug(EnumSet.of(AbstractTestCase.Platform.MARIADB, AbstractTestCase.Platform.MYSQL), 494, e,\n                 \"Some databases cannot store Double.MIN_VALUE\");\n         }\n     }"},{"sha":"a67b969e8e419ae1c964e78345231b62104de4ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -195,7 +195,7 @@ public void testDoubleMin() {\n                 AbstractTestCase.Platform.DERBY), 494, e,\n                 \"Some databases cannot store Double.MIN_VALUE\");\n         } catch (AssertionFailedError e) {\n-            bug(AbstractTestCase.Platform.MYSQL, 494, e,\n+            bug(EnumSet.of(AbstractTestCase.Platform.MARIADB, AbstractTestCase.Platform.MYSQL), 494, e,\n                     \"Some databases cannot store Double.MIN_VALUE\");\n         }\n     }"},{"sha":"3c413ab226be4d094701d262ad4ac2edcc4b9ab7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -124,7 +124,7 @@ public void testOrderByAggregate() {\n             \"from AllFieldTypes o\"\n             + \" group by o.intField order by sum(o.shortField) asc\");\n         prepareQuery(q);\n-        // this might fail in MySQL\n+        // this might fail in MySQL/MariaDB\n         List res = q.getResultList();\n         assertEquals(2, res.size());\n         Iterator itr = res.iterator();"},{"sha":"35994cddc0496ea4961d7774b756fd7dcbc72a84","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -26,6 +26,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n import org.apache.openjpa.persistence.query.Customer.CreditRating;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n@@ -255,7 +256,7 @@ public void testSubquery() {\n         // this at the bottom of the UPDATE documentation(http://dev.mysql.com/doc/refman/5.0/en/update.html): \n         // Currently, you cannot update a table and select from the same table in a subquery.\n         \n-        if (dict instanceof MySQLDictionary)\n+        if (dict instanceof MySQLDictionary || dict instanceof MariaDBDictionary)\n             return;\n         \n         em.getTransaction().begin();"},{"sha":"652df16b82fa552c682213921a5c3a54aae7d641","filename":"openjpa-persistence-locking/pom.xml","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-locking/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-locking/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/pom.xml?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -127,6 +127,34 @@\n                 <jdbc.DBDictionary />\n             </properties>\n         </profile>\n+        \n+        <!-- Profile for testing with MariaDB DB -->\n+        <profile>\n+            <id>test-mariadb</id>\n+            <activation>\n+                <property>\n+                    <name>test-mariadb</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>mariadb</groupId>\n+                    <artifactId>mariadb-connector-java</artifactId>\n+                    <version>${mariadb.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <connection.driver.name>org.mariadb.jdbc.Driver</connection.driver.name>\n+                <connection.url>${openjpa.mariadb.url}</connection.url>\n+                <connection.username>${openjpa.mariadb.username}</connection.username>\n+                <connection.password>${openjpa.mariadb.password}</connection.password>\n+                <!-- DBCP overrides for MariaDB testing -->\n+                <dbcp.maxIdle>0</dbcp.maxIdle>\n+                <dbcp.minIdle>0</dbcp.minIdle>\n+                <jdbc.DBDictionary />\n+            </properties>\n+        </profile>\n \n         <!-- Profile for testing with PostgreSQL DB -->\n         <profile>"},{"sha":"4a4e9a24b4c5a57962455b36c3b809d51688e2a7","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -121,8 +121,8 @@ private void cleanupDB() {\n     }\n \n     protected enum DBType {\n-        access, db2, derby, empress, foxpro, h2, hsql, informix, ingres, jdatastore, mysql, oracle, pointbase, postgres,\n-        sqlserver, sybase\n+        access, db2, derby, empress, foxpro, h2, hsql, informix, ingres, jdatastore, mariadb, mysql, oracle, pointbase,\n+        postgres, sqlserver, sybase\n     };\n \n     protected DBType getDBType(EntityManager em) {"},{"sha":"0e5795d0b0af4f3e3914447fd1c64bce16cf6636","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -1040,8 +1040,8 @@ public synchronized void run() {\n     }\n \n     protected enum DBType {\n-        access, db2, derby, empress, foxpro, h2, hsql, informix, ingres, jdatastore, mysql, oracle, pointbase, postgres,\n-        sqlserver, sybase\n+        access, db2, derby, empress, foxpro, h2, hsql, informix, ingres, jdatastore, mariadb, mysql, oracle, pointbase,\n+        postgres, sqlserver, sybase\n     };\n \n     protected DBType getDBType(EntityManager em) {"},{"sha":"907713f0a4da4e5ce1397a329c1f7bad95835c17","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"modified","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=1b1b60c9a7d63268dc26c1ff5dc601a352cee1c9","patch":"@@ -156,6 +156,29 @@\n       </properties>\n    </persistence-unit>\n    \n+   <persistence-unit name=\"mariadb\">\n+      <properties>\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.mariadb.jdbc.Driver\"/>\n+\n+         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\n+         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\"        value=\"root\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"org.mariadb.jdbc.Driver\"/>\n+         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql://localhost/slice1\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"org.mariadb.jdbc.Driver\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql://localhost/slice2\"/>\n+         \n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+            <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n+      </properties>\n+   </persistence-unit>\n+   \n    <persistence-unit name=\"replication\">\n    \t  <class>org.apache.openjpa.slice.ReplicatedParent</class>\n    \t  <class>org.apache.openjpa.slice.ReplicatedChild</class>\n@@ -231,6 +254,27 @@\n       </properties>\n    </persistence-unit>\n    \n+   <persistence-unit name=\"car.mariadb\">\n+      <properties>\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.mariadb.jdbc.Driver\"/>\n+\n+         <property name=\"openjpa.slice.Names\" value=\"BMW,Honda,Ford\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\"        value=\"root\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.slice.BMW.ConnectionURL\" value=\"jdbc:mysql://localhost/bmw\"/>\n+         <property name=\"openjpa.slice.Honda.ConnectionURL\" value=\"jdbc:mysql://localhost/ford\"/>\n+         <property name=\"openjpa.slice.Ford.ConnectionURL\" value=\"jdbc:mysql://localhost/honda\"/>\n+         \n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=native)\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+         <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n+      </properties>\n+   </persistence-unit>\n+   \n    <persistence-unit name=\"perf.mysql.slice\">\n    \t\t<class>org.apache.openjpa.slice.Person</class>\n    \t\t<class>org.apache.openjpa.slice.Address</class>\n@@ -277,4 +321,51 @@\n          <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n       </properties>\n    </persistence-unit>\n+   \n+   <persistence-unit name=\"perf.mariadb.slice\">\n+        <class>org.apache.openjpa.slice.Person</class>\n+        <class>org.apache.openjpa.slice.Address</class>\n+        <class>org.apache.openjpa.slice.Country</class>\n+        \n+      <properties>\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.commons.dbcp.BasicDataSource\"/>\n+\n+         <property name=\"openjpa.slice.Names\" value=\"S1,S2,S3,S4\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\"        value=\"root\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.slice.S1.ConnectionProperties\" value=\"DriverClassName=org.mariadb.jdbc.Driver,Url=jdbc:mysql://localhost/S1,MaxActive=4\"/>\n+         <property name=\"openjpa.slice.S2.ConnectionProperties\" value=\"DriverClassName=org.mariadb.jdbc.Driver,Url=jdbc:mysql://localhost/S2,MaxActive=4\"/>\n+         <property name=\"openjpa.slice.S3.ConnectionProperties\" value=\"DriverClassName=org.mariadb.jdbc.Driver,Url=jdbc:mysql://localhost/S3,MaxActive=4\"/>\n+         <property name=\"openjpa.slice.S4.ConnectionProperties\" value=\"DriverClassName=org.mariadb.jdbc.Driver,Url=jdbc:mysql://localhost/S4,MaxActive=4\"/>\n+         \n+         <property name=\"openjpa.jdbc.DBDictionary\"        value=\"mariadb\"/>\n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+         <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n+      </properties>\n+   </persistence-unit>\n+   <persistence-unit name=\"perf.mariadb.mono\">\n+        <class>org.apache.openjpa.slice.Person</class>\n+        <class>org.apache.openjpa.slice.Address</class>\n+        <class>org.apache.openjpa.slice.Country</class>\n+        \n+      <properties>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.commons.dbcp.BasicDataSource\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\"        value=\"root\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.ConnectionProperties\" value=\"DriverClassName=org.mariadb.jdbc.Driver,Url=jdbc:mysql://localhost/S,MaxActive=4\"/>\n+         \n+         <property name=\"openjpa.jdbc.DBDictionary\"        value=\"mariadb\"/>\n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+         <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n+      </properties>\n+   </persistence-unit>\n </persistence>"}]}

