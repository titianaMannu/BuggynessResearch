{"sha":"1b20902b507ca7e7209132297266968a92e0d472","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiMjA5MDJiNTA3Y2E3ZTcyMDkxMzIyOTcyNjY5NjhhOTJlMGQ0NzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T03:42:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T03:42:50Z"},"message":"OPENJPA-1565,OPENJPA-1578:\nModify tests to raise correct lock/query exception\nFill in details in exception\nUse retreive mode while initializing not store mode \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924626 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d83b262e909bb2e80910d7d4dca62463d7e78b6","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d83b262e909bb2e80910d7d4dca62463d7e78b6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b20902b507ca7e7209132297266968a92e0d472","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b20902b507ca7e7209132297266968a92e0d472","html_url":"https://github.com/apache/openjpa/commit/1b20902b507ca7e7209132297266968a92e0d472","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b20902b507ca7e7209132297266968a92e0d472/comments","author":null,"committer":null,"parents":[{"sha":"976508eed24aed7dfdbb9b4894cb3bdc6f938e8e","url":"https://api.github.com/repos/apache/openjpa/commits/976508eed24aed7dfdbb9b4894cb3bdc6f938e8e","html_url":"https://github.com/apache/openjpa/commit/976508eed24aed7dfdbb9b4894cb3bdc6f938e8e"}],"stats":{"total":255,"additions":164,"deletions":91},"files":[{"sha":"5982e03f766e2b9bbd9cd00f9e92d4032fc3f2ad","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -31,6 +31,7 @@\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.kernel.VersionLockManager;\n@@ -140,7 +141,8 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n         } catch (SQLException se) {\n             LockException e = new LockException(sm.getPersistenceCapable(), timeout, level);\n             e.setCause(se);\n-            e.setFatal(dict.isFatalException(StoreException.LOCK, se));\n+            e.setFatal(dict.isFatalException(StoreException.LOCK, se) \n+                    || level >= MixedLockLevels.LOCK_PESSIMISTIC_READ);\n             throw e;\n         } finally {\n             if (stmnt != null)"},{"sha":"06bfdd8bb2b8ea2cb31842189c5fb81f447c123c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -129,8 +129,7 @@ public static OpenJPAException getStore(String msg, SQLException se,\n     /**\n      * Convert the specified exception into a {@link StoreException}.\n      */\n-    public static OpenJPAException getStore(String msg, SQLException se,\n-        Object failed, DBDictionary dict, int level) {\n+    public static OpenJPAException getStore(String msg, SQLException se, Object failed, DBDictionary dict, int level) {\n         if (msg == null)\n             msg = se.getClass().getName();\n         SQLException[] ses = getSQLExceptions(se);"},{"sha":"039b965df88d7eba5e83b7b3f8d59426a41f08cf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -326,7 +326,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n         boolean fromDatabase; \n         DataCache cache = _mgr.selectCache(sm);\n         DataCachePCData data = null;\n-        boolean updateCache = _ctx.getFetchConfiguration().getCacheStoreMode() != DataCacheStoreMode.BYPASS \n+        boolean updateCache = _ctx.getFetchConfiguration().getCacheRetrieveMode() != DataCacheRetrieveMode.BYPASS\n                             && _ctx.getPopulateDataCache();\n         if (cache == null || sm.isEmbedded() \n             || _ctx.getFetchConfiguration().getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS"},{"sha":"82f0394562a083d997188d664ab6044e70457986","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":50,"deletions":29,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -30,6 +30,8 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n ///////////////////////////////////////////////////////////////\n@@ -103,6 +105,25 @@ public boolean equals(Object other) {\n     protected RuntimeException translate(RuntimeException re) {\n         return (_trans == null) ? re : _trans.translate(re);\n     }\n+    \n+    /**\n+     * Translate the exception with the failed object.\n+     * \n+     * @param re exception raised by the delegate.\n+     * @param failed the context that failed.\n+     * \n+     * @return the translated exception. If the given input exception had not set \n+     * the failed instance, then sets the given instance as the failed context.\n+     */\n+    protected RuntimeException translate(RuntimeException re, Object failed) {\n+        if (re instanceof OpenJPAException) {\n+            Object o = ((OpenJPAException) re).getFailedObject();\n+            if (o == null || \"null\".equals(o)) {\n+                ((OpenJPAException) re).setFailedObject(Exceptions.toString(failed));\n+            }\n+        }\n+        return (_trans == null) ? re : _trans.translate(re);\n+    }\n \n     public Broker getBroker() {\n         return this;\n@@ -200,7 +221,7 @@ public Object find(Object oid, boolean validate, FindCallbacks call) {\n         try {\n             return _broker.find(oid, validate, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oid);\n         }\n     }\n \n@@ -209,15 +230,15 @@ public Object find(Object oid, boolean validate, FindCallbacks call) {\n         try {\n             return _broker.findAll(oids, validate, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oids);\n         }\n     }\n \n     public Object findCached(Object oid, FindCallbacks call) {\n         try {\n             return _broker.findCached(oid, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oid);\n         }\n     }\n \n@@ -226,7 +247,7 @@ public Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         try {\n             return _broker.find(oid, fetch, exclude, edata, flags);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oid);\n         }\n     }\n \n@@ -235,7 +256,7 @@ public Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         try {\n             return _broker.findAll(oids, fetch, exclude, edata, flags);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, oids);\n         }\n     }\n \n@@ -1071,63 +1092,63 @@ public void delete(Object obj, OpCallbacks call) {\n         try {\n             _broker.delete(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void deleteAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.deleteAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void release(Object obj, OpCallbacks call) {\n         try {\n             _broker.release(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void releaseAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.releaseAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void refresh(Object obj, OpCallbacks call) {\n         try {\n             _broker.refresh(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void refreshAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.refreshAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void evict(Object obj, OpCallbacks call) {\n         try {\n             _broker.evict(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void evictAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.evictAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n@@ -1143,23 +1164,23 @@ public void evictAll(Extent extent, OpCallbacks call) {\n         try {\n             _broker.evictAll(extent, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, extent.getElementType());\n         }\n     }\n \n     public Object detach(Object obj, OpCallbacks call) {\n         try {\n             return _broker.detach(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public Object[] detachAll(Collection objs, OpCallbacks call) {\n         try {\n             return _broker.detachAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n@@ -1183,7 +1204,7 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         try {\n             return _broker.attach(obj, copyNew, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n@@ -1192,7 +1213,7 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         try {\n             return _broker.attachAll(objs, copyNew, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n@@ -1201,7 +1222,7 @@ public void transactional(Object pc, boolean updateVersion, OpCallbacks\n         try {\n             _broker.transactional(pc, updateVersion, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, pc);\n         }\n     }\n \n@@ -1210,47 +1231,47 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n         try {\n             _broker.transactionalAll(objs, updateVersion, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void nontransactional(Object pc, OpCallbacks call) {\n         try {\n             _broker.nontransactional(pc, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, pc);\n         }\n     }\n \n     public void nontransactionalAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.nontransactionalAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public Extent newExtent(Class cls, boolean subs) {\n         try {\n             return _broker.newExtent(cls, subs);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, cls);\n         }\n     }\n \n     public Query newQuery(String language, Class cls, Object query) {\n         try {\n             return _broker.newQuery(language, cls, query);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, query);\n         }\n     }\n \n     public Query newQuery(String language, Object query) {\n         try {\n             return _broker.newQuery(language, query);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, query);\n         }\n     }\n \n@@ -1274,15 +1295,15 @@ public void lock(Object obj, int level, int timeout, OpCallbacks call) {\n         try {\n             _broker.lock(obj, level, timeout, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n     public void lock(Object obj, OpCallbacks call) {\n         try {\n             _broker.lock(obj, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, obj);\n         }\n     }\n \n@@ -1291,15 +1312,15 @@ public void lockAll(Collection objs, int level, int timeout,\n         try {\n             _broker.lockAll(objs, level, timeout, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n \n     public void lockAll(Collection objs, OpCallbacks call) {\n         try {\n             _broker.lockAll(objs, call);\n         } catch (RuntimeException re) {\n-            throw translate(re);\n+            throw translate(re, objs);\n         }\n     }\n "},{"sha":"13044a4e2b07a1b2417c4f70b00abee3f54122d1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -52,6 +52,7 @@ public LockException(Object failed, int timeout, int lockLevel) {\n         super(_loc.get(\"lock-timeout\", Exceptions.toString(failed), String.valueOf(timeout)));\n         setFailedObject(failed);\n         setTimeout(timeout);\n+        setLockLevel(lockLevel);\n     }\n \n     public int getSubtype() {"},{"sha":"1c7fe08448ce8db1e49882c3dc3d02a550b4048e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","status":"modified","additions":54,"deletions":14,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -15,21 +15,19 @@\n \n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n \n import javax.persistence.EntityManager;\n import javax.persistence.LockModeType;\n import javax.persistence.LockTimeoutException;\n+import javax.persistence.PessimisticLockException;\n import javax.persistence.Query;\n import javax.persistence.QueryTimeoutException;\n \n import junit.framework.AssertionFailedError;\n \n import org.apache.openjpa.persistence.exception.PObject;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.util.OpenJPAException;\n \n /**\n  * Tests that correct timeout exceptions are being thrown depending on whether it is a query or a lock operation.\n@@ -39,7 +37,7 @@\n  */\n public class TestTimeoutException extends SingleEMFTestCase {\n     private final Class<?> entityClass = PObject.class;\n-    private final ExecutorService scheduler = Executors.newCachedThreadPool();\n+\n     public void setUp() {\n         super.setUp(entityClass);\n     }\n@@ -64,7 +62,7 @@ public void testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntiti\n             query.getResultList();\n             fail(\"Expected \" + QueryTimeoutException.class.getName());\n         } catch (Throwable t) {\n-            assertError(t, QueryTimeoutException.class, timeout);\n+            assertError(t, QueryTimeoutException.class);\n         }\n         \n         assertTrue(em2.getTransaction().isActive());\n@@ -90,16 +88,39 @@ public void testLockTimeOutExceptionWhileLockingAlreadyLockedEntities() {\n             Map<String,Object> hint = new HashMap<String, Object>();\n             hint.put(\"javax.persistence.lock.timeout\", timeout);\n             em2.lock(entity2, LockModeType.PESSIMISTIC_WRITE, hint);\n-            fail(\"Expected \" + LockTimeoutException.class.getName());\n+            fail(\"Expected \" + PessimisticLockException.class.getName());\n         } catch (Throwable t) {\n-           assertError(t, LockTimeoutException.class, timeout);\n+           assertError(t, PessimisticLockException.class);\n         }\n         assertTrue(em2.getTransaction().isActive());\n         em2.getTransaction().rollback();\n         \n         em1.getTransaction().rollback();\n     }\n \n+    public void testQueryTimeOutExceptionWhileFindWithLocksOnAlreadyLockedEntities() {\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        assertNotSame(em1, em2);\n+        Object oid = createEntity(em1);\n+        \n+        em1.getTransaction().begin();\n+        Object entity = em1.find(entityClass, oid);\n+        assertNotNull(entity);\n+        em1.lock(entity, LockModeType.PESSIMISTIC_WRITE);\n+        \n+        em2.getTransaction().begin();\n+        try {\n+            em2.find(entityClass, oid, LockModeType.PESSIMISTIC_WRITE);\n+            fail(\"Expected \" + LockTimeoutException.class.getName());\n+        } catch (Throwable t) {\n+            assertError(t, LockTimeoutException.class);\n+        }\n+        \n+        assertTrue(em2.getTransaction().isActive());\n+        em2.getTransaction().rollback();\n+        em1.getTransaction().rollback();\n+    }\n     \n     public Object createEntity(EntityManager em) {\n         long id = System.nanoTime();\n@@ -113,17 +134,36 @@ public Object createEntity(EntityManager em) {\n     \n     \n     /**\n-     * Assert that an exception of proper type has been thrown by the given task within the given timeout.\n-     * @param t\n-     * @param expeceted\n+     * Assert that an exception of proper type has been thrown.\n+     * Also checks that that the exception has populated the failed object.\n+     * @param actual exception being thrown\n+     * @param expeceted type of the exception\n      */\n-    void assertError(Throwable actual, Class<? extends Throwable> expected, long timeout) {\n+    void assertError(Throwable actual, Class<? extends Throwable> expected) {\n         if (!expected.isAssignableFrom(actual.getClass())) {\n                 actual.printStackTrace();\n                 throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \" + \n                         expected.getName());\n         }\n-        \n-    }   \n+        Object failed = getFailedObject(actual);\n+        assertNotNull(\"Failed object is null\", failed);\n+        assertNotEquals(\"null\", failed);\n+    } \n+    \n+    Object getFailedObject(Throwable e) {\n+        if (e instanceof LockTimeoutException) {\n+            return ((LockTimeoutException) e).getObject();\n+        }\n+        if (e instanceof PessimisticLockException) {\n+            return ((PessimisticLockException) e).getEntity();\n+        }\n+        if (e instanceof QueryTimeoutException) {\n+            return ((QueryTimeoutException) e).getQuery();\n+        }\n+        if (e instanceof OpenJPAException) {\n+            return ((OpenJPAException) e).getFailedObject();\n+        }\n+        return null;\n+    }\n     \n }"},{"sha":"f6d8d5147d513797dc4223a044cbe01bd0572f03","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":31,"deletions":29,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -108,7 +108,7 @@ public void testFindAfterQueryWithPessimisticLocks() {\n             em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, hints);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n         } catch (Throwable e) {\n-            assertError(e, LockTimeoutException.class);\n+            assertError(e, PessimisticLockException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -155,26 +155,26 @@ public void testFindAfterQueryWithPessimisticLocks() {\n     public void testFindAfterQueryOrderByWithPessimisticLocks() {\n         EntityManager em1 = emf.createEntityManager();\n         EntityManager em2 = emf.createEntityManager();\n-        try {\n-            em1.getTransaction().begin();\n-            Query query = em1.createQuery(\"select e from Employee e where e.id < 10 order by e.id\").setFirstResult(1);\n-            // Lock all selected Employees, skip the first one, i.e should lock\n-            // Employee(2)\n-            query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-            query.setHint(\"javax.persistence.query.timeout\", 2000);\n-            List<Employee> q = query.getResultList();\n-            assertEquals(\"Expected 1 element with emplyee id=2\", q.size(), 1);\n-            assertEquals(\"Test Employee first name = 'first.2'\", q.get(0).getFirstName(), \"first.2\");\n+        em1.getTransaction().begin();\n+        Query query = em1.createQuery(\"select e from Employee e where e.id < 10 order by e.id\").setFirstResult(1);\n+        // Lock all selected Employees, skip the first one, i.e should lock\n+        // Employee(2)\n+        query.setLockMode(LockModeType.PESSIMISTIC_READ);\n+        query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        List<Employee> q = query.getResultList();\n+        assertEquals(\"Expected 1 element with emplyee id=2\", q.size(), 1);\n+        assertEquals(\"Test Employee first name = 'first.2'\", q.get(0).getFirstName(), \"first.2\");\n \n-            em2.getTransaction().begin();\n-            Map<String, Object> map = new HashMap<String, Object>();\n-            map.put(\"javax.persistence.lock.timeout\", 2000);\n-            // find Employee(2) with a lock, should block and expected a\n-            // PessimisticLockException\n+        em2.getTransaction().begin();\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"javax.persistence.lock.timeout\", 2000);\n+        // find Employee(2) with a lock, should block and expected a\n+        // PessimisticLockException\n+        try {\n             em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n-        } catch (LockTimeoutException e) {\n-            assertError(e, LockTimeoutException.class);\n+        } catch (Exception e) {\n+            assertError(e, PessimisticLockException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -183,18 +183,18 @@ public void testFindAfterQueryOrderByWithPessimisticLocks() {\n         }\n \n         em1.getTransaction().begin();\n-        Query query = em1.createQuery(\"select e.department from Employee e where e.id < 10 order by e.department.id\")\n+        query = em1.createQuery(\"select e.department from Employee e where e.id < 10 order by e.department.id\")\n                 .setFirstResult(1);\n         // Lock all selected Departments, skip the first one, i.e should\n         // lock Department(20)\n         query.setLockMode(LockModeType.PESSIMISTIC_READ);\n         query.setHint(\"javax.persistence.query.timeout\", 2000);\n-        List<Department> q = query.getResultList();\n+        List<Department> result = query.getResultList();\n         assertEquals(\"Expected 1 element with department id=20\", q.size(), 1);\n-        assertEquals(\"Test department name = 'D20'\", q.get(0).getName(), \"D20\");\n+        assertEquals(\"Test department name = 'D20'\", result.get(0).getName(), \"D20\");\n \n         em2.getTransaction().begin();\n-        Map<String, Object> map = new HashMap<String, Object>();\n+        map.clear();\n         map.put(\"javax.persistence.lock.timeout\", 2000);\n         // find Employee(2) with a lock, no block since only department was\n         // locked\n@@ -258,12 +258,12 @@ public void testQueryAfterFindWithPessimisticLocks() {\n         // Lock all selected Employees, skip the first one, i.e should lock\n         // Employee(2)\n         query.setLockMode(LockModeType.PESSIMISTIC_READ);\n-        query.setHint(\"javax.persistence.query.timeout\", 2000);\n+        query.setHint(\"javax.persistence.query.timeout\", 1000);\n         try {\n             List<Employee> q = query.getResultList();\n-            fail(\"Unexcpected find succeeded. Should throw a QueryLockException.\");\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n         } catch (Exception e) {\n-            assertError(e, QueryTimeoutException.class);\n+            assertError(e, PessimisticLockException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -314,17 +314,16 @@ public void testQueryOrderByAfterFindWithPessimisticLocks() {\n         em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n \n         em1.getTransaction().begin();\n-        query = em1.createQuery(\"select e from Employee e where e.id < 10 order by e.department.id\")\n-                .setFirstResult(1);\n+        query = em1.createQuery(\"select e from Employee e where e.id < 10 order by e.department.id\").setFirstResult(1);\n         // Lock all selected Employees, skip the first one, i.e should lock\n         // Employee(2)\n         query.setLockMode(LockModeType.PESSIMISTIC_READ);\n         query.setHint(\"javax.persistence.query.timeout\", 2000);\n         try {\n             List<?> q = query.getResultList();\n-            fail(\"Unexcpected find succeeded. Should throw a QueryLockException.\");\n+            fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n         } catch (Exception e) {\n-            assertError(e, QueryTimeoutException.class);\n+            assertError(e, PessimisticLockException.class);\n         } finally {\n             if (em1.getTransaction().isActive())\n                 em1.getTransaction().rollback();\n@@ -359,6 +358,9 @@ Object getFailedObject(Throwable e) {\n         if (e instanceof LockTimeoutException) {\n             return ((LockTimeoutException) e).getObject();\n         }\n+        if (e instanceof PessimisticLockException) {\n+            return ((PessimisticLockException) e).getEntity();\n+        }\n         if (e instanceof QueryTimeoutException) {\n             return ((QueryTimeoutException) e).getQuery();\n         }"},{"sha":"bf729db38a46a8b0eef2bdeada41909baf8459fd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -45,7 +45,7 @@\n     private transient Throwable[] _nested = null;\n \n     public LockTimeoutException(String msg, Throwable[] nested,  Object failed) {\n-        super(msg);\n+        super(msg, nested == null ? null : nested[0], failed);\n         _nested = nested;\n         _failed = failed;\n     }"},{"sha":"cbd8be4ae5ff8b166690193ad6a0f1ea3f281d5d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -164,14 +164,16 @@ private static Throwable translateStoreException(OpenJPAException ke) {\n         } else if (subtype == StoreException.OPTIMISTIC\t|| cause instanceof OptimisticException) {\n             \te = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal);\n         } else if (subtype == StoreException.LOCK || cause instanceof LockException) {\n-            LockException lockEx = (LockException) (ke instanceof LockException ? ke : cause);\n-            if (!lockEx.isFatal()) {\n-                e = new org.apache.openjpa.persistence.LockTimeoutException(msg, nested, failed);\n-            } else if (lockEx != null && lockEx.getLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n-                e = new org.apache.openjpa.persistence.PessimisticLockException(msg, nested, failed);\n-            } else {\n-                e = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal);\n-            }\n+            LockException lockEx = (LockException) (ke instanceof LockException ? ke : cause); \n+            if (lockEx != null && lockEx.getLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_READ) { \n+                if (!lockEx.isFatal()) { \n+                    e = new org.apache.openjpa.persistence.LockTimeoutException(msg, nested, failed); \n+                } else { \n+                    e = new org.apache.openjpa.persistence.PessimisticLockException(msg, nested, failed); \n+                } \n+            } else { \n+                e = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal); \n+            } \n         } else if (subtype == StoreException.OBJECT_EXISTS || cause instanceof ObjectExistsException) {\n                 e = new org.apache.openjpa.persistence.EntityExistsException(msg, nested, failed, fatal);\n         } else if (subtype == StoreException.QUERY || cause instanceof QueryException) {"},{"sha":"ad67f161b1de47a40195fd4f9b19c521e7bbe435","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -46,9 +46,10 @@\n     private transient Throwable[] _nested = null;\n \n     public PessimisticLockException(String msg, Throwable[] nested, Object failed) {\n-        super(msg);\n+        super(msg, nested == null ? null : nested[0], failed);\n         _nested = nested;\n         _failed = failed;\n+        \n     }\n \n     public int getType() {"},{"sha":"245b28163615f9807d0343438a32ffea7cf5c684","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -98,8 +98,7 @@\n \t * @param ret Exception translator for this query\n \t * @param query The underlying \"kernel\" query.\n \t */\n-\tpublic QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret,\n-\t\t\torg.apache.openjpa.kernel.Query query) {\n+\tpublic QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret, org.apache.openjpa.kernel.Query query) {\n \t\t_em = em;\n \t\t_query = new DelegatingQuery(query, ret);\n \t\t_lock = new ReentrantLock();\n@@ -110,8 +109,7 @@ public QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret,\n \t * \n \t * @deprecated\n \t */\n-\tpublic QueryImpl(EntityManagerImpl em,\n-\t        org.apache.openjpa.kernel.Query query) {\n+\tpublic QueryImpl(EntityManagerImpl em, org.apache.openjpa.kernel.Query query) {\n \t\tthis(em, null, query);\n \t}\n \n@@ -1084,4 +1082,9 @@ void assertValueAssignable(Parameter<?> param, Object v) {\n     }\n     \n     // ================== End of Parameter Processing routines ================================\n+    \n+    public String toString() {\n+        String result = _query.getQueryString(); \n+        return result != null ? result : _id;\n+    }\n }"},{"sha":"bdb77c2bac1730efa9a239aefec30de728b13a1a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/1b20902b507ca7e7209132297266968a92e0d472/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java?ref=1b20902b507ca7e7209132297266968a92e0d472","patch":"@@ -25,6 +25,8 @@\n import java.io.PrintWriter;\n import java.io.Serializable;\n \n+import javax.persistence.Query;\n+\n import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.StoreException;\n@@ -49,7 +51,7 @@ public QueryTimeoutException(String msg, Throwable[] nested, Object failed) {\n     }\n     \n     public QueryTimeoutException(String msg, Throwable[] nested, Object failed, boolean fatal) {\n-        super(msg);\n+        super(msg, nested == null ? null : nested[0], failed instanceof Query ? (Query)failed : null);\n         _nested = nested;\n         _failed = failed;\n         _fatal = fatal;"}]}

