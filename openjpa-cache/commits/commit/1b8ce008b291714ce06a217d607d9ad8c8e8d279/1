{"sha":"1b8ce008b291714ce06a217d607d9ad8c8e8d279","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiOGNlMDA4YjI5MTcxNGNlMDZhMjE3ZDYwN2Q5YWQ4YzhlOGQyNzk=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-04-27T19:16:36Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-04-27T19:16:36Z"},"message":"OPENJPA-1986: Avoid querying the db when cascading a persist to a new instance.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1097209 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e0337b3bf13968819d6d83c1ad4ddd363e04dcf","url":"https://api.github.com/repos/apache/openjpa/git/trees/4e0337b3bf13968819d6d83c1ad4ddd363e04dcf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b8ce008b291714ce06a217d607d9ad8c8e8d279","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b8ce008b291714ce06a217d607d9ad8c8e8d279","html_url":"https://github.com/apache/openjpa/commit/1b8ce008b291714ce06a217d607d9ad8c8e8d279","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b8ce008b291714ce06a217d607d9ad8c8e8d279/comments","author":null,"committer":null,"parents":[{"sha":"69fd9dbad901302a1e4ae5d9515068a1fce1bb37","url":"https://api.github.com/repos/apache/openjpa/commits/69fd9dbad901302a1e4ae5d9515068a1fce1bb37","html_url":"https://github.com/apache/openjpa/commit/69fd9dbad901302a1e4ae5d9515068a1fce1bb37"}],"stats":{"total":207,"additions":195,"deletions":12},"files":[{"sha":"5f2d099866cdea5be0e375692cb27e714f150e15","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=1b8ce008b291714ce06a217d607d9ad8c8e8d279","patch":"@@ -66,6 +66,7 @@\n     private boolean _isNonDefaultMappingAllowed = false;\n     private boolean _reloadOnDetach = false;\n     private boolean _ignoreDetachedStateFieldForProxySerialization = false;\n+    private boolean _checkDatabaseForCascadePersistToDetachedEntity = false;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -534,5 +535,27 @@ public boolean getReloadOnDetach() {\n      */\n     public void setReloadOnDetach(boolean reloadOnDetach) {\n         _reloadOnDetach = reloadOnDetach;\n-    }       \n+    }      \n+    \n+    /**\n+     * Whether OpenJPA will check the database for an Entity when cascading a persist to another Entity. This property\n+     * only applies for the case where we are trying to cascade a persist to an Entity which doesn't have a StateManager\n+     * and we can't determine if it is detached. \n+     *   \n+     * @since 2.1.x\n+     */\n+    public boolean getCheckDatabaseForCascadePersistToDetachedEntity(){\n+        return _checkDatabaseForCascadePersistToDetachedEntity;\n+    }\n+    \n+    /**\n+     * Whether OpenJPA will check the database for an Entity when cascading a persist to another Entity. This property\n+     * only applies for the case where we are trying to cascade a persist to an Entity which doesn't have a StateManager\n+     * and we can't determine if it is detached. \n+     *   \n+     * @since 2.1.x\n+     */\n+    public void setCheckDatabaseForCascadePersistToDetachedEntity(boolean b){\n+        _checkDatabaseForCascadePersistToDetachedEntity = b;\n+    }\n }"},{"sha":"a241de90501596baca51243db0c4c27a51e8a738","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=1b8ce008b291714ce06a217d607d9ad8c8e8d279","patch":"@@ -4539,8 +4539,20 @@ public boolean isDeleted(Object obj) {\n             return (ImplHelper.toPersistenceCapable(obj, _conf)).pcIsDeleted();\n         return false;\n     }\n-\n     public boolean isDetached(Object obj) {\n+        return isDetached(obj, true);\n+    }\n+\n+    /**\n+     * This method makes a best effort to determine if the provided object is detached.\n+     * \n+     * @param obj\n+     * @param find\n+     *            - If true, as a last resort this method will check whether or not the provided object exists in the\n+     *            DB. If it is in the DB, the provided object is detached.\n+     * @return - True if the provided obj is detached, false otherwise.\n+     */\n+    public boolean isDetached(Object obj, boolean find) {\n         if (!(ImplHelper.isManageable(obj)))\n             return false;\n \n@@ -4556,6 +4568,9 @@ public boolean isDetached(Object obj) {\n         Object oid = ApplicationIds.create(pc, meta);\n         if (oid == null)\n             return false;\n+        if(!find){\n+            return false;\n+        }\n         return find(oid, null, EXCLUDE_ALL, null, 0) != null;\n     }\n "},{"sha":"f4c085554cf7dd4f0d39eb7007534f0c840e1faf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=1b8ce008b291714ce06a217d607d9ad8c8e8d279","patch":"@@ -29,6 +29,7 @@\n import java.util.Iterator;\n import java.util.Map;\n \n+import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -49,22 +50,22 @@\n  * FieldManager type used to hold onto a single field value and then\n  * dispense it via the fetch methods. The manager can also perform actions\n  * on the held field.\n- *\n- * @author Abe White\n  */\n-class SingleFieldManager\n-    extends TransferFieldManager\n-    implements Serializable {\n+class SingleFieldManager extends TransferFieldManager implements Serializable {\n+    private static final long serialVersionUID = -6205985063476549150L;\n \n     private static final Localizer _loc = Localizer.forPackage\n         (SingleFieldManager.class);\n \n     private final StateManagerImpl _sm;\n     private final BrokerImpl _broker;\n-\n+    private final boolean _checkDbOnCascadePersist; \n+    \n     public SingleFieldManager(StateManagerImpl sm, BrokerImpl broker) {\n         _sm = sm;\n         _broker = broker;\n+        _checkDbOnCascadePersist =\n+            _broker.getConfiguration().getCompatibilityInstance().getCheckDatabaseForCascadePersistToDetachedEntity();\n     }\n \n     /**\n@@ -756,16 +757,16 @@ private void preFlushPCs(ValueMetaData vmd, Collection objs,\n     /**\n      * Perform pre flush operations on the given object.\n      */\n-    private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n-        OpCallbacks call) {\n+    private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical, OpCallbacks call) {\n         if (obj == null)\n             return;\n \n         OpenJPAStateManager sm;        \n \n         if (vmd.getCascadePersist() == ValueMetaData.CASCADE_NONE) {\n-            if (!_broker.isDetachedNew() && _broker.isDetached(obj))\n+            if (!_broker.isDetachedNew() && _broker.isDetached(obj, _checkDbOnCascadePersist)) {\n                 return; // allow but ignore\n+            }\n \n             sm = _broker.getStateManager(obj);\n             if (sm == null || !sm.isPersistent()) {\n@@ -782,8 +783,9 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n             }\n         } else {\n             if (vmd.getCascadePersist() == ValueMetaData.CASCADE_IMMEDIATE) {\n-                if (!_broker.isDetachedNew() && _broker.isDetached(obj))\n+                if (!_broker.isDetachedNew() && _broker.isDetached(obj, _checkDbOnCascadePersist)) {\n                     return; // allow but ignore\n+                }\n             }        \t\n             sm = _broker.getStateManager(obj);\n             if (sm == null || !sm.isProvisional()) { "},{"sha":"91b6a637fb60d195f12f660b706a6a3bc7799038","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/CascadePersistEntity.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/CascadePersistEntity.java","raw_url":"https://github.com/apache/openjpa/raw/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/CascadePersistEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/CascadePersistEntity.java?ref=1b8ce008b291714ce06a217d607d9ad8c8e8d279","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class CascadePersistEntity {\n+\n+    @Id\n+    long id;\n+\n+    @OneToOne(cascade = CascadeType.ALL)\n+    CascadePersistEntity other;\n+\n+    @Basic\n+    String stringField;\n+\n+    public CascadePersistEntity() {\n+\n+    }\n+\n+    public CascadePersistEntity(long i) {\n+        id = i;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public CascadePersistEntity getOther() {\n+        return other;\n+    }\n+\n+    public void setOther(CascadePersistEntity other) {\n+        this.other = other;\n+    }\n+}"},{"sha":"072c048439945d41ecfd12859693d2041a1307cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/TestCascadePersist.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/TestCascadePersist.java","raw_url":"https://github.com/apache/openjpa/raw/1b8ce008b291714ce06a217d607d9ad8c8e8d279/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/TestCascadePersist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/TestCascadePersist.java?ref=1b8ce008b291714ce06a217d607d9ad8c8e8d279","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCascadePersist extends SingleEMFTestCase {\n+    @Override\n+    public void setUp() throws Exception {\n+        setUp(DROP_TABLES, CascadePersistEntity.class, \"openjpa.Log\", \"SQL=trace\");\n+    }\n+\n+    public void testCascadePersistToDetachedFailure() {\n+        long startId = System.currentTimeMillis();\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        CascadePersistEntity cpe1 = new CascadePersistEntity(startId);\n+        em.persist(cpe1);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        em.getTransaction().begin();\n+        CascadePersistEntity cpe2 = new CascadePersistEntity(startId + 1);\n+        CascadePersistEntity cpe3 = new CascadePersistEntity(startId);\n+\n+        cpe2.setOther(cpe3);\n+        em.persist(cpe2);\n+        try {\n+            em.getTransaction().commit();\n+        } catch (RollbackException re) {\n+            // We expect this failure because we are trying to cascade a persist to an existing Entity. Changing\n+            // CheckDatabaseForCascadePersistToDetachedEntity=true would avoid this exception and revert back to pre\n+            // 2.2.x behavior.\n+        }\n+    }\n+\n+    public void testCascadePersistToManagedEntity() {\n+        long startId = System.currentTimeMillis();\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        CascadePersistEntity cpe1 = new CascadePersistEntity(startId);\n+        em.persist(cpe1);\n+\n+        em.flush();\n+        CascadePersistEntity cpe2 = new CascadePersistEntity(startId + 1);\n+\n+        cpe2.setOther(cpe1);\n+        em.persist(cpe2);\n+        // Since cpe1 is managed, it should be ignored by the cascaded persist operation.\n+        em.getTransaction().commit();\n+    }\n+}"}]}

