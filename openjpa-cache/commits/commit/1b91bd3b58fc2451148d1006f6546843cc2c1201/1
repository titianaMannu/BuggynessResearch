{"sha":"1b91bd3b58fc2451148d1006f6546843cc2c1201","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiOTFiZDNiNThmYzI0NTExNDhkMTAwNmY2NTQ2ODQzY2MyYzEyMDE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-06T22:22:09Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-10-06T22:22:09Z"},"message":"OPENJPA-1338 Allow comparison for VALUE(e) that maps to basic type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@822528 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"256bdda346ec37c0882646f2f55fcf58a0879d13","url":"https://api.github.com/repos/apache/openjpa/git/trees/256bdda346ec37c0882646f2f55fcf58a0879d13"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b91bd3b58fc2451148d1006f6546843cc2c1201","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b91bd3b58fc2451148d1006f6546843cc2c1201","html_url":"https://github.com/apache/openjpa/commit/1b91bd3b58fc2451148d1006f6546843cc2c1201","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b91bd3b58fc2451148d1006f6546843cc2c1201/comments","author":null,"committer":null,"parents":[{"sha":"c6085cd2961fb178d64a2f739fc25cdc33c9195c","url":"https://api.github.com/repos/apache/openjpa/commits/c6085cd2961fb178d64a2f739fc25cdc33c9195c","html_url":"https://github.com/apache/openjpa/commit/c6085cd2961fb178d64a2f739fc25cdc33c9195c"}],"stats":{"total":61,"additions":54,"deletions":7},"files":[{"sha":"9e983da521ec2a543cdc1cfc64937cd44bbaef0b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1b91bd3b58fc2451148d1006f6546843cc2c1201/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/1b91bd3b58fc2451148d1006f6546843cc2c1201/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=1b91bd3b58fc2451148d1006f6546843cc2c1201","patch":"@@ -1736,15 +1736,14 @@ private Value getGeneralIdentifier(JPQLNode node, boolean inWhereClause) {\n         if (node.id == JJTKEY)\n             path = (Path) factory.getKey(path);\n         FieldMetaData fld = path.last();\n-        ClassMetaData meta = node.id == JJTKEY ? meta = fld.getKey().getTypeMetaData()\n-                : fld.getDeclaredTypeMetaData();\n+        ClassMetaData meta = fld.getKey().getTypeMetaData();\n         if (inWhereClause &&\n-            (meta != null && meta.isEmbeddable()) ||\n-                (fld.isElementCollection() &&\n+            (node.id == JJTKEY && meta != null && fld.getKey().isEmbedded()) ||\n+            (node.id == JJTVALUE && fld.isElementCollection() &&\n                  fld.getElement().getEmbeddedMetaData() != null))   \n                  // check basic type\n                 throw parseException(EX_USER, \"bad-general-identifier\",\n-                    new Object[]{ id.text, node.id == JJTVALUE ? \"VALUE\" : \"KEY\" }, null);\n+                    new Object[]{ node.id == JJTVALUE ? \"VALUE\" : \"KEY\", id.text }, null);\n \n         return path;\n     }"},{"sha":"3e47631ed1b2057573a920bb8c636ab152a4414d","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1b91bd3b58fc2451148d1006f6546843cc2c1201/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1b91bd3b58fc2451148d1006f6546843cc2c1201/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=1b91bd3b58fc2451148d1006f6546843cc2c1201","patch":"@@ -76,7 +76,7 @@ not-type-literal: The specified node (\"{0}\") is not a valid entity type literal.\n bad-qualified-identifier: The identifier \"{0}\" in \"{1}\" operator is not \\\n     referring to an association field of type java.util.Map.\n bad-qualified-path: Attemp to navigate a basic type of Key(\"{0}\").\n-bad-general-identifier: The identitier \"{0}\" in \"{1}\" operator is not valid \\\n+bad-general-identifier: The \"{0}({1})\" is an embeddable which not allowed \\\n     in conditional expression.\n bad-predicate: JPQL query does not support conditional expression over \\\n     embeddable class. JPQL string: \"{0}\". "},{"sha":"1eb1b525acc9b539ae348dea26b96a3229d6b093","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":49,"deletions":1,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/1b91bd3b58fc2451148d1006f6546843cc2c1201/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/1b91bd3b58fc2451148d1006f6546843cc2c1201/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=1b91bd3b58fc2451148d1006f6546843cc2c1201","patch":"@@ -106,6 +106,53 @@ public void setUp() {\n             }\n     }\n \n+    public void testGroupByEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        String query[] = {\n+                \"select a.embed from EntityA_Embed_Embed a group by a.embed\",\n+                \"select e from EntityA_Embed_Embed a join a.embed e group by e\",\n+        };\n+        List rs = null;\n+        for (int i = 0; i < query.length; i++) {\n+            try {\n+            rs = em.createQuery(query[i]).getResultList();\n+            } catch(ArgumentException e) {\n+                ; // as expected : Group by embeddable field is not allowed\n+            }\n+        }\n+        em.close();\n+    }\n+\n+    public void testKeyEmbeddableCompare() {\n+        EntityManager em = emf.createEntityManager();\n+        String query[] = {\n+                \"select o from Company1 c join c.organization o where KEY(o) = ?1\",\n+                \"select d from Department3 d join d.emps e where KEY(e) = ? 1\"\n+        };\n+        List rs = null;\n+        Division d = new Division();\n+        d.setId(10);\n+        d.setName(\"division 10\");\n+        EmployeeName3 name = new EmployeeName3(\"fname1\", \"lname1\");\n+        for (int i = 0; i < query.length; i++) {\n+            switch (i) {\n+            case 0:\n+                // Division is an embeddable as well as an entity, comparison is allowed\n+                rs = em.createQuery(query[i]).setParameter(1, d).getResultList();\n+                break;\n+            case 1:\n+                try {\n+                    rs = em.createQuery(query[i]).setParameter(1, name).getResultList();\n+                } catch(ArgumentException e) {\n+                    // as expected : compare embeddable is not allowed\n+                    System.out.println(e.getMessage()); \n+                }\n+                break;\n+            }\n+        }\n+        em.close();        \n+    }\n+\n     public void testEntityA_Embed_Coll_Map() {\n         queryEntityA_Embed_Coll_Map();\n     }\n@@ -120,7 +167,8 @@ public void queryEntityA_Embed_Coll_Map() {\n         for (int i = 0; i < query.length; i++) {\n             rs = em.createQuery(query[i]).getResultList();\n             em.clear();\n-        }        \n+        }\n+        em.close();\n     }\n \n     public void testEntityA_Coll_String() {"}]}

