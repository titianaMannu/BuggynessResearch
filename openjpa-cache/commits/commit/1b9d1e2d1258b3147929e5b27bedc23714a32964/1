{"sha":"1b9d1e2d1258b3147929e5b27bedc23714a32964","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiOWQxZTJkMTI1OGIzMTQ3OTI5ZTViMjdiZWRjMjM3MTRhMzI5NjQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T13:18:26Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-29T13:18:26Z"},"message":"OPENJPA-262. Added test case for lifecycle and tx registries in BrokerFactories. Also discovered that BEFORE_PERSIST listeners (and possibly a couple of others) were not being invoked; fixed-by-inspection and simplified the registration of types in the lifecycle event handler.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551885 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b513d26d9b57781be708f5353e2d280475fc0c9b","url":"https://api.github.com/repos/apache/openjpa/git/trees/b513d26d9b57781be708f5353e2d280475fc0c9b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1b9d1e2d1258b3147929e5b27bedc23714a32964","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1b9d1e2d1258b3147929e5b27bedc23714a32964","html_url":"https://github.com/apache/openjpa/commit/1b9d1e2d1258b3147929e5b27bedc23714a32964","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1b9d1e2d1258b3147929e5b27bedc23714a32964/comments","author":null,"committer":null,"parents":[{"sha":"ffdbc5ae9c3768807406413eda8a36cbc93db50d","url":"https://api.github.com/repos/apache/openjpa/commits/ffdbc5ae9c3768807406413eda8a36cbc93db50d","html_url":"https://github.com/apache/openjpa/commit/ffdbc5ae9c3768807406413eda8a36cbc93db50d"}],"stats":{"total":180,"additions":149,"deletions":31},"files":[{"sha":"87778962ad87a8e495c57f70f173ebc021533fa3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","raw_url":"https://github.com/apache/openjpa/raw/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java?ref=1b9d1e2d1258b3147929e5b27bedc23714a32964","patch":"@@ -34,6 +34,10 @@\n     protected void eventOccurred(LifecycleEvent event) {\n     }\n \n+    public void beforePersist(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n     public void afterPersist(LifecycleEvent event) {\n         eventOccurred(event);\n     }\n@@ -81,4 +85,24 @@ public void beforeDirtyFlushed(LifecycleEvent event) {\n     public void afterDirtyFlushed(LifecycleEvent event) {\n         eventOccurred(event);\n     }\n+\n+    public void afterRefresh(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n+    public void beforeDetach(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n+    public void afterDetach(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n+    public void beforeAttach(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n+\n+    public void afterAttach(LifecycleEvent event) {\n+        eventOccurred(event);\n+    }\n }"},{"sha":"674ad7e40fe0d2f04ed84c32b5e70da23ebeb9ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":23,"deletions":28,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=1b9d1e2d1258b3147929e5b27bedc23714a32964","patch":"@@ -131,75 +131,68 @@ public synchronized void removeListener(Object listener) {\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasPersistListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_PERSIST)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_PERSIST)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_PERSIST);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_PERSIST)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_PERSIST);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasDeleteListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_DELETE)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_DELETE)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_DELETE);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_DELETE)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DELETE);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasClearListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_CLEAR)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_CLEAR)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_CLEAR);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_CLEAR)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_CLEAR);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasLoadListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.AFTER_LOAD)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_LOAD);\n+        return hasHandlers(source, meta, LifecycleEvent.AFTER_LOAD);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasStoreListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_STORE)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_STORE)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_STORE);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_STORE)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_STORE);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasDirtyListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_DIRTY)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_DIRTY)\n-            || hasCallbacks(source, meta, LifecycleEvent.BEFORE_DIRTY_FLUSHED)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_DIRTY_FLUSHED)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_DIRTY);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_DIRTY)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DIRTY);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasDetachListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_DETACH)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_DETACH)\n-            || hasListeners(source, meta, LifecycleEvent.BEFORE_DETACH)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_DETACH);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_DETACH)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_DETACH);\n     }\n \n     /**\n      * Return whether there are listeners or callbacks for the given source.\n      */\n     public boolean hasAttachListeners(Object source, ClassMetaData meta) {\n-        return hasCallbacks(source, meta, LifecycleEvent.BEFORE_ATTACH)\n-            || hasCallbacks(source, meta, LifecycleEvent.AFTER_ATTACH)\n-            || hasListeners(source, meta, LifecycleEvent.BEFORE_ATTACH)\n-            || hasListeners(source, meta, LifecycleEvent.AFTER_ATTACH);\n+        return hasHandlers(source, meta, LifecycleEvent.BEFORE_ATTACH)\n+            || hasHandlers(source, meta, LifecycleEvent.AFTER_ATTACH);\n+    }\n+\n+    private boolean hasHandlers(Object source, ClassMetaData meta, int type) {\n+        return hasCallbacks(source, meta, type)\n+            || hasListeners(source, meta, type);\n     }\n \n     /**\n@@ -557,8 +550,10 @@ private static int getEventTypes(Object listener) {\n                 return types;\n             }\n \n-            if (listener instanceof PersistListener)\n+            if (listener instanceof PersistListener) {\n+                types |= 2 << LifecycleEvent.BEFORE_PERSIST;\n                 types |= 2 << LifecycleEvent.AFTER_PERSIST;\n+            }\n             if (listener instanceof ClearListener) {\n                 types |= 2 << LifecycleEvent.BEFORE_CLEAR;\n                 types |= 2 << LifecycleEvent.AFTER_CLEAR;"},{"sha":"cd1e215a22715bcef773b210fa6930ffd3babecb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=1b9d1e2d1258b3147929e5b27bedc23714a32964","patch":"@@ -218,8 +218,7 @@ protected void addListeners(BrokerImpl broker) {\n             Map.Entry entry;\n             for (Iterator itr = _transactionListeners.iterator();\n                 itr.hasNext(); ) {\n-                entry = (Map.Entry) itr.next();\n-                broker.addTransactionListener(entry.getKey());\n+                broker.addTransactionListener(itr.next());\n             }\n         }\n     }"},{"sha":"ffd476653454248b6a4ba6084b9e7bdfa459634e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java?ref=1b9d1e2d1258b3147929e5b27bedc23714a32964","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.event.AbstractLifecycleListener;\r\n+import org.apache.openjpa.event.AbstractTransactionListener;\r\n+import org.apache.openjpa.event.LifecycleEvent;\r\n+import org.apache.openjpa.event.TransactionEvent;\r\n+\r\n+public class TestBrokerFactoryListenerRegistry\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    private int persistCount = 0;\r\n+    private int beginCount = 0;\r\n+\r\n+    @Override\r\n+    protected void setUp() {\r\n+        super.setUp(AllFieldTypes.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected OpenJPAEntityManagerFactory createEMF(Object... props) {\r\n+        OpenJPAEntityManagerFactory emf = super.createEMF(props);\r\n+        emf.addLifecycleListener(new AbstractLifecycleListener() {\r\n+            @Override\r\n+            public void beforePersist(LifecycleEvent event) {\r\n+                persistCount++;\r\n+            }\r\n+        }, null);\r\n+        emf.addTransactionListener(new AbstractTransactionListener() {\r\n+            @Override\r\n+            public void afterBegin(TransactionEvent event) {\r\n+                beginCount++;\r\n+            }\r\n+        });\r\n+        return emf;\r\n+    }\r\n+\r\n+    public void testLifecycleListenerRegistry() {\r\n+        beginCount = 0;\r\n+        persistCount = 0;\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        try {\r\n+            em.persist(new AllFieldTypes());\r\n+            em.flush();\r\n+            assertEquals(1, beginCount);\r\n+            assertEquals(1, persistCount);\r\n+        } finally {\r\n+            em.getTransaction().rollback();\r\n+            em.close();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"bbd36761345086a1642f17134d9982ae1439d742","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=1b9d1e2d1258b3147929e5b27bedc23714a32964","patch":"@@ -272,6 +272,14 @@ public void removeLifecycleListener(Object listener) {\n         _factory.removeLifecycleListener(listener);\n     }\n \n+    public void addTransactionListener(Object listener) {\n+        _factory.addTransactionListener(listener);\n+    }\n+\n+    public void removeTransactionListener(Object listener) {\n+        _factory.removeTransactionListener(listener);\n+    }\n+\n     public void close() {\n         _factory.close();\n     }"},{"sha":"2d3ee0eee695fbcf0e3f46d3a11ce92ab268cda3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1b9d1e2d1258b3147929e5b27bedc23714a32964/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java?ref=1b9d1e2d1258b3147929e5b27bedc23714a32964","patch":"@@ -93,7 +93,7 @@\n      * Register a listener for lifecycle-related events on the specified\n      * classes. If the classes are null, all events will be propagated to\n      * the listener. The listener will be passed on to all new entity\n-     * managers. See the <code>org.apache.openjpa.event</code> package for \n+     * managers. See the <code>org.apache.openjpa.event</code> package for\n      * listener types.\n      *\n      * @since 0.3.3\n@@ -106,4 +106,21 @@\n      * @since 0.3.3\n      */\n     public void removeLifecycleListener (Object listener);\n+\n+    /**\n+     * Register a listener for transaction-related events on the specified\n+     * classes. The listener will be passed on to all new entity\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\n+     * listener types.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * Remove a listener for transaction-related events.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void removeTransactionListener (Object listener);\n }"}]}

