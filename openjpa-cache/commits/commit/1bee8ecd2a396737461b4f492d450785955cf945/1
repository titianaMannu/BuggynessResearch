{"sha":"1bee8ecd2a396737461b4f492d450785955cf945","node_id":"MDY6Q29tbWl0MjA2MzY0OjFiZWU4ZWNkMmEzOTY3Mzc0NjFiNGY0OTJkNDUwNzg1OTU1Y2Y5NDU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-19T15:02:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-19T15:02:57Z"},"message":"OPENJPA-925 committing patch provided by Donald Woods. Bidirectional OneToOne relation incorrectly set in loadEagerJoin fix for trunk written by Catalina Wei\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@745891 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e9e3f958786941dcd69fa6dd6e1135f217ebb8c","url":"https://api.github.com/repos/apache/openjpa/git/trees/2e9e3f958786941dcd69fa6dd6e1135f217ebb8c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1bee8ecd2a396737461b4f492d450785955cf945","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1bee8ecd2a396737461b4f492d450785955cf945","html_url":"https://github.com/apache/openjpa/commit/1bee8ecd2a396737461b4f492d450785955cf945","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1bee8ecd2a396737461b4f492d450785955cf945/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"1e3abf0ebc942a5e2f428999d723b6a40e749cad","url":"https://api.github.com/repos/apache/openjpa/commits/1e3abf0ebc942a5e2f428999d723b6a40e749cad","html_url":"https://github.com/apache/openjpa/commit/1e3abf0ebc942a5e2f428999d723b6a40e749cad"}],"stats":{"total":223,"additions":210,"deletions":13},"files":[{"sha":"5980871a5c8a73888eeb05c339d3bc7068c181c9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/1bee8ecd2a396737461b4f492d450785955cf945/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/1bee8ecd2a396737461b4f492d450785955cf945/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=1bee8ecd2a396737461b4f492d450785955cf945","patch":"@@ -524,19 +524,28 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n         PersistenceCapable mappedByValue = null;\n \n         if (mappedByFieldMapping != null) {\n-        \tValueMapping val = mappedByFieldMapping.getValueMapping();\n-        \tClassMetaData decMeta = val.getTypeMetaData();\n-        \t// this inverse field does not have corresponding classMapping\n-        \t// its value may be a collection/map etc.\n-        \tif (decMeta != null) {\n-        \t    mappedByValue = sm.getPersistenceCapable();\n-        \t    res.setMappedByFieldMapping(mappedByFieldMapping);\n-        \t    res.setMappedByValue(mappedByValue);\n-        \t}\n+            ValueMapping val = mappedByFieldMapping.getValueMapping();\n+            ClassMetaData decMeta = val.getTypeMetaData();\n+            // eager loading a child from its toOne parent and\n+            // the parent has @OneToOne(mappedBy=\"parent\") child relation.\n+            // By saving the mapped-by info in 'res' is to\n+            // avoid unneeded SQL pushdown that would otherwise gets\n+            // generated.\n+            if (decMeta != null) {\n+                mappedByValue = sm.getPersistenceCapable();\n+                res.setMappedByFieldMapping(mappedByFieldMapping);\n+                res.setMappedByValue(mappedByValue);\n+            }\n         }\n \n         sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n-            eagerJoin(res.newJoins(), cls, false)));\n+        eagerJoin(res.newJoins(), cls, false)));\n+\n+        // reset mapped by is needed for OneToOne bidirectional relations\n+        // having a mapped-by parent to correctly set the parent-child\n+        // relation.\n+        res.setMappedByFieldMapping(null);\n+        res.setMappedByValue(null);\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,"},{"sha":"c88f0fef1207c0334d8ece9b41f7f67ad89ba45a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/1bee8ecd2a396737461b4f492d450785955cf945/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","raw_url":"https://github.com/apache/openjpa/raw/1bee8ecd2a396737461b4f492d450785955cf945/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java?ref=1bee8ecd2a396737461b4f492d450785955cf945","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneOneChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToOne\n+    private OneOneParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneOneParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneOneParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"311b62a9b685eb28ea1725578ba9e0bb314a412e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/1bee8ecd2a396737461b4f492d450785955cf945/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","raw_url":"https://github.com/apache/openjpa/raw/1bee8ecd2a396737461b4f492d450785955cf945/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java?ref=1bee8ecd2a396737461b4f492d450785955cf945","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneOneParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToOne(mappedBy=\"parent\")\n+    private OneOneChild child;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneOneChild getChild() { \n+        return child; \n+    }\n+\n+    public void setChild(OneOneChild child) { \n+        this.child = child; \n+    }\n+}"},{"sha":"2de819e446cf481e952e9b07bcf350821ceb075b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","status":"modified","additions":69,"deletions":3,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/1bee8ecd2a396737461b4f492d450785955cf945/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/1bee8ecd2a396737461b4f492d450785955cf945/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java?ref=1bee8ecd2a396737461b4f492d450785955cf945","patch":"@@ -33,10 +33,11 @@\n     extends SQLListenerTestCase {\n \n     public void setUp() {\n-        setUp(\n+        setUp(DROP_TABLES,\n             OneManyEagerParent.class, OneManyEagerChild.class,\n-            OneManyLazyChild.class);\n-        \n+            OneManyLazyChild.class, OneOneParent.class, \n+            OneOneChild.class);\n+\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n \n@@ -56,6 +57,17 @@ public void setUp() {\n             em.persist(parent);\n         }\n \n+        for (int i = 0; i < 3; i++) {\n+            OneOneParent parent = new OneOneParent();\n+            parent.setName(\"parent\" + i);\n+            OneOneChild child = new OneOneChild();\n+            child.setName(\"child\" + i);\n+            parent.setChild(child);\n+            child.setParent(parent);\n+            em.persist(child);\n+            em.persist(parent);\n+        }\n+\n         em.flush();\n         em.getTransaction().commit();\n         em.close();\n@@ -190,6 +202,60 @@ public void testOneToManyEagerQuery() {\n         em.close();\n     }\n \n+    public void testOneToOneParentQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM OneOneParent p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(3, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t1.id, t1.optLock, t1.name, t0.name\n+        //   FROM OneOneParent t0 \n+        //   LEFT OUTER JOIN OneOneChild t1 ON t0.id = t1.PARENT_ID\n+\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneOneParent p = (OneOneParent) list.get(i);\n+            assertEquals(p, p.getChild().getParent());\n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public void testOneToOneChildQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneOneChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(3, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t1.id, t1.optLock, t1.name, t0.name \n+        //   FROM OneOneParent t0 \n+        //   LEFT OUTER JOIN OneOneChild t1 ON t0.id = t1.PARENT_ID\n+\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneOneChild c = (OneOneChild) list.get(i);\n+            assertEquals(c, c.getParent().getChild());\n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n     public static void main(String[] args) {\n         TestRunner.run(TestManyEagerSQL.class);\n     }"}]}

