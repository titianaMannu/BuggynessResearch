{"sha":"1c0abb52070ad23a1092603ad97f8a18bc0ffce3","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjMGFiYjUyMDcwYWQyM2ExMDkyNjAzYWQ5N2Y4YTE4YmMwZmZjZTM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-22T18:29:15Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-22T18:29:15Z"},"message":"OPENJPA-1591: Refactor/rename DataCacheScheduler to allow for greater extensibility.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926249 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97637cdf80dd6c009d6edef9136cdaca037c96c7","url":"https://api.github.com/repos/apache/openjpa/git/trees/97637cdf80dd6c009d6edef9136cdaca037c96c7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c0abb52070ad23a1092603ad97f8a18bc0ffce3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c0abb52070ad23a1092603ad97f8a18bc0ffce3","html_url":"https://github.com/apache/openjpa/commit/1c0abb52070ad23a1092603ad97f8a18bc0ffce3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/comments","author":null,"committer":null,"parents":[{"sha":"86546e1e12ef3eea9bb9bf50ead0a575e299aa44","url":"https://api.github.com/repos/apache/openjpa/commits/86546e1e12ef3eea9bb9bf50ead0a575e299aa44","html_url":"https://github.com/apache/openjpa/commit/86546e1e12ef3eea9bb9bf50ead0a575e299aa44"}],"stats":{"total":118,"additions":70,"deletions":48},"files":[{"sha":"aa2985adcbdb2b88a8125ed2cf4be5b7de0ee229","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=1c0abb52070ad23a1092603ad97f8a18bc0ffce3","patch":"@@ -105,7 +105,7 @@ public void setEvictionSchedule(String s) {\n     \n     public void initialize(DataCacheManager manager) {\n         if (_schedule != null && !\"\".equals(_schedule)) {\n-            DataCacheScheduler scheduler = manager.getDataCacheScheduler();\n+            ClearableScheduler scheduler = manager.getClearableScheduler();\n             if (scheduler != null)\n                 scheduler.scheduleEviction(this, _schedule);\n         }"},{"sha":"82e343b6e26f6b5bd516a9cb780be9119e4847f1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ClearableScheduler.java","status":"renamed","additions":24,"deletions":32,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ClearableScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ClearableScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ClearableScheduler.java?ref=1c0abb52070ad23a1092603ad97f8a18bc0ffce3","patch":"@@ -21,18 +21,17 @@\n import java.security.AccessController;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.List;\n import java.util.Map;\n import java.util.StringTokenizer;\n+import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentHashMap;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Clearable;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n@@ -41,40 +40,38 @@\n import serp.util.Strings;\n \n /**\n- * Cron-style cache eviction. Understands schedules based on cron format:\n- * <code>minute hour mday month wday</code>\n+ * Cron-style clearable eviction. Understands schedules based on cron format:\n+ * <li><code>minute hour mday month wday</code></li>\n+ * <li><code>+minute</code></li>\n  * For example:\n  * <code>15,30 6,19 2,10 1 2 </code>\n  * Would run at 15 and 30 past the 6AM and 7PM, on the 2nd and 10th\n  * of January when its a Monday.\n  *\n- * @author Steve Kim\n  */\n-public class DataCacheScheduler\n-    implements Runnable {\n+public class ClearableScheduler implements Runnable {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (DataCacheScheduler.class);\n+    private static final Localizer _loc = Localizer.forPackage(ClearableScheduler.class);\n \n-    private Map _caches = new ConcurrentHashMap();\n+    private Map<Clearable,Schedule> _clearables = new ConcurrentHashMap<Clearable,Schedule>();\n     private boolean _stop = false;\n     private int _interval = 1;\n     private Log _log;\n     private Thread _thread;\n \n-    public DataCacheScheduler(OpenJPAConfiguration conf) {\n+    public ClearableScheduler(OpenJPAConfiguration conf) {\n         _log = conf.getLogFactory().getLog(OpenJPAConfiguration.LOG_DATACACHE);\n     }\n \n     /**\n-     * The interval time in minutes between cache checks. Defaults to 1.\n+     * The interval time in minutes between scheduler checks. Defaults to 1.\n      */\n     public int getInterval() {\n         return _interval;\n     }\n \n     /**\n-     * The interval time in minutes between cache checks. Defaults to 1.\n+     * The interval time in minutes between scheduler checks. Defaults to 1.\n      */\n     public void setInterval(int interval) {\n         _interval = interval;\n@@ -92,15 +89,15 @@ private boolean isStopped() {\n     }\n \n     /**\n-     * Schedule the given cache for eviction. Starts the scheduling thread\n+     * Schedule the given Clearable for clear to be called. Starts the scheduling thread\n      * if not started.\n      */\n-    public synchronized void scheduleEviction(DataCache cache, String times) {\n+    public synchronized void scheduleEviction(Clearable clearable, String times) {\n         if (times == null)\n             return;\n \n         Schedule schedule = new Schedule(times);\n-        _caches.put(cache, schedule);\n+        _clearables.put(clearable, schedule);\n         _stop = false;\n         if (_thread == null) {\n             _thread =\n@@ -114,11 +111,11 @@ public synchronized void scheduleEviction(DataCache cache, String times) {\n     }\n \n     /**\n-     * Remove the given cache from scheduling.\n+     * Remove the given Clearable from scheduling.\n      */\n-    public synchronized void removeFromSchedule(DataCache cache) {\n-        _caches.remove(cache);\n-        if (_caches.size() == 0)\n+    public synchronized void removeFromSchedule(Clearable clearable) {\n+        _clearables.remove(clearable);\n+        if (_clearables.size() == 0)\n             stop();\n     }\n \n@@ -133,18 +130,13 @@ public void run() {\n                 Thread.sleep(_interval * 60 * 1000);\n \n                 Date now = new Date();\n-                DataCache cache;\n-                Schedule schedule;\n-                Map.Entry entry;\n-                for (Iterator i = _caches.entrySet().iterator(); i.hasNext();) {\n-                    entry = (Map.Entry) i.next();\n-                    cache = (DataCache) entry.getKey();\n-                    schedule = (Schedule) entry.getValue();\n+                for(Entry<Clearable, Schedule> entry : _clearables.entrySet()){\n+                    Clearable clearable = entry.getKey();\n+                    Schedule schedule = entry.getValue();\n                     if (schedule.matches(lastRun, now)) {\n                         if (_log.isTraceEnabled())\n-                            _log.trace(_loc.get(\"scheduler-clear\",\n-                                cache.getName(), fom.format(now)));\n-                        evict(cache);\n+                            _log.trace(_loc.get(\"scheduler-clear\", clearable, fom.format(now)));\n+                        evict(clearable);\n                     }\n                 }\n                 lastRun = now;\n@@ -161,7 +153,7 @@ public void run() {\n         }\n     }\n \n-    protected void evict(DataCache cache) {\n+    protected void evict(Clearable cache) {\n         cache.clear();\n     }\n ","previous_filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java"},{"sha":"f9fc48db80b02295f330f0f83397be0000dc597d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java?ref=1c0abb52070ad23a1092603ad97f8a18bc0ffce3","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.openjpa.lib.util.Clearable;\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n@@ -40,7 +41,7 @@\n  * @author Pinaki Poddar\n  */\n public interface DataCache\n-    extends Closeable {\n+    extends Closeable, Clearable {\n \n     /**\n      * The name of the default data cache: <code>default</code>"},{"sha":"1eed5c181e783ff68818181be015c0770e980708","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java?ref=1c0abb52070ad23a1092603ad97f8a18bc0ffce3","patch":"@@ -77,7 +77,7 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache,\n     /**\n      * Return the runnable which schedules evictions.\n      */\n-    public DataCacheScheduler getDataCacheScheduler();\n+    public ClearableScheduler getClearableScheduler();\n     \n     /**\n      * Select the cache where the given managed proxy instance should be cached."},{"sha":"99a2100d663fafed8f5f20ee1432f6f550420992","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=1c0abb52070ad23a1092603ad97f8a18bc0ffce3","patch":"@@ -31,7 +31,7 @@\n import org.apache.openjpa.util.ImplHelper;\n \n /**\n- * Default data cache manager provides handle to utilities {@linkplain PCDataGenerator}, {@linkplain DataCacheScheduler}\n+ * Default data cache manager provides handle to utilities {@linkplain PCDataGenerator}, {@linkplain ClearableScheduler}\n  * and {@linkplain CacheDistributionPolicy} for the cache operation. This implementation also determines whether a\n  * managed type is eligible to cache.\n  * \n@@ -46,7 +46,7 @@\n     private DataCache _cache = null;\n     private QueryCache _queryCache = null;\n     private DataCachePCDataGenerator _pcGenerator = null;\n-    private DataCacheScheduler _scheduler = null;\n+    private ClearableScheduler _scheduler = null;\n     private CacheDistributionPolicy _policy = new DefaultCacheDistributionPolicy();\n     private Map<ClassMetaData,Boolean> _cacheable = new HashMap<ClassMetaData, Boolean>();\n     \n@@ -64,7 +64,7 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectV\n         // create helpers before initializing caches\n         if (conf.getDynamicDataStructs())\n             _pcGenerator = new DataCachePCDataGenerator(conf);\n-        _scheduler = new DataCacheScheduler(conf);\n+        _scheduler = new ClearableScheduler(conf);\n         \n         _policy = conf.getCacheDistributionPolicyInstance();\n \n@@ -104,7 +104,7 @@ public DataCachePCDataGenerator getPCDataGenerator() {\n         return _pcGenerator;\n     }\n \n-    public DataCacheScheduler getDataCacheScheduler() {\n+    public ClearableScheduler getClearableScheduler() {\n         return _scheduler;\n     }\n "},{"sha":"23c040a0c18cc444925d3235b9f6bb20dfb19f60","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties?ref=1c0abb52070ad23a1092603ad97f8a18bc0ffce3","patch":"@@ -63,12 +63,12 @@ query-cache-key-removed: Key \"{0}\" has been removed from the query cache.\n reg-mbean: Registered MBean ({0}).\n cant-reg-mbean: Unable to register Datastore Cache {0} MBean.\n query-cache-name:  Query Cache\n-scheduler-start: Starting cache scheduler thread \"{0}\"...\n-scheduler-name: OpenJPA Cache Scheduler\n-scheduler-interval: Cache schedule thread will check every \"{0}\" min.\n-scheduler-clear: Scheduled cache eviction at time \"{1}\" for cache:\"{0}\"\n-scheduler-stop: Stopping scheduled cache eviction thread.\n-scheduler-fail: Cache scheduler thread unexpectedly interrupted. Stopping \\\n+scheduler-start: Starting clearable scheduler thread \"{0}\"...\n+scheduler-name: OpenJPA Clearable Scheduler\n+scheduler-interval: Clearable schedule thread will check every \"{0}\" min.\n+scheduler-clear: Scheduled clearable eviction at time \"{1}\" for clearable:\"{0}\"\n+scheduler-stop: Stopping scheduled clearable eviction thread.\n+scheduler-fail: Clearable scheduler thread unexpectedly interrupted. Stopping \\\n \tscheduler.\n bad-schedule: Invalid schedule string: \"{0}\"\n not-number: Token \"{0}\" is not a valid number or wildcard (*) for schedule."},{"sha":"1653373020a596ec7809c9c0f0961e09681f5cdf","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Clearable.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Clearable.java","raw_url":"https://github.com/apache/openjpa/raw/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Clearable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Clearable.java?ref=1c0abb52070ad23a1092603ad97f8a18bc0ffce3","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+/**\n+ * Generic interface for components that can be cleared so that helpers can treat them in a generic\n+ * way.\n+ */\n+public interface Clearable {\n+\n+    public void clear();\n+\n+}"},{"sha":"4709bc2dfefb9c75674792f0ab8f67471e24669c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/1c0abb52070ad23a1092603ad97f8a18bc0ffce3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java?ref=1c0abb52070ad23a1092603ad97f8a18bc0ffce3","patch":"@@ -26,12 +26,12 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.ConcurrentDataCache;\n import org.apache.openjpa.datacache.DataCacheManager;\n-import org.apache.openjpa.datacache.DataCacheScheduler;\n+import org.apache.openjpa.datacache.ClearableScheduler;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n-public class TestDataCacheScheduler extends SingleEMFTestCase {\n+public class TestClearableScheduler extends SingleEMFTestCase {\n \n     private static String getMinutesString() {\n         StringBuffer buf = new StringBuffer();\n@@ -54,7 +54,7 @@ public void setUp() {\n     public void testBasic() throws Exception {\n         OpenJPAEntityManagerSPI em = emf.createEntityManager();\n         OpenJPAConfiguration conf = ((OpenJPAEntityManagerSPI) em).getConfiguration();\n-        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\n+        ClearableScheduler scheduler = new ClearableScheduler(conf);\n         // Make the scheduler run every 1 minute\n         scheduler.setInterval(1);\n         DummyCache cache1 = new DummyCache();","previous_filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java"}]}

