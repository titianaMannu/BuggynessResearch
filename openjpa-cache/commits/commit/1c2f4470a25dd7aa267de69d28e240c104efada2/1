{"sha":"1c2f4470a25dd7aa267de69d28e240c104efada2","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjMmY0NDcwYTI1ZGQ3YWEyNjdkZTY5ZDI4ZTI0MGMxMDRlZmFkYTI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-25T15:09:00Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-25T15:09:00Z"},"message":"OPENJPA-1599 - Push Cache*Mode value(s) in fetch configuration set from property making the property value(s) only valid during the em method call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@927442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c07727cefe012c0fc85898b2ef0058eb6fa3f1a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/c07727cefe012c0fc85898b2ef0058eb6fa3f1a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c2f4470a25dd7aa267de69d28e240c104efada2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c2f4470a25dd7aa267de69d28e240c104efada2","html_url":"https://github.com/apache/openjpa/commit/1c2f4470a25dd7aa267de69d28e240c104efada2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c2f4470a25dd7aa267de69d28e240c104efada2/comments","author":null,"committer":null,"parents":[{"sha":"fb60f8136f5427e47cc449bf21a9b860c3e11db9","url":"https://api.github.com/repos/apache/openjpa/commits/fb60f8136f5427e47cc449bf21a9b860c3e11db9","html_url":"https://github.com/apache/openjpa/commit/fb60f8136f5427e47cc449bf21a9b860c3e11db9"}],"stats":{"total":100,"additions":91,"deletions":9},"files":[{"sha":"cd63aedb354488397bda6d1c251a7e5e02bd3765","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","status":"modified","additions":87,"deletions":4,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/1c2f4470a25dd7aa267de69d28e240c104efada2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","raw_url":"https://github.com/apache/openjpa/raw/1c2f4470a25dd7aa267de69d28e240c104efada2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java?ref=1c2f4470a25dd7aa267de69d28e240c104efada2","patch":"@@ -18,15 +18,12 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n-import java.sql.Connection;\n-import java.sql.SQLException;\n+import java.util.HashMap;\n import java.util.Map;\n \n import javax.persistence.CacheRetrieveMode;\n import javax.persistence.CacheStoreMode;\n-import javax.persistence.EntityManager;\n \n-import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.persistence.JPAProperties;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SingleEMTestCase;\n@@ -133,7 +130,93 @@ public void testRefreshAfterRemove() {\n         }\n     }\n     \n+    public void testFindWithCacheRetrieveProperty() {\n+        String key = \"Test property in find.\";\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Item item = new Item();\n+        item.setItemData(key);\n+        em.persist(item);\n+        em.flush();\n+        em.getTransaction().commit();\n+        int id = item.getItemId();\n+        em.clear();\n+        emf.getCache().evictAll();\n+\n+        assertEquals(key, item.getItemData());\n+\n+        em.setProperty(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.USE);\n+        em.setProperty(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.USE);\n+        Map<String, Object> properties = em.getProperties();\n+        if (!properties.containsKey(JPAProperties.CACHE_STORE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_STORE_MODE + \" properties be returned\");\n+        }\n+        if (!properties.containsKey(JPAProperties.CACHE_RETRIEVE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_RETRIEVE_MODE + \" properties be returned\");\n+        }\n+        Map<String, Object> paramProperties = new HashMap<String, Object>();\n+        paramProperties.put(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.BYPASS);\n+        paramProperties.put(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.BYPASS);\n+        Item fItem = em.find(Item.class, id, paramProperties);\n+        assertEquals(fItem.getItemData(), key);\n+        assertNotCached(Item.class, id);\n+\n+        Object mode = em.getProperties().get(JPAProperties.CACHE_STORE_MODE);\n+        assertEquals(mode, CacheStoreMode.USE);        \n+        mode = em.getProperties().get(JPAProperties.CACHE_RETRIEVE_MODE);\n+        assertEquals(mode, CacheRetrieveMode.USE);        \n+    }\n     \n+    public void testRefreshWithCacheRetrieveProperty() {\n+        String key = \"Test property in refresh.\";\n+        String updatedKey = \"Updated test property in refresh.\";\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Item item = new Item();\n+        item.setItemData(key);\n+        em.persist(item);\n+        em.flush();\n+        em.getTransaction().commit();\n+        assertEquals(key, item.getItemData());\n+        \n+        int id = item.getItemId();\n+        emf.getCache().evictAll();\n+\n+        assertEquals(key, item.getItemData());\n+\n+        em.setProperty(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.USE);\n+        em.setProperty(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.USE);\n+        Map<String, Object> properties = em.getProperties();\n+        if (!properties.containsKey(JPAProperties.CACHE_STORE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_STORE_MODE + \" properties be returned\");\n+        }\n+        if (!properties.containsKey(JPAProperties.CACHE_RETRIEVE_MODE)) {\n+            System.err.println(properties);\n+            fail(\"Expected \" + JPAProperties.CACHE_RETRIEVE_MODE + \" properties be returned\");\n+        }\n+        Map<String, Object> paramProperties = new HashMap<String, Object>();\n+        paramProperties.put(JPAProperties.CACHE_STORE_MODE, CacheStoreMode.BYPASS);\n+        paramProperties.put(JPAProperties.CACHE_RETRIEVE_MODE, CacheRetrieveMode.BYPASS);\n+        Item fItem = em.find(Item.class, id, paramProperties);\n+        assertEquals(key, fItem.getItemData());\n+        assertNotCached(Item.class, id);\n+\n+        fItem.setItemData(updatedKey);\n+        assertEquals(updatedKey, fItem.getItemData());\n+\n+        em.refresh(fItem, paramProperties);\n+        assertEquals(key, fItem.getItemData());\n+        assertNotCached(Item.class, id);\n+\n+        Object mode = em.getProperties().get(JPAProperties.CACHE_STORE_MODE);\n+        assertEquals(mode, CacheStoreMode.USE);        \n+        mode = em.getProperties().get(JPAProperties.CACHE_RETRIEVE_MODE);\n+        assertEquals(mode, CacheRetrieveMode.USE);        \n+    }\n+\n     void assertCached(Class<?> cls, Object oid) {\n         assertTrue(cls + \":\" + oid + \" should be in L2 cache, but not\", emf.getCache().contains(cls, oid));\n     }"},{"sha":"ec09c2f8a3149c69e229536f4d5ca0020212c87f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1c2f4470a25dd7aa267de69d28e240c104efada2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1c2f4470a25dd7aa267de69d28e240c104efada2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=1c2f4470a25dd7aa267de69d28e240c104efada2","patch":"@@ -487,8 +487,8 @@ public void setLifecycleListenerCallbackMode(int callbackMode) {\n     @SuppressWarnings(\"unchecked\")\n     public <T> T find(Class<T> cls, Object oid, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        configureCurrentCacheModes(getFetchPlan(), properties);\n-        configureCurrentFetchPlan(pushFetchPlan(), properties, mode, true);\n+        configureCurrentCacheModes(pushFetchPlan(), properties);\n+        configureCurrentFetchPlan(getFetchPlan(), properties, mode, true);\n         try {\n             oid = _broker.newObjectId(cls, oid);\n             return (T) _broker.find(oid, true, this);\n@@ -765,7 +765,6 @@ public void refresh(Object entity, LockModeType mode, Map<String, Object> proper\n                 Log log = _broker.getConfiguration().getConfigurationLog();\n                 log.warn(_loc.get(\"cache-retrieve-override\", Exceptions.toString(entity)));\n             }\n-                \n         }\n         try {\n             _broker.refresh(entity, this);\n@@ -1187,8 +1186,8 @@ public void lock(Object entity, LockModeType mode, Map<String, Object> propertie\n         assertNotCloseInvoked();\n         assertValidAttchedEntity(LOCK, entity);\n         _broker.assertActiveTransaction();\n-        configureCurrentCacheModes(getFetchPlan(), properties);\n-        configureCurrentFetchPlan(pushFetchPlan(), properties, mode, false);\n+        configureCurrentCacheModes(pushFetchPlan(), properties);\n+        configureCurrentFetchPlan(getFetchPlan(), properties, mode, false);\n         try {\n             _broker.lock(entity, MixedLockLevelsHelper.toLockLevel(mode),\n                 _broker.getFetchConfiguration().getLockTimeout(), this);"}]}

