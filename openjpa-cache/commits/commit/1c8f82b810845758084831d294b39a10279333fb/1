{"sha":"1c8f82b810845758084831d294b39a10279333fb","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjOGY4MmI4MTA4NDU3NTgwODQ4MzFkMjk0YjM5YTEwMjc5MzMzZmI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-06T15:08:39Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-06T15:08:39Z"},"message":"Move LockManager API back to using int timeouts, since that's the way they're\nhandled elsewhere (FetchConfiguration, Broker, etc). Only use the lock timeout\non a forUpdate query if it is greater than the configured query timeout. \nSelects that are made *only* to lock a row (rather than to query data, with \nlocking as a side effect) still use the lock timeout exclusively, ignoring the \nquery timeout.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@526192 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57f3329a2134f84c897637d6b3f6e0de49ad4fd9","url":"https://api.github.com/repos/apache/openjpa/git/trees/57f3329a2134f84c897637d6b3f6e0de49ad4fd9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c8f82b810845758084831d294b39a10279333fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c8f82b810845758084831d294b39a10279333fb","html_url":"https://github.com/apache/openjpa/commit/1c8f82b810845758084831d294b39a10279333fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c8f82b810845758084831d294b39a10279333fb/comments","author":null,"committer":null,"parents":[{"sha":"1773160684ce1f6fb932571b9a2c08023777a9ae","url":"https://api.github.com/repos/apache/openjpa/commits/1773160684ce1f6fb932571b9a2c08023777a9ae","html_url":"https://github.com/apache/openjpa/commit/1773160684ce1f6fb932571b9a2c08023777a9ae"}],"stats":{"total":49,"additions":25,"deletions":24},"files":[{"sha":"bbb50dafba26ffd2d029c23015bb675f9e49a279","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/1c8f82b810845758084831d294b39a10279333fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/1c8f82b810845758084831d294b39a10279333fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=1c8f82b810845758084831d294b39a10279333fb","patch":"@@ -86,7 +86,7 @@ public void loadedForUpdate(OpenJPAStateManager sm) {\n             setLockLevel(sm, LOCK_DATASTORE_ONLY);\n     }\n \n-    protected void lockInternal(OpenJPAStateManager sm, int level, long timeout,\n+    protected void lockInternal(OpenJPAStateManager sm, int level, int timeout,\n         Object sdata) {\n         // we can skip any already-locked instance regardless of level because\n         // we treat all locks the same (though super doesn't)\n@@ -103,7 +103,7 @@ protected void lockInternal(OpenJPAStateManager sm, int level, long timeout,\n      * Lock the specified instance row by issuing a \"SELECT ... FOR UPDATE\"\n      * statement.\n      */\n-    private void lockRow(OpenJPAStateManager sm, long timeout) {\n+    private void lockRow(OpenJPAStateManager sm, int timeout) {\n         // assert that the dictionary supports the \"SELECT ... FOR UPDATE\"\n         // construct; if not, and we the assertion does not throw an\n         // exception, then just return without locking\n@@ -136,7 +136,7 @@ private void lockRow(OpenJPAStateManager sm, long timeout) {\n                     if (log.isWarnEnabled())\n                         log.warn(_loc.get(\"millis-query-timeout\"));\n                 }\n-                stmnt.setQueryTimeout((int) (timeout / 1000));\n+                stmnt.setQueryTimeout(timeout / 1000);\n             }\n             rs = stmnt.executeQuery();\n             if (!rs.next())\n@@ -145,19 +145,10 @@ private void lockRow(OpenJPAStateManager sm, long timeout) {\n             throw SQLExceptions.getStore(se, dict);\n         } finally {\n             if (stmnt != null)\n-                try {\n-                    stmnt.close();\n-                } catch (SQLException se) {\n-                }\n+                try { stmnt.close(); } catch (SQLException se) {}\n             if (rs != null)\n-                try {\n-                    rs.close();\n-                } catch (SQLException se) {\n-                }\n-            try {\n-                conn.close();\n-            } catch (SQLException se) {\n-            }\n+                try { rs.close(); } catch (SQLException se) {}\n+            try { conn.close(); } catch (SQLException se) {}\n         }\n     }\n "},{"sha":"7727b6e646fd16b8229c1dd2f2f83ce9cd183951","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/1c8f82b810845758084831d294b39a10279333fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1c8f82b810845758084831d294b39a10279333fb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=1c8f82b810845758084831d294b39a10279333fb","patch":"@@ -340,8 +340,19 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n             else\n                 stmnt = sql.prepareStatement(conn, rsType, -1);\n \n-            if (forUpdate)\n+            // if this is a locking select and the lock timeout is greater than\n+            // the configured query timeout, use the lock timeout\n+            if (forUpdate && _dict.supportsQueryTimeout && fetch != null \n+                && fetch.getLockTimeout() > stmnt.getQueryTimeout() * 1000) {\n+                int timeout = fetch.getLockTimeout();\n+                if (timeout < 1000) {\n+                    timeout = 1000; \n+                    Log log = _conf.getLog(JDBCConfiguration.LOG_JDBC);\n+                    if (log.isWarnEnabled())\n+                        log.warn(_loc.get(\"millis-query-timeout\"));\n+                }\n                 stmnt.setQueryTimeout(fetch.getLockTimeout() / 1000);\n+            }\n             rs = stmnt.executeQuery();\n         } catch (SQLException se) {\n             // clean up statement"},{"sha":"b0a3a5c6058e26e0090e75f83b84f6a3a1bc19ab","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1c8f82b810845758084831d294b39a10279333fb/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1c8f82b810845758084831d294b39a10279333fb/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=1c8f82b810845758084831d294b39a10279333fb","patch":"@@ -48,11 +48,8 @@ cant-lock-on-load: The database is unable to lock this query.  Each object \\\n start-trans-for-lock: Though you are using optimistic transactions, OpenJPA is \\\n \tnow beginning a datastore transaction because you have requested a lock \\\n \ton some data.\n-millis-timeout: JDBC lock manager does not support millisecond-granularity \\\n-\ttimeouts.  Use timeouts that are multiples of 1000 for even second values.\n-millis-query-timeout: JDBC lock manager does not support \\\n-\tmillisecond-granularity timeouts.  Use timeouts that are multiples \\\n-\tof 1000 for even second values.\n+millis-query-timeout: JDBC locking does not support millisecond-granularity \\\n+    timeouts.  Use timeouts that are multiples of 1000 for even second values.\n batch-not-supported: The update count for the statement was an invalid \\\n \tvalue ({0}). This indicates that your database or JDBC driver does not \\\n \thave complete support for executing batch statements. Batch \\\n@@ -101,4 +98,4 @@ bad-level: Invalid isolation level. Valid levels are -1, \\\n     Connection.TRANSACTION_NONE, Connection.TRANSACTION_READ_UNCOMMITTED, \\ \n     Connection.TRANSACTION_READ_COMMITTED, \\\n     Connection.TRANSACTION_REPEATABLE_READ, or \\\n-    Connection.TRANSACTION_SERIALIZABLE. Specified value: {0}.\n\\ No newline at end of file\n+    Connection.TRANSACTION_SERIALIZABLE. Specified value: {0}."},{"sha":"683ff765112bbec475f18862dc0181dcda7b7b75","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1c8f82b810845758084831d294b39a10279333fb/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1c8f82b810845758084831d294b39a10279333fb/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=1c8f82b810845758084831d294b39a10279333fb","patch":"@@ -161,4 +161,6 @@ oracle-timestamp-bug: An ArrayIndexOutOfBoundsException has occured when \\\n     worked around by setting the \"SupportsTimestampNanos\" DBDictionary \\\n     property to \"true\".\n isolation-level-config-not-supported: This DBDictionary does not support \\\n-    customization of isolation levels on a per-query basis. DBDictionary: {0}.\n\\ No newline at end of file\n+    customization of isolation levels on a per-query basis. DBDictionary: {0}.\n+millis-query-timeout: JDBC locking does not support millisecond-granularity \\\n+    timeouts.  Use timeouts that are multiples of 1000 for even second values."},{"sha":"36c1f60fd500d7972857b8662fd04e085eee9609","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1c8f82b810845758084831d294b39a10279333fb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/1c8f82b810845758084831d294b39a10279333fb/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java?ref=1c8f82b810845758084831d294b39a10279333fb","patch":"@@ -90,7 +90,7 @@ public void lock(OpenJPAStateManager sm, int level, int timeout,\n      *\n      * @see StoreContext#transactional\n      */\n-    protected void lockInternal(OpenJPAStateManager sm, int level, long timeout,\n+    protected void lockInternal(OpenJPAStateManager sm, int level, int timeout,\n         Object sdata) {\n         // Set lock level first to prevent infinite recursion with\n         // transactional(..) call"}]}

