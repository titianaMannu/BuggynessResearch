{"sha":"1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","node_id":"MDY6Q29tbWl0MjA2MzY0OjFjOWYwYWUwYWU5YzQ4NjFkOWYwMTgxYjNmMDE3NGRmZmI3ZWI4N2E=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-19T20:55:30Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-07-19T20:55:30Z"},"message":"OPENJPA-287\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557768 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba458d529df6e9f6beaa19f9e6eb4c90d4807b98","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba458d529df6e9f6beaa19f9e6eb4c90d4807b98"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","html_url":"https://github.com/apache/openjpa/commit/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0260d8de471d132c570e33e747f01488272dd260","url":"https://api.github.com/repos/apache/openjpa/commits/0260d8de471d132c570e33e747f01488272dd260","html_url":"https://github.com/apache/openjpa/commit/0260d8de471d132c570e33e747f01488272dd260"}],"stats":{"total":284,"additions":275,"deletions":9},"files":[{"sha":"f3e2f1615530287ef32a1c3fdf7bfc13498ef4b8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","patch":"@@ -3508,7 +3508,7 @@ private BCMethod createGetMethod(FieldMetaData fmd) {\n         BCMethod newgetter = _pc.declareMethod(PRE + meth.getName(),\n             meth.getReturnType(), meth.getParameterTypes());\n         newgetter.setAccessFlags(getter.getAccessFlags());\n-        newgetter.makePrivate();\n+        newgetter.makeProtected(); \n         transferCodeAttributes(getter, newgetter);\n         return getter;\n     }\n@@ -3539,7 +3539,7 @@ private BCMethod createSetMethod(FieldMetaData fmd) {\n         BCMethod newsetter = _pc.declareMethod(PRE + setter.getName(),\n             setter.getReturnName(), setter.getParamNames());\n         newsetter.setAccessFlags(setter.getAccessFlags());\n-        newsetter.makePrivate();\n+        newsetter.makeProtected();\n         transferCodeAttributes(setter, newsetter);\n         return setter;\n     }"},{"sha":"a39681531651b05cbeb2892d327563ebf1329a6f","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":18,"deletions":7,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","patch":"@@ -391,18 +391,29 @@\n                                     <path refid=\"maven.compile.classpath\"/>\n                                     <path refid=\"maven.dependency.classpath\"/>\n                                 </path>\n-\t\t\t\t\t\t\t\t<taskdef name=\"openjpac\" classname=\n+                                <taskdef name=\"openjpac\" classname=\n                                     \"org.apache.openjpa.ant.PCEnhancerTask\">\n-\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\"/>\n-\t\t\t\t\t\t\t\t</taskdef>\n+                                    <classpath refid=\"cp\"/>\n+                                </taskdef>\n                                 <fileset id=\"enhance.path.ref\"\n                                     dir=\"${project.build.testOutputDirectory}\">\n                                     <include name=\"**/*.class\"/>\n+                                    <exclude name=\"**/inheritance/serializable/*.class\"/>\n                                 </fileset>\n-\t\t\t\t\t\t\t\t<openjpac>\n-\t\t\t\t\t\t\t\t\t<classpath refid=\"cp\"/>\n-\t\t\t\t\t\t\t\t\t<fileset refid=\"enhance.path.ref\"/>\n-\t\t\t\t\t\t\t\t</openjpac>\n+                                <openjpac>\n+                                    <classpath refid=\"cp\"/>\n+                                    <fileset refid=\"enhance.path.ref\"/>\n+                                </openjpac>\n+                                <!--  Set detach state for serialization tests -->\n+                                <openjpac>\n+                                    <config detachState=\"fgs(DetachedStateField=true)\"/>\n+                                    <classpath refid=\"cp\"/>\n+                                    <fileset dir=\"${project.build.testOutputDirectory}\"> \n+                                        <include name=\"**/inheritance/serializable/*.class\"/>\n+                                        <!--  include files from orm.xml -->\n+                                        <include name=\"**/xml/*.class\"/>\n+                                    </fileset>\n+                                </openjpac>\n                             </tasks>\n                         </configuration>\n                         <goals>"},{"sha":"031fea4df45c4ea39a57caea14c386902e78de2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Employee.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Employee.java?ref=1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.serializable;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class Employee extends Person {\n+\n+    private float salary;\n+\n+    public float getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + Float.floatToIntBits(getSalary());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (!super.equals(obj))\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        final Employee other = (Employee) obj;\n+        if (Float.floatToIntBits(getSalary()) != Float.floatToIntBits(other\n+                .getSalary()))\n+            return false;\n+        return true;\n+    }\n+\n+}"},{"sha":"72143db00c77a35d359ef974171feee4db25839c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Person.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Person.java","raw_url":"https://github.com/apache/openjpa/raw/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/Person.java?ref=1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.serializable;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Person implements Serializable {\n+\n+    private static final long serialVersionUID = -862917178229746730L;\n+\n+    private int id; \n+    \n+    private String firstName;\n+    \n+    private String lastName;\n+\n+    @Id\n+    @GeneratedValue\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+                + ((getFirstName() == null) ? 0 : getFirstName().hashCode());\n+        result = prime * result + getId();\n+        result = prime * result\n+                + ((getLastName() == null) ? 0 : getLastName().hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        final Person other = (Person) obj;\n+        if (getFirstName() == null) {\n+            if (other.getFirstName() != null)\n+                return false;\n+        } else if (!getFirstName().equals(other.getFirstName()))\n+            return false;\n+        if (getId() != other.getId())\n+            return false;\n+        if (getLastName() == null) {\n+            if (other.getLastName() != null)\n+                return false;\n+        } else if (!getLastName().equals(other.getLastName()))\n+            return false;\n+        return true;\n+    } \n+}"},{"sha":"179c7319871f8765cc5bfed7dea60a4d36febe85","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/TestSerialization.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/TestSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/TestSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/serializable/TestSerialization.java?ref=1c9f0ae0ae9c4861d9f0181b3f0174dffb7eb87a","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.serializable;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestSerialization extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Person.class, Employee.class, \"openjpa.DetachState\",\n+                \"fgs(DetachedStateField=true)\");\n+    }\n+\n+    /**\n+     * Simulates detaching and sending an entity to a remote client. The remote\n+     * client updates the detached entity and sends it back to the server. The\n+     * server merges the entity back into a persistence context and commits the\n+     * changes. \n+     */\n+    public void testDetachedUpdate() {\n+        Employee emp = new Employee();\n+        emp.setFirstName(\"John\");\n+        emp.setLastName(\"Doe\");\n+        emp.setSalary(15000);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(emp);\n+        em.refresh(emp);\n+        int id = emp.getId();\n+\n+        em.getTransaction().commit();\n+\n+        // detach\n+        em.clear();\n+        emp.setFirstName(\"Jane\");\n+\n+        Employee deserialized = (Employee) serializeObject(emp);\n+\n+        assertNotNull(deserialized);\n+        assertEquals(emp, deserialized);\n+\n+        em.getTransaction().begin();\n+        em.merge(deserialized);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        emp = em.find(Employee.class, id);\n+\n+        assertEquals(deserialized, emp);\n+    }\n+\n+    /**\n+     * Helper to serialize an object to a byte[]\n+     */\n+    private Object serializeObject(Object orig) {\n+        Object deserialized = null;\n+\n+        try {\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            ObjectOutputStream oos = new ObjectOutputStream(baos);\n+            oos.writeObject(orig);\n+\n+            ByteArrayInputStream bais = new ByteArrayInputStream(baos\n+                    .toByteArray());\n+            ObjectInputStream ois = new ObjectInputStream(bais);\n+\n+            deserialized = ois.readObject();\n+        } catch (Exception e) {\n+            fail(e.toString());\n+        }\n+        return deserialized;\n+    }\n+}"}]}

