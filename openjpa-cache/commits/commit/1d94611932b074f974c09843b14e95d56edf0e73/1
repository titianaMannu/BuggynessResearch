{"sha":"1d94611932b074f974c09843b14e95d56edf0e73","node_id":"MDY6Q29tbWl0MjA2MzY0OjFkOTQ2MTE5MzJiMDc0Zjk3NGMwOTg0M2IxNGU5NWQ1NmVkZjBlNzM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-18T12:37:31Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-18T12:37:31Z"},"message":"OPENJPA-947. Reduce testcase logging\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@755580 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd658389c072bd3c5fbf9379a71da879fb4ff9e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/fd658389c072bd3c5fbf9379a71da879fb4ff9e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1d94611932b074f974c09843b14e95d56edf0e73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1d94611932b074f974c09843b14e95d56edf0e73","html_url":"https://github.com/apache/openjpa/commit/1d94611932b074f974c09843b14e95d56edf0e73","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1d94611932b074f974c09843b14e95d56edf0e73/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ed8ec0243236144cbc7f88a56e6a30cc9c8fcf72","url":"https://api.github.com/repos/apache/openjpa/commits/ed8ec0243236144cbc7f88a56e6a30cc9c8fcf72","html_url":"https://github.com/apache/openjpa/commit/ed8ec0243236144cbc7f88a56e6a30cc9c8fcf72"}],"stats":{"total":136,"additions":34,"deletions":102},"files":[{"sha":"080611280351eee52c9591033363739fce6f6001","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -600,6 +600,9 @@\n                         <exclude>org/apache/openjpa/persistence/meta/TestSequenceAssigned.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/meta/TestValueStrategies.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java</exclude>\n+                        \n+                        <!-- TestPMMemory creates heapdumps etc and there's no real asserts within the test.  -->\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestPMMemory.java</exclude>\n                   \n                     </excludes>\n                     <systemProperties>"},{"sha":"82c9d30b083410ba3c9095eced7e4ae3a71c3fe2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -159,7 +159,6 @@ void assertException(final Throwable actual, Class targetType,\n \t\tassertNotNull(actual);\r\n \t\tClass actualType = actual.getClass();\r\n \t\tif (!targetType.isAssignableFrom(actualType)) {\r\n-\t\t\tactual.printStackTrace();\r\n \t\t\tfail(targetType.getName() + \" is not assignable from \"\r\n \t\t\t\t\t+ actualType.getName());\r\n \t\t}\r\n@@ -178,7 +177,6 @@ void assertException(final Throwable actual, Class targetType,\n \t\t\t\t\tnested     = next;\r\n \t\t\t\t}\r\n \t\t\t}\r\n-\t\t\tactual.printStackTrace();\r\n \t\t\tfail(\"No nested type \" + nestedTargetType + \" in \" + actual);\r\n \t\t}\r\n \t}\r"},{"sha":"870533b3151849dffd8a727e688846b99d10ccca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestSpecificationConfiguration.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestSpecificationConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestSpecificationConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestSpecificationConfiguration.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -50,8 +50,7 @@ public void testSpecificationVersionIsJPA2() {\n     }\r\n     \r\n     public void testLowerVersionCanBeSet() {\r\n-        super.setUp(\"openjpa.Specification\", \"JPA 1.0\", \r\n-            \"openjpa.Log\", \"DefaultLevel=WARN\");\r\n+        super.setUp(\"openjpa.Specification\", \"JPA 1.0\");\r\n         Specification spec = getSpecifcation();\r\n         \r\n         assertNotNull(spec);\r\n@@ -69,8 +68,7 @@ public void testHigherVersionCanNotBeSet() {\n     }\r\n     \r\n     public void testDifferentSpecCanBeSet() {\r\n-        super.setUp(\"openjpa.Specification\", \"jdo 3.0\", \r\n-            \"openjpa.Log\", \"DefaultLevel=WARN\");\r\n+        super.setUp(\"openjpa.Specification\", \"jdo 3.0\");\r\n     }\r\n     \r\n     public void testSpecCanBeSetToNullString() {\r"},{"sha":"f2884d5373b470e8ad4e7a1283d84eca05a3fbe0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -225,7 +225,6 @@ public void testInvalidNonPluginValues() {\n             config.setConnectionFactoryMode(\"aoeu\");\r\n             fail(\"setting the ConnectionFactoryMode to aoeu should fail\");\r\n         } catch (RuntimeException re) {\r\n-            re.printStackTrace();\r\n             // as expected ... make sure the exception suggests the\r\n             // valid names in the message.\r\n             assertTrue(-1 != re.getMessage().indexOf(\"managed\"));\r"},{"sha":"ed695c9d2c8d9fd64cbe97e5db1f783396ea6730","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -572,11 +572,6 @@ private void executeActually(String jpql, QueryDefinition q, Object...p) {\n \t\t\t\t\t+ \"JPQL [\" + jpql + \"]\\r\\n\"\r\n \t\t\t\t\t+ \"error : \" + jpqlError.getMessage());\r\n \t\t} else {\r\n-\t\t\tSystem.err.println(\"WARN: Both JPQL and QueryDefinition are invalid\"\r\n-\t\t\t\t\t  + \"\\r\\nJPQL \" + jpql + \"\\r\\n\"\r\n-\t\t\t\t\t  + \"error :\" + jpqlError.getMessage() + \"\\r\\n\"\r\n-\t\t\t\t\t  + \"Criteria \" + qb.toJPQL(q) + \"\\r\\n\"\r\n-\t\t\t\t\t  + \"error : \" + criteriaError.getMessage());\r\n \t\t\tcompareLiterally(jpql, q);\r\n \t\t}\r\n \t}\r"},{"sha":"8267123a4bd735c493fc599559996634806e7d2e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/stats/TestStatistics.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/stats/TestStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/stats/TestStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/stats/TestStatistics.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -58,7 +58,6 @@ void startCaching(Class<?> cls) {\n \t */\r\n \t@SuppressWarnings(\"unchecked\")\r\n     public void testPerfectCache() {\r\n-\t\tprint(stats);\r\n \t\t// populate a bunch of customer and order\r\n \t\tint nCustomer = 20;\r\n \t\tint nOrder    = 10;\r\n@@ -102,12 +101,7 @@ void assertStatistics(CacheStatistics stats, long[] expected) {\n \t}\r\n \t\r\n \tvoid print(CacheStatistics stats) {\r\n-\t\tSystem.err\r\n-\t\t\t\t.print(\"r:\" + stats.getTotalReadCount() + \" w:\"\r\n-\t\t\t\t\t\t+ stats.getTotalWriteCount() + \" h:\"\r\n-\t\t\t\t\t\t+ stats.getTotalHitCount());\r\n-\t\tSystem.err.println(\" since last reset r:\" + stats.getReadCount()\r\n-\t\t\t\t+ \" w:\" + stats.getWriteCount() + \" h:\" + stats.getHitCount());\r\n+\t\t// TODO log instead of printing to stderr.\r\n \t}\r\n \r\n }\r"},{"sha":"ab9bc11fe3b51836b8e22825dea82cd57445828b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -1148,7 +1148,6 @@ public void createItem2(EntityManager em, int id) {\n     }\r\n \r\n     public void createItem3(EntityManager em, int id) {\r\n-        System.out.println(\"In CreateItem3, id = \" + id);\r\n         Item3 item = new Item3();\r\n         item.setId(id);\r\n         for (int i = 0; i < numImagesPerItem; i++) {\r"},{"sha":"901b015ceaef44645d2fe3c1e1443fa9fd822cdd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddableXml.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddableXml.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddableXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddableXml.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -696,8 +696,6 @@ public void testOrphanRemovalTargetSetNull() {\n         createOrphanRemoval();\r\n         EntityManager em = emf.createEntityManager();\r\n         CustomerXml c = em.find(CustomerXml.class, 1);\r\n-        System.err.println(\"C name = \" + c.getName());\r\n-        System.err.println(\"size before = \" + c.getOrders().size());\r\n         c.setOrders(null);\r\n         em.getTransaction().begin();\r\n         em.persist(c);\r"},{"sha":"e8a6af75079e531fa41611f1efa9bb4728df82d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -125,10 +125,6 @@ protected void doTest(Class providerClass, String classProps1,\n         for (Iterator iter = listener2.added.iterator(); iter.hasNext();) {\r\n             Id roid = Id.newInstance(RuntimeTest1.class, oid);\r\n             Id it = (Id) iter.next();\r\n-            System.out.println(\"===ROID: \" + roid.getId() + \" +++== ITER: \" +\r\n-                it.getId() + \" Content: \" + listener2.added + \"ROID Cont: \" +\r\n-                roid);\r\n-            System.out.println(\"Result of COMP \" + it.equals(roid));\r\n             //FixMe --det. why it.equals(roid) fails when the are actually equal\r\n             if (it.toString().equals(roid.toString())) {\r\n                 pass = true;\r\n@@ -162,10 +158,6 @@ protected void doTest(Class providerClass, String classProps1,\n         pass = false;\r\n         for (Iterator iter = listener2.updated.iterator(); iter.hasNext();) {\r\n             Id it = (Id) iter.next();\r\n-            System.out.println(\"===ROID: \" + roid.getId() + \"+++== ITER: \" +\r\n-                it.getId() + \"Content: \" + listener2.added);\r\n-            System.out.println(\"Result of COMP \" + it.equals(roid));\r\n-\r\n             if (it.toString().equals(roid.toString())) {\r\n                 pass = true;\r\n                 break;\r\n@@ -198,10 +190,6 @@ protected void doTest(Class providerClass, String classProps1,\n         pass = false;\r\n         for (Iterator iter = listener2.deleted.iterator(); iter.hasNext();) {\r\n             Id it = (Id) iter.next();\r\n-            System.out.println(\"===ROID: \" + roid.getId() + \"+++== ITER: \" +\r\n-                it.getId() + \"Content: \" + listener2.added);\r\n-            System.out.println(\"Result of COMP \" + it.equals(roid));\r\n-\r\n             if (it.toString().equals(roid.toString())) {\r\n                 pass = true;\r\n                 break;\r"},{"sha":"3b6266ceb8d64192ad96d067fa0555d07a3caf50","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/TestAutoIncrement.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/TestAutoIncrement.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/TestAutoIncrement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/TestAutoIncrement.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -52,8 +52,7 @@ public void setUp() throws Exception {\n \t\t} else {\r\n \t\t\tsuper.setUp(CLEAR_TABLES, PObjectNative.class,\r\n \t\t\t\t\t\"openjpa.jdbc.DBDictionary\",\r\n-\t\t\t\t\t\"oracle(UseTriggersForAutoAssign=true)\",\r\n-\t\t\t\t\t\"openjpa.Log\", \"SQL=TRACE\");\r\n+\t\t\t\t\t\"oracle(UseTriggersForAutoAssign=true)\");\r\n \t\t}\r\n \t}\r\n \r"},{"sha":"c4ec2200a8a7b905489a14ae5c7434b23bd4c167","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -41,6 +41,7 @@\n \tprivate static double DBL_VALUE = 3.0;\r\n \t\r\n \tprivate EntityManager em;\r\n+\t\r\n \t@Override\r\n \tpublic void setUp() throws Exception {\r\n \t\tsuper.setUp(CLEAR_TABLES, Binder.class);\r"},{"sha":"b99c1b2961e6285d92c578efa5009ca8279f5918","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestFinderCache.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestFinderCache.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestFinderCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestFinderCache.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -67,25 +67,13 @@ public void setUp() {\n     }\r\n     \r\n     public void testFinder() {\r\n-        int N = 200;\r\n-        \r\n         emf = createEMF(\"openjpa.jdbc.FinderCache\", \"false\");\r\n         run(1, Book.class, BOOK_IDS); // for warmup\r\n         \r\n         assertNull(getCache());\r\n-        long without = run(N, Book.class, BOOK_IDS);\r\n \r\n         emf = createEMF(\"openjpa.jdbc.FinderCache\", \"true\");\r\n         assertNotNull(getCache());\r\n-        long with = run(N, Book.class, BOOK_IDS);\r\n-        \r\n-        getCache().getStatistics().dump(System.out);\r\n-        \r\n-        long pct = (without-with)*100/without;\r\n-        System.err.println(BOOK_IDS.length*N + \" find\");\r\n-        System.err.println(\"with    \" + with);\r\n-        System.err.println(\"without \" + without);\r\n-        System.err.println(\"delta   \" + (pct > 0 ? \"+\" : \"\") + pct + \"%\");\r\n     }\r\n     \r\n     public void testSQLEventListener() {\r"},{"sha":"699b3950e5b0f33694a22192f43e61db8a0b369a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -292,7 +292,6 @@ public void testQueryStatistics() {\n \t\t}\r\n \t\t\r\n \t\tQueryStatistics stats = getCache().getStatistics();\r\n-\t\tstats.dump(System.out);\r\n \r\n \t\tassertEquals(N1,      stats.getExecutionCount(jpql1));\r\n \t\tassertEquals(N2,      stats.getExecutionCount(jpql2));\r\n@@ -339,8 +338,6 @@ public void testResetQueryStatistics() {\n \t\t\tq2.getResultList();\r\n \t\t}\r\n \r\n-\t\tstats.dump(System.out);\r\n-\t\t\r\n \t\tassertEquals(N11,     stats.getExecutionCount(jpql1));\r\n \t\tassertEquals(N21,     stats.getExecutionCount(jpql2));\r\n \t\tassertEquals(N11+N21, stats.getExecutionCount());\r\n@@ -464,21 +461,10 @@ void compare(boolean isNamed, String jpql, int expectedCount, Object... params)\n \t\t\r\n \t\tlong delta = (without == 0) ? 0 : (without - with) * 100 / without;\r\n \t\t\r\n-\t\tString sql = getSQL(realJPQL);\r\n-\t\tlog(\"Execution time in nanos for \" + SAMPLE_SIZE\r\n-\t\t\t\t+ \" query execution with and without SQL cache:\" + with + \" \"\r\n-\t\t\t\t+ without + \" (\" + delta + \"%)\");\r\n-\t\tlog(\"JPQL: \" + realJPQL);\r\n-\t\tlog(\"SQL : \" + sql);\r\n \t\tif (delta < 0) {\r\n \t\t\tif (FAIL_ON_PERF_DEGRADE)\r\n \t\t\t\tassertFalse(\"change in execution time = \" + delta + \"%\", \r\n \t\t\t\t\t\tdelta < 0);\r\n-\t\t\telse \r\n-\t\t\t\tlog(\"*** WARN: Perforamce regression with cache.\" + \r\n-\t\t\t\t\t\" Execution time degrades by \" + delta + \"%\");\r\n-\t\t} else {\r\n-\t\t    log(\"change in execution time = +\" + delta + \"%\");\r\n \t\t}\r\n \t}\r\n \r\n@@ -495,7 +481,6 @@ long run(String jpql, Object[] params, boolean useCache, int N,\n \t */\r\n \tlong run(String jpql, Object[] params, boolean useCache, int N, \r\n \t\t\tboolean isNamedQuery, int expectedCount, boolean checkHits) {\r\n-\t    trace(\"Executing \" + N + \" times \" + (useCache ? \" with \" : \"without\") + \" cache\");\r\n \t\tList<Long> stats = new ArrayList<Long>();\r\n \t\tsql.clear();\r\n \t\tfor (int i = 0; i < N; i++) {\r\n@@ -559,15 +544,6 @@ String literal(String s) {\n \t    return \"'\"+s+\"'\";\r\n \t}\r\n \t\r\n-    void log(String s) {\r\n-        System.err.println(s);\r\n-    }\r\n-    \r\n-    void trace(String s) {\r\n-        if (Boolean.getBoolean(\"trace\"))\r\n-            System.err.println(s);\r\n-    }\r\n-\t\r\n \tvoid walk(List list) {\r\n \t    Iterator i = list.iterator();\r\n \t    while (i.hasNext())\r"},{"sha":"0ff7f4b8f64c3572c3783dc5009c0872ffce6f82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -43,8 +43,7 @@ public void testException() {\n             fail(\"Null value allowed\");\r\n         }\r\n         catch (Exception jfe) {\r\n-            System.out\r\n-                .println(\"Exception expected...Null value not allowed...\");\r\n+            // Exception expected...Null value not allowed...\r\n         }\r\n         endEm(pm);\r\n     }\r"},{"sha":"e3c4619008a3e9185ba4f7f9d6e62fbddf82100d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -38,8 +38,6 @@ public TestPojoWithoutAnnotationsCannotBePersisted(String name) {\n     }\r\n \r\n     public void setUp() {\r\n-        System.out.println(\"Running test \" + this.getName() + \" of \" +\r\n-            this.getClass().getSimpleName());\r\n         pojo = new UnAnnotPojo();\r\n         pojo.setName(\"failure\");\r\n         pojo.setNum(0);\r"},{"sha":"ebe5634bb8a3ab1ec8e94977d8114ded70a5b0a9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -43,8 +43,7 @@ void assertCommitFails(Object pc, boolean isNew,\n             fail();\n         } catch (Exception e) {\n             if (!expected.isAssignableFrom(e.getClass())) {\n-                e.printStackTrace();\n-                fail(\"Expected \" + expected.getName());\n+                fail(\"Expected \" + expected.getName() + \" receieved \" + e);\n             } \n         }\n     }\n@@ -56,11 +55,7 @@ void assertCommitSucceeds(Object pc, boolean isNew) {\n             em.persist(pc);\n         else \n             em.merge(pc);\n-        try {\n-            em.getTransaction().commit();\n-        } catch (RuntimeException e) {\n-            e.printStackTrace();\n-            fail();\n-        }\n+        \n+        em.getTransaction().commit();\n     }\n }"},{"sha":"dd968486f487fa4dd6ba9a131e85a4747af89ef5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -44,7 +44,6 @@ public void setUp () {\n \t\taid = a.getId ();\n \t\tem.getTransaction ().commit ();\n \t\tem.close ();\n-\t\tSystem.out.println (\"ChainEntityA id = \" + aid);\n \t}\n \n \tpublic void testChainEntities () {"},{"sha":"6cac17b6e701f6771184c31408afb31098414e47","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/LibServiceImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/LibServiceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/LibServiceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/LibServiceImpl.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -35,14 +35,12 @@\n \n     private void closeEM(EntityManager em) {\n         if (em != null && em.isOpen()) {\n-            System.out.println(\"Closing EM: \" + em);\n             em.close();\n         }\n     }\n \n     private EntityManager openEM() {\n         EntityManager em = txEMF.getTransactionalEntityManager();\n-        System.out.println(\"Opening EM: \" + em);\n         return em;\n     }\n "},{"sha":"0a869d0974c91321250c96bff197d43a228b3023","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/TestLibService.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/TestLibService.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/TestLibService.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/TestLibService.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -81,7 +81,6 @@ public void testFindBookByTitle() {\n                     \"unexpected number of subjects for the book \" + qTitle, 2,\n                     subjects.size());\n         } catch (Exception e) {\n-            e.printStackTrace();\n             fail(\"Unable to findBookByTitle\");\n         }\n     }\n@@ -98,7 +97,6 @@ public void testFindBorrowerByName() {\n             assertEquals(\"the borrower found is not \" + bName, bName, \n                     harry.getName());\n         } catch (Exception e) {\n-            e.printStackTrace();\n             fail(\"Unable to find borrower by name\");\n         }\n     }"},{"sha":"2dd4c640c23c6944a6dc692f5cb60d0f0c4baf44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -47,6 +47,8 @@\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n \n+import sun.security.action.GetLongAction;\n+\n /**\n  * Base test class providing persistence utilities.\n  * \n@@ -508,9 +510,6 @@ protected boolean isRunsOnCurrentPlatform() {\n                     // swallow;\n                 }\n             }\n-            System.err.println(\"WARN: \" + getClass().getName() + \" not run \" +\n-                \"in the current platform because none of the specified \" + \n-                \" driver(s) \" + Arrays.toString(drivers) + \" can be loaded\");\n         }\n         return false;\n     }"},{"sha":"c64d41abbe6f1475a4cb6560ce68e2561217128d","filename":"openjpa-slice/pom.xml","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -34,11 +34,11 @@\n \t\t<version>2.0.0-SNAPSHOT</version>\n \t</parent>\n \t<properties>\n+        <test.jvm.arguments>-Xmx500m</test.jvm.arguments>\n \t\t<openjpa.loglevel>INFO</openjpa.loglevel>\n \t\t<!-- to set debug arguments, you might set the following at the command line:\n-\t\t\t-Dsurefire.jvm.args=\"-Xmx500m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\"\n+\t\t\t-Dtest.jvm.args=\"-Xmx500m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\"\n \t\t-->\n-        <surefire.jvm.args>-Xmx500m</surefire.jvm.args>\n \t</properties>\n \t<dependencies>\n \t\t<dependency>\n@@ -147,6 +147,24 @@\n \t\t\t\t\t</execution>\n \t\t\t\t</executions>\n \t\t\t</plugin>\n+            \n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <argLine>${test.jvm.arguments}</argLine>\n+                    <systemProperties>\n+                        <property>\n+                            <name>openjpa.Log</name>\n+                            <value>DefaultLevel=${openjpa.loglevel}</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.stream.error.file</name>\n+                            <value>target/derby.log</value>\n+                        </property>\n+                    </systemProperties>\n+                </configuration>\n+            </plugin>\n \t\t</plugins>\n \t</build>\n </project>"},{"sha":"0f23f8656ef075fdf21f3c3448c3f93beba87154","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/1d94611932b074f974c09843b14e95d56edf0e73/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=1d94611932b074f974c09843b14e95d56edf0e73","patch":"@@ -23,9 +23,6 @@\n         <class>org.apache.openjpa.slice.Person</class>\r\n         <class>org.apache.openjpa.slice.Address</class>\r\n         <class>org.apache.openjpa.slice.Country</class>\r\n-        <properties>\r\n-         <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE\"/>\r\n-        </properties>\r\n     </persistence-unit>\r\n     \r\n     \r\n@@ -42,7 +39,6 @@\n          <property name=\"openjpa.slice.DistributionPolicy\"  value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n          <property name=\"openjpa.slice.ThreadingPolicy\"     value=\"fixed\"/>\r\n \r\n-         <property name=\"openjpa.Log\"                       value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\r\n          <property name=\"openjpa.ConnectionDriverName\"      value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n          <property name=\"openjpa.ConnectionUserName\"        value=\"\"/>\r\n          <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\r\n@@ -70,7 +66,6 @@\n          <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n          \r\n          <property name=\"openjpa.Multithreaded\" value=\"false\"/>\r\n-         <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\r\n          <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\r\n          <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n          <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n@@ -100,7 +95,6 @@\n             <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n \t        <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\r\n             <property name=\"openjpa.QueryCompilationCache\" value=\"false\"/>\r\n-   \t        <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n             <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n             <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n       \t</properties>\r\n@@ -123,7 +117,6 @@\n             \r\n             <property name=\"openjpa.Connection2URL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\r\n-            <property name=\"openjpa.Log\" value=\"DefaultLevel=WARN, Enhance=TRACE, SQL=TRACE\"/>\r\n             <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n         </properties>\r\n    </persistence-unit>\r\n@@ -144,7 +137,6 @@\n          <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql://localhost/slice2\"/>\r\n          \r\n          <property name=\"openjpa.Multithreaded\" value=\"false\"/>\r\n-         <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\r\n          <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\r\n          <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n          <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r"}]}

