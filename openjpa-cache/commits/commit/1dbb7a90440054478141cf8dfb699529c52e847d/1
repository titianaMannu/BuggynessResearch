{"sha":"1dbb7a90440054478141cf8dfb699529c52e847d","node_id":"MDY6Q29tbWl0MjA2MzY0OjFkYmI3YTkwNDQwMDU0NDc4MTQxY2Y4ZGZiNjk5NTI5YzUyZTg0N2Q=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-05T19:13:26Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-05T19:13:26Z"},"message":"Tests and fixes for entities with multiple same-typed embedded entities, which\nthemselves have relations to other entities.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@453321 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64e08ffab5110d9fb81e515ffea096c10dbcc870","url":"https://api.github.com/repos/apache/openjpa/git/trees/64e08ffab5110d9fb81e515ffea096c10dbcc870"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1dbb7a90440054478141cf8dfb699529c52e847d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1dbb7a90440054478141cf8dfb699529c52e847d","html_url":"https://github.com/apache/openjpa/commit/1dbb7a90440054478141cf8dfb699529c52e847d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1dbb7a90440054478141cf8dfb699529c52e847d/comments","author":null,"committer":null,"parents":[{"sha":"69d8dd3da9ebc66fe308e109b49744dc2c862d1d","url":"https://api.github.com/repos/apache/openjpa/commits/69d8dd3da9ebc66fe308e109b49744dc2c862d1d","html_url":"https://github.com/apache/openjpa/commit/69d8dd3da9ebc66fe308e109b49744dc2c862d1d"}],"stats":{"total":250,"additions":249,"deletions":1},"files":[{"sha":"e2ff5ed969ab00ed3cc981af7b0e4536590d17e3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/1dbb7a90440054478141cf8dfb699529c52e847d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/1dbb7a90440054478141cf8dfb699529c52e847d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=1dbb7a90440054478141cf8dfb699529c52e847d","patch":"@@ -392,8 +392,10 @@ public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n      */\n     private Joins eagerJoin(Joins joins, ClassMapping cls, boolean forceInner) {\n         boolean inverse = field.getJoinDirection() == field.JOIN_INVERSE;\n-        if (!inverse)\n+        if (!inverse) {\n             joins = join(joins, false);\n+            joins = setEmbeddedVariable(joins);\n+        }\n \n         // and join into relation\n         ForeignKey fk = field.getForeignKey(cls);\n@@ -404,6 +406,17 @@ private Joins eagerJoin(Joins joins, ClassMapping cls, boolean forceInner) {\n             field.getSelectSubclasses(), inverse, false);\n     }\n \n+    /**\n+     * If joining from an embedded owner, use variable to create a unique\n+     * alias in case owner contains other same-typed embedded relations.\n+     */\n+    private Joins setEmbeddedVariable(Joins joins) {\n+        if (field.getDefiningMetaData().getEmbeddingMetaData() == null)\n+            return joins;\n+        return joins.setVariable(field.getDefiningMetaData().\n+            getEmbeddingMetaData().getFieldMetaData().getName());\n+    }\n+\n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, int eagerMode) {\n         if (field.getJoinDirection() == field.JOIN_INVERSE)\n@@ -662,6 +675,8 @@ public Joins joinRelation(Joins joins, boolean forceOuter,\n                 throw RelationStrategies.unjoinable(field);\n             return joins;\n         }\n+\n+        joins = setEmbeddedVariable(joins);\n         if (forceOuter)\n             return joins.outerJoinRelation(field.getName(), \n                 field.getForeignKey(clss[0]), clss[0], "},{"sha":"3c70b133437e376601a3873fe9dfb5528790741a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/1dbb7a90440054478141cf8dfb699529c52e847d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","raw_url":"https://github.com/apache/openjpa/raw/1dbb7a90440054478141cf8dfb699529c52e847d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java?ref=1dbb7a90440054478141cf8dfb699529c52e847d","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+@Embeddable\r\n+public class EmbeddableWithRelation {\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne(cascade=CascadeType.ALL)\r\n+    private MultipleSameTypedEmbedded rel;\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public MultipleSameTypedEmbedded getRel() { \r\n+        return rel; \r\n+    }\r\n+\r\n+    public void setRel(MultipleSameTypedEmbedded rel) { \r\n+        this.rel = rel; \r\n+    }\r\n+}\r"},{"sha":"4cb9416f4766de5b48ce4f9950f6adc3f170e3d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/1dbb7a90440054478141cf8dfb699529c52e847d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/1dbb7a90440054478141cf8dfb699529c52e847d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java?ref=1dbb7a90440054478141cf8dfb699529c52e847d","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.AttributeOverride;\r\n+import javax.persistence.AssociationOverride;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Embedded;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class MultipleSameTypedEmbedded { \r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @Embedded\r\n+    @AttributeOverride(name=\"name\", column=@Column(name=\"E1_NAME\"))\r\n+    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E1_REL\"))\r\n+    private EmbeddableWithRelation embed1;\r\n+\r\n+    @Embedded\r\n+    @AttributeOverride(name=\"name\", column=@Column(name=\"E2_NAME\"))\r\n+    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E2_REL\"))\r\n+    private EmbeddableWithRelation embed2;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public EmbeddableWithRelation getEmbed1() {\r\n+        return embed1; \r\n+    }\r\n+\r\n+    public void setEmbed1(EmbeddableWithRelation embed1) {\r\n+        this.embed1 = embed1; \r\n+    }\r\n+\r\n+    public EmbeddableWithRelation getEmbed2() {\r\n+        return embed2; \r\n+    }\r\n+\r\n+    public void setEmbed2(EmbeddableWithRelation embed2) {\r\n+        this.embed2 = embed2; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"2004adf1eba65e258ad0e28ebc4919cc8f072ce2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/1dbb7a90440054478141cf8dfb699529c52e847d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","raw_url":"https://github.com/apache/openjpa/raw/1dbb7a90440054478141cf8dfb699529c52e847d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java?ref=1dbb7a90440054478141cf8dfb699529c52e847d","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test that querying and retrieving entities with multiple same-typed embedded\n+ * relations, which themselves have eager relations, works. \n+ *\n+ * @author Abe White\n+ */\n+public class TestMultipleSameTypedEmbeddedWithEagerRelations\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + EmbeddableWithRelation.class.getName() + \";\"\n+            + MultipleSameTypedEmbedded.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        EmbeddableWithRelation embed1 = new EmbeddableWithRelation();\n+        embed1.setName(\"embed1\");\n+        EmbeddableWithRelation embed2 = new EmbeddableWithRelation();\n+        embed2.setName(\"embed2\");\n+\n+        MultipleSameTypedEmbedded m1 = new MultipleSameTypedEmbedded();\n+        m1.setName(\"m1\");\n+        m1.setEmbed1(embed1);\n+        m1.setEmbed2(embed2);\n+        MultipleSameTypedEmbedded m2 = new MultipleSameTypedEmbedded();\n+        m2.setName(\"m2\");\n+        m2.setEmbed1(embed2);\n+        m2.setEmbed2(embed1);\n+\n+        embed1.setRel(m1);\n+        embed2.setRel(m2);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(m1);\n+        em.persist(m2);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from MultipleSameTypedEmbedded\").\n+                executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select m from MultipleSameTypedEmbedded m \"\n+            + \"where m.embed1.rel.name = 'm1' \"\n+            + \"and m.embed2.rel.name = 'm2'\");\n+        List res = q.getResultList();\n+        assertEquals(1, res.size());\n+\n+        MultipleSameTypedEmbedded m = (MultipleSameTypedEmbedded) res.get(0);\n+        assertEquals(\"m1\", m.getName());\n+        assertEquals(\"embed1\", m.getEmbed1().getName());\n+        assertEquals(\"m1\", m.getEmbed1().getRel().getName());\n+        assertEquals(\"embed2\", m.getEmbed2().getName());\n+        assertEquals(\"m2\", m.getEmbed2().getRel().getName());\n+            \n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestMultipleSameTypedEmbeddedWithEagerRelations.class);\n+    }\n+}\n+"}]}

