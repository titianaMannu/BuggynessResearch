{"sha":"1defd23037cbe55ef05902efc21d11b9a2afe972","node_id":"MDY6Q29tbWl0MjA2MzY0OjFkZWZkMjMwMzdjYmU1NWVmMDU5MDJlZmMyMWQxMWI5YTJhZmU5NzI=","commit":{"author":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-11T21:56:55Z"},"committer":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-11T21:56:55Z"},"message":"Supports for interface query alias metadata\nas well as refactoring persistence-aware metadata into non-persistent metadata\nto support non-managed interfaces\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@442363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b453b5ec5b55cb6af64fd16574cc73884abd693e","url":"https://api.github.com/repos/apache/openjpa/git/trees/b453b5ec5b55cb6af64fd16574cc73884abd693e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1defd23037cbe55ef05902efc21d11b9a2afe972","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1defd23037cbe55ef05902efc21d11b9a2afe972","html_url":"https://github.com/apache/openjpa/commit/1defd23037cbe55ef05902efc21d11b9a2afe972","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1defd23037cbe55ef05902efc21d11b9a2afe972/comments","author":null,"committer":null,"parents":[{"sha":"da1961910bef256a5ef3c39e729a7fe9b34fb43c","url":"https://api.github.com/repos/apache/openjpa/commits/da1961910bef256a5ef3c39e729a7fe9b34fb43c","html_url":"https://github.com/apache/openjpa/commit/da1961910bef256a5ef3c39e729a7fe9b34fb43c"}],"stats":{"total":189,"additions":152,"deletions":37},"files":[{"sha":"29edc6b6de559a6706767a1613941bc85c3d3eb1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=1defd23037cbe55ef05902efc21d11b9a2afe972","patch":"@@ -660,7 +660,8 @@ private static ClassMapping getMapping(MappingRepository repos, Class cls,\n         ClassMapping mapping = repos.getMapping(cls, null, false);\n         if (mapping != null)\n             return mapping;\n-        if (!validate || repos.getPersistenceAware(cls) != null)\n+        if (!validate || cls.isInterface() || \n+            repos.getPersistenceAware(cls) != null)\n             return null;\n         throw new MetaDataException(_loc.get(\"no-meta\", cls));\n     }"},{"sha":"cb3a2296201da143f99fb16fc013dccb984d2094","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java?ref=1defd23037cbe55ef05902efc21d11b9a2afe972","patch":"@@ -120,10 +120,11 @@ public Iterator iterator() {\n                 _broker.getClassLoader(), false);\n \n             ClassMetaData[] metas;\n-            if (meta != null && (meta.isMapped() || (_subs\n+            if (meta != null && (!_subs || !meta.isManagedInterface())\n+                && (meta.isMapped() || (_subs\n                 && meta.getMappedPCSubclassMetaDatas().length > 0)))\n                 metas = new ClassMetaData[]{ meta };\n-            else if (meta == null && _subs)\n+            else if (_subs && (meta == null || meta.isManagedInterface()))\n                 metas = repos.getImplementorMetaDatas(_type,\n                     _broker.getClassLoader(), false);\n             else"},{"sha":"e5d2affab94d4a75d82a70aa62578954ca8cde33","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=1defd23037cbe55ef05902efc21d11b9a2afe972","patch":"@@ -657,11 +657,11 @@ protected Compilation newCompilation() {\n         ClassMetaData[] metas;\n         if (_class == null || _storeQuery.supportsAbstractExecutors())\n             metas = new ClassMetaData[]{ meta };\n-        else if (meta != null && (_subclasses || meta.isMapped()))\n-            metas = new ClassMetaData[]{ meta };\n-        else if (_subclasses)\n+        else if (_subclasses && (meta == null || meta.isManagedInterface()))\n             metas = repos.getImplementorMetaDatas(_class,\n                 _broker.getClassLoader(), true);\n+        else if (meta != null && (_subclasses || meta.isMapped()))\n+            metas = new ClassMetaData[]{ meta };\n         else\n             metas = StoreQuery.EMPTY_METAS;\n "},{"sha":"86a4a348de01916ba4c1934f581901e64f2ac276","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=1defd23037cbe55ef05902efc21d11b9a2afe972","patch":"@@ -142,6 +142,7 @@\n     private Boolean _embedded = null;\n     private Boolean _interface = null;\n     private Class _impl = null;\n+    private Map _ifaceMap = new HashMap();\n     private int _identity = ID_UNKNOWN;\n     private int _idStrategy = ValueStrategies.NONE;\n     private int _accessType = ACCESS_UNKNOWN;\n@@ -694,6 +695,37 @@ public Class getInterfaceImpl() {\n     public void setInterfaceImpl(Class impl) {\n         _impl = impl;\n     }\n+\n+    /**\n+     * Alias properties from the given interface during  queries to\n+     * the local field.\n+     */\n+    public void setInterfacePropertyAlias(Class iface, String orig, \n+        String local) {\n+        synchronized (_ifaceMap) {\n+            Map fields = (Map) _ifaceMap.get(iface);\n+            if (fields == null) {\n+                fields = new HashMap();\n+                _ifaceMap.put(iface, fields);\n+            }\n+            if (fields.containsKey(orig))\n+                throw new MetaDataException(_loc.get(\"duplicate-iface-alias\", \n+                    this, orig, local));\n+            fields.put(orig, local);\n+        }\n+    }\n+    \n+    /**\n+     * Get local field alias for the given interface property.\n+     */\n+    public String getInterfacePropertyAlias(Class iface, String orig) {\n+        synchronized (_ifaceMap) {\n+            Map fields = (Map) _ifaceMap.get(iface);\n+            if (fields == null)\n+                return null;\n+            return (String) fields.get(orig);\n+        }\n+    }\n     \n     /**\n      * Return the number of fields that use impl or intermediate data, in\n@@ -2194,6 +2226,10 @@ public void copy(ClassMetaData meta) {\n             fg = addDeclaredFetchGroup(fgs[i].getName());\n             fg.copy(fgs[i]); \n         }\n+\n+        // copy iface re-mapping\n+        _ifaceMap.clear();\n+        _ifaceMap.putAll(meta._ifaceMap);\n     }\n \n     /**"},{"sha":"5cecca40509f38ba38795fa1b09f86be2056468d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":81,"deletions":22,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=1defd23037cbe55ef05902efc21d11b9a2afe972","patch":"@@ -83,8 +83,8 @@\n     public static final int VALIDATE_RUNTIME = 8;\n \n     protected static final Class[] EMPTY_CLASSES = new Class[0];\n-    protected static final PersistenceAwareClass[] EMPTY_PAWARE_CLASSES = \n-    \tnew PersistenceAwareClass[0];\n+    protected static final NonPersistentMetaData[] EMPTY_NON_PERSISTENT = \n+    \tnew NonPersistentMetaData[0];\n     protected final ClassMetaData[] EMPTY_METAS;\n     protected final FieldMetaData[] EMPTY_FIELDS;\n     protected final Order[] EMPTY_ORDERS;\n@@ -110,6 +110,7 @@\n     private final Map _seqs = new HashMap();\n     private final Map _aliases = Collections.synchronizedMap(new HashMap());\n     private final Map _pawares = Collections.synchronizedMap(new HashMap());\n+    private final Map _nonMapped = Collections.synchronizedMap(new HashMap());\n     \n     // map of classes to lists of their subclasses\n     private final Map _subs = Collections.synchronizedMap(new HashMap());\n@@ -886,6 +887,7 @@ synchronized void setInterfaceImpl(ClassMetaData meta, Class impl) {\n                 meta, impl));\n         _ifaces.put(meta.getDescribedType(), impl);\n         _metas.put(impl, meta);\n+        addDeclaredInterfaceImpl(meta, meta.getDescribedType());\n     }\n     \n     synchronized InterfaceImplGenerator getImplGenerator() {\n@@ -1034,56 +1036,112 @@ private void resolveIdentityClass(Object oid) {\n     }\n      \n     /**\n-     * Gets the persistence-aware class corresponding to the given class. Can\n-     * be null, if the given class is not registered as persistence-aware with\n-     * this receiver.\n+     * Gets the metadata corresponding to the given persistence-aware class. \n+     * Returns null, if the given class is not registered as \n+     * persistence-aware.\n      */\n-    public PersistenceAwareClass getPersistenceAware(Class cls) {\n-    \treturn (PersistenceAwareClass)_pawares.get(cls);\n+    public NonPersistentMetaData getPersistenceAware(Class cls) {\n+    \treturn (NonPersistentMetaData)_pawares.get(cls);\n     }\n     \n     /**\n-     * Gets all the registered persistence-aware classes.\n+     * Gets all the metadatas for persistence-aware classes\n      * \n-     * @return empty array if no class has been registered\n+     * @return empty array if no class has been registered as pers-aware\n      */\n-    public PersistenceAwareClass[] getPersistenceAwares() {\n+    public NonPersistentMetaData[] getPersistenceAwares() {\n         synchronized (_pawares) {\n             if (_pawares.isEmpty())\n-                return EMPTY_PAWARE_CLASSES;\n-            return (PersistenceAwareClass[])_pawares.values().toArray\n-                (new PersistenceAwareClass[_pawares.size()]);\n+                return EMPTY_NON_PERSISTENT;\n+            return (NonPersistentMetaData[])_pawares.values().toArray\n+                (new NonPersistentMetaData[_pawares.size()]);\n         }\n     }\n \n     /**\n-     * Add the given class as persitence-aware.\n+     * Add the given class as persistence-aware.\n      * \n      * @param cls non-null and must not alreaddy be added as persitence-capable\n      */\n-    public PersistenceAwareClass addPersistenceAware(Class cls) {\n+    public NonPersistentMetaData addPersistenceAware(Class cls) {\n     \tif (cls == null)\n     \t\treturn null;\n         synchronized(this) {\n             if (_pawares.containsKey(cls))\n-                return (PersistenceAwareClass)_pawares.get(cls);\n+                return (NonPersistentMetaData)_pawares.get(cls);\n             if (getCachedMetaData(cls) != null)\n                 throw new MetaDataException(_loc.get(\"pc-and-aware\", cls));\n-            PersistenceAwareClass result = new PersistenceAwareClass(cls, this);\n-            _pawares.put(cls, result);\n-            return result;\n+            NonPersistentMetaData meta = new NonPersistentMetaData(cls, this,\n+                NonPersistentMetaData.TYPE_PERSISTENCE_AWARE);\n+            _pawares.put(cls, meta);\n+            return meta;\n     \t}\n     }\n \n     /**\n-     * Remove a persitence-aware class from this receiver.\n+     * Remove a persitence-aware class from the repository\n      * \n-     * @return true if removed, false if not contained in this receiver\n+     * @return true if removed\n      */\n     public boolean removePersistenceAware(Class cls) {\n     \treturn _pawares.remove(cls) != null;\n     }\n \n+    /**\n+     * Gets the metadata corresponding to the given non-mapped interface.\n+     * Returns null, if the given interface is not registered as \n+     * persistence-aware.\n+     */\n+    public NonPersistentMetaData getNonMappedInterface(Class iface) {\n+    \treturn (NonPersistentMetaData)_nonMapped.get(iface);\n+    }\n+    \n+    /**\n+     * Gets the corresponding metadatas for all registered, non-mapped\n+     * interfaces\n+     * \n+     * @return empty array if no non-mapped interface has been registered.\n+     */\n+    public NonPersistentMetaData[] getNonMappedInterfaces() {\n+        synchronized (_nonMapped) {\n+            if (_nonMapped.isEmpty())\n+                return EMPTY_NON_PERSISTENT;\n+            return (NonPersistentMetaData[])_nonMapped.values().toArray\n+                (new NonPersistentMetaData[_nonMapped.size()]);\n+        }\n+    }\n+\n+    /**\n+     * Add the given non-mapped interface to the repository.\n+     * \n+     * @param iface the non-mapped interface\n+     */\n+    public NonPersistentMetaData addNonMappedInterface(Class iface) {\n+    \tif (iface == null)\n+    \t\treturn null;\n+        synchronized(this) {\n+            if (!iface.isInterface())\n+                throw new MetaDataException(_loc.get(\"not-non-mapped\", iface));\n+            if (_nonMapped.containsKey(iface))\n+                return (NonPersistentMetaData)_nonMapped.get(iface);\n+            if (getCachedMetaData(iface) != null)\n+                throw new MetaDataException(_loc.get(\"non-mapped-pc\", iface));\n+            NonPersistentMetaData meta = new NonPersistentMetaData(iface, this,\n+                NonPersistentMetaData.TYPE_NON_MAPPED_INTERFACE);\n+            _nonMapped.put(iface, meta);\n+            return meta;\n+    \t}\n+    }\n+\n+    /**\n+     * Remove a non-mapped interface from the repository\n+     * \n+     * @return true if removed\n+     */\n+    public boolean removeNonMappedInterface(Class iface) {\n+    \treturn _nonMapped.remove(iface) != null;\n+    }\n+\n     /**\n      * Clear the cache of parsed metadata. This method also clears the\n      * internal {@link MetaDataFactory MetaDataFactory}'s cache.\n@@ -1102,6 +1160,7 @@ public synchronized void clear() {\n         _factory.clear();\n         _aliases.clear();\n         _pawares.clear();\n+        _nonMapped.clear();\n     }\n \n     /**\n@@ -1317,7 +1376,7 @@ private void processRegisteredClass(Class cls) {\n      * Update the list of implementations of base classes and interfaces.\n      */\n     private void updateImpls(Class cls, Class leastDerived, Class check) {\n-        if (_factory.getDefaults().isDeclaredInterfacePersistent())\n+        if (!_factory.getDefaults().isDeclaredInterfacePersistent())\n             return;\n         // allow users to query on common non-pc superclasses\n         Class sup = check.getSuperclass();"},{"sha":"1ca5e5c8bb9e69079358e14e93eda4eebbe0050d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NonPersistentMetaData.java","status":"renamed","additions":21,"deletions":8,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NonPersistentMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NonPersistentMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NonPersistentMetaData.java?ref=1defd23037cbe55ef05902efc21d11b9a2afe972","patch":"@@ -10,20 +10,25 @@\n  *\r\n  * @author Pinaki Poddar\r\n  */\r\n-public class PersistenceAwareClass \r\n+public class NonPersistentMetaData \r\n \timplements Comparable, SourceTracker, Commentable, MetaDataContext {\r\n+    public static final int TYPE_PERSISTENCE_AWARE = 1;\r\n+    public static final int TYPE_NON_MAPPED_INTERFACE = 2;\r\n \r\n     private final MetaDataRepository _repos;\r\n \tprivate final Class _class;\r\n+    private final int _type;\r\n \t\r\n     private File _srcFile = null;\r\n     private int _srcType = SRC_OTHER;\r\n     private String[] _comments = null;\r\n     private int _listIndex = -1;\r\n \t\r\n-\tprotected PersistenceAwareClass(Class cls, MetaDataRepository repos) {\r\n+\tprotected NonPersistentMetaData(Class cls, MetaDataRepository repos, \r\n+        int type) {\r\n \t\t_repos = repos;\r\n \t\t_class = cls;\r\n+        _type = type;\r\n \t}\r\n \t\r\n     /**\r\n@@ -39,6 +44,13 @@ public MetaDataRepository getRepository() {\n \tpublic Class getDescribedType() {\r\n \t\treturn _class;\r\n \t}\r\n+\r\n+    /**\r\n+     * The type of metadata.\r\n+     */\r\n+    public int getType() {\r\n+        return _type;\r\n+    }\r\n \t\r\n     /**\r\n      * The index in which this class was listed in the metadata. Defaults to\r\n@@ -85,13 +97,14 @@ public void setComments(String[] comments) {\n         _comments = comments;\r\n     }\r\n     \r\n-    public int compareTo(Object other) {\r\n-        if (other == this)\r\n+    public int compareTo(Object o) {\r\n+        if (o == this)\r\n             return 0;\r\n-        if (!(other instanceof PersistenceAwareClass))\r\n+        if (!(o instanceof NonPersistentMetaData))\r\n         \treturn 1;\r\n-        return _class.getName().compareTo(((PersistenceAwareClass) other).\r\n-            getDescribedType().getName());\r\n+        NonPersistentMetaData other = (NonPersistentMetaData) o;\r\n+        if (_type != other.getType())\r\n+            return _type - other.getType();\r\n+        return _class.getName().compareTo(other.getDescribedType().getName());\r\n     }\r\n-\r\n }\r","previous_filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/PersistenceAwareClass.java"},{"sha":"609481daa2c8e839217805d4292e556e3456c573","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1defd23037cbe55ef05902efc21d11b9a2afe972/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=1defd23037cbe55ef05902efc21d11b9a2afe972","patch":"@@ -259,8 +259,13 @@ bad-fg-inclue: Attempt to include non-existent fetch group \"{1}\" in fetch \\\n     group \"{0}\".\n unknown-fg: Attempt to add fetch group \"{0}\" to type field \"{1}\" failed. \\\n     This fetch group has not been defined.\n+duplicate-iface-alias: Cannot alias interface \"{0}\" property \"{1}\" to local \\\n+    field \"{2}\" as the property has already been aliased.\n pc-and-aware: Attempt to register \"{0}\" as a persistence-aware class failed. \\\n-\tThe same class has been registered as persistence-capable already.=======\r\n+\tThe same class has been registered as persistence-capable already.\n+not-non-mapped: Type \"{0}\" cannot be a non-mapped interface as the class is \\\n+    not an interface\n+non-mapped-pc: A non-mapped interface cannot also be mapped.\n no-metadatafactory: No configuration properties were found. If you are \\\n     using Ant, please see the <properties> or <propertiesFile> attributes \\\n     of the task''s nested <config> element."}]}

