{"sha":"1e95734015c0aa6009b42355a3cfeccb57c4fb2f","node_id":"MDY6Q29tbWl0MjA2MzY0OjFlOTU3MzQwMTVjMGFhNjAwOWI0MjM1NWEzY2ZlY2NiNTdjNGZiMmY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-11T23:54:01Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-11T23:54:01Z"},"message":"OPENJPA-39 test case.  Also query fixes and fix to possible data corruption \nissue (yikes!).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@442388 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ecc904fd44959b35c1f59c31eed4ba451a45856b","url":"https://api.github.com/repos/apache/openjpa/git/trees/ecc904fd44959b35c1f59c31eed4ba451a45856b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1e95734015c0aa6009b42355a3cfeccb57c4fb2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1e95734015c0aa6009b42355a3cfeccb57c4fb2f","html_url":"https://github.com/apache/openjpa/commit/1e95734015c0aa6009b42355a3cfeccb57c4fb2f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/comments","author":null,"committer":null,"parents":[{"sha":"f56a7555a7f05be898ab6dbe11ff7de6246a8231","url":"https://api.github.com/repos/apache/openjpa/commits/f56a7555a7f05be898ab6dbe11ff7de6246a8231","html_url":"https://github.com/apache/openjpa/commit/f56a7555a7f05be898ab6dbe11ff7de6246a8231"}],"stats":{"total":315,"additions":299,"deletions":16},"files":[{"sha":"186f27583a5ee789d3ce53ca4c9053cb1a5a28ac","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -133,8 +133,9 @@ private Collection analyzeDeleteConstraints(RowManagerImpl rowMgr,\n                 || rel.getIndex() >= row.getIndex())\n                 continue;\n \n-            // create an update to null the offending fk before deleting\n-            update = new RowImpl(row.getTable(), Row.ACTION_UPDATE);\n+            // create an update to null the offending fk before deleting.  use\n+            // a primary row to be sure to copy delayed-flush pks/fks\n+            update = new PrimaryRow(row.getTable(), Row.ACTION_UPDATE, null);\n             row.copyInto(update, true);\n             update.setForeignKey(fks[i], row.getForeignKeyIO(fks[i]), null);\n             if (updates == null)"},{"sha":"f3cdabd266ca608ee21fcba6935966e1fd836af0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -288,12 +288,6 @@ private Action lastFieldAction() {\n             if (prev.op == Action.GET || prev.op == Action.GET_OUTER\n                 || prev.op == Action.GET_KEY)\n                 return prev;\n-\n-            // break if we're getting to path portions that we copied from\n-            // our variable\n-            if (prev.op == Action.VAR || prev.op == Action.UNBOUND_VAR\n-                || prev.op == Action.SUBQUERY)\n-                break;\n         }\n         return null;\n     }"},{"sha":"3f588f87e5e254695c65c2f48b01abd404b7942c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -71,7 +71,8 @@ public Object getJoinValue(Object val, Column col, JDBCStore store) {\n \n     public Object getJoinValue(OpenJPAStateManager sm, Column col,\n         JDBCStore store) {\n-        return Numbers.valueOf(((Id) sm.getObjectId()).getId());\n+        Id id = (Id) sm.getObjectId();\n+        return (id == null) ? null : id.getIdObject();\n     }\n \n     public void setAutoAssignedValue(OpenJPAStateManager sm, JDBCStore store,"},{"sha":"629e9555065eee6d70ee7d0c9e9aecf1a21e519e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -243,12 +243,13 @@ private void nullInverse(OpenJPAStateManager sm, RowManager rm)\n         throws SQLException {\n         ForeignKey fk = field.getForeignKey();\n         ColumnIO io = field.getColumnIO();\n-        if (!io.isAnyUpdatable(fk, true))\n+        if (fk.getDeleteAction() != ForeignKey.ACTION_NONE \n+            || !io.isAnyUpdatable(fk, true))\n             return;\n \n+        // null inverse if not already enforced by fk\n         if (field.getIndependentTypeMappings().length != 1)\n             throw RelationStrategies.uninversable(field);\n-\n         Row row = rm.getAllRows(fk.getTable(), Row.ACTION_UPDATE);\n         row.setForeignKey(fk, io, null);\n         row.whereForeignKey(fk, sm);"},{"sha":"11a2d274933c7e8ea5e86e7726006e029c23a43d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -223,10 +223,12 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         ValueMapping elem = field.getElementMapping();\n         ColumnIO io = elem.getColumnIO();\n         ForeignKey fk = elem.getForeignKey();\n-        if (!io.isAnyUpdatable(fk, true))\n+        if (fk.getDeleteAction() != ForeignKey.ACTION_NONE\n+            || !io.isAnyUpdatable(fk, true)) \n             return;\n \n-        // null any existing inverse columns that refer to this obj\n+        // if the fk doesn't enforce it, null any existing inverse columns \n+        // that refer to this obj\n         assertInversable();\n         Row row = rm.getAllRows(fk.getTable(), Row.ACTION_UPDATE);\n         row.setForeignKey(fk, io, null);"},{"sha":"9b5fbd4f69ca4749883b7937a1b25df5b1f3b7b7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -24,7 +24,6 @@\n \n import junit.framework.TestCase;\n import junit.textui.TestRunner;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n \n /**\n  * Perform basic operations on an inheritance hierarchy involving multiple"},{"sha":"7978664b9fb5d4c53a91f052b77d8f0008e17c01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -0,0 +1,51 @@\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+\r\n+@Entity\r\n+public class CascadingOneManyChild {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne(optional=false)\r\n+    @JoinColumn(name=\"PARENT_ID\")\r\n+    @ForeignKey\r\n+    private CascadingOneManyParent parent;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public CascadingOneManyParent getParent() { \r\n+        return parent; \r\n+    }\r\n+\r\n+    public void setParent(CascadingOneManyParent parent) { \r\n+        this.parent = parent; \r\n+    }\r\n+}\r"},{"sha":"fe7fd5eb912f41c607629972f68221e83d57aecf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -0,0 +1,52 @@\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OrderBy;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class CascadingOneManyParent {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToMany(mappedBy=\"parent\", cascade=CascadeType.ALL)\r\n+    @OrderBy(\"name ASC\")\r\n+    private List<CascadingOneManyChild> children = \r\n+        new ArrayList<CascadingOneManyChild>();\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public List<CascadingOneManyChild> getChildren() { \r\n+        return children; \r\n+    }\r\n+\r\n+    public void addChild(CascadingOneManyChild child) {\r\n+        child.setParent(this);\r\n+        children.add(child);\r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"9c84730c72c70ab2a026c77b30bc1b3949e71324","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityNotFoundException;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+/**\n+ * Tests a cascading one-many backed by a foreign key.\n+ *\n+ * @author Abe White\n+ */\n+public class TestCascadingOneManyWithForeignKey\n+    extends TestCase {\n+\n+    private OpenJPAEntityManagerFactory emf;\n+\n+    public void setUp() {\n+        String types = CascadingOneManyParent.class.getName() + \";\"\n+            + CascadingOneManyChild.class.getName(); \n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n+        emf = (OpenJPAEntityManagerFactory) Persistence.\n+            createEntityManagerFactory(\"test\", props);\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from CascadingOneManyChild\").executeUpdate();\n+            em.createQuery(\"delete from CascadingOneManyParent\").\n+                executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testPersist() {\n+        CascadingOneManyParent parent = new CascadingOneManyParent();\n+        parent.setName(\"parent\");\n+        for (int i = 0; i < 2; i++) {\n+            CascadingOneManyChild child = new CascadingOneManyChild();\n+            child.setName(\"child\" + i);\n+            parent.addChild(child);\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        assertEquals(2, parent.getChildren().size());\n+        assertEquals(\"child0\", parent.getChildren().get(0).getName());\n+        assertEquals(\"child1\", parent.getChildren().get(1).getName());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(CascadingOneManyParent.class, id);\n+        assertNotNull(parent);\n+        assertEquals(\"parent\", parent.getName());\n+        assertEquals(2, parent.getChildren().size());\n+        assertEquals(\"child0\", parent.getChildren().get(0).getName());\n+        assertEquals(\"child1\", parent.getChildren().get(1).getName());\n+        em.close();\n+    }\n+\n+    public void testDelete() {\n+        CascadingOneManyParent parent = new CascadingOneManyParent();\n+        parent.setName(\"parent\");\n+        for (int i = 0; i < 2; i++) {\n+            CascadingOneManyChild child = new CascadingOneManyChild();\n+            child.setName(\"child\" + i);\n+            parent.addChild(child);\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(CascadingOneManyParent.class, id);\n+        assertNotNull(parent);\n+        assertEquals(2, parent.getChildren().size());\n+        em.getTransaction().begin();\n+        em.remove(parent);\n+        em.getTransaction().commit();\n+        assertRemoved(em, id);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        assertRemoved(em, id);\n+        em.close();\n+    }\n+\n+    private void assertRemoved(EntityManager em, long id) {\n+        assertNull(em.find(CascadingOneManyParent.class, id));\n+        List res = em.createQuery(\"select c from CascadingOneManyChild c\").\n+            getResultList();\n+        assertEquals(0, res.size());\n+    }\n+\n+    public void testForeignKey() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        if (!conf.getDBDictionaryInstance().supportsForeignKeys)\n+            return;\n+\n+        CascadingOneManyParent parent = new CascadingOneManyParent();\n+        parent.setName(\"parent\");\n+        CascadingOneManyChild child;\n+        for (int i = 0; i < 2; i++) {\n+            child = new CascadingOneManyChild();\n+            child.setName(\"child\" + i);\n+            parent.addChild(child);\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        em.close();\n+\n+        OpenJPAEntityManager oem = (OpenJPAEntityManager) emf.\n+            createEntityManager();\n+        parent = oem.find(CascadingOneManyParent.class, id);\n+        assertNotNull(parent);\n+        assertEquals(2, parent.getChildren().size());\n+        child = parent.getChildren().get(0); \n+        oem.getTransaction().begin();\n+        oem.remove(parent);\n+        // undelete one child\n+        assertTrue(oem.isRemoved(child));\n+        oem.persist(child);\n+        assertFalse(oem.isRemoved(child));\n+        assertEquals(parent, child.getParent());\n+        try {\n+            oem.getTransaction().commit();\n+            fail(\"Commit should have failed due to FK constraint violation.\");\n+        } catch (Exception e) {\n+        }\n+        oem.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestCascadingOneManyWithForeignKey.class);\n+    }\n+}\n+"},{"sha":"35eb56e2bc048048cc5adc8417fd8861ab18d72e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1e95734015c0aa6009b42355a3cfeccb57c4fb2f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=1e95734015c0aa6009b42355a3cfeccb57c4fb2f","patch":"@@ -112,8 +112,9 @@ public QueryResultCache getQueryResultCache() {\n         _factory.lock();\n         try {\n             if (_queryCache == null)\n-                _queryCache = new QueryResultCacheImpl(_factory.getConfiguration().\n-                    getDataCacheManagerInstance().getSystemQueryCache());\n+                _queryCache = new QueryResultCacheImpl(_factory.\n+                    getConfiguration().getDataCacheManagerInstance().\n+                    getSystemQueryCache());\n             return _queryCache;\n         } finally {\n             _factory.unlock();"}]}

