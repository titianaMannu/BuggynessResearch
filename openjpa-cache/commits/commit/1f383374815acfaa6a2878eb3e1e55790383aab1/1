{"sha":"1f383374815acfaa6a2878eb3e1e55790383aab1","node_id":"MDY6Q29tbWl0MjA2MzY0OjFmMzgzMzc0ODE1YWNmYWE2YTI4NzhlYjNlMWU1NTc5MDM4M2FhYjE=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2013-10-23T15:58:46Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2013-10-23T15:58:46Z"},"message":"OPENJPA-2443 : Fix SingleFieldManager to not check for null values for IDENTITY generated fields when flushing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1535067 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d5a6eda33f128b4349189cd2337570ea46df531","url":"https://api.github.com/repos/apache/openjpa/git/trees/9d5a6eda33f128b4349189cd2337570ea46df531"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1f383374815acfaa6a2878eb3e1e55790383aab1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1f383374815acfaa6a2878eb3e1e55790383aab1","html_url":"https://github.com/apache/openjpa/commit/1f383374815acfaa6a2878eb3e1e55790383aab1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1f383374815acfaa6a2878eb3e1e55790383aab1/comments","author":null,"committer":null,"parents":[{"sha":"a76249e143c9d2e73e566540fc3668c8ae8a4302","url":"https://api.github.com/repos/apache/openjpa/commits/a76249e143c9d2e73e566540fc3668c8ae8a4302","html_url":"https://github.com/apache/openjpa/commit/a76249e143c9d2e73e566540fc3668c8ae8a4302"}],"stats":{"total":51,"additions":35,"deletions":16},"files":[{"sha":"e5fa0845727e3ed27b53af0facf66b47e7c9e954","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/1f383374815acfaa6a2878eb3e1e55790383aab1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/1f383374815acfaa6a2878eb3e1e55790383aab1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=1f383374815acfaa6a2878eb3e1e55790383aab1","patch":"@@ -30,12 +30,14 @@\n import java.util.Map;\n import java.util.TimeZone;\n \n-import org.apache.openjpa.conf.Compatibility;\n+import javax.persistence.GenerationType;\n+\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.ChangeTracker;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.ImplHelper;\n@@ -557,15 +559,16 @@ public void serialize(ObjectOutput out, boolean def)\n     /**\n      * Helper method to perform pre flush actions on the current object.\n      */\n-    private boolean preFlush(FieldMetaData fmd, boolean logical, \n-        OpCallbacks call) {\n+    private boolean preFlush(FieldMetaData fmd, boolean logical, OpCallbacks call) {\n         // check for illegal nulls\n         if (objval == null) {\n-            if (fmd.getNullValue() == FieldMetaData.NULL_EXCEPTION\n-                || fmd.getDeclaredTypeCode() == JavaTypes.OID)\n-                throw new InvalidStateException(_loc.get(\"null-value\",\n-                    fmd.getName(), _sm.getManagedInstance())).\n-                    setFatal(true);\n+            // If we have an AUTOASSIGN strategy that means that we have a field that is GenerationType.IDENTITY so\n+            // skip checking to see if the value is null as it will get assigned later in flush processing. \n+            if (fmd.getValueStrategy() != ValueStrategies.AUTOASSIGN) {\n+                if (fmd.getNullValue() == FieldMetaData.NULL_EXCEPTION || fmd.getDeclaredTypeCode() == JavaTypes.OID)\n+                    throw new InvalidStateException(_loc.get(\"null-value\", fmd.getName(), _sm.getManagedInstance()))\n+                        .setFatal(true);\n+            }\n             return false;\n         }\n "},{"sha":"0a25eac24eb93dd1acc33cfa56577f53263a3565","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/AutoIncrementEntity.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1f383374815acfaa6a2878eb3e1e55790383aab1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/AutoIncrementEntity.java","raw_url":"https://github.com/apache/openjpa/raw/1f383374815acfaa6a2878eb3e1e55790383aab1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/AutoIncrementEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/AutoIncrementEntity.java?ref=1f383374815acfaa6a2878eb3e1e55790383aab1","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.jdbc.auto;\n \n+import javax.persistence.Basic;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n@@ -27,16 +28,17 @@\n @Entity\n public class AutoIncrementEntity {\n     @Id\n-    @GeneratedValue(strategy=GenerationType.IDENTITY)\n-    public int id;\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Basic(optional = false)\n+    Integer id;\n \n     @Version\n     int version;\n-    \n+\n     public String somethingElse;\n-    \n-    public int getId(){\n+\n+    public Integer getId() {\n         return id;\n     }\n-    \n+\n }"},{"sha":"ce71b9244a620df3c255635b70d6bc8ecb5c5cf9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/TestAutoIncrement.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1f383374815acfaa6a2878eb3e1e55790383aab1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/TestAutoIncrement.java","raw_url":"https://github.com/apache/openjpa/raw/1f383374815acfaa6a2878eb3e1e55790383aab1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/TestAutoIncrement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/TestAutoIncrement.java?ref=1f383374815acfaa6a2878eb3e1e55790383aab1","patch":"@@ -49,10 +49,24 @@ public void test() {\n         AutoIncrementEntity e1 = em.find(AutoIncrementEntity.class, 0);\n         assertNotNull(e1);\n         AutoIncrementEntity e2 = new AutoIncrementEntity();\n-        assertEquals(0, e2.getId());\n+        assertEquals(null, e2.getId());\n         em.persist(e2);\n         em.getTransaction().commit();\n-        assertNotEquals(0, e2.getId());\n+        assertNotEquals(null, e2.getId());\n+    }\n+    \n+    public void testMergeNewEntity() {\n+        if (disabled) {\n+            return;\n+        }\n+        AutoIncrementEntity e2 = new AutoIncrementEntity();\n+        \n+        em.getTransaction().begin();\n+        AutoIncrementEntity e3 = em.merge(e2);\n+        em.getTransaction().commit();\n+        \n+        assertNotNull(e3);\n+        \n     }\n     \n     /**"}]}

