{"sha":"1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","node_id":"MDY6Q29tbWl0MjA2MzY0OjFmZWRlNjI2ZTJjYWQxNmY3YmI0ZDc3ZGQ5ZmMzMjcwYThiNmIzMzE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-11T00:35:10Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-11T00:35:10Z"},"message":"core OpenJPA object management code, plus a sample flat-file XML-based back-end. This submission does not include the OpenJPA JDBC back-end, and also doesn't include any additional tests yet.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@420667 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6e080044f1fb52a550e884c40416eef820cc8eb9","url":"https://api.github.com/repos/apache/openjpa/git/trees/6e080044f1fb52a550e884c40416eef820cc8eb9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","html_url":"https://github.com/apache/openjpa/commit/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/comments","author":null,"committer":null,"parents":[{"sha":"00652be8fdb0007e6b0b624a370b9837c2854019","url":"https://api.github.com/repos/apache/openjpa/commits/00652be8fdb0007e6b0b624a370b9837c2854019","html_url":"https://github.com/apache/openjpa/commit/00652be8fdb0007e6b0b624a370b9837c2854019"}],"stats":{"total":109324,"additions":104070,"deletions":5254},"files":[{"sha":"9b500896d9e0112aaf5afed73166c70ef8d363a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.util.Comparator;\r\n+\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Order by a field in the related type in memory.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+class InMemoryRelatedFieldOrder implements Order, Comparator {\r\n+\r\n+    private final FieldMetaData _rel;\r\n+    private final boolean _asc;\r\n+\r\n+    public InMemoryRelatedFieldOrder(FieldMetaData rel, boolean asc) {\r\n+        _rel = rel;\r\n+        _asc = asc;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return _rel.getName();\r\n+    }\r\n+\r\n+    public boolean isAscending() {\r\n+        return _asc;\r\n+    }\r\n+\r\n+    public Comparator getComparator() {\r\n+        return this;\r\n+    }\r\n+\r\n+    public int compare(Object o1, Object o2) {\r\n+        if (o1 == o2)\r\n+            return 0;\r\n+        if (!(o1 instanceof PersistenceCapable)\r\n+            || !(o2 instanceof PersistenceCapable))\r\n+            return 0;\r\n+        PersistenceCapable pc1 = (PersistenceCapable) o1;\r\n+        PersistenceCapable pc2 = (PersistenceCapable) o2;\r\n+        OpenJPAStateManager sm1 = (OpenJPAStateManager) pc1.pcGetStateManager();\r\n+        OpenJPAStateManager sm2 = (OpenJPAStateManager) pc2.pcGetStateManager();\r\n+        if (sm1 == null || sm2 == null)\r\n+            return 0;\r\n+        Object v1 = sm1.fetchField(_rel.getIndex(), false);\r\n+        Object v2 = sm2.fetchField(_rel.getIndex(), false);\r\n+        if (v1 == v2)\r\n+            return 0;\r\n+        if (v1 == null)\r\n+            return (_asc) ? -1 : 1;\r\n+        if (v2 == null)\r\n+            return (_asc) ? 1 : -1;\r\n+        int cmp = ((Comparable) v1).compareTo(v2);\r\n+        return (_asc) ? cmp : -cmp;\r\n+    }\r\n+}\r"},{"sha":"a994576c684e02646d8d42e2243396234a4a6542","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.util.Comparator;\r\n+\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.util.ApplicationIds;\r\n+\r\n+/**\r\n+ * Order by the field value in memory. If the field contains\r\n+ * {@link PersistenceCapable} objects, order on their primary key values.\r\n+ * Relies on primary key values, including datastore oid objects, being\r\n+ * {@link Comparable}.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+class InMemoryValueOrder implements Order, Comparator {\r\n+\r\n+    private final boolean _asc;\r\n+\r\n+    public InMemoryValueOrder(boolean asc) {\r\n+        _asc = asc;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return Order.ELEMENT;\r\n+    }\r\n+\r\n+    public boolean isAscending() {\r\n+        return _asc;\r\n+    }\r\n+\r\n+    public Comparator getComparator() {\r\n+        return this;\r\n+    }\r\n+\r\n+    public int compare(Object o1, Object o2) {\r\n+        if (o1 == o2)\r\n+            return 0;\r\n+        if (o1 == null)\r\n+            return (_asc) ? -1 : 1;\r\n+        if (o2 == null)\r\n+            return (_asc) ? 1 : -1;\r\n+        // non-pc values must be comparable\r\n+        int cmp;\r\n+        if (!(o1 instanceof PersistenceCapable)\r\n+            || !(o2 instanceof PersistenceCapable)) {\r\n+            cmp = ((Comparable) o1).compareTo(o2);\r\n+            return (_asc) ? cmp : -cmp;\r\n+        }\r\n+        // order on primary key values\r\n+        PersistenceCapable pc1 = (PersistenceCapable) o1;\r\n+        PersistenceCapable pc2 = (PersistenceCapable) o2;\r\n+        OpenJPAStateManager sm1 = (OpenJPAStateManager) pc1.pcGetStateManager();\r\n+        OpenJPAStateManager sm2 = (OpenJPAStateManager) pc2.pcGetStateManager();\r\n+        if (sm1 == null || sm2 == null)\r\n+            return 0;\r\n+        Object[] pk1 = toPKValues(sm1);\r\n+        Object[] pk2 = toPKValues(sm2);\r\n+        int len = Math.min(pk1.length, pk2.length);\r\n+        for (int i = 0; i < len; i++) {\r\n+            if (pk1[i] == pk2[i])\r\n+                return 0;\r\n+            if (pk1[i] == null)\r\n+                return (_asc) ? -1 : 1;\r\n+            if (pk2[i] == null)\r\n+                return (_asc) ? 1 : -1;\r\n+            cmp = ((Comparable) pk1[i]).compareTo(pk2[i]);\r\n+            if (cmp != 0)\r\n+                return (_asc) ? cmp : -cmp;\r\n+        }\r\n+        cmp = pk1.length - pk2.length;\r\n+        return (_asc) ? cmp : -cmp;\r\n+    }\r\n+\r\n+    /**\r\n+     * Convert the given state manager's oid to an array of(possibly null)\r\n+     * primary key values.\r\n+     */\r\n+    private static Object[] toPKValues(OpenJPAStateManager sm) {\r\n+        if (sm.getMetaData().getIdentityType() != ClassMetaData.ID_APPLICATION)\r\n+            return new Object[]{ sm.getObjectId() };\r\n+        Object[] pks =\r\n+            ApplicationIds.toPKValues(sm.getObjectId(), sm.getMetaData());\r\n+        if (pks == null)\r\n+            pks = new Object[]{ null };\r\n+        return pks;\r\n+    }\r\n+}\r"},{"sha":"0e5f59db03677b1f1d5111617f1bc9b29aa365ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.util.Comparator;\r\n+\r\n+/**\r\n+ * Comparator that keeps classes in inheritance order.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+class InheritanceComparator implements Comparator {\r\n+\r\n+    private Class _base = Object.class;\r\n+\r\n+    /**\r\n+     * Set the least-derived type possible; defaults to\r\n+     * <code>Object.class</code>.\r\n+     */\r\n+    public void setBase(Class base) {\r\n+        _base = base;\r\n+    }\r\n+\r\n+    /**\r\n+     * Subclasses can override this method to extract the class to compare\r\n+     * on from the elements of the collection.\r\n+     */\r\n+    protected Class toClass(Object elem) {\r\n+        return (Class) elem;\r\n+    }\r\n+\r\n+    public int compare(Object o1, Object o2) {\r\n+        if (o1 == o2)\r\n+            return 0;\r\n+        if (o1 == null)\r\n+            return -1;\r\n+        if (o2 == null)\r\n+            return 1;\r\n+        Class c1 = toClass(o1);\r\n+        Class c2 = toClass(o2);\r\n+        if (c1 == c2)\r\n+            return 0;\r\n+        if (c1 == null)\r\n+            return -1;\r\n+        if (c2 == null)\r\n+            return 1;\r\n+        int i1 = levels(c1);\r\n+        int i2 = levels(c2);\r\n+        if (i1 == i2)\r\n+            return c1.getName().compareTo(c2.getName());\r\n+        return i1 - i2;\r\n+    }\r\n+\r\n+    /**\r\n+     * Count the levels of inheritance between this class and our base class.\r\n+     */\r\n+    private int levels(Class to) {\r\n+        for (int i = 0; to != null; i++, to = to.getSuperclass())\r\n+            if (to == _base)\r\n+                return i;\r\n+        return Integer.MAX_VALUE;\r\n+    }\r\n+}\r"},{"sha":"c4684740ab561bc9ca5937a3da6ae006cf6ab1eb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"added","additions":411,"deletions":0,"changes":411,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,411 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.Serializable;\r\n+import java.lang.reflect.Array;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Calendar;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Locale;\r\n+import java.util.Map;\r\n+import java.util.Properties;\r\n+\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.lib.meta.CFMetaDataParser;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n+import serp.util.Numbers;\r\n+import serp.util.Strings;\r\n+\r\n+/**\r\n+ * Type constants for managed fields.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class JavaTypes {\r\n+\r\n+    public static final int BOOLEAN = 0;\r\n+    public static final int BYTE = 1;\r\n+    public static final int CHAR = 2;\r\n+    public static final int DOUBLE = 3;\r\n+    public static final int FLOAT = 4;\r\n+    public static final int INT = 5;\r\n+    public static final int LONG = 6;\r\n+    public static final int SHORT = 7;\r\n+    // keep OBJECT as first non-primitive type code; other code relies on it\r\n+    public static final int OBJECT = 8;\r\n+    public static final int STRING = 9;\r\n+    public static final int NUMBER = 10;\r\n+    public static final int ARRAY = 11;\r\n+    public static final int COLLECTION = 12;\r\n+    public static final int MAP = 13;\r\n+    public static final int DATE = 14;\r\n+    public static final int PC = 15;\r\n+    public static final int BOOLEAN_OBJ = 16;\r\n+    public static final int BYTE_OBJ = 17;\r\n+    public static final int CHAR_OBJ = 18;\r\n+    public static final int DOUBLE_OBJ = 19;\r\n+    public static final int FLOAT_OBJ = 20;\r\n+    public static final int INT_OBJ = 21;\r\n+    public static final int LONG_OBJ = 22;\r\n+    public static final int SHORT_OBJ = 23;\r\n+    public static final int BIGDECIMAL = 24;\r\n+    public static final int BIGINTEGER = 25;\r\n+    public static final int LOCALE = 26;\r\n+    public static final int PC_UNTYPED = 27;\r\n+    public static final int CALENDAR = 28;\r\n+    public static final int OID = 29;\r\n+    private static final Localizer _loc = Localizer.forPackage(JavaTypes.class);\r\n+    private static final Map _typeCodes = new HashMap();\r\n+\r\n+    static {\r\n+        _typeCodes.put(String.class, Numbers.valueOf(STRING));\r\n+        _typeCodes.put(Boolean.class, Numbers.valueOf(BOOLEAN_OBJ));\r\n+        _typeCodes.put(Byte.class, Numbers.valueOf(BYTE_OBJ));\r\n+        _typeCodes.put(Character.class, Numbers.valueOf(CHAR_OBJ));\r\n+        _typeCodes.put(Double.class, Numbers.valueOf(DOUBLE_OBJ));\r\n+        _typeCodes.put(Float.class, Numbers.valueOf(FLOAT_OBJ));\r\n+        _typeCodes.put(Integer.class, Numbers.valueOf(INT_OBJ));\r\n+        _typeCodes.put(Long.class, Numbers.valueOf(LONG_OBJ));\r\n+        _typeCodes.put(Short.class, Numbers.valueOf(SHORT_OBJ));\r\n+        _typeCodes.put(Date.class, Numbers.valueOf(DATE));\r\n+        _typeCodes.put(java.sql.Date.class, Numbers.valueOf(DATE));\r\n+        _typeCodes.put(java.sql.Timestamp.class, Numbers.valueOf(DATE));\r\n+        _typeCodes.put(java.sql.Time.class, Numbers.valueOf(DATE));\r\n+        _typeCodes.put(BigInteger.class, Numbers.valueOf(BIGINTEGER));\r\n+        _typeCodes.put(BigDecimal.class, Numbers.valueOf(BIGDECIMAL));\r\n+        _typeCodes.put(Number.class, Numbers.valueOf(NUMBER));\r\n+        _typeCodes.put(Locale.class, Numbers.valueOf(LOCALE));\r\n+        _typeCodes.put(Object.class, Numbers.valueOf(OBJECT));\r\n+        _typeCodes.put(PersistenceCapable.class, Numbers.valueOf(PC_UNTYPED));\r\n+        _typeCodes.put(Properties.class, Numbers.valueOf(MAP));\r\n+        _typeCodes.put(Calendar.class, Numbers.valueOf(CALENDAR));\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the field metadata type code for the given class. First class\r\n+     * objects are not recognized in this method.\r\n+     */\r\n+    public static int getTypeCode(Class type) {\r\n+        if (type == null)\r\n+            return OBJECT;\r\n+        if (type.isPrimitive()) {\r\n+            switch (type.getName().charAt(0)) {\r\n+                case 'b':\r\n+                    return (type == boolean.class) ? BOOLEAN : BYTE;\r\n+                case 'c':\r\n+                    return CHAR;\r\n+                case 'd':\r\n+                    return DOUBLE;\r\n+                case 'f':\r\n+                    return FLOAT;\r\n+                case 'i':\r\n+                    return INT;\r\n+                case 'l':\r\n+                    return LONG;\r\n+                case 's':\r\n+                    return SHORT;\r\n+            }\r\n+        }\r\n+        Integer code = (Integer) _typeCodes.get(type);\r\n+        if (code != null)\r\n+            return code.intValue();\r\n+        // have to do this first to catch custom collection and map types;\r\n+        // on resolve we figure out if these custom types are\r\n+        // persistence-capable\r\n+        if (Collection.class.isAssignableFrom(type))\r\n+            return COLLECTION;\r\n+        if (Map.class.isAssignableFrom(type))\r\n+            return MAP;\r\n+        if (type.isArray())\r\n+            return ARRAY;\r\n+        if (Calendar.class.isAssignableFrom(type))\r\n+            return CALENDAR;\r\n+        if (type.isInterface()) {\r\n+            if (type == Serializable.class)\r\n+                return OBJECT;\r\n+            return PC_UNTYPED;\r\n+        }\r\n+        return OBJECT;\r\n+    }\r\n+\r\n+    /**\r\n+     * Check the given name against the same set of standard packages used\r\n+     * when parsing metadata.\r\n+     */\r\n+    public static Class classForName(String name, ClassMetaData context) {\r\n+        return classForName(name, context, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Check the given name against the same set of standard packages used\r\n+     * when parsing metadata.\r\n+     */\r\n+    public static Class classForName(String name, ClassMetaData context,\r\n+        ClassLoader loader) {\r\n+        return classForName(name, context, context.getDescribedType(), null,\r\n+            loader);\r\n+    }\r\n+\r\n+    /**\r\n+     * Check the given name against the same set of standard packages used\r\n+     * when parsing metadata.\r\n+     */\r\n+    public static Class classForName(String name, ValueMetaData context) {\r\n+        return classForName(name, context, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Check the given name against the same set of standard packages used\r\n+     * when parsing metadata.\r\n+     */\r\n+    public static Class classForName(String name, ValueMetaData context,\r\n+        ClassLoader loader) {\r\n+        return classForName(name,\r\n+            context.getFieldMetaData().getDefiningMetaData(),\r\n+            context.getFieldMetaData().getDeclaringType(), context, loader);\r\n+    }\r\n+\r\n+    /**\r\n+     * Check the given name against the same set of standard packages used\r\n+     * when parsing metadata.\r\n+     */\r\n+    private static Class classForName(String name, ClassMetaData meta,\r\n+        Class dec, ValueMetaData vmd, ClassLoader loader) {\r\n+        // special case for PersistenceCapable and Object\r\n+        if (\"PersistenceCapable\".equals(name)\r\n+            || \"javax.jdo.PersistenceCapable\".equals(name)) // backwards compat\r\n+            return PersistenceCapable.class;\r\n+        if (\"Object\".equals(name))\r\n+            return Object.class;\r\n+        MetaDataRepository rep = meta.getRepository();\r\n+        boolean runtime = (rep.getValidate() & rep.VALIDATE_RUNTIME) != 0;\r\n+        if (loader == null)\r\n+            loader = rep.getConfiguration().getClassResolverInstance().\r\n+                getClassLoader(dec, meta.getEnvClassLoader());\r\n+        // try the owner's package\r\n+        String pkg = Strings.getPackageName(dec);\r\n+        Class cls = CFMetaDataParser.classForName(name, pkg, runtime, loader);\r\n+        if (cls == null && vmd != null) {\r\n+            // try against this value type's package too\r\n+            pkg = Strings.getPackageName(vmd.getDeclaredType());\r\n+            cls = CFMetaDataParser.classForName(name, pkg, runtime, loader);\r\n+        }\r\n+        if (cls == null)\r\n+            throw new MetaDataException(_loc.get(\"bad-class\", name,\r\n+                (vmd == null) ? (Object) meta : (Object) vmd));\r\n+        return cls;\r\n+    }\r\n+\r\n+    /**\r\n+     * Convert the given object to the given type if possible. If the type is\r\n+     * a numeric primitive, this method only guarantees that the return value\r\n+     * is a {@link Number}. If no known conversion or the value is null,\r\n+     * returns the original value.\r\n+     */\r\n+    public static Object convert(Object val, int typeCode) {\r\n+        if (val == null)\r\n+            return null;\r\n+        switch (typeCode) {\r\n+            case BIGDECIMAL:\r\n+                if (val instanceof BigDecimal)\r\n+                    return val;\r\n+                if (val instanceof Number)\r\n+                    return new BigDecimal(((Number) val).doubleValue());\r\n+                if (val instanceof String)\r\n+                    return new BigDecimal(val.toString());\r\n+                return val;\r\n+            case BIGINTEGER:\r\n+                if (val instanceof BigInteger)\r\n+                    return val;\r\n+                if (val instanceof Number || val instanceof String)\r\n+                    return new BigInteger(val.toString());\r\n+                return val;\r\n+            case BOOLEAN:\r\n+            case BOOLEAN_OBJ:\r\n+                if (val instanceof String)\r\n+                    return Boolean.valueOf(val.toString());\r\n+                return val;\r\n+            case BYTE_OBJ:\r\n+                if (val instanceof Byte)\r\n+                    return val;\r\n+                if (val instanceof Number)\r\n+                    return new Byte(((Number) val).byteValue());\r\n+                // no break\r\n+            case BYTE:\r\n+                if (val instanceof String)\r\n+                    return new Byte(val.toString());\r\n+                return val;\r\n+            case CHAR:\r\n+            case CHAR_OBJ:\r\n+                if (val instanceof Character)\r\n+                    return val;\r\n+                if (val instanceof String)\r\n+                    return new Character(val.toString().charAt(0));\r\n+                if (val instanceof Number)\r\n+                    return new Character((char) ((Number) val).intValue());\r\n+                return val;\r\n+            case DATE:\r\n+                if (val instanceof String)\r\n+                    return new Date(val.toString());\r\n+                return val;\r\n+            case DOUBLE_OBJ:\r\n+                if (val instanceof Double)\r\n+                    return val;\r\n+                if (val instanceof Number)\r\n+                    return new Double(((Number) val).doubleValue());\r\n+                // no break\r\n+            case DOUBLE:\r\n+                if (val instanceof String)\r\n+                    new Double(val.toString());\r\n+                return val;\r\n+            case FLOAT_OBJ:\r\n+                if (val instanceof Float)\r\n+                    return val;\r\n+                if (val instanceof Number)\r\n+                    return new Float(((Number) val).floatValue());\r\n+                // no break\r\n+            case FLOAT:\r\n+                if (val instanceof String)\r\n+                    new Float(val.toString());\r\n+                return val;\r\n+            case INT_OBJ:\r\n+                if (val instanceof Integer)\r\n+                    return val;\r\n+                if (val instanceof Number)\r\n+                    return Numbers.valueOf(((Number) val).intValue());\r\n+                // no break\r\n+            case INT:\r\n+                if (val instanceof String)\r\n+                    new Integer(val.toString());\r\n+                return val;\r\n+            case LONG_OBJ:\r\n+                if (val instanceof Long)\r\n+                    return val;\r\n+                if (val instanceof Number)\r\n+                    return Numbers.valueOf(((Number) val).longValue());\r\n+                // no break\r\n+            case LONG:\r\n+                if (val instanceof String)\r\n+                    new Long(val.toString());\r\n+                return val;\r\n+            case NUMBER:\r\n+                if (val instanceof Number)\r\n+                    return val;\r\n+                if (val instanceof String)\r\n+                    return new BigDecimal(val.toString());\r\n+                return val;\r\n+            case SHORT_OBJ:\r\n+                if (val instanceof Short)\r\n+                    return val;\r\n+                if (val instanceof Number)\r\n+                    return new Short(((Number) val).shortValue());\r\n+                // no break\r\n+            case SHORT:\r\n+                if (val instanceof String)\r\n+                    new Short(val.toString());\r\n+                return val;\r\n+            case STRING:\r\n+                return val.toString();\r\n+            default:\r\n+                return val;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return true if the(possibly unresolved) field or its elements might be\r\n+     * persistence capable objects.\r\n+     */\r\n+    public static boolean maybePC(FieldMetaData field) {\r\n+        switch (field.getDeclaredTypeCode()) {\r\n+            case JavaTypes.ARRAY:\r\n+            case JavaTypes.COLLECTION:\r\n+                return maybePC(field.getElement());\r\n+            case JavaTypes.MAP:\r\n+                return maybePC(field.getKey()) || maybePC(field.getElement());\r\n+            default:\r\n+                return maybePC((ValueMetaData) field);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return true if the(possibly unresolved) value might be a first class\r\n+     * object.\r\n+     */\r\n+    public static boolean maybePC(ValueMetaData val) {\r\n+        return maybePC(val.getDeclaredTypeCode(), val.getDeclaredType());\r\n+    }\r\n+\r\n+    /**\r\n+     * Return true if the given unresolved typecode/type pair may represent a\r\n+     * persistent object.\r\n+     */\r\n+    static boolean maybePC(int typeCode, Class type) {\r\n+        if (type == null)\r\n+            return false;\r\n+        switch (typeCode) {\r\n+            case JavaTypes.OBJECT:\r\n+            case JavaTypes.PC:\r\n+            case JavaTypes.PC_UNTYPED:\r\n+                return true;\r\n+            case JavaTypes.COLLECTION:\r\n+            case JavaTypes.MAP:\r\n+                return !type.getName().startsWith(\"java.util.\");\r\n+            default:\r\n+                return false;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Helper method to return the given array value as a collection.\r\n+     */\r\n+    public static List toList(Object val, Class elem, boolean mutable) {\r\n+        if (val == null)\r\n+            return null;\r\n+        List l;\r\n+        if (!elem.isPrimitive()) {\r\n+            // if an object array, use built-in list function\r\n+            l = Arrays.asList((Object[]) val);\r\n+            if (mutable)\r\n+                l = new ArrayList(l);\r\n+        } else {\r\n+            // convert to list of wrapper objects\r\n+            int length = Array.getLength(val);\r\n+            l = new ArrayList(length);\r\n+            for (int i = 0; i < length; i++)\r\n+                l.add(Array.get(val, i));\r\n+        }\r\n+        return l;\r\n+    }\r\n+\r\n+    /**\r\n+     * Helper method to return the given collection as an array.\r\n+     */\r\n+    public static Object toArray(Collection coll, Class elem) {\r\n+        if (coll == null)\r\n+            return null;\r\n+        Object array = Array.newInstance(elem, coll.size());\r\n+        int idx = 0;\r\n+        for (Iterator itr = coll.iterator(); itr.hasNext(); idx++)\r\n+            Array.set(array, idx, itr.next());\r\n+        return array;\r\n+    }\r\n+}\r"},{"sha":"38dad4e8cfbb1a589e8ef3f24c195ab2f63e6a4e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","status":"added","additions":238,"deletions":0,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,238 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.util.Arrays;\r\n+\r\n+import org.apache.openjpa.event.LifecycleCallbacks;\r\n+import org.apache.openjpa.event.LifecycleEvent;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.InternalException;\r\n+\r\n+/**\r\n+ * Information about lifecycle events for a managed type.\r\n+ *\r\n+ * @author Steve Kim\r\n+ * @author Abe White\r\n+ */\r\n+public class LifecycleMetaData {\r\n+\r\n+    public static final int IGNORE_NONE = 0;\r\n+    public static final int IGNORE_HIGH = 2 << 0;\r\n+    public static final int IGNORE_LOW = 2 << 1;\r\n+    private static final LifecycleCallbacks[] EMPTY_CALLBACKS =\r\n+        new LifecycleCallbacks[0];\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (LifecycleMetaData.class);\r\n+    private final ClassMetaData _meta;\r\n+    private LifecycleCallbacks[][] _declared = null;\r\n+    private LifecycleCallbacks[][] _super = null;\r\n+    private LifecycleCallbacks[][] _all = null;\r\n+    private int[] _high = null;\r\n+    private int[] _superHigh = null;\r\n+    private boolean _resolved = false;\r\n+    private boolean _ignoreSystem = false;\r\n+    private int _ignoreSups = 0;\r\n+\r\n+    /**\r\n+     * Construct with owning metadata.\r\n+     */\r\n+    LifecycleMetaData(ClassMetaData meta) {\r\n+        _meta = meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether to exclude system listeners from events.\r\n+     */\r\n+    public boolean getIgnoreSystemListeners() {\r\n+        return _ignoreSystem;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether to exclude system listeners from events.\r\n+     */\r\n+    public void setIgnoreSystemListeners(boolean ignore) {\r\n+        _ignoreSystem = ignore;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether to exclude superclass callbacks from events.\r\n+     */\r\n+    public int getIgnoreSuperclassCallbacks() {\r\n+        return _ignoreSups;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether to exclude superclass callbacks from events.\r\n+     */\r\n+    public void setIgnoreSuperclassCallbacks(int ignore) {\r\n+        _ignoreSups = ignore;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the declared callbacks for the given event type.\r\n+     */\r\n+    public LifecycleCallbacks[] getDeclaredCallbacks(int eventType) {\r\n+        return (_declared == null || _declared[eventType] == null)\r\n+            ? EMPTY_CALLBACKS : _declared[eventType];\r\n+    }\r\n+\r\n+    /**\r\n+     * Return all callbacks for the given event type, including superclass\r\n+     * callbacks if appropriate.\r\n+     */\r\n+    public LifecycleCallbacks[] getCallbacks(int eventType) {\r\n+        resolve();\r\n+        return (_all == null || _all[eventType] == null)\r\n+            ? EMPTY_CALLBACKS : _all[eventType];\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the callbacks for the given event type.\r\n+     *\r\n+     * @param highPriority the first N given callbacks are high priority;\r\n+     *                     high priority callbacks will be returned before\r\n+     *                     non-high-priority superclass callbacks\r\n+     */\r\n+    public void setDeclaredCallbacks(int eventType,\r\n+        LifecycleCallbacks[] callbacks, int highPriority) {\r\n+        if (_resolved)\r\n+            throw new InternalException(_loc.get(\"lifecycle-resolved\",\r\n+                _meta, Arrays.asList(callbacks)));\r\n+        if (_declared == null) {\r\n+            _declared = new LifecycleCallbacks\r\n+                [LifecycleEvent.ALL_EVENTS.length][];\r\n+            _high = new int[LifecycleEvent.ALL_EVENTS.length];\r\n+        }\r\n+        _declared[eventType] = callbacks;\r\n+        _high[eventType] = highPriority;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the callbacks for the non-PC superclass.\r\n+     */\r\n+    public LifecycleCallbacks[] getNonPCSuperclassCallbacks(int eventType) {\r\n+        return (_super == null || _super[eventType] == null)\r\n+            ? EMPTY_CALLBACKS : _super[eventType];\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the callbacks for the given event type for non-persistent\r\n+     * superclass. Note these callbacks will only be used where the\r\n+     * non-persistent superclass is the direct ancestor of the described class.\r\n+     *\r\n+     * @param highPriority the first N given callbacks are high priority;\r\n+     *                     high priority callbacks will be returned before\r\n+     *                     non-high-priority superclass callbacks\r\n+     */\r\n+    public void setNonPCSuperclassCallbacks(int eventType,\r\n+        LifecycleCallbacks[] callbacks, int highPriority) {\r\n+        if (_resolved)\r\n+            throw new InternalException(_loc.get(\"lifecycle-resolved\",\r\n+                _meta, Arrays.asList(callbacks)));\r\n+        if (_super == null) {\r\n+            _super = new LifecycleCallbacks\r\n+                [LifecycleEvent.ALL_EVENTS.length][];\r\n+            _superHigh = new int[LifecycleEvent.ALL_EVENTS.length];\r\n+        }\r\n+        _super[eventType] = callbacks;\r\n+        _superHigh[eventType] = highPriority;\r\n+    }\r\n+\r\n+    /**\r\n+     * Resolve all callbacks.\r\n+     */\r\n+    void resolve() {\r\n+        if (!_resolved) {\r\n+            _all = combineCallbacks();\r\n+            _resolved = true;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Combine our callbacks with superclass callbacks as necessary.\r\n+     * This method has the side effect of manipulating the _high array to\r\n+     * reflect the combined callbacks rather than the declared ones.\r\n+     */\r\n+    private LifecycleCallbacks[][] combineCallbacks() {\r\n+        if (_ignoreSups == (IGNORE_HIGH | IGNORE_LOW))\r\n+            return _declared;\r\n+        LifecycleMetaData supMeta = (_meta.getPCSuperclass() == null) ? null\r\n+            : _meta.getPCSuperclassMetaData().getLifecycleMetaData();\r\n+        if (supMeta == null && _super == null)\r\n+            return _declared;\r\n+        if (supMeta != null) {\r\n+            supMeta.resolve();\r\n+            if (supMeta._all == null)\r\n+                return _declared;\r\n+            if (_declared == null && _ignoreSups == 0) {\r\n+                _high = supMeta._high;\r\n+                return supMeta._all;\r\n+            }\r\n+            // don't hold strong refs onto redundant info\r\n+            _super = null;\r\n+            _superHigh = null;\r\n+        }\r\n+        LifecycleCallbacks[][] all = new LifecycleCallbacks\r\n+            [LifecycleEvent.ALL_EVENTS.length][];\r\n+        LifecycleCallbacks[] decs, sups;\r\n+        int supStart, supEnd, supHigh;\r\n+        int count;\r\n+        for (int i = 0; i < all.length; i++) {\r\n+            decs = getDeclaredCallbacks(i);\r\n+            if (supMeta == null) {\r\n+                sups = (_super[i] == null) ? EMPTY_CALLBACKS : _super[i];\r\n+                supHigh = (_superHigh == null) ? 0 : _superHigh[i];\r\n+            } else {\r\n+                sups = supMeta.getCallbacks(i);\r\n+                supHigh = (supMeta._high == null) ? 0 : supMeta._high[i];\r\n+            }\r\n+            supStart = ((_ignoreSups & IGNORE_HIGH) != 0) ? supHigh : 0;\r\n+            supEnd = ((_ignoreSups & IGNORE_LOW) != 0) ? supHigh : sups.length;\r\n+            if (supEnd - supStart == 0)\r\n+                all[i] = decs;\r\n+            else if (decs.length == 0) {\r\n+                if (supEnd - supStart == sups.length)\r\n+                    all[i] = sups;\r\n+                else {\r\n+                    all[i] = new LifecycleCallbacks[supEnd - supStart];\r\n+                    System.arraycopy(sups, supStart, all[i], 0, all[i].length);\r\n+                }\r\n+                if (_high == null)\r\n+                    _high = new int[all.length];\r\n+                _high[i] = supHigh - supStart;\r\n+            } else {\r\n+                all[i] =\r\n+                    new LifecycleCallbacks[decs.length + supEnd - supStart];\r\n+                count = 0;\r\n+                // add superclass high priority callbacks first\r\n+                if ((_ignoreSups & IGNORE_HIGH) == 0)\r\n+                    for (int j = 0; j < supHigh; j++)\r\n+                        all[i][count++] = sups[j];\r\n+                // then our high priority\r\n+                for (int j = 0; j < _high[i]; j++)\r\n+                    all[i][count++] = decs[j];\r\n+                // then superclass low priority\r\n+                if ((_ignoreSups & IGNORE_LOW) == 0)\r\n+                    for (int j = supHigh; j < sups.length; j++)\r\n+                        all[i][count++] = sups[j];\r\n+                // then our low priority\r\n+                for (int j = _high[i]; j < decs.length; j++)\r\n+                    all[i][count++] = decs[j];\r\n+                if ((_ignoreSups & IGNORE_HIGH) == 0)\r\n+                    _high[i] += supHigh;\r\n+            }\r\n+        }\r\n+        return all;\r\n+    }\r\n+}\r"},{"sha":"ec470fcfbb2294c66109a62c572aefca279a45fb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataContext.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataContext.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataContext.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+/**\r\n+ * Allows us to access configuration through metadata in a generic way.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface MetaDataContext {\r\n+\r\n+    /**\r\n+     * Access metadata repository.\r\n+     */\r\n+    public MetaDataRepository getRepository();\r\n+}\r"},{"sha":"9f07f559bd84bce59dda6ef828df8d6502da35e4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.lang.reflect.Member;\r\n+\r\n+import org.apache.openjpa.event.CallbackModes;\r\n+\r\n+/**\r\n+ * Populates new metadata with default values.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface MetaDataDefaults extends CallbackModes {\r\n+\r\n+    /**\r\n+     * Return the default access type for base persistent class with\r\n+     * {@link ClassMetaData.ACCESS_UNKNOWN} access type.\r\n+     */\r\n+    public int getDefaultAccessType();\r\n+\r\n+    /**\r\n+     * What to do on lifecycle callback exceptions.\r\n+     */\r\n+    public int getCallbackMode();\r\n+\r\n+    /**\r\n+     * If callbacks are fired before listeners for the given\r\n+     * event type. Defaults to false.\r\n+     */\r\n+    public boolean getCallbacksBeforeListeners(int type);\r\n+\r\n+    /**\r\n+     * Whether to ignore members which are not persistent by default\r\n+     * during metadata population. Defaults to true.\r\n+     */\r\n+    public void setIgnoreNonPersistent(boolean ignore);\r\n+\r\n+    /**\r\n+     * Populate the given metadata with default settings.\r\n+     *\r\n+     * @param access access type constant from {@link ClassMetaData}\r\n+     */\r\n+    public void populate(ClassMetaData meta, int access);\r\n+\r\n+    /**\r\n+     * Return the backing member for the given field metadata.\r\n+     */\r\n+    public Member getBackingMember(FieldMetaData field);\r\n+}\r"},{"sha":"c80b31e9f07ae7472aad3a7a5b33e41023b5541d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,134 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.File;\r\n+import java.util.Collection;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.lib.meta.ClassArgParser;\r\n+\r\n+/**\r\n+ * The {@link MetaDataRepository} uses implementations of this interface\r\n+ * to load and store metadata. Implementations need not be threadsafe.\r\n+ *\r\n+ * @author Patrick Linskey\r\n+ * @author Abe White\r\n+ */\r\n+public interface MetaDataFactory extends MetaDataModes {\r\n+\r\n+    public static final int STORE_DEFAULT = 0;\r\n+    public static final int STORE_PER_CLASS = 1;\r\n+    public static final int STORE_VERBOSE = 2;\r\n+\r\n+    /**\r\n+     * Set the repository to load metadata into.\r\n+     * This method will be called before use.\r\n+     */\r\n+    public void setRepository(MetaDataRepository repos);\r\n+\r\n+    /**\r\n+     * Base directory for storing metadata. May not be called.\r\n+     */\r\n+    public void setStoreDirectory(File dir);\r\n+\r\n+    /**\r\n+     * Storage mode. May not be called.\r\n+     */\r\n+    public void setStoreMode(int store);\r\n+\r\n+    /**\r\n+     * If true, I/O's must exactly obey the mode directives given, and may\r\n+     * not load additional information.\r\n+     */\r\n+    public void setStrict(boolean strict);\r\n+\r\n+    /**\r\n+     * Load metadata for the given class in the given mode(s). If loading\r\n+     * in {@link MetaDataModes#MODE_QUERY}, the class may be null. Loaded\r\n+     * metadata should be added directly to the repository. It should have\r\n+     * its source mode set appropriately via\r\n+     * {@link ClassMetaData#setSourceMode}.\r\n+     *\r\n+     * @param mode the mode to load metadata in: if mapping information is\r\n+     *             stored together with metadata, then you can load mapping\r\n+     *             data even if this mode only includes\r\n+     *             {@link MetaDataModes#MODE_META MODE_META}, so long as\r\n+     *             the <code>strict</code> property hasn't been set\r\n+     */\r\n+    public void load(Class cls, int mode, ClassLoader envLoader);\r\n+\r\n+    /**\r\n+     * Store the given metadata.\r\n+     *\r\n+     * @param mode   hint about what aspects of the metadata have changed\r\n+     * @param output if non-null, rather than storing metadata directly,\r\n+     *               add entries mapping each output destination such\r\n+     *               as a <code>File</code> to the planned output for that\r\n+     *               destination in string form\r\n+     * @return false if this factory is unable to store metadata\r\n+     */\r\n+    public boolean store(ClassMetaData[] metas, QueryMetaData[] queries,\r\n+        SequenceMetaData[] seqs, int mode, Map output);\r\n+\r\n+    /**\r\n+     * Drop the metadata for the given classes in the given mode(s).\r\n+     *\r\n+     * @return false if any metadata could not be dropped\r\n+     */\r\n+    public boolean drop(Class[] cls, int mode, ClassLoader envLoader);\r\n+\r\n+    /**\r\n+     * Return the metadata defaults for this factory.\r\n+     */\r\n+    public MetaDataDefaults getDefaults();\r\n+\r\n+    /**\r\n+     * Return all persistent class names, using the metadata locations supplied\r\n+     * in configuration, optionally scanning the classpath.\r\n+     * Return null if no types are supplied and this factory is unable to scan\r\n+     * the classpath. This method should not be used directly by outside\r\n+     * code; use {@link MetaDataRepository#getPersistentTypeNames} instead.\r\n+     *\r\n+     * @see MetaDataRepository#getPersistentTypeNames\r\n+     * @see MetaDataRepository#loadPersistentTypes\r\n+     */\r\n+    public Set getPersistentTypeNames(boolean devpath, ClassLoader envLoader);\r\n+\r\n+    /**\r\n+     * Return the type defining the given query name, if any.\r\n+     */\r\n+    public Class getQueryScope(String queryName, ClassLoader loader);\r\n+\r\n+    /**\r\n+     * Return a properly-configured class arg parser for our expected\r\n+     * metadata format.\r\n+     */\r\n+    public ClassArgParser newClassArgParser();\r\n+\r\n+    /**\r\n+     * Clear any internal caches.\r\n+     */\r\n+    public void clear();\r\n+\r\n+    /**\r\n+     * Add any extension keys used by this instance to the given set.\r\n+     */\r\n+    public void addClassExtensionKeys(Collection exts);\r\n+\r\n+    /**\r\n+     * Add any extension keys used by this instance to the given set.\r\n+     */\r\n+    public void addFieldExtensionKeys(Collection exts);\r\n+}\r"},{"sha":"743e43d6a788c5c4ace43cfbfc6dbe4fa45a8a5e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,27 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+/**\r\n+ * Comparator that keeps metadatas in inheritance order.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class MetaDataInheritanceComparator extends InheritanceComparator {\r\n+\r\n+    protected Class toClass(Object elem) {\r\n+        return (elem == null) ? null\r\n+            : ((ClassMetaData) elem).getDescribedType();\r\n+    }\r\n+}\r"},{"sha":"6b355868ea0462dc1845c44dd287b292fcd5a8c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,29 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+/**\r\n+ * Mode constants used to track the initialization status of metadata.\r\n+ * These constants can be used as bit flags.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public interface MetaDataModes {\r\n+\r\n+    public static final int MODE_NONE = 0;\r\n+    public static final int MODE_META = 1;\r\n+    public static final int MODE_MAPPING = 2;\r\n+    public static final int MODE_QUERY = 4;\r\n+    public static final int MODE_MAPPING_INIT = 8;\r\n+}\r"},{"sha":"641236b7492fbbdde0ef1c0521d62a042fbdb6eb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"added","additions":1501,"deletions":0,"changes":1501,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,1501 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.SortedSet;\r\n+import java.util.TreeSet;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.enhance.PCRegistry;\r\n+import org.apache.openjpa.enhance.PCRegistry.RegisterClassListener;\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.event.LifecycleEventManager;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Closeable;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n+import org.apache.openjpa.util.OpenJPAId;\r\n+import serp.util.Strings;\r\n+\r\n+/**\r\n+ * Repository of and factory for persistent metadata.\r\n+ *\r\n+ * @author Abe White\r\n+ * @author Steve Kim(query metadata)\r\n+ * @since 3.0\r\n+ */\r\n+public class MetaDataRepository\r\n+    implements PCRegistry.RegisterClassListener, Closeable, MetaDataModes {\r\n+\r\n+    /**\r\n+     * Constant to not validate any metadata.\r\n+     */\r\n+    public static final int VALIDATE_NONE = 0;\r\n+\r\n+    /**\r\n+     * Bit flag to validate metadata.\r\n+     */\r\n+    public static final int VALIDATE_META = 1;\r\n+\r\n+    /**\r\n+     * Bit flag to validate mappings.\r\n+     */\r\n+    public static final int VALIDATE_MAPPING = 2;\r\n+\r\n+    /**\r\n+     * Bit flag to validate unenhanced metadata only.\r\n+     */\r\n+    public static final int VALIDATE_UNENHANCED = 4;\r\n+\r\n+    /**\r\n+     * Bit flag for runtime validation. Requires that all classes are\r\n+     * enhanced, and performs extra field resolution steps.\r\n+     */\r\n+    public static final int VALIDATE_RUNTIME = 8;\r\n+    protected static final Class[] EMPTY_CLASSES = new Class[0];\r\n+    protected final ClassMetaData[] EMPTY_METAS;\r\n+    protected final FieldMetaData[] EMPTY_FIELDS;\r\n+    protected final Order[] EMPTY_ORDERS;\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (MetaDataRepository.class);\r\n+    // number of metadatas that have been registered thus far. This does not\r\n+    // include dynamically-generated subclasses; it is just the count of\r\n+    // user-created metadatas that were registered.\r\n+    private int _count = 0;\r\n+    // system sequence\r\n+    private SequenceMetaData _sysSeq = null;\r\n+    // cache of parsed metadata, oid class to class, and interface class\r\n+    // to metadatas\r\n+    private final Map _metas = new HashMap();\r\n+    private final Map _oids = Collections.synchronizedMap(new HashMap());\r\n+    private final Map _impls = Collections.synchronizedMap(new HashMap());\r\n+    private final Map _queries = new HashMap();\r\n+    private final Map _seqs = new HashMap();\r\n+    private final Map _aliases = Collections.synchronizedMap(new HashMap());\r\n+    // map of classes to lists of their subclasses\r\n+    private final Map _subs = Collections.synchronizedMap(new HashMap());\r\n+    private final OpenJPAConfiguration _conf;\r\n+    private final Log _log;\r\n+    private final MetaDataFactory _factory;\r\n+    private int _resMode = MODE_META | MODE_MAPPING;\r\n+    private int _sourceMode = MODE_META | MODE_MAPPING | MODE_QUERY;\r\n+    private int _validate = VALIDATE_META | VALIDATE_UNENHANCED;\r\n+    // we buffer up any classes that register themselves to prevent\r\n+    // reentrancy errors if classes register during a current parse(common)\r\n+    private final Collection _registered = new ArrayList();\r\n+    // set of metadatas we're in the process of resolving\r\n+    private final SortedSet _resolving = new TreeSet\r\n+        (new MetaDataInheritanceComparator());\r\n+    private final SortedSet _mapping = new TreeSet\r\n+        (new MetaDataInheritanceComparator());\r\n+    private final List _errs = new LinkedList();\r\n+    // system listeners\r\n+    private LifecycleEventManager.ListenerList _listeners =\r\n+        new LifecycleEventManager.ListenerList(3);\r\n+\r\n+    /**\r\n+     * Constructor. Supply configuration.\r\n+     */\r\n+    public MetaDataRepository(OpenJPAConfiguration conf) {\r\n+        this(conf, conf.newMetaDataFactoryInstance());\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor. Supply configuration and metadata generator.\r\n+     */\r\n+    public MetaDataRepository(OpenJPAConfiguration conf,\r\n+        MetaDataFactory factory) {\r\n+        _conf = conf;\r\n+        _log = conf.getLog(OpenJPAConfiguration.LOG_METADATA);\r\n+        _factory = factory;\r\n+        _factory.setRepository(this);\r\n+        EMPTY_METAS = newClassMetaDataArray(0);\r\n+        EMPTY_FIELDS = newFieldMetaDataArray(0);\r\n+        EMPTY_ORDERS = newOrderArray(0);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the configuration for the repository.\r\n+     */\r\n+    public OpenJPAConfiguration getConfiguration() {\r\n+        return _conf;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the metadata log.\r\n+     */\r\n+    public Log getLog() {\r\n+        return _log;\r\n+    }\r\n+\r\n+    /**\r\n+     * The I/O used to load metadata.\r\n+     */\r\n+    public MetaDataFactory getMetaDataFactory() {\r\n+        return _factory;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new instance of the same type as this instance, using this\r\n+     * instance's configuration.\r\n+     */\r\n+    public MetaDataRepository newInstance() {\r\n+        return new MetaDataRepository(getConfiguration());\r\n+    }\r\n+\r\n+    /**\r\n+     * The metadata validation level. Defaults to\r\n+     * <code>VALIDATE_META | VALIDATE_UNENHANCED</code>.\r\n+     */\r\n+    public int getValidate() {\r\n+        return _validate;\r\n+    }\r\n+\r\n+    /**\r\n+     * The metadata validation level. Defaults to\r\n+     * <code>VALIDATE_META | VALIDATE_UNENHANCED</code>.\r\n+     */\r\n+    public void setValidate(int validate) {\r\n+        _validate = validate;\r\n+    }\r\n+\r\n+    /**\r\n+     * The metadata validation level. Defaults to\r\n+     * <code>VALIDATE_META | VALIDATE_MAPPING | VALIDATE_UNENHANCED</code>.\r\n+     */\r\n+    public void setValidate(int validate, boolean on) {\r\n+        if (validate == VALIDATE_NONE)\r\n+            _validate = validate;\r\n+        else if (on)\r\n+            _validate |= validate;\r\n+        else _validate &= ~validate;\r\n+    }\r\n+\r\n+    /**\r\n+     * The metadata resolution mode. Defaults to\r\n+     * <code>MODE_META | MODE_MAPPING</code>.\r\n+     */\r\n+    public int getResolve() {\r\n+        return _resMode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The metadata resolution mode. Defaults to\r\n+     * <code>MODE_META | MODE_MAPPING</code>.\r\n+     */\r\n+    public void setResolve(int mode) {\r\n+        _resMode = mode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The metadata resolution mode. Defaults to\r\n+     * <code>MODE_META | MODE_MAPPING</code>.\r\n+     */\r\n+    public void setResolve(int mode, boolean on) {\r\n+        if (mode == MODE_NONE)\r\n+            _resMode = mode;\r\n+        else if (on)\r\n+            _resMode |= mode;\r\n+        else _resMode &= ~mode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The source mode determining what metadata to load. Defaults to\r\n+     * <code>MODE_META | MODE_MAPPING | MODE_QUERY</code>.\r\n+     */\r\n+    public int getSourceMode() {\r\n+        return _sourceMode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The source mode determining what metadata to load. Defaults to\r\n+     * <code>MODE_META | MODE_MAPPING | MODE_QUERY</code>.\r\n+     */\r\n+    public void setSourceMode(int mode) {\r\n+        _sourceMode = mode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The source mode determining what metadata to load. Defaults to\r\n+     * <code>MODE_META | MODE_MAPPING | MODE_QUERY</code>.\r\n+     */\r\n+    public void setSourceMode(int mode, boolean on) {\r\n+        if (mode == MODE_NONE)\r\n+            _sourceMode = mode;\r\n+        else if (on)\r\n+            _sourceMode |= mode;\r\n+        else _sourceMode &= ~mode;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the metadata for the given class.\r\n+     *\r\n+     * @param cls       the class to retrieve metadata for\r\n+     * @param envLoader the environmental class loader, if any\r\n+     * @param mustExist if true, throws a {@link MetaDataException}\r\n+     *                  if no metadata is found\r\n+     */\r\n+    public synchronized ClassMetaData getMetaData(Class cls,\r\n+        ClassLoader envLoader, boolean mustExist) {\r\n+        ClassMetaData meta = getMetaDataInternal(cls, envLoader);\r\n+        if (meta == null && mustExist) {\r\n+            if (cls != null && !PersistenceCapable.class.isAssignableFrom(cls))\r\n+                throw new MetaDataException(_loc.get(\"no-meta-notpc\", cls)).\r\n+                    setFatal(false);\r\n+            Set pcNames = getPersistentTypeNames(false, envLoader);\r\n+            if (pcNames != null && pcNames.size() > 0)\r\n+                throw new MetaDataException(_loc.get(\"no-meta-types\",\r\n+                    cls, pcNames));\r\n+            throw new MetaDataException(_loc.get(\"no-meta\", cls));\r\n+        }\r\n+        resolve(meta);\r\n+        return meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the metadata for the given alias name.\r\n+     *\r\n+     * @param alias     the alias to class to retrieve metadata for\r\n+     * @param envLoader the environmental class loader, if any\r\n+     * @param mustExist if true, throws a {@link MetaDataException}\r\n+     *                  if no metadata is found\r\n+     * @see ClassMetaData#getTypeAlias\r\n+     */\r\n+    public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\r\n+        boolean mustExist) {\r\n+        if (alias == null && mustExist)\r\n+            throw new MetaDataException(_loc.get(\"no-alias-meta\", alias,\r\n+                _aliases));\r\n+        if (alias == null)\r\n+            return null;\r\n+        // check cache\r\n+        processRegisteredClasses();\r\n+        List classList = (List) _aliases.get(alias);\r\n+        Class cls = null;\r\n+        // multiple classes may have been defined with the same alias: we\r\n+        // will filter by checking against the current list of the\r\n+        // persistent types and filted based on which classes are loadable\r\n+        // via the current environment's ClassLoader\r\n+        Set pcNames = getPersistentTypeNames(false, envLoader);\r\n+        for (int i = 0; classList != null && i < classList.size(); i++) {\r\n+            Class c = (Class) classList.get(i);\r\n+            try {\r\n+                // re-load the class in the current environment loader so\r\n+                // that we can handle redeployment of the same class name\r\n+                Class nc = Class.forName(c.getName(), false, envLoader);\r\n+                // if we have specified a list of persistent clases,\r\n+                // also check to ensure that the class is in that list\r\n+                if (pcNames == null || pcNames.size() == 0 ||\r\n+                    pcNames.contains(nc.getName())) {\r\n+                    cls = nc;\r\n+                    if (!classList.contains(cls))\r\n+                        classList.add(cls);\r\n+                    break;\r\n+                }\r\n+            } catch (Throwable t) {\r\n+                // this happens when the class is not loadable by\r\n+                // the environment class loader, so it was probably\r\n+                // listed elsewhere; also ignore linkage failures and\r\n+                // other class loading problems\r\n+            }\r\n+        }\r\n+        if (cls != null)\r\n+            return getMetaData(cls, envLoader, mustExist);\r\n+        // maybe this is some type we've seen but just isn't valid\r\n+        if (_aliases.containsKey(alias)) {\r\n+            if (mustExist)\r\n+                throw new MetaDataException(_loc.get(\"no-alias-meta\", alias,\r\n+                    _aliases));\r\n+            return null;\r\n+        }\r\n+        // record that this is an invalid type\r\n+        _aliases.put(alias, null);\r\n+        if (!mustExist)\r\n+            return null;\r\n+        throw new MetaDataException(_loc.get(\"no-alias-meta\", alias,\r\n+            _aliases));\r\n+    }\r\n+\r\n+    /**\r\n+     * Internal method to get the metadata for the given class, without\r\n+     * resolving it.\r\n+     */\r\n+    private ClassMetaData getMetaDataInternal(Class cls,\r\n+        ClassLoader envLoader) {\r\n+        if (cls == null)\r\n+            return null;\r\n+        // check cache for existing metadata, or give up if no metadata and\r\n+        // our list of configured persistent types doesn't include the class\r\n+        ClassMetaData meta = (ClassMetaData) _metas.get(cls);\r\n+        if (meta != null && ((meta.getSourceMode() & MODE_META) != 0\r\n+            || (_sourceMode & MODE_META) == 0))\r\n+            return meta;\r\n+        // if runtime, cut off search if not in pc list.  we don't do this at\r\n+        // dev time so that user can manipulate persistent classes he's writing\r\n+        // before adding them to the list\r\n+        if ((_validate & VALIDATE_RUNTIME) != 0) {\r\n+            Set pcNames = _factory.getPersistentTypeNames(false, envLoader);\r\n+            if (pcNames != null && !pcNames.contains(cls.getName()))\r\n+                return meta;\r\n+        }\r\n+        if (meta == null) {\r\n+            // check to see if maybe we know this class has no metadata\r\n+            if (_metas.containsKey(cls))\r\n+                return null;\r\n+            // make sure this isn't an obviously bad class\r\n+            if (cls.isPrimitive() || cls.getName().startsWith(\"java.\")\r\n+                || cls == PersistenceCapable.class)\r\n+                return null;\r\n+            // designed to get around jikes 1.17 / JDK1.5 issue where static\r\n+            // initializers are not invoked when a class is referenced, so the\r\n+            // class never registers itself with the system\r\n+            if ((_validate & VALIDATE_RUNTIME) != 0) {\r\n+                try {\r\n+                    Class.forName(cls.getName(), true,\r\n+                        cls.getClassLoader());\r\n+                } catch (Throwable t) {\r\n+                }\r\n+            }\r\n+        }\r\n+        // not in cache: load metadata or mappings depending on source mode.\r\n+        // loading metadata might also load mappings, but doesn't have to\r\n+        int mode = 0;\r\n+        if ((_sourceMode & MODE_META) != 0)\r\n+            mode = _sourceMode & ~MODE_MAPPING;\r\n+        else if ((_sourceMode & MODE_MAPPING) == 0)\r\n+            mode = _sourceMode;\r\n+        if (mode != MODE_NONE) {\r\n+            if (_log.isTraceEnabled())\r\n+                _log.trace(_loc.get(\"load-cls\", cls, toModeString(mode)));\r\n+            _factory.load(cls, mode, envLoader);\r\n+        }\r\n+        // check cache again\r\n+        if (meta == null)\r\n+            meta = (ClassMetaData) _metas.get(cls);\r\n+        if (meta != null && ((meta.getSourceMode() & MODE_META) != 0\r\n+            || (_sourceMode & MODE_META) == 0))\r\n+            return meta;\r\n+        // record that this class has no metadata; checking for this later\r\n+        // speeds things up in environments with slow class loading\r\n+        // like appservers\r\n+        if (meta != null)\r\n+            removeMetaData(meta);\r\n+        _metas.put(cls, null);\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a string representation of the given mode flags.\r\n+     */\r\n+    private static String toModeString(int mode) {\r\n+        StringBuffer buf = new StringBuffer(31);\r\n+        if ((mode & MODE_META) != 0)\r\n+            buf.append(\"[META]\");\r\n+        if ((mode & MODE_QUERY) != 0)\r\n+            buf.append(\"[QUERY]\");\r\n+        if ((mode & MODE_MAPPING) != 0)\r\n+            buf.append(\"[MAPPING]\");\r\n+        if ((mode & MODE_MAPPING_INIT) != 0)\r\n+            buf.append(\"[MAPPING_INIT]\");\r\n+        return buf.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Prepare metadata for mapping resolution. This method might map parts\r\n+     * of the metadata that don't rely on other classes being mapped, but that\r\n+     * other classes might rely on during their own mapping(for example,\r\n+     * primary key fields). By default, this method only calls\r\n+     * {@link ClassMetaData#defineSuperclassFields}.\r\n+     */\r\n+    protected void prepareMapping(ClassMetaData meta) {\r\n+        meta.defineSuperclassFields(false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Resolve the given metadata if needed. There are three goals:\r\n+     * <ol>\r\n+     * <li>Make sure no unresolved metadata gets back to the client.</li>\r\n+     * <li>Avoid infinite reentrant calls for mutually-dependent metadatas by\r\n+     * allowing unresolved metadata to be returned to other metadatas.</li>\r\n+     * <li>Always make sure the superclass metadata is resolved before the\r\n+     * subclass metadata so that the subclass can access the super's list\r\n+     * of fields.</li>\r\n+     * </ol> Note that the code calling this method is synchronized, so this\r\n+     * method doesn't have to be.\r\n+     */\r\n+    private void resolve(ClassMetaData meta) {\r\n+        // return anything that has its metadata resolved, because that means\r\n+        // it is either fully resolved or must at least be in the process of\r\n+        // resolving mapping, etc since we do that right after meta resolve\r\n+        if (meta == null || _resMode == MODE_NONE\r\n+            || (meta.getResolve() & MODE_META) != 0)\r\n+            return;\r\n+        // resolve metadata\r\n+        List resolved = resolveMeta(meta);\r\n+        if (resolved == null)\r\n+            return;\r\n+        // load mapping data\r\n+        for (int i = 0; i < resolved.size(); i++)\r\n+            loadMapping((ClassMetaData) resolved.get(i));\r\n+        // resolve mappings\r\n+        boolean err = true;\r\n+        if ((_resMode & MODE_MAPPING) != 0)\r\n+            for (int i = 0; i < resolved.size(); i++)\r\n+                err &= resolveMapping((ClassMetaData) resolved.get(i));\r\n+        // throw errors encountered\r\n+        if (err && !_errs.isEmpty()) {\r\n+            RuntimeException re;\r\n+            if (_errs.size() == 1)\r\n+                re = (RuntimeException) _errs.get(0);\r\n+            else re = new MetaDataException(_loc.get(\"resolve-errs\")).\r\n+                setNestedThrowables((Throwable[]) _errs.toArray\r\n+                    (new Exception[_errs.size()]));\r\n+            ;\r\n+            _errs.clear();\r\n+            throw re;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Resolve metadata mode, returning list of processed metadadatas, or null\r\n+     * if we're still in the process of resolving other metadatas.\r\n+     */\r\n+    private List resolveMeta(ClassMetaData meta) {\r\n+        if (meta.getPCSuperclass() == null) {\r\n+            // set superclass\r\n+            Class sup = meta.getDescribedType().getSuperclass();\r\n+            ClassMetaData supMeta;\r\n+            while (sup != null && sup != Object.class) {\r\n+                supMeta = getMetaData(sup, meta.getEnvClassLoader(), false);\r\n+                if (supMeta != null) {\r\n+                    meta.setPCSuperclass(sup);\r\n+                    meta.setPCSuperclassMetaData(supMeta);\r\n+                    break;\r\n+                } else sup = sup.getSuperclass();\r\n+            }\r\n+            if (_log.isTraceEnabled())\r\n+                _log.trace(_loc.get(\"assigned-sup\", meta,\r\n+                    meta.getPCSuperclass()));\r\n+        }\r\n+        // resolve metadata; if we're not in the process of resolving\r\n+        // others, this will return the set of interrelated metas that\r\n+        // resolved\r\n+        return processBuffer(meta, _resolving, MODE_META);\r\n+    }\r\n+\r\n+    /**\r\n+     * Load mapping information for the given metadata.\r\n+     */\r\n+    private void loadMapping(ClassMetaData meta) {\r\n+        if ((meta.getResolve() & MODE_MAPPING) != 0)\r\n+            return;\r\n+        // load mapping information\r\n+        if ((meta.getSourceMode() & MODE_MAPPING) == 0\r\n+            && (_sourceMode & MODE_MAPPING) != 0) {\r\n+            // embedded-only metadata doesn't have mapping, so always loaded\r\n+            if (meta.isEmbeddedOnly())\r\n+                meta.setSourceMode(MODE_MAPPING, true);\r\n+            else {\r\n+                // load mapping data\r\n+                int mode = _sourceMode & ~MODE_META;\r\n+                if (_log.isTraceEnabled())\r\n+                    _log.trace(_loc.get(\"load-mapping\", meta,\r\n+                        toModeString(mode)));\r\n+                try {\r\n+                    _factory.load(meta.getDescribedType(), mode,\r\n+                        meta.getEnvClassLoader());\r\n+                } catch (RuntimeException re) {\r\n+                    removeMetaData(meta);\r\n+                    _errs.add(re);\r\n+                    return;\r\n+                }\r\n+            }\r\n+        }\r\n+        // prepare mappings for resolve; if not resolving mappings, then\r\n+        // make sure any superclass fields defined in metadata are resolved\r\n+        try {\r\n+            if ((_resMode & MODE_MAPPING) != 0) {\r\n+                if (_log.isTraceEnabled())\r\n+                    _log.trace(_loc.get(\"prep-mapping\", meta));\r\n+                prepareMapping(meta);\r\n+            } else meta.defineSuperclassFields(false);\r\n+        } catch (RuntimeException re) {\r\n+            removeMetaData(meta);\r\n+            _errs.add(re);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Resolve and initialize mapping.\r\n+     *\r\n+     * @return false if we're still in the process of resolving mappings\r\n+     */\r\n+    private boolean resolveMapping(ClassMetaData meta) {\r\n+        List mapped = processBuffer(meta, _mapping, MODE_MAPPING);\r\n+        if (mapped == null)\r\n+            return false;\r\n+        // initialize mapping for runtime use\r\n+        if ((_resMode & MODE_MAPPING_INIT) != 0) {\r\n+            for (int i = 0; i < mapped.size(); i++) {\r\n+                meta = (ClassMetaData) mapped.get(i);\r\n+                try {\r\n+                    meta.resolve(MODE_MAPPING_INIT);\r\n+                } catch (RuntimeException re) {\r\n+                    removeMetaData(meta);\r\n+                    _errs.add(re);\r\n+                }\r\n+            }\r\n+        }\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Process the given metadata and the associated buffer.\r\n+     */\r\n+    private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\r\n+        // if we're already processing a metadata, just buffer this one; when\r\n+        // the initial metadata finishes processing, we traverse the buffer\r\n+        // and process all the others that were introduced during reentrant\r\n+        // calls\r\n+        if (!buffer.add(meta) || buffer.size() != 1)\r\n+            return null;\r\n+        // continually pop a metadata and process it until we run out; note\r\n+        // that each processing call might place more metas in the buffer as\r\n+        // one class tries to access metadata for another; also note that the\r\n+        // buffer orders itself from least to most derived\r\n+        ClassMetaData buffered;\r\n+        List processed = new ArrayList(5);\r\n+        while (!buffer.isEmpty()) {\r\n+            buffered = (ClassMetaData) buffer.first();\r\n+            try {\r\n+                buffered.resolve(mode);\r\n+                processed.add(buffered);\r\n+                buffer.remove(buffered);\r\n+            } catch (RuntimeException re) {\r\n+                _errs.add(re);\r\n+                // any exception during resolution of one type means we can't\r\n+                // resolve any of the related types, so clear buffer.  this also\r\n+                // ensures that if two types relate to each other and one\r\n+                // dies, we don't get into infinite cycles\r\n+                for (Iterator itr = buffer.iterator(); itr.hasNext();) {\r\n+                    meta = (ClassMetaData) itr.next();\r\n+                    removeMetaData(meta);\r\n+                    if (meta != buffered) {\r\n+                        _errs.add(new MetaDataException(_loc.get\r\n+                            (\"prev-errs\", meta, buffered)));\r\n+                    }\r\n+                }\r\n+                buffer.clear();\r\n+            }\r\n+        }\r\n+        return processed;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return all the metadata instances currently in the repository.\r\n+     */\r\n+    public synchronized ClassMetaData[] getMetaDatas() {\r\n+        // prevent concurrent mod errors when resolving one metadata\r\n+        // introduces others\r\n+        ClassMetaData[] metas = (ClassMetaData[]) _metas.values().\r\n+            toArray(new ClassMetaData[_metas.size()]);\r\n+        for (int i = 0; i < metas.length; i++)\r\n+            if (metas[i] != null)\r\n+                getMetaData(metas[i].getDescribedType(),\r\n+                    metas[i].getEnvClassLoader(), true);\r\n+        List resolved = new ArrayList(_metas.size());\r\n+        ClassMetaData meta;\r\n+        for (Iterator itr = _metas.values().iterator(); itr.hasNext();) {\r\n+            meta = (ClassMetaData) itr.next();\r\n+            if (meta != null)\r\n+                resolved.add(meta);\r\n+        }\r\n+        metas = (ClassMetaData[]) resolved.toArray\r\n+            (newClassMetaDataArray(resolved.size()));\r\n+        Arrays.sort(metas);\r\n+        return metas;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the cached metadata for the given class, without any resolution.\r\n+     * Return null if none.\r\n+     */\r\n+    public ClassMetaData getCachedMetaData(Class cls) {\r\n+        return (ClassMetaData) _metas.get(cls);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new metadata, populate it with default information, add it to\r\n+     * the repository, and return it. Use the default access type.\r\n+     */\r\n+    public ClassMetaData addMetaData(Class cls) {\r\n+        return addMetaData(cls, ClassMetaData.ACCESS_UNKNOWN);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new metadata, populate it with default information, add it to\r\n+     * the repository, and return it.\r\n+     *\r\n+     * @param access the access type to use in populating metadata\r\n+     */\r\n+    public ClassMetaData addMetaData(Class cls, int access) {\r\n+        if (cls == null || cls.isPrimitive())\r\n+            return null;\r\n+        ClassMetaData meta = newClassMetaData(cls);\r\n+        _factory.getDefaults().populate(meta, access);\r\n+        // synchronize on this rather than the map, because all other methods\r\n+        // that access _metas are synchronized on this\r\n+        synchronized (this) {\r\n+            _metas.put(cls, meta);\r\n+            _count++;\r\n+        }\r\n+        return meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new class metadata instance.\r\n+     */\r\n+    protected ClassMetaData newClassMetaData(Class type) {\r\n+        return new ClassMetaData(type, this);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new array of the proper class metadata subclass.\r\n+     */\r\n+    protected ClassMetaData[] newClassMetaDataArray(int length) {\r\n+        return new ClassMetaData[length];\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new field metadata instance.\r\n+     */\r\n+    protected FieldMetaData newFieldMetaData(String name, Class type,\r\n+        ClassMetaData owner) {\r\n+        return new FieldMetaData(name, type, owner);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new array of the proper field metadata subclass.\r\n+     */\r\n+    protected FieldMetaData[] newFieldMetaDataArray(int length) {\r\n+        return new FieldMetaData[length];\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new embedded class metadata instance.\r\n+     */\r\n+    protected ClassMetaData newEmbeddedClassMetaData(ValueMetaData owner) {\r\n+        return new ClassMetaData(owner);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new value metadata instance.\r\n+     */\r\n+    protected ValueMetaData newValueMetaData(FieldMetaData owner) {\r\n+        return new ValueMetaDataImpl(owner);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an {@link Order} for the given field and declaration. This\r\n+     * method delegates to {@link #newRelatedFieldOrder} and\r\n+     * {@link #newValueFieldOrder} by default.\r\n+     */\r\n+    protected Order newOrder(FieldMetaData owner, String name, boolean asc) {\r\n+        // paths can start with(or equal) '#element'\r\n+        if (name.startsWith(Order.ELEMENT))\r\n+            name = name.substring(Order.ELEMENT.length());\r\n+        if (name.length() == 0)\r\n+            return newValueOrder(owner, asc);\r\n+        // next token should be '.'\r\n+        if (name.charAt(0) == '.')\r\n+            name = name.substring(1);\r\n+        // related field\r\n+        ClassMetaData meta = owner.getElement().getTypeMetaData();\r\n+        if (meta == null)\r\n+            throw new MetaDataException(_loc.get(\"nonpc-field-orderable\",\r\n+                owner, name));\r\n+        FieldMetaData rel = meta.getField(name);\r\n+        if (rel == null)\r\n+            throw new MetaDataException(_loc.get(\"bad-field-orderable\",\r\n+                owner, name));\r\n+        return newRelatedFieldOrder(owner, rel, asc);\r\n+    }\r\n+\r\n+    /**\r\n+     * Order by the field value.\r\n+     */\r\n+    protected Order newValueOrder(FieldMetaData owner, boolean asc) {\r\n+        return new InMemoryValueOrder(asc);\r\n+    }\r\n+\r\n+    /**\r\n+     * Order by a field of the related type.\r\n+     */\r\n+    protected Order newRelatedFieldOrder(FieldMetaData owner,\r\n+        FieldMetaData rel, boolean asc) {\r\n+        return new InMemoryRelatedFieldOrder(rel, asc);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an array of orders of the given size.\r\n+     */\r\n+    protected Order[] newOrderArray(int size) {\r\n+        return new Order[size];\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove a metadata instance from the repository.\r\n+     *\r\n+     * @return true if removed, false if not in this repository\r\n+     */\r\n+    public boolean removeMetaData(ClassMetaData meta) {\r\n+        if (meta == null)\r\n+            return false;\r\n+        return removeMetaData(meta.getDescribedType());\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove a metadata instance from the repository.\r\n+     *\r\n+     * @return true if removed, false if not in this repository\r\n+     */\r\n+    public synchronized boolean removeMetaData(Class cls) {\r\n+        if (cls == null)\r\n+            return false;\r\n+        if (_metas.remove(cls) != null) {\r\n+            _count--;\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the least-derived class metadata for the given application\r\n+     * identity object.\r\n+     *\r\n+     * @param oid       the oid to get the metadata for\r\n+     * @param envLoader the environmental class loader, if any\r\n+     * @param mustExist if true, throws a {@link MetaDataException}\r\n+     *                  if no metadata is found\r\n+     */\r\n+    public ClassMetaData getMetaData(Object oid, ClassLoader envLoader,\r\n+        boolean mustExist) {\r\n+        if (oid == null && mustExist)\r\n+            throw new MetaDataException(_loc.get(\"no-oid-meta\", oid, \"?\",\r\n+                _oids));\r\n+        if (oid == null)\r\n+            return null;\r\n+        if (oid instanceof OpenJPAId) {\r\n+            Class cls = ((OpenJPAId) oid).getType();\r\n+            return getMetaData(cls, envLoader, mustExist);\r\n+        }\r\n+        // check cache\r\n+        processRegisteredClasses();\r\n+        Class cls = (Class) _oids.get(oid.getClass());\r\n+        if (cls != null)\r\n+            return getMetaData(cls, envLoader, mustExist);\r\n+        // maybe this is some type we've seen but just isn't valid\r\n+        if (_oids.containsKey(oid.getClass())) {\r\n+            if (mustExist)\r\n+                throw new MetaDataException(_loc.get(\"no-oid-meta\", oid,\r\n+                    oid.getClass(), _oids));\r\n+            return null;\r\n+        }\r\n+        // if still not match, register any classes that look similar to the\r\n+        // oid class and check again\r\n+        resolveIdentityClass(oid);\r\n+        if (processRegisteredClasses().length > 0) {\r\n+            cls = (Class) _oids.get(oid.getClass());\r\n+            if (cls != null)\r\n+                return getMetaData(cls, envLoader, mustExist);\r\n+        }\r\n+        // record that this is an invalid type\r\n+        _oids.put(oid.getClass(), null);\r\n+        if (!mustExist)\r\n+            return null;\r\n+        throw new MetaDataException(_loc.get(\"no-oid-meta\", oid,\r\n+            oid.getClass(), _oids), oid);\r\n+    }\r\n+\r\n+    /**\r\n+     * Make some guesses about the name of a target class for an\r\n+     * unknown application identity class.\r\n+     */\r\n+    private void resolveIdentityClass(Object oid) {\r\n+        if (oid == null)\r\n+            return;\r\n+        Class oidClass = oid.getClass();\r\n+        if (_log.isTraceEnabled())\r\n+            _log.trace(_loc.get(\"resolve-identity\", oidClass));\r\n+        ClassLoader cl = oidClass.getClassLoader();\r\n+        String className;\r\n+        while (oidClass != null && oidClass != Object.class) {\r\n+            className = oidClass.getName();\r\n+            // we take a brute-force approach: try to load all the class'\r\n+            // substrings. this will handle the following common naming cases:\r\n+            //\r\n+            //   com.company.MyClass$ID -> com.company.MyClass\r\n+            //   com.company.MyClassId -> com.company.MyClass\r\n+            //   com.company.MyClassOid -> com.company.MyClass\r\n+            //   com.company.MyClassPK -> com.company.MyClass\r\n+            //\r\n+            // this isn't the fastest thing possible, but this method will\r\n+            // only be called once per JVM per unknown app id class\r\n+            for (int i = className.length(); i > 1; i--) {\r\n+                if (className.charAt(i - 1) == '.')\r\n+                    break;\r\n+                try {\r\n+                    Class.forName(className.substring(0, i), true, cl);\r\n+                } catch (Exception e) {\r\n+                } // consume all exceptions\r\n+            }\r\n+            // move up the OID hierarchy\r\n+            oidClass = oidClass.getSuperclass();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return all least-derived metadatas with some mapped assignable type that\r\n+     * implement the given class.\r\n+     *\r\n+     * @param cls       the class or interface to retrieve implementors for\r\n+     * @param envLoader the environmental class loader, if any\r\n+     * @param mustExist if true, throws a {@link MetaDataException}\r\n+     *                  if no metadata is found\r\n+     */\r\n+    public ClassMetaData[] getImplementorMetaDatas(Class cls,\r\n+        ClassLoader envLoader, boolean mustExist) {\r\n+        if (cls == null && mustExist)\r\n+            throw new MetaDataException(_loc.get(\"no-meta\", cls));\r\n+        if (cls == null)\r\n+            return EMPTY_METAS;\r\n+        // get impls of given interface / abstract class\r\n+        processRegisteredClasses();\r\n+        Collection vals = (Collection) _impls.get(cls);\r\n+        ClassMetaData meta;\r\n+        Collection mapped = null;\r\n+        if (vals != null) {\r\n+            synchronized (vals) {\r\n+                for (Iterator itr = vals.iterator(); itr.hasNext();) {\r\n+                    meta = getMetaData((Class) itr.next(), envLoader, true);\r\n+                    if (meta.isMapped()\r\n+                        || meta.getMappedPCSubclassMetaDatas().length > 0) {\r\n+                        if (mapped == null)\r\n+                            mapped = new ArrayList(vals.size());\r\n+                        mapped.add(meta);\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        if (mapped == null && mustExist)\r\n+            throw new MetaDataException(_loc.get(\"no-meta\", cls));\r\n+        if (mapped == null)\r\n+            return EMPTY_METAS;\r\n+        return (ClassMetaData[]) mapped.toArray(newClassMetaDataArray\r\n+            (mapped.size()));\r\n+    }\r\n+\r\n+    /**\r\n+     * Clear the cache of parsed metadata. This method also clears the\r\n+     * internal {@link MetaDataFactory MetaDataFactory}'s cache.\r\n+     */\r\n+    public synchronized void clear() {\r\n+        if (_log.isTraceEnabled())\r\n+            _log.trace(_loc.get(\"clear-repos\", this));\r\n+        _metas.clear();\r\n+        _oids.clear();\r\n+        _subs.clear();\r\n+        _impls.clear();\r\n+        _queries.clear();\r\n+        _seqs.clear();\r\n+        _registered.clear();\r\n+        _factory.clear();\r\n+        _aliases.clear();\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the set of configured persistent classes, or null if the user\r\n+     * did not configure any.\r\n+     *\r\n+     * @param devpath   if true, search for metadata files in directories\r\n+     *                  in the classpath if no classes are configured explicitly\r\n+     * @param envLoader the class loader to use, or null for default\r\n+     */\r\n+    public synchronized Set getPersistentTypeNames(boolean devpath,\r\n+        ClassLoader envLoader) {\r\n+        return _factory.getPersistentTypeNames(devpath, envLoader);\r\n+    }\r\n+\r\n+    /**\r\n+     * Load the persistent classes named in configuration.\r\n+     * This ensures that all subclasses and application identity classes of\r\n+     * each type are known in advance, without having to rely on the\r\n+     * application loading the classes before performing operations that\r\n+     * might involve them.\r\n+     *\r\n+     * @param devpath   if true, search for metadata files in directories\r\n+     *                  in the classpath if the no classes are configured explicitly\r\n+     * @param envLoader the class loader to use, or null for default\r\n+     * @return the loaded classes, or empty collection if none\r\n+     */\r\n+    public synchronized Collection loadPersistentTypes(boolean devpath,\r\n+        ClassLoader envLoader) {\r\n+        Set names = _factory.getPersistentTypeNames(devpath, envLoader);\r\n+        if (names == null || names.isEmpty())\r\n+            return Collections.EMPTY_LIST;\r\n+        // attempt to load classes so that they get processed\r\n+        ClassLoader clsLoader = _conf.getClassResolverInstance().\r\n+            getClassLoader(getClass(), envLoader);\r\n+        List classes = new ArrayList(names.size());\r\n+        Class cls;\r\n+        for (Iterator itr = names.iterator(); itr.hasNext();) {\r\n+            cls = classForName((String) itr.next(), clsLoader);\r\n+            if (cls != null)\r\n+                classes.add(cls);\r\n+        }\r\n+        return classes;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the class for the given name, or null if not loadable.\r\n+     */\r\n+    private Class classForName(String name, ClassLoader loader) {\r\n+        try {\r\n+            return Class.forName(name, true, loader);\r\n+        } catch (Exception e) {\r\n+            if ((_validate & VALIDATE_RUNTIME) != 0) {\r\n+                if (_log.isWarnEnabled())\r\n+                    _log.warn(_loc.get(\"bad-discover-class\", name));\r\n+            } else if (_log.isInfoEnabled())\r\n+                _log.info(_loc.get(\"bad-discover-class\", name));\r\n+            if (_log.isTraceEnabled())\r\n+                _log.trace(e);\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return all known subclasses for the given class mapping. Note\r\n+     * that this method only works during runtime when the repository is\r\n+     * registered as a {@link RegisterClassListener}.\r\n+     */\r\n+    Collection getPCSubclasses(Class cls) {\r\n+        Collection subs = (Collection) _subs.get(cls);\r\n+        if (subs == null)\r\n+            return Collections.EMPTY_LIST;\r\n+        return subs;\r\n+    }\r\n+\r\n+    ////////////////////////////////////////\r\n+    // RegisterClassListener implementation\r\n+    ////////////////////////////////////////\r\n+    public void register(Class cls) {\r\n+        // buffer registered classes until an oid metadata request is made,\r\n+        // at which point we'll parse everything in the buffer\r\n+        synchronized (_registered) {\r\n+            _registered.add(cls);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses the metadata for all registered classes.\r\n+     */\r\n+    private void loadRegisteredClassMetaData(ClassLoader envLoader) {\r\n+        Class[] reg = processRegisteredClasses();\r\n+        for (int i = 0; i < reg.length; i++) {\r\n+            try {\r\n+                getMetaData(reg[i], envLoader, false);\r\n+            } catch (MetaDataException me) {\r\n+                if (_log.isWarnEnabled())\r\n+                    _log.warn(me);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Updates our datastructures with the latest registered classes.\r\n+     */\r\n+    Class[] processRegisteredClasses() {\r\n+        if (_registered.isEmpty())\r\n+            return EMPTY_CLASSES;\r\n+        // copy into new collection to avoid concurrent mod errors on reentrant\r\n+        // registrations\r\n+        Class[] reg;\r\n+        synchronized (_registered) {\r\n+            reg = (Class[]) _registered.toArray(new Class[_registered.size()]);\r\n+            _registered.clear();\r\n+        }\r\n+        Collection failed = null;\r\n+        for (int i = 0; i < reg.length; i++) {\r\n+            try {\r\n+                processRegisteredClass(reg[i]);\r\n+            } catch (Throwable t) {\r\n+                if (!_conf.getRetryClassRegistration())\r\n+                    throw new MetaDataException(_loc.get(\"error-registered\",\r\n+                        reg[i]), t);\r\n+                if (_log.isWarnEnabled())\r\n+                    _log.warn(_loc.get(\"failed-registered\", reg[i]), t);\r\n+                if (failed == null)\r\n+                    failed = new ArrayList();\r\n+                failed.add(reg[i]);\r\n+            }\r\n+        }\r\n+        if (failed != null) {\r\n+            synchronized (_registered) {\r\n+                _registered.addAll(failed);\r\n+            }\r\n+        }\r\n+        return reg;\r\n+    }\r\n+\r\n+    /**\r\n+     * Updates our datastructures with the given registered class.\r\n+     * Relies on the fact that a child class cannot register itself without\r\n+     * also registering its parent class by specifying its persistence\r\n+     * capable superclass in the registration event.\r\n+     */\r\n+    private void processRegisteredClass(Class cls) {\r\n+        if (_log.isTraceEnabled())\r\n+            _log.trace(_loc.get(\"process-registered\", cls));\r\n+        // update subclass lists; synchronize on this because accessing _metas\r\n+        // requires it\r\n+        Class leastDerived = cls;\r\n+        synchronized (this) {\r\n+            ClassMetaData meta;\r\n+            for (Class anc = cls;\r\n+                (anc = PCRegistry.getPersistentSuperclass(anc)) != null;) {\r\n+                addToCollection(_subs, anc, cls, true);\r\n+                meta = (ClassMetaData) _metas.get(anc);\r\n+                if (meta != null)\r\n+                    meta.clearSubclassCache();\r\n+                leastDerived = anc;\r\n+            }\r\n+        }\r\n+        // update oid mappings if this is a base concrete class\r\n+        Object oid = null;\r\n+        try {\r\n+            oid = PCRegistry.newObjectId(cls);\r\n+        } catch (InternalException ie) {\r\n+            // thrown for single field identity with null pk field value\r\n+        }\r\n+        if (oid != null) {\r\n+            Class existing = (Class) _oids.get(oid.getClass());\r\n+            if (existing != null) {\r\n+                // if there is already a class for this OID, then we know\r\n+                // that multiple classes are using the same OID: therefore,\r\n+                // put the least derived PC superclass into the map. This\r\n+                // gets around the problem of an abstract PC superclass\r\n+                // using application identity(since newObjectId\r\n+                // will return null for abstract classes).\r\n+                Class sup = cls;\r\n+                while (PCRegistry.getPersistentSuperclass(sup) != null)\r\n+                    sup = PCRegistry.getPersistentSuperclass(sup);\r\n+                _oids.put(oid.getClass(), sup);\r\n+            } else if (existing == null || cls.isAssignableFrom(existing))\r\n+                _oids.put(oid.getClass(), cls);\r\n+        }\r\n+        // update mappings from interfaces and non-pc superclasses to\r\n+        // pc implementing types\r\n+        synchronized (_impls) {\r\n+            updateImpls(cls, leastDerived, cls);\r\n+        }\r\n+        // set alias for class\r\n+        String alias = PCRegistry.getTypeAlias(cls);\r\n+        synchronized (_aliases) {\r\n+            List classList = (List) _aliases.get(alias);\r\n+            if (classList == null) {\r\n+                classList = new ArrayList(3);\r\n+                _aliases.put(alias, classList);\r\n+            }\r\n+            if (!classList.contains(cls))\r\n+                classList.add(cls);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Update the list of implementations of base classes and interfaces.\r\n+     */\r\n+    private void updateImpls(Class cls, Class leastDerived, Class check) {\r\n+        // allow users to query on common non-pc superclasses\r\n+        Class sup = check.getSuperclass();\r\n+        if (leastDerived == cls && sup != null && sup != Object.class) {\r\n+            addToCollection(_impls, sup, cls, false);\r\n+            updateImpls(cls, leastDerived, sup);\r\n+        }\r\n+        Class[] ints = check.getInterfaces();\r\n+        for (int i = 0; i < ints.length; i++) {\r\n+            // don't map java-standard interfaces\r\n+            if (ints[i].getName().startsWith(\"java.\"))\r\n+                continue;\r\n+            // only map least-derived interface implementors\r\n+            if (leastDerived == cls || isLeastDerivedImpl(ints[i], cls)) {\r\n+                addToCollection(_impls, ints[i], cls, false);\r\n+                updateImpls(cls, leastDerived, ints[i]);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return true if the given class is the least-derived persistent\r\n+     * implementor of the given interface, false otherwise.\r\n+     */\r\n+    private boolean isLeastDerivedImpl(Class inter, Class cls) {\r\n+        Class parent = PCRegistry.getPersistentSuperclass(cls);\r\n+        while (parent != null) {\r\n+            if (Arrays.asList(parent.getInterfaces()).contains(inter))\r\n+                return false;\r\n+            parent = PCRegistry.getPersistentSuperclass(parent);\r\n+        }\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add the given value to the collection cached in the given map under\r\n+     * the given key.\r\n+     */\r\n+    private void addToCollection(Map map, Class key, Class value,\r\n+        boolean inheritance) {\r\n+        synchronized (map) {\r\n+            Collection coll = (Collection) map.get(key);\r\n+            if (coll == null) {\r\n+                if (inheritance) {\r\n+                    InheritanceComparator comp = new InheritanceComparator();\r\n+                    comp.setBase(key);\r\n+                    coll = new TreeSet(comp);\r\n+                } else coll = new LinkedList();\r\n+                map.put(key, coll);\r\n+            }\r\n+            coll.add(value);\r\n+        }\r\n+    }\r\n+    //////////////////\r\n+    // Query metadata\r\n+    //////////////////\r\n+\r\n+    /**\r\n+     * Return query metadata for the given class, name, and classloader.\r\n+     */\r\n+    public synchronized QueryMetaData getQueryMetaData(Class cls, String name,\r\n+        ClassLoader envLoader, boolean mustExist) {\r\n+        QueryMetaData meta = getQueryMetaDataInternal(cls, name, envLoader);\r\n+        if (meta == null && mustExist)\r\n+            throw new MetaDataException(_loc.get(\"no-named-query\", cls, name));\r\n+        return meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return query metadata for the given class, name, and classloader.\r\n+     */\r\n+    private QueryMetaData getQueryMetaDataInternal(Class cls, String name,\r\n+        ClassLoader envLoader) {\r\n+        if (name == null)\r\n+            return null;\r\n+        // check cache\r\n+        Object key = getQueryKey(cls, name);\r\n+        QueryMetaData qm = (QueryMetaData) _queries.get(key);\r\n+        if (qm != null)\r\n+            return qm;\r\n+        // get metadata for class, which will find queries in metadata file\r\n+        if (cls != null && getMetaData(cls, envLoader, false) != null) {\r\n+            qm = (QueryMetaData) _queries.get(key);\r\n+            if (qm != null)\r\n+                return qm;\r\n+        }\r\n+        if ((_sourceMode & MODE_QUERY) == 0)\r\n+            return null;\r\n+        // see if factory can figure out a scope for this query\r\n+        if (cls == null)\r\n+            cls = _factory.getQueryScope(name, envLoader);\r\n+        // not in cache; load\r\n+        _factory.load(cls, MODE_QUERY, envLoader);\r\n+        return (QueryMetaData) _queries.get(key);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the cached query metadata.\r\n+     */\r\n+    public synchronized QueryMetaData[] getQueryMetaDatas() {\r\n+        return (QueryMetaData[]) _queries.values().toArray\r\n+            (new QueryMetaData[_queries.size()]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the cached query metadata for the given name.\r\n+     */\r\n+    public synchronized QueryMetaData getCachedQueryMetaData(Class cls,\r\n+        String name) {\r\n+        return (QueryMetaData) _queries.get(getQueryKey(cls, name));\r\n+    }\r\n+\r\n+    /**\r\n+     * Add a new query metadata to the repository and return it.\r\n+     */\r\n+    public synchronized QueryMetaData addQueryMetaData(Class cls, String name) {\r\n+        QueryMetaData meta = newQueryMetaData(cls, name);\r\n+        _queries.put(getQueryKey(meta), meta);\r\n+        return meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new query metadata instance.\r\n+     */\r\n+    protected QueryMetaData newQueryMetaData(Class cls, String name) {\r\n+        QueryMetaData meta = new QueryMetaData(name);\r\n+        meta.setDefiningType(cls);\r\n+        return meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove the given query metadata from the repository.\r\n+     */\r\n+    public synchronized boolean removeQueryMetaData(QueryMetaData meta) {\r\n+        if (meta == null)\r\n+            return false;\r\n+        return _queries.remove(getQueryKey(meta)) != null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove query metadata for the given class name if in the repository.\r\n+     */\r\n+    public synchronized boolean removeQueryMetaData(Class cls, String name) {\r\n+        if (name == null)\r\n+            return false;\r\n+        return _queries.remove(getQueryKey(cls, name)) != null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a unique key for a given QueryMetaData.\r\n+     */\r\n+    private static Object getQueryKey(QueryMetaData meta) {\r\n+        if (meta == null)\r\n+            return null;\r\n+        return getQueryKey(meta.getDefiningType(), meta.getName());\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a unique key for a given class / name. The class\r\n+     * argument can be null.\r\n+     */\r\n+    protected static Object getQueryKey(Class cls, String name) {\r\n+        if (cls == null)\r\n+            return name;\r\n+        QueryKey key = new QueryKey();\r\n+        key.clsName = cls.getName();\r\n+        key.name = name;\r\n+        return key;\r\n+    }\r\n+    /////////////////////\r\n+    // Sequence metadata\r\n+    /////////////////////\r\n+\r\n+    /**\r\n+     * Return sequence metadata for the given name and classloader.\r\n+     */\r\n+    public synchronized SequenceMetaData getSequenceMetaData(String name,\r\n+        ClassLoader envLoader, boolean mustExist) {\r\n+        SequenceMetaData meta = getSequenceMetaDataInternal(name, envLoader);\r\n+        if (meta == null && SequenceMetaData.NAME_SYSTEM.equals(name)) {\r\n+            if (_sysSeq == null)\r\n+                _sysSeq = newSequenceMetaData(name);\r\n+            return _sysSeq;\r\n+        }\r\n+        if (meta == null && mustExist)\r\n+            throw new MetaDataException(_loc.get(\"no-named-sequence\", name));\r\n+        return meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Used internally by metadata to retrieve sequence metadatas based on\r\n+     * possibly-unqualified sequence name.\r\n+     */\r\n+    SequenceMetaData getSequenceMetaData(ClassMetaData context, String name,\r\n+        boolean mustExist) {\r\n+        // try with given name\r\n+        MetaDataException e = null;\r\n+        try {\r\n+            SequenceMetaData seq = getSequenceMetaData(name,\r\n+                context.getEnvClassLoader(), mustExist);\r\n+            if (seq != null)\r\n+                return seq;\r\n+        } catch (MetaDataException mde) {\r\n+            e = mde;\r\n+        }\r\n+        // if given name already fully qualified, give up\r\n+        if (name.indexOf('.') != -1) {\r\n+            if (e != null)\r\n+                throw e;\r\n+            return null;\r\n+        }\r\n+        // try with qualified name\r\n+        name = Strings.getPackageName(context.getDescribedType())\r\n+            + \".\" + name;\r\n+        try {\r\n+            return getSequenceMetaData(name, context.getEnvClassLoader(),\r\n+                mustExist);\r\n+        } catch (MetaDataException mde) {\r\n+            // throw original exception\r\n+            if (e != null)\r\n+                throw e;\r\n+            throw mde;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return sequence metadata for the given name and classloader.\r\n+     */\r\n+    private SequenceMetaData getSequenceMetaDataInternal(String name,\r\n+        ClassLoader envLoader) {\r\n+        if (name == null)\r\n+            return null;\r\n+        // check cache\r\n+        SequenceMetaData meta = (SequenceMetaData) _seqs.get(name);\r\n+        if (meta == null) {\r\n+            // load metadata for registered classes to hopefully find sequence\r\n+            // definition\r\n+            loadRegisteredClassMetaData(envLoader);\r\n+            meta = (SequenceMetaData) _seqs.get(name);\r\n+        }\r\n+        return meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the cached sequence metadata.\r\n+     */\r\n+    public synchronized SequenceMetaData[] getSequenceMetaDatas() {\r\n+        return (SequenceMetaData[]) _seqs.values().toArray\r\n+            (new SequenceMetaData[_seqs.size()]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the cached a sequence metadata for the given name.\r\n+     */\r\n+    public synchronized SequenceMetaData getCachedSequenceMetaData(\r\n+        String name) {\r\n+        return (SequenceMetaData) _seqs.get(name);\r\n+    }\r\n+\r\n+    /**\r\n+     * Add a new sequence metadata to the repository and return it.\r\n+     */\r\n+    public synchronized SequenceMetaData addSequenceMetaData(String name) {\r\n+        SequenceMetaData meta = newSequenceMetaData(name);\r\n+        _seqs.put(name, meta);\r\n+        return meta;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new sequence metadata instance.\r\n+     */\r\n+    protected SequenceMetaData newSequenceMetaData(String name) {\r\n+        return new SequenceMetaData(name, this);\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove the given sequence metadata from the repository.\r\n+     */\r\n+    public synchronized boolean removeSequenceMetaData(SequenceMetaData meta) {\r\n+        if (meta == null)\r\n+            return false;\r\n+        return _seqs.remove(meta.getName()) != null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove sequence metadata for the name if in the repository.\r\n+     */\r\n+    public synchronized boolean removeSequenceMetaData(String name) {\r\n+        if (name == null)\r\n+            return false;\r\n+        return _seqs.remove(name) != null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add the given system lifecycle listener.\r\n+     */\r\n+    public synchronized void addSystemListener(Object listener) {\r\n+        // copy to avoid issues with ListenerList and avoid unncessary\r\n+        // locking on the list during runtime\r\n+        LifecycleEventManager.ListenerList listeners = new\r\n+            LifecycleEventManager.ListenerList(_listeners);\r\n+        listeners.add(listener);\r\n+        _listeners = listeners;\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove the given system lifecycle listener.\r\n+     */\r\n+    public synchronized boolean removeSystemListener(Object listener) {\r\n+        if (!_listeners.contains(listener))\r\n+            return false;\r\n+        // copy to avoid issues with ListenerList and avoid unncessary\r\n+        // locking on the list during runtime\r\n+        LifecycleEventManager.ListenerList listeners = new\r\n+            LifecycleEventManager.ListenerList(_listeners);\r\n+        listeners.remove(listener);\r\n+        _listeners = listeners;\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the system lifecycle listeners\r\n+     */\r\n+    public LifecycleEventManager.ListenerList getSystemListeners() {\r\n+        return _listeners;\r\n+    }\r\n+\r\n+    /**\r\n+     * Free the resources used by this repository. Closes all user sequences.\r\n+     */\r\n+    public synchronized void close() {\r\n+        SequenceMetaData[] smds = getSequenceMetaDatas();\r\n+        for (int i = 0; i < smds.length; i++)\r\n+            smds[i].close();\r\n+        clear();\r\n+    }\r\n+\r\n+    /**\r\n+     * Query key struct.\r\n+     */\r\n+    private static class QueryKey {\r\n+\r\n+        public String clsName;\r\n+        public String name;\r\n+\r\n+        public int hashCode() {\r\n+            int clsHash = (clsName == null) ? 0 : clsName.hashCode();\r\n+            int nameHash = (name == null) ? 0 : name.hashCode();\r\n+            return clsHash + nameHash;\r\n+        }\r\n+\r\n+        public boolean equals(Object obj) {\r\n+            if (obj == this)\r\n+                return true;\r\n+            if (!(obj instanceof QueryKey))\r\n+                return false;\r\n+            QueryKey qk = (QueryKey) obj;\r\n+            return StringUtils.equals(clsName, qk.clsName)\r\n+                && StringUtils.equals(name, qk.name);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"845fb4471013342ffabff1b1452612b034f82afb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","status":"added","additions":325,"deletions":0,"changes":325,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,325 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+import java.io.PrintWriter;\r\n+import java.io.Writer;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.meta.ClassArgParser;\r\n+import org.apache.openjpa.lib.util.Files;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.Options;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n+\r\n+/**\r\n+ * Tool for generating default metadata.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 3.0\r\n+ */\r\n+public class MetaDataTool implements MetaDataModes {\r\n+\r\n+    public static final String ACTION_ADD = \"add\";\r\n+    public static final String ACTION_DROP = \"drop\";\r\n+    public static final String[] ACTIONS = new String[]{\r\n+        ACTION_ADD, ACTION_DROP, };\r\n+    private static Localizer _loc = Localizer.forPackage(MetaDataTool.class);\r\n+    private final OpenJPAConfiguration _conf;\r\n+    private final String _action;\r\n+    private final Set _drop;\r\n+    private MetaDataRepository _repos = null;\r\n+    private File _file = null;\r\n+    private Writer _writer = null;\r\n+    private boolean _flush = false;\r\n+\r\n+    /**\r\n+     * Constructor. Supply configuration and action.\r\n+     */\r\n+    public MetaDataTool(OpenJPAConfiguration conf, String action) {\r\n+        _conf = conf;\r\n+        _action = (action == null) ? ACTION_ADD : action;\r\n+        if (ACTION_DROP.equals(_action))\r\n+            _drop = new HashSet();\r\n+        else _drop = null;\r\n+    }\r\n+\r\n+    /**\r\n+     * The action supplied on construction.\r\n+     */\r\n+    public String getAction() {\r\n+        return _action;\r\n+    }\r\n+\r\n+    /**\r\n+     * The file to generate metadata to.\r\n+     */\r\n+    public File getFile() {\r\n+        return _file;\r\n+    }\r\n+\r\n+    /**\r\n+     * The file to generate metadata to.\r\n+     */\r\n+    public void setFile(File file) {\r\n+        _file = file;\r\n+    }\r\n+\r\n+    /**\r\n+     * The writer to generate metadata to.\r\n+     */\r\n+    public Writer getWriter() {\r\n+        return _writer;\r\n+    }\r\n+\r\n+    /**\r\n+     * The writer to generate metadata to.\r\n+     */\r\n+    public void setWriter(Writer writer) {\r\n+        _writer = writer;\r\n+    }\r\n+\r\n+    /**\r\n+     * The repository to use to hold metadata.\r\n+     */\r\n+    public MetaDataRepository getRepository() {\r\n+        if (_repos == null) {\r\n+            _repos = newRepository();\r\n+            _repos.setResolve(MODE_MAPPING, false);\r\n+            MetaDataFactory factory = _repos.getMetaDataFactory();\r\n+            factory.getDefaults().setIgnoreNonPersistent(false);\r\n+            factory.setStoreMode(MetaDataFactory.STORE_VERBOSE);\r\n+        }\r\n+        return _repos;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new metadata repository.\r\n+     */\r\n+    protected MetaDataRepository newRepository() {\r\n+        return new MetaDataRepository(_conf);\r\n+    }\r\n+\r\n+    /**\r\n+     * The repository to use to hold metadata.\r\n+     */\r\n+    public void setRepository(MetaDataRepository repos) {\r\n+        _repos = repos;\r\n+    }\r\n+\r\n+    /**\r\n+     * Reset state. This is called automatically after every {@link #record}.\r\n+     */\r\n+    public void clear() {\r\n+        _repos = null;\r\n+        if (_drop != null)\r\n+            _drop.clear();\r\n+        _flush = false;\r\n+    }\r\n+\r\n+    /**\r\n+     * Generate new metadata for the given class.\r\n+     */\r\n+    public void run(Class cls) {\r\n+        if (cls == null)\r\n+            return;\r\n+        if (ACTION_DROP.equals(_action))\r\n+            _drop.add(cls);\r\n+        else if (ACTION_ADD.equals(_action))\r\n+            add(cls);\r\n+        else throw new IllegalArgumentException(\"action == \" + _action);\r\n+    }\r\n+\r\n+    private void add(Class cls) {\r\n+        // assume all user-defined types are PCs\r\n+        ClassMetaData meta = getRepository().addMetaData(cls);\r\n+        FieldMetaData[] fmds = meta.getDeclaredFields();\r\n+        for (int i = 0; i < fmds.length; i++) {\r\n+            if (fmds[i].getDeclaredTypeCode() == JavaTypes.OBJECT\r\n+                && fmds[i].getDeclaredType() != Object.class)\r\n+                fmds[i].setDeclaredTypeCode(JavaTypes.PC);\r\n+        }\r\n+        meta.setSource(_file, meta.getSourceType());\r\n+        _flush = true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Record metadata changes.\r\n+     */\r\n+    public void record() {\r\n+        MetaDataRepository repos = getRepository();\r\n+        MetaDataFactory mdf = repos.getMetaDataFactory();\r\n+        try {\r\n+            if (_drop != null && !_drop.isEmpty()\r\n+                && !mdf.drop((Class[]) _drop.toArray(new Class[_drop.size()]),\r\n+                MODE_META | MODE_MAPPING | MODE_QUERY, null)) {\r\n+                Log log = _conf.getLog(OpenJPAConfiguration.LOG_METADATA);\r\n+                if (log.isWarnEnabled())\r\n+                    log.warn(_loc.get(\"bad-drop\", _drop));\r\n+            }\r\n+            if (!_flush)\r\n+                return;\r\n+            ClassMetaData[] metas = repos.getMetaDatas();\r\n+            Map output = null;\r\n+            // if we're outputting to stream, set all metas to same file so\r\n+            // they get placed in single string\r\n+            if (_writer != null) {\r\n+                output = new HashMap();\r\n+                File tmp = new File(\"openjpatmp\");\r\n+                for (int i = 0; i < metas.length; i++)\r\n+                    metas[i].setSource(tmp, metas[i].getSourceType());\r\n+            }\r\n+            if (!mdf.store(metas, new QueryMetaData[0],\r\n+                new SequenceMetaData[0], MODE_META, output))\r\n+                throw new MetaDataException(_loc.get(\"bad-store\"));\r\n+            if (_writer != null) {\r\n+                PrintWriter out = new PrintWriter(_writer);\r\n+                for (Iterator itr = output.values().iterator();\r\n+                    itr.hasNext();)\r\n+                    out.println((String) itr.next());\r\n+                out.flush();\r\n+            }\r\n+        }\r\n+        finally {\r\n+            clear();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Usage: java org.apache.openjpa.meta.MetaDataTool [option]*\r\n+     * [-action/-a &lt;add | drop&gt;]\r\n+     * &lt;class name | .java file | .class file&gt;+\r\n+     * Where the following options are recognized.\r\n+     * <ul>\r\n+     * <li><i>-properties/-p &lt;properties file or resource&gt;</i>: The path\r\n+     * or resource name of a OpenJPA properties file containing information\r\n+     * such as the license key data as outlined in\r\n+     * {@link OpenJPAConfiguration}. Optional.</li>\r\n+     * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\r\n+     * properties of the OpenJPA {@link OpenJPAConfiguration} can be set by\r\n+     * using their names and supplying a value. For example:\r\n+     * <code>-licenseKey adslfja83r3lkadf</code></li>\r\n+     * <li><i>-file/-f &lt;stdout | output file or resource&gt;</i>: The path\r\n+     * or resource name of a file the metadata should be generated to.\r\n+     * If the given file already contains metadata, the generated\r\n+     * metadata will be merged into the existing document.</li>\r\n+     * </ul>\r\n+     * The available actions are:\r\n+     * <ul>\r\n+     * <li><i>add</i>: Generate default metadata for the given classes. This\r\n+     * is the default action.</li>\r\n+     * <li><i>drop</i>: Remove existing metadata for the given classes.</li>\r\n+     * </ul>\r\n+     */\r\n+    public static void main(String[] args) throws IOException {\r\n+        Options opts = new Options();\r\n+        args = opts.setFromCmdLine(args);\r\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\r\n+        try {\r\n+            if (!run(conf, args, opts))\r\n+                System.err.println(_loc.get(\"tool-usage\"));\r\n+        }\r\n+        finally {\r\n+            conf.close();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Run the tool. Returns false if any invalid options were given.\r\n+     */\r\n+    public static boolean run(OpenJPAConfiguration conf, String[] args,\r\n+        Options opts) throws IOException {\r\n+        if (args.length == 0 || opts.containsKey(\"help\")\r\n+            || opts.containsKey(\"-help\"))\r\n+            return false;\r\n+        Flags flags = new Flags();\r\n+        flags.action = opts.removeProperty(\"action\", \"a\", flags.action);\r\n+        String fileName = opts.removeProperty(\"file\", \"f\", null);\r\n+        if (\"stdout\".equals(fileName)) {\r\n+            flags.writer = new PrintWriter(System.out);\r\n+            fileName = null;\r\n+        } else if (\"stderr\".equals(fileName)) {\r\n+            flags.writer = new PrintWriter(System.err);\r\n+            fileName = null;\r\n+        }\r\n+        Configurations.populateConfiguration(conf, opts);\r\n+        ClassLoader loader = conf.getClassResolverInstance().\r\n+            getClassLoader(MetaDataTool.class, null);\r\n+        if (fileName != null)\r\n+            flags.file = Files.getFile(fileName, loader);\r\n+        return run(conf, args, flags, null, loader);\r\n+    }\r\n+\r\n+    /**\r\n+     * Run the tool. Return false if invalid options were given. The given\r\n+     * repository may be null.\r\n+     */\r\n+    public static boolean run(OpenJPAConfiguration conf, String[] args,\r\n+        Flags flags, MetaDataRepository repos, ClassLoader loader)\r\n+        throws IOException {\r\n+        if (args.length == 0)\r\n+            return false;\r\n+        if (flags.action == null)\r\n+            flags.action = ACTION_ADD;\r\n+        MetaDataTool tool = new MetaDataTool(conf, flags.action);\r\n+        if (repos != null) {\r\n+            MetaDataFactory factory = repos.getMetaDataFactory();\r\n+            factory.getDefaults().setIgnoreNonPersistent(false);\r\n+            factory.setStoreMode(MetaDataFactory.STORE_VERBOSE);\r\n+            tool.setRepository(repos);\r\n+        }\r\n+        if (flags.file != null)\r\n+            tool.setFile(flags.file);\r\n+        if (flags.writer != null)\r\n+            tool.setWriter(flags.writer);\r\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\r\n+        ClassArgParser cap = conf.getMetaDataRepository().\r\n+            getMetaDataFactory().newClassArgParser();\r\n+        cap.setClassLoader(loader);\r\n+        Class[] classes;\r\n+        for (int i = 0; i < args.length; i++) {\r\n+            classes = cap.parseTypes(args[i]);\r\n+            for (int j = 0; j < classes.length; j++) {\r\n+                log.info(_loc.get(\"tool-running\", classes[j], flags.action));\r\n+                try {\r\n+                    tool.run(classes[j]);\r\n+                } catch (IllegalArgumentException iae) {\r\n+                    return false;\r\n+                }\r\n+            }\r\n+        }\r\n+        log.info(_loc.get(\"tool-record\"));\r\n+        tool.record();\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Run flags.\r\n+     */\r\n+    public static class Flags {\r\n+\r\n+        public String action = ACTION_ADD;\r\n+        public File file = null;\r\n+        public Writer writer = null;\r\n+    }\r\n+}\r"},{"sha":"a898fd6e6900896cfac9d7c726e3ce36b32efd5c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,109 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.File;\r\n+import java.lang.reflect.Member;\r\n+import java.util.Collection;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.lib.meta.ClassArgParser;\r\n+\r\n+/**\r\n+ * No-op metadata I/O to prevent attempts to load other classes.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class NoneMetaDataFactory implements MetaDataFactory, MetaDataDefaults {\r\n+\r\n+    private static final NoneMetaDataFactory _instance =\r\n+        new NoneMetaDataFactory();\r\n+\r\n+    public static NoneMetaDataFactory getInstance() {\r\n+        return _instance;\r\n+    }\r\n+\r\n+    public void setRepository(MetaDataRepository repos) {\r\n+    }\r\n+\r\n+    public void setStoreDirectory(File dir) {\r\n+    }\r\n+\r\n+    public void setStoreMode(int store) {\r\n+    }\r\n+\r\n+    public void setStrict(boolean strict) {\r\n+    }\r\n+\r\n+    public void load(Class cls, int mode, ClassLoader envLoader) {\r\n+    }\r\n+\r\n+    public boolean store(ClassMetaData[] metas, QueryMetaData[] queries,\r\n+        SequenceMetaData[] seqs, int mode, Map output) {\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean drop(Class[] cls, int mode, ClassLoader envLoader) {\r\n+        return false;\r\n+    }\r\n+\r\n+    public MetaDataDefaults getDefaults() {\r\n+        return this;\r\n+    }\r\n+\r\n+    public Set getPersistentTypeNames(boolean classpath,\r\n+        ClassLoader envLoader) {\r\n+        return null;\r\n+    }\r\n+\r\n+    public Class getQueryScope(String queryName, ClassLoader loader) {\r\n+        return null;\r\n+    }\r\n+\r\n+    public ClassArgParser newClassArgParser() {\r\n+        return new ClassArgParser();\r\n+    }\r\n+\r\n+    public void clear() {\r\n+    }\r\n+\r\n+    public void addClassExtensionKeys(Collection exts) {\r\n+    }\r\n+\r\n+    public void addFieldExtensionKeys(Collection exts) {\r\n+    }\r\n+\r\n+    public int getDefaultAccessType() {\r\n+        return ClassMetaData.ACCESS_UNKNOWN;\r\n+    }\r\n+\r\n+    public int getCallbackMode() {\r\n+        return CALLBACK_IGNORE;\r\n+    }\r\n+\r\n+    public boolean getCallbacksBeforeListeners(int type) {\r\n+        return false;\r\n+    }\r\n+\r\n+    public void setIgnoreNonPersistent(boolean ignore) {\r\n+    }\r\n+\r\n+    public void populate(ClassMetaData meta, int access) {\r\n+    }\r\n+\r\n+    public Member getBackingMember(FieldMetaData fmd) {\r\n+        return null;\r\n+    }\r\n+}\r"},{"sha":"925d452e1e4e8e1bca8ab5af103b3472cb6e470b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/Order.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Order.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Order.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.util.Comparator;\r\n+\r\n+/**\r\n+ * Order a field.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface Order {\r\n+\r\n+    /**\r\n+     * Token denoting to order by the element value.\r\n+     */\r\n+    public static final String ELEMENT = \"#element\";\r\n+\r\n+    /**\r\n+     * Return the name of the orderable.\r\n+     */\r\n+    public String getName();\r\n+\r\n+    /**\r\n+     * Order direction.\r\n+     */\r\n+    public boolean isAscending();\r\n+\r\n+    /**\r\n+     * Return a comparator for ordering by this element, or null if\r\n+     * the ordering is done in the datastore.\r\n+     */\r\n+    public Comparator getComparator();\r\n+}\r"},{"sha":"b7d3357781ea8b931bb1ba409a439c488b7faa5a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","status":"added","additions":270,"deletions":0,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,270 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.ObjectOutput;\r\n+import java.util.Calendar;\r\n+import java.util.SortedMap;\r\n+import java.util.SortedSet;\r\n+\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.enhance.StateManager;\r\n+import org.apache.openjpa.util.InternalException;\r\n+\r\n+/**\r\n+ * Mostly-unimplemented state manager type whose sole purpose is to\r\n+ * check the initial value of all SCO container fields for their initialized\r\n+ * types and comparators.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+class ProxySetupStateManager implements StateManager {\r\n+\r\n+    private Object _object = null;\r\n+\r\n+    public void setProxyData(PersistenceCapable pc, ClassMetaData meta) {\r\n+        FieldMetaData[] fmds = meta.getFields();\r\n+        for (int i = 0; i < fmds.length; i++) {\r\n+            if (fmds[i].getDefiningMetaData() != meta)\r\n+                continue;\r\n+            switch (fmds[i].getDeclaredTypeCode()) {\r\n+                case JavaTypes.CALENDAR:\r\n+                    pc.pcProvideField(fmds[i].getIndex());\r\n+                    if (_object != null) {\r\n+                        // specified timezone\r\n+                        fmds[i]\r\n+                            .setInitializer(((Calendar) _object).getTimeZone());\r\n+                    }\r\n+                    break;\r\n+                case JavaTypes.COLLECTION:\r\n+                    pc.pcProvideField(fmds[i].getIndex());\r\n+                    if (_object != null) {\r\n+                        // more specific type?\r\n+                        if (_object.getClass() != fmds[i].getDeclaredType())\r\n+                            fmds[i].setProxyType(_object.getClass());\r\n+                        // custom comparator?\r\n+                        if (_object instanceof SortedSet)\r\n+                            fmds[i].setInitializer(((SortedSet) _object).\r\n+                                comparator());\r\n+                    }\r\n+                    break;\r\n+                case JavaTypes.MAP:\r\n+                    pc.pcProvideField(fmds[i].getIndex());\r\n+                    if (_object != null) {\r\n+                        // more specific type?\r\n+                        if (_object.getClass() != fmds[i].getDeclaredType())\r\n+                            fmds[i].setProxyType(_object.getClass());\r\n+                        // custom comparator?\r\n+                        if (_object instanceof SortedMap)\r\n+                            fmds[i].setInitializer(((SortedMap) _object).\r\n+                                comparator());\r\n+                    }\r\n+                    break;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public byte replaceFlags() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public StateManager replaceStateManager(StateManager sm) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean isDirty() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean isTransactional() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean isPersistent() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean isNew() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean isDeleted() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean isDetached() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public Object getGenericContext() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void dirty(String s) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public Object fetchObjectId() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public Object getVersion() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void accessingField(int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean serializing() {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public boolean writeDetached(ObjectOutput out) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void proxyDetachedDeserialized(int idx) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingBooleanField(PersistenceCapable pc, int i, boolean b,\r\n+        boolean b2, int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingCharField(PersistenceCapable pc, int i, char c, char c2,\r\n+        int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingByteField(PersistenceCapable pc, int i, byte b, byte b2,\r\n+        int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingShortField(PersistenceCapable pc, int i, short s,\r\n+        short s2, int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingIntField(PersistenceCapable pc, int i, int i2, int i3,\r\n+        int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingLongField(PersistenceCapable pc, int i, long l, long l2,\r\n+        int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingFloatField(PersistenceCapable pc, int i, float f,\r\n+        float f2, int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingDoubleField(PersistenceCapable pc, int i, double d,\r\n+        double d2, int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingStringField(PersistenceCapable pc, int i, String s,\r\n+        String s2, int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void settingObjectField(PersistenceCapable pc, int i, Object o,\r\n+        Object o2, int set) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedBooleanField(PersistenceCapable pc, int i, boolean b) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedCharField(PersistenceCapable pc, int i, char c) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedByteField(PersistenceCapable pc, int i, byte b) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedShortField(PersistenceCapable pc, int i, short s) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedIntField(PersistenceCapable pc, int i, int i2) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedLongField(PersistenceCapable pc, int i, long l) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedFloatField(PersistenceCapable pc, int i, float f) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedDoubleField(PersistenceCapable pc, int i, double d) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedStringField(PersistenceCapable pc, int i, String s) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public void providedObjectField(PersistenceCapable pc, int i, Object o) {\r\n+        _object = o;\r\n+    }\r\n+\r\n+    public boolean replaceBooleanField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public char replaceCharField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public byte replaceByteField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public short replaceShortField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public int replaceIntField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public long replaceLongField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public float replaceFloatField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public double replaceDoubleField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public String replaceStringField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+\r\n+    public Object replaceObjectField(PersistenceCapable pc, int i) {\r\n+        throw new InternalException();\r\n+    }\r\n+}\r"},{"sha":"9bd5562c036b26c0e853ada97893f2666c53a6c3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","status":"added","additions":256,"deletions":0,"changes":256,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,256 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.File;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.lib.meta.SourceTracker;\r\n+import org.apache.openjpa.lib.xml.Commentable;\r\n+\r\n+/**\r\n+ * Holds metadata about named queries.\r\n+ * Information stored in this instance gets transfered to\r\n+ * new {@link Query} instances.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class QueryMetaData\r\n+    implements MetaDataModes, SourceTracker, Commentable {\r\n+\r\n+    private static final String[] EMPTY_KEYS = new String[0];\r\n+    private static final Object[] EMPTY_VALS = new Object[0];\r\n+    private final String _name;\r\n+    private Boolean _readOnly;\r\n+    private File _file;\r\n+    private Object _scope;\r\n+    private int _srcType;\r\n+    private int _mode = MODE_QUERY;\r\n+    private String _language;\r\n+    private Class _class;\r\n+    private Class _candidate;\r\n+    private Class _res;\r\n+    private String _query;\r\n+    private String[] _comments;\r\n+    private List _hintKeys;\r\n+    private List _hintVals;\r\n+\r\n+    /**\r\n+     * Construct with the given name.\r\n+     */\r\n+    protected QueryMetaData(String name) {\r\n+        _name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the name for this query.\r\n+     */\r\n+    public String getName() {\r\n+        return _name;\r\n+    }\r\n+\r\n+    /**\r\n+     * The class that defines this query, or null if none.\r\n+     */\r\n+    public Class getDefiningType() {\r\n+        return _class;\r\n+    }\r\n+\r\n+    /**\r\n+     * The class that defines this query, or null if none.\r\n+     */\r\n+    public void setDefiningType(Class cls) {\r\n+        _class = cls;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether the query has been marked read-only.\r\n+     */\r\n+    public boolean isReadOnly() {\r\n+        return _readOnly != null && _readOnly.booleanValue();\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether the query has been marked read-only.\r\n+     */\r\n+    public void setReadOnly(boolean readOnly) {\r\n+        _readOnly = (readOnly) ? Boolean.TRUE : Boolean.FALSE;\r\n+    }\r\n+\r\n+    /**\r\n+     * The query candidate class, or null if none.\r\n+     */\r\n+    public Class getCandidateType() {\r\n+        return _candidate;\r\n+    }\r\n+\r\n+    /**\r\n+     * The query result class, or null if none.\r\n+     */\r\n+    public void setCandidateType(Class cls) {\r\n+        _candidate = cls;\r\n+    }\r\n+\r\n+    /**\r\n+     * The query result class, or null if none.\r\n+     */\r\n+    public Class getResultType() {\r\n+        return _res;\r\n+    }\r\n+\r\n+    /**\r\n+     * The query result class, or null if none.\r\n+     */\r\n+    public void setResultType(Class cls) {\r\n+        _res = cls;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the query language.\r\n+     */\r\n+    public String getLanguage() {\r\n+        return _language;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the language for this query.\r\n+     */\r\n+    public void setLanguage(String language) {\r\n+        _language = language;\r\n+    }\r\n+\r\n+    /**\r\n+     * The full query string, or null if none.\r\n+     */\r\n+    public String getQueryString() {\r\n+        return _query;\r\n+    }\r\n+\r\n+    /**\r\n+     * The full query string, or null if none.\r\n+     */\r\n+    public void setQueryString(String query) {\r\n+        _query = query;\r\n+    }\r\n+\r\n+    /**\r\n+     * Query hints.\r\n+     */\r\n+    public String[] getHintKeys() {\r\n+        return (_hintKeys == null) ? EMPTY_KEYS\r\n+            : (String[]) _hintKeys.toArray(new String[_hintKeys.size()]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Query hints.\r\n+     */\r\n+    public Object[] getHintValues() {\r\n+        return (_hintVals == null) ? EMPTY_VALS : _hintVals.toArray();\r\n+    }\r\n+\r\n+    /**\r\n+     * Add a query hint.\r\n+     */\r\n+    public void addHint(String key, Object value) {\r\n+        if (_hintKeys == null) {\r\n+            _hintKeys = new LinkedList();\r\n+            _hintVals = new LinkedList();\r\n+        }\r\n+        _hintKeys.add(key);\r\n+        _hintVals.add(value);\r\n+    }\r\n+\r\n+    /**\r\n+     * Set query template information into the given concrete\r\n+     * query instance. However, the language, query string, and\r\n+     * candidate class are assumed to be declared in the query\r\n+     * instantiation, and hints are not transferred.\r\n+     */\r\n+    public void setInto(Query query) {\r\n+        if (_candidate != null)\r\n+            query.setCandidateType(_candidate, true);\r\n+        if (_query != null && _query.length() > 0)\r\n+            query.setQuery(_query);\r\n+        if (_res != null)\r\n+            query.setResultType(_res);\r\n+        if (_readOnly != null)\r\n+            query.setReadOnly(_readOnly.booleanValue());\r\n+    }\r\n+\r\n+    /**\r\n+     * Initialize this instance from the values held in the\r\n+     * specified {@link Query}.\r\n+     */\r\n+    public void setFrom(Query query) {\r\n+        _language = query.getLanguage();\r\n+        _candidate = query.getCandidateType();\r\n+        _res = query.getResultType();\r\n+        _query = query.getQueryString();\r\n+    }\r\n+\r\n+    /**\r\n+     * The source mode of this query.\r\n+     */\r\n+    public int getSourceMode() {\r\n+        return _mode;\r\n+    }\r\n+\r\n+    /**\r\n+     * The source mode of this query.\r\n+     */\r\n+    public void setSourceMode(int mode) {\r\n+        _mode = mode;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return _name;\r\n+    }\r\n+\r\n+    ///////////////\r\n+    // Commentable\r\n+    ///////////////\r\n+    public String[] getComments() {\r\n+        return (_comments == null) ? EMPTY_COMMENTS : _comments;\r\n+    }\r\n+\r\n+    public void setComments(String[] comments) {\r\n+        _comments = comments;\r\n+    }\r\n+\r\n+    ////////////////////////////////\r\n+    // SourceTracker implementation\r\n+    ////////////////////////////////\r\n+    public File getSourceFile() {\r\n+        return _file;\r\n+    }\r\n+\r\n+    public Object getSourceScope() {\r\n+        return _scope;\r\n+    }\r\n+\r\n+    public int getSourceType() {\r\n+        return _srcType;\r\n+    }\r\n+\r\n+    public void setSource(File file, Object scope, int srcType) {\r\n+        _file = file;\r\n+        _scope = scope;\r\n+        _srcType = srcType;\r\n+    }\r\n+\r\n+    public String getResourceName() {\r\n+        return (_class == null) ? _name : _class.getName() + \":\" + _name;\r\n+    }\r\n+}\r"},{"sha":"c40a9140295e59a575dda01894cd5054d35b4b71","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"added","additions":344,"deletions":0,"changes":344,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,344 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.File;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.openjpa.conf.SeqValue;\r\n+import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.lib.conf.PluginValue;\r\n+import org.apache.openjpa.lib.meta.SourceTracker;\r\n+import org.apache.openjpa.lib.util.Closeable;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.xml.Commentable;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n+import org.apache.openjpa.util.OpenJPAException;\r\n+\r\n+/**\r\n+ * Metadata about a named sequence.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public class SequenceMetaData\r\n+    implements SourceTracker, MetaDataContext, Closeable, Commentable {\r\n+\r\n+    /**\r\n+     * Sequence name that means to use the system default sequence.\r\n+     */\r\n+    public static final String NAME_SYSTEM = \"system\";\r\n+\r\n+    /**\r\n+     * Default plugin alias name; every back end should have some 'native'\r\n+     * sequence implementation.\r\n+     */\r\n+    public static final String IMPL_NATIVE = \"native\";\r\n+\r\n+    /**\r\n+     * Time-based sequence values.\r\n+     */\r\n+    public static final String IMPL_TIME = \"time\";\r\n+    // plugin property names for standard props\r\n+    private static final String PROP_SEQUENCE = \"Sequence\";\r\n+    private static final String PROP_INITIAL_VALUE = \"InitialValue\";\r\n+    private static final String PROP_ALLOCATE = \"Allocate\";\r\n+    private static final String PROP_INCREMENT = \"Increment\";\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (SequenceMetaData.class);\r\n+    private final MetaDataRepository _repos;\r\n+    private final String _name;\r\n+    private int _type = Seq.TYPE_DEFAULT;\r\n+    private String _plugin = IMPL_NATIVE;\r\n+    private SequenceFactory _factory = null;\r\n+    private File _source = null;\r\n+    private Object _scope = null;\r\n+    private int _srcType = SRC_OTHER;\r\n+    private String[] _comments = null;\r\n+    private String _sequence = null;\r\n+    private int _increment = -1;\r\n+    private int _allocate = -1;\r\n+    private int _initial = -1;\r\n+    // instantiated lazily\r\n+    private Seq _instance = null;\r\n+\r\n+    /**\r\n+     * Constructor; supply sequence name.\r\n+     */\r\n+    public SequenceMetaData(String name, MetaDataRepository repos) {\r\n+        _name = name;\r\n+        _repos = repos;\r\n+    }\r\n+\r\n+    /**\r\n+     * The owning repository.\r\n+     */\r\n+    public MetaDataRepository getRepository() {\r\n+        return _repos;\r\n+    }\r\n+\r\n+    /**\r\n+     * The sequence name.\r\n+     */\r\n+    public String getName() {\r\n+        return _name;\r\n+    }\r\n+\r\n+    public File getSourceFile() {\r\n+        return _source;\r\n+    }\r\n+\r\n+    public Object getSourceScope() {\r\n+        return _scope;\r\n+    }\r\n+\r\n+    public int getSourceType() {\r\n+        return _srcType;\r\n+    }\r\n+\r\n+    public void setSource(File file, Object scope, int srcType) {\r\n+        _source = file;\r\n+        _scope = scope;\r\n+        _srcType = srcType;\r\n+    }\r\n+\r\n+    public String getResourceName() {\r\n+        return _name;\r\n+    }\r\n+\r\n+    /**\r\n+     * The sequence type.\r\n+     */\r\n+    public int getType() {\r\n+        return _type;\r\n+    }\r\n+\r\n+    /**\r\n+     * The sequence type.\r\n+     */\r\n+    public void setType(int type) {\r\n+        _type = type;\r\n+    }\r\n+\r\n+    /**\r\n+     * Native sequence name.\r\n+     */\r\n+    public String getSequence() {\r\n+        return _sequence;\r\n+    }\r\n+\r\n+    /**\r\n+     * Native sequence name.\r\n+     */\r\n+    public void setSequence(String sequence) {\r\n+        _sequence = sequence;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sequence increment, or -1 for default.\r\n+     */\r\n+    public int getIncrement() {\r\n+        return _increment;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sequence increment, or -1 for default.\r\n+     */\r\n+    public void setIncrement(int increment) {\r\n+        _increment = increment;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sequence values to allocate, or -1 for default.\r\n+     */\r\n+    public int getAllocate() {\r\n+        return _allocate;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sequence values to allocate, or -1 for default.\r\n+     */\r\n+    public void setAllocate(int allocate) {\r\n+        _allocate = allocate;\r\n+    }\r\n+\r\n+    /**\r\n+     * Initial sequence value, or -1 for default.\r\n+     */\r\n+    public int getInitialValue() {\r\n+        return _initial;\r\n+    }\r\n+\r\n+    /**\r\n+     * Initial sequence value, or -1 for default.\r\n+     */\r\n+    public void setInitialValue(int initial) {\r\n+        _initial = initial;\r\n+    }\r\n+\r\n+    /**\r\n+     * Plugin string describing the {@link Seq}.\r\n+     */\r\n+    public String getSequencePlugin() {\r\n+        return _plugin;\r\n+    }\r\n+\r\n+    /**\r\n+     * Plugin string describing the {@link Seq}.\r\n+     */\r\n+    public void setSequencePlugin(String plugin) {\r\n+        _plugin = plugin;\r\n+    }\r\n+\r\n+    /**\r\n+     * A factory to transform spec sequences produced by user factories into\r\n+     * the OpenJPA sequence type.\r\n+     */\r\n+    public SequenceFactory getSequenceFactory() {\r\n+        return _factory;\r\n+    }\r\n+\r\n+    /**\r\n+     * A factory to transform spec sequences produced by user factories into\r\n+     * the OpenJPA sequence type.\r\n+     */\r\n+    public void setSequenceFactory(SequenceFactory factory) {\r\n+        _factory = factory;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the initialized sequence instance.\r\n+     */\r\n+    public synchronized Seq getInstance(ClassLoader envLoader) {\r\n+        if (_instance == null)\r\n+            _instance = instantiate(envLoader);\r\n+        return _instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new uninitialized instance of this sequence.\r\n+     */\r\n+    protected Seq instantiate(ClassLoader envLoader) {\r\n+        if (NAME_SYSTEM.equals(_name))\r\n+            return _repos.getConfiguration().getSequenceInstance();\r\n+        try {\r\n+            PluginValue plugin = newPluginValue(\"sequence-plugin\");\r\n+            plugin.setString(_plugin);\r\n+            String clsName = plugin.getClassName();\r\n+            Class cls =\r\n+                Class.forName(clsName, true, Seq.class.getClassLoader());\r\n+            StringBuffer props = new StringBuffer();\r\n+            if (plugin.getProperties() != null)\r\n+                props.append(plugin.getProperties());\r\n+            addStandardProperties(props);\r\n+            // allow user-class specification of either our sequence\r\n+            // interface or a factory class\r\n+            Seq seq;\r\n+            if (Seq.class.isAssignableFrom(cls)) {\r\n+                seq = (Seq) cls.newInstance();\r\n+                Configurations.configureInstance(seq,\r\n+                    _repos.getConfiguration(), props.toString());\r\n+                seq.setType(_type);\r\n+            } else if (_factory != null)\r\n+                seq = _factory.toSequence(cls, props.toString());\r\n+            else throw new MetaDataException(_loc.get(\"not-seq-cls\", _name,\r\n+                cls));\r\n+            return seq;\r\n+        } catch (OpenJPAException ke) {\r\n+            throw ke;\r\n+        } catch (Exception e) {\r\n+            throw new MetaDataException(_loc.get(\"cant-init-seq\", _name)).\r\n+                setCause(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new plugin value for sequences. Returns a standard\r\n+     * {@link SeqValue} by default.\r\n+     */\r\n+    protected PluginValue newPluginValue(String property) {\r\n+        return new SeqValue(property);\r\n+    }\r\n+\r\n+    /**\r\n+     * Add standard properties to the given properties buffer.\r\n+     */\r\n+    protected void addStandardProperties(StringBuffer props) {\r\n+        appendProperty(props, PROP_SEQUENCE, _sequence);\r\n+        appendProperty(props, PROP_INITIAL_VALUE, _initial);\r\n+        appendProperty(props, PROP_ALLOCATE, _allocate);\r\n+        appendProperty(props, PROP_INCREMENT, _increment);\r\n+    }\r\n+\r\n+    /**\r\n+     * Add a string property to the buffer. Nothing will be added if value\r\n+     * is null or empty string.\r\n+     */\r\n+    protected void appendProperty(StringBuffer props, String name, String val) {\r\n+        if (StringUtils.isEmpty(val))\r\n+            return;\r\n+        if (props.length() > 0)\r\n+            props.append(\",\");\r\n+        props.append(name).append(\"=\").append(val);\r\n+    }\r\n+\r\n+    /**\r\n+     * Add an int property to the buffer. Nothing will be added if value is -1.\r\n+     */\r\n+    protected void appendProperty(StringBuffer props, String name, int val) {\r\n+        if (val == -1)\r\n+            return;\r\n+        if (props.length() > 0)\r\n+            props.append(\",\");\r\n+        props.append(name).append(\"=\").append(val);\r\n+    }\r\n+\r\n+    /**\r\n+     * Close user sequence instance.\r\n+     */\r\n+    public void close() {\r\n+        if (_instance != null && !NAME_SYSTEM.equals(_name))\r\n+            try {\r\n+                _instance.close();\r\n+            } catch (Exception e) {\r\n+            }\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return _name;\r\n+    }\r\n+\r\n+    ///////////////\r\n+    // Commentable\r\n+    ///////////////\r\n+    public String[] getComments() {\r\n+        return (_comments == null) ? EMPTY_COMMENTS : _comments;\r\n+    }\r\n+\r\n+    public void setComments(String[] comments) {\r\n+        _comments = comments;\r\n+    }\r\n+\r\n+    /**\r\n+     * Allow facades to supply adapters from a spec sequence type to the\r\n+     * OpenJPA sequence type.\r\n+     */\r\n+    public static interface SequenceFactory {\r\n+\r\n+        /**\r\n+         * Transform the given class named in metadata into a sequence.\r\n+         */\r\n+        public Seq toSequence(Class cls, String props) throws Exception;\r\n+    }\r\n+}\r"},{"sha":"d3786c0d7f8a8111070f94e3619c2aa4d75fa3c0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/UpdateStrategies.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/UpdateStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/UpdateStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/UpdateStrategies.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.StringDistance;\r\n+\r\n+/**\r\n+ * Strategies for persistent value updates.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public class UpdateStrategies {\r\n+\r\n+    /**\r\n+     * No update strategy.\r\n+     */\r\n+    public static final int NONE = 0;\r\n+\r\n+    /**\r\n+     * Ignore updates; field is always considered clean.\r\n+     */\r\n+    public static final int IGNORE = 1;\r\n+\r\n+    /**\r\n+     * Throw an exception on attempt to update.\r\n+     */\r\n+    public static final int RESTRICT = 2;\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (UpdateStrategies.class);\r\n+\r\n+    /**\r\n+     * Convert the given strategy to a name.\r\n+     */\r\n+    public static String getName(int strategy) {\r\n+        switch (strategy) {\r\n+            case NONE:\r\n+                return \"none\";\r\n+            case IGNORE:\r\n+                return \"ignore\";\r\n+            case RESTRICT:\r\n+                return \"restrict\";\r\n+            default:\r\n+                throw new IllegalArgumentException(String.valueOf(strategy));\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Convert the given strategy name to its constant.\r\n+     */\r\n+    public static int getCode(String val, Object context) {\r\n+        if (\"none\".equals(val))\r\n+            return NONE;\r\n+        if (\"ignore\".equals(val))\r\n+            return IGNORE;\r\n+        if (\"restrict\".equals(val))\r\n+            return RESTRICT;\r\n+        List opts = Arrays.asList(new String[]{ \"none\", \"ignore\", \"restrict\" });\r\n+        String closest = StringDistance.getClosestLevenshteinDistance(val,\r\n+            opts, .5F);\r\n+        String msg;\r\n+        if (closest != null)\r\n+            msg = _loc.get(\"bad-update-strategy-hint\", new Object[]{\r\n+                context, val, closest, opts });\r\n+        else msg = _loc.get(\"bad-update-strategy\", context, val, opts);\r\n+        throw new IllegalArgumentException(msg);\r\n+    }\r\n+}\r"},{"sha":"53a1fd445f6c400cccebbeb389534d2d64ec1eb4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","status":"added","additions":296,"deletions":0,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,296 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+/**\r\n+ * Holds metadata on a value; this could be a field value, key value, or\r\n+ * element value.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public interface ValueMetaData extends MetaDataContext, MetaDataModes {\r\n+\r\n+    /**\r\n+     * The operation is not cascaded to this field.\r\n+     */\r\n+    public int CASCADE_NONE = 0;\r\n+\r\n+    /**\r\n+     * The operation is immediately cascaded to this field.\r\n+     */\r\n+    public int CASCADE_IMMEDIATE = 1;\r\n+\r\n+    /**\r\n+     * Use automatic cascade behavior. Persistence-by-reachability,\r\n+     * delete-dependent, attach-if-detached, etc.\r\n+     */\r\n+    public int CASCADE_AUTO = 2;\r\n+\r\n+    /**\r\n+     * Marker to set on {@link #setValueMappedBy} to denote that the map key\r\n+     * is mapped by the primary key field of the value.\r\n+     */\r\n+    public static final String MAPPED_BY_PK = \"`pk`\";\r\n+\r\n+    /**\r\n+     * Return the owning field for this value.\r\n+     */\r\n+    public FieldMetaData getFieldMetaData();\r\n+\r\n+    /**\r\n+     * The value class.\r\n+     */\r\n+    public Class getType();\r\n+\r\n+    /**\r\n+     * The value class.\r\n+     */\r\n+    public void setType(Class type);\r\n+\r\n+    /**\r\n+     * The type code of the value class.\r\n+     */\r\n+    public int getTypeCode();\r\n+\r\n+    /**\r\n+     * The type code of the value class.\r\n+     */\r\n+    public void setTypeCode(int code);\r\n+\r\n+    /**\r\n+     * Whether the type is a persistence capable instance.\r\n+     */\r\n+    public boolean isTypePC();\r\n+\r\n+    /**\r\n+     * The metadata for the value class, if the type is persistent.\r\n+     */\r\n+    public ClassMetaData getTypeMetaData();\r\n+\r\n+    /**\r\n+     * Return the declared class of the value. This can differ\r\n+     * from the return value of {@link #getType} if the user indicates\r\n+     * a different type or the value has an externalizer.\r\n+     */\r\n+    public Class getDeclaredType();\r\n+\r\n+    /**\r\n+     * Set the declared class of the value.\r\n+     */\r\n+    public void setDeclaredType(Class type);\r\n+\r\n+    /**\r\n+     * Return the declared type code of the value. This can differ\r\n+     * from the return value of {@link #getTypeCode} if the user indicates\r\n+     * a different type or the value has an externalizer.\r\n+     */\r\n+    public int getDeclaredTypeCode();\r\n+\r\n+    /**\r\n+     * Set the type code for the value. The type code is usually\r\n+     * computed automatically, but it can be useful to set it explicitly\r\n+     * when creating metadatas from scratch.\r\n+     */\r\n+    public void setDeclaredTypeCode(int type);\r\n+\r\n+    /**\r\n+     * Whether the type is a persistence capable instance.\r\n+     */\r\n+    public boolean isDeclaredTypePC();\r\n+\r\n+    /**\r\n+     * Return metadata for the value's class, if the type is persistent.\r\n+     */\r\n+    public ClassMetaData getDeclaredTypeMetaData();\r\n+\r\n+    /**\r\n+     * This attribute is a hint to the implementation to store this value\r\n+     * in the same structure as the class, rather than as a separate datastore\r\n+     * structure. Defaults to true if the field is not a collection or map\r\n+     * or persistence-capable object; defaults to false otherwise.\r\n+     * Implementations are permitted to ignore this attribute.\r\n+     */\r\n+    public boolean isEmbedded();\r\n+\r\n+    /**\r\n+     * This attribute is a hint to the implementation to store this value\r\n+     * in the same structure as the class, rather than as a separate datastore\r\n+     * structure. Defaults to true if the field is not a collection or map\r\n+     * or persistence-capable objects; defaults to false otherwise.\r\n+     * Implementations are permitted to ignore this attribute.\r\n+     */\r\n+    public void setEmbedded(boolean embedded);\r\n+\r\n+    /**\r\n+     * Whether this is an embedded persistence capable value.\r\n+     */\r\n+    public boolean isEmbeddedPC();\r\n+\r\n+    /**\r\n+     * The embedded class metadata for the value.\r\n+     */\r\n+    public ClassMetaData getEmbeddedMetaData();\r\n+\r\n+    /**\r\n+     * Add embedded metadata for this value.\r\n+     */\r\n+    public ClassMetaData addEmbeddedMetaData();\r\n+\r\n+    /**\r\n+     * Cascade behavior for delete operation. Only applies to\r\n+     * persistence-capable values. Options are:<br />\r\n+     * <ul>\r\n+     * <li><code>CASCADE_NONE</code>: No cascades.</li>\r\n+     * <li><code>CASCADE_IMMEDIATE</code>: Value is deleted immediately when\r\n+     * the owning object is deleted.</li>\r\n+     * <li><code>CASCADE_AUTO</code>: Value will be deleted on flush\r\n+     * if the owning object is deleted or if the value is removed from the\r\n+     * owning object, and if the value is not assigned to another relation in\r\n+     * the same transaction.</li>\r\n+     * </ul>\r\n+     */\r\n+    public int getCascadeDelete();\r\n+\r\n+    /**\r\n+     * Cascade behavior for deletion.\r\n+     *\r\n+     * @see #getCascadeDelete\r\n+     */\r\n+    public void setCascadeDelete(int cascade);\r\n+\r\n+    /**\r\n+     * Cascade behavior for persist operation. Only applies to\r\n+     * persistence-capable values. Options are:<br />\r\n+     * <ul>\r\n+     * <li><code>CASCADE_NONE</code>: No cascades. If a transient relation\r\n+     * is held at flush, an error is thrown.</li>\r\n+     * <li><code>CASCADE_IMMEDIATE</code>: Value is persisted immediately when\r\n+     * the owning object is persisted.</li>\r\n+     * <li><code>CASCADE_AUTO</code>: Value will be persisted on flush.</li>\r\n+     * </ul>\r\n+     */\r\n+    public int getCascadePersist();\r\n+\r\n+    /**\r\n+     * Cascade behavior for persist operation.\r\n+     *\r\n+     * @see #getCascadePersist\r\n+     */\r\n+    public void setCascadePersist(int cascade);\r\n+\r\n+    /**\r\n+     * Cascade behavior for attach operation. Only applies to\r\n+     * persistence-capable values. Options are:<br />\r\n+     * <ul>\r\n+     * <li><code>CASCADE_NONE</code>: No cascades of attach. Relation\r\n+     * remains detached.</li>\r\n+     * <li><code>CASCADE_IMMEDIATE</code>: Value is attached immediately.</li>\r\n+     * </ul>\r\n+     */\r\n+    public int getCascadeAttach();\r\n+\r\n+    /**\r\n+     * Cascade behavior for attach operation.\r\n+     *\r\n+     * @see #getCascadeAttach\r\n+     */\r\n+    public void setCascadeAttach(int cascade);\r\n+\r\n+    /**\r\n+     * Cascade behavior for refresh operation. Only applies to\r\n+     * persistence-capable values. Options are:<br />\r\n+     * <ul>\r\n+     * <li><code>CASCADE_NONE</code>: No cascades of refresh.</li>\r\n+     * <li><code>CASCADE_IMMEDIATE</code>: Persistent value object is also\r\n+     * refreshed.</li>\r\n+     * <li><code>CASCADE_AUTO</code>: Value will be refreshed if it is\r\n+     * in the current fetch groups.</li>\r\n+     * </ul>\r\n+     */\r\n+    public int getCascadeRefresh();\r\n+\r\n+    /**\r\n+     * Cascade behavior for refresh operation.\r\n+     *\r\n+     * @see #getCascadeRefresh\r\n+     */\r\n+    public void setCascadeRefresh(int cascade);\r\n+\r\n+    /**\r\n+     * Whether this value is serialized when stored.\r\n+     */\r\n+    public boolean isSerialized();\r\n+\r\n+    /**\r\n+     * Whether this value is serialized when stored.\r\n+     */\r\n+    public void setSerialized(boolean serialized);\r\n+\r\n+    /**\r\n+     * The field that this value shares a mapping with. Currently the only\r\n+     * supported use for a mapped-by value is when a map field key is\r\n+     * determined by a field of the persistence-capable map value.\r\n+     */\r\n+    public String getValueMappedBy();\r\n+\r\n+    /**\r\n+     * The field that this value shares a mapping with. Currently the only\r\n+     * supported use for a mapped-by value is when a map field key is\r\n+     * determined by a field of the persistence-capable map value.\r\n+     */\r\n+    public void setValueMappedBy(String mapped);\r\n+\r\n+    /**\r\n+     * The field that this value shares a mapping with. Currently the only\r\n+     * supported use for a mapped-by value is when a map field key is\r\n+     * determined by a field of the persistence-capable map value.\r\n+     */\r\n+    public FieldMetaData getValueMappedByMetaData();\r\n+\r\n+    /**\r\n+     * User-supplied type overriding assumed type based on field.\r\n+     */\r\n+    public Class getTypeOverride();\r\n+\r\n+    /**\r\n+     * User-supplied type overriding assumed type based on field.\r\n+     */\r\n+    public void setTypeOverride(Class type);\r\n+\r\n+    /**\r\n+     * Resolve mode for metadata.\r\n+     */\r\n+    public int getResolve();\r\n+\r\n+    /**\r\n+     * Resolve mode for metadata.\r\n+     */\r\n+    public void setResolve(int mode);\r\n+\r\n+    /**\r\n+     * Resolve mode for metadata.\r\n+     */\r\n+    public void setResolve(int mode, boolean on);\r\n+\r\n+    /**\r\n+     * Resolve and validate metadata. Return true if already resolved.\r\n+     */\r\n+    public boolean resolve(int mode);\r\n+\r\n+    /**\r\n+     * Copy state from the given value to this one. Do not copy mapping\r\n+     * information.\r\n+     */\r\n+    public void copy(ValueMetaData vmd);\r\n+}\r"},{"sha":"ad89951bb965ca8ee41b85d63e20bf9f445a1738","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaDataImpl.java","status":"added","additions":423,"deletions":0,"changes":423,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaDataImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,423 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n+import org.apache.openjpa.util.UserException;\r\n+\r\n+/**\r\n+ * Default {@link ValueMetaData} implementation.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ValueMetaDataImpl implements ValueMetaData {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (ValueMetaDataImpl.class);\r\n+    ///////////////////////////////////////////////////////////////\r\n+    // Note: if you add additional state that should be copied to\r\n+    // embedded metadata, make sure to add it to the copy() method\r\n+    ///////////////////////////////////////////////////////////////\r\n+    private final FieldMetaData _owner;\r\n+    private Class _decType = Object.class;\r\n+    private int _decCode = JavaTypes.OBJECT;\r\n+    private ClassMetaData _decTypeMeta = null;\r\n+    private Class _type = null;\r\n+    private int _code = JavaTypes.OBJECT;\r\n+    private ClassMetaData _typeMeta = null;\r\n+    private Class _typeOverride = null;\r\n+    private int _delete = CASCADE_NONE;\r\n+    private int _persist = CASCADE_AUTO;\r\n+    private int _attach = CASCADE_IMMEDIATE;\r\n+    private int _refresh = CASCADE_AUTO;\r\n+    private boolean _serialized = false;\r\n+    private Boolean _embedded = null;\r\n+    private ClassMetaData _embeddedMeta = null;\r\n+    private int _resMode = MODE_NONE;\r\n+    private String _mappedBy = null;\r\n+    private FieldMetaData _mappedByMeta = null;\r\n+\r\n+    protected ValueMetaDataImpl(FieldMetaData owner) {\r\n+        _owner = owner;\r\n+    }\r\n+\r\n+    public FieldMetaData getFieldMetaData() {\r\n+        return _owner;\r\n+    }\r\n+\r\n+    public MetaDataRepository getRepository() {\r\n+        return _owner.getRepository();\r\n+    }\r\n+\r\n+    public Class getType() {\r\n+        return (_type == null) ? _decType : _type;\r\n+    }\r\n+\r\n+    public void setType(Class type) {\r\n+        _type = type;\r\n+        _typeMeta = null;\r\n+        if (type != null)\r\n+            setTypeCode(JavaTypes.getTypeCode(type));\r\n+    }\r\n+\r\n+    public int getTypeCode() {\r\n+        return (_type == null) ? _decCode : _code;\r\n+    }\r\n+\r\n+    public void setTypeCode(int code) {\r\n+        _code = code;\r\n+    }\r\n+\r\n+    public boolean isTypePC() {\r\n+        return getTypeCode() == JavaTypes.PC\r\n+            || getTypeCode() == JavaTypes.PC_UNTYPED;\r\n+    }\r\n+\r\n+    public ClassMetaData getTypeMetaData() {\r\n+        if (_type == null)\r\n+            return getDeclaredTypeMetaData();\r\n+        if (_typeMeta == null && _code == JavaTypes.PC) {\r\n+            ClassMetaData meta = _owner.getDefiningMetaData();\r\n+            _typeMeta = meta.getRepository().getMetaData(_type,\r\n+                meta.getEnvClassLoader(), true);\r\n+        }\r\n+        return _typeMeta;\r\n+    }\r\n+\r\n+    public Class getDeclaredType() {\r\n+        return _decType;\r\n+    }\r\n+\r\n+    public void setDeclaredType(Class type) {\r\n+        _decType = type;\r\n+        _decTypeMeta = null;\r\n+        _decCode = JavaTypes.getTypeCode(type);\r\n+        if (_embeddedMeta != null)\r\n+            _embeddedMeta.setDescribedType(type);\r\n+    }\r\n+\r\n+    public int getDeclaredTypeCode() {\r\n+        return _decCode;\r\n+    }\r\n+\r\n+    public void setDeclaredTypeCode(int code) {\r\n+        _decCode = code;\r\n+    }\r\n+\r\n+    public boolean isDeclaredTypePC() {\r\n+        return _decCode == JavaTypes.PC || _decCode == JavaTypes.PC_UNTYPED;\r\n+    }\r\n+\r\n+    public ClassMetaData getDeclaredTypeMetaData() {\r\n+        if (_decTypeMeta == null && _decCode == JavaTypes.PC) {\r\n+            if (isEmbedded())\r\n+                _decTypeMeta = getEmbeddedMetaData();\r\n+            else {\r\n+                ClassMetaData meta = _owner.getDefiningMetaData();\r\n+                _decTypeMeta = meta.getRepository().getMetaData(_decType,\r\n+                    meta.getEnvClassLoader(), true);\r\n+            }\r\n+        }\r\n+        return _decTypeMeta;\r\n+    }\r\n+\r\n+    public boolean isEmbedded() {\r\n+        if (_owner.getManagement() != _owner.MANAGE_PERSISTENT)\r\n+            return false;\r\n+        if (_embedded == null) {\r\n+            // field left as default; embedded setting depends on type\r\n+            switch (_decCode) {\r\n+                case JavaTypes.PC:\r\n+                case JavaTypes.COLLECTION:\r\n+                case JavaTypes.MAP:\r\n+                case JavaTypes.PC_UNTYPED:\r\n+                    _embedded = Boolean.FALSE;\r\n+                    break;\r\n+                default:\r\n+                    _embedded = Boolean.TRUE;\r\n+            }\r\n+        }\r\n+        return _embedded.booleanValue();\r\n+    }\r\n+\r\n+    public void setEmbedded(boolean embedded) {\r\n+        if (embedded && _embedded != Boolean.TRUE) {\r\n+            _decTypeMeta = null;\r\n+            _typeMeta = null;\r\n+        }\r\n+        _embedded = (embedded) ? Boolean.TRUE : Boolean.FALSE;\r\n+    }\r\n+\r\n+    public boolean isEmbeddedPC() {\r\n+        return _decCode == JavaTypes.PC && isEmbedded();\r\n+    }\r\n+\r\n+    public ClassMetaData getEmbeddedMetaData() {\r\n+        if (_embeddedMeta == null && isEmbeddedPC())\r\n+            addEmbeddedMetaData();\r\n+        return _embeddedMeta;\r\n+    }\r\n+\r\n+    public ClassMetaData addEmbeddedMetaData() {\r\n+        MetaDataRepository repos = _owner.getRepository();\r\n+        _embeddedMeta = repos.newEmbeddedClassMetaData(this);\r\n+        _embeddedMeta.setDescribedType(_decType);\r\n+        repos.getMetaDataFactory().getDefaults().populate(_embeddedMeta,\r\n+            ClassMetaData.ACCESS_UNKNOWN);\r\n+        setEmbedded(true);\r\n+        return _embeddedMeta;\r\n+    }\r\n+\r\n+    public int getCascadeDelete() {\r\n+        if (_owner.getManagement() != FieldMetaData.MANAGE_PERSISTENT)\r\n+            return CASCADE_NONE;\r\n+        if (isEmbeddedPC())\r\n+            return CASCADE_IMMEDIATE;\r\n+        switch (_delete) {\r\n+            case CASCADE_NONE:\r\n+                // if the user marks the owning field dependent and we externalize\r\n+                // to a pc type, then become dependent\r\n+                if (this != _owner.getValue() && isTypePC()\r\n+                    && ((ValueMetaDataImpl) _owner.getValue())._delete\r\n+                    == CASCADE_AUTO)\r\n+                    return CASCADE_AUTO;\r\n+                break;\r\n+            case CASCADE_AUTO:\r\n+                if (isTypePC())\r\n+                    return CASCADE_AUTO;\r\n+                break;\r\n+            case CASCADE_IMMEDIATE:\r\n+                if (isDeclaredTypePC())\r\n+                    return CASCADE_IMMEDIATE;\r\n+                break;\r\n+        }\r\n+        return CASCADE_NONE;\r\n+    }\r\n+\r\n+    public void setCascadeDelete(int delete) {\r\n+        _delete = delete;\r\n+    }\r\n+\r\n+    public int getCascadePersist() {\r\n+        if (_owner.getManagement() != FieldMetaData.MANAGE_PERSISTENT)\r\n+            return CASCADE_NONE;\r\n+        if (isDeclaredTypePC())\r\n+            return _persist;\r\n+        if (!isTypePC())\r\n+            return CASCADE_NONE;\r\n+        // if only externalized type is pc, can't cascade immediate\r\n+        return (_persist == CASCADE_IMMEDIATE) ? CASCADE_AUTO : _persist;\r\n+    }\r\n+\r\n+    public void setCascadePersist(int persist) {\r\n+        _persist = persist;\r\n+    }\r\n+\r\n+    public int getCascadeAttach() {\r\n+        if (_owner.getManagement() != FieldMetaData.MANAGE_PERSISTENT\r\n+            || !isDeclaredTypePC()) // attach acts on declared type\r\n+            return CASCADE_NONE;\r\n+        return _attach;\r\n+    }\r\n+\r\n+    public void setCascadeAttach(int attach) {\r\n+        if (attach == CASCADE_AUTO)\r\n+            throw new IllegalArgumentException(\"CASCADE_AUTO\");\r\n+        _attach = attach;\r\n+    }\r\n+\r\n+    public int getCascadeRefresh() {\r\n+        if (_owner.getManagement() != FieldMetaData.MANAGE_PERSISTENT\r\n+            || !isDeclaredTypePC()) // refresh acts on declared type\r\n+            return CASCADE_NONE;\r\n+        return _refresh;\r\n+    }\r\n+\r\n+    public void setCascadeRefresh(int refresh) {\r\n+        _refresh = refresh;\r\n+    }\r\n+\r\n+    public boolean isSerialized() {\r\n+        return _serialized;\r\n+    }\r\n+\r\n+    public void setSerialized(boolean serialized) {\r\n+        _serialized = serialized;\r\n+    }\r\n+\r\n+    public String getValueMappedBy() {\r\n+        if (_mappedBy == MAPPED_BY_PK) {\r\n+            // use this instead of getting meta from element b/c that\r\n+            // requires element to be resolved\r\n+            ClassMetaData meta = getRepository().getMetaData\r\n+                (_owner.getElement().getType(), null, false);\r\n+            if (meta == null)\r\n+                throw new MetaDataException(_loc.get(\"val-not-pc\", _owner));\r\n+            if (meta.getPrimaryKeyFields().length != 1)\r\n+                throw new MetaDataException(_loc.get(\"val-not-one-pk\",\r\n+                    _owner));\r\n+            _mappedByMeta = meta.getPrimaryKeyFields()[0];\r\n+            _mappedBy = _mappedByMeta.getName();\r\n+        }\r\n+        return _mappedBy;\r\n+    }\r\n+\r\n+    public void setValueMappedBy(String mapped) {\r\n+        if (_owner.getKey() != this && mapped != null)\r\n+            throw new UserException(_loc.get(\"mapped-by-not-key\", this));\r\n+        else {\r\n+            _mappedBy = mapped;\r\n+            _mappedByMeta = null;\r\n+        }\r\n+    }\r\n+\r\n+    public FieldMetaData getValueMappedByMetaData() {\r\n+        if (getValueMappedBy() != null && _mappedByMeta == null) {\r\n+            ClassMetaData meta = _owner.getElement().getTypeMetaData();\r\n+            FieldMetaData field = (meta == null) ? null\r\n+                : meta.getField(getValueMappedBy());\r\n+            if (field == null)\r\n+                throw new MetaDataException(_loc.get(\"no-mapped-by\", this,\r\n+                    getValueMappedBy()));\r\n+            if (field.getMappedBy() != null)\r\n+                throw new MetaDataException(_loc.get(\"circ-mapped-by\", this,\r\n+                    getValueMappedBy()));\r\n+            _mappedByMeta = field;\r\n+        }\r\n+        return _mappedByMeta;\r\n+    }\r\n+\r\n+    public Class getTypeOverride() {\r\n+        return _typeOverride;\r\n+    }\r\n+\r\n+    public void setTypeOverride(Class val) {\r\n+        _typeOverride = val;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        String ret = _owner.getFullName();\r\n+        if (this == _owner.getKey())\r\n+            return ret + \"<key:\" + _decType + \">\";\r\n+        if (this == _owner.getElement()) {\r\n+            if (_owner.getTypeCode() == JavaTypes.MAP)\r\n+                return ret + \"<value:\" + _decType + \">\";\r\n+            return ret + \"<element:\" + _decType + \">\";\r\n+        }\r\n+        return ret + \"<\" + _decType + \">\";\r\n+    }\r\n+\r\n+    ////////////////////////\r\n+    // Resolve and validate\r\n+    ////////////////////////\r\n+    public int getResolve() {\r\n+        return _resMode;\r\n+    }\r\n+\r\n+    public void setResolve(int mode) {\r\n+        _resMode = mode;\r\n+    }\r\n+\r\n+    public void setResolve(int mode, boolean on) {\r\n+        if (mode == MODE_NONE)\r\n+            _resMode = mode;\r\n+        else if (on)\r\n+            _resMode |= mode;\r\n+        else _resMode &= ~mode;\r\n+    }\r\n+\r\n+    public boolean resolve(int mode) {\r\n+        if ((_resMode & mode) == mode)\r\n+            return true;\r\n+        int cur = _resMode;\r\n+        _resMode |= mode;\r\n+        // we only perform actions for meta mode\r\n+        if ((mode & MODE_META) == 0 || (cur & MODE_META) != 0)\r\n+            return false;\r\n+        // check for type extension\r\n+        int codeOverride = JavaTypes.OBJECT;\r\n+        if (_typeOverride != null) {\r\n+            codeOverride = JavaTypes.getTypeCode(_typeOverride);\r\n+            // if there is no externalizer method or this value is a key or\r\n+            // element, set our type to the type extension; otherwise, use the\r\n+            // type extension as a hint to the actual type of the declared\r\n+            // value(e.g. marking an interface as non-pc)\r\n+            if (_owner.getExternalizerMethod() == null\r\n+                || _owner.getValue() != this) {\r\n+                _type = _typeOverride;\r\n+                _code = codeOverride;\r\n+            } else {\r\n+                _decCode = codeOverride;\r\n+                if (JavaTypes.maybePC(codeOverride, _typeOverride))\r\n+                    resolveDeclaredType(_typeOverride);\r\n+            }\r\n+        }\r\n+        // see if actual type is pc\r\n+        if (JavaTypes.maybePC(_code, _type)) {\r\n+            _typeMeta = _owner.getRepository().getMetaData(_type,\r\n+                _owner.getDefiningMetaData().getEnvClassLoader(), false);\r\n+            if (_typeMeta != null)\r\n+                _code = JavaTypes.PC;\r\n+        }\r\n+        // if there is no externalizer, set our declared type code to the\r\n+        // actual type so that we treat the value correctly at runtime\r\n+        // (pers by reach, etc)\r\n+        if (_typeOverride != null && _owner.getExternalizerMethod() == null\r\n+            && _owner.getExternalValues() == null) {\r\n+            // cache the metadata immediately since we won't be able to get\r\n+            // it lazily, since we're not resetting _decType to _type\r\n+            _decCode = _code;\r\n+            _decTypeMeta = _typeMeta;\r\n+        } else if (JavaTypes.maybePC(_decCode, _decType))\r\n+            resolveDeclaredType(_decType);\r\n+        // resolves mapped by\r\n+        getValueMappedBy();\r\n+        ClassMetaData embed = getEmbeddedMetaData();\r\n+        if (embed != null)\r\n+            embed.resolve(MODE_META);\r\n+        // oid as primary key field?\r\n+        if (_decCode == JavaTypes.PC && isEmbedded()\r\n+            && _owner.isPrimaryKey() && _owner.getValue() == this)\r\n+            _code = _decCode = JavaTypes.OID;\r\n+        return false;\r\n+    }\r\n+\r\n+    /**\r\n+     * Resolve the declared type.\r\n+     */\r\n+    private void resolveDeclaredType(Class type) {\r\n+        ClassMetaData meta = _owner.getRepository().getMetaData(type,\r\n+            _owner.getDefiningMetaData().getEnvClassLoader(), false);\r\n+        if (meta != null)\r\n+            _decCode = JavaTypes.PC;\r\n+        if (!isEmbedded())\r\n+            _decTypeMeta = meta;\r\n+    }\r\n+\r\n+    public void copy(ValueMetaData vmd) {\r\n+        _decType = vmd.getDeclaredType();\r\n+        _decCode = vmd.getDeclaredTypeCode();\r\n+        _delete = vmd.getCascadeDelete();\r\n+        _persist = vmd.getCascadePersist();\r\n+        _attach = vmd.getCascadeAttach();\r\n+        _refresh = vmd.getCascadeRefresh();\r\n+        _typeOverride = vmd.getTypeOverride();\r\n+        if (_embeddedMeta != null)\r\n+            _embeddedMeta.setDescribedType(vmd.getDeclaredType());\r\n+        // don't allow copy to override embedded; don't copy serialized at all\r\n+        if (_embedded == null)\r\n+            setEmbedded(vmd.isEmbedded());\r\n+    }\r\n+}\r"},{"sha":"c57829b11adc53b8c68e5ca7a405f69f83f01e0e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,134 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import org.apache.commons.collections.bidimap.TreeBidiMap;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.StringDistance;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n+import serp.util.Numbers;\r\n+\r\n+/**\r\n+ * Strategies for persistent value generation.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public class ValueStrategies {\r\n+\r\n+    /**\r\n+     * No value strategy.\r\n+     */\r\n+    public static final int NONE = 0;\r\n+\r\n+    /**\r\n+     * \"native\" value strategy.\r\n+     */\r\n+    public static final int NATIVE = 1;\r\n+\r\n+    /**\r\n+     * \"sequence\" value strategy.\r\n+     */\r\n+    public static final int SEQUENCE = 2;\r\n+\r\n+    /**\r\n+     * \"autoassigned\" value strategy.\r\n+     */\r\n+    public static final int AUTOASSIGN = 3;\r\n+\r\n+    /**\r\n+     * \"increment\" value strategy.\r\n+     */\r\n+    public static final int INCREMENT = 4;\r\n+\r\n+    /**\r\n+     * \"uuid-string\" value strategy.\r\n+     */\r\n+    public static final int UUID_STRING = 5;\r\n+\r\n+    /**\r\n+     * \"uuid-hex\" value strategy.\r\n+     */\r\n+    public static final int UUID_HEX = 6;\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (ValueStrategies.class);\r\n+    // table of names and strategies\r\n+    private static final TreeBidiMap _map = new TreeBidiMap();\r\n+\r\n+    static {\r\n+        _map.put(\"none\", Numbers.valueOf(NONE));\r\n+        _map.put(\"native\", Numbers.valueOf(NATIVE));\r\n+        _map.put(\"sequence\", Numbers.valueOf(SEQUENCE));\r\n+        _map.put(\"autoassign\", Numbers.valueOf(AUTOASSIGN));\r\n+        _map.put(\"increment\", Numbers.valueOf(INCREMENT));\r\n+        _map.put(\"uuid-string\", Numbers.valueOf(UUID_STRING));\r\n+        _map.put(\"uuid-hex\", Numbers.valueOf(UUID_HEX));\r\n+    }\r\n+\r\n+    /**\r\n+     * Convert the given strategy to a name.\r\n+     */\r\n+    public static String getName(int strategy) {\r\n+        Object code = Numbers.valueOf(strategy);\r\n+        String name = (String) _map.getKey(code);\r\n+        if (name != null)\r\n+            return name;\r\n+        throw new IllegalArgumentException(code.toString());\r\n+    }\r\n+\r\n+    /**\r\n+     * Convert the given strategy name to its constant.\r\n+     */\r\n+    public static int getCode(String val, Object context) {\r\n+        if (val == null)\r\n+            return NONE;\r\n+        Object code = _map.get(val);\r\n+        if (code != null)\r\n+            return ((Number) code).intValue();\r\n+        // not a recognized strategy; check for typo\r\n+        String closest = StringDistance.getClosestLevenshteinDistance(val,\r\n+            _map.keySet(), .5F);\r\n+        String msg;\r\n+        if (closest != null)\r\n+            msg = _loc.get(\"bad-value-strategy-hint\", new Object[]{\r\n+                context, val, closest, _map.keySet() });\r\n+        else msg = _loc.get(\"bad-value-strategy\", context, val, _map.keySet());\r\n+        throw new IllegalArgumentException(msg);\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the given strategy is supported by the current runtime.\r\n+     */\r\n+    public static void assertSupported(int strategy, MetaDataContext context,\r\n+        String attributeName) {\r\n+        OpenJPAConfiguration conf = context.getRepository().getConfiguration();\r\n+        boolean supported = true;\r\n+        switch (strategy) {\r\n+            case AUTOASSIGN:\r\n+                supported = conf.supportedOptions().contains\r\n+                    (OpenJPAConfiguration.OPTION_VALUE_AUTOASSIGN);\r\n+                break;\r\n+            case INCREMENT:\r\n+                supported = conf.supportedOptions().contains\r\n+                    (OpenJPAConfiguration.OPTION_VALUE_INCREMENT);\r\n+                break;\r\n+            case NATIVE:\r\n+                supported = context instanceof ClassMetaData;\r\n+                break;\r\n+        }\r\n+        if (!supported)\r\n+            throw new MetaDataException(_loc.get(\"unsupported-value-strategy\",\r\n+                context, getName(strategy), attributeName));\r\n+    }\r\n+}\r"},{"sha":"f87a4b3b139f08d44c2d9234d48036593cc63b1f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/package.html","status":"added","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/meta/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,11 @@\n+<html>\n+<body>\n+<p><strong>OpenJPA Metadata</strong></p>\n+\n+<p>\n+    This package provides an extendable framework for parsing and caching\n+    persistence metadata. The metadata can be accessed at both enhancement\n+    time and at runtime.\n+</p>\n+</body>\n+</html>"},{"sha":"f06265dea71ae3f9c493a90ac85293dc4bff4498","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","status":"added","additions":230,"deletions":0,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,230 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.commons.collections.map.IdentityMap;\r\n+import org.apache.commons.collections.set.MapBackedSet;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+/**\r\n+ * Base class that provides utilities to change trackers.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public abstract class AbstractChangeTracker implements ChangeTracker {\r\n+\r\n+    /**\r\n+     * Collection of added items. May be null.\r\n+     */\r\n+    protected Collection add = null;\r\n+\r\n+    /**\r\n+     * Collection of removed items. May be null.\r\n+     */\r\n+    protected Collection rem = null;\r\n+\r\n+    /**\r\n+     * Collection of changed items. May be null.\r\n+     */\r\n+    protected Collection change = null;\r\n+    // we need the configuration for context when figuring out if a type\r\n+    // is managed\r\n+    private final OpenJPAConfiguration _conf;\r\n+    private boolean _autoOff = true;\r\n+    private boolean _track = false;\r\n+    private Boolean _identity = null;\r\n+    private int _seq = -1;\r\n+\r\n+    /**\r\n+     * Constructor; supply configuration.\r\n+     */\r\n+    public AbstractChangeTracker(OpenJPAConfiguration conf) {\r\n+        _conf = conf;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether to automatically stop tracking when the number of changes\r\n+     * exceeds the container size. Defaults to true.\r\n+     */\r\n+    public boolean getAutoOff() {\r\n+        return _autoOff;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether to automatically stop tracking when the number of changes\r\n+     * exceeds the container size. Defaults to true.\r\n+     */\r\n+    public void setAutoOff(boolean autoOff) {\r\n+        _autoOff = autoOff;\r\n+    }\r\n+\r\n+    public boolean isTracking() {\r\n+        return _track;\r\n+    }\r\n+\r\n+    public void startTracking() {\r\n+        _track = true;\r\n+        if (_seq == -1)\r\n+            _seq = initialSequence();\r\n+        reset();\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the initial sequence value for this proxy. Typically this is\r\n+     * the container size. Assumes an unordered collection by default,\r\n+     * returning 0.\r\n+     */\r\n+    protected int initialSequence() {\r\n+        return 0;\r\n+    }\r\n+\r\n+    public void stopTracking() {\r\n+        _track = false;\r\n+        _seq = -1;\r\n+        reset();\r\n+    }\r\n+\r\n+    /**\r\n+     * Reset the state of the tracker.\r\n+     */\r\n+    protected void reset() {\r\n+        if (add != null)\r\n+            add.clear();\r\n+        if (rem != null)\r\n+            rem.clear();\r\n+        if (change != null)\r\n+            change.clear();\r\n+        _identity = null;\r\n+    }\r\n+\r\n+    public Collection getAdded() {\r\n+        return (add == null) ? Collections.EMPTY_LIST : add;\r\n+    }\r\n+\r\n+    public Collection getRemoved() {\r\n+        return (rem == null) ? Collections.EMPTY_LIST : rem;\r\n+    }\r\n+\r\n+    public Collection getChanged() {\r\n+        return (change == null) ? Collections.EMPTY_LIST : change;\r\n+    }\r\n+\r\n+    /**\r\n+     * Notify the tracker that the given object was added.\r\n+     */\r\n+    protected void added(Object val) {\r\n+        if (!_track)\r\n+            return;\r\n+        setIdentity(val);\r\n+        add(val);\r\n+    }\r\n+\r\n+    /**\r\n+     * Mark the given value as added.\r\n+     */\r\n+    protected abstract void add(Object val);\r\n+\r\n+    /**\r\n+     * Notify the tracker that the given object was removed.\r\n+     */\r\n+    protected void removed(Object val) {\r\n+        if (!_track)\r\n+            return;\r\n+        setIdentity(val);\r\n+        remove(val);\r\n+    }\r\n+\r\n+    /**\r\n+     * Mark the given value as removed.\r\n+     */\r\n+    protected abstract void remove(Object val);\r\n+\r\n+    /**\r\n+     * Notify the tracker that the given object was changed.\r\n+     */\r\n+    protected void changed(Object val) {\r\n+        if (!_track)\r\n+            return;\r\n+        setIdentity(val);\r\n+        change(val);\r\n+    }\r\n+\r\n+    /**\r\n+     * Mark the given value as changed.\r\n+     */\r\n+    protected abstract void change(Object val);\r\n+\r\n+    public int getNextSequence() {\r\n+        return _seq;\r\n+    }\r\n+\r\n+    public void setNextSequence(int seq) {\r\n+        _seq = seq;\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new set for storing adds/removes/changes. Takes into account\r\n+     * whether we need to use an identity set or standard set.\r\n+     */\r\n+    protected Set newSet() {\r\n+        if (_identity == Boolean.TRUE)\r\n+            return MapBackedSet.decorate(new IdentityMap());\r\n+        return new HashSet();\r\n+    }\r\n+\r\n+    /**\r\n+     * Set whether to use identity-based datastructures, and switch our current\r\n+     * datastructures appropriately if needed. We use identity structures for\r\n+     * PC types in case the user has coded them such that two objects with\r\n+     * different identities can compare equals().\r\n+     */\r\n+    private void setIdentity(Object val) {\r\n+        if (val == null || _identity != null)\r\n+            return;\r\n+        if (ImplHelper.isManagedType(val.getClass()))\r\n+            _identity = Boolean.TRUE;\r\n+        else _identity = Boolean.FALSE;\r\n+        add = switchStructure(add, _identity.booleanValue());\r\n+        rem = switchStructure(rem, _identity.booleanValue());\r\n+        change = switchStructure(change, _identity.booleanValue());\r\n+    }\r\n+\r\n+    /**\r\n+     * Switch from an identity structure to a standard one, or vice versa.\r\n+     */\r\n+    private static Collection switchStructure(Collection cur,\r\n+        boolean identity) {\r\n+        if (cur == null)\r\n+            return null;\r\n+        if (identity && cur instanceof HashSet) {\r\n+            if (cur.isEmpty())\r\n+                return null;\r\n+            Set replace = MapBackedSet.decorate(new IdentityMap());\r\n+            replace.addAll(cur);\r\n+            return replace;\r\n+        }\r\n+        if (!identity && !(cur instanceof HashSet) && cur instanceof Set) {\r\n+            if (cur.isEmpty())\r\n+                return null;\r\n+            return new HashSet(cur);\r\n+        }\r\n+        return cur;\r\n+    }\r\n+}\r\n+\r"},{"sha":"a1c726105bc0463dd6e8275ac7c463036d3e3cd9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyCollection.java","status":"added","additions":412,"deletions":0,"changes":412,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyCollection.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,412 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.NoSuchElementException;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.commons.collections.Predicate;\r\n+import org.apache.commons.collections.iterators.FilterIterator;\r\n+import org.apache.commons.collections.iterators.IteratorChain;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.util.Closeable;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * A collection proxy designed for collections backed by extremely large\r\n+ * result sets in which each call to {@link #iterator} may perform a database\r\n+ * query. Changes to the collection are tracked through a\r\n+ * {@link ChangeTracker}. This collection has the following limitations:\r\n+ * <ul>\r\n+ * <li>The <code>size</code> method may return {@link Integer#MAX_VALUE}.</li>\r\n+ * <li>The collection cannot contain duplicate elements.</li>\r\n+ * </ul>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public abstract class AbstractLRSProxyCollection\r\n+    implements Set, LRSProxy, Predicate, CollectionChangeTracker {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (AbstractLRSProxyCollection.class);\r\n+    private Class _elementType = null;\r\n+    private CollectionChangeTrackerImpl _ct = null;\r\n+    private OpenJPAStateManager _sm = null;\r\n+    private int _field = -1;\r\n+    private OpenJPAStateManager _origOwner = null;\r\n+    private int _origField = -1;\r\n+    private int _count = -1;\r\n+    private boolean _iterated = false;\r\n+\r\n+    /**\r\n+     * Constructor.\r\n+     *\r\n+     * @param elementType the allowed type of elements, or null for no\r\n+     *                    restrictions\r\n+     * @param ordered     true if this collection is ordered\r\n+     */\r\n+    public AbstractLRSProxyCollection(Class elementType, boolean ordered,\r\n+        OpenJPAConfiguration conf) {\r\n+        _elementType = elementType;\r\n+        _ct = new CollectionChangeTrackerImpl(this, false, ordered, conf);\r\n+        _ct.setAutoOff(false);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        // can't transfer ownership of an lrs proxy\r\n+        if (sm != null && _origOwner != null\r\n+            && (_origOwner != sm || _origField != field)) {\r\n+            throw new InvalidStateException(_loc.get(\"transfer-lrs\",\r\n+                _origOwner.getMetaData().getField(_origField)));\r\n+        }\r\n+        _sm = sm;\r\n+        _field = field;\r\n+        // keep track of original owner so we can detect transfer attempts\r\n+        if (sm != null) {\r\n+            _origOwner = sm;\r\n+            _origField = field;\r\n+        }\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return this;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        // used to store fields for rollback; we don't store lrs fields\r\n+        return null;\r\n+    }\r\n+\r\n+    public boolean add(Object o) {\r\n+        Proxies.assertAllowedType(o, _elementType);\r\n+        Proxies.dirty(this);\r\n+        _ct.added(o);\r\n+        return true;\r\n+    }\r\n+\r\n+    public boolean addAll(Collection all) {\r\n+        Proxies.dirty(this);\r\n+        boolean added = false;\r\n+        Object add;\r\n+        for (Iterator itr = all.iterator(); itr.hasNext();) {\r\n+            add = itr.next();\r\n+            Proxies.assertAllowedType(add, _elementType);\r\n+            _ct.added(add);\r\n+            added = true;\r\n+        }\r\n+        return added;\r\n+    }\r\n+\r\n+    public boolean remove(Object o) {\r\n+        if (!contains(o))\r\n+            return false;\r\n+        Proxies.dirty(this);\r\n+        Proxies.removed(this, o, false);\r\n+        _ct.removed(o);\r\n+        return true;\r\n+    }\r\n+\r\n+    public boolean removeAll(Collection all) {\r\n+        Proxies.dirty(this);\r\n+        boolean removed = false;\r\n+        Object rem;\r\n+        for (Iterator itr = all.iterator(); itr.hasNext();) {\r\n+            rem = itr.next();\r\n+            if (remove(rem)) {\r\n+                Proxies.removed(this, rem, false);\r\n+                _ct.removed(rem);\r\n+                removed = true;\r\n+            }\r\n+        }\r\n+        return removed;\r\n+    }\r\n+\r\n+    public boolean retainAll(Collection all) {\r\n+        if (all.isEmpty()) {\r\n+            clear();\r\n+            return true;\r\n+        }\r\n+        Proxies.dirty(this);\r\n+        Itr itr = (Itr) iterator();\r\n+        try {\r\n+            boolean removed = false;\r\n+            Object rem;\r\n+            while (itr.hasNext()) {\r\n+                rem = itr.next();\r\n+                if (!all.contains(rem)) {\r\n+                    Proxies.removed(this, rem, false);\r\n+                    _ct.removed(rem);\r\n+                    removed = true;\r\n+                }\r\n+            }\r\n+            return removed;\r\n+        }\r\n+        finally {\r\n+            itr.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        Itr itr = (Itr) iterator();\r\n+        try {\r\n+            Object rem;\r\n+            while (itr.hasNext()) {\r\n+                rem = itr.next();\r\n+                Proxies.removed(this, rem, false);\r\n+                _ct.removed(rem);\r\n+            }\r\n+        }\r\n+        finally {\r\n+            itr.close();\r\n+        }\r\n+    }\r\n+\r\n+    public boolean contains(Object o) {\r\n+        if (_elementType != null && !_elementType.isInstance(o))\r\n+            return false;\r\n+        if (_ct.getAdded().contains(o))\r\n+            return true;\r\n+        if (_ct.getRemoved().contains(o))\r\n+            return false;\r\n+        if (!has(o))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    public boolean containsAll(Collection all) {\r\n+        for (Iterator itr = all.iterator(); itr.hasNext();)\r\n+            if (!contains(itr.next()))\r\n+                return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    public Object[] toArray() {\r\n+        return asList().toArray();\r\n+    }\r\n+\r\n+    public Object[] toArray(Object[] a) {\r\n+        return asList().toArray(a);\r\n+    }\r\n+\r\n+    private List asList() {\r\n+        Itr itr = (Itr) iterator();\r\n+        try {\r\n+            List list = new ArrayList();\r\n+            while (itr.hasNext())\r\n+                list.add(itr.next());\r\n+            return list;\r\n+        }\r\n+        finally {\r\n+            itr.close();\r\n+        }\r\n+    }\r\n+\r\n+    public int size() {\r\n+        if (_count == -1)\r\n+            _count = count();\r\n+        if (_count == Integer.MAX_VALUE)\r\n+            return _count;\r\n+        return _count + _ct.getAdded().size() - _ct.getRemoved().size();\r\n+    }\r\n+\r\n+    public boolean isEmpty() {\r\n+        return size() == 0;\r\n+    }\r\n+\r\n+    public Iterator iterator() {\r\n+        _iterated = true;\r\n+        IteratorChain chain = new IteratorChain();\r\n+        chain.addIterator(new FilterIterator(itr(), this));\r\n+        // note have to copy _ct.getAdded to prevent concurrent mod errors\r\n+        chain.addIterator(new ArrayList(_ct.getAdded()).iterator());\r\n+        return new Itr(chain);\r\n+    }\r\n+\r\n+    /**\r\n+     * used in testing; we need to be able to make sure that OpenJPA does not\r\n+     * iterate lrs fields during standard crud operations\r\n+     */\r\n+    boolean isIterated() {\r\n+        return _iterated;\r\n+    }\r\n+\r\n+    /**\r\n+     * used in testing; we need to be able to make sure that OpenJPA does not\r\n+     * iterate lrs fields during standard crud operations\r\n+     */\r\n+    void setIterated(boolean it) {\r\n+        _iterated = it;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        return asList();\r\n+    }\r\n+\r\n+    /**\r\n+     * Implement this method to return an iterator over the contents of the\r\n+     * collection. This method may be invoked multiple times. The returned\r\n+     * iterator does not have to support the {@link Iterator#remove} method,\r\n+     * and may implement {@link org.apache.openjpa.lib.util.Closeable}.\r\n+     */\r\n+    protected abstract Iterator itr();\r\n+\r\n+    /**\r\n+     * Return whether the collection contains the given element.\r\n+     */\r\n+    protected abstract boolean has(Object o);\r\n+\r\n+    /**\r\n+     * Return the number of elements in the collection, or\r\n+     * {@link Integer#MAX_VALUE}.\r\n+     */\r\n+    protected abstract int count();\r\n+\r\n+    ////////////////////////////\r\n+    // Predicate Implementation\r\n+    ////////////////////////////\r\n+    public boolean evaluate(Object o) {\r\n+        return !_ct.getRemoved().contains(o);\r\n+    }\r\n+\r\n+    //////////////////////////////////////////\r\n+    // CollectionChangeTracker Implementation\r\n+    //////////////////////////////////////////\r\n+    public boolean isTracking() {\r\n+        return _ct.isTracking();\r\n+    }\r\n+\r\n+    public void startTracking() {\r\n+        _ct.startTracking();\r\n+        reset();\r\n+    }\r\n+\r\n+    public void stopTracking() {\r\n+        _ct.stopTracking();\r\n+        reset();\r\n+    }\r\n+\r\n+    private void reset() {\r\n+        if (_count != Integer.MAX_VALUE)\r\n+            _count = -1;\r\n+    }\r\n+\r\n+    public Collection getAdded() {\r\n+        return _ct.getAdded();\r\n+    }\r\n+\r\n+    public Collection getRemoved() {\r\n+        return _ct.getRemoved();\r\n+    }\r\n+\r\n+    public Collection getChanged() {\r\n+        return _ct.getChanged();\r\n+    }\r\n+\r\n+    public void added(Object val) {\r\n+        _ct.added(val);\r\n+    }\r\n+\r\n+    public void removed(Object val) {\r\n+        _ct.removed(val);\r\n+    }\r\n+\r\n+    public int getNextSequence() {\r\n+        return _ct.getNextSequence();\r\n+    }\r\n+\r\n+    public void setNextSequence(int seq) {\r\n+        _ct.setNextSequence(seq);\r\n+    }\r\n+\r\n+    /**\r\n+     * Wrapper around our filtering iterator chain.\r\n+     */\r\n+    private class Itr implements Iterator, Closeable {\r\n+\r\n+        private static final int OPEN = 0;\r\n+        private static final int LAST_ELEM = 1;\r\n+        private static final int CLOSED = 2;\r\n+        private final IteratorChain _itr;\r\n+        private Object _last = null;\r\n+        private int _state = OPEN;\r\n+\r\n+        public Itr(IteratorChain itr) {\r\n+            _itr = itr;\r\n+        }\r\n+\r\n+        public boolean hasNext() {\r\n+            if (_state == CLOSED)\r\n+                return false;\r\n+            // close automatically if no more elements\r\n+            if (!_itr.hasNext()) {\r\n+                free();\r\n+                _state = LAST_ELEM;\r\n+                return false;\r\n+            }\r\n+            return true;\r\n+        }\r\n+\r\n+        public Object next() {\r\n+            if (_state != OPEN)\r\n+                throw new NoSuchElementException();\r\n+            _last = _itr.next();\r\n+            return _last;\r\n+        }\r\n+\r\n+        public void remove() {\r\n+            if (_state == CLOSED || _last == null)\r\n+                throw new NoSuchElementException();\r\n+            Proxies.dirty(AbstractLRSProxyCollection.this);\r\n+            _ct.removed(_last);\r\n+            Proxies.removed(AbstractLRSProxyCollection.this, _last, false);\r\n+            _last = null;\r\n+        }\r\n+\r\n+        public void close() {\r\n+            free();\r\n+            _state = CLOSED;\r\n+        }\r\n+\r\n+        private void free() {\r\n+            if (_state != OPEN)\r\n+                return;\r\n+            List itrs = _itr.getIterators();\r\n+            Iterator itr;\r\n+            for (int i = 0; i < itrs.size(); i++) {\r\n+                itr = (Iterator) itrs.get(i);\r\n+                if (itr instanceof FilterIterator)\r\n+                    itr = ((FilterIterator) itr).getIterator();\r\n+                ImplHelper.close(itr);\r\n+            }\r\n+        }\r\n+\r\n+        protected void finalize() {\r\n+            close();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"6433fee391d5d98d689f10ce70057b28694326df","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyMap.java","status":"added","additions":504,"deletions":0,"changes":504,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,504 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.AbstractCollection;\r\n+import java.util.AbstractSet;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.NoSuchElementException;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.commons.collections.Predicate;\r\n+import org.apache.commons.collections.iterators.FilterIterator;\r\n+import org.apache.commons.collections.iterators.IteratorChain;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.util.Closeable;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * A map proxy designed for maps backed by extremely large result sets in\r\n+ * which each call to {@link #get} or {@link #containsKey} may perform a\r\n+ * database query. Changes to the map are tracked through a\r\n+ * {@link ChangeTracker}. This map has the following limitations:\r\n+ * <ul>\r\n+ * <li>The <code>size</code> method may return {@link Integer#MAX_VALUE}.</li>\r\n+ * <li>Null keys and values are not supported.</li>\r\n+ * </ul>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public abstract class AbstractLRSProxyMap\r\n+    implements Map, LRSProxy, MapChangeTracker, Predicate {\r\n+\r\n+    private static final int MODE_KEY = 0;\r\n+    private static final int MODE_VALUE = 1;\r\n+    private static final int MODE_ENTRY = 2;\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (AbstractLRSProxyMap.class);\r\n+    private Class _keyType = null;\r\n+    private Class _valueType = null;\r\n+    private MapChangeTrackerImpl _ct = null;\r\n+    private OpenJPAStateManager _sm = null;\r\n+    private int _field = -1;\r\n+    private OpenJPAStateManager _origOwner = null;\r\n+    private int _origField = -1;\r\n+    private Map _map = null;\r\n+    private int _count = -1;\r\n+    private boolean _iterated = false;\r\n+\r\n+    public AbstractLRSProxyMap(Class keyType, Class valueType,\r\n+        OpenJPAConfiguration conf) {\r\n+        _keyType = keyType;\r\n+        _valueType = valueType;\r\n+        _ct = new MapChangeTrackerImpl(this, conf);\r\n+        _ct.setAutoOff(false);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        // can't transfer ownership of an lrs proxy\r\n+        if (sm != null && _origOwner != null\r\n+            && (_origOwner != sm || _origField != field)) {\r\n+            throw new InvalidStateException(_loc.get(\"transfer-lrs\",\r\n+                _origOwner.getMetaData().getField(_origField)));\r\n+        }\r\n+        _sm = sm;\r\n+        _field = field;\r\n+        // keep track of original owner so we can detect transfer attempts\r\n+        if (sm != null) {\r\n+            _origOwner = sm;\r\n+            _origField = field;\r\n+        }\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return this;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        // used to store fields for rollbac; we don't store lrs fields\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * used in testing; we need to be able to make sure that OpenJPA does not\r\n+     * iterate lrs fields during standard crud operations\r\n+     */\r\n+    boolean isIterated() {\r\n+        return _iterated;\r\n+    }\r\n+\r\n+    /**\r\n+     * used in testing; we need to be able to make sure that OpenJPA does not\r\n+     * iterate lrs fields during standard crud operations\r\n+     */\r\n+    void setIterated(boolean it) {\r\n+        _iterated = it;\r\n+    }\r\n+\r\n+    public int size() {\r\n+        if (_count == -1)\r\n+            _count = count();\r\n+        if (_count == Integer.MAX_VALUE)\r\n+            return _count;\r\n+        return _count + _ct.getAdded().size() - _ct.getRemoved().size();\r\n+    }\r\n+\r\n+    public boolean isEmpty() {\r\n+        return size() == 0;\r\n+    }\r\n+\r\n+    public boolean containsKey(Object key) {\r\n+        if (_keyType != null && !_keyType.isInstance(key))\r\n+            return false;\r\n+        if (_map != null && _map.containsKey(key))\r\n+            return true;\r\n+        if (_ct.getTrackKeys()) {\r\n+            if (_ct.getRemoved().contains(key))\r\n+                return false;\r\n+            return hasKey(key);\r\n+        }\r\n+        // value tracking:\r\n+        // if we've removed values, we need to see if this key represents\r\n+        // a removed instance. otherwise we can rely on the 1-1 between\r\n+        // keys and values when using value tracking\r\n+        if (_ct.getRemoved().isEmpty())\r\n+            return hasKey(key);\r\n+        return get(key) != null;\r\n+    }\r\n+\r\n+    public boolean containsValue(Object val) {\r\n+        if (_valueType != null && !_valueType.isInstance(val))\r\n+            return false;\r\n+        if (_map != null && _map.containsValue(val))\r\n+            return true;\r\n+        if (!_ct.getTrackKeys()) {\r\n+            if (_ct.getRemoved().contains(val))\r\n+                return false;\r\n+            return hasValue(val);\r\n+        }\r\n+        // key tracking\r\n+        Collection keys = keys(val);\r\n+        if (keys == null || keys.isEmpty())\r\n+            return false;\r\n+        keys.removeAll(_ct.getRemoved());\r\n+        keys.removeAll(_ct.getChanged());\r\n+        return keys.size() > 0;\r\n+    }\r\n+\r\n+    public Object get(Object key) {\r\n+        if (_keyType != null && !_keyType.isInstance(key))\r\n+            return null;\r\n+        Object ret = (_map == null) ? null : _map.get(key);\r\n+        if (ret != null)\r\n+            return ret;\r\n+        if (_ct.getTrackKeys() && _ct.getRemoved().contains(key))\r\n+            return null;\r\n+        Object val = value(key);\r\n+        if (!_ct.getTrackKeys() && _ct.getRemoved().contains(val))\r\n+            return null;\r\n+        return val;\r\n+    }\r\n+\r\n+    public Object put(Object key, Object value) {\r\n+        Proxies.assertAllowedType(key, _keyType);\r\n+        Proxies.assertAllowedType(value, _valueType);\r\n+        Proxies.dirty(this);\r\n+        if (_map == null)\r\n+            _map = new HashMap();\r\n+        Object old = _map.put(key, value);\r\n+        if (old == null && (!_ct.getTrackKeys()\r\n+            || !_ct.getRemoved().contains(key)))\r\n+            old = value(key);\r\n+        if (old != null) {\r\n+            _ct.changed(key, old, value);\r\n+            Proxies.removed(this, old, false);\r\n+        } else _ct.added(key, value);\r\n+        return old;\r\n+    }\r\n+\r\n+    public void putAll(Map m) {\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = m.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            put(entry.getKey(), entry.getValue());\r\n+        }\r\n+    }\r\n+\r\n+    public Object remove(Object key) {\r\n+        Proxies.dirty(this);\r\n+        Object old = (_map == null) ? null : _map.remove(key);\r\n+        if (old == null && (!_ct.getTrackKeys()\r\n+            || !_ct.getRemoved().contains(key)))\r\n+            old = value(key);\r\n+        if (old != null) {\r\n+            _ct.removed(key, old);\r\n+            Proxies.removed(this, key, true);\r\n+            Proxies.removed(this, old, false);\r\n+        }\r\n+        return old;\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        Itr itr = iterator(MODE_ENTRY);\r\n+        try {\r\n+            Map.Entry entry;\r\n+            while (itr.hasNext()) {\r\n+                entry = (Map.Entry) itr.next();\r\n+                Proxies.removed(this, entry.getKey(), true);\r\n+                Proxies.removed(this, entry.getValue(), false);\r\n+                _ct.removed(entry.getKey(), entry.getValue());\r\n+            }\r\n+        }\r\n+        finally {\r\n+            itr.close();\r\n+        }\r\n+    }\r\n+\r\n+    public Set keySet() {\r\n+        return new AbstractSet() {\r\n+            public int size() {\r\n+                return AbstractLRSProxyMap.this.size();\r\n+            }\r\n+\r\n+            public boolean remove(Object o) {\r\n+                return AbstractLRSProxyMap.this.remove(o) != null;\r\n+            }\r\n+\r\n+            public Iterator iterator() {\r\n+                return AbstractLRSProxyMap.this.iterator(MODE_KEY);\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    public Collection values() {\r\n+        return new AbstractCollection() {\r\n+            public int size() {\r\n+                return AbstractLRSProxyMap.this.size();\r\n+            }\r\n+\r\n+            public Iterator iterator() {\r\n+                return AbstractLRSProxyMap.this.iterator(MODE_VALUE);\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    public Set entrySet() {\r\n+        return new AbstractSet() {\r\n+            public int size() {\r\n+                return AbstractLRSProxyMap.this.size();\r\n+            }\r\n+\r\n+            public Iterator iterator() {\r\n+                return AbstractLRSProxyMap.this.iterator(MODE_ENTRY);\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        Itr itr = iterator(MODE_ENTRY);\r\n+        try {\r\n+            Map map = new HashMap();\r\n+            Map.Entry entry;\r\n+            while (itr.hasNext()) {\r\n+                entry = (Map.Entry) itr.next();\r\n+                map.put(entry.getKey(), entry.getValue());\r\n+            }\r\n+            return map;\r\n+        }\r\n+        finally {\r\n+            itr.close();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return whether the given key exists in the map.\r\n+     */\r\n+    protected abstract boolean hasKey(Object key);\r\n+\r\n+    /**\r\n+     * Return whether the given value exists in the map.\r\n+     */\r\n+    protected abstract boolean hasValue(Object value);\r\n+\r\n+    /**\r\n+     * Return all keys for the given value.\r\n+     */\r\n+    protected abstract Collection keys(Object value);\r\n+\r\n+    /**\r\n+     * Return the value of the given key.\r\n+     */\r\n+    protected abstract Object value(Object key);\r\n+\r\n+    /**\r\n+     * Implement this method to return an iterator over the entries\r\n+     * in the map. Each returned object must implement the\r\n+     * <code>Map.Entry</code> interface. This method may be invoked multiple\r\n+     * times. The iterator does not have to support the\r\n+     * {@link Iterator#remove} method, and may implement\r\n+     * {@link org.apache.openjpa.lib.util.Closeable}.\r\n+     */\r\n+    protected abstract Iterator itr();\r\n+\r\n+    /**\r\n+     * Return the number of entries in the map, or {@link Integer#MAX_VALUE}.\r\n+     */\r\n+    protected abstract int count();\r\n+\r\n+    private Itr iterator(int mode) {\r\n+        _iterated = true;\r\n+        // have to copy the entry set of _map to prevent concurrent mod errors\r\n+        IteratorChain chain = new IteratorChain();\r\n+        if (_map != null)\r\n+            chain.addIterator(new ArrayList(_map.entrySet()).iterator());\r\n+        chain.addIterator(new FilterIterator(itr(), this));\r\n+        return new Itr(mode, chain);\r\n+    }\r\n+\r\n+    ////////////////////////////\r\n+    // Predicate Implementation\r\n+    ////////////////////////////\r\n+    public boolean evaluate(Object obj) {\r\n+        Map.Entry entry = (Map.Entry) obj;\r\n+        return (_ct.getTrackKeys()\r\n+            && !_ct.getRemoved().contains(entry.getKey())\r\n+            || (!_ct.getTrackKeys()\r\n+            && !_ct.getRemoved().contains(entry.getValue())))\r\n+            && (_map == null || !_map.containsKey(entry.getKey()));\r\n+    }\r\n+\r\n+    ///////////////////////////////////\r\n+    // MapChangeTracker Implementation\r\n+    ///////////////////////////////////\r\n+    public boolean isTracking() {\r\n+        return _ct.isTracking();\r\n+    }\r\n+\r\n+    public void startTracking() {\r\n+        _ct.startTracking();\r\n+        reset();\r\n+    }\r\n+\r\n+    public void stopTracking() {\r\n+        _ct.stopTracking();\r\n+        reset();\r\n+    }\r\n+\r\n+    private void reset() {\r\n+        if (_map != null)\r\n+            _map.clear();\r\n+        if (_count != Integer.MAX_VALUE)\r\n+            _count = -1;\r\n+    }\r\n+\r\n+    public boolean getTrackKeys() {\r\n+        return _ct.getTrackKeys();\r\n+    }\r\n+\r\n+    public void setTrackKeys(boolean keys) {\r\n+        _ct.setTrackKeys(keys);\r\n+    }\r\n+\r\n+    public Collection getAdded() {\r\n+        return _ct.getAdded();\r\n+    }\r\n+\r\n+    public Collection getRemoved() {\r\n+        return _ct.getRemoved();\r\n+    }\r\n+\r\n+    public Collection getChanged() {\r\n+        return _ct.getChanged();\r\n+    }\r\n+\r\n+    public void added(Object key, Object val) {\r\n+        _ct.added(key, val);\r\n+    }\r\n+\r\n+    public void removed(Object key, Object val) {\r\n+        _ct.removed(key, val);\r\n+    }\r\n+\r\n+    public void changed(Object key, Object orig, Object val) {\r\n+        _ct.changed(key, orig, val);\r\n+    }\r\n+\r\n+    public int getNextSequence() {\r\n+        return _ct.getNextSequence();\r\n+    }\r\n+\r\n+    public void setNextSequence(int seq) {\r\n+        _ct.setNextSequence(seq);\r\n+    }\r\n+\r\n+    /**\r\n+     * Wrapper around our filtering iterator chain.\r\n+     */\r\n+    private class Itr implements Iterator, Closeable {\r\n+\r\n+        private static final int OPEN = 0;\r\n+        private static final int LAST_ELEM = 1;\r\n+        private static final int CLOSED = 2;\r\n+        private final int _mode;\r\n+        private final IteratorChain _itr;\r\n+        private Map.Entry _last = null;\r\n+        private int _state = OPEN;\r\n+\r\n+        public Itr(int mode, IteratorChain itr) {\r\n+            _mode = mode;\r\n+            _itr = itr;\r\n+        }\r\n+\r\n+        public boolean hasNext() {\r\n+            if (_state != OPEN)\r\n+                return false;\r\n+            // close automatically if no more elements\r\n+            if (!_itr.hasNext()) {\r\n+                free();\r\n+                _state = LAST_ELEM;\r\n+                return false;\r\n+            }\r\n+            return true;\r\n+        }\r\n+\r\n+        public Object next() {\r\n+            if (_state != OPEN)\r\n+                throw new NoSuchElementException();\r\n+            _last = (Map.Entry) _itr.next();\r\n+            switch (_mode) {\r\n+                case MODE_KEY:\r\n+                    return _last.getKey();\r\n+                case MODE_VALUE:\r\n+                    return _last.getValue();\r\n+                default:\r\n+                    return _last;\r\n+            }\r\n+        }\r\n+\r\n+        public void remove() {\r\n+            if (_state == CLOSED || _last == null)\r\n+                throw new NoSuchElementException();\r\n+            Proxies.dirty(AbstractLRSProxyMap.this);\r\n+            Proxies.removed(AbstractLRSProxyMap.this, _last.getKey(), true);\r\n+            Proxies.removed(AbstractLRSProxyMap.this, _last.getValue(), false);\r\n+            // need to get a reference to the key before we remove it\r\n+            // from the map, since in JDK 1.3-, the act of removing an entry\r\n+            // from the map will also null the entry's value, which would\r\n+            // result in incorrectly passing a null to the change tracker\r\n+            Object key = _last.getKey();\r\n+            Object value = _last.getValue();\r\n+            if (_map != null)\r\n+                _map.remove(key);\r\n+            _ct.removed(key, value);\r\n+            _last = null;\r\n+        }\r\n+\r\n+        public void close() {\r\n+            free();\r\n+            _state = CLOSED;\r\n+        }\r\n+\r\n+        private void free() {\r\n+            if (_state != OPEN)\r\n+                return;\r\n+            List itrs = _itr.getIterators();\r\n+            Iterator itr;\r\n+            for (int i = 0; i < itrs.size(); i++) {\r\n+                itr = (Iterator) itrs.get(i);\r\n+                if (itr instanceof FilterIterator)\r\n+                    itr = ((FilterIterator) itr).getIterator();\r\n+                ImplHelper.close(itr);\r\n+            }\r\n+        }\r\n+\r\n+        protected void finalize() {\r\n+            close();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"a97f467cab77204a438be86f50a680495eaa086c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"added","additions":479,"deletions":0,"changes":479,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,479 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.lang.reflect.Field;\r\n+import java.lang.reflect.Method;\r\n+import java.lang.reflect.Modifier;\r\n+import java.util.Date;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.openjpa.enhance.FieldManager;\r\n+import org.apache.openjpa.enhance.PCRegistry;\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.kernel.ObjectIdStateManager;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.StoreManager;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.meta.ValueStrategies;\r\n+import serp.util.Numbers;\r\n+\r\n+/**\r\n+ * Utility class for manipulating application object ids.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ApplicationIds {\r\n+\r\n+    /**\r\n+     * Return the primary key values for the given object id. The values\r\n+     * will be returned in the same order as the metadata primary key fields.\r\n+     */\r\n+    public static Object[] toPKValues(Object oid, ClassMetaData meta) {\r\n+        if (meta == null)\r\n+            return null;\r\n+        Object[] pks;\r\n+        if (meta.isOpenJPAIdentity()) {\r\n+            pks = new Object[1];\r\n+            if (oid != null)\r\n+                pks[0] = ((OpenJPAId) oid).getIdObject();\r\n+            return pks;\r\n+        }\r\n+        // reset owning 'meta' to the owner of the primary key fields, because\r\n+        // the one passed in might be a proxy, like for embedded mappings;\r\n+        // since getPrimaryKeyFields is guaranteed to return the primary\r\n+        // keys in the order of inheritance, we are guaranteed that\r\n+        // the last element will be the most-derived class.\r\n+        FieldMetaData[] fmds = meta.getPrimaryKeyFields();\r\n+        meta = fmds[fmds.length - 1].getDeclaringMetaData();\r\n+        pks = new Object[fmds.length];\r\n+        if (oid == null)\r\n+            return pks;\r\n+        if (!Modifier.isAbstract(meta.getDescribedType().getModifiers())) {\r\n+            // copy fields from the oid\r\n+            PrimaryKeyFieldManager consumer = new PrimaryKeyFieldManager();\r\n+            consumer.setStore(pks);\r\n+            PCRegistry.copyKeyFieldsFromObjectId(meta.getDescribedType(),\r\n+                consumer, oid);\r\n+            return consumer.getStore();\r\n+        }\r\n+        // default to reflection\r\n+        if (meta.isObjectIdTypeShared())\r\n+            oid = ((ObjectId) oid).getId();\r\n+        Class oidType = oid.getClass();\r\n+        try {\r\n+            Field field;\r\n+            Method meth;\r\n+            for (int i = 0; i < fmds.length; i++) {\r\n+                if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD) {\r\n+                    field = oidType.getField(fmds[i].getName());\r\n+                    pks[i] = field.get(oid);\r\n+                } else { // property\r\n+                    meth = ImplHelper.getGetter(oidType, fmds[i].getName());\r\n+                    pks[i] = meth.invoke(oid, (Object[]) null);\r\n+                }\r\n+            }\r\n+            return pks;\r\n+        } catch (OpenJPAException ke) {\r\n+            throw ke;\r\n+        } catch (Throwable t) {\r\n+            throw new GeneralException(t);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a new object id constructed from the given primary key values.\r\n+     */\r\n+    public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\r\n+        if (meta == null || pks == null)\r\n+            return null;\r\n+        boolean convert = !meta.getRepository().getConfiguration().\r\n+            getCompatibilityInstance().getStrictIdentityValues();\r\n+        if (meta.isOpenJPAIdentity()) {\r\n+            int type = meta.getPrimaryKeyFields()[0].getDeclaredTypeCode();\r\n+            Object val = (convert) ? JavaTypes.convert(pks[0], type) : pks[0];\r\n+            switch (type) {\r\n+                case JavaTypes.BYTE:\r\n+                case JavaTypes.BYTE_OBJ:\r\n+                    if (!convert && !(val instanceof Byte))\r\n+                        throw new ClassCastException(\"!(x instanceof Byte)\");\r\n+                    return new ByteId(meta.getDescribedType(),\r\n+                        ((Number) val).byteValue());\r\n+                case JavaTypes.CHAR:\r\n+                case JavaTypes.CHAR_OBJ:\r\n+                    return new CharId(meta.getDescribedType(),\r\n+                        ((Character) val).charValue());\r\n+                case JavaTypes.INT:\r\n+                case JavaTypes.INT_OBJ:\r\n+                    if (!convert && !(val instanceof Integer))\r\n+                        throw new ClassCastException(\"!(x instanceof Byte)\");\r\n+                    return new IntId(meta.getDescribedType(),\r\n+                        ((Number) val).intValue());\r\n+                case JavaTypes.LONG:\r\n+                case JavaTypes.LONG_OBJ:\r\n+                    if (!convert && !(val instanceof Long))\r\n+                        throw new ClassCastException(\"!(x instanceof Byte)\");\r\n+                    return new LongId(meta.getDescribedType(),\r\n+                        ((Number) val).longValue());\r\n+                case JavaTypes.SHORT:\r\n+                case JavaTypes.SHORT_OBJ:\r\n+                    if (!convert && !(val instanceof Short))\r\n+                        throw new ClassCastException(\"!(x instanceof Byte)\");\r\n+                    return new ShortId(meta.getDescribedType(),\r\n+                        ((Number) val).shortValue());\r\n+                case JavaTypes.STRING:\r\n+                    return new StringId(meta.getDescribedType(), (String) val);\r\n+                case JavaTypes.DATE:\r\n+                    return new DateId(meta.getDescribedType(), (Date) val);\r\n+                case JavaTypes.OID:\r\n+                    return new ObjectId(meta.getDescribedType(), val);\r\n+                default:\r\n+                    throw new InternalException();\r\n+            }\r\n+        }\r\n+        // copy pks to oid\r\n+        if (!Modifier.isAbstract(meta.getDescribedType().getModifiers())) {\r\n+            Object oid = PCRegistry.newObjectId(meta.getDescribedType());\r\n+            PrimaryKeyFieldManager producer = new PrimaryKeyFieldManager();\r\n+            producer.setStore(pks);\r\n+            if (convert)\r\n+                producer.setMetaData(meta);\r\n+            PCRegistry.copyKeyFieldsToObjectId(meta.getDescribedType(),\r\n+                producer, oid);\r\n+            return oid;\r\n+        }\r\n+        // default to reflection\r\n+        Class oidType = meta.getObjectIdType();\r\n+        try {\r\n+            // create a new id\r\n+            Object copy = oidType.newInstance();\r\n+            // set each field\r\n+            FieldMetaData[] fmds = meta.getPrimaryKeyFields();\r\n+            Field field;\r\n+            Method meth;\r\n+            Class[] paramTypes = null;\r\n+            Object[] params = null;\r\n+            for (int i = 0; i < fmds.length; i++) {\r\n+                if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD) {\r\n+                    field = oidType.getField(fmds[i].getName());\r\n+                    field.set(copy, (convert) ? JavaTypes.convert(pks[i],\r\n+                        fmds[i].getDeclaredTypeCode()) : pks[i]);\r\n+                } else { // property\r\n+                    if (paramTypes == null)\r\n+                        paramTypes = new Class[1];\r\n+                    paramTypes[0] = fmds[i].getDeclaredType();\r\n+                    meth = oidType.getMethod(\"set\" + StringUtils.capitalize\r\n+                        (fmds[i].getName()), paramTypes);\r\n+                    if (params == null)\r\n+                        params = new Object[1];\r\n+                    params[0] = (convert) ? JavaTypes.convert(pks[i],\r\n+                        fmds[i].getDeclaredTypeCode()) : pks[i];\r\n+                    meth.invoke(copy, params);\r\n+                }\r\n+            }\r\n+            if (meta.isObjectIdTypeShared())\r\n+                copy = new ObjectId(meta.getDescribedType(), copy);\r\n+            return copy;\r\n+        } catch (Throwable t) {\r\n+            throw new GeneralException(t);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Copy the given oid value.\r\n+     */\r\n+    public static Object copy(Object oid, ClassMetaData meta) {\r\n+        if (meta == null || oid == null)\r\n+            return null;\r\n+        if (meta.isOpenJPAIdentity()) {\r\n+            // use meta type instead of oid type in case it's a subclass\r\n+            Class cls = meta.getDescribedType();\r\n+            OpenJPAId koid = (OpenJPAId) oid;\r\n+            FieldMetaData pk = meta.getPrimaryKeyFields()[0];\r\n+            switch (pk.getDeclaredTypeCode()) {\r\n+                case JavaTypes.BYTE:\r\n+                case JavaTypes.BYTE_OBJ:\r\n+                    return new ByteId(cls, ((ByteId) oid).getId(),\r\n+                        koid.hasSubclasses());\r\n+                case JavaTypes.CHAR:\r\n+                case JavaTypes.CHAR_OBJ:\r\n+                    return new CharId(cls, ((CharId) oid).getId(),\r\n+                        koid.hasSubclasses());\r\n+                case JavaTypes.INT:\r\n+                case JavaTypes.INT_OBJ:\r\n+                    return new IntId(cls, ((IntId) oid).getId(),\r\n+                        koid.hasSubclasses());\r\n+                case JavaTypes.LONG:\r\n+                case JavaTypes.LONG_OBJ:\r\n+                    return new LongId(cls, ((LongId) oid).getId(),\r\n+                        koid.hasSubclasses());\r\n+                case JavaTypes.SHORT:\r\n+                case JavaTypes.SHORT_OBJ:\r\n+                    return new ShortId(cls, ((ShortId) oid).getId(),\r\n+                        koid.hasSubclasses());\r\n+                case JavaTypes.STRING:\r\n+                    return new StringId(cls, oid.toString(),\r\n+                        koid.hasSubclasses());\r\n+                case JavaTypes.OID:\r\n+                    ClassMetaData embed = pk.getEmbeddedMetaData();\r\n+                    Object inner = koid.getIdObject();\r\n+                    if (embed != null)\r\n+                        inner = copy(inner, embed, embed.getFields());\r\n+                    return new ObjectId(cls, inner, koid.hasSubclasses());\r\n+                default:\r\n+                    throw new InternalException();\r\n+            }\r\n+        }\r\n+        // create a new pc instance of the right type, set its key fields\r\n+        // to the original oid values, then copy its key fields to a new\r\n+        // oid instance\r\n+        if (!Modifier.isAbstract(meta.getDescribedType().getModifiers())) {\r\n+            PersistenceCapable pc = PCRegistry.newInstance\r\n+                (meta.getDescribedType(), null, oid, false);\r\n+            Object copy = pc.pcNewObjectIdInstance();\r\n+            pc.pcCopyKeyFieldsToObjectId(copy);\r\n+            return copy;\r\n+        }\r\n+        Object copy =\r\n+            (!meta.isObjectIdTypeShared()) ? oid : ((ObjectId) oid).getId();\r\n+        copy = copy(copy, meta, meta.getPrimaryKeyFields());\r\n+        if (meta.isObjectIdTypeShared())\r\n+            copy = new ObjectId(meta.getDescribedType(), copy,\r\n+                ((OpenJPAId) oid).hasSubclasses());\r\n+        return copy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Copy the given identity object using reflection.\r\n+     */\r\n+    private static Object copy(Object oid, ClassMetaData meta,\r\n+        FieldMetaData[] fmds) {\r\n+        if (oid == null)\r\n+            return null;\r\n+        // default to using reflection\r\n+        Class oidType = oid.getClass();\r\n+        try {\r\n+            Object copy = oidType.newInstance();\r\n+            Field field;\r\n+            Method meth;\r\n+            String cap;\r\n+            Class[] paramTypes = null;\r\n+            Object[] params = null;\r\n+            for (int i = 0; i < fmds.length; i++) {\r\n+                if (fmds[i].getManagement() != FieldMetaData.MANAGE_PERSISTENT)\r\n+                    continue;\r\n+                if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD) {\r\n+                    field = oidType.getField(fmds[i].getName());\r\n+                    field.set(copy, field.get(oid));\r\n+                } else { // property\r\n+                    if (paramTypes == null)\r\n+                        paramTypes = new Class[1];\r\n+                    paramTypes[0] = fmds[i].getDeclaredType();\r\n+                    cap = StringUtils.capitalize(fmds[i].getName());\r\n+                    meth = oidType.getMethod(\"set\" + cap, paramTypes);\r\n+                    if (params == null)\r\n+                        params = new Object[1];\r\n+                    params[0] = ImplHelper.getGetter(oidType, cap).\r\n+                        invoke(oid, (Object[]) null);\r\n+                    meth.invoke(copy, params);\r\n+                }\r\n+            }\r\n+            return copy;\r\n+        } catch (OpenJPAException ke) {\r\n+            throw ke;\r\n+        } catch (Throwable t) {\r\n+            throw new GeneralException(t);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Generate an application id based on the current primary key field state\r\n+     * of the given instance.\r\n+     */\r\n+    public static Object create(PersistenceCapable pc, ClassMetaData meta) {\r\n+        if (pc == null)\r\n+            return null;\r\n+        Object oid = pc.pcNewObjectIdInstance();\r\n+        if (oid == null)\r\n+            return null;\r\n+        if (!meta.isOpenJPAIdentity()) {\r\n+            pc.pcCopyKeyFieldsToObjectId(oid);\r\n+            return oid;\r\n+        }\r\n+        FieldMetaData pk = meta.getPrimaryKeyFields()[0];\r\n+        if (pk.getDeclaredTypeCode() != JavaTypes.OID)\r\n+            return oid;\r\n+        // always copy oid object in case field value mutates or becomes\r\n+        // managed\r\n+        ObjectId objid = (ObjectId) oid;\r\n+        ClassMetaData embed = pk.getEmbeddedMetaData();\r\n+        objid.setId(copy(objid.getId(), embed, embed.getFields()));\r\n+        return objid;\r\n+    }\r\n+\r\n+    /**\r\n+     * Assign an application identity object to the given state, or return\r\n+     * false if determining the application identity requires a flush.\r\n+     */\r\n+    public static boolean assign(OpenJPAStateManager sm, StoreManager store,\r\n+        boolean preFlush) {\r\n+        ClassMetaData meta = sm.getMetaData();\r\n+        if (meta.getIdentityType() != ClassMetaData.ID_APPLICATION)\r\n+            throw new InternalException();\r\n+        boolean ret;\r\n+        FieldMetaData[] pks = meta.getPrimaryKeyFields();\r\n+        if (meta.isOpenJPAIdentity()\r\n+            && pks[0].getDeclaredTypeCode() == JavaTypes.OID) {\r\n+            OpenJPAStateManager oidsm = new ObjectIdStateManager\r\n+                (sm.fetchObjectField(pks[0].getIndex()), sm, pks[0]);\r\n+            ret = assign(oidsm, store, pks[0].getEmbeddedMetaData().\r\n+                getFields(), preFlush);\r\n+            sm.storeObjectField(pks[0].getIndex(), oidsm.getManagedInstance());\r\n+        } else ret = assign(sm, store, meta.getPrimaryKeyFields(), preFlush);\r\n+        if (!ret)\r\n+            return false;\r\n+        // base oid on field values\r\n+        sm.setObjectId(create(sm.getPersistenceCapable(), meta));\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Assign generated values to given fields.\r\n+     */\r\n+    private static boolean assign(OpenJPAStateManager sm, StoreManager store,\r\n+        FieldMetaData[] pks, boolean preFlush) {\r\n+        for (int i = 0; i < pks.length; i++)\r\n+            if (pks[i].getValueStrategy() != ValueStrategies.NONE\r\n+                && sm.isDefaultValue(pks[i].getIndex())\r\n+                && !store.assignField(sm, pks[i].getIndex(), preFlush))\r\n+                return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Helper class used to transfer pk values to/from application oids.\r\n+     */\r\n+    private static class PrimaryKeyFieldManager implements FieldManager {\r\n+\r\n+        private Object[] _store = null;\r\n+        private int _index = 0;\r\n+        private ClassMetaData _meta = null;\r\n+\r\n+        public void setMetaData(ClassMetaData meta) {\r\n+            _meta = meta;\r\n+        }\r\n+\r\n+        public Object[] getStore() {\r\n+            return _store;\r\n+        }\r\n+\r\n+        public void setStore(Object[] store) {\r\n+            _store = store;\r\n+        }\r\n+\r\n+        public void storeBooleanField(int field, boolean val) {\r\n+            store((val) ? Boolean.TRUE : Boolean.FALSE);\r\n+        }\r\n+\r\n+        public void storeByteField(int field, byte val) {\r\n+            store(new Byte(val));\r\n+        }\r\n+\r\n+        public void storeCharField(int field, char val) {\r\n+            store(new Character(val));\r\n+        }\r\n+\r\n+        public void storeShortField(int field, short val) {\r\n+            store(new Short(val));\r\n+        }\r\n+\r\n+        public void storeIntField(int field, int val) {\r\n+            store(Numbers.valueOf(val));\r\n+        }\r\n+\r\n+        public void storeLongField(int field, long val) {\r\n+            store(Numbers.valueOf(val));\r\n+        }\r\n+\r\n+        public void storeFloatField(int field, float val) {\r\n+            store(new Float(val));\r\n+        }\r\n+\r\n+        public void storeDoubleField(int field, double val) {\r\n+            store(new Double(val));\r\n+        }\r\n+\r\n+        public void storeStringField(int field, String val) {\r\n+            store(val);\r\n+        }\r\n+\r\n+        public void storeObjectField(int field, Object val) {\r\n+            store(val);\r\n+        }\r\n+\r\n+        public boolean fetchBooleanField(int field) {\r\n+            return (retrieve(field) == Boolean.TRUE) ? true : false;\r\n+        }\r\n+\r\n+        public char fetchCharField(int field) {\r\n+            return ((Character) retrieve(field)).charValue();\r\n+        }\r\n+\r\n+        public byte fetchByteField(int field) {\r\n+            return ((Number) retrieve(field)).byteValue();\r\n+        }\r\n+\r\n+        public short fetchShortField(int field) {\r\n+            return ((Number) retrieve(field)).shortValue();\r\n+        }\r\n+\r\n+        public int fetchIntField(int field) {\r\n+            return ((Number) retrieve(field)).intValue();\r\n+        }\r\n+\r\n+        public long fetchLongField(int field) {\r\n+            return ((Number) retrieve(field)).longValue();\r\n+        }\r\n+\r\n+        public float fetchFloatField(int field) {\r\n+            return ((Number) retrieve(field)).floatValue();\r\n+        }\r\n+\r\n+        public double fetchDoubleField(int field) {\r\n+            return ((Number) retrieve(field)).doubleValue();\r\n+        }\r\n+\r\n+        public String fetchStringField(int field) {\r\n+            return (String) retrieve(field);\r\n+        }\r\n+\r\n+        public Object fetchObjectField(int field) {\r\n+            return retrieve(field);\r\n+        }\r\n+\r\n+        private void store(Object val) {\r\n+            _store[_index++] = val;\r\n+        }\r\n+\r\n+        private Object retrieve(int field) {\r\n+            Object val = _store[_index++];\r\n+            if (_meta != null)\r\n+                val = JavaTypes.convert(val, _meta.getField(field).\r\n+                    getDeclaredTypeCode());\r\n+            return val;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"552498e2c54f69acf1ce2f8478af134034d3d638","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ArrayStateImage.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ArrayStateImage.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ArrayStateImage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ArrayStateImage.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.BitSet;\r\n+\r\n+import org.apache.commons.lang.ObjectUtils;\r\n+\r\n+/**\r\n+ * Utilities for dealing with a simple state image consisting of an\r\n+ * <code>Object[]</code> of field values with one extra index containing a\r\n+ * {@link BitSet} of loaded fields. This simplistic state image might be used\r\n+ * for optimistic versioning.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ArrayStateImage {\r\n+\r\n+    /**\r\n+     * Create a new state image for the given number of fields.\r\n+     */\r\n+    public static Object[] newImage(int numFields) {\r\n+        Object[] state = new Object[numFields + 1];\r\n+        state[numFields] = new BitSet(numFields);\r\n+        return state;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return true if the given version object appears to be an array state\r\n+     * image.\r\n+     */\r\n+    public static boolean isImage(Object obj) {\r\n+        if (!(obj instanceof Object[]))\r\n+            return false;\r\n+        Object[] arr = (Object[]) obj;\r\n+        return arr.length > 0 && arr[arr.length - 1] instanceof BitSet;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the loaded mask from a state image.\r\n+     */\r\n+    public static BitSet getLoaded(Object[] state) {\r\n+        return (BitSet) state[state.length - 1];\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the loaded mask into a state image.\r\n+     */\r\n+    public static void setLoaded(Object[] state, BitSet loaded) {\r\n+        state[state.length - 1] = loaded;\r\n+    }\r\n+\r\n+    /**\r\n+     * Clone a state array.\r\n+     */\r\n+    public static Object[] clone(Object[] state) {\r\n+        Object[] copy = new Object[state.length];\r\n+        System.arraycopy(state, 0, copy, 0, state.length - 1);\r\n+        BitSet loaded = (BitSet) state[state.length - 1];\r\n+        copy[copy.length - 1] = loaded.clone();\r\n+        return copy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return whether the given images are equivalent from an optimistic\r\n+     * locking perspective.\r\n+     */\r\n+    public static boolean sameVersion(Object[] state1, Object[] state2) {\r\n+        if (state1 == state2)\r\n+            return true;\r\n+        // if either state is null, then we report that it is the\r\n+        // same: this is because a null version will indicate that\r\n+        // there are no loaded fields in the version at all, which\r\n+        // indicates that there is nothing to compare\r\n+        if (state1 == null || state2 == null)\r\n+            return true;\r\n+        // check only the fields that are in the loaded set for the\r\n+        // first version\r\n+        BitSet loaded1 = getLoaded(state1);\r\n+        BitSet loaded2 = getLoaded(state2);\r\n+        for (int i = 0, max = loaded1.length(); i < max; i++) {\r\n+            if (loaded1.get(i) && loaded2.get(i)\r\n+                && !ObjectUtils.equals(state1[i], state2[i]))\r\n+                return false;\r\n+        }\r\n+        return true;\r\n+    }\r\n+}\r"},{"sha":"fc319dbe5184c766a55778879f215099edb2ad33","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ByteId.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ByteId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ByteId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ByteId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * {@link OpenJPAId} subclass appropriate for byte fields.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public final class ByteId extends OpenJPAId {\r\n+\r\n+    private final byte key;\r\n+\r\n+    public ByteId(Class cls, Byte key) {\r\n+        this(cls, (key == null) ? (byte) 0 : key.byteValue());\r\n+    }\r\n+\r\n+    public ByteId(Class cls, String key) {\r\n+        this(cls, (key == null) ? (byte) 0 : Byte.parseByte(key));\r\n+    }\r\n+\r\n+    public ByteId(Class cls, byte key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public ByteId(Class cls, byte key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public byte getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return new Byte(key);\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return Byte.toString(key);\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return key;\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId o) {\r\n+        return key == ((ByteId) o).key;\r\n+    }\r\n+}\r"},{"sha":"bccd7dc05e026f927a0676ea9961be07c78631cc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","status":"added","additions":626,"deletions":0,"changes":626,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,626 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.AbstractCollection;\r\n+import java.util.AbstractSet;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.commons.collections.Predicate;\r\n+import org.apache.commons.collections.iterators.FilterIterator;\r\n+import org.apache.commons.collections.iterators.IteratorChain;\r\n+import org.apache.openjpa.lib.util.LRUMap;\r\n+import org.apache.openjpa.lib.util.ReferenceHashMap;\r\n+import org.apache.openjpa.lib.util.ReferenceMap;\r\n+import org.apache.openjpa.lib.util.SizedMap;\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\r\n+import org.apache.openjpa.lib.util.concurrent.ReentrantLock;\r\n+\r\n+/**\r\n+ * Fixed-size map that has ability to pin/unpin entries and move overflow to\r\n+ * a backing soft map.\r\n+ *\r\n+ * @author Patrick Linskey\r\n+ * @author Abe White\r\n+ */\r\n+public class CacheMap implements Map {\r\n+\r\n+    /**\r\n+     * The map for non-expired and non-pinned references.\r\n+     */\r\n+    protected final SizedMap cacheMap;\r\n+\r\n+    /**\r\n+     * The map for expired references.\r\n+     */\r\n+    protected final SizedMap softMap;\r\n+\r\n+    /**\r\n+     * The set of objects pinned into the cache.\r\n+     */\r\n+    protected final Map pinnedMap;\r\n+    // number of pinned values(not including keys not mapped to values)\r\n+    private int _pinnedSize = 0;\r\n+    private final ReentrantLock _writeLock = new ReentrantLock();\r\n+    private final ReentrantLock _readLock;\r\n+\r\n+    /**\r\n+     * Create a non-LRU(and therefore highly concurrent) cache map with a\r\n+     * size of 1000.\r\n+     */\r\n+    public CacheMap() {\r\n+        this(false, 1000);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a cache map with the given properties.\r\n+     */\r\n+    public CacheMap(boolean lru, int max) {\r\n+        this(lru, max, max / 2, .75F);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a cache map with the given properties.\r\n+     */\r\n+    public CacheMap(boolean lru, int max, int size, float load) {\r\n+        if (size < 0)\r\n+            size = 500;\r\n+        if (!lru) {\r\n+            cacheMap = new ConcurrentHashMap(size, load) {\r\n+                public void overflowRemoved(Object key, Object value) {\r\n+                    cacheMapOverflowRemoved(key, value);\r\n+                }\r\n+            };\r\n+            softMap = new ConcurrentReferenceHashMap(ReferenceMap.HARD,\r\n+                ReferenceMap.SOFT, size, load) {\r\n+                public void overflowRemoved(Object key, Object value) {\r\n+                    softMapOverflowRemoved(key, value);\r\n+                }\r\n+\r\n+                public void valueExpired(Object key) {\r\n+                    softMapValueExpired(key);\r\n+                }\r\n+            };\r\n+            pinnedMap = new ConcurrentHashMap();\r\n+            _readLock = null;\r\n+        } else {\r\n+            cacheMap = new LRUMap(size, load) {\r\n+                public void overflowRemoved(Object key, Object value) {\r\n+                    cacheMapOverflowRemoved(key, value);\r\n+                }\r\n+            };\r\n+            softMap = new ReferenceHashMap(ReferenceMap.HARD,\r\n+                ReferenceMap.SOFT, size, load) {\r\n+                public void overflowRemoved(Object key, Object value) {\r\n+                    softMapOverflowRemoved(key, value);\r\n+                }\r\n+\r\n+                public void valueExpired(Object key) {\r\n+                    softMapValueExpired(key);\r\n+                }\r\n+            };\r\n+            pinnedMap = new HashMap();\r\n+            _readLock = _writeLock;\r\n+        }\r\n+        cacheMap.setMaxSize((max < 0) ? Integer.MAX_VALUE : max);\r\n+    }\r\n+\r\n+    /**\r\n+     * Called from {@link SizedMap#overflowRemoved} in the cache map.\r\n+     */\r\n+    protected void cacheMapOverflowRemoved(Object key, Object value) {\r\n+        if (softMap.size() < softMap.getMaxSize())\r\n+            put(softMap, key, value);\r\n+        else entryRemoved(key, value, true);\r\n+    }\r\n+\r\n+    /**\r\n+     * Called from {@link SizedMap#overflowRemoved} in the soft map.\r\n+     */\r\n+    protected void softMapOverflowRemoved(Object key, Object value) {\r\n+        entryRemoved(key, value, true);\r\n+    }\r\n+\r\n+    /**\r\n+     * Called when a value expires from the soft map.\r\n+     */\r\n+    protected void softMapValueExpired(Object key) {\r\n+        entryRemoved(key, null, true);\r\n+    }\r\n+\r\n+    /**\r\n+     * Put the given entry into the given map. Allows subclasses to\r\n+     * take additional actions.\r\n+     */\r\n+    protected Object put(Map map, Object key, Object value) {\r\n+        return map.put(key, value);\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove the given key from the given map. Allows subclasses to\r\n+     * take additional actions.\r\n+     */\r\n+    protected Object remove(Map map, Object key) {\r\n+        return map.remove(key);\r\n+    }\r\n+\r\n+    /**\r\n+     * Acquire read lock.\r\n+     */\r\n+    public void readLock() {\r\n+        if (_readLock != null)\r\n+            _readLock.lock();\r\n+    }\r\n+\r\n+    /**\r\n+     * Release read lock.\r\n+     */\r\n+    public void readUnlock() {\r\n+        if (_readLock != null)\r\n+            _readLock.unlock();\r\n+    }\r\n+\r\n+    /**\r\n+     * Acquire write lock.\r\n+     */\r\n+    public void writeLock() {\r\n+        _writeLock.lock();\r\n+    }\r\n+\r\n+    /**\r\n+     * Release write lock.\r\n+     */\r\n+    public void writeUnlock() {\r\n+        _writeLock.unlock();\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether this cache map uses LRU eviction.\r\n+     */\r\n+    public boolean isLRU() {\r\n+        return _readLock != null;\r\n+    }\r\n+\r\n+    /**\r\n+     * The maximum number of hard references to maintain, or -1 for no limit.\r\n+     */\r\n+    public void setCacheSize(int size) {\r\n+        writeLock();\r\n+        try {\r\n+            cacheMap.setMaxSize((size < 0) ? Integer.MAX_VALUE : size);\r\n+        }\r\n+        finally {\r\n+            writeUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * The maximum number of hard references to maintain, or -1 for no limit.\r\n+     */\r\n+    public int getCacheSize() {\r\n+        int max = cacheMap.getMaxSize();\r\n+        return (max == Integer.MAX_VALUE) ? -1 : max;\r\n+    }\r\n+\r\n+    /**\r\n+     * The maximum number of soft references to maintain, or -1 for no limit.\r\n+     */\r\n+    public void setSoftReferenceSize(int size) {\r\n+        writeLock();\r\n+        try {\r\n+            softMap.setMaxSize((size < 0) ? Integer.MAX_VALUE : size);\r\n+        }\r\n+        finally {\r\n+            writeUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * The maximum number of soft references to maintain, or -1 for no limit.\r\n+     */\r\n+    public int getSoftReferenceSize() {\r\n+        int max = softMap.getMaxSize();\r\n+        return (max == Integer.MAX_VALUE) ? -1 : max;\r\n+    }\r\n+\r\n+    /**\r\n+     * The keys pinned into the map.\r\n+     */\r\n+    public Set getPinnedKeys() {\r\n+        readLock();\r\n+        try {\r\n+            return Collections.unmodifiableSet(pinnedMap.keySet());\r\n+        }\r\n+        finally {\r\n+            readUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Locks the given key and its value into the map. Objects pinned into\r\n+     * the map are not counted towards the maximum cache size, and are never\r\n+     * evicted implicitly. You may pin keys for which no value is in the map.\r\n+     *\r\n+     * @return true if the givne key's value was pinned; false if no value\r\n+     *         for the given key is cached\r\n+     */\r\n+    public boolean pin(Object key) {\r\n+        writeLock();\r\n+        try {\r\n+            // if we don't have a pinned map we need to create one; else if the\r\n+            // pinned map already contains the key, nothing to do\r\n+            if (pinnedMap.containsKey(key))\r\n+                return pinnedMap.get(key) != null;\r\n+            // check other maps for key\r\n+            Object val = remove(cacheMap, key);\r\n+            if (val == null)\r\n+                val = remove(softMap, key);\r\n+            // pin key\r\n+            put(pinnedMap, key, val);\r\n+            if (val != null) {\r\n+                _pinnedSize++;\r\n+                return true;\r\n+            }\r\n+            return false;\r\n+        }\r\n+        finally {\r\n+            writeUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Undo a pinning.\r\n+     */\r\n+    public boolean unpin(Object key) {\r\n+        writeLock();\r\n+        try {\r\n+            Object val = remove(pinnedMap, key);\r\n+            if (val != null) {\r\n+                // put back into unpinned cache\r\n+                put(key, val);\r\n+                _pinnedSize--;\r\n+                return true;\r\n+            }\r\n+            return false;\r\n+        }\r\n+        finally {\r\n+            writeUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Invoked when a key-value pair is evicted from this data\r\n+     * structure. This is invoked with <code>expired</code> set to\r\n+     * <code>true</code> when an object is dropped because of space\r\n+     * requirements or through garbage collection of soft references.\r\n+     * It is invoked with <code>expired</code> set to <code>false</code>\r\n+     * when an object is explicitly removed via the {@link #remove} or\r\n+     * {@link #clear} methods. This may be invoked more than once for a\r\n+     * given entry.\r\n+     *\r\n+     * @param value may be null if the value was a soft reference that has\r\n+     *              been GCd\r\n+     * @since 2.5.0\r\n+     */\r\n+    protected void entryRemoved(Object key, Object value, boolean expired) {\r\n+    }\r\n+\r\n+    /**\r\n+     * Invoked when an entry is added to the cache. This may be invoked\r\n+     * more than once for an entry.\r\n+     */\r\n+    protected void entryAdded(Object key, Object value) {\r\n+    }\r\n+\r\n+    public Object get(Object key) {\r\n+        readLock();\r\n+        try {\r\n+            Object val = pinnedMap.get(key);\r\n+            if (val != null)\r\n+                return val;\r\n+            val = cacheMap.get(key);\r\n+            if (val == null) {\r\n+                // if we find the key in the soft map, move it back into\r\n+                // the primary map\r\n+                val = softMap.get(key);\r\n+                if (val != null)\r\n+                    put(key, val);\r\n+            }\r\n+            return val;\r\n+        }\r\n+        finally {\r\n+            readUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    public Object put(Object key, Object value) {\r\n+        writeLock();\r\n+        try {\r\n+            // if the key is pinned, just interact directly with the pinned map\r\n+            Object val;\r\n+            if (pinnedMap.containsKey(key)) {\r\n+                val = put(pinnedMap, key, value);\r\n+                if (val == null) {\r\n+                    _pinnedSize++;\r\n+                    entryAdded(key, value);\r\n+                } else {\r\n+                    entryRemoved(key, val, false);\r\n+                    entryAdded(key, value);\r\n+                }\r\n+                return val;\r\n+            }\r\n+            // if no hard refs, don't put anything\r\n+            if (cacheMap.getMaxSize() == 0)\r\n+                return null;\r\n+            // otherwise, put the value into the map and clear it from the\r\n+            // soft map\r\n+            val = put(cacheMap, key, value);\r\n+            if (val == null) {\r\n+                val = remove(softMap, key);\r\n+                if (val == null)\r\n+                    entryAdded(key, value);\r\n+                else {\r\n+                    entryRemoved(key, val, false);\r\n+                    entryAdded(key, value);\r\n+                }\r\n+            } else {\r\n+                entryRemoved(key, val, false);\r\n+                entryAdded(key, value);\r\n+            }\r\n+            return val;\r\n+        }\r\n+        finally {\r\n+            writeUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    public void putAll(Map map) {\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            put(entry.getKey(), entry.getValue());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * If <code>key</code> is pinned into the cache, the pin is\r\n+     * cleared and the object is removed.\r\n+     */\r\n+    public Object remove(Object key) {\r\n+        writeLock();\r\n+        try {\r\n+            // if the key is pinned, just interact directly with the\r\n+            // pinned map\r\n+            Object val;\r\n+            if (pinnedMap.containsKey(key)) {\r\n+                // re-put with null value; we still want key pinned\r\n+                val = put(pinnedMap, key, null);\r\n+                if (val != null) {\r\n+                    _pinnedSize--;\r\n+                    entryRemoved(key, val, false);\r\n+                }\r\n+                return val;\r\n+            }\r\n+            val = remove(cacheMap, key);\r\n+            if (val == null)\r\n+                val = softMap.remove(key);\r\n+            if (val != null)\r\n+                entryRemoved(key, val, false);\r\n+            return val;\r\n+        }\r\n+        finally {\r\n+            writeUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Removes pinned objects as well as unpinned ones.\r\n+     */\r\n+    public void clear() {\r\n+        writeLock();\r\n+        try {\r\n+            notifyEntryRemovals(pinnedMap.entrySet());\r\n+            pinnedMap.clear();\r\n+            _pinnedSize = 0;\r\n+            notifyEntryRemovals(cacheMap.entrySet());\r\n+            cacheMap.clear();\r\n+            notifyEntryRemovals(softMap.entrySet());\r\n+            softMap.clear();\r\n+        }\r\n+        finally {\r\n+            writeUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    private void notifyEntryRemovals(Set set) {\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = set.iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            if (entry.getValue() != null)\r\n+                entryRemoved(entry.getKey(), entry.getValue(), false);\r\n+        }\r\n+    }\r\n+\r\n+    public int size() {\r\n+        readLock();\r\n+        try {\r\n+            return _pinnedSize + cacheMap.size() + softMap.size();\r\n+        }\r\n+        finally {\r\n+            readUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    public boolean isEmpty() {\r\n+        return size() == 0;\r\n+    }\r\n+\r\n+    public boolean containsKey(Object key) {\r\n+        readLock();\r\n+        try {\r\n+            return pinnedMap.get(key) != null || cacheMap.containsKey(key)\r\n+                || softMap.containsKey(key);\r\n+        }\r\n+        finally {\r\n+            readUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    public boolean containsValue(Object val) {\r\n+        readLock();\r\n+        try {\r\n+            return pinnedMap.containsValue(val)\r\n+                || cacheMap.containsValue(val)\r\n+                || softMap.containsValue(val);\r\n+        }\r\n+        finally {\r\n+            readUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    public Set keySet() {\r\n+        return new KeySet();\r\n+    }\r\n+\r\n+    public Collection values() {\r\n+        return new ValueCollection();\r\n+    }\r\n+\r\n+    public Set entrySet() {\r\n+        return new EntrySet();\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        readLock();\r\n+        try {\r\n+            return \"CacheMap:\" + cacheMap.toString() + \"::\"\r\n+                + softMap.toString();\r\n+        }\r\n+        finally {\r\n+            readUnlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * View of the entry set.\r\n+     */\r\n+    private class EntrySet extends AbstractSet {\r\n+\r\n+        public int size() {\r\n+            return CacheMap.this.size();\r\n+        }\r\n+\r\n+        public boolean add(Object o) {\r\n+            Map.Entry entry = (Map.Entry) o;\r\n+            put(entry.getKey(), entry.getValue());\r\n+            return true;\r\n+        }\r\n+\r\n+        public Iterator iterator() {\r\n+            return new EntryIterator(EntryIterator.ENTRY);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * View of the key set.\r\n+     */\r\n+    private class KeySet extends AbstractSet {\r\n+\r\n+        public int size() {\r\n+            return CacheMap.this.size();\r\n+        }\r\n+\r\n+        public Iterator iterator() {\r\n+            return new EntryIterator(EntryIterator.KEY);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * View of the value collection.\r\n+     */\r\n+    private class ValueCollection extends AbstractCollection {\r\n+\r\n+        public int size() {\r\n+            return CacheMap.this.size();\r\n+        }\r\n+\r\n+        public Iterator iterator() {\r\n+            return new EntryIterator(EntryIterator.VALUE);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Iterator over all entries.\r\n+     */\r\n+    private class EntryIterator implements Iterator, Predicate {\r\n+\r\n+        public static final int ENTRY = 0;\r\n+        public static final int KEY = 1;\r\n+        public static final int VALUE = 2;\r\n+        private final IteratorChain _itr = new IteratorChain();\r\n+        private final int _type;\r\n+\r\n+        public EntryIterator(int type) {\r\n+            _type = type;\r\n+            _itr.addIterator(new FilterIterator(getView(pinnedMap), this));\r\n+            _itr.addIterator(getView(cacheMap));\r\n+            _itr.addIterator(getView(softMap));\r\n+        }\r\n+\r\n+        /**\r\n+         * Return an iterator over the appropriate view of the given map.\r\n+         */\r\n+        private Iterator getView(Map m) {\r\n+            if (m == null)\r\n+                return null;\r\n+            switch (_type) {\r\n+                case KEY:\r\n+                    return m.keySet().iterator();\r\n+                case VALUE:\r\n+                    return m.values().iterator();\r\n+                default:\r\n+                    return m.entrySet().iterator();\r\n+            }\r\n+        }\r\n+\r\n+        public boolean hasNext() {\r\n+            return _itr.hasNext();\r\n+        }\r\n+\r\n+        public Object next() {\r\n+            return _itr.next();\r\n+        }\r\n+\r\n+        public void remove() {\r\n+            _itr.remove();\r\n+        }\r\n+\r\n+        public boolean evaluate(Object obj) {\r\n+            switch (_type) {\r\n+                case ENTRY:\r\n+                    return ((Map.Entry) obj).getValue() != null;\r\n+                case VALUE:\r\n+                    return obj != null;\r\n+                default:\r\n+                    return true;\r\n+            }\r\n+        }\r\n+    }\r\n+}\r\n+\r"},{"sha":"6758517c0a565e6d1b4951a3537ebd740bf0f31c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CallbackException.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CallbackException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CallbackException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CallbackException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Exception type thrown when an error occurs in a callback.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @since 4.0\r\n+ */\r\n+public class CallbackException extends UserException {\r\n+\r\n+    public CallbackException() {\r\n+    }\r\n+\r\n+    public CallbackException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public CallbackException(String msg, Object failed) {\r\n+        super(msg);\r\n+        setFailedObject(failed);\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return CALLBACK;\r\n+    }\r\n+}\r"},{"sha":"7ee4f1aa8a7e517be0bf7229351460fa9c25a6d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ChangeTracker.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ChangeTracker.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ChangeTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ChangeTracker.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+/**\r\n+ * Interface for components that track changes to containers at a\r\n+ * fine-grained level. Proxies that use change trackers might have better\r\n+ * update performance than non-tracking proxies.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface ChangeTracker {\r\n+\r\n+    /**\r\n+     * Return true if this tracker has an up-to-date view of all the changes\r\n+     * to the container it is managing.\r\n+     */\r\n+    public boolean isTracking();\r\n+\r\n+    /**\r\n+     * Reset the state of the change tracker, and turn change tracking back\r\n+     * on if it has been disabled.\r\n+     */\r\n+    public void startTracking();\r\n+\r\n+    /**\r\n+     * Tell the tracker to stop tracking changes for its container.\r\n+     */\r\n+    public void stopTracking();\r\n+\r\n+    /**\r\n+     * Return the collection of values that need to be added to the managed\r\n+     * container.\r\n+     */\r\n+    public Collection getAdded();\r\n+\r\n+    /**\r\n+     * Return the set of values that need to be removed from the managed\r\n+     * container.\r\n+     */\r\n+    public Collection getRemoved();\r\n+\r\n+    /**\r\n+     * Return the set of elements that have changed. In maps, this marks a\r\n+     * possible change in value for a key. In collections, this marks an\r\n+     * element that has been removed and re-added.\r\n+     */\r\n+    public Collection getChanged();\r\n+\r\n+    /**\r\n+     * The next element sequence value for this proxy at load time.\r\n+     * If the data store keeps this proxy's data in sequence order but allows\r\n+     * holes for removed objects, the implementation can set the next\r\n+     * sequence at load time, then retrieve it and start from there for\r\n+     * added objects at flush time. This value is set back to 0 if the\r\n+     * proxy stops tracking changes. For ordered proxies, it is set to the\r\n+     * proxy's size when the proxy starts tracking changes again.\r\n+     */\r\n+    public int getNextSequence();\r\n+\r\n+    /**\r\n+     * The maximum element sequence value for this proxy at load time.\r\n+     * If the data store keeps this proxy's data in sequence order but allows\r\n+     * holes for removed objects, the implementation can set the next\r\n+     * sequence at load time, then retrieve it and start from there for\r\n+     * added objects at flush time. This value is set back to 0 if the\r\n+     * proxy stops tracking changes. For ordered proxies, it is set to the\r\n+     * proxy's size when the proxy starts tracking changes again.\r\n+     */\r\n+    public void setNextSequence(int seq);\r\n+}\r"},{"sha":"08bf0b091acb17899dfd6ca62ecb7404aa8d166c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CharId.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CharId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CharId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CharId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * {@link OpenJPAId} subclass appropriate for char fields.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public final class CharId extends OpenJPAId {\r\n+\r\n+    private final char key;\r\n+\r\n+    public CharId(Class cls, Character key) {\r\n+        this(cls, (key == null) ? (char) 0 : key.charValue());\r\n+    }\r\n+\r\n+    public CharId(Class cls, String key) {\r\n+        this(cls, (key == null) ? (char) 0 : key.charAt(0));\r\n+    }\r\n+\r\n+    public CharId(Class cls, char key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public CharId(Class cls, char key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public char getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return new Character(key);\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return String.valueOf(key);\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return key;\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId o) {\r\n+        return key == ((CharId) o).key;\r\n+    }\r\n+}\r"},{"sha":"b1ca69af5aa154355f5d2b64c87d04f51bb934ad","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolver.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolver.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolver.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import org.apache.openjpa.lib.util.MultiClassLoader;\r\n+\r\n+/**\r\n+ * Interface to customize the loading of classes under OpenJPA.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @author Abe White\r\n+ * @since 3.0\r\n+ */\r\n+public interface ClassResolver {\r\n+\r\n+    /**\r\n+     * Return a class loader that can be used to load classes and resources.\r\n+     * This can be a standard class loader, or a customized loader such\r\n+     * as a {@link MultiClassLoader}.\r\n+     *\r\n+     * @param contextClass the context class; may be null if no context class\r\n+     * @param envLoader    the thread's context class loader when the\r\n+     *                     persistence environment(i.e. broker)\r\n+     *                     was obtained; may be null if operating outside\r\n+     *                     the context of persistence environment\r\n+     */\r\n+    public ClassLoader getClassLoader(Class contextClass,\r\n+        ClassLoader envLoader);\r\n+}\r"},{"sha":"1f2b2feeff014edb84d7728749aef49b78a07f7a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import org.apache.openjpa.lib.util.MultiClassLoader;\r\n+\r\n+/**\r\n+ * Default class resolver implementation.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 3.0\r\n+ */\r\n+public class ClassResolverImpl implements ClassResolver {\r\n+\r\n+    public ClassLoader getClassLoader(Class contextClass,\r\n+        ClassLoader envLoader) {\r\n+        // get the context class' loader; if the class was loaded by the\r\n+        // bootstrap loader, use the system classloader in the hopes that\r\n+        // class.forName calls on it will find the bootstrap loader's cached\r\n+        // class(the bootstrap loader is the parent of the system loader)\r\n+        ClassLoader contextLoader = null;\r\n+        if (contextClass != null) {\r\n+            contextLoader = contextClass.getClassLoader();\r\n+            if (contextLoader == null)\r\n+                contextLoader = ClassLoader.getSystemClassLoader();\r\n+        }\r\n+        // if there is only one unique loader, just return it\r\n+        ClassLoader threadLoader = Thread.currentThread().\r\n+            getContextClassLoader();\r\n+        if ((contextLoader == null || contextLoader == threadLoader)\r\n+            && (envLoader == null || envLoader == threadLoader))\r\n+            return threadLoader;\r\n+        // construct a multi class loader that will delegate in the order\r\n+        // described in section 12.5 of the spec\r\n+        MultiClassLoader loader = new MultiClassLoader();\r\n+        if (contextLoader != null)\r\n+            loader.addClassLoader(contextLoader);\r\n+        loader.addClassLoader(threadLoader);\r\n+        if (envLoader != null)\r\n+            loader.addClassLoader(envLoader);\r\n+        return loader;\r\n+    }\r\n+}\r"},{"sha":"363e896de4758218dfafd36066ee0cc9b464f104","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTracker.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTracker.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTracker.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Change tracker that can be used for collections. If the user calls\r\n+ * any mutating methods on the collection that do not have an equivalent in\r\n+ * this change tracker, then you must call {@link #stopTracking} after\r\n+ * applying the operation to the collection.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface CollectionChangeTracker extends ChangeTracker {\r\n+\r\n+    /**\r\n+     * Record that the given element was added.\r\n+     */\r\n+    public void added(Object elem);\r\n+\r\n+    /**\r\n+     * Record that the given element was removed.\r\n+     */\r\n+    public void removed(Object elem);\r\n+}\r"},{"sha":"512dcc548d18270a8d661508f5d05999b8cf7bf7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+/**\r\n+ * Default {@link CollectionChangeTracker}.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class CollectionChangeTrackerImpl extends AbstractChangeTracker\r\n+    implements CollectionChangeTracker {\r\n+\r\n+    private final Collection _coll;\r\n+    private final boolean _dups;\r\n+    private final boolean _order;\r\n+\r\n+    /**\r\n+     * Constructor.\r\n+     *\r\n+     * @param coll  the collection to delegate to\r\n+     * @param dups  true if the collection allows duplicates, false otherwise\r\n+     * @param order true if the collection is ordered, false otherwise\r\n+     */\r\n+    public CollectionChangeTrackerImpl(Collection coll, boolean dups,\r\n+        boolean order, OpenJPAConfiguration conf) {\r\n+        super(conf);\r\n+        _coll = coll;\r\n+        _dups = dups;\r\n+        _order = order;\r\n+    }\r\n+\r\n+    public void added(Object elem) {\r\n+        super.added(elem);\r\n+    }\r\n+\r\n+    public void removed(Object elem) {\r\n+        super.removed(elem);\r\n+    }\r\n+\r\n+    protected int initialSequence() {\r\n+        if (_order)\r\n+            return _coll.size();\r\n+        return super.initialSequence();\r\n+    }\r\n+\r\n+    protected void add(Object elem) {\r\n+        if (rem == null || !rem.remove(elem)) {\r\n+            // after a point it's inefficient to keep tracking\r\n+            if (getAutoOff()\r\n+                && getAdded().size() + getRemoved().size() >= _coll.size())\r\n+                stopTracking();\r\n+            else {\r\n+                if (add == null) {\r\n+                    if (_dups || _order)\r\n+                        add = new ArrayList();\r\n+                    else add = newSet();\r\n+                }\r\n+                add.add(elem);\r\n+            }\r\n+        } else if (_order)\r\n+            stopTracking();\r\n+        else {\r\n+            if (change == null)\r\n+                change = newSet();\r\n+            change.add(elem);\r\n+        }\r\n+    }\r\n+\r\n+    protected void remove(Object elem) {\r\n+        // if the collection contains multiple copies of the elem, we can't\r\n+        // use change tracking because some back-ends can't just delete a\r\n+        // single copy of a elem\r\n+        if (_dups && getAutoOff() && _coll.contains(elem))\r\n+            stopTracking();\r\n+        else if (add == null || !add.remove(elem)) {\r\n+            // after a point it's inefficient to keep tracking\r\n+            if (getAutoOff()\r\n+                && getRemoved().size() + getAdded().size() >= _coll.size())\r\n+                stopTracking();\r\n+            else {\r\n+                if (rem == null)\r\n+                    rem = newSet();\r\n+                rem.add(elem);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    protected void change(Object elem) {\r\n+        throw new InternalException();\r\n+    }\r\n+}\r"},{"sha":"ff8b3a69e226f289ed85501edbcd913ee9b1bd66","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/DateId.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/DateId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/DateId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/DateId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Date;\r\n+\r\n+/**\r\n+ * {@link OpenJPAId} subclass appropriate for Date fields.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ */\r\n+public final class DateId extends OpenJPAId {\r\n+\r\n+    private final Date key;\r\n+\r\n+    public DateId(Class cls, String key) {\r\n+        this(cls, new Date(Long.parseLong(key)));\r\n+    }\r\n+\r\n+    public DateId(Class cls, Date key) {\r\n+        super(cls);\r\n+        this.key = key == null ? new Date(0) : key;\r\n+    }\r\n+\r\n+    public DateId(Class cls, java.sql.Date key) {\r\n+        this(cls, (Date) key);\r\n+    }\r\n+\r\n+    public DateId(Class cls, java.sql.Timestamp key) {\r\n+        this(cls, (Date) key);\r\n+    }\r\n+\r\n+    public DateId(Class cls, Date key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key == null ? new Date(0) : key;\r\n+    }\r\n+\r\n+    public Date getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return getId();\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return Long.toString(key.getTime());\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return key.hashCode();\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId o) {\r\n+        return key.equals(((DateId) o).key);\r\n+    }\r\n+}\r\n+\r"},{"sha":"514f571ca62e25f45b2d18b3f9374b0d43eb6245","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ExceptionInfo.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ExceptionInfo.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ExceptionInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ExceptionInfo.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Interface supplying additional exception information. All OpenJPA\r\n+ * exceptions implement this interface.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public interface ExceptionInfo {\r\n+\r\n+    public static final int GENERAL = 0;\r\n+    public static final int INTERNAL = 1;\r\n+    public static final int STORE = 2;\r\n+    public static final int UNSUPPORTED = 3;\r\n+    public static final int USER = 4;\r\n+\r\n+    /**\r\n+     * Exception message.\r\n+     *\r\n+     * @see Throwable#getMessage\r\n+     */\r\n+    public String getMessage();\r\n+\r\n+    /**\r\n+     * Returns the first {@link Throwable} from {@link #getNestedThrowables}\r\n+     * in order to conform to {@link Throwable#getCause} in Java 1.4+.\r\n+     *\r\n+     * @see Throwable#getCause\r\n+     */\r\n+    public Throwable getCause();\r\n+\r\n+    /**\r\n+     * Stack.\r\n+     *\r\n+     * @see Throwable#printStackTrace\r\n+     */\r\n+    public void printStackTrace();\r\n+\r\n+    /**\r\n+     * Exception type.\r\n+     */\r\n+    public int getType();\r\n+\r\n+    /**\r\n+     * Exception subtype.\r\n+     */\r\n+    public int getSubtype();\r\n+\r\n+    /**\r\n+     * Whether this error is fatal.\r\n+     */\r\n+    public boolean isFatal();\r\n+\r\n+    /**\r\n+     * The nested throwables.\r\n+     */\r\n+    public Throwable[] getNestedThrowables();\r\n+\r\n+    /**\r\n+     * The failed object.\r\n+     */\r\n+    public Object getFailedObject();\r\n+}\r\n+\r"},{"sha":"0406598c67512e5782b8d8a3cc3e427272ae32ba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"added","additions":227,"deletions":0,"changes":227,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,227 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.OutputStream;\r\n+import java.io.PrintStream;\r\n+import java.io.PrintWriter;\r\n+import java.io.Serializable;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAVersion;\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.lib.util.JavaVersions;\r\n+\r\n+/**\r\n+ * Utility methods for externalizing and handling exceptions.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @nojavadoc\r\n+ * @since 2.5\r\n+ */\r\n+public class Exceptions {\r\n+\r\n+    public static final Throwable[] EMPTY_THROWABLES = new Throwable[0];\r\n+    static final String SEP = System.getProperty(\"line.separator\");\r\n+    private static final OutputStream DEV_NULL = new OutputStream() {\r\n+        public void write(int b) {\r\n+        }\r\n+    };\r\n+\r\n+    /**\r\n+     * Test to see if the specified object will be able to be serialized. This\r\n+     * will check if the object implements {@link Serializable}, and if so,\r\n+     * will try to perform an actual serialization. This is in case the object\r\n+     * has fields which, in turn, are not serializable.\r\n+     *\r\n+     * @param ob the object to test\r\n+     * @return true if the object will be able to be serialized\r\n+     */\r\n+    private static boolean isSerializable(Object ob) {\r\n+        if (!(ob instanceof Serializable))\r\n+            return false;\r\n+        // don't serialize persistent objects exceptions to prevent\r\n+        // reading in all the state\r\n+        if (!ImplHelper.isManagedType(ob.getClass()))\r\n+            return false;\r\n+        // now do an actual test to see if we will be\r\n+        // able to perform the serialization\r\n+        try {\r\n+            new ObjectOutputStream(DEV_NULL).writeObject(ob);\r\n+            return true;\r\n+        } catch (Throwable t) {\r\n+            return false;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Safely stringify the given object.\r\n+     */\r\n+    public static String toString(Object ob) {\r\n+        if (ob == null)\r\n+            return \"null\";\r\n+        // don't take oid of new objects since it can cause a flush if auto-inc\r\n+        // and the id is meaningless anyway\r\n+        Object oid = getObjectId(ob);\r\n+        if (oid != null) {\r\n+            if (oid instanceof Id)\r\n+                return oid.toString();\r\n+            return ob.getClass().getName() + \"-\" + oid.toString();\r\n+        }\r\n+        if (ImplHelper.isManagedType(ob.getClass())) {\r\n+            // never call toString() on a PersistenceCapable, since\r\n+            // it may access persistent fields; fall-back to using\r\n+            // the standard object stringification mechanism. New\r\n+            // instances that use proxying(property-access instances,\r\n+            // for example) that were created with the 'new' keyword\r\n+            // will not end up in this code, which is ok since they\r\n+            // don't do lazy loading anyways, so they will stringify\r\n+            // safely.\r\n+            return ob.getClass().getName() + \"@\"\r\n+                + Integer.toHexString(System.identityHashCode(ob));\r\n+        }\r\n+        try {\r\n+            String s = ob.toString();\r\n+            if (s.indexOf(ob.getClass().getName()) == -1)\r\n+                s += \" [\" + ob.getClass().getName() + \"]\";\r\n+            return s;\r\n+        } catch (Throwable t) {\r\n+            return ob.getClass().getName();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Safely stringify the given objects.\r\n+     */\r\n+    public static String toString(Collection failed) {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        buf.append(\"[\");\r\n+        for (Iterator itr = failed.iterator(); itr.hasNext();) {\r\n+            buf.append(Exceptions.toString(itr.next()));\r\n+            if (itr.hasNext())\r\n+                buf.append(\", \");\r\n+        }\r\n+        buf.append(\"]\");\r\n+        return buf.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Stringify the given exception.\r\n+     */\r\n+    public static String toString(ExceptionInfo e) {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        buf.append(\"<\").append(e.getType()). append('|').append(e.isFatal()).\r\n+            append('|').append(OpenJPAVersion.VERSION_NUMBER). append(\"> \");\r\n+        buf.append(e.getClass().getName()).append(\": \").\r\n+            append(e.getMessage());\r\n+        Object failed = e.getFailedObject();\r\n+        if (failed != null)\r\n+            buf.append(SEP).append(\"FailedObject: \"). append(toString(failed));\r\n+        return buf.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Print the stack trace of the exception's nested throwables.\r\n+     */\r\n+    public static void printNestedThrowables(ExceptionInfo e, PrintStream out) {\r\n+        // if this is Java 1.4 and there is exactly a single\r\n+        // exception, then defer to 1.4's behavior of printing\r\n+        // out the result of getCause(). This deferral happens in\r\n+        // the calling code.\r\n+        Throwable[] nested = e.getNestedThrowables();\r\n+        int i = (JavaVersions.VERSION >= 4) ? 1 : 0;\r\n+        if (i < nested.length) {\r\n+            out.println(\"NestedThrowables:\");\r\n+            for (; i < nested.length; i++)\r\n+                nested[i].printStackTrace(out);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Print the stack trace of the exception's nested throwables.\r\n+     */\r\n+    public static void printNestedThrowables(ExceptionInfo e, PrintWriter out) {\r\n+        // if this is Java 1.4 and there is exactly a single\r\n+        // exception, then defer to 1.4's behavior of printing\r\n+        // out the result of getCause(). This deferral happens in\r\n+        // the calling code.\r\n+        Throwable[] nested = e.getNestedThrowables();\r\n+        int i = (JavaVersions.VERSION >= 4) ? 1 : 0;\r\n+        if (i < nested.length) {\r\n+            out.println(\"NestedThrowables:\");\r\n+            for (; i < nested.length; i++)\r\n+                nested[i].printStackTrace(out);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Convert the specified failed object into a serializable\r\n+     * object for when we are serializing an Exception. It will\r\n+     * try the following:\r\n+     * <ul>\r\n+     * <li>if the object can be serialized, return the object itself</li>\r\n+     * <li>if the object has a serializable oid, return the oid</li>\r\n+     * <li>if the object has a non-serializable oid, return the oid's\r\n+     * toString and the object class</li>\r\n+     * <li>return the object's toString</li>\r\n+     * </ul>\r\n+     *\r\n+     * @param ob the object to convert\r\n+     * @return some serialized representation of the object\r\n+     */\r\n+    public static Object replaceFailedObject(Object ob) {\r\n+        if (ob == null)\r\n+            return null;\r\n+        if (isSerializable(ob))\r\n+            return ob;\r\n+        // don't take oid of new objects since it can cause a flush if auto-inc\r\n+        // and the id is meaningless anyway\r\n+        Object oid = getObjectId(ob);\r\n+        if (oid != null && isSerializable(oid))\r\n+            return oid;\r\n+        // last ditch: stringify the object\r\n+        return toString(ob);\r\n+    }\r\n+\r\n+    /**\r\n+     * Convert the specified throwables into a serialzable array. If\r\n+     * any of the nested throwables cannot be serialized, they will\r\n+     * be converted into a Exception with the original message.\r\n+     */\r\n+    public static Throwable[] replaceNestedThrowables(Throwable[] nested) {\r\n+        if (nested == null || nested.length == 0)\r\n+            return nested;\r\n+        if (isSerializable(nested))\r\n+            return nested;\r\n+        Throwable[] newNested = new Throwable[nested.length];\r\n+        for (int i = 0; i < nested.length; i++) {\r\n+            if (isSerializable(nested[i]))\r\n+                newNested[i] = nested[i];\r\n+            else newNested[i] = new Exception(nested[i].toString());\r\n+        }\r\n+        return newNested;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the object id for <code>ob</code> if it has one, or\r\n+     * <code>null</code> otherwise.\r\n+     */\r\n+    private static Object getObjectId(Object ob) {\r\n+        if (ob instanceof PersistenceCapable\r\n+            && !((PersistenceCapable) ob).pcIsNew())\r\n+            return ((PersistenceCapable) ob).pcFetchObjectId();\r\n+        else return null;\r\n+    }\r\n+}\r"},{"sha":"9f3bb3f40a14c065d1068254f487eba64c3f2781","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * General exception type.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class GeneralException extends OpenJPAException {\r\n+\r\n+    public GeneralException() {\r\n+    }\r\n+\r\n+    public GeneralException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public GeneralException(Throwable cause) {\r\n+        super(cause);\r\n+    }\r\n+\r\n+    public GeneralException(String msg, Throwable cause) {\r\n+        super(msg, cause);\r\n+    }\r\n+\r\n+    public int getType() {\r\n+        return GENERAL;\r\n+    }\r\n+}\r"},{"sha":"8ae0ef30e94f132f5020b8deb8d5da51646ffa26","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,142 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import serp.util.Numbers;\r\n+\r\n+/**\r\n+ * Datastore identity type. Implementations may choose to use this type,\r\n+ * or choose to use their own datastore identity values.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public final class Id extends OpenJPAId {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage(Id.class);\r\n+    private final long _id;\r\n+\r\n+    /**\r\n+     * Create an id from the given type and value; the value might be an\r\n+     * id instnace, a stringified id, or a primary key value.\r\n+     */\r\n+    public static Id newInstance(Class cls, Object val) {\r\n+        if (val instanceof Id)\r\n+            return (Id) val;\r\n+        if (val instanceof String)\r\n+            return new Id(cls, (String) val);\r\n+        if (val instanceof Number)\r\n+            return new Id(cls, ((Number) val).longValue());\r\n+        if (val == null)\r\n+            return new Id(cls, 0L);\r\n+        throw new UserException(_loc.get(\"unknown-oid\", cls, val,\r\n+            val.getClass()));\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an id from the result of a {@link #toString} call on another\r\n+     * instance.\r\n+     */\r\n+    public Id(String str) {\r\n+        this(str, (ClassLoader) null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an id from the result of an {@link #toString} call on another\r\n+     * instance.\r\n+     */\r\n+    public Id(String str, OpenJPAConfiguration conf, ClassLoader brokerLoader) {\r\n+        this(str, (conf == null) ? brokerLoader : conf.\r\n+            getClassResolverInstance().getClassLoader(Id.class, brokerLoader));\r\n+    }\r\n+\r\n+    /**\r\n+     * Create an id from the result of an {@link #toString} call on another\r\n+     * instance.\r\n+     */\r\n+    public Id(String str, ClassLoader loader) {\r\n+        if (loader == null)\r\n+            loader = Thread.currentThread().getContextClassLoader();\r\n+        if (str == null)\r\n+            _id = 0L;\r\n+        else {\r\n+            int dash = str.indexOf('-');\r\n+            try {\r\n+                type = Class.forName(str.substring(0, dash), true, loader);\r\n+            } catch (Throwable t) {\r\n+                throw new UserException(_loc.get(\"string-id\", str), t);\r\n+            }\r\n+            _id = Long.parseLong(str.substring(dash + 1));\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Construct from the result of a {@link #toString} call on another\r\n+     * instance.\r\n+     */\r\n+    public Id(Class cls, String key) {\r\n+        super(cls);\r\n+        if (key == null)\r\n+            _id = 0L;\r\n+        else {\r\n+            // allow either stringified long or result of Id.toString\r\n+            int dash = key.indexOf('-');\r\n+            if (dash > 0) // don't check for -1; might be negative number\r\n+                key = key.substring(dash + 1);\r\n+            _id = Long.parseLong(key);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Construct from key value.\r\n+     */\r\n+    public Id(Class cls, Long key) {\r\n+        this(cls, (key == null) ? 0L : key.longValue());\r\n+    }\r\n+\r\n+    /**\r\n+     * Construct from key value.\r\n+     */\r\n+    public Id(Class cls, long key) {\r\n+        super(cls);\r\n+        _id = key;\r\n+    }\r\n+\r\n+    /**\r\n+     * Construct from key value.\r\n+     */\r\n+    public Id(Class cls, long key, boolean subs) {\r\n+        super(cls, subs);\r\n+        _id = key;\r\n+    }\r\n+\r\n+    /**\r\n+     * Primary key.\r\n+     */\r\n+    public long getId() {\r\n+        return _id;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return Numbers.valueOf(_id);\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return (int) (_id ^ (_id >>> 32));\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId other) {\r\n+        return _id == ((Id) other)._id;\r\n+    }\r\n+}\r"},{"sha":"d1f30544d989a61edce6e4a40bbe22e5ab73484c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"added","additions":260,"deletions":0,"changes":260,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,260 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Iterator;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.kernel.FetchState;\r\n+import org.apache.openjpa.kernel.LockManager;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.PCState;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.kernel.StoreManager;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Closeable;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.UUIDGenerator;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.meta.SequenceMetaData;\r\n+import org.apache.openjpa.meta.ValueStrategies;\r\n+import serp.util.Strings;\r\n+\r\n+/**\r\n+ * Helper for OpenJPA back-ends.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ * @since 3.0\r\n+ */\r\n+public class ImplHelper {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (ImplHelper.class);\r\n+\r\n+    /**\r\n+     * Return the getter method matching the given property name.\r\n+     */\r\n+    public static Method getGetter(Class cls, String prop) {\r\n+        prop = StringUtils.capitalize(prop);\r\n+        try {\r\n+            return cls.getMethod(\"get\" + prop, (Class[]) null);\r\n+        } catch (Exception e) {\r\n+            try {\r\n+                return cls.getMethod(\"is\" + prop, (Class[]) null);\r\n+            } catch (Exception e2) {\r\n+                throw new UserException(_loc.get(\"bad-getter\", cls,\r\n+                    prop)).setCause(e);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the setter method matching the given property name.\r\n+     */\r\n+    public static Method getSetter(Class cls, String prop) {\r\n+        Method getter = getGetter(cls, prop);\r\n+        prop = StringUtils.capitalize(prop);\r\n+        try {\r\n+            return cls.getMethod(\"set\" + prop,\r\n+                new Class[]{ getter.getReturnType() });\r\n+        } catch (Exception e) {\r\n+            throw new UserException(_loc.get(\"bad-setter\", cls, prop)).\r\n+                setCause(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Helper for store manager implementations. This method simply delegates\r\n+     * to the proper singular method for each state manager.\r\n+     *\r\n+     * @see StoreManager#loadAll\r\n+     * @since 4.0\r\n+     */\r\n+    public static Collection loadAll(Collection sms, StoreManager store,\r\n+        PCState state, int load, FetchState fetchState, Object context) {\r\n+        Collection failed = null;\r\n+        OpenJPAStateManager sm;\r\n+        FetchConfiguration fc;\r\n+        LockManager lm;\r\n+        for (Iterator itr = sms.iterator(); itr.hasNext();) {\r\n+            sm = (OpenJPAStateManager) itr.next();\r\n+            if (sm.getManagedInstance() == null) {\r\n+                if (!store.initialize(sm, state, fetchState, context))\r\n+                    failed = addFailedId(sm, failed);\r\n+            } else if (load != StoreManager.FORCE_LOAD_NONE\r\n+                || sm.getPCState() == PCState.HOLLOW) {\r\n+                fc = (load == StoreManager.FORCE_LOAD_ALL) ? null\r\n+                    : fetchState.getFetchConfiguration();\r\n+                lm = sm.getContext().getLockManager();\r\n+                if (!store.load(sm, sm.getUnloaded(fetchState),\r\n+                    fetchState, lm.getLockLevel(sm), context))\r\n+                    failed = addFailedId(sm, failed);\r\n+            } else if (!store.exists(sm, context))\r\n+                failed = addFailedId(sm, failed);\r\n+        }\r\n+        return (failed == null) ? Collections.EMPTY_LIST : failed;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add identity of given instance to collection.\r\n+     */\r\n+    private static Collection addFailedId(OpenJPAStateManager sm,\r\n+        Collection failed) {\r\n+        if (failed == null)\r\n+            failed = new ArrayList();\r\n+        failed.add(sm.getId());\r\n+        return failed;\r\n+    }\r\n+\r\n+    /**\r\n+     * Generate a value for the given metadata, or return null. Generates\r\n+     * values for hte following strategies: {@link ValueStrategies#SEQUENCE},\r\n+     * {@link ValueStrategies#UUID_STRING}, {@link ValueStrategies#UUID_HEX}\r\n+     */\r\n+    public static Object generateIdentityValue(StoreContext ctx,\r\n+        ClassMetaData meta, int typeCode) {\r\n+        return generateValue(ctx, meta, null, typeCode);\r\n+    }\r\n+\r\n+    /**\r\n+     * Generate a value for the given metadata, or return null. Generates\r\n+     * values for hte following strategies: {@link ValueStrategies#SEQUENCE},\r\n+     * {@link ValueStrategies#UUID_STRING}, {@link ValueStrategies#UUID_HEX}\r\n+     */\r\n+    public static Object generateFieldValue(StoreContext ctx,\r\n+        FieldMetaData fmd) {\r\n+        return generateValue(ctx, null, fmd, fmd.getDeclaredTypeCode());\r\n+    }\r\n+\r\n+    /**\r\n+     * Generate a value for the given metadaa.\r\n+     */\r\n+    private static Object generateValue(StoreContext ctx,\r\n+        ClassMetaData meta, FieldMetaData fmd, int typeCode) {\r\n+        int strategy = (fmd == null) ? meta.getIdentityStrategy()\r\n+            : fmd.getValueStrategy();\r\n+        switch (strategy) {\r\n+            case ValueStrategies.SEQUENCE:\r\n+                SequenceMetaData smd = (fmd == null)\r\n+                    ? meta.getIdentitySequenceMetaData()\r\n+                    : fmd.getValueSequenceMetaData();\r\n+                return JavaTypes.convert(smd.getInstance(ctx.getClassLoader()).\r\n+                    next(ctx, meta), typeCode);\r\n+            case ValueStrategies.UUID_STRING:\r\n+                return UUIDGenerator.nextString();\r\n+            case ValueStrategies.UUID_HEX:\r\n+                return UUIDGenerator.nextHex();\r\n+            default:\r\n+                return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the store-specific facade class for the given broker\r\n+     * component class. This method is used by facade implementations to\r\n+     * wrap store-specific components without knowing about all possible\r\n+     * back-ends.\r\n+     *\r\n+     * @param conf        configuration for runtime\r\n+     * @param openjpaCls  class of OpenJPA component(e.g.\r\n+     *                    JDBCFetchConfiguration.class)\r\n+     * @param openjpaSuff suffix of OpenJPA component(e.g. \"FetchConfiguration\")\r\n+     * @param facadePkg   the unqualified facade package name(e.g. \"jdo\")\r\n+     * @param facadeCls   the generic facade interface's class(e.g.\r\n+     *                    FetchPlan.class)\r\n+     * @param facadeSuff  the suffix to append to the store prefix to get\r\n+     *                    the implementation class name(e.g. \"FetchPlanImpl\")\r\n+     *                    or null to use the unqualified name of\r\n+     *                    <code>facadeCls</code>\r\n+     * @return the class formed by taking the top-most org.apache.openjpa.aaa package and\r\n+     *         BBBStoreManager name prefix from <code>storeCls</code> and\r\n+     *         combining them with the facade package ccc and suffix DDD to\r\n+     *         get: org.apache.openjpa.ccc.aaa.BBBDDD\r\n+     */\r\n+    public static Class getStoreFacadeType(OpenJPAConfiguration conf,\r\n+        Class openjpaCls, String openjpaSuff, String facadePkg, Class facadeCls,\r\n+        String facadeSuff) {\r\n+        String clsName = openjpaCls.getName();\r\n+        int dotIdx = clsName.lastIndexOf('.');\r\n+        int suffixIdx = clsName.indexOf(openjpaSuff, dotIdx + 1);\r\n+        if (!clsName.startsWith(\"org.apache.openjpa.\") || suffixIdx == -1)\r\n+            return null;\r\n+\r\n+        // extract 'xxx.' from org.apache.openjpa.xxx.yyy..., and XXX from XXXStoreManager\r\n+        String pkg = clsName.substring(5, clsName.indexOf('.', 5) + 1);\r\n+        String prefix = clsName.substring(dotIdx + 1, suffixIdx);\r\n+        // suffix of impl class name\r\n+        if (facadeSuff == null)\r\n+            facadeSuff = Strings.getClassName(facadeCls);\r\n+        clsName =\r\n+            \"org.apache.openjpa.\" + facadePkg + \".\" + pkg + prefix + facadeSuff;\r\n+        try {\r\n+            return Class.forName(clsName, true, facadeCls.getClassLoader());\r\n+        } catch (ClassNotFoundException ncfe) {\r\n+            Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\r\n+            if (log.isTraceEnabled())\r\n+                log.trace(_loc.get(\"no-store-exts\", clsName));\r\n+            return null;\r\n+        } catch (Exception e) {\r\n+            throw new InternalException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Close the given resource. The resource can be an extent iterator,\r\n+     * query result, large result set relation, or any closeable OpenJPA\r\n+     * component.\r\n+     */\r\n+    public static void close(Object o) {\r\n+        try {\r\n+            if (o instanceof Closeable)\r\n+                ((Closeable) o).close();\r\n+        } catch (RuntimeException re) {\r\n+            throw re;\r\n+        } catch (Exception e) {\r\n+            throw new GeneralException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns true if the specified class is a type that can be managed by\r\n+     * OpenJPA.\r\n+     *\r\n+     * @param type the class to test\r\n+     * @param conf the configuration that defines the current context\r\n+     * @return true if the class is manageable.\r\n+     */\r\n+    public static boolean isManagedType(Class type) {\r\n+        return PersistenceCapable.class.isAssignableFrom(type);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns true if the specified instance is manageable.\r\n+     *\r\n+     * @param instance the object to check\r\n+     * @return true if the instance is a persistent type, false otherwise\r\n+     */\r\n+    public static boolean isManageable(Object instance) {\r\n+        return instance instanceof PersistenceCapable;\r\n+    }\r\n+}\r"},{"sha":"3b8b5605f3ab5b56c83553c2d0055d8bba389d1b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import serp.util.Numbers;\r\n+\r\n+/**\r\n+ * {@link OpenJPAId} subclass appropriate for int fields.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public final class IntId extends OpenJPAId {\r\n+\r\n+    private final int key;\r\n+\r\n+    public IntId(Class cls, Integer key) {\r\n+        this(cls, (key == null) ? 0 : key.intValue());\r\n+    }\r\n+\r\n+    public IntId(Class cls, String key) {\r\n+        this(cls, (key == null) ? 0 : Integer.parseInt(key));\r\n+    }\r\n+\r\n+    public IntId(Class cls, int key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public IntId(Class cls, int key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return Numbers.valueOf(key);\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return String.valueOf(key);\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return key;\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId o) {\r\n+        return key == ((IntId) o).key;\r\n+    }\r\n+}\r"},{"sha":"c447d8edb45c43b35b9d7f14b523586344adfba6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/InternalException.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/InternalException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/InternalException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/InternalException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Exception type for internal errors.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 3.2\r\n+ */\r\n+public class InternalException extends OpenJPAException {\r\n+\r\n+    public InternalException() {\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public InternalException(String msg) {\r\n+        super(msg);\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public InternalException(Throwable cause) {\r\n+        super(cause);\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public InternalException(String msg, Throwable cause) {\r\n+        super(msg, cause);\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public int getType() {\r\n+        return INTERNAL;\r\n+    }\r\n+}\r"},{"sha":"54b9602337f18b76419033f58a174e93d2527195","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/InvalidStateException.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/InvalidStateException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/InvalidStateException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/InvalidStateException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Exception type thrown when attempting to execute an operation that\r\n+ * is not allowed by the current state.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public class InvalidStateException extends UserException {\r\n+\r\n+    public InvalidStateException() {\r\n+    }\r\n+\r\n+    public InvalidStateException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public InvalidStateException(String msg, Object failed) {\r\n+        super(msg);\r\n+        setFailedObject(failed);\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return INVALID_STATE;\r\n+    }\r\n+}\r"},{"sha":"9814f3f48a6a125c8a60d4fe78a39e0abc2f5499","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LRSProxy.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/LRSProxy.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/LRSProxy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LRSProxy.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Marker interface for large result set proxies.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 3.0.3\r\n+ */\r\n+public interface LRSProxy extends Proxy {\r\n+\r\n+}\r"},{"sha":"54c5a73ac90d1eb97575ae7fe87e5e700c0d4960","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Exception indicating that locks on one or more objects could not be acquired.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @since 3.1\r\n+ */\r\n+public class LockException extends StoreException {\r\n+\r\n+    private static final transient Localizer _loc = Localizer.forPackage\r\n+        (LockException.class);\r\n+    private int timeout = -1;\r\n+\r\n+    public LockException() {\r\n+    }\r\n+\r\n+    public LockException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public LockException(Object failed) {\r\n+        super(_loc.get(\"lock-failed\", Exceptions.toString(failed)));\r\n+        setFailedObject(failed);\r\n+    }\r\n+\r\n+    public LockException(Object failed, int timeout) {\r\n+        super(_loc.get(\"lock-timeout\", Exceptions.toString(failed),\r\n+            String.valueOf(timeout)));\r\n+        setFailedObject(failed);\r\n+        setTimeout(timeout);\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return LOCK;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of milliseconds to wait for a lock.\r\n+     */\r\n+    public int getTimeout() {\r\n+        return timeout;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of milliseconds to wait for a lock.\r\n+     */\r\n+    public LockException setTimeout(int timeout) {\r\n+        this.timeout = timeout;\r\n+        return this;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        String str = super.toString();\r\n+        if (timeout < 0)\r\n+            return str;\r\n+        return str + Exceptions.SEP + \"Timeout: \" + timeout;\r\n+    }\r\n+\r\n+    private void writeObject(ObjectOutputStream out) throws IOException {\r\n+        out.writeInt(timeout);\r\n+    }\r\n+\r\n+    private void readObject(ObjectInputStream in)\r\n+        throws IOException, ClassNotFoundException {\r\n+        timeout = in.readInt();\r\n+    }\r\n+}\r"},{"sha":"d32a8f43a5579f3e4185f5924e48364fcc80e9cd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import serp.util.Numbers;\r\n+\r\n+/**\r\n+ * {@link OpenJPAId} subclass appropriate for long fields.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public final class LongId extends OpenJPAId {\r\n+\r\n+    private final long key;\r\n+\r\n+    public LongId(Class cls, Long key) {\r\n+        this(cls, (key == null) ? 0L : key.longValue());\r\n+    }\r\n+\r\n+    public LongId(Class cls, String key) {\r\n+        this(cls, (key == null) ? 0L : Long.parseLong(key));\r\n+    }\r\n+\r\n+    public LongId(Class cls, long key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public LongId(Class cls, long key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return Numbers.valueOf(key);\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return (int) (key ^ (key >>> 32));\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId o) {\r\n+        return key == ((LongId) o).key;\r\n+    }\r\n+}\r"},{"sha":"aed5ce393270cceab00409ed175476ffb046bb7d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTracker.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTracker.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTracker.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Change tracker that can be used for maps. If the user calls\r\n+ * any mutating methods on the map that do not have an equivalent in\r\n+ * this change tracker, then you must call {@link #stopTracking} after\r\n+ * applying the operation to the map. The collections returned from\r\n+ * {@link ChangeTracker#getAdd} and {@link ChangeTracker#getRemove} will\r\n+ * be collections of keys to add/remove.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface MapChangeTracker extends ChangeTracker {\r\n+\r\n+    /**\r\n+     * Whether to track keys or values. Defaults to keys.\r\n+     * If you set to values, it is assumed there is a 1-1 correlation\r\n+     * between keys and values in this map.\r\n+     */\r\n+    public boolean getTrackKeys();\r\n+\r\n+    /**\r\n+     * Whether to track keys or values. Defaults to keys.\r\n+     * If you set to values, it is assumed there is a 1-1 correlation\r\n+     * between keys and values in this map.\r\n+     */\r\n+    public void setTrackKeys(boolean keys);\r\n+\r\n+    /**\r\n+     * Record that the given entry was added to the map.\r\n+     */\r\n+    public void added(Object key, Object val);\r\n+\r\n+    /**\r\n+     * Record that the given entry was removed from the map.\r\n+     */\r\n+    public void removed(Object key, Object val);\r\n+\r\n+    /**\r\n+     * Record that the given entry was altered.\r\n+     */\r\n+    public void changed(Object key, Object oldVal, Object newVal);\r\n+}\r"},{"sha":"52cb7aba98635949cf61087b7708bde248bcceb1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,124 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+/**\r\n+ * Default {@link MapChangeTracker}.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class MapChangeTrackerImpl extends AbstractChangeTracker\r\n+    implements MapChangeTracker {\r\n+\r\n+    private final Map _map;\r\n+    private boolean _keys = true;\r\n+\r\n+    /**\r\n+     * Constructor; supply delegate map.\r\n+     */\r\n+    public MapChangeTrackerImpl(Map map, OpenJPAConfiguration conf) {\r\n+        super(conf);\r\n+        _map = map;\r\n+    }\r\n+\r\n+    public boolean getTrackKeys() {\r\n+        return _keys;\r\n+    }\r\n+\r\n+    public void setTrackKeys(boolean keys) {\r\n+        _keys = keys;\r\n+    }\r\n+\r\n+    public void added(Object key, Object val) {\r\n+        if (_keys)\r\n+            super.added(key);\r\n+        else super.added(val);\r\n+    }\r\n+\r\n+    public void removed(Object key, Object val) {\r\n+        if (_keys)\r\n+            super.removed(key);\r\n+        else super.removed(val);\r\n+    }\r\n+\r\n+    public void changed(Object key, Object oldVal, Object newVal) {\r\n+        if (_keys)\r\n+            super.changed(key);\r\n+        else {\r\n+            super.removed(oldVal);\r\n+            super.added(newVal);\r\n+        }\r\n+    }\r\n+\r\n+    protected void add(Object obj) {\r\n+        // if the key was previously removed and now added back, mark\r\n+        // it as a change; otherwise it's a new addition\r\n+        if (rem != null && rem.remove(obj)) {\r\n+            if (change == null)\r\n+                change = newSet();\r\n+            change.add(obj);\r\n+        } else {\r\n+            // after a point it becomes inefficient to track changes\r\n+            if (getAutoOff() && getAdded().size() + getChanged().size()\r\n+                + getRemoved().size() >= _map.size())\r\n+                stopTracking();\r\n+            else {\r\n+                if (add == null)\r\n+                    add = newSet();\r\n+                add.add(obj);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    protected void remove(Object obj) {\r\n+        // no longer a change, if it was before\r\n+        if (change != null)\r\n+            change.remove(obj);\r\n+        // if it was a new addition, just forget it; otherwise remember\r\n+        // that it was removed\r\n+        if (add == null || !add.remove(obj)) {\r\n+            // after a point it becomes inefficient to track changes\r\n+            if (getAutoOff() && getAdded().size() + getChanged().size()\r\n+                + getRemoved().size() >= _map.size())\r\n+                stopTracking();\r\n+            else {\r\n+                if (rem == null)\r\n+                    rem = newSet();\r\n+                rem.add(obj);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    protected void change(Object key) {\r\n+        // if the key is already changed or the key is newly added, nothing\r\n+        // to do\r\n+        if ((change != null && change.contains(key))\r\n+            || (add != null && add.contains(key)))\r\n+            return;\r\n+        // after a point it becomes inefficient to track changes\r\n+        if (getAutoOff() && getAdded().size() + getChanged().size()\r\n+            + getRemoved().size() >= _map.size())\r\n+            stopTracking();\r\n+        else {\r\n+            // record the change\r\n+            if (change == null)\r\n+                change = newSet();\r\n+            change.add(key);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"ba0a8cbce1d4b8bb51f96fdba4a2af8797c24a61","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Exception type reserved for missing or invalid metadata.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 3.0\r\n+ */\r\n+public class MetaDataException extends UserException {\r\n+\r\n+    public MetaDataException() {\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public MetaDataException(String msg) {\r\n+        super(msg);\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public MetaDataException(String msg, Object failed) {\r\n+        super(msg);\r\n+        setFatal(true);\r\n+        setFailedObject(failed);\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return METADATA;\r\n+    }\r\n+}\r"},{"sha":"f276b61ba1c70772f350fc0dc516b19ef98c06d4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import org.apache.openjpa.lib.util.MultiClassLoader;\r\n+\r\n+/**\r\n+ * A simple {@link ClassResolver} that uses multiple class loaders to\r\n+ * resolve classes.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class MultiLoaderClassResolver implements ClassResolver {\r\n+\r\n+    final private MultiClassLoader _loader = new MultiClassLoader();\r\n+\r\n+    public MultiLoaderClassResolver() {\r\n+    }\r\n+\r\n+    public MultiLoaderClassResolver(ClassLoader[] loaders) {\r\n+        for (int i = 0; i < loaders.length; i++)\r\n+            _loader.addClassLoader(loaders[i]);\r\n+    }\r\n+\r\n+    public boolean addClassLoader(ClassLoader loader) {\r\n+        return _loader.addClassLoader(loader);\r\n+    }\r\n+\r\n+    public ClassLoader getClassLoader(Class ctx, ClassLoader envLoader) {\r\n+        return _loader;\r\n+    }\r\n+}\r"},{"sha":"55dab829ecab6e0ff15fbe1664a9982bf46df65e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/NoTransactionException.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoTransactionException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoTransactionException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoTransactionException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Exception type thrown when attempting a transactional operation without\r\n+ * an active transaction.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public class NoTransactionException extends InvalidStateException {\r\n+\r\n+    public NoTransactionException() {\r\n+    }\r\n+\r\n+    public NoTransactionException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public NoTransactionException(String msg, Object failed) {\r\n+        super(msg);\r\n+        setFailedObject(failed);\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return NO_TRANSACTION;\r\n+    }\r\n+}\r"},{"sha":"a46c85d3a719eb41067bf2615c6e6ef0d6505d5b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Exception type reserved for conflicts with existing objects.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class ObjectExistsException extends StoreException {\r\n+\r\n+    private static final transient Localizer _loc = Localizer.forPackage\r\n+        (ObjectExistsException.class);\r\n+\r\n+    public ObjectExistsException() {\r\n+    }\r\n+\r\n+    public ObjectExistsException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public ObjectExistsException(Object failed) {\r\n+        super(_loc.get(\"obj-exists\", Exceptions.toString(failed)));\r\n+        setFailedObject(failed);\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return OBJECT_EXISTS;\r\n+    }\r\n+}\r\n+\r"},{"sha":"cb350c2f1a868bee7beb234c629a869232c1fa68","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectId.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Identity type appropriate for object primary key fields and shared\r\n+ * id classes.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public final class ObjectId extends OpenJPAId {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage(ObjectId.class);\r\n+    private Object _key;\r\n+\r\n+    public ObjectId(Class cls, Object key) {\r\n+        super(cls);\r\n+        _key = key;\r\n+    }\r\n+\r\n+    public ObjectId(Class cls, Object key, boolean subs) {\r\n+        super(cls, subs);\r\n+        _key = key;\r\n+    }\r\n+\r\n+    public Object getId() {\r\n+        return _key;\r\n+    }\r\n+\r\n+    /**\r\n+     * Allow utilities in this package to mutate id.\r\n+     */\r\n+    void setId(Object id) {\r\n+        _key = id;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return _key;\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return (_key == null) ? 0 : _key.hashCode();\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId o) {\r\n+        Object key = ((ObjectId) o)._key;\r\n+        return (_key == null) ? key == null : _key.equals(key);\r\n+    }\r\n+}\r"},{"sha":"cd27bfdf4086d4084e70d42fa551ca2a5733ce54","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectNotFoundException.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectNotFoundException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectNotFoundException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectNotFoundException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Exception type reserved for failed object lookups.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class ObjectNotFoundException extends StoreException {\r\n+\r\n+    private static final transient Localizer _loc = Localizer.forPackage\r\n+        (ObjectNotFoundException.class);\r\n+\r\n+    public ObjectNotFoundException() {\r\n+    }\r\n+\r\n+    public ObjectNotFoundException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public ObjectNotFoundException(Object failed) {\r\n+        super(_loc.get(\"not-found\", Exceptions.toString(failed)));\r\n+        setFailedObject(failed);\r\n+    }\r\n+\r\n+    public ObjectNotFoundException(Collection failed, Throwable[] nested) {\r\n+        super(_loc.get(\"not-found-multi\", Exceptions.toString(failed)));\r\n+        setNestedThrowables(nested);\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return OBJECT_NOT_FOUND;\r\n+    }\r\n+}\r\n+\r"},{"sha":"14fd0bf6c74016fa0a72e017592af98deae35023","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,176 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.PrintStream;\r\n+import java.io.PrintWriter;\r\n+import java.io.Serializable;\r\n+\r\n+/**\r\n+ * Exception type for all OpenJPA exceptions. Meant to be easily\r\n+ * transformed into an appropriate exception at the API layer, since most APIs\r\n+ * define their own exception types.\r\n+ *\r\n+ * @author Abe White\r\n+ * @since 4.0\r\n+ */\r\n+public abstract class OpenJPAException extends RuntimeException\r\n+    implements Serializable, ExceptionInfo {\r\n+\r\n+    private transient boolean _fatal = false;\r\n+    private transient Object _failed = null;\r\n+    private transient Throwable[] _nested = null;\r\n+\r\n+    /**\r\n+     * Default constructor.\r\n+     */\r\n+    public OpenJPAException() {\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor; supply message.\r\n+     */\r\n+    public OpenJPAException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    /**\r\n+     * Construct with cause.\r\n+     */\r\n+    public OpenJPAException(Throwable cause) {\r\n+        this(cause.getMessage(), cause);\r\n+    }\r\n+\r\n+    /**\r\n+     * Construct with message and cause.\r\n+     */\r\n+    public OpenJPAException(String msg, Throwable cause) {\r\n+        super(msg);\r\n+        setCause(cause);\r\n+    }\r\n+\r\n+    /**\r\n+     * Exception type.\r\n+     */\r\n+    public abstract int getType();\r\n+\r\n+    /**\r\n+     * Exception subtype.\r\n+     */\r\n+    public int getSubtype() {\r\n+        return 0;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether this error is fatal.\r\n+     */\r\n+    public boolean isFatal() {\r\n+        return _fatal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether this error is fatal.\r\n+     */\r\n+    public OpenJPAException setFatal(boolean fatal) {\r\n+        _fatal = fatal;\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the first {@link Throwable} from {@link #getNestedThrowables}\r\n+     * in order to conform to {@link Throwable#getCause} in Java 1.4+.\r\n+     *\r\n+     * @see Throwable#getCause\r\n+     */\r\n+    public Throwable getCause() {\r\n+        if (_nested == null || _nested.length == 0)\r\n+            return null;\r\n+        else return _nested[0];\r\n+    }\r\n+\r\n+    /**\r\n+     * The first nested throwable.\r\n+     */\r\n+    public OpenJPAException setCause(Throwable nested) {\r\n+        if (_nested != null)\r\n+            throw new IllegalStateException();\r\n+        if (nested != null)\r\n+            _nested = new Throwable[]{ nested };\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * The nested throwables.\r\n+     */\r\n+    public Throwable[] getNestedThrowables() {\r\n+        return (_nested == null) ? Exceptions.EMPTY_THROWABLES : _nested;\r\n+    }\r\n+\r\n+    /**\r\n+     * The nested throwables.\r\n+     */\r\n+    public OpenJPAException setNestedThrowables(Throwable[] nested) {\r\n+        _nested = nested;\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * The failed object.\r\n+     */\r\n+    public Object getFailedObject() {\r\n+        return _failed;\r\n+    }\r\n+\r\n+    /**\r\n+     * The failed object.\r\n+     */\r\n+    public OpenJPAException setFailedObject(Object failed) {\r\n+        _failed = failed;\r\n+        return this;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return Exceptions.toString(this);\r\n+    }\r\n+\r\n+    public void printStackTrace() {\r\n+        printStackTrace(System.err);\r\n+    }\r\n+\r\n+    public void printStackTrace(PrintStream out) {\r\n+        super.printStackTrace(out);\r\n+        Exceptions.printNestedThrowables(this, out);\r\n+    }\r\n+\r\n+    public void printStackTrace(PrintWriter out) {\r\n+        super.printStackTrace(out);\r\n+        Exceptions.printNestedThrowables(this, out);\r\n+    }\r\n+\r\n+    private void writeObject(ObjectOutputStream out) throws IOException {\r\n+        out.writeBoolean(_fatal);\r\n+        out.writeObject(Exceptions.replaceFailedObject(_failed));\r\n+        out.writeObject(Exceptions.replaceNestedThrowables(_nested));\r\n+    }\r\n+\r\n+    private void readObject(ObjectInputStream in)\r\n+        throws IOException, ClassNotFoundException {\r\n+        _fatal = in.readBoolean();\r\n+        _failed = in.readObject();\r\n+        _nested = (Throwable[]) in.readObject();\r\n+    }\r\n+}\r\n+\r"},{"sha":"e8b94d95baff4cb07962618215a71d43b1ff382c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,113 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+/**\r\n+ * Identity class extended by builtin OpenJPA identity objects.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public abstract class OpenJPAId implements Comparable, Serializable {\r\n+\r\n+    protected Class type;\r\n+    protected boolean subs = true;\r\n+    // type has his based on the least-derived non-object class so that\r\n+    // user-given ids with non-exact types match ids with exact types\r\n+    private transient int _typeHash = 0;\r\n+\r\n+    protected OpenJPAId() {\r\n+    }\r\n+\r\n+    protected OpenJPAId(Class type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    protected OpenJPAId(Class type, boolean subs) {\r\n+        this.type = type;\r\n+        this.subs = subs;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the persitent class which this id instance represents.\r\n+     */\r\n+    public Class getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether this oid might be for a subclass of the given type.\r\n+     * Defaults to true.\r\n+     */\r\n+    public boolean hasSubclasses() {\r\n+        return subs;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the exact type of the described instance once it is known.\r\n+     */\r\n+    public void setManagedInstanceType(Class type) {\r\n+        this.type = type;\r\n+        this.subs = false;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the identity value as an object.\r\n+     */\r\n+    public abstract Object getIdObject();\r\n+\r\n+    /**\r\n+     * Return the id's hash code.\r\n+     */\r\n+    protected abstract int idHash();\r\n+\r\n+    /**\r\n+     * Compare the id to the id of the given instance.\r\n+     */\r\n+    protected abstract boolean idEquals(OpenJPAId other);\r\n+\r\n+    public int hashCode() {\r\n+        if (_typeHash == 0) {\r\n+            Class base = type;\r\n+            while (base.getSuperclass() != null\r\n+                && base.getSuperclass() != Object.class)\r\n+                base = base.getSuperclass();\r\n+            _typeHash = base.hashCode();\r\n+        }\r\n+        return _typeHash ^ idHash();\r\n+    }\r\n+\r\n+    public boolean equals(Object o) {\r\n+        if (o == this)\r\n+            return true;\r\n+        if (o == null || getClass() != o.getClass())\r\n+            return false;\r\n+        OpenJPAId id = (OpenJPAId) o;\r\n+        return idEquals(id) && (id.type.isAssignableFrom(type)\r\n+            || (subs && type.isAssignableFrom(id.type)));\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return type.getName() + \"-\" + getIdObject();\r\n+    }\r\n+\r\n+    public int compareTo(Object other) {\r\n+        if (other == this)\r\n+            return 0;\r\n+        if (other == null)\r\n+            return 1;\r\n+        return ((Comparable) getIdObject()).compareTo(((OpenJPAId) other).\r\n+            getIdObject());\r\n+    }\r\n+}\r"},{"sha":"fe1ae5d4febb32e59d61b3840f7ac640adb22431","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OptimisticException.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/OptimisticException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/OptimisticException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OptimisticException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Exception type for optimistic concurrency violations.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @nojavadoc\r\n+ * @since 2.5\r\n+ */\r\n+public class OptimisticException extends StoreException {\r\n+\r\n+    private static final transient Localizer _loc = Localizer.forPackage\r\n+        (OptimisticException.class);\r\n+\r\n+    public OptimisticException() {\r\n+    }\r\n+\r\n+    public OptimisticException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public OptimisticException(Object failed) {\r\n+        this(_loc.get(\"opt-lock\", Exceptions.toString(failed)));\r\n+        setFailedObject(failed);\r\n+    }\r\n+\r\n+    public OptimisticException(Throwable[] nested) {\r\n+        this(_loc.get(\"opt-lock-nested\"));\r\n+        setNestedThrowables(nested);\r\n+    }\r\n+\r\n+    public OptimisticException(Collection failed, Throwable[] nested) {\r\n+        this(_loc.get(\"opt-lock-multi\", Exceptions.toString(failed)));\r\n+        setNestedThrowables(nested);\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return OPTIMISTIC;\r\n+    }\r\n+}\r"},{"sha":"68ec7c0b6e7d4c689ed657b0556f47d45977ec4e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","status":"added","additions":241,"deletions":0,"changes":241,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,241 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.AbstractSet;\r\n+import java.util.Iterator;\r\n+import java.util.ListIterator;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Utility methods for managing proxies.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class Proxies {\r\n+\r\n+    public static final int MODE_ENTRY = 0;\r\n+    public static final int MODE_KEY = 1;\r\n+    public static final int MODE_VALUE = 2;\r\n+    private static final Localizer _loc = Localizer.forPackage(Proxies.class);\r\n+\r\n+    /**\r\n+     * Used by proxy types to check if the given owners and field names\r\n+     * are equivalent.\r\n+     */\r\n+    public static boolean isOwner(Proxy proxy, OpenJPAStateManager sm,\r\n+        int field) {\r\n+        return proxy.getOwner() == sm && proxy.getOwnerField() == field;\r\n+    }\r\n+\r\n+    /**\r\n+     * Used by proxy types to check that an attempt to add a new value is legal.\r\n+     */\r\n+    public static void assertAllowedType(Object value, Class allowed) {\r\n+        if (value != null && allowed != null && !allowed.isInstance(value)) {\r\n+            throw new UserException(_loc.get(\"bad-elem-type\", new Object[]{\r\n+                allowed.getClassLoader(), allowed,\r\n+                value.getClass().getClassLoader(), value.getClass()\r\n+            }));\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Used by proxy types to dirty their owner.\r\n+     */\r\n+    public static void dirty(Proxy proxy) {\r\n+        if (proxy.getOwner() != null)\r\n+            proxy.getOwner().dirty(proxy.getOwnerField());\r\n+    }\r\n+\r\n+    /**\r\n+     * Used by proxy types to notify their owner that an element has been\r\n+     * removed.\r\n+     */\r\n+    public static void removed(Proxy proxy, Object removed, boolean key) {\r\n+        if (proxy.getOwner() != null && removed != null)\r\n+            proxy.getOwner().removed(proxy.getOwnerField(), removed, key);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return an iterator that dirties its owner on calls to remove. This\r\n+     * iterator assumes that the given proxy collection uses a\r\n+     * {@link CollectionChangeTracker}.\r\n+     */\r\n+    public static Iterator iterator(final ProxyCollection proxy,\r\n+        final Iterator itr) {\r\n+        return new Iterator() {\r\n+            private Object _last = null;\r\n+\r\n+            public boolean hasNext() {\r\n+                return itr.hasNext();\r\n+            }\r\n+\r\n+            public Object next() {\r\n+                _last = itr.next();\r\n+                return _last;\r\n+            }\r\n+\r\n+            public void remove() {\r\n+                dirty(proxy);\r\n+                itr.remove();\r\n+                if (proxy.getChangeTracker() != null)\r\n+                    ((CollectionChangeTracker) proxy.getChangeTracker()).\r\n+                        removed(_last);\r\n+                removed(proxy, _last, false);\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a proxy iterator that dirties its owner on remove, set, and\r\n+     * add. This iterator assumes that the given proxy collection uses a\r\n+     * {@link CollectionChangeTracker}.\r\n+     */\r\n+    public static ListIterator listIterator(final ProxyCollection proxy,\r\n+        final ListIterator itr, final Class allowed) {\r\n+        return new ListIterator() {\r\n+            private Object _last = null;\r\n+\r\n+            public boolean hasNext() {\r\n+                return itr.hasNext();\r\n+            }\r\n+\r\n+            public int nextIndex() {\r\n+                return itr.nextIndex();\r\n+            }\r\n+\r\n+            public Object next() {\r\n+                _last = itr.next();\r\n+                return _last;\r\n+            }\r\n+\r\n+            public boolean hasPrevious() {\r\n+                return itr.hasPrevious();\r\n+            }\r\n+\r\n+            public int previousIndex() {\r\n+                return itr.previousIndex();\r\n+            }\r\n+\r\n+            public Object previous() {\r\n+                _last = itr.previous();\r\n+                return _last;\r\n+            }\r\n+\r\n+            public void set(Object o) {\r\n+                assertAllowedType(o, allowed);\r\n+                dirty(proxy);\r\n+                itr.set(o);\r\n+                if (proxy.getChangeTracker() != null)\r\n+                    proxy.getChangeTracker().stopTracking();\r\n+                removed(proxy, _last, false);\r\n+                _last = o;\r\n+            }\r\n+\r\n+            public void add(Object o) {\r\n+                assertAllowedType(o, allowed);\r\n+                dirty(proxy);\r\n+                itr.add(o);\r\n+                if (proxy.getChangeTracker() != null) {\r\n+                    if (hasNext())\r\n+                        proxy.getChangeTracker().stopTracking();\r\n+                    else ((CollectionChangeTracker) proxy.getChangeTracker()).\r\n+                        added(o);\r\n+                }\r\n+                _last = o;\r\n+            }\r\n+\r\n+            public void remove() {\r\n+                dirty(proxy);\r\n+                itr.remove();\r\n+                if (proxy.getChangeTracker() != null)\r\n+                    ((CollectionChangeTracker) proxy.getChangeTracker()).\r\n+                        removed(_last);\r\n+                removed(proxy, _last, false);\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a proxy for the given map key or entry set.\r\n+     */\r\n+    public static Set entrySet(final ProxyMap proxy, final Set set,\r\n+        final int mode) {\r\n+        return new AbstractSet() {\r\n+            public int size() {\r\n+                return set.size();\r\n+            }\r\n+\r\n+            public boolean remove(Object o) {\r\n+                if (mode != MODE_KEY)\r\n+                    throw new UnsupportedOperationException();\r\n+                Map map = (Map) proxy;\r\n+                if (!map.containsKey(o))\r\n+                    return false;\r\n+                map.remove(o);\r\n+                return true;\r\n+            }\r\n+\r\n+            public Iterator iterator() {\r\n+                final Iterator itr = set.iterator();\r\n+                return new Iterator() {\r\n+                    private Map.Entry _last = null;\r\n+\r\n+                    public boolean hasNext() {\r\n+                        return itr.hasNext();\r\n+                    }\r\n+\r\n+                    public Object next() {\r\n+                        _last = (Map.Entry) itr.next();\r\n+                        switch (mode) {\r\n+                            case MODE_KEY:\r\n+                                return _last.getKey();\r\n+                            case MODE_VALUE:\r\n+                                return _last.getValue();\r\n+                            default:\r\n+                                return _last;\r\n+                        }\r\n+                    }\r\n+\r\n+                    public void remove() {\r\n+                        dirty(proxy);\r\n+                        itr.remove();\r\n+                        if (proxy.getChangeTracker() != null)\r\n+                            ((MapChangeTracker) proxy.getChangeTracker()).\r\n+                                removed(_last.getKey(), _last.getValue());\r\n+                        removed(proxy, _last.getKey(), true);\r\n+                        removed(proxy, _last.getValue(), false);\r\n+                    }\r\n+                };\r\n+            }\r\n+\r\n+            protected Object writeReplace() throws ObjectStreamException {\r\n+                switch (mode) {\r\n+                    case MODE_KEY:\r\n+                        return ((Map) proxy).keySet();\r\n+                    case MODE_VALUE:\r\n+                        return ((Map) proxy).values();\r\n+                    default:\r\n+                        return ((Map) proxy).entrySet();\r\n+                }\r\n+            }\r\n+        };\r\n+    }\r\n+}\r\n+\r"},{"sha":"8a209b68afd94891074280dac716d9828b292bb8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxy.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxy.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxy.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Interface implemented by all proxy types to allow setting and nulling\r\n+ * of their owning instance.\r\n+ * All concrete proxy classes should be public and have publc no-args\r\n+ * constructors so that tools that work via reflection on persistent instances\r\n+ * can manipulate them.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface Proxy {\r\n+\r\n+    /**\r\n+     * Reset the state of the proxy, and set the owning instance of the\r\n+     * proxy and the name of the field it is assigned to. Set to null to\r\n+     * indicate that the proxy is no longer managed.\r\n+     */\r\n+    public void setOwner(OpenJPAStateManager sm, int field);\r\n+\r\n+    /**\r\n+     * Return the owning object.\r\n+     */\r\n+    public OpenJPAStateManager getOwner();\r\n+\r\n+    /**\r\n+     * Return the owning field index.\r\n+     */\r\n+    public int getOwnerField();\r\n+\r\n+    /**\r\n+     * Return the change tracker for this proxy, or null if none.\r\n+     */\r\n+    public ChangeTracker getChangeTracker();\r\n+\r\n+    /**\r\n+     * Return an unproxied copy of the given instance. This method is used\r\n+     * by proxy managers to create backup values for use in rollback.\r\n+     */\r\n+    public Object copy(Object orig);\r\n+}\r"},{"sha":"4ac5c5c7c0a68e6b4b51d1fa65fb4577ca088915","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyArrayList.java","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyArrayList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyArrayList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyArrayList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,186 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.Iterator;\r\n+import java.util.ListIterator;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link ArrayList} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyArrayList extends ArrayList implements ProxyCollection {\r\n+\r\n+    private transient Class _elementType = null;\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient CollectionChangeTracker _ct = null;\r\n+\r\n+    public ProxyArrayList() {\r\n+    }\r\n+\r\n+    public ProxyArrayList(Class elementType, boolean trackChanges,\r\n+        OpenJPAConfiguration conf) {\r\n+        _elementType = elementType;\r\n+        if (trackChanges)\r\n+            _ct = new CollectionChangeTrackerImpl(this, true, true, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new ArrayList((Collection) orig);\r\n+    }\r\n+\r\n+    public ProxyCollection newInstance(Class elementType, Comparator compare,\r\n+        boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        return new ProxyArrayList(elementType, trackChanges, conf);\r\n+    }\r\n+\r\n+    public void add(int index, Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        super.add(index, value);\r\n+    }\r\n+\r\n+    public boolean add(Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (super.add(value)) {\r\n+            if (_ct != null)\r\n+                _ct.added(value);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean addAll(int index, Collection values) {\r\n+        ensureCapacity(size() + values.size());\r\n+        for (Iterator itr = values.iterator(); itr.hasNext(); index++)\r\n+            add(index, itr.next());\r\n+        return values.size() > 0;\r\n+    }\r\n+\r\n+    public boolean addAll(Collection values) {\r\n+        ensureCapacity(size() + values.size());\r\n+        boolean added = false;\r\n+        for (Iterator itr = values.iterator(); itr.hasNext();)\r\n+            added = add(itr.next()) || added;\r\n+        return added;\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        for (int i = 0; i < size(); i++)\r\n+            Proxies.removed(this, get(i), false);\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public Iterator iterator() {\r\n+        return Proxies.iterator(this, super.iterator());\r\n+    }\r\n+\r\n+    public ListIterator listIterator() {\r\n+        return Proxies.listIterator(this, super.listIterator(), _elementType);\r\n+    }\r\n+\r\n+    public ListIterator listIterator(int index) {\r\n+        return Proxies.listIterator(this, super.listIterator(index),\r\n+            _elementType);\r\n+    }\r\n+\r\n+    public Object remove(int index) {\r\n+        Proxies.dirty(this);\r\n+        Object rem = super.remove(index);\r\n+        if (_ct != null)\r\n+            _ct.removed(rem);\r\n+        Proxies.removed(this, rem, false);\r\n+        return rem;\r\n+    }\r\n+\r\n+    public boolean remove(Object o) {\r\n+        Proxies.dirty(this);\r\n+        if (super.remove(o)) {\r\n+            if (_ct != null)\r\n+                _ct.removed(o);\r\n+            Proxies.removed(this, o, false);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean removeAll(Collection c) {\r\n+        boolean removed = false;\r\n+        for (Iterator itr = c.iterator(); itr.hasNext();)\r\n+            removed = remove(itr.next()) || removed;\r\n+        return removed;\r\n+    }\r\n+\r\n+    public boolean retainAll(Collection c) {\r\n+        int size = size();\r\n+        for (Iterator itr = iterator(); itr.hasNext();)\r\n+            if (!c.contains(itr.next()))\r\n+                itr.remove();\r\n+        return size() < size;\r\n+    }\r\n+\r\n+    public Object set(int index, Object element) {\r\n+        Proxies.assertAllowedType(element, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        Object rem = super.set(index, element);\r\n+        if (rem != element)\r\n+            Proxies.removed(this, rem, false);\r\n+        return rem;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"f5b0d693d60902045a9ab1dc5fa9188932c7c5a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCalendar.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCalendar.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCalendar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCalendar.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.TimeZone;\r\n+\r\n+/**\r\n+ * Interface implemented by all built-in proxies on\r\n+ * {@link java.util.Calendar} types.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ */\r\n+public interface ProxyCalendar extends Proxy {\r\n+\r\n+    /**\r\n+     * Return a new instance of this calendar type.\r\n+     */\r\n+    public ProxyCalendar newInstance(TimeZone timeZone);\r\n+}\r\n+\r"},{"sha":"953033086c61811a2a050fa1b3e06cbd8262f1ce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollection.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollection.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+/**\r\n+ * Interface implemented by all built-in proxies on {@link Collection} types.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface ProxyCollection extends Proxy {\r\n+\r\n+    /**\r\n+     * This method should return a new proxy of the same concrete type as the\r\n+     * implementing class. Used by the {@link ProxyManager} factories: one\r\n+     * template instance of each type is created for the purpose of producing\r\n+     * new instances via this method. Overcomes the performance penalties of\r\n+     * reflection.\r\n+     */\r\n+    public ProxyCollection newInstance(Class elementType, Comparator compare,\r\n+        boolean trackChanges, OpenJPAConfiguration conf);\r\n+}\r"},{"sha":"b6a44eb6249b82828fc11b81a5e51ff2eb8ecb78","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyDate.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyDate.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyDate.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,27 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Interface implemented by all built-in proxies on {@link java.util.Date}\r\n+ * types.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface ProxyDate extends Proxy {\r\n+\r\n+    /**\r\n+     * Return a new instance of this date type.\r\n+     */\r\n+    public ProxyDate newInstance();\r\n+}\r"},{"sha":"3514ecca2f8b9cee11fc1bad0ff1e72415b474d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyGregorianCalendar.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyGregorianCalendar.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyGregorianCalendar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyGregorianCalendar.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,172 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Calendar;\r\n+import java.util.GregorianCalendar;\r\n+import java.util.Locale;\r\n+import java.util.TimeZone;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link Calendar} type that calls the <code>dirty</code>\r\n+ * method on its owning persistence capable instance on modification. This\r\n+ * class does not support modification via any deprecated method of the\r\n+ * date class.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyGregorianCalendar extends GregorianCalendar\r\n+    implements ProxyCalendar {\r\n+\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+\r\n+    public ProxyGregorianCalendar() {\r\n+        super();\r\n+    }\r\n+\r\n+    public ProxyGregorianCalendar(int year, int month, int dayOfMonth) {\r\n+        super(year, month, dayOfMonth);\r\n+    }\r\n+\r\n+    public ProxyGregorianCalendar(int year, int month, int dayOfMonth,\r\n+        int hourOfDay, int minute) {\r\n+        super(year, month, dayOfMonth, hourOfDay, minute);\r\n+    }\r\n+\r\n+    public ProxyGregorianCalendar(int year, int month, int dayOfMonth,\r\n+        int hourOfDay, int minute, int second) {\r\n+        super(year, month, dayOfMonth, hourOfDay, minute, second);\r\n+    }\r\n+\r\n+    public ProxyGregorianCalendar(Locale aLocale) {\r\n+        super(aLocale);\r\n+    }\r\n+\r\n+    public ProxyGregorianCalendar(TimeZone zone) {\r\n+        super(zone);\r\n+    }\r\n+\r\n+    public ProxyGregorianCalendar(TimeZone zone, Locale aLocale) {\r\n+        super(zone, aLocale);\r\n+    }\r\n+\r\n+    public ProxyCalendar newInstance(TimeZone timeZone) {\r\n+        if (timeZone == null)\r\n+            return new ProxyGregorianCalendar();\r\n+        else return new ProxyGregorianCalendar(timeZone);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        Calendar origCal = (Calendar) orig;\r\n+        GregorianCalendar cal = new GregorianCalendar(origCal.getTimeZone());\r\n+        cal.setTime(origCal.getTime());\r\n+        return cal;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+\r\n+    protected void computeFields() {\r\n+        // Calendar.computeFields() is called whenever a mutation\r\n+        // occurs in order to recalculate all the fields\r\n+        Proxies.dirty(this);\r\n+        super.computeFields();\r\n+    }\r\n+\r\n+    public void setTimeInMillis(long millis) {\r\n+        if (millis != getTimeInMillis()) {\r\n+            Proxies.dirty(this);\r\n+            super.setTimeInMillis(millis);\r\n+        }\r\n+    }\r\n+\r\n+    /* This is \"final\" in JDK 1.3 (not in 1.4 or 1.5)\r\n+ public void set(int field, int value)\r\n+ {\r\n+ if (get(field) != value)\r\n+ {\r\n+ Proxies.dirty(this);\r\n+ super.set(field, value);\r\n+ }\r\n+ }\r\n+    */\r\n+    public void add(int field, int amount) {\r\n+        if (amount != 0) {\r\n+            Proxies.dirty(this);\r\n+            super.add(field, amount);\r\n+        }\r\n+    }\r\n+\r\n+    public void roll(int field, boolean up) {\r\n+        Proxies.dirty(this);\r\n+        super.roll(field, up);\r\n+    }\r\n+\r\n+    public void roll(int field, int amount) {\r\n+        if (amount != 0) {\r\n+            Proxies.dirty(this);\r\n+            super.roll(field, amount);\r\n+        }\r\n+    }\r\n+\r\n+    public void setTimeZone(TimeZone value) {\r\n+        Proxies.dirty(this);\r\n+        super.setTimeZone(value);\r\n+    }\r\n+\r\n+    public void setLenient(boolean lenient) {\r\n+        if (isLenient() != lenient) {\r\n+            Proxies.dirty(this);\r\n+            super.setLenient(lenient);\r\n+        }\r\n+    }\r\n+\r\n+    public void setFirstDayOfWeek(int value) {\r\n+        if (getFirstDayOfWeek() != value) {\r\n+            Proxies.dirty(this);\r\n+            super.setFirstDayOfWeek(value);\r\n+        }\r\n+    }\r\n+\r\n+    public void setMinimalDaysInFirstWeek(int value) {\r\n+        if (getMinimalDaysInFirstWeek() != value) {\r\n+            Proxies.dirty(this);\r\n+            super.setMinimalDaysInFirstWeek(value);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"a1993a901659a519aa81bcd22a7b363bed50e2c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashMap.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,148 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link HashMap} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyHashMap extends HashMap implements ProxyMap {\r\n+\r\n+    private transient Class _keyType = null;\r\n+    private transient Class _valueType = null;\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient MapChangeTracker _ct = null;\r\n+\r\n+    public ProxyHashMap() {\r\n+    }\r\n+\r\n+    public ProxyHashMap(Class keyType, Class valueType, boolean trackChanges,\r\n+        OpenJPAConfiguration conf) {\r\n+        _keyType = keyType;\r\n+        _valueType = valueType;\r\n+        if (trackChanges)\r\n+            _ct = new MapChangeTrackerImpl(this, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new HashMap((Map) orig);\r\n+    }\r\n+\r\n+    public ProxyMap newInstance(Class keyType, Class valueType,\r\n+        Comparator compare, boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        return new ProxyHashMap(keyType, valueType, trackChanges, conf);\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = super.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            Proxies.removed(this, entry.getKey(), true);\r\n+            Proxies.removed(this, entry.getValue(), false);\r\n+        }\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public Set keySet() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_KEY);\r\n+    }\r\n+\r\n+    public Collection values() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_VALUE);\r\n+    }\r\n+\r\n+    public Set entrySet() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_ENTRY);\r\n+    }\r\n+\r\n+    public Object put(Object key, Object value) {\r\n+        Proxies.assertAllowedType(key, _keyType);\r\n+        Proxies.assertAllowedType(value, _valueType);\r\n+        Proxies.dirty(this);\r\n+        boolean had = containsKey(key);\r\n+        Object old = super.put(key, value);\r\n+        if (had) {\r\n+            if (_ct != null)\r\n+                _ct.changed(key, old, value);\r\n+            Proxies.removed(this, old, false);\r\n+        } else if (_ct != null)\r\n+            _ct.added(key, value);\r\n+        return old;\r\n+    }\r\n+\r\n+    public void putAll(Map m) {\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = m.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            put(entry.getKey(), entry.getValue());\r\n+        }\r\n+    }\r\n+\r\n+    public Object remove(Object key) {\r\n+        Proxies.dirty(this);\r\n+        boolean had = containsKey(key);\r\n+        Object old = super.remove(key);\r\n+        if (had) {\r\n+            if (_ct != null)\r\n+                _ct.removed(key, old);\r\n+            Proxies.removed(this, key, true);\r\n+            Proxies.removed(this, old, false);\r\n+        }\r\n+        return old;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"59541696d3064c59e48e078229de10a81ddb83f0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashSet.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashSet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,140 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link HashSet} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyHashSet extends HashSet implements ProxyCollection {\r\n+\r\n+    private transient Class _elementType = null;\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient CollectionChangeTracker _ct = null;\r\n+\r\n+    public ProxyHashSet() {\r\n+    }\r\n+\r\n+    public ProxyHashSet(Class elementType, boolean trackChanges,\r\n+        OpenJPAConfiguration conf) {\r\n+        _elementType = elementType;\r\n+        if (trackChanges)\r\n+            _ct = new CollectionChangeTrackerImpl(this, false, false, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new HashSet((Collection) orig);\r\n+    }\r\n+\r\n+    public ProxyCollection newInstance(Class elementType, Comparator compare,\r\n+        boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        return new ProxyHashSet(elementType, trackChanges, conf);\r\n+    }\r\n+\r\n+    public boolean add(Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (super.add(value)) {\r\n+            if (_ct != null)\r\n+                _ct.added(value);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean addAll(Collection values) {\r\n+        boolean added = false;\r\n+        for (Iterator itr = values.iterator(); itr.hasNext();)\r\n+            added = add(itr.next()) || added;\r\n+        return added;\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        for (Iterator itr = super.iterator(); itr.hasNext();)\r\n+            Proxies.removed(this, itr.next(), false);\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public Iterator iterator() {\r\n+        return Proxies.iterator(this, super.iterator());\r\n+    }\r\n+\r\n+    public boolean remove(Object o) {\r\n+        Proxies.dirty(this);\r\n+        if (super.remove(o)) {\r\n+            if (_ct != null)\r\n+                _ct.removed(o);\r\n+            Proxies.removed(this, o, false);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean removeAll(Collection c) {\r\n+        boolean removed = false;\r\n+        for (Iterator itr = c.iterator(); itr.hasNext();)\r\n+            removed = remove(itr.next()) || removed;\r\n+        return removed;\r\n+    }\r\n+\r\n+    public boolean retainAll(Collection c) {\r\n+        int size = size();\r\n+        for (Iterator itr = iterator(); itr.hasNext();)\r\n+            if (!c.contains(itr.next()))\r\n+                itr.remove();\r\n+        return size() < size;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"533f0b9c81c1e412ca5b582cfe37fb9a135c2f90","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashtable.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashtable.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashtable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyHashtable.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,148 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.Hashtable;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link Hashtable} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyHashtable extends Hashtable implements ProxyMap {\r\n+\r\n+    private transient Class _keyType = null;\r\n+    private transient Class _valueType = null;\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient MapChangeTracker _ct = null;\r\n+\r\n+    public ProxyHashtable() {\r\n+    }\r\n+\r\n+    public ProxyHashtable(Class keyType, Class valueType, boolean trackChanges,\r\n+        OpenJPAConfiguration conf) {\r\n+        _keyType = keyType;\r\n+        _valueType = valueType;\r\n+        if (trackChanges)\r\n+            _ct = new MapChangeTrackerImpl(this, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new Hashtable((Map) orig);\r\n+    }\r\n+\r\n+    public ProxyMap newInstance(Class keyType, Class valueType,\r\n+        Comparator compare, boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        return new ProxyHashtable(keyType, valueType, trackChanges, conf);\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = super.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            Proxies.removed(this, entry.getKey(), true);\r\n+            Proxies.removed(this, entry.getValue(), false);\r\n+        }\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public Set keySet() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_KEY);\r\n+    }\r\n+\r\n+    public Collection values() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_VALUE);\r\n+    }\r\n+\r\n+    public Set entrySet() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_ENTRY);\r\n+    }\r\n+\r\n+    public Object put(Object key, Object value) {\r\n+        Proxies.assertAllowedType(key, _keyType);\r\n+        Proxies.assertAllowedType(value, _valueType);\r\n+        Proxies.dirty(this);\r\n+        boolean had = containsKey(key);\r\n+        Object old = super.put(key, value);\r\n+        if (had) {\r\n+            if (_ct != null)\r\n+                _ct.changed(key, old, value);\r\n+            Proxies.removed(this, old, false);\r\n+        } else if (_ct != null)\r\n+            _ct.added(key, value);\r\n+        return old;\r\n+    }\r\n+\r\n+    public void putAll(Map m) {\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = m.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            put(entry.getKey(), entry.getValue());\r\n+        }\r\n+    }\r\n+\r\n+    public Object remove(Object key) {\r\n+        Proxies.dirty(this);\r\n+        boolean had = containsKey(key);\r\n+        Object old = super.remove(key);\r\n+        if (had) {\r\n+            if (_ct != null)\r\n+                _ct.removed(key, old);\r\n+            Proxies.removed(this, key, true);\r\n+            Proxies.removed(this, old, false);\r\n+        }\r\n+        return old;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"4d53cfc1ab693c54af3e43f742c93403ab6c8cb2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyLinkedList.java","status":"added","additions":218,"deletions":0,"changes":218,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyLinkedList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyLinkedList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyLinkedList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,218 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.ListIterator;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link LinkedList} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyLinkedList extends LinkedList implements ProxyCollection {\r\n+\r\n+    private transient Class _elementType = null;\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient CollectionChangeTracker _ct = null;\r\n+\r\n+    public ProxyLinkedList() {\r\n+    }\r\n+\r\n+    public ProxyLinkedList(Class elementType, boolean trackChanges,\r\n+        OpenJPAConfiguration conf) {\r\n+        _elementType = elementType;\r\n+        if (trackChanges)\r\n+            _ct = new CollectionChangeTrackerImpl(this, true, true, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new LinkedList((Collection) orig);\r\n+    }\r\n+\r\n+    public ProxyCollection newInstance(Class elementType, Comparator compare,\r\n+        boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        return new ProxyLinkedList(elementType, trackChanges, conf);\r\n+    }\r\n+\r\n+    public void add(int index, Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        super.add(index, value);\r\n+    }\r\n+\r\n+    public boolean add(Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (super.add(value)) {\r\n+            if (_ct != null)\r\n+                _ct.added(value);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public void addFirst(Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        super.addFirst(value);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+    }\r\n+\r\n+    public void addLast(Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        super.addLast(value);\r\n+        if (_ct != null)\r\n+            _ct.added(value);\r\n+    }\r\n+\r\n+    public boolean addAll(int index, Collection values) {\r\n+        for (Iterator itr = values.iterator(); itr.hasNext(); index++)\r\n+            add(index, itr.next());\r\n+        return values.size() > 0;\r\n+    }\r\n+\r\n+    public boolean addAll(Collection values) {\r\n+        boolean added = false;\r\n+        for (Iterator itr = values.iterator(); itr.hasNext();)\r\n+            added = add(itr.next()) || added;\r\n+        return added;\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        for (Iterator itr = super.iterator(); itr.hasNext();)\r\n+            Proxies.removed(this, itr.next(), false);\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public Iterator iterator() {\r\n+        return Proxies.iterator(this, super.iterator());\r\n+    }\r\n+\r\n+    public ListIterator listIterator() {\r\n+        return Proxies.listIterator(this, super.listIterator(), _elementType);\r\n+    }\r\n+\r\n+    public ListIterator listIterator(int index) {\r\n+        return Proxies.listIterator(this, super.listIterator(index),\r\n+            _elementType);\r\n+    }\r\n+\r\n+    public Object remove(int index) {\r\n+        Proxies.dirty(this);\r\n+        Object rem = super.remove(index);\r\n+        if (_ct != null)\r\n+            _ct.removed(rem);\r\n+        Proxies.removed(this, rem, false);\r\n+        return rem;\r\n+    }\r\n+\r\n+    public boolean remove(Object o) {\r\n+        Proxies.dirty(this);\r\n+        if (super.remove(o)) {\r\n+            if (_ct != null)\r\n+                _ct.removed(o);\r\n+            Proxies.removed(this, o, false);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public Object removeFirst() {\r\n+        Proxies.dirty(this);\r\n+        Object rem = super.removeFirst();\r\n+        if (_ct != null)\r\n+            _ct.removed(rem);\r\n+        Proxies.removed(this, rem, false);\r\n+        return rem;\r\n+    }\r\n+\r\n+    public Object removeLast() {\r\n+        Proxies.dirty(this);\r\n+        Object rem = super.removeLast();\r\n+        if (_ct != null)\r\n+            _ct.removed(rem);\r\n+        Proxies.removed(this, rem, false);\r\n+        return rem;\r\n+    }\r\n+\r\n+    public boolean removeAll(Collection c) {\r\n+        boolean removed = false;\r\n+        for (Iterator itr = c.iterator(); itr.hasNext();)\r\n+            removed = remove(itr.next()) || removed;\r\n+        return removed;\r\n+    }\r\n+\r\n+    public boolean retainAll(Collection c) {\r\n+        int size = size();\r\n+        for (Iterator itr = iterator(); itr.hasNext();)\r\n+            if (!c.contains(itr.next()))\r\n+                itr.remove();\r\n+        return size() < size;\r\n+    }\r\n+\r\n+    public Object set(int index, Object element) {\r\n+        Proxies.assertAllowedType(element, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        Object rem = super.set(index, element);\r\n+        if (rem != element)\r\n+            Proxies.removed(this, rem, false);\r\n+        return rem;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"fd5dad7331450e8ca2242a7654c76c3d9ca5cbfa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManager.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManager.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,116 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Calendar;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.TimeZone;\r\n+\r\n+/**\r\n+ * Manager for copying and proxying second class objects. Second class\r\n+ * objects are those that are often used as fields of persistent or\r\n+ * transactional instances, and which can themselves be modified without\r\n+ * resetting the owning class' field. Because these types can change without\r\n+ * an explicit call to the owning persistence capable instance, special care\r\n+ * must be taken to ensure that their state is managed correctly.\r\n+ * Specifically, they must be copied when saving state for rollback, and they\r\n+ * must be proxied for any instance whose state is managed by a state manager,\r\n+ * where proxying involves creating a second class object that automaticlly\r\n+ * notifies its owning instance whenever it is modified. Generally, this\r\n+ * factory is only used by the implementation; second class object handling\r\n+ * is transparent to client code.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface ProxyManager {\r\n+\r\n+    /**\r\n+     * Return a copy of the given date with the same information.\r\n+     */\r\n+    public Date copyDate(Date orig);\r\n+\r\n+    /**\r\n+     * Return a copy of the given Calendar with the same information.\r\n+     */\r\n+    public Calendar copyCalendar(Calendar orig);\r\n+\r\n+    /**\r\n+     * Return a new collection of the same type as the given one\r\n+     * with a copy of all contained elements.\r\n+     * If the given owner is non-null, the returned value should be a proxy\r\n+     * for the given owner, otherwise it should not be a proxy.\r\n+     */\r\n+    public Collection copyCollection(Collection orig);\r\n+\r\n+    /**\r\n+     * Return a new map of the same type as the given one\r\n+     * with a copy of all contained key/value pairs.\r\n+     * If the given owner is non-null, the returned value should be a proxy\r\n+     * for the given owner, otherwise it should not be a proxy.\r\n+     */\r\n+    public Map copyMap(Map orig);\r\n+\r\n+    /**\r\n+     * Return a new array of the same component type as the given array\r\n+     * and containing the same elements. Works for both primitive and\r\n+     * object array types.\r\n+     */\r\n+    public Object copyArray(Object orig);\r\n+\r\n+    /**\r\n+     * Return a copy of the given object with the same\r\n+     * information. If this manager cannot proxy the given type, return null.\r\n+     * If the given owner is non-null, the returned value should be a proxy\r\n+     * for the given owner, otherwise it should not be a proxy.\r\n+     *\r\n+     * @since 2.5\r\n+     */\r\n+    public Object copyCustom(Object orig);\r\n+\r\n+    /**\r\n+     * Return a new date proxy.\r\n+     */\r\n+    public Proxy newDateProxy(Class type);\r\n+\r\n+    /**\r\n+     * Return a new calendar proxy.\r\n+     */\r\n+    public Proxy newCalendarProxy(Class type, TimeZone timeZone);\r\n+\r\n+    /**\r\n+     * Return a proxy for the given collection type. The returned collection\r\n+     * will allow only addition of elements assignable from the given\r\n+     * element type and will use the given comparator, if it is not null.\r\n+     */\r\n+    public Proxy newCollectionProxy(Class type, Class elementType,\r\n+        Comparator compare);\r\n+\r\n+    /**\r\n+     * Return a proxy for the given map type. The returned map will\r\n+     * allow only addition of keys/values assignable from the given\r\n+     * keyType/valueType, and will use the given comparator, if it is not null.\r\n+     */\r\n+    public Proxy newMapProxy(Class type, Class keyType, Class valueType,\r\n+        Comparator compare);\r\n+\r\n+    /**\r\n+     * Return a proxy for the given object, or null if this manager cannot\r\n+     * proxy the object.\r\n+     *\r\n+     * @since 2.5\r\n+     */\r\n+    public Proxy newCustomProxy(Object obj);\r\n+}\r"},{"sha":"071c8b07bb29a9718573509c28e4af57633c5451","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,263 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.lang.reflect.Array;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.util.JavaVersions;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\r\n+\r\n+/**\r\n+ * Default implementation of the {@link ProxyManager} interface.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class ProxyManagerImpl implements ProxyManager, Configurable {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (ProxyManagerImpl.class);\r\n+    // date proxy cache\r\n+    private static final Map _dates = new HashMap();\r\n+\r\n+    static {\r\n+        _dates.put(Date.class, new ProxyUtilDate());\r\n+        _dates.put(java.sql.Date.class, new ProxySQLDate());\r\n+        _dates.put(java.sql.Timestamp.class, new ProxyTimestamp());\r\n+        _dates.put(java.sql.Time.class, new ProxyTime());\r\n+    }\r\n+\r\n+    // calendar proxy cache\r\n+    private static final Map _calendars = new HashMap();\r\n+\r\n+    static {\r\n+        ProxyGregorianCalendar cal = new ProxyGregorianCalendar();\r\n+        try {\r\n+            cal = (ProxyGregorianCalendar) JavaVersions.\r\n+                getVersionSpecificClass(ProxyGregorianCalendar.class).\r\n+                newInstance();\r\n+        } catch (Exception e) {\r\n+        }\r\n+        _calendars.put(Calendar.class, cal);\r\n+        _calendars.put(GregorianCalendar.class, cal);\r\n+    }\r\n+\r\n+    // standard collection proxy cache\r\n+    private static final Map _stdCollections = new HashMap();\r\n+\r\n+    static {\r\n+        ProxyArrayList listTempl = new ProxyArrayList();\r\n+        ProxyHashSet setTempl = new ProxyHashSet();\r\n+        ProxyTreeSet sortedSetTempl = new ProxyTreeSet();\r\n+        _stdCollections.put(Collection.class, listTempl);\r\n+        _stdCollections.put(Set.class, setTempl);\r\n+        _stdCollections.put(SortedSet.class, sortedSetTempl);\r\n+        _stdCollections.put(List.class, listTempl);\r\n+        _stdCollections.put(ArrayList.class, listTempl);\r\n+        _stdCollections.put(LinkedList.class, new ProxyLinkedList());\r\n+        _stdCollections.put(Vector.class, new ProxyVector());\r\n+        _stdCollections.put(HashSet.class, setTempl);\r\n+        _stdCollections.put(TreeSet.class, sortedSetTempl);\r\n+    }\r\n+\r\n+    // standard map proxy cache\r\n+    private static final Map _stdMaps = new HashMap();\r\n+\r\n+    static {\r\n+        ProxyHashMap mapTempl = new ProxyHashMap();\r\n+        ProxyTreeMap sortedMapTempl = new ProxyTreeMap();\r\n+        _stdMaps.put(Map.class, mapTempl);\r\n+        _stdMaps.put(SortedMap.class, sortedMapTempl);\r\n+        _stdMaps.put(HashMap.class, mapTempl);\r\n+        _stdMaps.put(TreeMap.class, sortedMapTempl);\r\n+        _stdMaps.put(Hashtable.class, new ProxyHashtable());\r\n+        _stdMaps.put(Properties.class, new ProxyProperties());\r\n+    }\r\n+\r\n+    // allow subclasses to manipulate collection and map templates\r\n+    private final Map _collections = new ConcurrentHashMap(_stdCollections);\r\n+    private final Map _maps = new ConcurrentHashMap(_stdMaps);\r\n+    protected OpenJPAConfiguration conf = null;\r\n+    private boolean _trackChanges = true;\r\n+    private boolean _assertType = false;\r\n+\r\n+    /**\r\n+     * Whether proxies produced by this factory will use {@link ChangeTracker}s\r\n+     * to try to cut down on data store operations at the cost of some extra\r\n+     * bookkeeping overhead. Defaults to true.\r\n+     */\r\n+    public boolean getTrackChanges() {\r\n+        return _trackChanges;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether proxies produced by this factory will use {@link ChangeTracker}s\r\n+     * to try to cut down on data store operations at the cost of some extra\r\n+     * bookkeeping overhead. Defaults to true.\r\n+     */\r\n+    public void setTrackChanges(boolean track) {\r\n+        _trackChanges = track;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether to perform runtime checks to ensure that all elements\r\n+     * added to collection and map proxies are the proper element/key/value\r\n+     * type as defined by the metadata. Defaults to false.\r\n+     */\r\n+    public boolean getAssertAllowedType() {\r\n+        return _assertType;\r\n+    }\r\n+\r\n+    /**\r\n+     * Whether to perform runtime checks to ensure that all elements\r\n+     * added to collection and map proxies are the proper element/key/value\r\n+     * type as defined by the metadata. Defaults to false.\r\n+     */\r\n+    public void setAssertAllowedType(boolean assertType) {\r\n+        _assertType = assertType;\r\n+    }\r\n+\r\n+    public Date copyDate(Date orig) {\r\n+        return (Date) copy(orig, _dates);\r\n+    }\r\n+\r\n+    public Calendar copyCalendar(Calendar orig) {\r\n+        return (Calendar) copy(orig, _calendars);\r\n+    }\r\n+\r\n+    public Collection copyCollection(Collection orig) {\r\n+        return (Collection) copy(orig, _collections);\r\n+    }\r\n+\r\n+    public Map copyMap(Map orig) {\r\n+        return (Map) copy(orig, _maps);\r\n+    }\r\n+\r\n+    /**\r\n+     * Internal helper to copy value.\r\n+     */\r\n+    private static Object copy(Object orig, Map proxies) {\r\n+        if (orig == null)\r\n+            return null;\r\n+        if (orig instanceof Proxy)\r\n+            return ((Proxy) orig).copy(orig);\r\n+        Class type = orig.getClass();\r\n+        Proxy proxy = (Proxy) proxies.get(type);\r\n+        if (proxy == null)\r\n+            throw new UnsupportedException(_loc.get(\"bad-proxy\", type));\r\n+        return proxy.copy(orig);\r\n+    }\r\n+\r\n+    public Object copyArray(Object orig) {\r\n+        if (orig == null)\r\n+            return null;\r\n+        try {\r\n+            int length = Array.getLength(orig);\r\n+            Object array = Array.newInstance(orig.getClass().\r\n+                getComponentType(), length);\r\n+            System.arraycopy(orig, 0, array, 0, length);\r\n+            return array;\r\n+        } catch (Exception e) {\r\n+            throw new UnsupportedException(_loc.get(\"bad-array\",\r\n+                e.getMessage()), e);\r\n+        }\r\n+    }\r\n+\r\n+    public Object copyCustom(Object orig) {\r\n+        if (!(orig instanceof Proxy))\r\n+            return null;\r\n+        return ((Proxy) orig).copy(orig);\r\n+    }\r\n+\r\n+    public Proxy newDateProxy(Class type) {\r\n+        ProxyDate pd = (ProxyDate) findProxy(type, ProxyDate.class, _dates);\r\n+        return pd.newInstance();\r\n+    }\r\n+\r\n+    public Proxy newCalendarProxy(Class type, TimeZone timeZone) {\r\n+        ProxyCalendar pc = (ProxyCalendar) findProxy(type,\r\n+            ProxyCalendar.class, _calendars);\r\n+        return pc.newInstance(timeZone);\r\n+    }\r\n+\r\n+    public Proxy newCollectionProxy(Class type, Class elementType,\r\n+        Comparator compare) {\r\n+        ProxyCollection pc = (ProxyCollection) findProxy(type,\r\n+            ProxyCollection.class, _collections);\r\n+        if (!_assertType)\r\n+            elementType = null;\r\n+        return pc.newInstance(elementType, compare, _trackChanges, conf);\r\n+    }\r\n+\r\n+    public Proxy newMapProxy(Class type, Class keyType, Class valueType,\r\n+        Comparator compare) {\r\n+        ProxyMap pm = (ProxyMap) findProxy(type, ProxyMap.class, _maps);\r\n+        if (!_assertType) {\r\n+            keyType = null;\r\n+            valueType = null;\r\n+        }\r\n+        return pm.newInstance(keyType, valueType, compare, _trackChanges, conf);\r\n+    }\r\n+\r\n+    /**\r\n+     * Helper method to find an existing proxy for the given type.\r\n+     */\r\n+    private static Proxy findProxy(Class type, Class proxyType, Map proxies) {\r\n+        Proxy p = (Proxy) proxies.get(type);\r\n+        if (p == null) {\r\n+            // check for custom proxy\r\n+            if (proxyType.isAssignableFrom(type)) {\r\n+                try {\r\n+                    p = (Proxy) type.newInstance();\r\n+                    proxies.put(type, p);\r\n+                } catch (Exception e) {\r\n+                    throw new UnsupportedException(_loc.get(\"no-proxy-cons\",\r\n+                        type), e);\r\n+                }\r\n+            } else throw new UnsupportedException(_loc.get(\"bad-proxy\", type));\r\n+        }\r\n+        return p;\r\n+    }\r\n+\r\n+    public Proxy newCustomProxy(Object obj) {\r\n+        return (obj instanceof Proxy) ? (Proxy) obj : null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add a supported proxy collection type.\r\n+     */\r\n+    protected void setProxyTemplate(Class collType, ProxyCollection proxy) {\r\n+        _collections.put(collType, proxy);\r\n+    }\r\n+\r\n+    /**\r\n+     * Add a supported proxy map type.\r\n+     */\r\n+    protected void setProxyTemplate(Class mapType, ProxyMap proxy) {\r\n+        _maps.put(mapType, proxy);\r\n+    }\r\n+\r\n+    public void setConfiguration(Configuration conf) {\r\n+        this.conf = (OpenJPAConfiguration) conf;\r\n+    }\r\n+\r\n+    public void startConfiguration() {\r\n+    }\r\n+\r\n+    public void endConfiguration() {\r\n+    }\r\n+}\r"},{"sha":"091d75bace13ee4d08b21d96b8e6e7e4808098b9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMap.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.util.Comparator;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+/**\r\n+ * Interface implemented by all built-in proxies on {@link Map} types.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public interface ProxyMap extends Proxy {\r\n+\r\n+    /**\r\n+     * This method should return a new proxy of the same concrete type as the\r\n+     * implementing class. Used by the {@link ProxyManager} factories: one\r\n+     * template instance of each type is created for the purpose of producing\r\n+     * new instances via this method. Overcomes the performance\r\n+     * penalties of reflection.\r\n+     */\r\n+    public ProxyMap newInstance(Class keyType, Class valueType,\r\n+        Comparator compare, boolean trackChanges, OpenJPAConfiguration conf);\r\n+}\r"},{"sha":"746d05f2ac33e53f5f326c028e4b4708eada5d31","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyProperties.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyProperties.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyProperties.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,155 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.Properties;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link Properties} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyProperties extends Properties implements ProxyMap {\r\n+\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient MapChangeTracker _ct = null;\r\n+\r\n+    public ProxyProperties() {\r\n+    }\r\n+\r\n+    public ProxyProperties(boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        if (trackChanges)\r\n+            _ct = new MapChangeTrackerImpl(this, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        Properties props = new Properties();\r\n+        props.putAll((Map) orig);\r\n+        return props;\r\n+    }\r\n+\r\n+    public ProxyMap newInstance(Class keyType, Class valueType,\r\n+        Comparator compare, boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        return new ProxyProperties(trackChanges, conf);\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = super.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            Proxies.removed(this, entry.getKey(), true);\r\n+            Proxies.removed(this, entry.getValue(), false);\r\n+        }\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public Set keySet() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_KEY);\r\n+    }\r\n+\r\n+    public Collection values() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_VALUE);\r\n+    }\r\n+\r\n+    public Set entrySet() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_ENTRY);\r\n+    }\r\n+\r\n+    public Object put(Object key, Object value) {\r\n+        Proxies.dirty(this);\r\n+        boolean had = containsKey(key);\r\n+        Object old = super.put(key, value);\r\n+        if (had) {\r\n+            if (_ct != null)\r\n+                _ct.changed(key, old, value);\r\n+            Proxies.removed(this, old, false);\r\n+        } else if (_ct != null)\r\n+            _ct.added(key, value);\r\n+        return old;\r\n+    }\r\n+\r\n+    public void putAll(Map m) {\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = m.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            put(entry.getKey(), entry.getValue());\r\n+        }\r\n+    }\r\n+\r\n+    public Object remove(Object key) {\r\n+        Proxies.dirty(this);\r\n+        boolean had = containsKey(key);\r\n+        Object old = super.remove(key);\r\n+        if (had) {\r\n+            if (_ct != null)\r\n+                _ct.removed(key, old);\r\n+            Proxies.removed(this, key, true);\r\n+            Proxies.removed(this, old, false);\r\n+        }\r\n+        return old;\r\n+    }\r\n+\r\n+    public Object setProperty(String key, String value) {\r\n+        return put(key, value);\r\n+    }\r\n+\r\n+    public void load(InputStream in) throws IOException {\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        super.load(in);\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"2504e0ac3c5ec993e8b500a60e6ee94a804d2b19","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxySQLDate.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxySQLDate.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxySQLDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxySQLDate.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.sql.Date;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link Date} type that calls the <code>dirty</code>\r\n+ * method on its owning persistence capable instance on modification. This\r\n+ * class does not support modification via any deprecated method of the\r\n+ * date class.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxySQLDate extends Date implements ProxyDate {\r\n+\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+\r\n+    public ProxySQLDate() {\r\n+        super(System.currentTimeMillis());\r\n+    }\r\n+\r\n+    public ProxySQLDate(long time) {\r\n+        super(time);\r\n+    }\r\n+\r\n+    public ProxyDate newInstance() {\r\n+        return new ProxySQLDate();\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new Date(((Date) orig).getTime());\r\n+    }\r\n+\r\n+    public void setYear(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setYear(val);\r\n+    }\r\n+\r\n+    public void setMonth(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setMonth(val);\r\n+    }\r\n+\r\n+    public void setDate(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setDate(val);\r\n+    }\r\n+\r\n+    public void setHours(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setHours(val);\r\n+    }\r\n+\r\n+    public void setMinutes(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setMinutes(val);\r\n+    }\r\n+\r\n+    public void setSeconds(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setSeconds(val);\r\n+    }\r\n+\r\n+    public void setTime(long millis) {\r\n+        Proxies.dirty(this);\r\n+        super.setTime(millis);\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return new Date(getTime());\r\n+    }\r\n+}\r"},{"sha":"8a50058ff6226c246729d09b828720c4c7b827bb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTime.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTime.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTime.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.sql.Time;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link Time} type that calls the <code>dirty</code>\r\n+ * method on its owning persistence capable instance on modification. This\r\n+ * class does not support modification via any deprecated method of the\r\n+ * date class.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyTime extends Time implements ProxyDate {\r\n+\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+\r\n+    public ProxyTime() {\r\n+        super(System.currentTimeMillis());\r\n+    }\r\n+\r\n+    public ProxyTime(long time) {\r\n+        super(time);\r\n+    }\r\n+\r\n+    public ProxyDate newInstance() {\r\n+        return new ProxyTime();\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new Time(((Time) orig).getTime());\r\n+    }\r\n+\r\n+    public void setYear(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setYear(val);\r\n+    }\r\n+\r\n+    public void setMonth(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setMonth(val);\r\n+    }\r\n+\r\n+    public void setDate(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setDate(val);\r\n+    }\r\n+\r\n+    public void setHours(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setHours(val);\r\n+    }\r\n+\r\n+    public void setMinutes(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setMinutes(val);\r\n+    }\r\n+\r\n+    public void setSeconds(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setSeconds(val);\r\n+    }\r\n+\r\n+    public void setTime(long millis) {\r\n+        Proxies.dirty(this);\r\n+        super.setTime(millis);\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return new Time(getTime());\r\n+    }\r\n+}\r"},{"sha":"46ef9f053bc0ebc8f48d269cf7bffc32e3902d35","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTimestamp.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTimestamp.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTimestamp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTimestamp.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,114 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.sql.Timestamp;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link Timestamp} type that calls the <code>dirty</code>\r\n+ * method on its owning persistence capable instance on modification. This\r\n+ * class does not support modification via any deprecated method of the\r\n+ * date class.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyTimestamp extends Timestamp implements ProxyDate {\r\n+\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+\r\n+    public ProxyTimestamp() {\r\n+        super(System.currentTimeMillis());\r\n+    }\r\n+\r\n+    public ProxyTimestamp(long time) {\r\n+        super(time);\r\n+    }\r\n+\r\n+    public ProxyDate newInstance() {\r\n+        return new ProxyTimestamp();\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new Timestamp(((Timestamp) orig).getTime());\r\n+    }\r\n+\r\n+    public void setYear(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setYear(val);\r\n+    }\r\n+\r\n+    public void setMonth(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setMonth(val);\r\n+    }\r\n+\r\n+    public void setDate(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setDate(val);\r\n+    }\r\n+\r\n+    public void setHours(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setHours(val);\r\n+    }\r\n+\r\n+    public void setMinutes(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setMinutes(val);\r\n+    }\r\n+\r\n+    public void setSeconds(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setSeconds(val);\r\n+    }\r\n+\r\n+    public void setTime(long millis) {\r\n+        Proxies.dirty(this);\r\n+        super.setTime(millis);\r\n+    }\r\n+\r\n+    public void setNanos(int nanos) {\r\n+        Proxies.dirty(this);\r\n+        super.setNanos(nanos);\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        Timestamp t = new Timestamp(getTime());\r\n+        t.setNanos(getNanos());\r\n+        return t;\r\n+    }\r\n+}\r"},{"sha":"81c751330db27a163e7e2a76b1173a1ff983e9f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTreeMap.java","status":"added","additions":162,"deletions":0,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTreeMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTreeMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTreeMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,162 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.SortedMap;\r\n+import java.util.TreeMap;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link TreeMap} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyTreeMap extends TreeMap implements ProxyMap {\r\n+\r\n+    private transient Class _keyType = null;\r\n+    private transient Class _valueType = null;\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient MapChangeTracker _ct = null;\r\n+\r\n+    public ProxyTreeMap() {\r\n+    }\r\n+\r\n+    public ProxyTreeMap(Class keyType, Class valueType, boolean trackChanges,\r\n+        OpenJPAConfiguration conf) {\r\n+        _keyType = keyType;\r\n+        _valueType = valueType;\r\n+        if (trackChanges)\r\n+            _ct = new MapChangeTrackerImpl(this, conf);\r\n+    }\r\n+\r\n+    public ProxyTreeMap(Class keyType, Class valueType, Comparator compare,\r\n+        boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        super(compare);\r\n+        _keyType = keyType;\r\n+        _valueType = valueType;\r\n+        if (trackChanges)\r\n+            _ct = new MapChangeTrackerImpl(this, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        if (orig instanceof SortedMap)\r\n+            return new TreeMap((SortedMap) orig);\r\n+        return new TreeMap((Map) orig);\r\n+    }\r\n+\r\n+    public ProxyMap newInstance(Class keyType, Class valueType,\r\n+        Comparator compare, boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        if (compare == null)\r\n+            return new ProxyTreeMap(keyType, valueType, trackChanges, conf);\r\n+        return new ProxyTreeMap(keyType, valueType, compare, trackChanges,\r\n+            conf);\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = super.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            Proxies.removed(this, entry.getKey(), true);\r\n+            Proxies.removed(this, entry.getValue(), false);\r\n+        }\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public Set keySet() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_KEY);\r\n+    }\r\n+\r\n+    public Collection values() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_VALUE);\r\n+    }\r\n+\r\n+    public Set entrySet() {\r\n+        return Proxies.entrySet(this, super.entrySet(), Proxies.MODE_ENTRY);\r\n+    }\r\n+\r\n+    public Object put(Object key, Object value) {\r\n+        Proxies.assertAllowedType(key, _keyType);\r\n+        Proxies.assertAllowedType(value, _valueType);\r\n+        Proxies.dirty(this);\r\n+        boolean had = containsKey(key);\r\n+        Object old = super.put(key, value);\r\n+        if (had) {\r\n+            if (_ct != null)\r\n+                _ct.changed(key, old, value);\r\n+            Proxies.removed(this, old, false);\r\n+        } else if (_ct != null)\r\n+            _ct.added(key, value);\r\n+        return old;\r\n+    }\r\n+\r\n+    public void putAll(Map m) {\r\n+        Map.Entry entry;\r\n+        for (Iterator itr = m.entrySet().iterator(); itr.hasNext();) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            put(entry.getKey(), entry.getValue());\r\n+        }\r\n+    }\r\n+\r\n+    public Object remove(Object key) {\r\n+        Proxies.dirty(this);\r\n+        boolean had = containsKey(key);\r\n+        Object old = super.remove(key);\r\n+        if (had) {\r\n+            if (_ct != null)\r\n+                _ct.removed(key, old);\r\n+            Proxies.removed(this, key, true);\r\n+            Proxies.removed(this, old, false);\r\n+        }\r\n+        return old;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"aca50ad7926cc11076c7e9d29f1ea7254d060f14","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTreeSet.java","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTreeSet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTreeSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyTreeSet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,153 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.Iterator;\r\n+import java.util.SortedSet;\r\n+import java.util.TreeSet;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link TreeSet} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyTreeSet extends TreeSet implements ProxyCollection {\r\n+\r\n+    private transient Class _elementType = null;\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient CollectionChangeTracker _ct = null;\r\n+\r\n+    public ProxyTreeSet() {\r\n+    }\r\n+\r\n+    public ProxyTreeSet(Class elementType, boolean trackChanges,\r\n+        OpenJPAConfiguration conf) {\r\n+        _elementType = elementType;\r\n+        if (trackChanges)\r\n+            _ct = new CollectionChangeTrackerImpl(this, false, false, conf);\r\n+    }\r\n+\r\n+    public ProxyTreeSet(Class elementType, Comparator compare,\r\n+        boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        super(compare);\r\n+        _elementType = elementType;\r\n+        if (trackChanges)\r\n+            _ct = new CollectionChangeTrackerImpl(this, false, false, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        if (orig instanceof SortedSet)\r\n+            return new TreeSet((SortedSet) orig);\r\n+        return new TreeSet((Collection) orig);\r\n+    }\r\n+\r\n+    public ProxyCollection newInstance(Class elementType, Comparator compare,\r\n+        boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        if (compare == null)\r\n+            return new ProxyTreeSet(elementType, trackChanges, conf);\r\n+        return new ProxyTreeSet(elementType, compare, trackChanges, conf);\r\n+    }\r\n+\r\n+    public boolean add(Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (super.add(value)) {\r\n+            if (_ct != null)\r\n+                _ct.added(value);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean addAll(Collection values) {\r\n+        boolean added = false;\r\n+        for (Iterator itr = values.iterator(); itr.hasNext();)\r\n+            added = add(itr.next()) || added;\r\n+        return added;\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        for (Iterator itr = super.iterator(); itr.hasNext();)\r\n+            Proxies.removed(this, itr.next(), false);\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public Iterator iterator() {\r\n+        return Proxies.iterator(this, super.iterator());\r\n+    }\r\n+\r\n+    public boolean remove(Object o) {\r\n+        Proxies.dirty(this);\r\n+        if (super.remove(o)) {\r\n+            if (_ct != null)\r\n+                _ct.removed(o);\r\n+            Proxies.removed(this, o, false);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean removeAll(Collection c) {\r\n+        boolean removed = false;\r\n+        for (Iterator itr = c.iterator(); itr.hasNext();)\r\n+            removed = remove(itr.next()) || removed;\r\n+        return removed;\r\n+    }\r\n+\r\n+    public boolean retainAll(Collection c) {\r\n+        int size = size();\r\n+        for (Iterator itr = iterator(); itr.hasNext();)\r\n+            if (!c.contains(itr.next()))\r\n+                itr.remove();\r\n+        return size() < size;\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"523e2cfbcc75e312d0869215db8f727ae96e73c0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyUtilDate.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyUtilDate.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyUtilDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyUtilDate.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Date;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link Date} type that calls the <code>dirty</code>\r\n+ * method on its owning persistence capable instance on modification. This\r\n+ * class does not support modification via any deprecated method of the\r\n+ * date class.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyUtilDate extends Date implements ProxyDate {\r\n+\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+\r\n+    public ProxyUtilDate() {\r\n+        super();\r\n+    }\r\n+\r\n+    public ProxyUtilDate(long time) {\r\n+        super(time);\r\n+    }\r\n+\r\n+    public ProxyDate newInstance() {\r\n+        return new ProxyUtilDate();\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return null;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new Date(((Date) orig).getTime());\r\n+    }\r\n+\r\n+    public void setYear(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setYear(val);\r\n+    }\r\n+\r\n+    public void setMonth(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setMonth(val);\r\n+    }\r\n+\r\n+    public void setDate(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setDate(val);\r\n+    }\r\n+\r\n+    public void setHours(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setHours(val);\r\n+    }\r\n+\r\n+    public void setMinutes(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setMinutes(val);\r\n+    }\r\n+\r\n+    public void setSeconds(int val) {\r\n+        Proxies.dirty(this);\r\n+        super.setSeconds(val);\r\n+    }\r\n+\r\n+    public void setTime(long millis) {\r\n+        Proxies.dirty(this);\r\n+        super.setTime(millis);\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return new Date(getTime());\r\n+    }\r\n+}\r"},{"sha":"b76a88257606e144d7c1422ff7a0e5737481080a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyVector.java","status":"added","additions":240,"deletions":0,"changes":240,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyVector.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyVector.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyVector.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,240 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ObjectStreamException;\r\n+import java.util.Collection;\r\n+import java.util.Comparator;\r\n+import java.util.Iterator;\r\n+import java.util.ListIterator;\r\n+import java.util.Vector;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+\r\n+/**\r\n+ * Extension of the {@link Vector} type that dirties the\r\n+ * persistent/transactional field it is assigned to on modification.\r\n+ * The need to dirty the field on <b>any</b> modification mandates that\r\n+ * this class must override all mutator methods of the base type.\r\n+ * This may lead to multiple calls to <code>dirty</code> for one state\r\n+ * change if one mutator method of the base type calls another.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public class ProxyVector extends Vector implements ProxyCollection {\r\n+\r\n+    private transient Class _elementType = null;\r\n+    private transient OpenJPAStateManager _sm = null;\r\n+    private transient int _field = -1;\r\n+    private transient CollectionChangeTracker _ct = null;\r\n+\r\n+    public ProxyVector() {\r\n+    }\r\n+\r\n+    public ProxyVector(Class elementType, boolean trackChanges,\r\n+        OpenJPAConfiguration conf) {\r\n+        _elementType = elementType;\r\n+        if (trackChanges)\r\n+            _ct = new CollectionChangeTrackerImpl(this, true, true, conf);\r\n+    }\r\n+\r\n+    public void setOwner(OpenJPAStateManager sm, int field) {\r\n+        _sm = sm;\r\n+        _field = field;\r\n+    }\r\n+\r\n+    public OpenJPAStateManager getOwner() {\r\n+        return _sm;\r\n+    }\r\n+\r\n+    public int getOwnerField() {\r\n+        return _field;\r\n+    }\r\n+\r\n+    public ChangeTracker getChangeTracker() {\r\n+        return _ct;\r\n+    }\r\n+\r\n+    public Object copy(Object orig) {\r\n+        return new Vector((Collection) orig);\r\n+    }\r\n+\r\n+    public ProxyCollection newInstance(Class elementType, Comparator compare,\r\n+        boolean trackChanges, OpenJPAConfiguration conf) {\r\n+        return new ProxyVector(elementType, trackChanges, conf);\r\n+    }\r\n+\r\n+    public void add(int index, Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        super.add(index, value);\r\n+    }\r\n+\r\n+    public void insertElementAt(Object value, int index) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        super.insertElementAt(value, index);\r\n+    }\r\n+\r\n+    public boolean add(Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (super.add(value)) {\r\n+            if (_ct != null)\r\n+                _ct.added(value);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public void addElement(Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        super.addElement(value);\r\n+        if (_ct != null)\r\n+            _ct.added(value);\r\n+    }\r\n+\r\n+    public boolean addAll(int index, Collection values) {\r\n+        ensureCapacity(size() + values.size());\r\n+        for (Iterator itr = values.iterator(); itr.hasNext(); index++)\r\n+            add(index, itr.next());\r\n+        return values.size() > 0;\r\n+    }\r\n+\r\n+    public boolean addAll(Collection values) {\r\n+        ensureCapacity(size() + values.size());\r\n+        boolean added = false;\r\n+        for (Iterator itr = values.iterator(); itr.hasNext();)\r\n+            added = add(itr.next()) || added;\r\n+        return added;\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        for (int i = 0; i < size(); i++)\r\n+            Proxies.removed(this, get(i), false);\r\n+        super.clear();\r\n+    }\r\n+\r\n+    public void removeAllElements() {\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        for (int i = 0; i < size(); i++)\r\n+            Proxies.removed(this, get(i), false);\r\n+        super.removeAllElements();\r\n+    }\r\n+\r\n+    public Iterator iterator() {\r\n+        return Proxies.iterator(this, super.iterator());\r\n+    }\r\n+\r\n+    public ListIterator listIterator() {\r\n+        return Proxies.listIterator(this, super.listIterator(), _elementType);\r\n+    }\r\n+\r\n+    public ListIterator listIterator(int index) {\r\n+        return Proxies.listIterator(this, super.listIterator(index),\r\n+            _elementType);\r\n+    }\r\n+\r\n+    public Object remove(int index) {\r\n+        Proxies.dirty(this);\r\n+        Object rem = super.remove(index);\r\n+        if (_ct != null)\r\n+            _ct.removed(rem);\r\n+        Proxies.removed(this, rem, false);\r\n+        return rem;\r\n+    }\r\n+\r\n+    public void removeElementAt(int index) {\r\n+        Proxies.dirty(this);\r\n+        Object rem = get(index);\r\n+        super.removeElementAt(index);\r\n+        if (_ct != null)\r\n+            _ct.removed(rem);\r\n+        Proxies.removed(this, rem, false);\r\n+    }\r\n+\r\n+    public boolean remove(Object o) {\r\n+        Proxies.dirty(this);\r\n+        if (super.remove(o)) {\r\n+            if (_ct != null)\r\n+                _ct.removed(o);\r\n+            Proxies.removed(this, o, false);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean removeElement(Object o) {\r\n+        Proxies.dirty(this);\r\n+        if (super.removeElement(o)) {\r\n+            if (_ct != null)\r\n+                _ct.removed(o);\r\n+            Proxies.removed(this, o, false);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean removeAll(Collection c) {\r\n+        boolean removed = false;\r\n+        for (Iterator itr = c.iterator(); itr.hasNext();)\r\n+            removed = remove(itr.next()) || removed;\r\n+        return removed;\r\n+    }\r\n+\r\n+    public boolean retainAll(Collection c) {\r\n+        int size = size();\r\n+        for (Iterator itr = iterator(); itr.hasNext();)\r\n+            if (!c.contains(itr.next()))\r\n+                itr.remove();\r\n+        return size() < size;\r\n+    }\r\n+\r\n+    public Object set(int index, Object value) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        Object rem = super.set(index, value);\r\n+        Proxies.removed(this, rem, false);\r\n+        return rem;\r\n+    }\r\n+\r\n+    public void setElementAt(Object value, int index) {\r\n+        Proxies.assertAllowedType(value, _elementType);\r\n+        Proxies.dirty(this);\r\n+        if (_ct != null)\r\n+            _ct.stopTracking();\r\n+        Object rem = get(index);\r\n+        super.setElementAt(value, index);\r\n+        Proxies.removed(this, rem, false);\r\n+    }\r\n+\r\n+    protected Object writeReplace() throws ObjectStreamException {\r\n+        if (_sm != null && _sm.isDetached())\r\n+            return this;\r\n+        return copy(this);\r\n+    }\r\n+}\r"},{"sha":"66c2d9e1640a64db68b37cb2a96dd3daf993bcd8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ReferentialIntegrityException.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ReferentialIntegrityException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ReferentialIntegrityException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ReferentialIntegrityException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Exception type reserved for violations of integrity constraints.\r\n+ *\r\n+ * @author Patrick Linskey\r\n+ */\r\n+public class ReferentialIntegrityException extends StoreException {\r\n+\r\n+    public static final int IV_UNKNOWN = 0;\r\n+    public static final int IV_DUPLICATE_OID = 1;\r\n+    public static final int IV_UNIQUE = 2;\r\n+    public static final int IV_REFERENCE = 3;\r\n+    public static final int IV_MIXED = 4;\r\n+    private static final transient Localizer _loc = Localizer.forPackage\r\n+        (ReferentialIntegrityException.class);\r\n+    private int _iv = IV_UNKNOWN;\r\n+\r\n+    public ReferentialIntegrityException() {\r\n+    }\r\n+\r\n+    public ReferentialIntegrityException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public ReferentialIntegrityException(int iv) {\r\n+        this(getMessage(iv));\r\n+        setIntegrityViolation(iv);\r\n+    }\r\n+\r\n+    private static String getMessage(int iv) {\r\n+        switch (iv) {\r\n+            case IV_DUPLICATE_OID:\r\n+                return _loc.get(\"dup-oid\");\r\n+            case IV_UNIQUE:\r\n+                return _loc.get(\"unique\");\r\n+            default:\r\n+                return _loc.get(\"ref-integrity\");\r\n+        }\r\n+    }\r\n+\r\n+    public int getSubtype() {\r\n+        return REFERENTIAL_INTEGRITY;\r\n+    }\r\n+\r\n+    /**\r\n+     * The type of integrity violation that occurred.\r\n+     */\r\n+    public int getIntegrityViolation() {\r\n+        return _iv;\r\n+    }\r\n+\r\n+    /**\r\n+     * The type of integrity violation that occurred.\r\n+     */\r\n+    public ReferentialIntegrityException setIntegrityViolation(int iv) {\r\n+        _iv = iv;\r\n+        return this;\r\n+    }\r\n+\r\n+    private void writeObject(ObjectOutputStream out) throws IOException {\r\n+        out.writeInt(_iv);\r\n+    }\r\n+\r\n+    private void readObject(ObjectInputStream in)\r\n+        throws IOException, ClassNotFoundException {\r\n+        _iv = in.readInt();\r\n+    }\r\n+}\r"},{"sha":"d6bed3b88b6ae1a2aa77179a855d947197153399","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/RuntimeExceptionTranslator.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/RuntimeExceptionTranslator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/RuntimeExceptionTranslator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/RuntimeExceptionTranslator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,29 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+/**\r\n+ * Interface used by many facade helpers to translate exceptions.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ */\r\n+public interface RuntimeExceptionTranslator extends Serializable {\r\n+\r\n+    /**\r\n+     * Translate the given exception.\r\n+     */\r\n+    public RuntimeException translate(RuntimeException re);\r\n+}\r"},{"sha":"a3736fcaa2890956bd71d23014808e6d353dd3ae","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,154 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.OutputStream;\r\n+import java.io.Serializable;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Helper class to serialize and deserialize persistent objects,\r\n+ * subtituting oids into the serialized stream and subtituting the persistent\r\n+ * objects back during deserialization.\r\n+ *\r\n+ * @author Abe White\r\n+ * @nojavadoc\r\n+ * @since 3.3\r\n+ */\r\n+public class Serialization {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (Serialization.class);\r\n+\r\n+    /**\r\n+     * Serialize a value that might contain persistent objects. Replaces\r\n+     * persistent objects with their oids.\r\n+     */\r\n+    public static byte[] serialize(Object val, StoreContext ctx) {\r\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\n+        try {\r\n+            ObjectOutputStream objs = new PersistentObjectOutputStream(bytes,\r\n+                ctx);\r\n+            objs.writeObject(val);\r\n+            objs.flush();\r\n+            return bytes.toByteArray();\r\n+        } catch (Exception e) {\r\n+            throw new StoreException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Deserialize an object value from the given bytes.\r\n+     */\r\n+    public static Object deserialize(byte[] bytes, StoreContext ctx) {\r\n+        ByteArrayInputStream in = new ByteArrayInputStream(bytes);\r\n+        return deserialize(in, ctx);\r\n+    }\r\n+\r\n+    /**\r\n+     * Deserialize an object value from the given stream.\r\n+     */\r\n+    public static Object deserialize(InputStream in, StoreContext ctx) {\r\n+        try {\r\n+            if (ctx == null)\r\n+                return new ObjectInputStream(in).readObject();\r\n+            return new PersistentObjectInputStream(in, ctx).readObject();\r\n+        } catch (Exception e) {\r\n+            throw new StoreException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Object output stream that replaces persistent objects with their oids.\r\n+     */\r\n+    private static class PersistentObjectOutputStream\r\n+        extends ObjectOutputStream {\r\n+\r\n+        private StoreContext _ctx;\r\n+\r\n+        /**\r\n+         * Constructor; supply underlying stream.\r\n+         */\r\n+        public PersistentObjectOutputStream(OutputStream delegate,\r\n+            StoreContext ctx) throws IOException {\r\n+            super(delegate);\r\n+            _ctx = ctx;\r\n+            enableReplaceObject(true);\r\n+        }\r\n+\r\n+        protected Object replaceObject(Object obj) {\r\n+            Object oid = _ctx.getObjectId(obj);\r\n+            return (oid == null) ? obj : new ObjectIdMarker(oid);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Object input stream that replaces oids with their objects.\r\n+     */\r\n+    private static class PersistentObjectInputStream extends ObjectInputStream {\r\n+\r\n+        private final StoreContext _ctx;\r\n+\r\n+        /**\r\n+         * Constructor; supply source stream and broker to\r\n+         * use for persistent object lookups.\r\n+         */\r\n+        public PersistentObjectInputStream(InputStream delegate,\r\n+            StoreContext ctx) throws IOException {\r\n+            super(delegate);\r\n+            _ctx = ctx;\r\n+            enableResolveObject(true);\r\n+        }\r\n+\r\n+        protected Object resolveObject(Object obj) {\r\n+            if (!(obj instanceof ObjectIdMarker))\r\n+                return obj;\r\n+            Object oid = ((ObjectIdMarker) obj).oid;\r\n+            if (oid == null)\r\n+                return null;\r\n+            Object pc = _ctx.find(oid, null, null, null, 0);\r\n+            if (pc == null) {\r\n+                Log log = _ctx.getConfiguration().getLog\r\n+                    (OpenJPAConfiguration.LOG_RUNTIME);\r\n+                if (log.isWarnEnabled())\r\n+                    log.warn(_loc.get(\"bad-ser-oid\", oid));\r\n+                if (log.isTraceEnabled())\r\n+                    log.trace(new ObjectNotFoundException(oid));\r\n+            }\r\n+            return pc;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Marker for oids.\r\n+     */\r\n+    private static class ObjectIdMarker implements Serializable {\r\n+\r\n+        public Object oid;\r\n+\r\n+        public ObjectIdMarker(Object oid) {\r\n+            this.oid = oid;\r\n+        }\r\n+    }\r\n+}\r\n+\r"},{"sha":"5306f6ba2063fc5a8bc6252f3ce74bc5390e899b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ShortId.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ShortId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/ShortId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ShortId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * {@link OpenJPAId} subclass appropriate for short fields.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public final class ShortId extends OpenJPAId {\r\n+\r\n+    private final short key;\r\n+\r\n+    public ShortId(Class cls, Short key) {\r\n+        this(cls, (key == null) ? (short) 0 : key.shortValue());\r\n+    }\r\n+\r\n+    public ShortId(Class cls, String key) {\r\n+        this(cls, (key == null) ? (short) 0 : Short.parseShort(key));\r\n+    }\r\n+\r\n+    public ShortId(Class cls, short key) {\r\n+        super(cls);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public ShortId(Class cls, short key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public short getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return new Short(key);\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return Short.toString(key);\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return key;\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId o) {\r\n+        return key == ((ShortId) o).key;\r\n+    }\r\n+}\r"},{"sha":"252a975e65365a1f442ff15e74d3c0aa3360d4db","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Base exception for data store errors.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @since 2.5\r\n+ */\r\n+public class StoreException extends OpenJPAException {\r\n+\r\n+    public static final int LOCK = 1;\r\n+    public static final int OBJECT_NOT_FOUND = 2;\r\n+    public static final int OPTIMISTIC = 3;\r\n+    public static final int REFERENTIAL_INTEGRITY = 4;\r\n+    public static final int OBJECT_EXISTS = 5;\r\n+\r\n+    public StoreException() {\r\n+    }\r\n+\r\n+    public StoreException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public StoreException(Throwable cause) {\r\n+        super(cause);\r\n+    }\r\n+\r\n+    public StoreException(String msg, Throwable cause) {\r\n+        super(msg, cause);\r\n+    }\r\n+\r\n+    public int getType() {\r\n+        return STORE;\r\n+    }\r\n+}\r"},{"sha":"3899dde97c9079d430a6bd6e7a8f69e1a22b1a16","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StringId.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/StringId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/StringId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StringId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * {@link OpenJPAId} subclass appropriate for String fields.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public final class StringId extends OpenJPAId {\r\n+\r\n+    private final String key;\r\n+\r\n+    public StringId(Class cls, String key) {\r\n+        super(cls);\r\n+        this.key = (key == null) ? \"\" : key;\r\n+    }\r\n+\r\n+    public StringId(Class cls, String key, boolean subs) {\r\n+        super(cls, subs);\r\n+        this.key = (key == null) ? \"\" : key;\r\n+    }\r\n+\r\n+    public String getId() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public Object getIdObject() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return key;\r\n+    }\r\n+\r\n+    protected int idHash() {\r\n+        return key.hashCode();\r\n+    }\r\n+\r\n+    protected boolean idEquals(OpenJPAId o) {\r\n+        return key.equals(((StringId) o).key);\r\n+    }\r\n+}\r"},{"sha":"94b7d409d1464870d393c8b2af41987af0cfa631","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/UnsupportedException.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/UnsupportedException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/UnsupportedException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/UnsupportedException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Exception type for attempts to perform unsupported operations.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @since 2.5\r\n+ */\r\n+public class UnsupportedException extends OpenJPAException {\r\n+\r\n+    public UnsupportedException() {\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public UnsupportedException(String msg) {\r\n+        super(msg);\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public UnsupportedException(Throwable cause) {\r\n+        super(cause);\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public UnsupportedException(String msg, Throwable cause) {\r\n+        super(msg, cause);\r\n+        setFatal(true);\r\n+    }\r\n+\r\n+    public int getType() {\r\n+        return UNSUPPORTED;\r\n+    }\r\n+}\r"},{"sha":"c18478dd5620c255159be9a0699f87d2612486c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+/**\r\n+ * Base exception type for user errors.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @since 2.5\r\n+ */\r\n+public class UserException extends OpenJPAException {\r\n+\r\n+    public static final int METADATA = 1;\r\n+    public static final int INVALID_STATE = 2;\r\n+    public static final int NO_TRANSACTION = 3;\r\n+    public static final int CALLBACK = 4;\r\n+\r\n+    public UserException() {\r\n+    }\r\n+\r\n+    public UserException(String msg) {\r\n+        super(msg);\r\n+    }\r\n+\r\n+    public UserException(Throwable cause) {\r\n+        super(cause);\r\n+    }\r\n+\r\n+    public UserException(String msg, Throwable cause) {\r\n+        super(msg, cause);\r\n+    }\r\n+\r\n+    public int getType() {\r\n+        return USER;\r\n+    }\r\n+}\r"},{"sha":"ad4b9ca607297f45154cbbbb32981a33bd3ba046","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/package.html","status":"added","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/java/org/apache/openjpa/util/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,10 @@\n+<html>\n+<body>\n+<p><strong>OpenJPA Utilities</strong></p>\n+\n+<p>\n+    This package provides utilities to facilitate the handling of second\n+    class objects and OpenJPA object ids.\n+</p>\n+</body>\n+</html>"},{"sha":"8eb504a6d45ca9a6fae121037122549a501bbd48","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"added","additions":1224,"deletions":0,"changes":1224,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,1224 @@\n+/**\n+ *  An JP QL grammar parser.\n+ * \n+ *  Samples:\n+ *\t  SELECT COUNT(p) FROM Person AS p\n+ *\t  SELECT OBJECT(identifier) FROM schema identifier\n+ *\t  SELECT identifier FROM schema AS identifier\n+ *\t\n+ *\t@author Patrick Linskey\n+ *\t@author Marc Prud'hommeaux\n+ */\n+options {\n+\tNODE_PREFIX = \"JPQL\";\n+\tNODE_PACKAGE = \"org.apache.openjpa.kernel.jpql\";\n+\tMULTI = false;\n+\tNODE_DEFAULT_VOID = true;\n+\tJAVA_UNICODE_ESCAPE = true;\n+\tSTATIC = false;\n+\tNODE_USES_PARSER = true;\n+\n+\tLOOKAHEAD = 1;\n+\n+\n+\t// debugging variables\n+\t// DEBUG_PARSER = true; \t\t// simple parser debug\n+\t// DEBUG_TOKEN_MANAGER = true; \t// more verbose token manager debug\n+\t// DEBUG_LOOKAHEAD = true; \t\t// more verbose lookahead debug\n+\n+\tSANITY_CHECK = true; // check for left-recursion, etc (must always be true)\n+\n+\n+\t// FORCE_LA_CHECK = true;\n+}\n+\n+PARSER_BEGIN(JPQL)\n+package org.apache.openjpa.kernel.jpql;\n+\n+import java.io.*;\n+\n+\n+\n+/**\n+ *\t@nojavadoc\n+ */\n+public class JPQL\n+{\n+\tString jpql;\n+\n+\n+\tpublic JPQL (String jpql)\n+\t{\n+\t\tthis (new StringReader (jpql));\n+\n+\t\tthis.jpql = jpql;\n+\t}\n+\n+\n+\tpublic static void main (String[] args)\n+\t\tthrows Exception\n+\t{\n+\t\tif (args.length > 0)\n+\t\t{\n+\t\t\tfor (int i = 0; i < args.length; i++)\n+\t\t\t{\n+\t\t\t\tJPQL parser = new JPQL (args[i]);\n+\t\t\t\tSimpleNode ast = (SimpleNode) parser.parseQuery ();\n+\t\t\t\tast.dump (System.out, \"\");\n+\t\t\t}\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tJPQL parser = new JPQL (System.in);\n+\t\t\twhile (true)\n+\t\t\t{\n+\t\t\t\tSystem.out.print (\"Enter Expression: \");\n+\t\t\t\tSystem.out.flush ();\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\tSimpleNode ast = (SimpleNode) parser.parseQuery ();\n+\t\t\t\t\tif (ast == null)\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\telse\n+\t\t\t\t\t\tast.dump (System.out, \"\");\n+\t\t\t\t}\n+\t\t\t\tcatch (Throwable x)\n+\t\t\t\t{\n+\t\t\t\t\tx.printStackTrace ();\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+PARSER_END(JPQL)\n+\n+\n+SKIP :\n+{\n+ \t\" \"\n+\t| \"\\r\"\n+\t| \"\\t\"\n+}\n+\n+\n+TOKEN [ IGNORE_CASE ]: /* basics */\n+{\n+\t< COMMA: \",\" >\n+\n+\t|\t< DOT: \".\" >\n+\n+\t|\t< EQ: \"=\" >\n+\t|\t< NE: \"<>\" >\n+\t|\t< GT: \">\" >\n+\t|\t< GE: \">=\" >\n+\t|\t< LT: \"<\" >\n+\t|\t< LE: \"<=\" >\n+\n+\t|\t< PLUS: \"+\" >\n+\t|\t< MINUS: \"-\" >\n+\n+\t|\t< TIMES: \"*\" >\n+\t|\t< DIV: \"/\" >\n+\n+\t|\t< NEW: \"NEW\" >\n+\n+\t|\t< ALL: \"ALL\" >\n+\t|\t< ANY: \"ANY\" >\n+\t|\t< EXISTS: \"EXISTS\" >\n+\t|\t< SOME: \"SOME\" >\n+\t|\t< EMPTY: \"EMPTY\" >\n+\n+\t|\t< ASC: \"ASC\" >\n+\t|\t< DESC: \"DESC\" >\n+\t|\t< ORDER: \"ORDER\" >\n+\t|\t< BY: \"BY\" >\n+\n+\t|\t< IS: \"IS\" >\n+\t|\t< MEMBER: \"MEMBER\" >\n+\t|\t< OF: \"OF\" >\n+\t|\t< LIKE: \"LIKE\" >\n+\t|\t< ESCAPE: \"ESCAPE\" >\n+\t|\t< BETWEEN: \"BETWEEN\" >\n+\n+\t|\t< NULL: \"NULL\" >\n+}\n+\n+TOKEN [ IGNORE_CASE ]: /* aggregates */\n+{\n+\t< AVG: \"AVG\" >\n+\t|\t< MIN: \"MIN\" >\n+\t|\t< MAX: \"MAX\" >\n+\t|\t< SUM: \"SUM\" >\n+\t|\t< COUNT: \"COUNT\" >\n+}\n+\n+TOKEN [ IGNORE_CASE ]: /* boolean arithmetic */\n+{\n+\t< OR: \"OR\" >\n+\t|\t< AND: \"AND\" >\n+\t|\t< NOT: \"NOT\" >\n+}\n+\n+TOKEN [ IGNORE_CASE ]: /* functions returning strings */\n+{\n+\t< CONCAT: \"CONCAT\" >\n+\t|\t< SUBSTRING: \"SUBSTRING\" >\n+\t|\t< TRIM: \"TRIM\" >\n+\t|\t< LOWER: \"LOWER\" >\n+\t|\t< UPPER: \"UPPER\" >\n+}\n+\n+TOKEN [ IGNORE_CASE ]: /* trim specification */\n+{\n+\t< LEADING: \"LEADING\" >\n+\t|\t< TRAILING: \"TRAILING\" >\n+\t|\t< BOTH: \"BOTH\" >\n+}\n+\n+\n+TOKEN [ IGNORE_CASE ]: /* functions returning numerics */\n+{\n+\t< LENGTH: \"LENGTH\" >\n+\t|\t< LOCATE: \"LOCATE\" >\n+\t|\t< ABS: \"ABS\" >\n+\t|\t< SQRT: \"SQRT\" >\n+\t|\t< MOD: \"MOD\" >\n+\t|\t< SIZE: \"SIZE\" >\n+}\n+\n+\n+TOKEN [ IGNORE_CASE ]: /* functions returning datetime */\n+{\n+\t< CURRENT_DATE: \"CURRENT_DATE\" >\n+\t|\t< CURRENT_TIME: \"CURRENT_TIME\" >\n+\t|\t< CURRENT_TIMESTAMP: \"CURRENT_TIMESTAMP\" >\n+}\n+\n+TOKEN [ IGNORE_CASE ]: /* type of query */\n+{\n+\t< SELECT: \"SELECT\" >\n+\t|\t< DISTINCT: \"DISTINCT\" >\n+\t|\t< FROM: \"FROM\" >\n+\n+\t|\t< UPDATE: \"UPDATE\" >\n+\t|\t< DELETE: \"DELETE\" >\n+\n+\t|\t< WHERE: \"WHERE\" >\n+\t|\t< GROUP: \"GROUP\" >\n+\t|\t< HAVING: \"HAVING\" >\n+\n+\t|\t< AS: \"AS\" >\n+\t|\t< LEFT: \"LEFT\" >\n+\t|\t< OUTER: \"OUTER\" >\n+\t|\t< INNER: \"INNER\" >\n+\t|\t< JOIN: \"JOIN\" >\n+\t|\t< FETCH: \"FETCH\" >\n+\t|\t< IN: \"IN\" >\n+\t|\t< SET: \"SET\" >\n+\n+\t|\t< OBJECT: \"OBJECT\" >\n+}\n+\n+\n+/* inspired by the Java 1.0.2 specification */\n+/* ### should we limit this to the length that is valid in java? */\n+TOKEN : /* literals */\n+{\n+\t< INTEGER_LITERAL: (([\"0\"-\"9\"])+) ([\"l\",\"L\"])? >\n+\t| < DECIMAL_LITERAL:\n+\t\t((([\"0\"-\"9\"])* \".\" ([\"0\"-\"9\"])+) (<EXPONENT>)? ([\"f\",\"F\",\"d\",\"D\"])?\n+\t\t| (([\"0\"-\"9\"])+ \".\") (<EXPONENT>)? ([\"f\",\"F\",\"d\",\"D\"])?\n+\t\t| (([\"0\"-\"9\"])+) (<EXPONENT>) ([\"f\",\"F\",\"d\",\"D\"])?\n+\t\t| (([\"0\"-\"9\"])+) (<EXPONENT>)? ([\"f\",\"F\",\"d\",\"D\"])?) >\n+\t| < BOOLEAN_LITERAL: \"TRUE\" | \"FALSE\" | \"true\" | \"false\" >\n+\t| < EXPONENT: [\"e\",\"E\"] ([\"+\",\"-\"])? ([\"0\"-\"9\"])+ >\n+\t| < STRING_LITERAL: \"'\"\n+\t  ((\"''\" | ~[\"'\"])\n+\t\t/*\n+\t  ((\"''\" | ~[\"'\",\"\\\\\",\"\\n\",\"\\r\"])\n+\t\t| (\"\\\\\"\n+\t\t\t( [\"n\",\"t\",\"b\",\"r\",\"f\",\"\\\\\",\"'\"]\n+\t\t\t| [\"0\"-\"7\"] ( [\"0\"-\"7\"] )?\n+\t\t\t| [\"0\"-\"3\"] [\"0\"-\"7\"] [\"0\"-\"7\"]\n+\t\t\t)\n+\t\t  )\n+\t\t*/\n+\t  )*\n+\t  \"'\"\n+\t>\n+\t| < CHARACTER_LITERAL: \"'\"\n+\t  (   (~[\"'\",\"\\\\\",\"\\n\",\"\\r\"])\n+\t\t| (\"\\\\\"\n+\t\t\t( [\"n\",\"t\",\"b\",\"r\",\"f\",\"\\\\\",\"'\"]\n+\t\t\t| [\"0\"-\"7\"] ( [\"0\"-\"7\"] )?\n+\t\t\t| [\"0\"-\"3\"] [\"0\"-\"7\"] [\"0\"-\"7\"]\n+\t\t\t)\n+\t\t  )\n+\t  )\n+\t  \"'\"\n+\t>\n+}\n+\n+/* From the Java 1.0.2 specification */\n+TOKEN : /* IDENTIFIERS */\n+{\n+  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >\n+\t|\n+  < #LETTER:\n+\t  [\n+\t   \"\\u0024\", \t\t\t// $\n+\t   \"\\u0041\"-\"\\u005a\", \t// A-Z\n+\t   \"\\u005f\", \t\t\t// _\n+\t   \"\\u0061\"-\"\\u007a\", \t// a-z\n+\t   \"\\u00c0\"-\"\\u00d6\",\n+\t   \"\\u00d8\"-\"\\u00f6\",\n+\t   \"\\u00f8\"-\"\\u00ff\",\n+\t   \"\\u0100\"-\"\\u1fff\",\n+\t   \"\\u3040\"-\"\\u318f\",\n+\t   \"\\u3300\"-\"\\u337f\",\n+\t   \"\\u3400\"-\"\\u3d2d\",\n+\t   \"\\u4e00\"-\"\\u9fff\",\n+\t   \"\\uf900\"-\"\\ufaff\"\n+\t  ]\n+  >\n+\t|\n+  < #DIGIT:\n+\t  [\n+\t   \"\\u0030\"-\"\\u0039\", \t// 0-9\n+\t   \"\\u0660\"-\"\\u0669\",\n+\t   \"\\u06f0\"-\"\\u06f9\",\n+\t   \"\\u0966\"-\"\\u096f\",\n+\t   \"\\u09e6\"-\"\\u09ef\",\n+\t   \"\\u0a66\"-\"\\u0a6f\",\n+\t   \"\\u0ae6\"-\"\\u0aef\",\n+\t   \"\\u0b66\"-\"\\u0b6f\",\n+\t   \"\\u0be7\"-\"\\u0bef\",\n+\t   \"\\u0c66\"-\"\\u0c6f\",\n+\t   \"\\u0ce6\"-\"\\u0cef\",\n+\t   \"\\u0d66\"-\"\\u0d6f\",\n+\t   \"\\u0e50\"-\"\\u0e59\",\n+\t   \"\\u0ed0\"-\"\\u0ed9\",\n+\t   \"\\u1040\"-\"\\u1049\"\n+\t  ]\n+  >\n+}\n+\n+\n+Node parseQuery() : { }\n+{\n+\t(select_statement() | update_statement() | delete_statement()) <EOF>\n+\t{\n+\t\treturn jjtree.rootNode();\n+\t}\n+}\n+\n+\n+void select_statement() #SELECT : { }\n+{\n+\tselect_clause()\n+\t\tfrom_clause()\n+\t\t[where_clause()]\n+\t\t[groupby_clause()]\n+\t\t[having_clause()]\n+\t\t[orderby_clause()]\n+}\n+\n+\n+void update_statement() #UPDATE : { }\n+{\n+\tupdate_clause() [ where_clause() ]\n+}\n+\n+\n+void delete_statement() #DELETE : { }\n+{\n+\t<DELETE> <FROM> (from_item() #FROM) [where_clause()]\n+}\n+\n+\n+void from_clause() #FROM : { }\n+{\n+\t<FROM> identification_variable_declaration()\n+\t(<COMMA> (LOOKAHEAD(collection_member_declaration()) collection_member_declaration() | identification_variable_declaration()))*\n+}\n+\n+\n+void identification_variable_declaration(): { }\n+{\n+\tfrom_item() (LOOKAHEAD(fetch_join()) fetch_join() | LOOKAHEAD(inner_join()) inner_join() | LOOKAHEAD(outer_join()) outer_join())*\n+}\n+\n+\n+void from_item() #FROMITEM : { }\n+{\n+\tabstract_schema_name() [<AS>] [identification_variable()]\n+}\n+\n+\n+void inner_join() #INNERJOIN : { }\n+{\n+\t[<INNER>] <JOIN> path() [<AS>] identification_variable()\n+}\n+\n+\n+void collection_member_declaration() #INNERJOIN : { }\n+{\n+\t// synonymous with \"INNER JOIN path AS identifier\" (InnerJoin)\n+\t<IN> \"(\" path() \")\" [<AS>] identification_variable()\n+}\n+\n+\n+void outer_join() #OUTERJOIN : { }\n+{\n+\t<LEFT> [<OUTER>] <JOIN> path() [<AS>] identification_variable()\n+}\n+\n+\n+void fetch_join() : { }\n+{\n+\touter_fetch_join() | inner_fetch_join()\n+}\n+\n+\n+void outer_fetch_join() #OUTERFETCHJOIN : { }\n+{\n+\t<LEFT> [<OUTER>] <JOIN> <FETCH> path()\n+}\n+\n+\n+void inner_fetch_join() #INNERFETCHJOIN : { }\n+{\n+\t[<INNER>] <JOIN> <FETCH> path()\n+}\n+\n+\n+void path() #PATH : { }\n+{\n+\t// a path is any dot-separated path expression starting with a\n+\t// non-reserved word\n+\tidentification_variable() (<DOT> path_component())+\n+}\n+\n+\n+void update_clause() : { }\n+{\n+\t<UPDATE> from_item() #FROM set_clause()\n+}\n+\n+\n+void set_clause() : { }\n+{\n+\t<SET> update_item() (<COMMA> update_item())*\n+}\n+\n+\n+void update_item() #UPDATEITEM : { }\n+{\n+\tupdate_field() EQ() new_value()\n+}\n+\n+\n+void update_field() #UPDATEFIELD : { }\n+{\n+\t// identification_variable() (<DOT> path_component())+\n+\t[identification_variable() <DOT>] path_component()\n+}\n+\n+\n+void new_value() #UPDATEVALUE : { }\n+{\n+\tLOOKAHEAD(arithmetic_expression()) arithmetic_expression() |\n+\tLOOKAHEAD(string_primary()) string_primary() |\n+\tLOOKAHEAD(datetime_primary()) datetime_primary() |\n+\tLOOKAHEAD(boolean_primary()) boolean_primary() |\n+\tLOOKAHEAD(enum_primary()) enum_primary() |\n+\tLOOKAHEAD(simple_entity_expression()) simple_entity_expression() |\n+\t<NULL>\n+}\n+\n+\n+void simple_entity_expression() : { }\n+{\n+\tidentification_variable() | input_parameter()\n+}\n+\n+\n+void select_clause() #SELECTCLAUSE : { }\n+{\n+\t<SELECT> [distinct()] select_expressions()\n+}\n+\n+\n+void simple_select_clause() #SELECTCLAUSE : { }\n+{\n+\t<SELECT> [distinct()] select_expressions() \n+}\n+\n+\n+void select_expressions() #SELECTEXPRESSIONS : { }\n+{\n+\tselect_expression() (<COMMA> select_expression())*\n+}\n+\n+\n+void select_expression() #SELECTEXPRESSION : { }\n+{\n+\taggregate_select_expression()\n+\t\t| LOOKAHEAD(path()) path()\n+\t\t| identification_variable()\n+\t\t| (<OBJECT> \"(\" identification_variable() \")\")\n+\t\t| constructor_expression()\n+}\n+\n+\n+void constructor_expression() #CONSTRUCTOR : { }\n+{\n+\t<NEW> classname() constructor_parameters()\n+}\n+\n+\n+void classname() #CLASSNAME :\n+{ Token t; }\n+{\n+\tidentification_variable() (<DOT> identification_variable())*\n+}\n+\n+\n+void constructor_parameters() #CONSTRUCTORPARAMS : { }\n+{\n+\t\"(\" (constructor_parameter()) (<COMMA> (constructor_parameter()))* \")\" \n+}\n+\n+\n+void constructor_parameter() #CONSTRUCTORPARAM : { }\n+{\n+\t(path() | aggregate_select_expression())\n+}\n+\n+\n+/* rewritten to reduce lookaheads */\n+void aggregate_select_expression() #AGGREGATE : { }\n+{\n+\t(avg() | max() | min() | sum() | count())\n+}\n+\n+\n+void distinct() #DISTINCT : { }\n+{\n+\t<DISTINCT>\n+}\n+\n+\n+void aggregate_path() : { }\n+{\n+\t\"(\" (\n+\t\tLOOKAHEAD(arithmetic_expression()) arithmetic_expression() |\n+\t\tLOOKAHEAD(distinct_path()) distinct_path() |\n+\t\tLOOKAHEAD(path()) path() |\n+\t\tLOOKAHEAD(identification_variable()) identification_variable()\n+\t) \")\"\n+}\n+\n+\n+void distinct_path() #DISTINCTPATH : { }\n+{\n+\t<DISTINCT> (LOOKAHEAD(path()) path() | identification_variable())\n+}\n+\n+\n+void count() #COUNT : { }\n+{\n+\t<COUNT> aggregate_path()\n+}\n+\n+\n+void avg() #AVERAGE : { }\n+{\n+\t<AVG> aggregate_path()\n+}\n+\n+\n+void max() #MAX : { }\n+{\n+\t<MAX> aggregate_path()\n+}\n+\n+\n+void min() #MIN : { }\n+{\n+\t<MIN> aggregate_path()\n+}\n+\n+\n+void sum() #SUM : { }\n+{\n+\t<SUM> aggregate_path()\n+}\n+\n+\n+void where_clause() #WHERE : { }\n+{\n+\t<WHERE> conditional_expression() \n+}\n+\n+\n+void groupby_clause() #GROUPBY : { }\n+{\n+\t<GROUP> <BY> groupby_item()\n+\t\t(LOOKAHEAD(2) <COMMA> (groupby_item()))* \n+}\n+\n+\n+void groupby_item() : { }\n+{\n+\tpath() \n+}\n+\n+\n+void having_clause() #HAVING : { }\n+{\n+\t<HAVING> conditional_expression() \n+}\n+\n+\n+void subquery() #SUBSELECT : { }\n+{\n+\tsimple_select_clause()\n+\t\tfrom_clause() \n+\t\t[LOOKAHEAD(where_clause()) where_clause()] \n+\t\t[LOOKAHEAD(groupby_clause()) groupby_clause()] \n+\t\t[LOOKAHEAD(having_clause()) having_clause()] \n+}\n+\n+\n+/* changed to eliminate left recursion */\n+void conditional_expression() : { }\n+{\n+\tconditional_term() (LOOKAHEAD(2) <OR> (conditional_expression() #OR(2)))*\n+}\n+\n+\n+/* changed to eliminate left recursion */\n+void conditional_term() : { }\n+{\n+\tconditional_factor() (LOOKAHEAD(2) <AND> (conditional_term() #AND(2)))*\n+}\n+\n+\n+void conditional_factor() : { }\n+{\n+\tLOOKAHEAD(<NOT> conditional_primary())\n+\t(<NOT> conditional_primary() #NOT) | conditional_primary()\n+}\n+\n+\n+void conditional_primary() : { }\n+{\n+\tLOOKAHEAD(simple_cond_expression())\n+\tsimple_cond_expression() | \"(\" conditional_expression() \")\" \n+}\n+\n+\n+void simple_cond_expression() : { }\n+{\n+\tLOOKAHEAD(all_or_any_expression()) all_or_any_expression() |\n+\tLOOKAHEAD(exists_expression()) exists_expression() |\n+\tLOOKAHEAD(comparison_expression()) comparison_expression() | \n+\tLOOKAHEAD(between_expression()) between_expression() | \n+\tLOOKAHEAD(like_expression()) like_expression() | \n+\tLOOKAHEAD(in_expression()) in_expression() | \n+\tLOOKAHEAD(null_comparison_expression()) null_comparison_expression() | \n+\tLOOKAHEAD(empty_collection_comparison_expression()) empty_collection_comparison_expression() | \n+\tLOOKAHEAD(collection_member_expression()) collection_member_expression()\n+}\n+\n+\n+void between_expression() #BETWEEN : { }\n+{\n+\tLOOKAHEAD(3) arithmetic_expression()\n+\t\t[<NOT> { jjtThis.not = true; }] <BETWEEN> arithmetic_expression()\n+\t\t<AND> arithmetic_expression()\n+\t| LOOKAHEAD(3) string_expression()\n+\t\t[<NOT> { jjtThis.not = true; }] <BETWEEN> string_expression() <AND> string_expression()\n+\t| datetime_expression()\n+\t\t[<NOT> { jjtThis.not = true; }] <BETWEEN> datetime_expression() <AND> datetime_expression() \n+}\n+\n+\n+void in_expression() #IN : { }\n+{\n+\tpath() [<NOT> { jjtThis.not = true; }] <IN>\n+\t\t\"(\" (literal_or_param()\n+\t\t\t(<COMMA> (literal_or_param()))* | subquery())\n+\t\t\")\" \n+}\n+\n+\n+void literal_or_param() : { }\n+{\n+\t(numeric_literal()\n+\t| string_literal()\n+\t| boolean_literal()\n+\t| input_parameter())\n+}\n+\n+\n+void like_expression() #LIKE : { }\n+{\n+\tstring_value() [<NOT> { jjtThis.not = true; }] <LIKE> pattern_value() \n+}\n+\n+\n+void null_comparison_expression() #ISNULL : { }\n+{\n+\t(input_parameter() | path())\n+\t<IS> [<NOT> { jjtThis.not = true; }] <NULL> \n+}\n+\n+\n+void empty_collection_comparison_expression() #ISEMPTY : { }\n+{\n+\tpath() <IS> [<NOT> { jjtThis.not = true; }] <EMPTY> \n+}\n+\n+\n+void collection_member_expression() #MEMBEROF : { }\n+{\n+\t(LOOKAHEAD(path()) path() | input_parameter() | path_component()) \n+\t[<NOT> { jjtThis.not = true; }] <MEMBER> [<OF>] path()\n+}\n+\n+\n+void exists_expression() #EXISTS : { }\n+{\n+\t[<NOT> { jjtThis.not = true; }] <EXISTS> \"(\" subquery() \")\" \n+}\n+\n+\n+void all_or_any_expression() : { }\n+{\n+\tany_expression() | some_expression() | all_expression()\n+}\n+\n+\n+void any_expression() #ANY : { }\n+{\n+\t<ANY> \"(\" subquery() \")\" \n+}\n+\n+\n+void some_expression() #ANY : { }\n+{\n+\t// SOME and ANY are synonymous\n+\t<SOME> \"(\" subquery() \")\" \n+}\n+\n+\n+void all_expression() #ALL : { }\n+{\n+\t<ALL> \"(\" subquery() \")\" \n+}\n+\n+\n+void comparison_expression() : { }\n+{\n+\t// comparison_expression ::= string_value comparison_operator {string_expression | all_or_any_expression} | boolean_value { =|<>} {boolean_expression | all_or_any_expression} | datetime_primary comparison_operator {datetime_expression | all_or_any_expression} | entity_bean_value { = | <> } {entity_bean_expression | all_or_any_expression} | arithmetic_value comparison_operator {arithmetic_expression | all_or_any_expression\n+\n+\tLOOKAHEAD(arithmetic_comp()) arithmetic_comp() |\n+\tLOOKAHEAD(string_comp()) string_comp() |\n+\tLOOKAHEAD(boolean_comp()) boolean_comp() | \n+\tLOOKAHEAD(datetime_comp()) datetime_comp() |\n+\tLOOKAHEAD(entity_comp()) entity_comp()\n+}\n+\n+\n+void string_comp() : { }\n+{\n+\tstring_value() (\n+\t\t(<EQ> (string_expression()|all_or_any_expression()) #EQUALS(2))\n+\t\t| (<NE> (string_expression()|all_or_any_expression()) #NOTEQUALS(2))\n+\t\t)\n+}\n+\n+\n+void boolean_comp() : { }\n+{\n+\tboolean_value() (\n+\t(<EQ> (boolean_expression() | all_or_any_expression()) #EQUALS(2))\n+\t| (<NE> (boolean_expression() | all_or_any_expression()) #NOTEQUALS(2))\n+\t)\n+}\n+\n+\n+void entity_comp() : { }\n+{\n+\tentity_bean_value() (\n+\t(<EQ> ((LOOKAHEAD(all_or_any_expression()) all_or_any_expression() | entity_bean_expression()) #EQUALS(2)))\n+\t| (<NE> ((LOOKAHEAD(all_or_any_expression()) all_or_any_expression() | entity_bean_expression()) #NOTEQUALS(2)))\n+\t)\n+}\n+\n+\n+void arithmetic_comp() : { }\n+{\n+\t// arithmetic_value() (\n+\tarithmetic_factor() (\n+\t(<EQ> (arithmetic_expression() | all_or_any_expression()) #EQUALS(2))\n+\t| (<GT> (arithmetic_expression() | all_or_any_expression()) #GREATERTHAN(2))\n+\t| (<GE> (arithmetic_expression() | all_or_any_expression()) #GREATEROREQUAL(2))\n+\t| (<LT> (arithmetic_expression() | all_or_any_expression()) #LESSTHAN(2))\n+\t| (<LE> (arithmetic_expression() | all_or_any_expression()) #LESSOREQUAL(2))\n+\t| (<NE> (arithmetic_expression() | all_or_any_expression()) #NOTEQUALS(2))\n+\t)\n+}\n+\n+\n+void datetime_comp() : { }\n+{\n+\tdatetime_primary() (\n+\t(<EQ> (datetime_expression() | all_or_any_expression()) #EQUALS(2))\n+\t| (<GT> (datetime_expression() | all_or_any_expression()) #GREATERTHAN(2))\n+\t| (<GE> (datetime_expression() | all_or_any_expression()) #GREATEROREQUAL(2))\n+\t| (<LT> (datetime_expression() | all_or_any_expression()) #LESSTHAN(2))\n+\t| (<LE> (datetime_expression() | all_or_any_expression()) #LESSOREQUAL(2))\n+\t| (<NE> (datetime_expression() | all_or_any_expression()) #NOTEQUALS(2))\n+\t)\n+}\n+\n+\n+void arithmetic_value() : { }\n+{\n+\tpath() | functions_returning_numerics() | subquery() \n+}\n+\n+\n+/* changed to eliminate left recursion */\n+void arithmetic_expression() : { }\n+{\n+\tarithmetic_term()\n+\t\t((<PLUS> arithmetic_expression() #ADD(2))\n+\t\t| (<MINUS> arithmetic_expression() #SUBTRACT(2)))*\n+}\n+\n+\n+/* changed to eliminate left recursion */\n+void arithmetic_term() : { }\n+{\n+\tarithmetic_factor()\n+\t\t((<TIMES> arithmetic_term() #MULTIPLY(2))\n+\t\t| (<DIV> arithmetic_term() #DIVIDE(2)))*\n+}\n+\n+\n+void arithmetic_factor() : { }\n+{\n+\tnumeric_literal() | \n+\tinput_parameter() | \n+\tpath() |\n+\t\"(\" arithmetic_expression() \")\"  | \n+\tfunctions_returning_numerics() | \n+\tsubquery() \n+}\n+\n+\n+void negative() #NEGATIVE : { }\n+{\n+\t<MINUS>\n+}\n+\n+\n+void string_value() : { }\n+{\n+\tpath() | functions_returning_strings() | subquery() \n+}\n+\n+\n+void string_expression() : { }\n+{\n+\tinput_parameter() | string_primary()\n+}\n+\n+\n+void string_primary() : { }\n+{\n+\tpath() | string_literal() | \"(\" string_expression() \")\" | \n+\tfunctions_returning_strings() | subquery() \n+}\n+\n+\n+void datetime_expression() : { }\n+{\n+\tdatetime_primary() | \"(\" subquery() \")\"\n+}\n+\n+\n+void datetime_primary() : { }\n+{\n+\tpath() | functions_returning_datetime() | input_parameter()\n+}\n+\n+\n+void boolean_value() : { }\n+{\n+\tpath() | subquery() \n+}\n+\n+\n+void boolean_expression() : { }\n+{\n+\tboolean_primary() | \"(\" subquery() \")\"\n+}\n+\n+\n+void boolean_primary() : { }\n+{\n+\tpath() | boolean_literal() | input_parameter()\n+}\n+\n+\n+void enum_expression() : { }\n+{\n+\tenum_primary() | \"(\" subquery() \")\"\n+}\n+\n+\n+void enum_primary() : { }\n+{\n+\tpath()\n+\t| LOOKAHEAD(enum_literal()) enum_literal()\n+\t| LOOKAHEAD(input_parameter()) input_parameter()\n+}\n+\n+\n+void enum_literal() : { }\n+{\n+\tpath()\n+}\n+\n+\n+void entity_bean_value() : { }\n+{\n+\tLOOKAHEAD(path()) path() | path_component()\n+}\n+\n+\n+void entity_bean_expression() : { }\n+{\n+\tinput_parameter() | entity_bean_value()\n+}\n+\n+\n+void functions_returning_strings() : { }\n+{\n+\tconcat() | substring() | trim() | lower() | upper()\n+}\n+\n+\n+void concat() #CONCAT : { }\n+{\n+\t<CONCAT> \"(\" string_expression() <COMMA> string_expression() \")\"\n+}\n+\n+\n+void substring() #SUBSTRING : { }\n+{\n+\t<SUBSTRING> \"(\" string_expression() <COMMA> arithmetic_expression() <COMMA> arithmetic_expression() \")\"\n+}\n+\n+\n+void trim() #TRIM : { }\n+{\n+\t<TRIM> \"(\" [[trim_specification()] [trim_character()] <FROM>]\n+\t\tstring_expression() \")\"\n+}\n+\n+\n+void lower() #LOWER : { }\n+{\n+\t<LOWER> \"(\" string_expression() \")\"\n+}\n+\n+\n+void upper() #UPPER : { }\n+{\n+\t<UPPER> \"(\" string_expression() \")\"\n+}\n+\n+\n+\n+void trim_specification() : { }\n+{\n+\t(<LEADING> #TRIMLEADING) | (<TRAILING> #TRIMTRAILING) | (<BOTH> #TRIMBOTH)\n+}\n+\n+\n+void functions_returning_numerics() : { }\n+{\n+\tlength() | locate() | abs() | sqrt() | mod() | size()\n+}\n+\n+\n+void length() #LENGTH : { }\n+{\n+\t<LENGTH> \"(\" string_expression() \")\"\n+\n+}\n+\n+\n+void locate() #LOCATE : { }\n+{\n+\t<LOCATE> \"(\" string_expression() <COMMA> string_expression()\n+\t\t[<COMMA> arithmetic_expression()] \")\"\n+\n+}\n+\n+\n+void abs() #ABS : { }\n+{\n+\t<ABS> \"(\" arithmetic_expression() \")\"\n+\n+}\n+\n+\n+void sqrt() #SQRT : { }\n+{\n+\t<SQRT> \"(\" arithmetic_expression() \")\"\n+\n+}\n+\n+\n+void mod() #MOD : { }\n+{\n+\t<MOD> \"(\" arithmetic_expression() <COMMA> arithmetic_expression() \")\"\n+\n+}\n+\n+\n+void size() #SIZE : { }\n+{\n+\t<SIZE> \"(\" path() \")\"\n+}\n+\n+\n+void functions_returning_datetime() : { }\n+{\n+\t(<CURRENT_DATE> #CURRENTDATE)\n+\t| (<CURRENT_TIME> #CURRENTTIME)\n+\t| (<CURRENT_TIMESTAMP> #CURRENTTIMESTAMP)\n+}\n+\n+\n+void orderby_clause() #ORDERBY : { }\n+{\n+\t<ORDER> <BY> orderby_item() (<COMMA> orderby_item())* \n+}\n+\n+\n+void orderby_item() #ORDERBYITEM : { }\n+{\n+\tpath() [ <ASC> #ASCENDING | <DESC> #DESCENDING ]\n+}\n+\n+\n+void abstract_schema_name() #ABSTRACTSCHEMANAME : { }\n+{\n+\tpath_component() (<DOT> path_component())*\n+}\n+\n+\n+void tok() #TOK :\n+{ Token t; }\n+{\n+\tt = <IDENTIFIER> { jjtThis.setToken (t); }\n+}\n+\n+\n+void identification_variable() #IDENTIFIER :\n+{ Token t; }\n+{\n+\tt = <IDENTIFIER> { jjtThis.setToken (t); }\n+}\n+\n+\n+void path_component() #IDENTIFICATIONVARIABLE :\n+{ Token t; }\n+{\n+\t// unlike the identifier(), the path_component() *can* be a\n+\t// reserved word. E.g., Order.group.length is a perfectly\n+\t// valid path expression\n+\t(\n+\tt = <NEW>\n+\t| t = <ALL>\n+\t| t = <ANY>\n+\t| t = <EXISTS>\n+\t| t = <SOME>\n+\t| t = <EMPTY>\n+\t| t = <ASC>\n+\t| t = <DESC>\n+\t| t = <ORDER>\n+\t| t = <IS>\n+\t| t = <MEMBER>\n+\t| t = <OF>\n+\t| t = <LIKE>\n+\t| t = <ESCAPE>\n+\t| t = <BETWEEN>\n+\t| t = <NULL>\n+\t| t = <AVG>\n+\t| t = <MIN>\n+\t| t = <MAX>\n+\t| t = <SUM>\n+\t| t = <COUNT>\n+\t| t = <OR>\n+\t| t = <AND>\n+\t| t = <NOT>\n+\t| t = <CONCAT>\n+\t| t = <SUBSTRING>\n+\t| t = <TRIM>\n+\t| t = <LOWER>\n+\t| t = <UPPER>\n+\t| t = <LEADING>\n+\t| t = <TRAILING>\n+\t| t = <BOTH>\n+\t| t = <LENGTH>\n+\t| t = <LOCATE>\n+\t| t = <ABS>\n+\t| t = <SQRT>\n+\t| t = <MOD>\n+\t| t = <SIZE>\n+\t| t = <CURRENT_DATE>\n+\t| t = <CURRENT_TIME>\n+\t| t = <CURRENT_TIMESTAMP>\n+\t| t = <SELECT>\n+\t| t = <DISTINCT>\n+\t| t = <FROM>\n+\t| t = <UPDATE>\n+\t| t = <DELETE>\n+\t| t = <WHERE>\n+\t| t = <GROUP>\n+\t| t = <BY>\n+\t| t = <HAVING>\n+\t| t = <AS>\n+\t| t = <LEFT>\n+\t| t = <OUTER>\n+\t| t = <INNER>\n+\t| t = <JOIN>\n+\t| t = <FETCH>\n+\t| t = <IN>\n+\t| t = <SET>\n+\t| t = <OBJECT>\n+\t| t = <IDENTIFIER>\n+    ) { jjtThis.setToken (t); }\n+}\n+\n+\n+void numeric_literal() : { }\n+{\n+\tLOOKAHEAD(decimal_literal()) decimal_literal() | integer_literal()\n+}\n+\n+\n+void integer_literal() #INTEGERLITERAL :\n+{ Token t; }\n+{\n+\t[<PLUS> | negative()] t = <INTEGER_LITERAL> { jjtThis.setToken (t); }\n+}\n+\n+\n+void decimal_literal() #DECIMALLITERAL :\n+{ Token t; }\n+{\n+\t [<PLUS> | negative()] t = <DECIMAL_LITERAL> { jjtThis.setToken (t); }\n+}\n+\n+\n+void boolean_literal() #BOOLEANLITERAL :\n+{ Token t; }\n+{\n+\tt = <BOOLEAN_LITERAL> { jjtThis.setToken (t); }\n+}\n+\n+\n+void string_literal() #STRINGLITERAL :\n+{ Token t; }\n+{\n+\tt = <STRING_LITERAL> { jjtThis.setToken (t); }\n+}\n+\n+\n+void input_parameter() : { }\n+{\n+\tnamed_input_parameter() | positional_input_parameter()\n+}\n+\n+\n+void named_input_parameter() #NAMEDINPUTPARAMETER :\n+{ Token t; }\n+{\n+\t\":\" t = <IDENTIFIER> { jjtThis.setToken (t); }\n+}\n+\n+\n+void positional_input_parameter() #POSITIONALINPUTPARAMETER :\n+{ Token t; }\n+{\n+\t\"?\" t = <INTEGER_LITERAL> { jjtThis.setToken (t); }\n+}\n+\n+\n+void pattern_value() #PATTERNVALUE : { }\n+{\n+\tinput_parameter() | string_literal()\n+\t[(<ESCAPE> escape_character() #ESCAPECHARACTER)]\n+}\n+\n+\n+void escape_character() #ESCAPECHARACTER :\n+{ Token t; }\n+{\n+\tt = <STRING_LITERAL> { jjtThis.setToken (t); }\n+}\n+\n+\n+void trim_character() #TRIMCHARACTER :\n+{ Token t; }\n+{\n+\tt = <STRING_LITERAL> { jjtThis.setToken (t); }\n+}\n+\n+\n+void EQ() #EQUALS : { }\n+{\n+\t<EQ>\n+}\n+\n+\n+void NE() #NOTEQUALS : { }\n+{\n+\t<NE>\n+}\n+\n+\n+void GT() #GREATERTHAN : { }\n+{\n+\t<GT>\n+}\n+\n+\n+void GE() #GREATEROREQUAL : { }\n+{\n+\t<GE>\n+}\n+\n+\n+void LT() #LESSTHAN : { }\n+{\n+\t<LT>\n+}\n+\n+\n+void LE() #LESSOREQUAL : { }\n+{\n+\t<LE>\n+}"},{"sha":"94e2f7b2db018aff5c4e60ba59c418fe67e109e1","filename":"openjpa-kernel/src/main/resources/META-INF/services/org.apache.openjpa.kernel.exps.ExpressionParser","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/META-INF/services/org.apache.openjpa.kernel.exps.ExpressionParser","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/META-INF/services/org.apache.openjpa.kernel.exps.ExpressionParser","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/META-INF/services/org.apache.openjpa.kernel.exps.ExpressionParser?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1 @@\n+org.apache.openjpa.kernel.jpql.JPQLParser"},{"sha":"3a7ebce74bff3f838d7e615403a3161f62156848","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/abstractstore/localizer.properties","status":"added","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/abstractstore/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/abstractstore/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/abstractstore/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,2 @@\n+no-store-manager: Your configuration is missing the required \"{0}\" property \\\n+\tnaming the concrete store manager to use to interact with your data store."},{"sha":"0a3a3906ae224bd61b0680c0353d370df852b014","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ant/localizer.properties","status":"added","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/ant/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/ant/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ant/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,2 @@\n+bad-conf: The options supplied to the {0} are not valid. Please check your \\\n+\tant build file."},{"sha":"f4c6d66a7acdb120fcf7b41cb2b3b4d6503c8115","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"added","additions":513,"deletions":0,"changes":513,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,513 @@\n+ClassResolver-name: Class resolver\n+ClassResolver-desc: The org.apache.openjpa.util.ClassResolver implementation that should be \\\n+\tused for class resolution.  Defaults to a spec-compliant resolver.\n+ClassResolver-type: General\n+ClassResolver-cat: JDO.Classes\n+ClassResolver-displayorder: 50\n+ClassResolver-expert: true\n+ClassResolver-interface: org.apache.openjpa.util.ClassResolver\n+\n+BrokerFactory-name: BrokerFactory implementation\n+BrokerFactory-desc: The name of the org.apache.openjpa.kernel.BrokerFactory class that \\\n+\tOpenJPAHelper.getBrokerFactory should create.  Typically \\\n+\torg.apache.openjpa.jdbc.kernel.JDBCBrokerFactory\n+BrokerFactory-type: JDO\n+BrokerFactory-cat: JDO.Advanced\n+BrokerFactory-displayorder: 50\n+\n+BrokerImpl-name: Broker implementation\n+BrokerImpl-desc: Broker plugin and properties.  If you use a custom class, it \\\n+\tmust extend org.apache.openjpa.kernel.BrokerImpl.\n+BrokerImpl-type: General\n+BrokerImpl-cat: JDO.Advanced\n+BrokerImpl-displayorder: 50\n+BrokerImpl-expert: true\n+BrokerImpl-interface: org.apache.openjpa.kernel.BrokerImpl\n+\n+DataCache-name: Data cache\n+DataCache-desc: Plugin used to cache data loaded from the data store. Must \\\n+\timplement org.apache.openjpa.datacache.DataCache.\n+DataCache-type: General\n+DataCache-cat: Cache\n+DataCache-displayorder: 50\n+DataCache-expert: true\n+DataCache-interface: org.apache.openjpa.datacache.DataCache\n+\n+DataCacheTimeout-name: Default data cache timeout\n+DataCacheTimeout-desc: The number of milliseconds that data in the data cache \\\n+\tis valid for. A value of 0 or less means that by default, cached data does \\\n+\tnot time out.\n+DataCacheTimeout-type: General\n+DataCacheTimeout-cat: Cache\n+DataCacheTimeout-displayorder: 50\n+DataCacheTimeout-expert: true\n+\n+QueryCache-name: Query cache\n+QueryCache-desc: Plugin used to cache query results loaded from the data \\\n+\tstore. Must implement org.apache.openjpa.datacache.QueryCache.\n+QueryCache-type: General\n+QueryCache-cat: Cache.Queries\n+QueryCache-displayorder: 50\n+QueryCache-expert: true\n+QueryCache-interface: org.apache.openjpa.datacache.QueryCache\n+\n+QueryCompilationCache-name: Query compilation cache\n+QueryCompilationCache-desc: Plugin used to cache query compilation data. \\\n+\tMust implement java.util.Map. Does not need to be thread-safe -- it will \\\n+\tbe wrapped via the Collections.synchronizedMap() method if it does not \\\n+\textend org.apache.openjpa.util.CacheMap.\n+QueryCompilationCache-type: General\n+QueryCompilationCache-cat: Cache.Queries\n+QueryCompilationCache-displayorder: 50\n+QueryCompilationCache-expert: true\n+QueryCompilationCache-interface: java.util.Map\n+\n+RemoteCommitProvider-name: Remote commit provider\n+RemoteCommitProvider-desc: Plugin used to communicate commit information \\\n+\tamong JVMs. Must implement org.apache.openjpa.event.RemoteCommitProvider.\n+RemoteCommitProvider-type: General\n+RemoteCommitProvider-cat: Cache\n+RemoteCommitProvider-displayorder: 50\n+RemoteCommitProvider-expert: true\n+RemoteCommitProvider-interface: org.apache.openjpa.event.RemoteCommitProvider\n+\n+TransactionMode-name: Transaction mode\n+TransactionMode-desc: Either \"local\" or \"managed\".\n+TransactionMode-type: Connecting\n+TransactionMode-cat: JDO.Transactions\n+TransactionMode-displayorder: 50\n+\n+ManagedRuntime-name: Managed runtime\n+ManagedRuntime-desc: Plugin used to integrate with an external transaction \\\n+\tmanager.  Must implement org.apache.openjpa.kernel.ManagedRuntime.\n+ManagedRuntime-type: General\n+ManagedRuntime-cat: JDO.Advanced\n+ManagedRuntime-displayorder: 50\n+ManagedRuntime-expert: true\n+ManagedRuntime-interface: org.apache.openjpa.ee.ManagedRuntime\n+\n+FetchBatchSize-name: Default fetch batch size\n+FetchBatchSize-desc: The number of rows that will be pre-fetched when \\\n+\tan element in a result is accessed.  Use -1 to pre-fetch all results.\n+FetchBatchSize-type: Optimization\n+FetchBatchSize-cat: Fetching\n+FetchBatchSize-displayorder: 50\n+FetchBatchSize-expert: true\n+\n+FetchGroups-name: Fetch groups to add to default fetch group\n+FetchGroups-desc: A comma-separated list of fetch group names that wll be \\\n+\tloaded by default when fetching data from the data store.\n+FetchGroups-type: Optimization\n+FetchGroups-cat: Fetching\n+FetchGroups-displayorder: 50\n+FetchGroups-expert: true\n+\n+FlushBeforeQueries-name: Automatically flush changes before queries\n+FlushBeforeQueries-desc: Whether or not OpenJPA should automatically flush \\\n+\tmodifications to the data store before executing queries.\n+FlushBeforeQueries-type: General\n+FlushBeforeQueries-cat: Queries\n+FlushBeforeQueries-displayorder: 50\n+FlushBeforeQueries-expert: true\n+\n+LockTimeout-name: Object lock timeout\n+LockTimeout-desc: The number of milliseconds to wait for an object lock before \\\n+\tthrowing an exception, or -1 for no limit.\n+LockTimeout-type: Optimization\n+LockTimeout-cat: Locking\n+LockTimeout-displayorder: 50\n+LockTimeout-expert: true\n+\n+ReadLockLevel-name: Default transactional read lock level\n+ReadLockLevel-desc: The default lock level to use when loading objects within \\\n+\tnon-optimistic transactions.  Set to none, read, write, or the numeric \\\n+\tvalue of the desired lock level for your lock manager.\n+ReadLockLevel-type: Optimization\n+ReadLockLevel-cat: Locking\n+ReadLockLevel-displayorder: 50\n+ReadLockLevel-expert: true\n+\n+WriteLockLevel-name: Default transactional write lock level\n+WriteLockLevel-desc: The default lock level to use when changing objects \\\n+\twithin non-optimistic transactions.  Set to none, read, write, or the \\\n+\tnumeric value of the desired lock level for your lock manager.\n+WriteLockLevel-type: Optimization\n+WriteLockLevel-cat: Locking\n+WriteLockLevel-displayorder: 50\n+WriteLockLevel-expert: true\n+\n+Sequence-name: Default system sequence\n+Sequence-desc: The default org.apache.openjpa.runime.Seq for system use.\n+Sequence-type: General\n+Sequence-cat: Mappings.Defaults\n+Sequence-displayorder: 50\n+Sequence-expert: true\n+Sequence-interface: org.apache.openjpa.kernel.Seq\n+\n+AutoClear-name: Auto clear values\n+AutoClear-desc: If \"datastore\", an object''s field values clears when it \\\n+\tenters a datastore transaction.  If \"all\", object field values also \\\n+\tclear when entering optimistic transactions.\n+AutoClear-type: General\n+AutoClear-cat: JDO.Transactions.Advanced\n+AutoClear-displayorder: 50\n+\n+ConnectionRetainMode-name: Connection retain mode\n+ConnectionRetainMode-desc: This property dictates when OpenJPA will retain and \\\n+\trelease data store connections.  Available options are \"on-demand\" for \\\n+\tretaining a connection only during pessimistic transactions and data store \\\n+\toperations, \"transaction\" for retaining a connection for the life of each \\\n+\ttransaction, or \"always\" to indicate that a persistence context should \\\n+\tretain and reuse a single connection for its entire lifespan.\n+ConnectionRetainMode-type: Connecting\n+ConnectionRetainMode-cat: Connecting.Advanced\n+ConnectionRetainMode-displayorder: 50\n+ConnectionRetainMode-expert: true\n+\n+FilterListeners-name: Query filter listeners\n+FilterListeners-desc: A comma-separated list of query filter listeners to add \\\n+\tto the default list of extensions.  Each listener must implement the \\\n+\torg.apache.openjpa.kernel.FilterListener interface.\n+FilterListeners-type: General\n+FilterListeners-cat: Queries.Extensions\n+FilterListeners-displayorder: 50\n+FilterListeners-expert: true\n+\n+AggregateListeners-name: Query aggregate listeners\n+AggregateListeners-desc: A comma-separated list of query aggregate listeners \\\n+\tto add to the default list of extensions.  Each listener must implement \\\n+\tthe org.apache.openjpa.kernel.AggregateListener interface.\n+AggregateListeners-type: General\n+AggregateListeners-cat: Queries.Extensions\n+AggregateListeners-displayorder: 50\n+AggregateListeners-expert: true\n+\n+RetryClassRegistration-name: Retry class registration\n+RetryClassRegistration-desc: Whether to log a warning and defer registration \\\n+\twhen a registered persistent class cannot be processed, instead of \\\n+\tthrowing an exception.  Should only be set to true under complex \\\n+\tclassloader topologies that are causing registration errors.\n+RetryClassRegistration-type: General\n+RetryClassRegistration-cat: JDO.Classes\n+RetryClassRegistration-displayorder: 60\n+RetryClassRegistration-expert: true\n+\n+ProxyManager-name: Proxy manager\n+ProxyManager-desc: Plugin used to proxy second class object fields of managed \\\n+\tinstances.  Must implement org.apache.openjpa.util.ProxyManager.\n+ProxyManager-type: General\n+ProxyManager-cat: JDO.Advanced\n+ProxyManager-displayorder: 50\n+ProxyManager-expert: true\n+\n+ConnectionProperties-name: Connection properties\n+ConnectionProperties-desc: A comma-separated list of properties to be passed \\\n+\tto the database driver when obtaining a connection. Properties are of the \\\n+\tform \"key=value\".  If the given driver class is a DataSource, these \\\n+\tproperties will be used to configure the bean properties of the DataSource. \n+ConnectionProperties-type: Connecting\n+ConnectionProperties-cat: Connecting.Advanced\n+ConnectionProperties-displayorder: 50\n+\n+ConnectionFactoryMode-name: ConnectionFactory mode\n+ConnectionFactoryMode-desc: The type of data source in use.  Available options \\\n+\tare \"local\" for a standard data source under OpenJPA''s control, or \\\n+\t\"managed\" for a data source managed by an application server and \\\n+\tautomatically enlisted in global transactions.\n+ConnectionFactoryMode-type: Connecting\n+ConnectionFactoryMode-cat: Database.Transactions\n+ConnectionFactoryMode-displayorder: 50\n+ConnectionFactoryMode-expert: true\n+\n+ConnectionFactoryProperties-name: Connection factory properties\n+ConnectionFactoryProperties-desc: A comma-separated list of properties \\\n+\tused to configure the javax.sql.DataSource used as the ConnectionFactory. \\\n+\tEach property should be of the form \"key=value\", where \"key\" is the name \\\n+\tof some bean-like property of the data source.\n+ConnectionFactoryProperties-type: Connecting\n+ConnectionFactoryProperties-cat: Connecting.Advanced\n+ConnectionFactoryProperties-displayorder: 50\n+\n+Connection2UserName-name: Unmanaged connection username\n+Connection2UserName-desc: The username for the connection listed in \\\n+\tConnection2URL.\n+Connection2UserName-type: Connecting\n+Connection2UserName-cat: Connecting.XA\n+Connection2UserName-displayorder: 50\n+Connection2UserName-expert: true\n+\n+Connection2Password-name: Unmanaged connection password\n+Connection2Password-desc: The password for the user specified in \\\n+\tConnection2UserName\n+Connection2Password-type: Connecting\n+Connection2Password-cat: Connecting.XA\n+Connection2Password-displayorder: 50\n+Connection2Password-expert: true\n+\n+Connection2URL-name: Unmanaged connection URL\n+Connection2URL-desc: The URL for the unmanaged data source.\n+Connection2URL-type: Connecting\n+Connection2URL-cat: Connecting.XA\n+Connection2URL-displayorder: 50\n+Connection2URL-expert: true\n+\n+Connection2DriverName-name: Unmanaged connection driver\n+Connection2DriverName-desc: The class name of the database driver, or an \\\n+\tinstance of a DataSource to use to connect to the unmanaged data source.\n+Connection2DriverName-type: Connecting\n+Connection2DriverName-cat: Connecting.XA\n+Connection2DriverName-displayorder: 50\n+Connection2DriverName-expert: true\n+\n+Connection2Properties-name: Non-XA connection properties\n+Connection2Properties-desc: A comma-separated list of properties to be passed \\\n+\tto the unmanaged database driver when obtaining a connection. Properties \\\n+\tare of the form \"key=value\".  If the given driver class is a DataSource, \\\n+\tthese properties will be used to configure the bean properties of the \\\n+\tDataSource. \n+Connection2Properties-type: Connecting\n+Connection2Properties-cat: Connecting.XA\n+Connection2Properties-displayorder: 50\n+Connection2Properties-expert: true\n+\n+ConnectionFactory2Properties-name: Unmanaged connection factory properties\n+ConnectionFactory2Properties-desc: A comma-separated list of properties \\\n+\tused to configure the javax.sql.DataSource used as the unmanaged \\\n+\tConnectionFactory. Each property should be of the form \"key=value\", \\\n+\twhere \"key\" is the name of some bean-like property of the data source.\n+ConnectionFactory2Properties-type: Connecting\n+ConnectionFactory2Properties-cat: Connecting.XA\n+ConnectionFactory2Properties-displayorder: 50\n+ConnectionFactory2Properties-expert: true\n+\n+Optimistic-name: Optimistic transactions\n+Optimistic-desc: Selects between optimistic and pessimistic (data store) \\\n+\ttransactional modes.\n+Optimistic-type: JDO\n+Optimistic-cat: JDO.Transactions\n+Optimistic-displayorder: 50\n+\n+RetainState-name: Retain values\n+RetainState-desc: If true, then fields in a persistence-capable object that \\\n+\thave been read during a transaction must be preserved in memory after the \\\n+\ttransaction commits. Otherwise, persistence-capable objects must \\\n+\ttransition to the hollow state upon commit, meaning that subsequent reads \\\n+\twill result in a database round-trip.\n+RetainState-type: JDO\n+RetainState-cat: JDO.Transactions.Advanced\n+RetainState-displayorder: 50\n+\n+RestoreState-name: Restore state\n+RestoreState-desc: If true, then immutable fields in a persistence-capable \\\n+\tobject that have been changed during a transaction will be restored to \\\n+\ttheir original values upon a rollback. If set to \"all\", mutable fields \\\n+\twill also be restored.  If false, the values will not be changed upon \\\n+\trollback.\n+RestoreState-type: JDO\n+RestoreState-cat: JDO.Transactions.Advanced\n+RestoreState-displayorder: 50\n+\n+AutoDetach-name: Auto detach\n+AutoDetach-desc: A comma separated list of events upon which the managed \\\n+\tinstances will be automatically detached.  Events are \"close\", \"commit\", \\\n+\tand \"nontx-read\".\n+AutoDetach-type: General\n+AutoDetach-cat: Optimization\n+AutoDetach-displayorder: 50\n+AutoDetach-expert: true\n+\n+DetachState-name: Detach states\n+DetachState-desc: Plugin describing the set of field values which will be \\\n+\tincluded in the default detach and related options.  These states are \\\n+\t\"loaded\", \"all\", and \"fgs\".\n+DetachState-type: General\n+DetachState-cat: Optimization\n+DetachState-displayorder: 50\n+DetachState-expert: true\n+\n+IgnoreChanges-name: Ignore changes\n+IgnoreChanges-desc: If false, then OpenJPA must consider modifications, \\\n+\tdeletions, and additions in the current trasnaction when executing a \\\n+\tquery.  Else, OpenJPA is free to ignore changes and execute the query \\\n+\tdirectly against the data store.\n+IgnoreChanges-type: JDO\n+IgnoreChanges-cat: Queries\n+IgnoreChanges-displayorder: 50\n+\n+NontransactionalRead-name: Non-transactional read\n+NontransactionalRead-desc: If true, then it is possible to read \\\n+\tpersistent data outside the context of a transaction. Otherwise, a \\\n+\ttransaction must be in progress in order read data.\n+NontransactionalRead-type: JDO\n+NontransactionalRead-cat: JDO.Transactions\n+NontransactionalRead-displayorder: 50\n+\n+NontransactionalWrite-name: Non-transactional write\n+NontransactionalWrite-desc: If true, then it is possible to write to \\\n+\tfields of a persistent-nontransactional object when a transaction is not \\\n+\tin progress. If false, such a write will result in an exception.\n+NontransactionalWrite-type: JDO\n+NontransactionalWrite-cat: JDO.Transactions\n+NontransactionalWrite-displayorder: 50\n+\n+Multithreaded-name: Multithreaded\n+Multithreaded-desc: If true, then the application plans to have multiple \\\n+\tthreads simultaneously accessing a single context or object, so measures \\\n+\tmust be taken to ensure that the implementation is thread-safe. Otherwise, \\\n+\tthe implementation need not address thread safety.\n+Multithreaded-type: JDO\n+Multithreaded-cat: JDO.Optimization\n+Multithreaded-displayorder: 50\n+\n+ConnectionUserName-name: Connection username\n+ConnectionUserName-desc: The username for the connection listed in \\\n+\tConnectionURL.\n+ConnectionUserName-type: Connecting\n+ConnectionUserName-cat: Connecting\n+ConnectionUserName-displayorder: 50\n+\n+ConnectionPassword-name: Connection password\n+ConnectionPassword-desc: The password for the user specified in \\\n+\tConnectionUserName\n+ConnectionPassword-type: Connecting\n+ConnectionPassword-cat: Connecting\n+ConnectionPassword-displayorder: 50\n+\n+ConnectionURL-name: Connection URL\n+ConnectionURL-desc: The URL for the data source.\n+ConnectionURL-type: Connecting\n+ConnectionURL-cat: Connecting\n+ConnectionURL-displayorder: 50\n+\n+ConnectionDriverName-name: Connection driver\n+ConnectionDriverName-desc: The class name of the database driver, or an \\\n+\tinstance of a DataSource to use to connect to the data source.\n+ConnectionDriverName-type: Connecting\n+ConnectionDriverName-cat: Connecting\n+ConnectionDriverName-displayorder: 50\n+\n+ConnectionFactoryName-name: Connection factory name\n+ConnectionFactoryName-desc: The JNDI name of the connection factory to use \\\n+\tfor obtaining connections.\n+ConnectionFactoryName-type: Connecting\n+ConnectionFactoryName-cat: Connecting.Advanced\n+ConnectionFactoryName-displayorder: 50\n+\n+ConnectionFactory-name: Connection factory\n+ConnectionFactory-desc: The factory to use for obtaining datastore connections.\n+ConnectionFactory-type: Connecting\n+ConnectionFactory-cat: Connecting.Advanced\n+ConnectionFactory-displayorder: 50\n+\n+ConnectionFactory2Name-name: Unmanaged connection factory name\n+ConnectionFactory2Name-desc: The JNDI name of the connection factory to use \\\n+\tfor finding unmanaged connections.  If specified, this is the connection \\\n+\tthat will be used for obtaining sequence numbers.\n+ConnectionFactory2Name-type: Connecting\n+ConnectionFactory2Name-cat: Connecting.XA\n+ConnectionFactory2Name-displayorder: 50\n+ConnectionFactory2Name-expert: true\n+\n+ConnectionFactory2-name: Unmanaged connection factory\n+ConnectionFactory2-desc: The factory to use for obtaining unmanaged \\\n+\tdatastore connections.\n+ConnectionFactory2-type: Connecting\n+ConnectionFactory2-cat: Connecting.Advanced\n+ConnectionFactory2-displayorder: 50\n+\n+PersistenceServer-name: Remote persistence support\n+PersistenceServer-desc: Define the remote persistence server.\n+PersistenceServer-type: General\n+PersistenceServer-cat: JDO.Remote\n+PersistenceServer-displayorder: 50\n+PersistenceServer-expert: true\n+PersistenceServer-interface: org.apache.openjpa.lib.remote.Transport\n+\n+LockManager-name: Lock manager\n+LockManager-desc: Plugin used to handle acquiring locks on persistent \\\n+\tinstances.  Must implement org.apache.openjpa.kernel.LockManager.\n+LockManager-type: General\n+LockManager-cat: Locking\n+LockManager-displayorder: 50\n+LockManager-expert: true\n+LockManager-interface: org.apache.openjpa.kernel.LockManager\n+\n+Log-name: Log factory\n+Log-desc: LogFactory and configuration for OpenJPA''s logging needs.\n+Log-type: General\n+Log-cat: Logging\n+Log-displayorder: 50\n+Log-expert: false\n+Log-interface: org.apache.openjpa.lib.log.LogFactory\n+\n+InverseManager-name: Inverse manager\n+InverseManager-desc: Plugin used to manage inverse relations during flush. \\\n+\tSet to true to use the default inverse manager.  Custom inverse managers \\\n+\tmust extend org.apache.openjpa.kernel.InverseManager.\n+InverseManager-type: General\n+InverseManager-cat: JDO.Advanced\n+InverseManager-displayorder: 50\n+InverseManager-expert: true\n+InverseManager-interface: org.apache.openjpa.kernel.InverseManager\n+\n+SavepointManager-name: Savepoint manager\n+SavepointManager-desc: Plugin used to create and manage savepoints for \\\n+\tpartial rollback/commit support.  Defaults to \"in-mem\". Custom savepoint \\\n+\tmanagers must implement org.apache.openjpa.kernel.SavepointManager.\n+SavepointManager-type: General\n+SavepointManager-cat: JDO.Advanced\n+SavepointManager-displayorder: 50\n+SavepointManager-expert: true\n+SavepointManager-interface: org.apache.openjpa.kernel.SavepointManager\n+\n+OrphanedKeyAction-name: Orphaned key action\n+OrphanedKeyAction-desc: Action to take when OpenJPA discovers an orphaned key in \\\n+\tthe database.  May be a custom action implementing \\\n+\torg.apache.openjpa.event.OrphanedKeyAction.\n+OrphanedKeyAction-type: General\n+OrphanedKeyAction-cat: JDO.Advanced\n+OrphanedKeyAction-displayorder: 50\n+OrphanedKeyAction-expert: true\n+OrphanedKeyAction-interface: org.apache.openjpa.event.OrphanedKeyAction\n+\n+DynamicDataStructs-name: Dynamic data structs\n+DynamicDataStructs-desc: Whether to dynamically create custom structs to hold \\\n+\tand transfer persistent state in the OpenJPA data cache and remote \\\n+\tpersistence frameworks.  Dynamic structs can reduce data cache \\\n+\tmemory consumption, reduce the amount of data serialized back and forth \\\n+\tunder remote persistence, and improve the overall performance \\\n+\tof these systems.  However, they increase application warm-up time while \\\n+\tthe custom classes are generated and loaded into the JVM.  Set to true to \\\n+\tenable dynamic data structs.\n+DynamicDataStructs-type: General\n+DynamicDataStructs-cat: Optimization\n+DynamicDataStructs-displayorder: 50\n+DynamicDataStructs-expert: true\n+\n+MetaDataFactory-name: Metadata factory\n+MetaDataFactory-desc: The org.apache.openjpa.meta.MetaDataFactory that provides persistence \\\n+\tmetadata.\n+MetaDataFactory-type: General\n+MetaDataFactory-cat: Mappings\n+MetaDataFactory-displayorder: 50\n+MetaDataFactory-interface: org.apache.openjpa.meta.MetaDataFactory\n+\n+Mapping-name: Datastore mapping\n+Mapping-desc: The name of the datastore mapping to use.\n+Mapping-type: JDO\n+Mapping-cat: Mappings\n+Mapping-displayorder: 50\n+\n+Compatibility-name: Compatibility Information\n+Compatibility-desc: Details about various compatibiity options for the current \\\n+\tenvironment.\n+Compatibility-type: General\n+Compatibility-cat: JDO.Advanced\n+Compatibility-displayorder: 50\n+Compatibility-expert: true\n+Compatibility-interface: org.apache.openjpa.conf.Compatibility\n+\n+no-named-cf: use a DataSource bound to JNDI\n+diff-specs: Attempt to configure for multiple specifications.  Was configured \\\n+\tfor \"{0}\".  Attempt to now configure for \"{1}\".  This attempt will be \\\n+\tignored."},{"sha":"dba304d5d5e16e1c59c7c7884bbcfc381d5ee339","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/datacache/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,65 @@\n+removeall-byclass: The datacache does not support automatic removal of \\\n+\tsubclasses.\n+nested-exceps: This operation failed for some instances.  See the nested \\\n+\texceptions array for details.\n+exp-listener-ex: An exception was thrown while executing an expiration \\\n+\tlistener callback method. It was intercepted. The event framework \\\n+\tconsumes any exceptions that an ExpirationListener may throw.\n+interrupt: This thread has been interrupted.\n+cache-timeout: The value corresponding to key \"{0}\" has timed out.\n+cache-already-configured: Cannot invoke this method, as the cache has \\\n+\talready been configured.\n+invalid-type: Invalid cache type \"{0}\". Allowed types are \"distributed\", \\\n+\t\"replicated\", or \"named\".\n+cache-miss: Cache miss while looking up key \"{0}\".\n+cache-hit: Cache hit while looking up key \"{0}\".\n+cache-put: Put key \"{0}\" into cache.\n+cache-removeclass: Cache removing class \"{0}\".\n+cache-remove-miss: Cache miss while removing key \"{0}\".\n+cache-remove-hit: Cache hit while removing key \"{0}\".\n+cache-clear: Clearing datastore cache \"{0}\".\n+cache-pin-hit: Pinning key \"{0}\". Key is currently in the cache.\n+cache-pin-miss: Pinning key \"{0}\". Key is currently not in the cache.\n+cache-unpin-hit: Unpinning key \"{0}\". Key is currently in the cache.\n+cache-unpin-miss: Unpinning key \"{0}\". Key is currently not in the cache.\n+cache-expired: Key \"{0}\" was expired from the cache.\n+cache-commit: Performing a commit on the cache. Adding {0}, \\\n+\tupdating {1} and {2}, and removing {3}.\n+cache-stats: Usage statistics for cache {0}: hits: {1}; misses: {2}; hit \\\n+\tratio: {3}\n+list-closed: This operation cannot be performed on this list, as the list has \\\n+\tbeen closed.\n+query-cache-miss-evict: Query cache miss while looking up key \"{0}\". The \\\n+\tkey was in the cache, but the results have expired.\n+query-cache-miss: Query cache miss while looking up key \"{0}\".\n+query-cache-hit: Query cache hit while looking up key \"{0}\".\n+query-cache-put: Put key \"{0}\" into query cache.\n+query-cache-remove-miss: Query cache miss while removing key \"{0}\".\n+query-cache-remove-hit: Query cache hit while removing key \"{0}\".\n+query-cache-clear: Clearing query cache.\n+query-cache-key-expired: Key \"{0}\" has expired from the query cache.\n+query-cache-key-removed: Key \"{0}\" has been removed from the query cache.\n+reg-mbean: Registered MBean ({0}).\n+cant-reg-mbean: Unable to register Datastore Cache {0} MBean.\n+query-cache-name:  Query Cache\n+scheduler-start: Starting cache scheduler thread \"{0}\"...\n+scheduler-name: OpenJPA Cache Scheduler\n+scheduler-interval: Cache schedule thread will check every \"{0}\" min.\n+scheduler-clear: Scheduled cache eviction at time \"{1}\" for cache:\"{0}\"\n+scheduler-stop: Stopping scheduled cache eviction thread.\n+scheduler-fail: Cache scheduler thread unexpectedly interrupted. Stopping \\\n+\tscheduler.\n+bad-schedule: Invalid schedule string: \"{0}\"\n+not-number: Token \"{0}\" is not a valid number or wildcard (*) for schedule.\n+bad-count: Invalid number of tokens in string \"{0}\" for cache schedule.  \\\n+\tThere should be five tokens (minute, hour, dom, month, dow).\n+not-range: The token \"{0}\" is not in the valid range ({1}, {2}).\n+deserialize-classnotfound: Deserialization error, unable to find class.\n+no-default-cache: None of the data cache instances in the configuration \\\n+\tstring \"{0}\" are configured to be the default data cache. There must be \\\n+\tone and only one cache whose name is \"{1}\", or whose name is not specified.\n+multi-default-cache: More than one of the data cache instances in the \\\n+\tconfiguration string \"{0}\" are configured to be the default data cache. \\\n+\tThere must be one and only one cache whose name is \"{1}\", or whose name is \\\n+\tnot specified.\n+\t"},{"sha":"9fed26e044398a2548adb3246286e60974dc1d4a","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","status":"added","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,8 @@\n+tm-not-found: Could not perform automatic lookup of EJB container''s \\\n+\tjavax.transaction.TransactionManager implementation. Please ensure that \\\n+\tyou are running the application from within an EJB 1.1 compliant EJB \\\n+\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to the \\\n+\tappropriate value to obtain the TransactionManager.\n+expected-reference: Expected object to be of type Reference, but instead was \\\n+\t\"{0}\".\n+not-supported: This operation is not supported."},{"sha":"d390009af37bf0e92601e8dc3ce567ce2bf9da4c","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,96 @@\n+needs-runtime-enhance: \"{0}\" requires runtime enhancement: {1}\n+runtime-enhance-pcclasses: You have enabled runtime enhancement, but have not \\\n+\tspecified the set of persistent classes.  OpenJPA must look for metadata for \\\n+\tevery loaded class, which might increase class load times significantly.\n+running-all-classes: No targets were given.  Running on all classes listed in \\\n+\torg.apache.openjpa.PersistentClasses, or all metadata files in classpath directories if \\\n+\tthe property is not specified.\n+detach-custom-ser: Type \"{0}\" is set to detach on serialize, but implements \\\n+\ta custom readObject and/or writeObject method.  You cannot use custom \\\n+\tserialization with detachment. \n+detach-custom-extern: Type \"{0}\" is set to detach on serialize, but implements \\\n+\ta custom readExternal and/or writeExternal method.  You cannot use custom \\\n+\tserialization with detachment. \n+enhance-start: Enhancing type \"{0}\".\n+pc-type: Type \"{0}\" is already persistence capable; skipping.\n+pers-aware: Type \"{0}\" has no metadata; enhancing as persistence aware. \\\n+\tIf you intended for \"{0}\" to be persistence-capable, then this means that \\\n+\tOpenJPA could not find any metadata for \"{0}\". This can happen if the \\\n+\tdirectory containing your metadata is not in your CLASSPATH, or if your \\\n+\tmetadata files are not named properly. See the documentation on metadata \\\n+\tplacement for more information.\n+enhance-running: Enhancer running on type \"{0}\".\n+enhance-running-oids: Enhancer running on oid: {0}\n+enhance-aware: The class does not have metadata - enhanced as persistence-aware.\n+enhance-norun: The class is already persistence capable - no enhancement \\\n+\tperformed.\n+enhance-usage: Usage: java org.apache.openjpa.enhance.PCEnhancer\\n\\\n+\t\\t[-properties/-p <properties file or resource>]\\n\\\n+\t\\t[-<property name> <property value>]*\\n\\\n+\t\\t[-directory/-d <output directory>]\\n\\\n+\t\\t[-addDefaultConstructor/-adc <true/t | false/f>]\\n\\\n+\t\\t[-jdoEnhance/-jdo <true/t | false/f>]\\n\\\n+\t\\t[-enforcePropertyRestrictions/-epr <true/t | false/f>]\\n\\\n+\t\\t[-tmpClassLoader/-tcl <true/t | false/f>]\\n\\\n+\t\\t<class name | .java file | .class file | .jdo file>+ \n+enhance-defaultconst: The type \"{0}\" must have a no-args constructor.\n+enhance-adddefaultconst: The type \"{0}\" must have a no-args constructor. \\\n+\tAdding a {1} no-args constructor.\n+enhance-cloneable:The type \"{0}\" implements Cloneable but does not call \\\n+\tsuper.clone ().  Adding protected super.clone () invocation.\n+enhance-uid-access: An IllegalAccessException occured when trying to \\\n+\tobtain the serialVersionUID field for the class \"{0}\". This is a known \\\n+\tbug in JDK 1.4+ when using a custom ClassLoader to enhance a \\\n+\tclass that implements java.io.Serializable. If compatibility with \\\n+\tnon-enhanced versions of \"{0}\" is not needed, this warning can be ignored.\n+enhance-oid: Enhancing object id type \"{0}\" to allow member access. \n+cons-access: An error occurred trying to instantiate a custom storage class.\n+pcdata-generate: Generating dynamic PCData for type: \"{0}\"\n+pcdata-created: Dynamic PCData created: name=\"{0}\", for type=\"{1}\"\n+factory-not-oidloader: Attempt to run the application id tool under metadata \\\n+\tconfiguration that does not support it.  The application id tool can only \\\n+\trun under certain metadata factory settings.\n+str-cons: The id type \"{0}\" specfied by persistent type \"{1}\" does not have a \\\n+\tpublic string or class + string constructor.\n+appid-start: Generating an application id for type \"{0}\".\n+appid-invalid: Type \"{0}\" does not have metadata, does not use application \\\n+\tidentity, uses a built-in identity type, or inherits the identity class \\\n+\tfrom its superclass. \n+appid-warn: Type \"{0}\" does not have metadata, does not use application \\\n+\tidentity, or inherits the identity class from its superclass; skipping.\n+name-mult-args: When you supply the -name option, you must run the tool on \\\n+\texactly one class.  Attempt to run on multiple classes: {0}\n+no-id-class: Type \"{0}\" does not declare an id class.\n+no-pks: Type \"{0}\" does not declare any primary key fields.\n+appid-running: Application identity tool running on type \"{0}\".\n+appid-output: Writing application identity class to file \"{0}\". \n+appid-norun: No identity class was generated for this type.\n+appid-usage: Usage: java org.apache.openjpa.enhance.ApplicationIdTool\\n\\\n+\t\\t[-properties/-p <properties file or resource>]\\n\\\n+\t\\t[-<property name> <property value>]*\\n\\\n+\t\\t[-ignoreErrors/-i <true/t | false/f>]*\\n\\\n+\t\\t[-directory/-d <output directory>]\\n\\\n+\t\\t[-name/-n <id class name>]\\n\\\n+\t\\t[-suffix/-s <id class suffix>]\\n\\\n+\t\\t[-token/-t <token>]\\n\\\n+\t\\t[-codeFormat/-cf.<property name> <property value>]*\\n\\\n+\t\\t<class name | .java file | .class file | .jdo file>+ \n+appid-comment-for: Application identity class for: {0}\n+appid-comment-gen: Auto-generated by:\n+property-violations: Detected the following possible violations of the \\\n+\trestrictions placed on property access persistent types:\\n{0}\n+property-field-access: \"{1}\" uses property access, but its field \"{2}\" is \\\n+\taccessed directly in method \"{3}\" defined in \"{0}\".\n+property-bad-member: The member for for persistent property \"{0}\" was not \\\n+\ta method: \"{1}\".\n+property-no-getter: No getter method found for persistent property \"{0}\".  All \\\n+\tpersistent properties must have getter methods.\n+property-no-setter: No setter method found for persistent property \"{0}\", and \\\n+\tbytecode analysis of the getter did not reveal a clear backing field. \\\n+\tPlease create a setter method for this property (it may be private). \n+property-setter-getter-mismatch: Bytecode analysis of the setter and getter \\\n+\tmethods for persistent property \"{0}\" indicates that the two methods \\\n+\tmight be acting on different backing fields.  The setter method assigns to \\\n+\tfield \"{1}\", while the getter method returns field \"{2}\".\n+cft-exception-thrown: An exception was thrown while attempting to perform \\\n+\tclass file transformation on \"{0}\":"},{"sha":"5f167910014a3f9d4697c9a28cebaa865a6bfcf2","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,78 @@\n+orphaned-key-owner: Detected possible orphaned reference to deleted object \\\n+\t\"{0}\" in \"{1}\" of instance \"{2}\".\n+orphaned-key: Detected possible orphaned reference to deleted object \"{0}\" \\\n+\tin \"{1}\".\n+no-added-oids: You have attempted to access the added object Ids for \\\n+\tthis event, however the RemoteCommitProvider isn't configured to send \\\n+\tthem. You need to either update your RemoteCommitEventListerner, \\\n+\tor change your org.apache.openjpa.RemoteCommitProvider property so that it includes \\\n+\tthe option TransmitAddedObjectIds.\n+extent-only-event: You have attempted to access object Ids for an event \\\n+\tthat only carries information as extents for the modified objects.\n+nonextent-event: You have attempted to access extent information for an \\\n+\tevent that only carries information as object Ids.\n+no-provider: You have attempted to use a RemoteCommitListener without also \\\n+\tspecifying a RemoteCommitProvider.  In order to use a remote commit \\\n+\tlistener, you must configure a remote commit provider to use through the \\\n+\torg.apache.openjpa.RemoteCommitProvider configuration property.\n+remote-listener-ex: Exceptions were thrown while executing remote commit \\\n+\tlistener callback methods. They were consumed: {0}\n+jms-provider-config: Error creating a publisher or subscriber for JMS topic \\\n+\t\"{0}\". TopicConnectionFactory JNDI name: \"{1}\".\n+jms-close-error: Error closing connection for topic \"{0}\".\n+jms-close-listener: Stopped listening for remote commit information on \\\n+\ttopic \"{0}\".\n+jms-start-listener: Started listening for remote commit information on \\\n+\ttopic \"{0}\".\n+jms-sent-update: Sent JMS update to topic \"{0}\".\n+jms-send-error: Error broadcasting JMS update to topic \"{0}\". Remote \\\n+\tBrokerFactories may be out-of-date.\n+jms-received-update: Received JMS update on topic \"{0}\".\n+jms-receive-error-1: JMSException thrown while retrieving object from an \\\n+\tObjectMessage.\n+jms-receive-error-2: Received an unexpected object of type \"{0}\" on topic \"{1}\".\n+jms-receive-error-3: Received an unexpected message type on topic \"{0}\". \\\n+\tMessage class: \"{1}\".\n+jms-listener-error: Received notification of a JMS failure on topic \"{0}\".\n+jms-reconnect-attempt: Attempting to reconnect after JMS failure on topic \\\n+\t\"{0}\".  Attempt number: {1}\n+jms-reconnect-fail: Attempt to reconnect to JMS topic \"{0}\" failed. \n+jms-cant-reconnect: All attempts to reconnect to JMS topic \"{0}\" failed. \\\n+\tGiving up after {1} attempts.\n+jms-reconnected: Successfully reconnected to JMS topic \"{0}\" after failure.\n+tcp-payload-create-error: Error creating data to send to TCP provider.\n+tcp-accept-error: Error when attempting to accept connection from remote host.\n+tcp-not-equal: The provider configuration for this TCPRemoteCommitProvider is \\\n+\tnot the same as for another provider in the current JVM that is listening \\\n+\ton the same port. Port: \"{0}\".\n+tcp-listener-broken: The statically initialized provider listener is null. \\\n+\tThis means that the provider startup failed.\n+tcp-init-exception: An exception occurred while configuring the \\\n+\tTCPRemoteCommitProvider configured to listen on port \"{0}\".\n+tcp-sent-update: Sent TCP update to \"{0}\" using local port \"{1}\".\n+tcp-send-error: Error sending TCP update to \"{0}\".\n+tcp-send-still-error: Still unable to send TCP update to \"{0}\".\n+tcp-received-update: Received TCP update from \"{0}\".\n+tcp-receive-error: Exception thrown while receiving TCP update.\n+tcp-close-error: Exception thrown while closing TCP remote commit provider.\n+tcp-socket-option-error: Exception thrown while setting NODELAY option for \\\n+\tTCP remote commit provider.\n+tcp-close-listener: Stopped listening for remote commit information on \\\n+\tport \"{0}\".\n+tcp-received-connection: Received new connection from \"{0}\"\n+tcp-start-listener: Started listening for remote commit information on \\\n+\tport \"{0}\".\n+tcp-address-asself: Identified address of \"{0}\", which is equal to ourself.\n+tcp-address-set: Configured to send to peer \"{0}\"\n+tcp-received-event: Received event from peer \"{0}\"\n+tcp-open-connection: Creating new socket connection to \"{0}\", using local port \\\n+\t\"{1}\".\n+tcp-close-socket-error: Exception thrown while closing connection from \"{0}\".\n+tcp-close-socket: Closing connection from \"{0}\".\n+tcp-close-sending-socket: Closing transmission connection to \"{0}\" that was \\\n+\tusing local port \"{1}\".\n+tcp-close-pool-error: Exception thrown while closing connection pool.\n+tcp-wrong-version-error: Received packet from \"{0}\" with invalid version \\\n+\tnumber. Check if a prior release of OpenJPA is being used on this host.\n+bean-constructor: Could not instantiate class {0}.\n+method-notfound: Method \"{1}\" not found in class \"{0}\"."},{"sha":"c5eb98babeb08fb4f1a408bf0a0c6e92b65acd9e","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/exps/localizer.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/exps/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/exps/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/exps/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,18 @@\n+in-mem-subquery: Subqueries are not supported for queries that execute \\\n+\tin-memory.  If you do not intend for this query to execute in-memory, \\\n+\tconsider setting IgnoreCache to true for the query.\n+not-comp: The evaluation of the ordering expression of this query produced \\\n+\tnon-comparable values \"{0}\" and \"{1}\".  Please check that the ordering \\\n+\tclause is valid.\n+bad-wild: The wildcard string \"{0}\" is invalid.\n+bad-regexp: The regular expression string \"{0}\" is invalid.\n+agg-in-filter: If you use an aggregate function in a query filter, you must \\\n+\tmake sure to only invoke the aggregate on collections.\n+parse-error: An error occurred while parsing the query filter \"{1}\". \\\n+\tError message: {0}\n+non-numeric-path: field {0} of type {1}\n+non-numeric-value: value of type {0}\n+non-numeric-comparison: Filter invalid. Cannot compare {0} to {1}. Numeric \\\n+\tcomparisons must be between numeric types only. To enable such comparisons \\\n+\tfor backwards-compatibility, add \"QuotedNumbersInQueries=true\" to the \\\n+\torg.apache.openjpa.Compatibility setting in your configuration."},{"sha":"cdf471f5438df06f74d081cfb0006372070052da","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,40 @@\n+param-decs-invalid: JPQL does not support declared parameters.\n+bad-jpql: The JPQL string \"{0}\" is not valid.  \\\n+\tMake sure all parentheses are matched and that you use proper JPQL syntax.\n+bad-tree: The JPQL statement is not valid: encountered a node of type \\\n+\t\"{0}\".\n+parse-error: An error occurred while parsing the query filter ''{1}''. \\\n+\tError message: {0}\n+no-alias: The alias \"{0}\" was not declared in the statement (declared \\\n+\taliases are: {1}). All aliases must be declared in the \"from\" \\\n+\tsection of the JPQL statement.\n+cant-resolve-type: The entity \"{0}\" cannot be resolved; please ensure that \\\n+\tthe entity name has been declared for the class.\n+not-identifer: The specified node (\"{0}\") is not a valid identifier.\n+no-field: No field named \"{1}\" in class \"{0}\".\n+unaccessible-field: The field named \"{1}\" in class \"{0}\" could not be accessed.\n+multi-children: Expression \"{0}\" does not allow mutliple children (\"{1}\").\n+no-children: Expression \"{0}\" requires at least one child.\n+unknown-comp: Unknown comparison operator \"{0}\".\n+wrong-child-count: Wrong number of arguments to expression \\\n+\tof type \"{1}\": should have been {0}, but the following arguments \\\n+\twere specified: \"{2}\".\n+not-schema-name: The name \"{0}\" is not a recognized entity or identifier.\n+duplicate-alias: Alias \"{0}\" was declared twice.\n+unknown-type: Cannot determine the type of field \"{0}\".\n+unexpected-var: The variable \"{0}\" was found where a constant or \\\n+\tfield value was expected.\n+path-no-meta: Attempt to query field \"{0}\" from non-entity class \"{1}\".\n+not-yet-supported: Expressions of type \"{0}\" are not yet supported.\n+bad-positional-parameter: The positional parameter \"{0}\" is invalid. \\\n+\tPositional parameters must be integers greater than zero.\n+bad-candidate-type: Could not resolve entity named \"{0}\".\n+bad-result-type: Could not resolve result class named \"{0}\".\n+no-from-clause: No \"from\" clause in expression.\n+unrecognized-operation: Unknown query operation \"{0}\".\n+alias-required: An alias is required for the schema name \"{0}\" in \\\n+\tthe expression.\n+unknown-identifier: Undeclared identifier \"{0}\".\n+update-constant-value: Update expression \"{0}\" may only use literals \\\n+\tor parameters as update values.\n+bad-parse: Encountered \"{0}\" at character {1}, but expected: {2}."},{"sha":"30bbea2e74660e0ed8ebe693ddd4015f71818948","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"added","additions":328,"deletions":0,"changes":328,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,328 @@\n+cant-convert-result: There is no conversion between query projection type \\\n+\t\"{0}\" and result type \"{1}\".\n+unloaded-detached: Attempt to access an unloaded field of detached instance \\\n+\t\"{0}\".\n+meta-unknownid: Cannot manipulate identity of type \"{0}\": it''s identity type \\\n+\tis unknown.\n+new-abstract: Cannot create an instance of \"{0}\": abstract classes and \\\n+\tinterfaces are not yet supported.\n+bad-new-query: Attempt to construct a query from an extent or class.  You must \\\n+\tpass a (possibly null) query string or template to the query factory \\\n+\tmethod when creating the query. \n+update-restrict: Detected attempt to modify field \"{0}\" with value strategy \\\n+\t\"restrict\".\n+reentrant-flush: Detected reentrant flush.  Make sure your flush-time instance \\\n+\tcallback methods or event listeners do not invoke any operations that \\\n+\trequire the in-progress flush to complete.\n+rolled-back: The transaction has been rolled back.  See the nested exceptions \\\n+\tfor details on the errors that occurred.\n+bad-lock-level: This lock manager does not recognize lock level \"{0}\".\n+pessimistic-mutate: You are attempting to directly mutate a persistent second \\\n+\tclass object (such as a collection or map field) that you obtained before \\\n+\tthe transaction began.  After beginning a datastore transaction, you \\\n+\tmust re-obtain any references to mutable second class objects from the \\\n+\towning persistent object.  Detected attmpt to mutate value of field \"{0}\" \\\n+\tin instance \"{1}\".  This instance may not be locked correctly.\n+not-derefed: Encountered unknown dependent instance \"{0}\".  This error is \\\n+\toften caused by either removing a dependent instance from one dependent \\\n+\tfield, but not other dependent fields that reference it, or by removing a \\\n+\tdependent instance from its owning field, flushing \\\n+\t(causing the unreferenced dependent instance to be deleted), and then \\\n+\ttrying to assign the deleted instance to another field before commit.  \\\n+\tThe instance cannot be un-deleted, resulting in an error.  Make sure not \\\n+\tto leave dangling dependent references to objects, and to reassign \\\n+\tdependent objects before flush so that OpenJPA does not think they are \\\n+\tunreferenced and therefore safe to delete.\n+init-null-pc: Attempt to initialize a state manager with a null \\\n+\tpersistence-capable instance for type \"{0}\".  This is often caused by \\\n+\tattempting to load an instance of an abstract class, or \\\n+\tneglecting to use a class indicator when the base persistence-capable \\\n+\tclass in an inheritance tree is abstract.\n+init-sm-pc: Attempt to initialize a state manager with an instance that is \\\n+\talready managed (\"{0}\").  You might be trying to persist this instance \\\n+\tin two threads at the same time.\n+bad-ds-oid: The type \"{0}\" declares datastore identity but the value \\\n+\tpassed to lookup of type \"{1}\" is not a OpenJPA id instance.\n+null-oids: Some of the object ids passed to getObjectsById were null.\n+marked-rollback: The transaction cannot be committed, because it was already \\\n+\tmarked for rollback only.  The transaction will be rolled back instead.\n+refresh-flushed: You cannot refresh an instance that has been flushed to the \\\n+\tdata store.\n+pc-cast: Attempt to cast instance \"{0}\" to PersistenceCapable failed.  Ensure \\\n+\tthat it has been enhanced.\n+del-instance: The instance of type \"{0}\" with oid \"{1}\" no longer exists in \\\n+\tthe data store.  This may mean that you deleted the instance in a separate \\\n+\ttransaction, but this context still has a cached version.\n+no-broker-class: The specified type \"{0}\" could not be loaded. Please ensure \\\n+\tthat the class exists in the project class path.\n+bad-embed: Attempt to set an embedded value for unembeddable field \"{0}\". \\\n+\tPlease report this error to OpenJPA support.\n+embed-ref: You are attempting to access an embedded object reference \\\n+\tthat was obtained before the last transaction status change. After \\\n+\ttransactions begin and end, all references to embedded objects become \\\n+\tinvalid; you have to re-acquire the reference from the owning persistent \\\n+\tobject.\n+deleted: Operation attempted on a deleted instance.\n+dirty: Illegal operation attempted on a dirty instance: dirty objects cannot \\\n+\tbe evicted or made transient or non-transactional.\n+nested-exceps: This operation failed for some instances.  See the nested \\\n+\texceptions array for details.\n+new: Illegal operation attempted on a newly persisted instance: new objects \\\n+\tcannot be evicted or made transient or non-transactional.\n+transient: Illegal operation attempted on a transient instance.\n+not-active: Can only perform operation while a transaction is active.\n+trans-active: The \"{0}\" transaction property cannot be set during an \\\n+\tactive transaction.\n+active: This operation cannot be performed while a Transaction is active.\n+closed: The context has been closed.  The stack trace at which the \\\n+\tcontext was closed is held in the embedded exception.\n+closed-factory: The factory has been closed.  The stack trace at \\\n+\twhich the factory was closed is held in the embedded exception.\n+non-trans-read: To perform reads on persistent data outside of a transaction, \\\n+\tthe \"NontransactionalRead\" property must be set on the Transaction.\n+non-trans-write: To perform writes on persistent data outside of a \\\n+\ttransaction, the \"NontransactionalWrite\" property must be set to true.\n+write-operation: To perform this operation, you must be withing a transaction, \\\n+\tor your settings must allow nontransactional writes and must not detach \\\n+\tall nontransactional reads.\n+not-managed: The given instance \"{0}\" is not managed by this context.\n+trans-not-managed: This broker is not configured to use managed transactions.\n+bad-detached-op: You cannot perform operation {0} on detached object \"{1}\". \\\n+\tThis operation only applies to managed objects.\n+persist-detached: Attempt to persist detached object \"{0}\".\n+null-value: The field \"{0}\" of instance \"{1}\" contained a null value; \\\n+\tthe metadata for this field specifies that nulls are illegal.\n+change-identity: Attempt to change a primary key field of an instance that \\\n+\talready has a final object id.  Only new, unflushed instances whose id you \\\n+\thave not retrieved can have their primary keys changed.\n+managed-oid: You cannot assign managed object \"{0}\" to the primary key field \\\n+\tof \"{1}\".  Embedded primary key values must be transient objects.\n+changed-oid: You have modified the object id field of \"{2}\".  Its old value \\\n+\twas \"{0}\", and its new value is \"{1}\".  Object id fields are immutable \\\n+\tonce the object id of the instance has been assigned. \n+cache-exists: An object of type \"{0}\" with oid \"{1}\" already exists in this \\\n+\tcontext; another cannot be persisted.\n+null-trans: Attempt to commit a null javax.transaction.Transaction.  Some \\\n+\tapplication servers set the transaction to null if a rollback occurs.\n+end-trans-error: An exception occurred while ending the transaction.  This \\\n+\texception will be re-thrown.\n+not-bound: The file named \"{0}\" could not be found.\n+naming-exception: A NamingException was thrown while obtaining the \\\n+\tfactory at \"{0}\" from JNDI.\n+attach-deleted: The object \"{0}\" with id \"{1}\" has been deleted and \\\n+\tcannot be attached.\n+not-detachable: The class \"{0}\" does not declare the \"detachable\" metadata \\\n+\textension, so cannot be detached.\n+not-copyable: Attempt to copy field \"{0}\" failed.  The field is \\\n+\tnot copyable.  This can occur with custom SCO types or with large result \\\n+\tset fields.  Only standard or immutable SCO types can be attached and \\\n+\tdetached.\n+no-detach-object-id: Cannot access the detached object id of class \"{0}\". \\\n+\tEnsure that the class has the \"detachable\" metadata extension, and \\\n+\tthe the class has been re-enhanced.\n+attach-version-del: Attempted to attach deleted instance type \"{0}\" with oid \\\n+\t\"{1}\".  If the instance is new, the version field should be left to its \\\n+\tdefault value.\n+attach-wrongclass: Attempted to attach instance \"{0}\" of type \"{1}\", but this \\\n+\tinstance is already in the datastore as type \"{2}\".\n+sjvm-acquired-lock: Acquired an exclusive lock on oid \"{0}\": \"{1}\".\n+sjvm-released-lock: Released lock \"{0}\".\n+conn-not-supported: This data store cannot return connections.\n+incremental-flush-not-supported: This data store does not support incremental \\\n+\tflushing.  If you got this error while performing a query, make sure that \\\n+\tyou have not set the FlushBeforeQueries option to true, either by \\\n+\tsetting that option in your configuration file, or by programmatically \\\n+\tsetting the current FetchConfiguration''s FlushBeforeQueries property \\\n+\tto QueryFlushModes.FLUSH_TRUE.\n+nontrans-read-not-supported: This data store does not support nontransactional \\\n+\treads.  Set the NontransactionalRead property to false.\n+optimistic-not-supported: This datastore does not support optimistic \\\n+\ttransactions.  Set the Optimistic property to false.\n+restore-unset: The RestoreValues option is off, so initial values are \\\n+\tnot available. Turn on RestoreValues to be able to obtain initial \\\n+\tvalues.\n+mutable-restore-unset: The RestoreValues option is not set to \"all\", \\\n+\tinitial values of mutable fields are not available. Set RestoreValues to \\\n+\t\"all\" in your properties to be able to obtain initial mutable values.\n+initial-unloaded: OpenJPA cannot provide the initial value for field \"{0}\" \\\n+\tbecause the field was never loaded before being changed.\n+dup-oid-assign: Attempt to assign id \"{0}\" to new instance \"{1}\" failed; \\\n+\tthere is already an object in the L1 cache with this id. \\\n+\tYou must delete this object (in a previous transaction or the current one) \\\n+\tbefore reusing its id.  This error can also occur when a horizontally \\\n+\tor vertically mapped classes uses auto-increment application identity and \\\n+\tdoes not use a hierarchy of application identity classes.\n+dup-load: Cannot load object with id \"{0}\".  Instance \"{1}\" with the same id \\\n+\talready exists in the L1 cache.  This can occur when you \\\n+\tassign an existing id to a new instance, and before flushing attempt to \\\n+\tload the existing instance for that id.\n+objectid-abstract: Cannot create new application identity instance for \\\n+\tabstract class \"{0}\".\n+bad-id-value: The given value \"{0}\" cannot be converted into an identity \\\n+\tfor \"{2}\".  The value is the wrong type ({1}).\n+factory-init: Starting OpenJPA {0}\n+inverse-consistency: An inverse inconsistency in the object featureSelection was \\\n+\tdetected while flushing the field \"{0}\" of the instance with id \"{1}\" \\\n+\tin context \"{2}\".\n+no-brokerfactory: You did not name the factory class with the required \\\n+\tproperty org.apache.openjpa.BrokerFactory.\n+brokerfactory-excep: There was an error when invoking the static \\\n+\tgetInstance method on the named factory class \"{0}\".  See the \\\n+\tnested exception for details.\n+new-brokerfactory-excep: There was an error when invoking the static \\\n+\tnewInstance method on the named factory class \"{0}\".  See the \\\n+\tnested exception for details.\n+bad-brokerfactory: Could not invoke the static getInstance method on the \\\n+\tnamed factory class \"{0}\".\n+bad-new-brokerfactory: Could not invoke the static newInstance method on the \\\n+\tnamed factory class \"{0}\".\n+bad-brokerfactory-class: The named BrokerFactory \"{0}\" is not valid.\n+instantiate-abstract: Cannot instantiate abstract class of type \"{0}\" with \\\n+\tobject id \"{1}\"; this may indicate that the inheritance discriminator \\\n+\tfor the class is not configured correctly.\n+nontrans-proxied: You cannot make a property access object created with \"new\" \\\n+\tnontransactional.\n+no-field: Field \"{0}\" is not declared in \"{1}\", or is not managed.\n+no-field-index: \"{0}\" is not the index of any managed field in \"{1}\".\n+cant-cascade-persist: Encountered unmanaged object \"{0}\" in persistent field \\\n+\t\"{1}\" of managed object \"{2}\" during flush.  However, this field does not \\\n+\tallow cascade persist.  You cannot flush unmanaged objects.\n+cant-cascade-attach: Encountered new object \"{0}\" in persistent field \\\n+\t\"{1}\" of managed object \"{2}\" during attach.  However, this field does not \\\n+\tallow cascade attach.  You cannot attach a reference to a new object \\\n+\twithout cascading.\n+ref-to-deleted: Encountered deleted object \"{0}\" in persistent field \\\n+\t\"{1}\" of managed object \"{2}\" during flush.\n+no-version-field: Encountered object \"{0}\" without a version field during \\\n+\tattach.  In order to attach an object, it must either be enhanced or must \\\n+\thave a version field.\n+inmem-agg-proj-var: Queries with aggregates or projections using variables \\\n+\tcurrently cannot be executed in-memory.  Either set IgnoreCache to true, \\\n+\tset the org.apache.openjpa.FlushBeforeQueries property to true, or execute the query \\\n+\tbefore changing any instances in the transaction.  The offending query was \\\n+\ton type \"{0}\" with filter \"{1}\".\n+merged-order-with-result: This query on candidate type \"{0}\" with filter \"{1}\" \\\n+\tinvolves combining the results of multiple queries in memory. \\\n+\tYou have chosen to order the results on \"{2}\", but you have not selected \\\n+\tthis data in your setResult() clause.  Please include this ordering data \\\n+\tin setResult() so that OpenJPA can extract it for in-memory ordering.\n+query-nosupport: The \"{0}\" query type does not support this operation.\n+range-too-big: The range of the query is too big. Start index: \"{0}\", end \\\n+\tindex: \"{1}\". The range must be less than Integer.MAX_VALUE.\n+invalid-range: The query range from {0} to {1} is not valid.\n+no-impls: Unable to execute a query on type \"{0}\".  This class or interface \\\n+\tis not mapped, and does not have any mapped implementors.\n+bad-param-name: The parameter name or position \"{0}\" passed to \\\n+\texecute() is not valid.  All map keys must be a declared parameter \\\n+\tname or a number matching the parameter position. \n+force-in-mem: This query on type \"{0}\" must load the entire candidate class \\\n+\textent and evaluate the query in-memory.  This may be very slow.  The \\\n+\tquery must be executed in memory because OpenJPA is configured with \\\n+\tIgnoreCache=false and FlushBeforeQueries=false and \\\n+\tthere are dirty instances that may affect the query''s outcome in the \\\n+\tcache.\n+cant-exec-inmem: Queries of this type (\"{0}\") cannot be executed in-memory. \\\n+\tEither set IgnoreCache to true, set the org.apache.openjpa.FlushBeforeQueries \\\n+\tproperty to true, or execute the query before changing any instances in \\\n+\tthe transaction.\n+executing-query: Executing query: {0}\n+executing-query-with-params: Executing query: [{0}] with parameters: {1}\n+not-unique: The query on candidate type \"{0}\" with filter \"{1}\" was \\\n+\tconfigured to have a unique result, but more than one instance matched \\\n+\tthe query.\n+serialized: Queries that have been serialized do not support this operation.\n+read-only: Attempt to modify a read-only query object.\n+no-class: A candidate Class must be specified before executing a query.\n+no-modify-resultclass: A query that declares a result class cannot be used \\\n+\tto perform bulk updates.\n+no-modify-unique: A query that declares unique results cannot be used \\\n+\tto perform bulk updates.\n+no-modify-range: A query that declares a result range cannot be used \\\n+\tto perform bulk updates.\n+unbound-param: Cannot execute query; the declared parameter \"{0}\" was \\\n+\tnot given a value.\n+unbound-params: Cannot execute query; some declared parameters were not given \\\n+\tvalues.  You must supply a value for each of the following parameters, \\\n+\tin the given order: {0}\n+extra-params: More parameters were passed to execute() than were declared: \\\n+\t{1} parameters were specified for query execution, but only {0} \\\n+\tparameters were declared in the query.\n+null-primitive-param: Parameter \"{0}\" was declared with a primtive type, but \\\n+\thas been given a null value.\n+merged-aggregate: This query on candidate type \"{0}\" with filter \"{1}\" \\\n+\tinvolves combining the results of multiple sub-queries.  However, because \\\n+\tthis query is for aggregate data, OpenJPA cannot combine the sub-query \\\n+\taggregates into correct final values.\n+bad-dec: The {1} declaration \"{0}\" is \\\n+\tnot valid. Variables and imports must be delimited with \";\".  Parameters \\\n+\tand orderings must be delimited with \",\".  Imports require the \"import\" \\\n+\tkeyword, and orderings require the \"ascending\" or \"descending\" keyword.\n+mod-bigdecimal: You cannot use the modulo operator (%) on numbers of type \\\n+\tBigDecimal.\n+cant-convert: Cannot convert object \"{0}\" of type \"{1}\" into an instance of \\\n+\t\"{2}\".\n+bad-method-class: You set the method name of this org.apache.openjpa.MethodQL query to \\\n+\t\"{1}\", but class \"{0}\" is not a valid class name.  Make sure to fully \\\n+\tqualify the class name or to import its package into this query if the \\\n+\tclass is not in the query candidate class'' package. \n+method-not-static: Method \"{0}\" named in the org.apache.openjpa.MethodQL query must be static.\n+no-method: You must set the query filter to the name of the method to execute \\\n+\tfor this org.apache.openjpa.MethodQL query instance.\n+method-error: There was an error invoking method \"{0}\" with arguments \"{1}\".\n+bad-param-type: The type \"{0}\" as used in the parameter declarations \\\n+\tcould not be found in the imports.\n+cant-set: Result type \"{0}\" does not have any public fields or setter methods \\\n+\tfor the projection or aggregate result element \"{1}\", nor does it have a \\\n+\tgeneric put(Object,Object) method that can be used, nor does it have a \\\n+\tpublic constructor that takes the types {2}.\n+pack-err: There was an error packing the projection and/or aggregate results \\\n+\tof the query into result type \"{0}\".  See the nested throwable for details.\n+pack-instantiation-err: There was an error creating an instance of type \"{0}\" \\\n+\twhen packing the projection and/or aggregate results of the query. Ensure \\\n+\tthat you have defined a public no-args constructor in \"{0}\".\n+bad-inmem-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Object, \\\n+\tMap, FetchConfiguration)\" is not declared in type \"{1}\". \\\n+\tCheck the method name supplied in your org.apache.openjpa.MethodQL query filter.  \\\n+\tOpenJPA is attempting to execute this query in-memory; if you implemented the \\\n+\tdatastore method instead (a method with the same signature but without the \\\n+\tObject argument) and want this query to execute in the datastore, either \\\n+\tmake the query before modifying objects in the current transaction, \\\n+\tset IgnoreCache to true, or set the org.apache.openjpa.FlushBeforeQueries property to \\\n+\ttrue.\n+bad-datastore-method: Method \"{0}(StoreContext, ClassMetaData, boolean, Map, \\\n+\tFetchConfiguration)\" is not declared in type \"{1}\".  Check \\\n+\tthe method name supplied in your org.apache.openjpa.MethodQL query filter.  OpenJPA is \\\n+\tattempting to execute this query against the datastore; if you implemented \\\n+\tthe in-memory method instead (a method with the same signature but with an \\\n+\tObject argument) and want this query to execute in-memory, supplly a \\\n+\tCollection of candidates to filter.\n+only-update-primitives: Bulk update queries when executed in memory \\\n+\tmay only change the value of primitives and simple Object fields.\n+no-savepoint-copy: Unable to copy field \"{0}\" for savepoint.\n+savepoint-exists: A savepoint with the name \"{0}\" already exists.  \\\n+\tEach savepoint name must be unique.\n+no-lastsavepoint: Cannot rollback/release last savepoint as no savepoint \\\n+\thas been set.\n+no-savepoint: You have not set a savepoint with the name \"{0}\"\n+savepoint-init: This savepoint has already been initialized.\n+savepoint-flush-not-supported: The configured SavepointManager does not \\\n+\tsupport incremental flushing when a savepoint has been set.  You must \\\n+\trelease your savepoints before flushing.\n+callback-err: An error occured processing callbacks for instance of type \"{0}\".\n+bad-agg-listener-hint: Query hint value \"{0}\" ({1}) cannot be converted into \\\n+\tan aggregate listener.\n+bad-filter-listener-hint: Query hint value \"{0}\" ({1}) cannot be converted \\\n+\tinto a filter listener.\n+bad-getter-hint: Invoking the getter for hint key \"{0}\" on \"{1}\" caused \\\n+\tan error.\n+bad-setter-hint: Invoking the setter for hint key \"{0}\" on \"{1}\" with \\\n+\tvalue \"{2}\" caused an error.\n+detach-val-mismatch: The instance \"{0}\" is managed by another context and \\\n+\tcannot be inspected for field values.\n+detach-val-badsm: The instance \"{0}\" has an unknown state manager which \\\n+\tprevents field inspection.\n+null-oid: Cannot perform find using null object id.\n+illegal-op-in-prestore: This operation is illegal when called during \\\n+\ttransaction completion.\n+no-expressions: The query cannot be executed because it has no \\\n+\tvalid expressions."},{"sha":"2228eaa86529c952b6303fadbdc199be2631fe88","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"added","additions":255,"deletions":0,"changes":255,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,255 @@\n+meta-reflect: Using reflection for metadata generation.\n+gen-meta: Generating default metadata for type \"{0}\".\n+load-cls: Loading metadata for \"{0}\" under mode \"{1}\".\n+load-mapping: Loading mapping for \"{0}\" under mode \"{1}\".\n+prep-mapping: Preparing mapping for \"{0}\".\n+resolve-meta: Resolving metadata for \"{0}\".\n+resolve-embed-meta: Resolving embedded metadata for \"{0}\".\n+resolve-mapping: Resolving mapping for \"{0}\".\n+resolve-field: \\tResolving field \"{0}\".\n+init-mapping: Initializing mapping for \"{0}\".\n+resolve-identity: Guessing persistence-capable class name for identity \\\n+\tclass \"{0}\".\n+resolve-errs: Errors encountered while resolving metadata.  See nested \\\n+\texceptions for details.\n+prev-errs: Unable to resolve type \"{0}\" due to previous errors resolving \\\n+\trelated type \"{1}\".\n+clear-repos: Clearing metadata repository \"{0}\".\n+process-registered: Processing registered persistence-capable class \"{0}\".\n+assigned-sup: Set persistence-capable superclass of \"{0}\" to \"{1}\".\n+found-pcs: Found {0} classes with metadata in {1} milliseconds.\n+unmanaged-sup-field: Superclass field \"{0}\" is mapped in the metadata for \\\n+\tsubclass \"{1}\", but is not a persistent field.\n+bad-discover-class: The class \"{0}\" listed in the org.apache.openjpa.MetaDataFactory \\\n+\tconfiguration property could not be loaded; ignoring.\n+bad-lrs-concrete: Large result set fields must be of type java.util.Collection \\\n+\tor java.util.Map.  No concrete classes or other interfaces are allowed. \\\n+\tRemove the \"lrs\" extension from field \"{0}\" or change it to one of \\\n+\tthese types.\n+bad-lrs-array: Array fields do not support large result sets.  Remove the \\\n+\t\"lrs\" extension from field \"{0}\".\n+bad-lrs-extern: Externalized fields do not support large result sets.  Remove \\\n+\tthe \"lrs\" extension from field \"{0}\".\n+no-detach-oid: Field \"{0}\" named as the detach object id field for type \"{1}\" \\\n+\tdoes not exist.\n+no-detach-state: Field \"{0}\" named as the detach state field for type \"{1}\" \\\n+\tdoes not exist.\n+parent-detach-oid: Type \"{0}\" declares a detach object id field, but is not \\\n+\tthe least-derived detachable class in the inheritance tree.  Only the \\\n+\tleast-derived detachable class can name the detach object id and state \\\n+\tfields.\n+parent-detach-state: Type \"{0}\" declares a detach state field, but is not \\\n+\tthe least-derived detachable class in the inheritance tree.  Only the \\\n+\tleast-derived detachable class can name the detach object id and state \\\n+\tfields.\n+appid-detach-oid: Type \"{0}\" declares a detach object id field, but uses \\\n+\tapplication identity.  Detach object id fields are only used for \\\n+\tdatastore identity classes.\n+managed-detach-oid: Field \"{0}\" is named as the detach object id field in \\\n+\ttype \"{1}\", but is a managed field.  Detach object id fields cannot \\\n+\tbe managed.\n+managed-detach-state: Field \"{0}\" is named as the detach state field in \\\n+\ttype \"{1}\", but is a managed field.  Detach state fields cannot \\\n+\tbe managed.\n+bad-detach-oid: Field \"{0}\", named as the detach object id field for type \\\n+\t\"{1}\", must be of type String.\n+bad-detach-state: Field \"{0}\", named as the detach state field for type \\\n+\t\"{1}\", must be of type Object.\n+not-enhanced: The type \"{0}\" has not been enhanced.\n+appid-not-supported: The data store does not support application identity. \\\n+\tAlter \"{0}\" to use datastore identity.\n+datastoreid-not-supported: The data store does not support datastore identity. \\\n+\tAlter \"{0}\" to use application identity.\n+recurse-embed: Field \"{0}\" attempts to recursively embed its declaring type.\n+cant-embed-extern: Field \"{0}\" is marked as embedded, but OpenJPA is unable to \\\n+\tembed the field.  OpenJPA cannot embed first-class object fields produced \\\n+\tthrough an externalizer.  Treating as non-embedded.\n+cant-embed: Field \"{0}\" is marked as embedded, but the store manager in use \\\n+\tcannot embed first-class object fields.  Treating as non-embedded.\n+cant-embed-element: Field \"{0}\" is marked as having an embedded element or \\\n+\tvalue type, but the store manager in use cannot embed collection/map \\\n+\telements. Treating as non-embedded.\n+cant-embed-key: Field \"{0}\" is marked as having an embedded key type, but \\\n+\tthe store manager in use cannot embed map keys.  Treating as non-embedded.\n+type-not-supported: The data store does not support fields of type {0}.\n+null-external: An invalid null external-value was declared for field \"{0}\".\n+bad-external-type: The field \"{0}\" cannot use the external-values property. \\\n+\tExternal values can only be declared for fields of primitives, \\\n+\tprimitive wrappers, or strings.\n+no-external-values: The field \"{0}\" declares an external-values property \\\n+\tbut does not declare any values in the string: \"{1}\".\n+extern-externvalues: The field \"{0}\" cannot declare both an externalizer \\\n+\tmethod and external values.\n+bad-externalizer: The externalizer method \"{1}\" on field \"{0}\" is not valid. \\\n+ \tIf this is a method of the owning class type and not the field type, make \\\n+\tsure you have declared the method in the form \\\n+\t\"<owning-class>.<method-name>\", and that the method is static.\n+externalizer-err: There was an error invoking the externalizer for field \\\n+\t\"{0}\" on Java value \"{1}\": {2}\n+factory-err: There was an error invoking the factory for field \\\n+\t\"{0}\" on datastore value \"{1}\": {2}\n+bad-factory: The factory method supplied for field \"{0}\" does not exist or \\\n+\tis not a valid constructor or method.  If the factory is a method \\\n+\tof the owning class and not the field type, make sure you have declared \\\n+\tthe method in the form \"<owning-class>.<method-name>\".  Also, make sure \\\n+\tthe specified factory method is static.\n+bad-class: The class name \"{0}\" used in a metadata extension on field \"{1}\" \\\n+\tis not valid.\n+no-mapped-by: \"{0}\" declared that it is mapped by \"{1}\", but that is a \\\n+\tnot a field of the related type.\n+no-inverse: Field \"{0}\" declares a logical inverse of \"{1}\", but that is a not \\\n+\ta field of the related type.\n+circ-mapped-by: \"{0}\" declares that it is mapped by \"{1}\", but that \\\n+\tfield also declares that it is mapped by another.  Only one side of \\\n+\ta relation can declare that it is mapped by another field.\n+mapped-not-inverse: Field \"{0}\" declares that it is mapped by a field that is \\\n+\tdifferent from its logical inverse field.  You do not need to name the \\\n+\tlogical inverse if you''ve already declared that the field is mapped by \\\n+\tanother, but if you do, then the logical inverse must point to the \\\n+\tmapping field.\n+mapped-by-not-key: You cannot declare that \"{0}\" is mapped by another field. \\\n+\tOnly direct field values and map keys can be mapped by another field.\n+rm-field: Field \"{0}\" is not a type that is persistent by default.  If \\\n+\tyou want this field to be persistent, you have to explicitly set it to \\\n+\tpersistent in your metadata.\n+no-meta-notpc: No metadata was found for type \"{0}\". The class is \\\n+\tnot enhanced.\n+no-meta-types: No metadata was found for type \"{0}\". The class does \\\n+\tnot appear in the list of persistent types: {1}.\n+no-meta: No metadata was found for type \"{0}\".  Ensure that the class is \\\n+\tenhanced (if necessary), that the class has appropriate metadata, and that \\\n+\tif you list your persistent classes, the class is included in your list.\n+no-oid-meta: Could not locate metadata for the class using oid \"{0}\" of \\\n+\ttype \"{1}\".  Registered oid type mappings: \"{2}\"\n+no-alias-meta: Could not locate metadata for the class using alias \"{0}\". \\\n+\tRegistered alias mappings: \"{1}\"\n+error-registered: An error occurred while processing registered class \"{0}\".\n+failed-registered: A potentially serious error occurred while processing \\\n+\tregistered class \"{0}\".  Deferring processing of this class until next \\\n+\topportunity.\n+cache-names: Type \"{0}\" declares a cache name of \"{1}\", but its persistent \\\n+\tsuperclass \"{2}\" uses a different cache name (\"{3}\").\n+cache-timeout-invalid: Type \"{0}\" declares an invalid data-cache-timeout \\\n+\tvalue. Valid timeout values are -1 (to disable timeouts), or positive \\\n+\tintegers. Timeout was set to {1}.\n+id-types: Type \"{0}\" does not declare the same identity-type as its persistent \\\n+\tsuperclass.\n+id-classes: Type \"{0}\" declares an id class \"{1}\" that does not match or \\\n+\textend its persistent superclass \"{2}\" identity class \"{3}\".\n+no-id-class: Type \"{0}\" with application identity and no superclass does \\\n+\tnot declare an id class.  This type is not eligible for builtin \\\n+\tidentity, so it must declare an id class.\t\n+bad-pk: Field \"{0}\" cannot be a primary key.  Primary key fields can only be \\\n+\tdeclared in base persistent classes that also declare their identity-type \\\n+\tto be \"application\".\n+bad-pk-type: Field \"{0}\" cannot be a primary key.  It is of an unsupported type.\n+no-pk: Concrete type \"{0}\" with application identity does not declare any \\\n+\tprimary key fields.\n+invalid-id: The id class specified by type \"{0}\" does not match the \\\n+\tprimary key fields of the class.  Make sure your identity class has the \\\n+\tsame primary keys as your persistent type, that the access types are the \\\n+\tsame, and if you are getting this error at runtime, that you have \\\n+\tyour persistent class since last compiling your identity class.\n+null-cons: The id class specified by type \"{0}\" does not have public a \\\n+\tno-args constructor.\n+hc-method: The identity class specified by type \"{0}\" is not valid, as the \\\n+\thashCode method is not overridden. Implement hashCode so that two \\\n+\tinstances with the same primary key values have the same hash code.\n+eq-method: The identity class specified by type \"{0}\" is not valid, as the \\\n+\tequals method is not overridden. Implement the equals method so that two \\\n+\ttwo instances will compare equal if and only if they have the same primary \\\n+\tkey values.\n+appid-strategy: Type \"{0}\" uses application identity; it cannot also declare \\\n+\ta datastore identity strategy.\n+inconsistent-access: Type \"{0}\" and its persistent superclass \"{1}\" declare \\\n+\tdifferent access types.  All persistent classes in an inheritance \\\n+\thierarchy must use the same access type (field vs. property access).\n+no-seq-name: The metadata for \"{0}\" sets its value or identity strategy \\\n+\tto sequence, but does not name the sequence to use.\n+unsupported-value-strategy: \"{0}\" declares an unsupported strategy of \"{0}\" \\\n+\tfor its {1}.\n+cant-init-seq: There was an error instantiating named sequence \"{0}\".\n+not-seq-cls: Named sequence \"{0}\" declares an invalid class \"{1}\".\n+bad-value-strategy: \"{0}\" declares an identity or value strategy of \"{1}\". \\\n+\tThis is not a recognized strategy.  Available strategies are: {2}\n+bad-value-strategy-hint: \"{0}\" declares an identity or value strategy of \\\n+\t\"{1}\".  This is not a recognized strategy, though it closely resembles \\\n+\tthe standard strategy \"{2}\".  Available strategies are: {3}\n+bad-update-strategy: \"{0}\" declares a read only value of \"{1}\". \\\n+\tThis is not a recognized strategy.  Available strategies are: {2}\n+bad-update-strategy-hint: \"{0}\" declares a read only value of \\\n+\t\"{1}\".  This is not a recognized strategy, though it closely resembles \\\n+\tthe standard strategy \"{2}\".  Available strategies are: {3}\n+interface: Type \"{0}\" is an interface and therefore cannot be made persistent.\n+enum: Type \"{0}\" is an enumeration and therefore cannot be made persistent.\n+bad-drop: The metadata for some of the following classes may not have \\\n+\tbeen dropped: {0}\n+bad-store: Your configured MetaDataIO cannot create metadata.  You \\\n+\tmust create it by hand. \n+tool-running: Metadata tool running on type \"{0}\" with action \"{1}\".\n+tool-record: Recording metadata changes.\n+tool-usage: Usage: java org.apache.openjpa.meta.MetaDataTool\\n\\\n+\t\\t[-properties/-p <properties file or resource>]\\n\\\n+\t\\t[-<property name> <property value>]*\\n\\\n+\t\\t[-verbose/-v <true/t | false/f>]\\n\\\n+\t\\t[-file/-f <stdout | output file or resource>]\\n\\\n+\t\\t[-action/-a <add | drop>]\\n\\\n+\t\\t<class name | .java file | .class file>+\n+no-named-query: There is no named query defined for the class \"{0}\" with \\\n+\tthe name \"{1}\".\n+no-named-sequence: Could not locate the sequence with name \"{0}\".  It is \\\n+\tpossible that the metadata file containing the sequence has not been \\\n+\tparsed yet.  Make sure to use a persistent class whose metadata is in \\\n+\tthe same file somewhere in your application before requesting the sequence.\n+unrecognized-extension: The extension key \"{1}\" for \"{0}\" is not recognized \\\n+\tand will be ignored. Valid extension keys are \"{2}\".\n+unrecognized-extension-hint: The extension key \"{1}\" for \"{0}\" is not \\\n+\trecognized and will be ignored, although the name closely matches the \\\n+\tvalid key \"{3}\". Valid extension keys are \"{2}\".\n+mult-vers-fields: Type \"{0}\" has multiple version fields: [{1}, {2}]\n+bad-access-type: The ClassMetaData access type must be set to either \\\n+\tClassMetaData.ACCESS_FIELD or ClassMetaData.ACCESS_PROPERTY. Attempt to \\\n+\tset it to \"{0}\" failed.\n+val-not-pc: The map value type of field \"{0}\" with a derived key must be a \\\n+\tpersistent class.\n+val-not-one-pk: The map value type of field \"{0}\" a derived key must be a \\\n+\tpersistent class with exactly one primary key field.\n+# this is a comma-separated set of prefixes that we want to\n+# exclude from top-level validation, so that extensions that\n+# show up with the prefix will not be included in the list of\n+# extensions that are validated by generic tools (such as the enhancer)\n+extension-datastore-prefix: jdbc-\n+pc-registry-no-method: No method was found for the persistent property \"{0}\" \\\n+\tdeclared in \"{1}\" or one of its superclasses. Searched for a method called \\\n+\t\"{2}\".\n+pc-registry-no-boolean-method: No method was found for the persistent property \\\n+\t\"{0}\" declared in \"{1}\" or one of its superclasses. Searched for methods \\\n+\tcalled \"{2}\" and \"{3}\".\n+pc-registry-no-field: No field was found for the persistent property \"{0}\" \\\n+\tdeclared in \"{1}\" or one of its superclasses.\n+nonpc-field-orderable: Cannot order \"{0}\" on \"{1}\", because {0} is not a \\\n+\trelation to another persistent type.  For non-relation fields, you can \\\n+\tonly order on the field element values themselves, represented by \\\n+\t\"#element\".\n+bad-field-orderable: Cannot order \"{0}\" on \"{1}\", because that is not a \\\n+\tpersistent field in the related type.\n+mixed-inmem-ordering: Field \"{0}\" uses an invalid combination of in-memory and \\\n+\tdatastore ordering for its values.  If a combination is used, all \\\n+\tin-memory orderings must appear in the ordering declaration before \\\n+\tdatastore orderings.\n+cant-order: Field \"{0}\" cannot be ordered.  Ordering is only supported for \\\n+\tcollection and array fields.\n+lifecycle-resolved: Could add the following callback adapters to \"{0}\", as \\\n+\tthe lifecycle metadata is already resolved: {1}\n+access-field-and-prop: Type \"{0}\" attempts to use both field and property \\\n+\taccess. Only one access method is permitted.\n+unsupported-id-type: Type \"{0}\" declares field \"{1}\" as a primary key, but \\\n+\tkeys of type \"{2}\" are not supported.\n+mapped-unknownid: Type \"{0}\" is mapped to the data store, but does not have \\\n+\tan identity type.  Alter its metadata to declare datastore identity or \\\n+\tto have at least one primary key field.\n+wrong-default-fg-name: Attempt to change default fetch group name to \"{0}\" \\\n+\tfrom current name \"{1}\" is not permitted.\n+duplicate-fg: Fetch group \"{0}\" is already defined in \"{1}\".\n+invalid-fetch-depth: Fetch group \"{0}\" for field \"{1}\" specifies invalid \\\n+\trecursion depth {2}. Recursion depth must be greater than or equal to -1."},{"sha":"034c2dcf66867c2bafc3976ea9d33526709232df","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -0,0 +1,51 @@\n+failed: Failed:\n+nested: Nested:\n+null-oid: Null id value encountered while creating datastore identity for \"{0}\".\n+unknown-oid: While creating datastore identity for \"{0}\", unknown id value \\\n+\t\"{1}\" of type \"{2}\" encountered.  Cannot convert to org.apache.openjpa.util.Id.\n+bad-ser-oid: Encountered object id \"{0}\" in serialized data, but the \\\n+\tcorresponding persistent object no longer exists.  Substituting null into \\\n+\tthe deserialization stream. \n+transfer-lrs: You cannot transfer large result set fields from one object or \\\n+\tfield to another.\n+invalid-key: An invalid key was found in a CacheMap while flushing data from \\\n+\tit.  CacheMap: \"{0}\".  Key: \"{1}\".  All unpinned objects were cleared from \\\n+\tthe CacheMap in order to re-establish a consistent cache.\n+lock-failed: Unable to obtain an object lock on \"{0}\".\n+lock-timeout: Could not obtain a lock on object \"{0}\" in {1} milliseconds.\n+not-found: The instance \"{0}\" does not exist in the data store.\n+obj-exists: The instance \"{0}\" cannot be persisted, because it conflicts with \\\n+\tan existing instance.\n+not-found-multi: The follwing instnaces do not exist in the data store: {0}\n+opt-lock: An optimistic lock violation was detected when flushing object \\\n+\tinstance \"{0}\" to the data store.  This indicates that the \\\n+\tobject was concurrently modified in another transaction.\n+opt-lock-multi: Optimistic locking errors were detected when flushing to the \\\n+\tdata store.  The following objects may have been concurrently modified in \\\n+\tanother transaction: {0}\n+opt-lock-nested: Optimistic locking errors were detected when \\\n+\tflushing to the data store.  This indicates that some objects were \\\n+\tconcurrently modified in another transaction.  Each exception in \\\n+\tthe nested throwables array contains a failed object representing \\\n+\ta concurrently modified object.\n+bad-proxy: Unable to create second class object proxy for type: \"{0}\".\n+bad-array: Unable to copy array: {0}.\n+bad-elem-type: The given element does not meet the requirements for this \\\n+\tfield. The container requires that all non-null objects are of the type \\\n+\tdeclared in the XML metadata for this container. \\\n+\t\"{1}(loader={0}).isAssignableFrom ({3}(loader={2}))\" failed.\n+string-id: Unable to create a valid id from string \"{0}\".\n+no-proxy-cons: An exception was thrown while creating a new instance of \\\n+\tcustom proxy collection type \"{0}\".  This could mean that there is no \\\n+\tpublic no-args constructor for this type.\n+bad-single-id: Invalid single identity declaration for type \"{0}\". Only \\\n+\ta single field can be declared for single field identity.\n+not-single: The given type \"{0}\" does not use single field identity.\n+bad-pk: Bad single primary key field \"{0}\"\n+dup-oid: A duplicate object id exception has occurred.  Each object you \\\n+\tinsert into the data store must have unique primary key field values.  \n+unique: A unique constraint violation has occurred. \n+ref-integrity: A referential integrity constraint has occurred.\n+no-store-exts: No store-specific facade found matching \"{0}\".  Using default.\n+bad-getter: Missing getter for property \"{1}\" in type \"{0}\". \n+bad-setter: Missing setter for property \"{1}\" in type \"{0}\". "},{"sha":"990acd3ed9b5e0facd17153816feafc9dd46fac8","filename":"openjpa-lib/pom.xml","status":"modified","additions":129,"deletions":119,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/pom.xml?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -1,121 +1,131 @@\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-\t\t<modelVersion>4.0.0</modelVersion>\n-\t<groupId>org.apache.openjpa</groupId>\n-\t<artifactId>openjpa-lib</artifactId>\n-\t<packaging>jar</packaging>\n-\n-\t<name>Utilities</name>\n-\t<description>Utilities</description>\n-\t<url>http://incubator.apache.org/projects/openjpa</url>\n-<parent>\n-\t\n-\t\t<groupId>org.apache.openjpa</groupId>\n-\t\t<artifactId>openjpa</artifactId>\n-\t\t<version>0.0.1</version>\n-\t\t\n-\t</parent>\n-\t<dependencies>\n-\t\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>org.apache.openjpa</groupId>\n-\t\t\t<artifactId>serp</artifactId>\n-\t\t\t<version>0.0.1</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>jakarta-regexp</groupId>\n-\t\t\t<artifactId>jakarta-regexp</artifactId>\n-\t\t\t<version>1.4</version>\n-\t\t\t<scope>test</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>commons-logging</groupId>\n-\t\t\t<artifactId>commons-logging</artifactId>\n-\t\t\t<version>1.0.4</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>log4j</groupId>\n-\t\t\t<artifactId>log4j</artifactId>\n-\t\t\t<version>1.2.13</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>javax.servlet</groupId>\n-\t\t\t<artifactId>servlet-api</artifactId>\n-\t\t\t<version>2.5</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>commons-lang</groupId>\n-\t\t\t<artifactId>commons-lang</artifactId>\n-\t\t\t<version>2.1</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>ant</groupId>\n-\t\t\t<artifactId>ant</artifactId>\n-\t\t\t<version>1.6.5</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>commons-collections</groupId>\n-\t\t\t<artifactId>commons-collections</artifactId>\n-\t\t\t<version>3.1</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>commons-pool</groupId>\n-\t\t\t<artifactId>commons-pool</artifactId>\n-\t\t\t<version>1.2</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\n-\t\t\t<groupId>backport-util-concurrent</groupId>\n-\t\t\t<artifactId>backport-util-concurrent</artifactId>\n-\t\t\t<version>2.1</version>\n-\t\t\t<scope>compile</scope>\n-\t\t\t\n-\t\t</dependency>\n-\t\t\n-\t</dependencies>\n-\t<build>\n-\t\n-\t\t<plugins>\n-\t\t\n-\t\t\t<plugin>\n-\t\t\t\n-\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n-\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n-\t\t\t\t<configuration>\n-\t\t\t\t<source>1.3</source>\n-\t\t\t\t<target>1.3</target>\n-\t\t\t\t</configuration>\n-\t\t\t\t\n-\t\t\t</plugin>\n-\t\t\t\n-\t\t</plugins>\n-\t\t\n-\t</build>\n-\t\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.apache.openjpa</groupId>\n+    <artifactId>openjpa-lib</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Utilities</name>\n+    <description>Utilities</description>\n+    <url>http://incubator.apache.org/projects/openjpa</url>\n+    <parent>\n+\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa</artifactId>\n+        <version>0.0.1</version>\n+\n+    </parent>\n+    <dependencies>\n+\n+        <dependency>\n+\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>serp</artifactId>\n+            <version>0.0.1</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>jakarta-regexp</groupId>\n+            <artifactId>jakarta-regexp</artifactId>\n+            <version>1.4</version>\n+            <scope>test</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>commons-logging</groupId>\n+            <artifactId>commons-logging</artifactId>\n+            <version>1.0.4</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>log4j</groupId>\n+            <artifactId>log4j</artifactId>\n+            <version>1.2.13</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>servlet-api</artifactId>\n+            <version>2.5</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>commons-lang</groupId>\n+            <artifactId>commons-lang</artifactId>\n+            <version>2.1</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>ant</groupId>\n+            <artifactId>ant</artifactId>\n+            <version>1.6.5</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>commons-collections</groupId>\n+            <artifactId>commons-collections</artifactId>\n+            <version>3.1</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>commons-pool</groupId>\n+            <artifactId>commons-pool</artifactId>\n+            <version>1.2</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>backport-util-concurrent</groupId>\n+            <artifactId>backport-util-concurrent</artifactId>\n+            <version>2.1</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+        <dependency>\n+\n+            <groupId>jdbc</groupId>\n+            <artifactId>jdbc-stdext</artifactId>\n+            <version>2.0</version>\n+            <scope>compile</scope>\n+\n+        </dependency>\n+\n+    </dependencies>\n+    <build>\n+\n+        <plugins>\n+\n+            <plugin>\n+\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>1.3</source>\n+                    <target>1.3</target>\n+                </configuration>\n+\n+            </plugin>\n+\n+        </plugins>\n+\n+    </build>\n+\n \n </project>"},{"sha":"8927d4f809ee9255c907b0a6c8cf26fd2a7d852a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":20,"deletions":17,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -10,34 +10,37 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-/*********************************************************************\n-\n-**********************************************************************/\n package org.apache.openjpa.lib.ant;\n \n-import java.io.*;\n-import java.util.*;\n-import org.apache.openjpa.lib.conf.*;\n-import org.apache.openjpa.lib.util.*;\n-import org.apache.tools.ant.*;\n-import org.apache.tools.ant.taskdefs.*;\n-import org.apache.tools.ant.types.*;\n-import org.apache.tools.ant.util.*;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.tools.ant.AntClassLoader;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.DirectoryScanner;\n+import org.apache.tools.ant.taskdefs.MatchingTask;\n+import org.apache.tools.ant.types.FileSet;\n+import org.apache.tools.ant.types.Path;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Ant tasks all have a nested <code>&lt;config&rt;</code> tag, which uses\n  * the configuration as a bean-like task. E.g., you can do:\n- * \n+ * <p/>\n  * <code> &lt;mytask&rt;<br />\n  * &nbsp;&nbsp;&lt;config licenseKey=\"key\" connectionUserName=\"foo\"/&rt;<br />\n  * &lt;/mytask&rt;\n  * </code>\n- *  The defailt configuration for the system will be used if the\n+ * The defailt configuration for the system will be used if the\n  * <code>&lt;config&rt;</code> subtask is excluded.\n- * \n+ *\n  * @nojavadoc\n  */\n public abstract class AbstractTask extends MatchingTask {\n+\n     static final Localizer _loc = Localizer.forPackage(AbstractTask.class);\n \n     protected List fileSets = new ArrayList();\n@@ -156,8 +159,8 @@ public void execute() throws BuildException {\n \n     private String[] getFiles() {\n         List files = new ArrayList();\n-        for (Iterator i = fileSets.iterator(); i.hasNext(); ) {\n-            FileSet fs = (FileSet)i.next();\n+        for (Iterator i = fileSets.iterator(); i.hasNext();) {\n+            FileSet fs = (FileSet) i.next();\n             DirectoryScanner ds = fs.getDirectoryScanner(project);\n \n             String[] dsFiles = ds.getIncludedFiles();\n@@ -170,7 +173,7 @@ public void execute() throws BuildException {\n             }\n         }\n \n-        return(String[]) files.toArray(new String[files.size()]);\n+        return (String[]) files.toArray(new String[files.size()]);\n     }\n }\n "},{"sha":"da915d6deef31c5ad850dd92b5c73caa403bd719","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/package.html","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -3,9 +3,10 @@\n -->\n <html>\n <body>\n-\t<p><strong>Ant Integration</strong></p>\n-\t<p>\n-\t\tThis package provides a foundation for basic Ant support.\n-\t</p>\n+<p><strong>Ant Integration</strong></p>\n+\n+<p>\n+    This package provides a foundation for basic Ant support.\n+</p>\n </body>\n </html>"},{"sha":"c149ebfa27be60e33cf832e8e12f7575c04dad37","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -14,10 +14,11 @@\n \n /**\n  * A boolean {@link Value}.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public class BooleanValue extends Value {\n+\n     private boolean value;\n \n     public BooleanValue(String prop) {"},{"sha":"5177dd0212918b2e4761e983f80888705184ad7c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurable.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurable.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurable.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -17,10 +17,11 @@\n  * objects when configuration events occur. It provides an object\n  * with the opportunity to set itself up for configuration and to\n  * perform any necessary post-configuration.\n- * \n+ *\n  * @author Patrick Linskey\n  */\n public interface Configurable {\n+\n     /**\n      * Invoked prior to setting bean properties.\n      */"},{"sha":"bedee88931e4392f169a9d2d9ba563a218ae94e3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,22 +12,27 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.beans.*;\n-import java.io.*;\n-import java.util.*;\n-import org.apache.openjpa.lib.log.*;\n+import java.beans.BeanInfo;\n+import java.beans.PropertyChangeListener;\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.log.LogFactory;\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n  * Interface for generic configuration objects. Includes the ability\n  * to write configuration to and from {@link Properties} instances. Instances\n  * are threadsafe for reads, but not for writes.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  * @author Abe White\n  */\n public interface Configuration\n     extends BeanInfo, Serializable, Closeable, Cloneable {\n+\n     /**\n      * Attribute of returned {@link Value} property descriptors listing\n      * recognized values for the property.\n@@ -86,7 +91,7 @@\n \n     /**\n      * Return the log for the given category.\n-     * \n+     *\n      * @see #getLogFactory\n      */\n     public Log getLog(String category);\n@@ -131,17 +136,17 @@\n      * A properties representation of this Configuration.\n      * Note that changes made to this properties object will\n      * not be automatically reflected in this Configuration object.\n-     * \n+     *\n      * @param storeDefaults if true, then properties will be written\n-     * out even if they match the default value for a property\n+     *                      out even if they match the default value for a property\n      */\n     public Map toProperties(boolean storeDefaults);\n \n     /**\n      * Set this Configuration via the given map. Any keys missing from\n      * the given map will not be set. Note that changes made to this map\n      * will not be automatically reflected in this Configuration object.\n-     *  IMPORTANT: If the map contains instantiated objects(rather than\n+     * IMPORTANT: If the map contains instantiated objects(rather than\n      * string values), only the string representation of those objects\n      * are considered in this configuration's <code>equals</code> and\n      * <code>hashCode</code> methods. If the object's property has no\n@@ -153,14 +158,14 @@\n     /**\n      * Adds a listener for any property changes. The property events fired\n      * will <b>not</b> include the old value.\n-     * \n+     *\n      * @param listener the listener to receive notification of property changes\n      */\n     public void addPropertyChangeListener(PropertyChangeListener listener);\n \n     /**\n      * Removes a listener for any property changes.\n-     * \n+     *\n      * @param listener the listener to remove\n      */\n     public void removePropertyChangeListener(PropertyChangeListener listener);"},{"sha":"305d7e69955375ea485e762c4099b33a6675ff2e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":52,"deletions":18,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -13,16 +13,48 @@\n package org.apache.openjpa.lib.conf;\n \n import java.awt.*;\n-import java.beans.*;\n-import java.io.*;\n-import java.lang.reflect.*;\n-import java.util.*;\n+import java.beans.BeanDescriptor;\n+import java.beans.BeanInfo;\n+import java.beans.EventSetDescriptor;\n+import java.beans.IntrospectionException;\n+import java.beans.Introspector;\n+import java.beans.MethodDescriptor;\n+import java.beans.PropertyChangeListener;\n+import java.beans.PropertyChangeSupport;\n+import java.beans.PropertyDescriptor;\n+import java.io.Externalizable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n-import org.apache.commons.lang.*;\n-import org.apache.openjpa.lib.log.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.util.Map;\n+import java.util.MissingResourceException;\n+import java.util.Properties;\n+import java.util.TreeSet;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.log.LogFactory;\n import org.apache.openjpa.lib.util.Closeable;\n-import serp.util.*;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.ParseException;\n+import org.apache.openjpa.lib.util.Services;\n+import org.apache.openjpa.lib.util.StringDistance;\n+import serp.util.Strings;\n \n /**\n  * Default implementation of the {@link Configuration} interface.\n@@ -31,7 +63,7 @@\n  * provides base configuration functionality, including serialization,\n  * the <code>equals</code> and <code>hashCode</code> contracts, and default\n  * property loading.\n- *  Property descriptors for {@link Value} instances are constructed from\n+ * Property descriptors for {@link Value} instances are constructed from\n  * the {@link Localizer} for the package of the configuration class. The\n  * following localized strings will be used for describing a value, where\n  * <em>name</em> is the last token of the value's property string:\n@@ -53,11 +85,12 @@\n  * <li><em>name</em>-displayorder: The order in which the property should\n  * be displayer.</li>\n  * </ul>\n- * \n+ *\n  * @author Abe White\n  */\n public class ConfigurationImpl\n     implements Configuration, Externalizable, ValueListener {\n+\n     private static final String SEP = System.getProperty(\"line.separator\");\n \n     private static final Localizer _loc = Localizer.forPackage\n@@ -87,12 +120,12 @@ public ConfigurationImpl() {\n \n     /**\n      * Constructor.\n-     * \n+     *\n      * @param loadDefaults whether to attempt to load the default properties\n      */\n     public ConfigurationImpl(boolean loadDefaults) {\n         logFactoryPlugin = addPlugin(\"org.apache.openjpa.lib.Log\", true);\n-        String[] aliases = new String[] {\n+        String[] aliases = new String[]{\n             \"true\", \"org.apache.openjpa.lib.log.LogFactoryImpl\",\n             \"commons\", \"org.apache.openjpa.lib.log.CommonsLogFactory\",\n             \"log4j\", \"org.apache.openjpa.lib.log.Log4JLogFactory\",\n@@ -141,7 +174,7 @@ public String getProductName() {\n     public LogFactory getLogFactory() {\n         if (logFactoryPlugin.get() == null)\n             logFactoryPlugin.instantiate(LogFactory.class, this);\n-        return(LogFactory) logFactoryPlugin.get();\n+        return (LogFactory) logFactoryPlugin.get();\n     }\n \n     public void setLogFactory(LogFactory logFactory) {\n@@ -187,7 +220,7 @@ public Log getProfilingLog() {\n     }\n \n     public Value[] getValues() {\n-        return(Value[]) _vals.toArray(new Value[_vals.size()]);\n+        return (Value[]) _vals.toArray(new Value[_vals.size()]);\n     }\n \n     public Value getValue(String property) {\n@@ -402,7 +435,7 @@ private PropertyDescriptor getPropertyDescriptor(Value val)\n                 + StringUtils.capitalize(prop), (Class[]) null));\n             pd.setWriteMethod(getClass().getMethod(\"set\"\n                 + StringUtils.capitalize(prop), new Class[]\n-                {pd.getReadMethod().getReturnType()}));\n+                { pd.getReadMethod().getReturnType() }));\n         } catch (Throwable t) {\n             // if an error occurs, it might be because the value is a\n             // dynamic property.\n@@ -698,9 +731,9 @@ public void writeExternal(ObjectOutput out) throws IOException {\n     public Object clone() {\n         try {\n             Constructor cons = getClass().getConstructor\n-                (new Class[] { boolean.class });\n+                (new Class[]{ boolean.class });\n             Configuration clone = (Configuration) cons.newInstance\n-                (new Object[] { Boolean.FALSE });\n+                (new Object[]{ Boolean.FALSE });\n             clone.fromProperties(toProperties(true));\n             return clone;\n         } catch (RuntimeException re) {\n@@ -808,8 +841,9 @@ public PluginListValue addPluginList(String property) {\n      * Exposes our values list as a list of property names.\n      */\n     private class PropertyList extends AbstractList {\n+\n         public Object get(int i) {\n-            return((Value) _vals.get(i)).getProperty();\n+            return ((Value) _vals.get(i)).getProperty();\n         }\n \n         public int size() {"},{"sha":"14f52aa5678336fcdd7b5f836b8f0c96f74bf3a5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,19 +12,20 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.io.*;\n-import java.util.*;\n+import java.io.File;\n+import java.util.Map;\n \n /**\n  * Implementations of this interface can populate {@link Configuration}s in\n  * some environment-specific way. Implementations must implement the\n  * <code>equals</code> and <code>hashCode</code> methods so that equivalent\n  * configurations compare equal.\n- * \n- * @since 4.0.0\n+ *\n  * @nojavadoc\n+ * @since 4.0.0\n  */\n public interface ConfigurationProvider {\n+\n     /**\n      * Load defaults, or return false if no defaults for this provider found.\n      */"},{"sha":"c6d24d1747329fbe87e6b4aa4707859c127dd172","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":39,"deletions":22,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,21 +12,35 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.io.*;\n-import java.util.*;\n-import javax.naming.*;\n-import org.apache.commons.lang.exception.*;\n-import org.apache.openjpa.lib.log.*;\n-import org.apache.openjpa.lib.util.*;\n-import serp.util.*;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.MissingResourceException;\n+import java.util.Properties;\n+import java.util.TreeSet;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n+import org.apache.openjpa.lib.util.ParseException;\n+import org.apache.openjpa.lib.util.Services;\n+import org.apache.openjpa.lib.util.StringDistance;\n+import serp.util.Strings;\n \n /**\n  * Utility methods dealing with configuration.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class Configurations {\n+\n     private static final Localizer _loc = Localizer.forPackage\n         (Configurations.class);\n \n@@ -59,16 +73,16 @@ private static String getPluginComponent(String plugin, boolean clsName) {\n         if (openParen == -1) {\n             int eq = plugin.indexOf('=');\n             if (eq == -1)\n-                return(clsName) ? plugin : null;\n-            return(clsName) ? null : plugin;\n+                return (clsName) ? plugin : null;\n+            return (clsName) ? null : plugin;\n         }\n \n         // clsName(props) form\n         if (clsName)\n             return plugin.substring(0, openParen).trim();\n         String prop = plugin.substring(openParen + 1,\n             plugin.length() - 1).trim();\n-        return(prop.length() == 0) ? null : prop;\n+        return (prop.length() == 0) ? null : prop;\n     }\n \n     /**\n@@ -164,16 +178,16 @@ private static RuntimeException getCreateException(String clsName,\n         String closest;\n         if (keys.length == 0) {\n             msg = \"invalid-plugin\";\n-            params = new Object[] { val.getProperty(), alias, e.toString(), };\n+            params = new Object[]{ val.getProperty(), alias, e.toString(), };\n         } else if ((closest = StringDistance.getClosestLevenshteinDistance\n             (alias, keys, 0.5f)) == null) {\n             msg = \"invalid-plugin-aliases\";\n-            params = new Object[] {\n+            params = new Object[]{\n                 val.getProperty(), alias, e.toString(),\n                 new TreeSet(Arrays.asList(keys)), };\n         } else {\n             msg = \"invalid-plugin-aliases-hint\";\n-            params = new Object[] {\n+            params = new Object[]{\n                 val.getProperty(), alias, e.toString(),\n                 new TreeSet(Arrays.asList(keys)), closest, };\n         }\n@@ -186,7 +200,7 @@ private static RuntimeException getCreateException(String clsName,\n      * methods. The properties string should be in the form\n      * \"prop1=val1, prop2=val2 ...\". Does not validate that setter\n      * methods exist for the properties.\n-     * \n+     *\n      * @throws RuntimeException on configuration error\n      */\n     public static void configureInstance(Object obj, Configuration conf,\n@@ -200,7 +214,7 @@ public static void configureInstance(Object obj, Configuration conf,\n      * methods. The properties string should be in the form\n      * \"prop1=val1, prop2=val2 ...\". Validates that setter methods\n      * exist for the properties.\n-     * \n+     *\n      * @throws RuntimeException on configuration error\n      */\n     public static void configureInstance(Object obj, Configuration conf,\n@@ -218,7 +232,7 @@ public static void configureInstance(Object obj, Configuration conf,\n      * Configures the given object with the given properties by\n      * matching the properties string to the object's setter\n      * methods. Does not validate that setter methods exist for the properties.\n-     * \n+     *\n      * @throws RuntimeException on configuration error\n      */\n     public static void configureInstance(Object obj, Configuration conf,\n@@ -232,7 +246,7 @@ public static void configureInstance(Object obj, Configuration conf,\n      * methods. If <code>configurationName</code> is\n      * non-<code>null</code>, validates that setter methods exist for\n      * the properties.\n-     * \n+     *\n      * @throws RuntimeException on configuration error\n      */\n     public static void configureInstance(Object obj, Configuration conf,\n@@ -274,13 +288,13 @@ else if (properties != null) {\n                         (first, options, 0.75f);\n                     if (close != null)\n                         msg = _loc.get(\"invalid-config-param-hint\",\n-                            new Object[] {\n+                            new Object[]{\n                                 configurationName, obj.getClass(), first, close,\n                                 options, });\n                 }\n \n                 if (msg == null) {\n-                    msg = _loc.get(\"invalid-config-params\", new String[] {\n+                    msg = _loc.get(\"invalid-config-params\", new String[]{\n                         configurationName, obj.getClass().getName(),\n                         invalidEntries.keySet().toString(),\n                         Options.findOptionsFor(obj.getClass()).toString(), });\n@@ -449,7 +463,7 @@ public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n      */\n     private static ConfigurationProvider newProvider(Class cls) {\n         try {\n-            return(ConfigurationProvider) cls.newInstance();\n+            return (ConfigurationProvider) cls.newInstance();\n         } catch (Throwable e) {\n             return null;\n         }\n@@ -542,7 +556,10 @@ public static Object lookup(String name) {\n         }\n         finally {\n             if (ctx != null)\n-                try { ctx.close(); } catch (Exception e) {}\n+                try {\n+                    ctx.close();\n+                } catch (Exception e) {\n+                }\n         }\n     }\n }"},{"sha":"d4294e4a3417d82b2095aa0505ddf65a54f213db","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -14,10 +14,11 @@\n \n /**\n  * A double {@link Value}.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public class DoubleValue extends Value {\n+\n     private double value;\n \n     public DoubleValue(String prop) {"},{"sha":"c7f1102f4ac875d473449504516cd9f8bf5b9d77","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,15 +12,17 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.io.*;\n-import org.apache.commons.lang.*;\n+import java.io.File;\n+\n+import org.apache.commons.lang.ObjectUtils;\n \n /**\n  * A {@link File} {@link Value}.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public class FileValue extends Value {\n+\n     private File value;\n \n     public FileValue(String prop) {\n@@ -49,7 +51,7 @@ public File get() {\n     }\n \n     protected String getInternalString() {\n-        return(value == null) ? null : value.getAbsolutePath();\n+        return (value == null) ? null : value.getAbsolutePath();\n     }\n \n     protected void setInternalString(String val) {"},{"sha":"2097b8ebec02c7be577816235e8dbc0a5f86e5d7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,17 +12,18 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.util.*;\n+import java.util.Map;\n \n /**\n  * Implementations of this interface may perform additional\n  * generic configuration with any key-value pairs that cannot be set\n  * into the object via the normal {@link org.apache.openjpa.lib.util.Options#setInto}\n  * means.\n- * \n+ *\n  * @author Patrick Linskey\n  */\n public interface GenericConfigurable {\n+\n     /**\n      * Perform any generic configuration based on the data in\n      * <code>m</code>. This method should remove any values in"},{"sha":"85ad517dad9f8df993cc3070ba5c7241d9842b0f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,14 +12,13 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import serp.util.*;\n-\n /**\n  * An int {@link Value}.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public class IntValue extends Value {\n+\n     private int value;\n \n     public IntValue(String prop) {"},{"sha":"ae22ca5f606b436302b4387a13549c45e1ec9a22","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,20 +12,23 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.io.*;\n-import java.util.*;\n-import org.apache.commons.collections.*;\n-import org.apache.openjpa.lib.log.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Simple configuration provider that sets configuration based on a\n  * provided map.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class MapConfigurationProvider implements ConfigurationProvider {\n+\n     private static final Localizer _loc = Localizer.forPackage\n         (MapConfigurationProvider.class);\n \n@@ -57,7 +60,7 @@ public boolean load(File file) throws Exception {\n     }\n \n     public Map getProperties() {\n-        return(_props == null) ? Collections.EMPTY_MAP : _props;\n+        return (_props == null) ? Collections.EMPTY_MAP : _props;\n     }\n \n     public void addProperties(Map props) {"},{"sha":"bb7f4a419e8a807916d173048af1ccb158cb7a98","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,15 +12,16 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import org.apache.commons.lang.*;\n-import org.apache.openjpa.lib.util.*;\n+import org.apache.commons.lang.ObjectUtils;\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * An object {@link Value}.\n- * \n+ *\n  * @author Abe White\n  */\n public class ObjectValue extends Value {\n+\n     private static final Localizer _loc = Localizer.forPackage\n         (ObjectValue.class);\n \n@@ -46,7 +47,7 @@ public void set(Object obj) {\n \n     /**\n      * The internal value.\n-     * \n+     *\n      * @param derived if true, this value was derived from other properties\n      */\n     public void set(Object obj, boolean derived) {"},{"sha":"4f518feeee8088ee0f4d184f884baa934a9b19d2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","status":"modified","additions":27,"deletions":23,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,18 +12,21 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.lang.reflect.*;\n-import java.util.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * A list of plugins. Defaults and aliases on plugin lists apply only\n  * to individual class names.\n- * \n- * @see PluginValue\n+ *\n  * @author Abe White\n+ * @see PluginValue\n  */\n public class PluginListValue extends ObjectValue {\n+\n     private static final String[] EMPTY = new String[0];\n \n     private static final Localizer _loc = Localizer.forPackage\n@@ -75,7 +78,8 @@ public void setProperties(String[] props) {\n     /**\n      * Instantiate the plugins as instances of the given class.\n      */\n-    public Object instantiate(Class elemType, Configuration conf, boolean fatal) {\n+    public Object instantiate(Class elemType, Configuration conf,\n+        boolean fatal) {\n         Object[] ret;\n         if (_names.length == 0)\n             ret = (Object[]) Array.newInstance(elemType, 0);\n@@ -134,24 +138,24 @@ public void setString(String str) {\n         for (int i = 0; i < str.length(); i++) {\n             c = str.charAt(i);\n             switch (c) {\n-            case '(':\n-                inParen = true;\n-                plugin.append(c);\n-                break;\n-            case ')':\n-                inParen = false;\n-                plugin.append(c);\n-                break;\n-            case ',':\n-                if (inParen)\n+                case '(':\n+                    inParen = true;\n+                    plugin.append(c);\n+                    break;\n+                case ')':\n+                    inParen = false;\n+                    plugin.append(c);\n+                    break;\n+                case ',':\n+                    if (inParen)\n+                        plugin.append(c);\n+                    else {\n+                        plugins.add(plugin.toString());\n+                        plugin = new StringBuffer();\n+                    }\n+                    break;\n+                default:\n                     plugin.append(c);\n-                else {\n-                    plugins.add(plugin.toString());\n-                    plugin = new StringBuffer();\n-                }\n-                break;\n-            default:\n-                plugin.append(c);\n             }\n         }\n         if (plugin.length() > 0)"},{"sha":"9f0de1174afc67208df32cbc4d820db4f05210e4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,8 +12,8 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import org.apache.commons.lang.*;\n-import org.apache.openjpa.lib.util.*;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * A plugin {@link Value} consisting of plugin name and properties.\n@@ -23,11 +23,12 @@\n  * forms are also valid:<br />\n  * <code>&lt;plugin-name&gt;</code><br />\n  * <code>&lt;prop1&gt;=&lt;val1&gt; ...</code>\n- *  Defaults and aliases on plugin values apply only to the plugin name.\n- * \n+ * Defaults and aliases on plugin values apply only to the plugin name.\n+ *\n  * @author Abe White\n  */\n public class PluginValue extends ObjectValue {\n+\n     private static final Localizer _loc = Localizer.forPackage\n         (PluginValue.class);\n "},{"sha":"40b43e9b54d4af43e1ded3a03553f02dc2296ae6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,14 +12,15 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import serp.util.*;\n+import serp.util.Strings;\n \n /**\n  * A comma-separated list of string values.\n- * \n+ *\n  * @author Abe White\n  */\n public class StringListValue extends Value {\n+\n     public static final String[] EMPTY = new String[0];\n \n     private String[] _values = EMPTY;"},{"sha":"cb64ea1230eead687622090cc803e10d3fce863b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,14 +12,15 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import org.apache.commons.lang.*;\n+import org.apache.commons.lang.StringUtils;\n \n /**\n  * A string {@link Value}.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public class StringValue extends Value {\n+\n     private String value;\n \n     public StringValue(String prop) {"},{"sha":"be1372b698f3d2b2005465aca6977f43ae426b06","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":20,"deletions":15,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,16 +12,20 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.util.*;\n-import org.apache.commons.lang.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.ParseException;\n \n /**\n  * A configuration value.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public abstract class Value implements Cloneable {\n+\n     private static final String[] EMPTY_ALIASES = new String[0];\n     private static final Localizer s_loc = Localizer.forPackage(Value.class);\n \n@@ -35,7 +39,7 @@\n \n     /**\n      * Constructor. Supply the property name.\n-     * \n+     *\n      * @see #setProperty\n      */\n     public Value(String prop) {\n@@ -69,7 +73,7 @@ public void setProperty(String prop) {\n      * All alias values must be in string form.\n      */\n     public String[] getAliases() {\n-        return(aliases == null) ? EMPTY_ALIASES : aliases;\n+        return (aliases == null) ? EMPTY_ALIASES : aliases;\n     }\n \n     /**\n@@ -142,14 +146,14 @@ protected String alias(String str, String[] aliases, boolean nullNotFound) {\n         if (str != null)\n             str = str.trim();\n         if (aliases == null || aliases.length == 0)\n-            return(nullNotFound) ? null : str;\n+            return (nullNotFound) ? null : str;\n \n         boolean empty = str != null && str.length() == 0;\n         for (int i = 1; i < aliases.length; i += 2)\n             if (StringUtils.equals(str, aliases[i])\n                 || (empty && aliases[i] == null))\n                 return aliases[i - 1];\n-        return(nullNotFound) ? null : str;\n+        return (nullNotFound) ? null : str;\n     }\n \n     /**\n@@ -162,7 +166,8 @@ public String unalias(String str) {\n     /**\n      * Unalias the given setting.\n      */\n-    protected String unalias(String str, String[] aliases, boolean nullNotFound) {\n+    protected String unalias(String str, String[] aliases,\n+        boolean nullNotFound) {\n         if (str != null)\n             str = str.trim();\n \n@@ -172,15 +177,15 @@ protected String unalias(String str, String[] aliases, boolean nullNotFound) {\n         if (aliases != null)\n             for (int i = 0; i < aliases.length; i += 2)\n                 if (StringUtils.equals(str, aliases[i])\n-                    || StringUtils.equals(str, aliases[i+1])\n+                    || StringUtils.equals(str, aliases[i + 1])\n                     || (empty && aliases[i] == null))\n                     return aliases[i + 1];\n \n         if (isAliasListComprehensive() && aliases != null)\n             throw new ParseException(s_loc.get(\"invalid-enumerated-config\",\n                 getProperty(), str, Arrays.asList(aliases)));\n \n-        return(nullNotFound) ? null : str;\n+        return (nullNotFound) ? null : str;\n     }\n \n     /**\n@@ -209,8 +214,8 @@ public String getInstantiatingGetter() {\n      * The name of the getter method for the instantiated value of this\n      * property(as opposed to the string value). If the string starts with\n      * <code>this.</code>, then the getter will be looked up on the value\n-     * instance itself. Otherwise, the getter will be looked up on the \n-     * configuration instance. \n+     * instance itself. Otherwise, the getter will be looked up on the\n+     * configuration instance.\n      */\n     public void setInstantiatingGetter(String getter) {\n         this.getter = getter;\n@@ -321,7 +326,7 @@ public void valueChanged() {\n \n     public int hashCode() {\n         String str = getString();\n-        int strHash =  (str == null) ? 0 : str.hashCode();\n+        int strHash = (str == null) ? 0 : str.hashCode();\n         int propHash = (prop == null) ? 0 : prop.hashCode();\n         return strHash ^ propHash;\n     }\n@@ -332,7 +337,7 @@ public boolean equals(Object other) {\n         if (!(other instanceof Value))\n             return false;\n \n-        Value o = (Value)other;\n+        Value o = (Value) other;\n         return StringUtils.equals(prop, o.getProperty())\n             && StringUtils.equals(getString(), o.getString());\n     }"},{"sha":"d0aeb4c170909fa9612ededdf99bbeabbc48a7f4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ValueListener.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ValueListener.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ValueListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ValueListener.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -14,10 +14,11 @@\n \n /**\n  * Components can listen on {@link Value} objects for changes directly.\n- * \n+ *\n  * @author Abe White\n  */\n public interface ValueListener {\n+\n     /**\n      * Callback used by {@link Value} objects to notify listener of change.\n      */"},{"sha":"5a7bb8c30d3e93a2264f981616d45f3fad0a5190","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/package.html","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -1,8 +1,9 @@\n <html>\n <body>\n-\t<p><strong>Configuration Framework</strong></p>\n-\t<p>\n-\t\tThis package provides an extendable product configuration framework.\n-\t</p>\n+<p><strong>Configuration Framework</strong></p>\n+\n+<p>\n+    This package provides an extendable product configuration framework.\n+</p>\n </body>\n </html>"},{"sha":"a623ba8ece859b9923b43505bcbe12572c239914","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/AbstractJDBCListener.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/AbstractJDBCListener.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/AbstractJDBCListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/AbstractJDBCListener.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -15,10 +15,11 @@\n /**\n  * An abstract implementation of the {@link JDBCListener}\n  * listener. It allows simple implementation of fine-grained event handling.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public class AbstractJDBCListener implements JDBCListener {\n+\n     /**\n      * Catch-all for unhandled events. This method is called by all other\n      * event methods if you do not override them. Does nothing by default."},{"sha":"0f864c33f81126d1b2985ec31f7aff2d20ba2a49","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConfiguringConnectionDecorator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,8 +12,10 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.sql.*;\n-import javax.sql.*;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n \n /**\n  * Connection decorator that can configure some properties of the\n@@ -23,11 +25,12 @@\n  * <li>TransactionIsolation({@link Connection} constants)</li>\n  * <li>AutoCommit</li>\n  * </ul>\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class ConfiguringConnectionDecorator implements ConnectionDecorator {\n+\n     private int _isolation = -1;\n     private int _queryTimeout = -1;\n     private Boolean _autoCommit = null;\n@@ -91,6 +94,7 @@ public Connection decorate(Connection conn) throws SQLException {\n      * Decorator to configure connection components correctly.\n      */\n     private class ConfiguringConnection extends DelegatingConnection {\n+\n         private boolean _curAutoCommit = false;\n \n         public ConfiguringConnection(Connection conn) throws SQLException {"},{"sha":"5e5fec650995e021e0b649f8952eb305c967911d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConnectionDecorator.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ConnectionDecorator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,15 +12,17 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.sql.*;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n \n /**\n  * A connection decorator can wrap {@link Connection}s before they are\n  * returned to the user to add functionality.\n- * \n+ *\n  * @author Abe White\n  */\n public interface ConnectionDecorator {\n+\n     /**\n      * Decorate the given connection if desired.\n      */"},{"sha":"742cdc780cfc79712607ce17e5e46b58be3d1877","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,18 +12,19 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.sql.*;\n-import java.util.*;\n-import javax.sql.*;\n-import org.apache.openjpa.lib.log.*;\n+import java.sql.Connection;\n+\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.log.NoneLogFactory;\n \n /**\n  * Provies basic logging facilities to a DataSource.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  * @nojavadoc\n  */\n public class DataSourceLogs {\n+\n     private Log _jdbcLog = null;\n     private Log _sqlLog = null;\n \n@@ -39,7 +40,7 @@ public DataSourceLogs(Log jdbcLog, Log sqlLog) {\n      * The log to write JDBC messages to.\n      */\n     public Log getJDBCLog() {\n-        return(_jdbcLog == null) ? NoneLogFactory.NoneLog.getInstance()\n+        return (_jdbcLog == null) ? NoneLogFactory.NoneLog.getInstance()\n             : _jdbcLog;\n     }\n \n@@ -54,14 +55,14 @@ public void setJDBCLog(Log log) {\n      * Return true if JDBC logging is enabled.\n      */\n     public boolean isJDBCEnabled() {\n-        return(_jdbcLog != null && _jdbcLog.isTraceEnabled());\n+        return (_jdbcLog != null && _jdbcLog.isTraceEnabled());\n     }\n \n     /**\n      * The log to write SQL messages to.\n      */\n     public Log getSQLLog() {\n-        return(_sqlLog == null) ? NoneLogFactory.NoneLog.getInstance()\n+        return (_sqlLog == null) ? NoneLogFactory.NoneLog.getInstance()\n             : _sqlLog;\n     }\n \n@@ -76,7 +77,7 @@ public void setSQLLog(Log log) {\n      * Return true if SQL logging is enabled.\n      */\n     public boolean isSQLEnabled() {\n-        return(_sqlLog != null && _sqlLog.isTraceEnabled());\n+        return (_sqlLog != null && _sqlLog.isTraceEnabled());\n     }\n \n     /**"},{"sha":"ade647321fa82785cbf71da8fce6f77f8194ac7b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DecoratingDataSource.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,18 +12,23 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.sql.*;\n-import java.util.*;\n-import javax.sql.*;\n-import org.apache.openjpa.lib.util.concurrent.*;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.openjpa.lib.util.concurrent.CopyOnWriteArrayList;\n \n /**\n  * Delegating data source that maintains a list of {@link ConnectionDecorator}s.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class DecoratingDataSource extends DelegatingDataSource {\n+\n     private List _decorators = new CopyOnWriteArrayList();\n     private boolean _conf = false;\n "},{"sha":"dfb9a083c5e30c901ef5a2576cdfdc31a307bc66","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","status":"modified","additions":37,"deletions":16,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingCallableStatement.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,26 +12,42 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.io.*;\n-import java.math.*;\n-import java.net.*;\n-import java.sql.*;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.CallableStatement;\n+import java.sql.Clob;\n+import java.sql.Connection;\n import java.sql.Date;\n-import java.util.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.Map;\n+\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n  * {@link CallableStatement} that delegates to an internal statement.\n- * \n+ *\n  * @author Abe White\n  */\n-public class DelegatingCallableStatement implements CallableStatement, Closeable {\n+public class DelegatingCallableStatement\n+    implements CallableStatement, Closeable {\n+\n     private final CallableStatement _stmnt;\n     private final DelegatingCallableStatement _del;\n     private final Connection _conn;\n \n-    public DelegatingCallableStatement(CallableStatement stmnt, Connection conn) {\n+    public DelegatingCallableStatement(CallableStatement stmnt,\n+        Connection conn) {\n         _conn = conn;\n         _stmnt = stmnt;\n         if (_stmnt instanceof DelegatingCallableStatement)\n@@ -62,7 +78,7 @@ public CallableStatement getDelegate() {\n      * Return the base underlying data store statement.\n      */\n     public CallableStatement getInnermostDelegate() {\n-        return(_del == null) ? _stmnt : _del.getInnermostDelegate();\n+        return (_del == null) ? _stmnt : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n@@ -248,7 +264,7 @@ protected ResultSet executeQuery(boolean wrap) throws SQLException {\n         return wrapResult(wrap, rs);\n     }\n \n-    public int executeUpdate  () throws SQLException {\n+    public int executeUpdate() throws SQLException {\n         return _stmnt.executeUpdate();\n     }\n \n@@ -327,7 +343,8 @@ public void clearParameters() throws SQLException {\n         _stmnt.clearParameters();\n     }\n \n-    public void setObject(int i1, Object o, int i2, int i3) throws SQLException {\n+    public void setObject(int i1, Object o, int i2, int i3)\n+        throws SQLException {\n         _stmnt.setObject(i1, o, i2, i3);\n     }\n \n@@ -347,7 +364,8 @@ public void addBatch() throws SQLException {\n         _stmnt.addBatch();\n     }\n \n-    public void setCharacterStream(int i1, Reader r, int i2) throws SQLException {\n+    public void setCharacterStream(int i1, Reader r, int i2)\n+        throws SQLException {\n         _stmnt.setCharacterStream(i1, r, i2);\n     }\n \n@@ -379,7 +397,8 @@ public void setTime(int i, Time t, Calendar c) throws SQLException {\n         _stmnt.setTime(i, t, c);\n     }\n \n-    public void setTimestamp(int i, Timestamp t, Calendar c) throws SQLException {\n+    public void setTimestamp(int i, Timestamp t, Calendar c)\n+        throws SQLException {\n         _stmnt.setTimestamp(i, t, c);\n     }\n \n@@ -442,7 +461,8 @@ public void registerOutParameter(int i1, int i2) throws SQLException {\n         _stmnt.registerOutParameter(i1, i2);\n     }\n \n-    public void registerOutParameter(int i1, int i2, int i3) throws SQLException {\n+    public void registerOutParameter(int i1, int i2, int i3)\n+        throws SQLException {\n         _stmnt.registerOutParameter(i1, i2, i3);\n     }\n \n@@ -642,7 +662,8 @@ public void setBinaryStream(String a, InputStream b, int c)\n         throw new UnsupportedOperationException();\n     }\n \n-    public void setObject(String a, Object b, int c, int d) throws SQLException {\n+    public void setObject(String a, Object b, int c, int d)\n+        throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n "},{"sha":"036952f88bd1509ab3b5b7588698369180744f38","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","status":"modified","additions":65,"deletions":52,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,50 +12,60 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.io.*;\n-import java.lang.reflect.*;\n-import java.sql.*;\n-import java.util.*;\n-import org.apache.commons.lang.exception.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.lang.reflect.Method;\n+import java.sql.CallableStatement;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n import org.apache.openjpa.lib.util.Closeable;\n-import serp.util.*;\n+import org.apache.openjpa.lib.util.Localizer;\n+import serp.util.Numbers;\n \n /**\n  * Wrapper around an existing connection. Subclasses can override the\n  * methods whose behavior they mean to change. The <code>equals</code> and\n  * <code>hashCode</code> methods pass through to the base underlying data\n  * store connection.\n- * \n+ *\n  * @author Abe White\n  */\n public class DelegatingConnection implements Connection, Closeable {\n+\n     // jdbc 3 method keys\n-    private static final Object SET_HOLDABILITY         = new Object();\n-    private static final Object GET_HOLDABILITY         = new Object();\n-    private static final Object SET_SAVEPOINT_NONAME    = new Object();\n-    private static final Object SET_SAVEPOINT           = new Object();\n-    private static final Object ROLLBACK_SAVEPOINT      = new Object();\n-    private static final Object RELEASE_SAVEPOINT       = new Object();\n-    private static final Object CREATE_STATEMENT        = new Object();\n-    private static final Object PREPARE_STATEMENT       = new Object();\n-    private static final Object PREPARE_CALL            = new Object();\n-    private static final Object PREPARE_WITH_KEYS       = new Object();\n-    private static final Object PREPARE_WITH_INDEX      = new Object();\n-    private static final Object PREPARE_WITH_NAMES      = new Object();\n+    private static final Object SET_HOLDABILITY = new Object();\n+    private static final Object GET_HOLDABILITY = new Object();\n+    private static final Object SET_SAVEPOINT_NONAME = new Object();\n+    private static final Object SET_SAVEPOINT = new Object();\n+    private static final Object ROLLBACK_SAVEPOINT = new Object();\n+    private static final Object RELEASE_SAVEPOINT = new Object();\n+    private static final Object CREATE_STATEMENT = new Object();\n+    private static final Object PREPARE_STATEMENT = new Object();\n+    private static final Object PREPARE_CALL = new Object();\n+    private static final Object PREPARE_WITH_KEYS = new Object();\n+    private static final Object PREPARE_WITH_INDEX = new Object();\n+    private static final Object PREPARE_WITH_NAMES = new Object();\n \n     private static final Localizer _loc = Localizer.forPackage\n         (DelegatingConnection.class);\n \n     private static final Map _jdbc3;\n+\n     static {\n         boolean jdbc3 = false;\n         Method m = null;\n         try {\n             m = Connection.class.getMethod(\"setSavepoint\",\n-                new Class[] { String.class });\n+                new Class[]{ String.class });\n             jdbc3 = true;\n-        } catch (Throwable t) {}\n+        } catch (Throwable t) {\n+        }\n \n         if (jdbc3) {\n             _jdbc3 = new HashMap();\n@@ -86,7 +96,7 @@ public Connection getDelegate() {\n      * Return the base underlying data store connection.\n      */\n     public Connection getInnermostDelegate() {\n-        return(_del == null) ? _conn : _del.getInnermostDelegate();\n+        return (_del == null) ? _conn : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n@@ -329,55 +339,56 @@ public void setHoldability(int holdability) throws SQLException {\n         Method m = (Method) _jdbc3.get(SET_HOLDABILITY);\n         if (m == null)\n             m = createJDBC3Method(SET_HOLDABILITY, \"setHoldability\",\n-                new Class[] {int.class});\n-        invokeJDBC3(m, new Object[] {Numbers.valueOf(holdability)});\n+                new Class[]{ int.class });\n+        invokeJDBC3(m, new Object[]{ Numbers.valueOf(holdability) });\n     }\n \n     public int getHoldability() throws SQLException {\n         assertJDBC3();\n         Method m = (Method) _jdbc3.get(GET_HOLDABILITY);\n         if (m == null)\n             m = createJDBC3Method(GET_HOLDABILITY, \"getHoldability\", null);\n-        return((Number) invokeJDBC3(m, null)).intValue();\n+        return ((Number) invokeJDBC3(m, null)).intValue();\n     }\n \n     public Savepoint setSavepoint() throws SQLException {\n         assertJDBC3();\n         Method m = (Method) _jdbc3.get(SET_SAVEPOINT_NONAME);\n         if (m == null)\n             m = createJDBC3Method(SET_SAVEPOINT_NONAME, \"setSavepoint\", null);\n-        return(Savepoint) invokeJDBC3(m, null);\n+        return (Savepoint) invokeJDBC3(m, null);\n     }\n \n     public Savepoint setSavepoint(String savepoint) throws SQLException {\n         assertJDBC3();\n         Method m = (Method) _jdbc3.get(SET_SAVEPOINT);\n         if (m == null)\n             m = createJDBC3Method(SET_SAVEPOINT, \"setSavepoint\",\n-                new Class[] {String.class});\n-        return(Savepoint) invokeJDBC3(m, new Object[] {savepoint});\n+                new Class[]{ String.class });\n+        return (Savepoint) invokeJDBC3(m, new Object[]{ savepoint });\n     }\n \n     public void rollback(Savepoint savepoint) throws SQLException {\n         assertJDBC3();\n         Method m = (Method) _jdbc3.get(ROLLBACK_SAVEPOINT);\n         if (m == null)\n             m = createJDBC3Method(ROLLBACK_SAVEPOINT, \"rollback\",\n-                new Class[] {Savepoint.class});\n-        invokeJDBC3(m, new Object[] {savepoint});\n+                new Class[]{ Savepoint.class });\n+        invokeJDBC3(m, new Object[]{ savepoint });\n     }\n \n     public void releaseSavepoint(Savepoint savepoint) throws SQLException {\n         assertJDBC3();\n         Method m = (Method) _jdbc3.get(RELEASE_SAVEPOINT);\n         if (m == null)\n             m = createJDBC3Method(RELEASE_SAVEPOINT, \"releaseSavepoint\",\n-                new Class[] {Savepoint.class});\n-        invokeJDBC3(m, new Object[] {savepoint});\n+                new Class[]{ Savepoint.class });\n+        invokeJDBC3(m, new Object[]{ savepoint });\n     }\n \n     public Statement createStatement(int resultSetType,\n-        int resultSetConcurrency, int resultSetHoldability) throws SQLException {\n+        int resultSetConcurrency, int resultSetHoldability)\n+        throws SQLException {\n         assertJDBC3();\n         return createStatement(resultSetType, resultSetConcurrency,\n             resultSetHoldability, true);\n@@ -394,11 +405,11 @@ protected Statement createStatement(int resultSetType,\n             Method m = (Method) _jdbc3.get(CREATE_STATEMENT);\n             if (m == null)\n                 m = createJDBC3Method(CREATE_STATEMENT, \"createStatement\",\n-                    new Class[] {int.class, int.class, int.class});\n-            stmnt = (Statement) invokeJDBC3(m, new Object[] {\n+                    new Class[]{ int.class, int.class, int.class });\n+            stmnt = (Statement) invokeJDBC3(m, new Object[]{\n                 Numbers.valueOf(resultSetType),\n                 Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability)});\n+                Numbers.valueOf(resultSetHoldability) });\n         }\n         if (wrap)\n             stmnt = new DelegatingStatement(stmnt, this);\n@@ -424,11 +435,12 @@ protected PreparedStatement prepareStatement(String sql,\n             Method m = (Method) _jdbc3.get(PREPARE_STATEMENT);\n             if (m == null)\n                 m = createJDBC3Method(PREPARE_STATEMENT, \"prepareStatement\",\n-                    new Class[]{String.class, int.class, int.class, int.class});\n-            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[] { sql,\n+                    new Class[]{ String.class, int.class, int.class,\n+                        int.class });\n+            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[]{ sql,\n                 Numbers.valueOf(resultSetType),\n                 Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability)});\n+                Numbers.valueOf(resultSetHoldability) });\n         }\n         if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n@@ -454,11 +466,12 @@ protected CallableStatement prepareCall(String sql, int resultSetType,\n             Method m = (Method) _jdbc3.get(PREPARE_CALL);\n             if (m == null)\n                 m = createJDBC3Method(PREPARE_CALL, \"prepareCall\",\n-                    new Class[]{String.class, int.class, int.class, int.class});\n-            stmnt = (CallableStatement) invokeJDBC3(m, new Object[] { sql,\n+                    new Class[]{ String.class, int.class, int.class,\n+                        int.class });\n+            stmnt = (CallableStatement) invokeJDBC3(m, new Object[]{ sql,\n                 Numbers.valueOf(resultSetType),\n                 Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability)});\n+                Numbers.valueOf(resultSetHoldability) });\n         }\n         if (wrap)\n             stmnt = new DelegatingCallableStatement(stmnt, this);\n@@ -480,9 +493,9 @@ protected PreparedStatement prepareStatement(String sql,\n             Method m = (Method) _jdbc3.get(PREPARE_WITH_KEYS);\n             if (m == null)\n                 m = createJDBC3Method(PREPARE_WITH_KEYS, \"prepareStatement\",\n-                    new Class[] {String.class, int.class});\n-            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[] { sql,\n-                Numbers.valueOf(autoGeneratedKeys)});\n+                    new Class[]{ String.class, int.class });\n+            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[]{ sql,\n+                Numbers.valueOf(autoGeneratedKeys) });\n         }\n         if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n@@ -504,9 +517,9 @@ protected PreparedStatement prepareStatement(String sql,\n             Method m = (Method) _jdbc3.get(PREPARE_WITH_INDEX);\n             if (m == null)\n                 m = createJDBC3Method(PREPARE_WITH_INDEX, \"prepareStatement\",\n-                    new Class[] {String.class, int[].class});\n-            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[] { sql,\n-                columnIndexes});\n+                    new Class[]{ String.class, int[].class });\n+            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[]{ sql,\n+                columnIndexes });\n         }\n         if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);\n@@ -529,9 +542,9 @@ protected PreparedStatement prepareStatement(String sql,\n             Method m = (Method) _jdbc3.get(PREPARE_WITH_NAMES);\n             if (m == null)\n                 m = createJDBC3Method(PREPARE_WITH_NAMES, \"prepareStatement\",\n-                    new Class[] {String.class, String[].class});\n-            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[] { sql,\n-                columnNames});\n+                    new Class[]{ String.class, String[].class });\n+            stmnt = (PreparedStatement) invokeJDBC3(m, new Object[]{ sql,\n+                columnNames });\n         }\n         if (wrap)\n             stmnt = new DelegatingPreparedStatement(stmnt, this);"},{"sha":"3f77f9e42ee1954e47f061746a64a91d78483290","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDataSource.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,20 +12,23 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.io.*;\n-import java.sql.*;\n-import javax.sql.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.io.PrintWriter;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+import javax.sql.DataSource;\n+\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n  * Wrapper around an existing data source. Subclasses can override the\n  * methods whose behavior they mean to change. The <code>equals</code> and\n  * <code>hashCode</code> methods pass through to the base underlying data store.\n- * \n+ *\n  * @author Abe White\n  */\n public class DelegatingDataSource implements DataSource, Closeable {\n+\n     private final DataSource _ds;\n     private final DelegatingDataSource _del;\n \n@@ -52,7 +55,7 @@ public DataSource getDelegate() {\n      * Return the inner-most wrapped delegate.\n      */\n     public DataSource getInnermostDelegate() {\n-        return(_del == null) ? _ds : _del.getInnermostDelegate();\n+        return (_del == null) ? _ds : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {"},{"sha":"f1ad220a84e48f08c2ff5ae2d7caaa07e5a71ce7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","status":"modified","additions":17,"deletions":11,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,18 +12,20 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.io.*;\n-import java.sql.*;\n-import java.util.*;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n \n /**\n  * Wrapper around a DatabaseMetadata instance.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public class DelegatingDatabaseMetaData implements DatabaseMetaData {\n+\n     private final DatabaseMetaData _metaData;\n-    private final Connection  _conn;\n+    private final Connection _conn;\n \n     public DelegatingDatabaseMetaData(DatabaseMetaData metaData,\n         Connection conn) {\n@@ -36,7 +38,7 @@ public DelegatingDatabaseMetaData(DatabaseMetaData metaData,\n      */\n     public DatabaseMetaData getInnermostDelegate() {\n         return _metaData instanceof DelegatingDatabaseMetaData ?\n-            ((DelegatingDatabaseMetaData)_metaData).getInnermostDelegate()\n+            ((DelegatingDatabaseMetaData) _metaData).getInnermostDelegate()\n             : _metaData;\n     }\n \n@@ -49,7 +51,7 @@ public boolean equals(Object other) {\n             return true;\n         if (other instanceof DelegatingDatabaseMetaData)\n             other = ((DelegatingDatabaseMetaData) other)\n-            .getInnermostDelegate();\n+                .getInnermostDelegate();\n         return getInnermostDelegate().equals(other);\n     }\n \n@@ -462,7 +464,8 @@ public boolean supportsCatalogsInIndexDefinitions() throws SQLException {\n         return _metaData.supportsCatalogsInIndexDefinitions();\n     }\n \n-    public boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException {\n+    public boolean supportsCatalogsInPrivilegeDefinitions()\n+        throws SQLException {\n         return _metaData.supportsCatalogsInPrivilegeDefinitions();\n     }\n \n@@ -482,7 +485,8 @@ public boolean supportsConvert() throws SQLException {\n         return _metaData.supportsConvert();\n     }\n \n-    public boolean supportsConvert(int fromType, int toType) throws SQLException {\n+    public boolean supportsConvert(int fromType, int toType)\n+        throws SQLException {\n         return _metaData.supportsConvert(fromType, toType);\n     }\n \n@@ -505,7 +509,8 @@ public boolean supportsDataManipulationTransactionsOnly()\n         return _metaData.supportsDataManipulationTransactionsOnly();\n     }\n \n-    public boolean supportsDifferentTableCorrelationNames() throws SQLException {\n+    public boolean supportsDifferentTableCorrelationNames()\n+        throws SQLException {\n         return _metaData.supportsDifferentTableCorrelationNames();\n     }\n \n@@ -717,7 +722,8 @@ public ResultSet getSuperTables(String catalog, String schemaPatter,\n     }\n \n     public ResultSet getAttributes(String catalog, String schemaPatter,\n-        String typeNamePattern, String attributeNamePattern) throws SQLException {\n+        String typeNamePattern, String attributeNamePattern)\n+        throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n "},{"sha":"5ed48934615dd96f226a9487fd31e1b1ccc9b3b5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","status":"modified","additions":32,"deletions":14,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingPreparedStatement.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,29 +12,44 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.io.*;\n-import java.math.*;\n-import java.net.*;\n-import java.sql.*;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Connection;\n import java.sql.Date;\n-import java.util.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.sql.PreparedStatement;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n  * Wrapper around an existing statement. Subclasses can override the\n  * methods whose behavior they mean to change. The <code>equals</code> and\n  * <code>hashCode</code> methods pass through to the base underlying data\n  * store statement.\n- * \n+ *\n  * @author Abe White\n  */\n-public class DelegatingPreparedStatement implements PreparedStatement, Closeable {\n+public class DelegatingPreparedStatement\n+    implements PreparedStatement, Closeable {\n+\n     private final PreparedStatement _stmnt;\n     private final DelegatingPreparedStatement _del;\n     private final Connection _conn;\n \n-    public DelegatingPreparedStatement(PreparedStatement stmnt, Connection conn) {\n+    public DelegatingPreparedStatement(PreparedStatement stmnt,\n+        Connection conn) {\n         _conn = conn;\n         _stmnt = stmnt;\n         if (_stmnt instanceof DelegatingPreparedStatement)\n@@ -60,7 +75,7 @@ public PreparedStatement getDelegate() {\n      * Return the base underlying data store statement.\n      */\n     public PreparedStatement getInnermostDelegate() {\n-        return(_del == null) ? _stmnt : _del.getInnermostDelegate();\n+        return (_del == null) ? _stmnt : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n@@ -243,7 +258,7 @@ protected ResultSet executeQuery(boolean wrap) throws SQLException {\n         return wrapResult(rs, wrap);\n     }\n \n-    public int executeUpdate  () throws SQLException {\n+    public int executeUpdate() throws SQLException {\n         return _stmnt.executeUpdate();\n     }\n \n@@ -322,7 +337,8 @@ public void clearParameters() throws SQLException {\n         _stmnt.clearParameters();\n     }\n \n-    public void setObject(int i1, Object o, int i2, int i3) throws SQLException {\n+    public void setObject(int i1, Object o, int i2, int i3)\n+        throws SQLException {\n         _stmnt.setObject(i1, o, i2, i3);\n     }\n \n@@ -342,7 +358,8 @@ public void addBatch() throws SQLException {\n         _stmnt.addBatch();\n     }\n \n-    public void setCharacterStream(int i1, Reader r, int i2) throws SQLException {\n+    public void setCharacterStream(int i1, Reader r, int i2)\n+        throws SQLException {\n         _stmnt.setCharacterStream(i1, r, i2);\n     }\n \n@@ -374,7 +391,8 @@ public void setTime(int i, Time t, Calendar c) throws SQLException {\n         _stmnt.setTime(i, t, c);\n     }\n \n-    public void setTimestamp(int i, Timestamp t, Calendar c) throws SQLException {\n+    public void setTimestamp(int i, Timestamp t, Calendar c)\n+        throws SQLException {\n         _stmnt.setTimestamp(i, t, c);\n     }\n "},{"sha":"441b0d965db31b2a4cbaf997f31d5286300c50aa","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","status":"modified","additions":23,"deletions":9,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingResultSet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,24 +12,37 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.io.*;\n-import java.math.*;\n-import java.net.*;\n-import java.sql.*;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n import java.sql.Date;\n-import java.util.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.Map;\n+\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n  * Wrapper around an existing result set. Subclasses can override the\n  * methods whose behavior they mean to change. The <code>equals</code> and\n  * <code>hashCode</code> methods pass through to the base underlying data\n  * store statement.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  */\n public class DelegatingResultSet implements ResultSet, Closeable {\n+\n     private final ResultSet _rs;\n     private final DelegatingResultSet _del;\n     private final Statement _stmnt;\n@@ -57,7 +70,7 @@ public ResultSet getDelegate() {\n      * Return the inner-most wrapped delegate.\n      */\n     public ResultSet getInnermostDelegate() {\n-        return(_del == null) ? _rs : _del.getInnermostDelegate();\n+        return (_del == null) ? _rs : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {\n@@ -644,7 +657,8 @@ public void updateArray(int column, Array array) throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n \n-    public void updateArray(String columnName, Array array) throws SQLException {\n+    public void updateArray(String columnName, Array array)\n+        throws SQLException {\n         throw new UnsupportedOperationException();\n     }\n }"},{"sha":"5fcb707be6fd414a947e559a399a7d5982157b16","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingStatement.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,18 +12,24 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.sql.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Statement;\n+\n+import org.apache.openjpa.lib.util.Closeable;\n \n /**\n  * Wrapper around an existing statement. Subclasses can override the\n  * methods whose behavior they mean to change. The <code>equals</code> and\n  * <code>hashCode</code> methods pass through to the base underlying data\n  * store statement.\n- * \n+ *\n  * @author Abe White\n  */\n public class DelegatingStatement implements Statement, Closeable {\n+\n     private final Statement _stmnt;\n     private final DelegatingStatement _del;\n     private final Connection _conn;\n@@ -54,7 +60,7 @@ public Statement getDelegate() {\n      * Return the base underlying data store statement.\n      */\n     public Statement getInnermostDelegate() {\n-        return(_del == null) ? _stmnt : _del.getInnermostDelegate();\n+        return (_del == null) ? _stmnt : _del.getInnermostDelegate();\n     }\n \n     public int hashCode() {"},{"sha":"2daeae4894799a14c6b6e141f4cacd135ab01c17","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEvent.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEvent.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEvent.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,17 +12,19 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.sql.*;\n-import java.util.*;\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.EventObject;\n \n /**\n  * A JDBC event. The event source will be the connection.\n- * \n- * @see JDBCListener\n+ *\n  * @author Marc Prud'hommeaux\n  * @author Abe White\n+ * @see JDBCListener\n  */\n public class JDBCEvent extends EventObject {\n+\n     /**\n      * Type code indicating that a {@link Statement} is being prepared.\n      */\n@@ -116,7 +118,7 @@ public final short getType() {\n      * Return the Connection for this event.\n      */\n     public final Connection getConnection() {\n-        return(Connection) getSource();\n+        return (Connection) getSource();\n     }\n \n     /**"},{"sha":"aff4d895ab121cf169fb4a41953cb363dcae4bed","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","status":"modified","additions":48,"deletions":41,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCEventConnectionDecorator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,19 +12,23 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.sql.*;\n-import java.util.*;\n-import javax.sql.*;\n-import org.apache.openjpa.lib.util.concurrent.*;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n \n /**\n  * Manages the firing of {@link JDBCEvent}s.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class JDBCEventConnectionDecorator extends AbstractConcurrentEventManager\n     implements ConnectionDecorator {\n+\n     public Connection decorate(Connection conn) {\n         if (!hasListeners())\n             return conn;\n@@ -53,49 +57,50 @@ protected void fireEvent(Object event, Object listener) {\n         JDBCListener listen = (JDBCListener) listener;\n         JDBCEvent ev = (JDBCEvent) event;\n         switch (ev.getType()) {\n-        case JDBCEvent.BEFORE_PREPARE_STATEMENT:\n-            listen.beforePrepareStatement(ev);\n-            break;\n-        case JDBCEvent.AFTER_PREPARE_STATEMENT:\n-            listen.afterPrepareStatement(ev);\n-            break;\n-        case JDBCEvent.BEFORE_CREATE_STATEMENT:\n-            listen.beforeCreateStatement(ev);\n-            break;\n-        case JDBCEvent.AFTER_CREATE_STATEMENT:\n-            listen.afterCreateStatement(ev);\n-            break;\n-        case JDBCEvent.BEFORE_EXECUTE_STATEMENT:\n-            listen.beforeExecuteStatement(ev);\n-            break;\n-        case JDBCEvent.AFTER_EXECUTE_STATEMENT:\n-            listen.afterExecuteStatement(ev);\n-            break;\n-        case JDBCEvent.BEFORE_COMMIT:\n-            listen.beforeCommit(ev);\n-            break;\n-        case JDBCEvent.AFTER_COMMIT:\n-            listen.afterCommit(ev);\n-            break;\n-        case JDBCEvent.BEFORE_ROLLBACK:\n-            listen.beforeRollback(ev);\n-            break;\n-        case JDBCEvent.AFTER_ROLLBACK:\n-            listen.afterRollback(ev);\n-            break;\n-        case JDBCEvent.AFTER_CONNECT:\n-            listen.afterConnect(ev);\n-            break;\n-        case JDBCEvent.BEFORE_CLOSE:\n-            listen.beforeClose(ev);\n-            break;\n+            case JDBCEvent.BEFORE_PREPARE_STATEMENT:\n+                listen.beforePrepareStatement(ev);\n+                break;\n+            case JDBCEvent.AFTER_PREPARE_STATEMENT:\n+                listen.afterPrepareStatement(ev);\n+                break;\n+            case JDBCEvent.BEFORE_CREATE_STATEMENT:\n+                listen.beforeCreateStatement(ev);\n+                break;\n+            case JDBCEvent.AFTER_CREATE_STATEMENT:\n+                listen.afterCreateStatement(ev);\n+                break;\n+            case JDBCEvent.BEFORE_EXECUTE_STATEMENT:\n+                listen.beforeExecuteStatement(ev);\n+                break;\n+            case JDBCEvent.AFTER_EXECUTE_STATEMENT:\n+                listen.afterExecuteStatement(ev);\n+                break;\n+            case JDBCEvent.BEFORE_COMMIT:\n+                listen.beforeCommit(ev);\n+                break;\n+            case JDBCEvent.AFTER_COMMIT:\n+                listen.afterCommit(ev);\n+                break;\n+            case JDBCEvent.BEFORE_ROLLBACK:\n+                listen.beforeRollback(ev);\n+                break;\n+            case JDBCEvent.AFTER_ROLLBACK:\n+                listen.afterRollback(ev);\n+                break;\n+            case JDBCEvent.AFTER_CONNECT:\n+                listen.afterConnect(ev);\n+                break;\n+            case JDBCEvent.BEFORE_CLOSE:\n+                listen.beforeClose(ev);\n+                break;\n         }\n     }\n \n     /**\n      * Fires events as appropriate.\n      */\n     private class EventConnection extends DelegatingConnection {\n+\n         public EventConnection(Connection conn) {\n             super(conn);\n             fireEvent(getDelegate(), JDBCEvent.AFTER_CONNECT, null, null, null);\n@@ -203,6 +208,7 @@ public void close() throws SQLException {\n      * Fires events as appropriate.\n      */\n     private class EventPreparedStatement extends DelegatingPreparedStatement {\n+\n         private final EventConnection _conn;\n         private final String _sql;\n \n@@ -257,6 +263,7 @@ protected ResultSet executeQuery(boolean wrap) throws SQLException {\n      * Fires events as appropriate.\n      */\n     private class EventStatement extends DelegatingStatement {\n+\n         private final EventConnection _conn;\n \n         public EventStatement(Statement stmnt, EventConnection conn) {"},{"sha":"9f9545086ceffafafe37c497b57800b2102a3d34","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCListener.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCListener.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/JDBCListener.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -14,12 +14,13 @@\n \n /**\n  * A listener for all {@link JDBCEvent}s that occur.\n- * \n- * @see AbstractJDBCListener\n+ *\n  * @author Marc Prud'hommeaux\n  * @author Abe White\n+ * @see AbstractJDBCListener\n  */\n public interface JDBCListener {\n+\n     /**\n      * @see JDBCEvent#BEFORE_PREPARE_STATEMENT\n      */"},{"sha":"a385719d5b9155add5996889f7d5d192cb76f590","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":82,"deletions":50,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,22 +12,42 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.io.*;\n-import java.math.*;\n-import java.sql.*;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.BatchUpdateException;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.sql.Date;\n-import java.util.*;\n-import javax.sql.*;\n-import org.apache.openjpa.lib.log.*;\n+import java.sql.PreparedStatement;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.openjpa.lib.log.Log;\n \n /**\n  * A {@link ConnectionDecorator} that creates logging connections and\n  * {@link ReportingSQLException}s.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  * @nojavadoc\n  */\n public class LoggingConnectionDecorator implements ConnectionDecorator {\n+\n     private static final String SEP = System.getProperty(\"line.separator\");\n \n     private static final int WARN_IGNORE = 0;\n@@ -38,6 +58,7 @@\n     private static final int WARN_THROW = 5;\n     private static final int WARN_HANDLE = 6;\n     private static final String[] WARNING_ACTIONS = new String[7];\n+\n     static {\n         WARNING_ACTIONS[WARN_IGNORE] = \"ignore\";\n         WARNING_ACTIONS[WARN_LOG_TRACE] = \"trace\";\n@@ -156,14 +177,14 @@ public Connection decorate(Connection conn) throws SQLException {\n \n     private SQLException wrap(SQLException sqle, Statement stmnt) {\n         if (sqle instanceof ReportingSQLException)\n-            return(ReportingSQLException)sqle;\n+            return (ReportingSQLException) sqle;\n \n         return new ReportingSQLException(sqle, stmnt);\n     }\n \n     private SQLException wrap(SQLException sqle, String sql) {\n         if (sqle instanceof ReportingSQLException)\n-            return(ReportingSQLException)sqle;\n+            return (ReportingSQLException) sqle;\n \n         return new ReportingSQLException(sqle, sql);\n     }\n@@ -184,10 +205,12 @@ private static String getExceptionMessage(SQLException sqle,\n      * {@link SQLWarning}s occur.\n      */\n     public static interface SQLWarningHandler {\n+\n         public void handleWarning(SQLWarning warning) throws SQLException;\n     }\n \n     private class LoggingConnection extends DelegatingConnection {\n+\n         public LoggingConnection(Connection conn) throws SQLException {\n             super(conn);\n         }\n@@ -339,7 +362,7 @@ protected PreparedStatement prepareStatement(String sql,\n             try {\n                 PreparedStatement stmnt = super.prepareStatement\n                     (sql, resultSetType, resultSetConcurrency,\n-                    resultSetHoldability, false);\n+                        resultSetHoldability, false);\n                 handleSQLWarning();\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n@@ -383,13 +406,14 @@ protected PreparedStatement prepareStatement(String sql,\n             }\n         }\n \n-        protected DatabaseMetaData getMetaData(boolean wrap) throws SQLException {\n+        protected DatabaseMetaData getMetaData(boolean wrap)\n+            throws SQLException {\n             return new LoggingDatabaseMetaData(super.getMetaData(false));\n         }\n \n         /**\n          * Handle any {@link SQLWarning}s on the current {@link Connection}.\n-         * \n+         *\n          * @see #handleSQLWarning(SQLWarning)\n          */\n         private void handleSQLWarning() throws SQLException {\n@@ -406,7 +430,7 @@ private void handleSQLWarning() throws SQLException {\n \n         /**\n          * Handle any {@link SQLWarning}s on the specified {@link Statement}.\n-         * \n+         *\n          * @see #handleSQLWarning(SQLWarning)\n          */\n         private void handleSQLWarning(Statement stmnt) throws SQLException {\n@@ -423,7 +447,7 @@ private void handleSQLWarning(Statement stmnt) throws SQLException {\n \n         /**\n          * Handle any {@link SQLWarning}s on the specified {@link ResultSet}.\n-         * \n+         *\n          * @see #handleSQLWarning(SQLWarning)\n          */\n         private void handleSQLWarning(ResultSet rs) throws SQLException {\n@@ -441,7 +465,7 @@ private void handleSQLWarning(ResultSet rs) throws SQLException {\n         /**\n          * Handle the specified {@link SQLWarning} depending on the\n          * setting of the {@link #setWarningAction} attribute.\n-         * \n+         *\n          * @param warning the warning to handle\n          */\n         void handleSQLWarning(SQLWarning warning) throws SQLException {\n@@ -451,39 +475,41 @@ void handleSQLWarning(SQLWarning warning) throws SQLException {\n                 return;\n \n             Log log = _logs.getJDBCLog();\n-            for ( ; warning != null; warning = warning.getNextWarning()) {\n+            for (; warning != null; warning = warning.getNextWarning()) {\n                 switch (_warningAction) {\n-                case WARN_LOG_TRACE:\n-                    if (log.isTraceEnabled())\n-                        log.trace(warning);\n-                    break;\n-                case WARN_LOG_INFO:\n-                    if (log.isInfoEnabled())\n-                        log.info(warning);\n-                    break;\n-                case WARN_LOG_WARN:\n-                    if (log.isWarnEnabled())\n-                        log.warn(warning);\n-                    break;\n-                case WARN_LOG_ERROR:\n-                    if (log.isErrorEnabled())\n-                        log.error(warning);\n-                    break;\n-                case WARN_THROW:\n-                    // just throw it as if it were a SQLException\n-                    throw warning;\n-                case WARN_HANDLE:\n-                    if (_warningHandler != null)\n-                        _warningHandler.handleWarning(warning);\n-                    break;\n-                default:\n-                    // ignore\n-                    break;\n+                    case WARN_LOG_TRACE:\n+                        if (log.isTraceEnabled())\n+                            log.trace(warning);\n+                        break;\n+                    case WARN_LOG_INFO:\n+                        if (log.isInfoEnabled())\n+                            log.info(warning);\n+                        break;\n+                    case WARN_LOG_WARN:\n+                        if (log.isWarnEnabled())\n+                            log.warn(warning);\n+                        break;\n+                    case WARN_LOG_ERROR:\n+                        if (log.isErrorEnabled())\n+                            log.error(warning);\n+                        break;\n+                    case WARN_THROW:\n+                        // just throw it as if it were a SQLException\n+                        throw warning;\n+                    case WARN_HANDLE:\n+                        if (_warningHandler != null)\n+                            _warningHandler.handleWarning(warning);\n+                        break;\n+                    default:\n+                        // ignore\n+                        break;\n                 }\n             }\n         }\n \n-        private class LoggingDatabaseMetaData extends DelegatingDatabaseMetaData {\n+        private class LoggingDatabaseMetaData\n+            extends DelegatingDatabaseMetaData {\n+\n             public LoggingDatabaseMetaData(DatabaseMetaData meta) {\n                 super(meta, LoggingConnection.this);\n             }\n@@ -662,6 +688,7 @@ public ResultSet getVersionColumns(String catalog,\n          * remembers the last piece of SQL to be executed on it.\n          */\n         private class LoggingStatement extends DelegatingStatement {\n+\n             private String _sql = null;\n \n             public LoggingStatement(Statement stmnt) throws SQLException {\n@@ -749,6 +776,7 @@ public boolean execute(String sql) throws SQLException {\n \n         private class LoggingPreparedStatement\n             extends DelegatingPreparedStatement {\n+\n             private final String _sql;\n             private List _params = null;\n             private List _paramBatch = null;\n@@ -826,7 +854,7 @@ protected ResultSet executeQuery(boolean wrap) throws SQLException {\n                 }\n             }\n \n-            public int executeUpdate  () throws SQLException {\n+            public int executeUpdate() throws SQLException {\n                 long start = System.currentTimeMillis();\n \n                 try {\n@@ -854,9 +882,10 @@ public int executeUpdate  () throws SQLException {\n                     // show the correct param\n                     if (se instanceof BatchUpdateException\n                         && _paramBatch != null && shouldTrackParameters()) {\n-                        int[] count = ((BatchUpdateException)se).\n+                        int[] count = ((BatchUpdateException) se).\n                             getUpdateCounts();\n-                        if (count != null && count.length <= _paramBatch.size()) {\n+                        if (count != null && count.length <= _paramBatch.size())\n+                        {\n                             int index = -1;\n                             for (int i = 0; i < count.length; i++) {\n                                 // -3 is Statement.STATEMENT_FAILED, but is\n@@ -875,7 +904,7 @@ public int executeUpdate  () throws SQLException {\n \n                             // set the current params to the saved values\n                             if (index < _paramBatch.size())\n-                                _params = (List)_paramBatch.get(index);\n+                                _params = (List) _paramBatch.get(index);\n                         }\n                     }\n                     throw wrap(se, LoggingPreparedStatement.this);\n@@ -922,7 +951,7 @@ public void setBoolean(int i, boolean b) throws SQLException {\n \n             public void setByte(int i, byte b) throws SQLException {\n                 setLogParameter(i, b);\n-                super.setByte(i,b);\n+                super.setByte(i, b);\n             }\n \n             public void setShort(int i, short s) throws SQLException {\n@@ -950,7 +979,8 @@ public void setDouble(int i, double d) throws SQLException {\n                 super.setDouble(i, d);\n             }\n \n-            public void setBigDecimal(int i, BigDecimal bd) throws SQLException {\n+            public void setBigDecimal(int i, BigDecimal bd)\n+                throws SQLException {\n                 setLogParameter(i, \"BigDecimal\", bd);\n                 super.setBigDecimal(i, bd);\n             }\n@@ -1009,7 +1039,8 @@ public void setObject(int i1, Object o, int i2, int i3)\n                 super.setObject(i1, o, i2, i3);\n             }\n \n-            public void setObject(int i1, Object o, int i2) throws SQLException {\n+            public void setObject(int i1, Object o, int i2)\n+                throws SQLException {\n                 setLogParameter(i1, \"Object\", o);\n                 super.setObject(i1, o, i2);\n             }\n@@ -1189,6 +1220,7 @@ private void setLogParameter(int index, String val) {\n         }\n \n         private class LoggingResultSet extends DelegatingResultSet {\n+\n             public LoggingResultSet(ResultSet rs, Statement stmnt) {\n                 super(rs, stmnt);\n             }"},{"sha":"2250366d4cb1b48bd41e3f78fc873e12fbb8126e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/ReportingSQLException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,20 +12,23 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.sql.*;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n \n /**\n  * A {@link SQLException} that contains information about\n  * the {@link Statement} SQL that caused the exception.\n- * \n+ *\n  * @author Marc Prud'hommeaux\n  * @nojavadoc\n  */\n public class ReportingSQLException extends SQLException {\n+\n     private final transient Statement _stmnt;\n     private final SQLException _sqle;\n \n-    public ReportingSQLException(SQLException sqle, Statement stmnt, String sql) {\n+    public ReportingSQLException(SQLException sqle, Statement stmnt,\n+        String sql) {\n         super(getExceptionMessage(sqle, stmnt, sql));\n         this._sqle = sqle;\n         this._stmnt = stmnt;"},{"sha":"73f07e2d3e10613f5d93e9091d022b310f0b6249","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","status":"modified","additions":35,"deletions":31,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,7 +12,10 @@\n  */\n package org.apache.openjpa.lib.jdbc;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.StringTokenizer;\n \n /*\n  * Lots of this could be abstracted out into a word-wrapping class.\n@@ -21,49 +24,50 @@\n /**\n  * Converts single-line SQL strings into nicely-formatted\n  * multi-line, indented statements.\n- *  Example: from PERSON t0, COMPANY t1 WHERE t0.ID = 10 AND \\\n- t0.COMPANY_ID = t1.ID AND t1.NAME = 'OpenJPA'</code>\n- becomes\n-    <code>SELECT * \n- FROM PERSON t0, COMPANY t1\n- WHERE t0.ID = 10 AND t0.COMPANY_ID = t1.ID AND t1.NAME = 'OpenJPA'\\\n- </code>\n- and\n- <code>INSERT INTO PERSON VALUES('Patrick', 'Linskey', 'OpenJPA', \\\n- '202 595 2064 x1111')</code>\n- becomes\n- <code>INSERT INTO PERSON VALUES('Patrick', 'Linskey', 'OpenJPA', '202\n- 595 2064 x1111')</code>\n- etc.\n- * \n+ * Example: from PERSON t0, COMPANY t1 WHERE t0.ID = 10 AND \\\n+ * t0.COMPANY_ID = t1.ID AND t1.NAME = 'OpenJPA'</code>\n+ * becomes\n+ * <code>SELECT *\n+ * FROM PERSON t0, COMPANY t1\n+ * WHERE t0.ID = 10 AND t0.COMPANY_ID = t1.ID AND t1.NAME = 'OpenJPA'\\\n+ * </code>\n+ * and\n+ * <code>INSERT INTO PERSON VALUES('Patrick', 'Linskey', 'OpenJPA', \\\n+ * '202 595 2064 x1111')</code>\n+ * becomes\n+ * <code>INSERT INTO PERSON VALUES('Patrick', 'Linskey', 'OpenJPA', '202\n+ * 595 2064 x1111')</code>\n+ * etc.\n+ *\n  * @author Patrick Linskey\n  */\n public class SQLFormatter {\n+\n     private boolean multiLine = false;\n     private boolean doubleSpace = true;\n     private String newline = System.getProperty(\"line.separator\");\n     private int lineLength = 72;\n     private String wrapIndent = \"        \";\n     private String clauseIndent = \"    \";\n \n-    private static final String[] selectSeparators = new String[] {\n-            \"FROM \", \"WHERE \", \"ORDER BY \", // ### is this order correct?\n-            \"GROUP BY \", \"HAVING \", };\n+    private static final String[] selectSeparators = new String[]{\n+        \"FROM \", \"WHERE \", \"ORDER BY \", // ### is this order correct?\n+        \"GROUP BY \", \"HAVING \", };\n \n-    private static final String[] insertSeparators = new String[] {\n-            \"VALUES \", };\n+    private static final String[] insertSeparators = new String[]{\n+        \"VALUES \", };\n \n-    private static final String[] updateSeparators = new String[] {\n-            \"SET \", \"WHERE \", };\n+    private static final String[] updateSeparators = new String[]{\n+        \"SET \", \"WHERE \", };\n \n-    private static final String[] deleteSeparators = new String[] {\n-            \"WHERE \", };\n+    private static final String[] deleteSeparators = new String[]{\n+        \"WHERE \", };\n \n-    private static final String[] createTableSeparators = new String[] {\n-            \"( \", };\n+    private static final String[] createTableSeparators = new String[]{\n+        \"( \", };\n \n-    private static final String[] createIndexSeparators = new String[] {\n-            \"ON \", \"( \", };\n+    private static final String[] createIndexSeparators = new String[]{\n+        \"ON \", \"( \", };\n \n     public void setNewline(String val) {\n         newline = val;\n@@ -200,7 +204,7 @@ else if (lowerCaseSql.startsWith(\"create index\"))\n         clause.append(sql.substring(start));\n \n         StringBuffer pp = new StringBuffer(sql.length());\n-        for (Iterator iter = clauses.iterator(); iter.hasNext(); ) {\n+        for (Iterator iter = clauses.iterator(); iter.hasNext();) {\n             pp.append(wrapLine(((StringBuffer) iter.next()).toString()));\n             if (iter.hasNext())\n                 pp.append(newline);\n@@ -214,7 +218,7 @@ private String wrapLine(String line) {\n \n         // ensure that any leading whitespace is preserved.\n         for (int i = 0; i < line.length() &&\n-                 (line.charAt(i) == ' ' || line.charAt(i) == '\\t'); i++) {\n+            (line.charAt(i) == ' ' || line.charAt(i) == '\\t'); i++) {\n             lines.append(line.charAt(i));\n         }\n "},{"sha":"b9ba4c2e6a4621410913c1b7574970b2a67780eb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/package.html","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -1,11 +1,12 @@\n <html>\n <body>\n-\t<p><strong>Database Connectivity</strong></p>\n-\t<p>\n-\t\tIncludes an implementation of the {@link javax.sql.DataSource} APIs \n-\t\taround a normal JDBC 1.x driver.  Implements connection pooling and\n-\t\tprepared statement caching.  Also includes a framework for firing and\n-\t \tconsuming JDBC-related events.\n-\t</p>\n+<p><strong>Database Connectivity</strong></p>\n+\n+<p>\n+    Includes an implementation of the {@link javax.sql.DataSource} APIs\n+    around a normal JDBC 1.x driver. Implements connection pooling and\n+    prepared statement caching. Also includes a framework for firing and\n+    consuming JDBC-related events.\n+</p>\n </body>\n </html>"},{"sha":"a39cf58846744e3d74983d62ad3eaf1f395297ab","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,26 +12,28 @@\n  */\n package org.apache.openjpa.lib.log;\n \n-import java.io.*;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n \n /**\n  * A simple implementation of the {@link Log} interface. Writes\n  * output to stdout.\n- * \n+ *\n  * @author Patrick Linskey\n  */\n public abstract class AbstractLog implements Log {\n+\n     /**\n      * Check to see if the specified logging level is enabled.\n      */\n     protected abstract boolean isEnabled(short level);\n \n     /**\n      * Send the specified log message to the handler.\n-     * \n-     * @param level the level of the log message\n+     *\n+     * @param level   the level of the log message\n      * @param message the message to send\n-     * @param t the Throwable, or null if this is not an error\n+     * @param t       the Throwable, or null if this is not an error\n      */\n     protected abstract void log(short level, String message, Throwable t);\n \n@@ -131,7 +133,7 @@ private static Throwable throwableParam(Object message, Throwable t) {\n         if (t != null)\n             return t;\n         if (message instanceof Throwable)\n-            return(Throwable)message;\n+            return (Throwable) message;\n \n         return null;\n     }\n@@ -140,6 +142,6 @@ private static Throwable throwableParam(Object message, Throwable t) {\n      * Efficiently turn the given object into a string.\n      */\n     private static String toString(Object o) {\n-        return(o == null) ? \"null\" : o.toString();\n+        return (o == null) ? \"null\" : o.toString();\n     }\n }"},{"sha":"334eac3f98b5aa90ccc80e4e97ad430c238515ff","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,15 +12,14 @@\n  */\n package org.apache.openjpa.lib.log;\n \n-import java.util.*;\n-\n /**\n  * {@link LogFactory} implementation that delegates to the commons logging\n  * framework.\n- * \n+ *\n  * @author Patrick Linskey\n  */\n public class CommonsLogFactory extends LogFactoryAdapter {\n+\n     private org.apache.commons.logging.LogFactory _factory;\n \n     public CommonsLogFactory() {\n@@ -36,6 +35,7 @@ public CommonsLogFactory() {\n      * interface.\n      */\n     public static class LogAdapter implements org.apache.openjpa.lib.log.Log {\n+\n         private org.apache.commons.logging.Log _log;\n \n         private LogAdapter(org.apache.commons.logging.Log wrapee) {"},{"sha":"4498c84e2b824bcaa1bf5617e203ae10ece62737","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -14,11 +14,12 @@\n \n /**\n  * Logging interface that is independent of other logging frameworks.\n- * \n+ *\n  * @author Patrick Linskey\n  * @author Abe White\n  */\n public interface Log {\n+\n     public static final short TRACE = 1;\n     public static final short DEBUG = 2;\n     public static final short INFO = 3;"},{"sha":"e6df34f29aa54cdbdc869097a56015441606b65f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,15 +12,17 @@\n  */\n package org.apache.openjpa.lib.log;\n \n-import java.util.*;\n-import org.apache.log4j.*;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n \n /**\n  * {@link LogFactory} implementation that delegates to the Log4J framework.\n- * \n+ *\n  * @author Patrick Linskey\n  */\n public class Log4JLogFactory extends LogFactoryAdapter {\n+\n     protected Log newLogAdapter(String channel) {\n         return new LogAdapter((Logger) LogManager.getLogger(channel));\n     }\n@@ -29,6 +31,7 @@ protected Log newLogAdapter(String channel) {\n      * Adapts a Log4J logger to the {@link org.apache.openjpa.lib.log.Log} interface.\n      */\n     public static class LogAdapter implements Log {\n+\n         private Logger _log;\n \n         private LogAdapter(Logger wrapee) {"},{"sha":"f28f9b0ca34b830a27811b41bf28994d63f005a1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactory.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -14,10 +14,11 @@\n \n /**\n  * Factory for log instances.\n- * \n+ *\n  * @author Abe White\n  */\n public interface LogFactory {\n+\n     /**\n      * Return a log for the given channel name.\n      */"},{"sha":"6f363f5635643cc889a45b4041e73f23ae145e8c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryAdapter.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,16 +12,18 @@\n  */\n package org.apache.openjpa.lib.log;\n \n-import java.util.*;\n-import org.apache.openjpa.lib.util.concurrent.*;\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n \n /**\n  * Base type that aids in adapting an external log framework to the\n  * {@link LogFactory}.\n- * \n+ *\n  * @author Abe White\n  */\n public abstract class LogFactoryAdapter implements LogFactory {\n+\n     // cache category to log adapters\n     private Map _logs = new ConcurrentHashMap();\n "},{"sha":"fb5dc977125cd9dbffc50591eaf9b95d50ae118d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":39,"deletions":27,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,20 +12,30 @@\n  */\n package org.apache.openjpa.lib.log;\n \n-import java.io.*;\n-import java.util.*;\n-import org.apache.openjpa.lib.conf.*;\n-import org.apache.openjpa.lib.util.*;\n-import org.apache.openjpa.lib.util.concurrent.*;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.conf.GenericConfigurable;\n+import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n \n /**\n  * Default {@link LogFactory} implementation. For ease of automatic\n  * configuration, this implementation keys on only the last dot-separated\n  * token of the log channel name.\n- * \n+ *\n  * @author Patrick Linskey\n  */\n public class LogFactoryImpl implements LogFactory, GenericConfigurable {\n+\n     private static Localizer _loc = Localizer.forPackage(LogFactoryImpl.class);\n \n     public static final String TRACE_STR = _loc.get(\"log-trace\");\n@@ -171,20 +181,20 @@ public void setStream(PrintStream stream) {\n      */\n     public static String getLevelName(short level) {\n         switch (level) {\n-        case Log.TRACE:\n-            return TRACE_STR;\n-        case Log.DEBUG:\n-            return DEBUG_STR;\n-        case Log.INFO:\n-            return INFO_STR;\n-        case Log.WARN:\n-            return WARN_STR;\n-        case Log.ERROR:\n-            return ERROR_STR;\n-        case Log.FATAL:\n-            return FATAL_STR;\n-        default:\n-            return _loc.get(\"log-unknown\");\n+            case Log.TRACE:\n+                return TRACE_STR;\n+            case Log.DEBUG:\n+                return DEBUG_STR;\n+            case Log.INFO:\n+                return INFO_STR;\n+            case Log.WARN:\n+                return WARN_STR;\n+            case Log.ERROR:\n+                return ERROR_STR;\n+            case Log.FATAL:\n+                return FATAL_STR;\n+            default:\n+                return _loc.get(\"log-unknown\");\n         }\n     }\n \n@@ -195,10 +205,10 @@ public static short getLevel(String str) {\n         str = str.toUpperCase().trim();\n         short val = TRACE_STR.equals(str) ? Log.TRACE :\n             DEBUG_STR.equals(str) ? Log.DEBUG :\n-            INFO_STR.equals(str) ? Log.INFO :\n-            WARN_STR.equals(str) ? Log.WARN :\n-            ERROR_STR.equals(str) ? Log.ERROR :\n-            FATAL_STR.equals(str) ? Log.FATAL : -1;\n+                INFO_STR.equals(str) ? Log.INFO :\n+                    WARN_STR.equals(str) ? Log.WARN :\n+                        ERROR_STR.equals(str) ? Log.ERROR :\n+                            FATAL_STR.equals(str) ? Log.FATAL : -1;\n \n         if (val == -1)\n             throw new IllegalArgumentException\n@@ -212,7 +222,7 @@ public static short getLevel(String str) {\n     public void setInto(Map m) {\n         if (!m.isEmpty()) {\n             Map.Entry e;\n-            for (Iterator iter = m.entrySet().iterator(); iter.hasNext(); ) {\n+            for (Iterator iter = m.entrySet().iterator(); iter.hasNext();) {\n                 e = (Map.Entry) iter.next();\n                 _configuredLevels.put(shorten((String) e.getKey()),\n                     new Short(getLevel((String) e.getValue())));\n@@ -230,6 +240,7 @@ private static String shorten(String channel) {\n      * output to stderr.\n      */\n     public class LogImpl extends AbstractLog {\n+\n         private short _level = INFO;\n         private String _channel;\n \n@@ -247,10 +258,11 @@ protected void log(short level, String message, Throwable t) {\n         /**\n          * Convert <code>message</code> into a string ready to be written to\n          * the log. The string should include the terminating newline.\n-         * \n+         *\n          * @param t may be null\n          */\n-        protected String formatMessage(short level, String message, Throwable t) {\n+        protected String formatMessage(short level, String message,\n+            Throwable t) {\n             // we write to a StringBuffer and then flush it all at\n             // once as a single line, since some environments(e.g., JBoss)\n             // override the System output stream to flush any calls"},{"sha":"aad2dab23186138d6b86561d0813ae27524d24f4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","status":"modified","additions":27,"deletions":25,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,28 +12,30 @@\n  */\n package org.apache.openjpa.lib.log;\n \n-import java.io.*;\n-import java.util.*;\n-import org.apache.openjpa.lib.log.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.StringTokenizer;\n \n /**\n  * Many standard components log to {@link OutputStream}s.\n  * This wrapper class extends the {@link ByteArrayOutputStream}\n  * class and writes all given data to an underlying {@link Log} instance\n  * whenever it is flushed and the internally held byte array contains a newline.\n- * \n+ *\n  * @author Abe White, Marc Prud'hommeaux\n  */\n public class LogOutputStream extends ByteArrayOutputStream {\n+\n     private static final String _sep = System.getProperty(\"line.separator\");\n \n     private final int _level;\n     private final Log _log;\n \n     /**\n      * Constructor.\n-     * \n-     * @param log the log to log to\n+     *\n+     * @param log   the log to log to\n      * @param level the level to log at\n      */\n     public LogOutputStream(Log log, int level) {\n@@ -49,7 +51,7 @@ public void flush() throws IOException {\n             // break up the message based on the line separator; this\n             // may be because the flushed buffer contains mutliple lines\n             for (StringTokenizer tok = new StringTokenizer(msg, _sep);\n-                tok.hasMoreTokens(); ) {\n+                tok.hasMoreTokens();) {\n                 String next = tok.nextToken();\n                 log(next);\n             }\n@@ -61,24 +63,24 @@ public void flush() throws IOException {\n \n     private void log(String msg) {\n         switch (_level) {\n-        case Log.TRACE:\n-            _log.trace(msg);\n-            break;\n-        case Log.DEBUG:\n-            _log.debug(msg);\n-            break;\n-        case Log.INFO:\n-            _log.info(msg);\n-            break;\n-        case Log.WARN:\n-            _log.warn(msg);\n-            break;\n-        case Log.ERROR:\n-            _log.error(msg);\n-            break;\n-        case Log.FATAL:\n-            _log.fatal(msg);\n-            break;\n+            case Log.TRACE:\n+                _log.trace(msg);\n+                break;\n+            case Log.DEBUG:\n+                _log.debug(msg);\n+                break;\n+            case Log.INFO:\n+                _log.info(msg);\n+                break;\n+            case Log.WARN:\n+                _log.warn(msg);\n+                break;\n+            case Log.ERROR:\n+                _log.error(msg);\n+                break;\n+            case Log.FATAL:\n+                _log.fatal(msg);\n+                break;\n         }\n     }\n }"},{"sha":"15482c642440584eebb34f48eb498845755c0e8f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,33 +12,39 @@\n  */\n package org.apache.openjpa.lib.log;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n \n /**\n  * A LogFactory implementation to pass events through multiple\n  * LogFactory implementations(such as log4j and LogPanelFactory).\n- * \n+ *\n  * @author Steve Kim\n  */\n public class MultiLogFactory implements LogFactory {\n+\n     private List _delegates;\n \n     /**\n      * create an instance with two delegates\n      */\n     public MultiLogFactory(LogFactory d1, LogFactory d2) {\n-        this(new LogFactory [] { d1, d2 });\n+        this(new LogFactory []{ d1, d2 });\n     }\n \n     public MultiLogFactory(LogFactory d1, LogFactory d2, LogFactory d3) {\n-        this(new LogFactory [] { d1, d2, d3 });\n+        this(new LogFactory []{ d1, d2, d3 });\n     }\n \n     /**\n      * create an instance with the given delegates\n      */\n     public MultiLogFactory(LogFactory [] delegates) {\n-        _delegates = new LinkedList(Arrays.asList(delegates));;\n+        _delegates = new LinkedList(Arrays.asList(delegates));\n+        ;\n     }\n \n     public synchronized void addLogFactory(LogFactory factory) {\n@@ -53,30 +59,31 @@ public synchronized void removeLogFactory(LogFactory factory) {\n      * Returns the delegates that this MultiLogFactory delegates messages to.\n      */\n     public synchronized LogFactory[] getDelegates() {\n-        return(LogFactory[])_delegates.toArray(new LogFactory[0]);\n+        return (LogFactory[]) _delegates.toArray(new LogFactory[0]);\n     }\n \n     /**\n      * returns a Log impl that combines all logs.\n      */\n     public synchronized Log getLog(String channel) {\n         List logs = new ArrayList(_delegates.size());\n-        for (Iterator i = _delegates.iterator(); i.hasNext(); ) {\n-            LogFactory f = (LogFactory)i.next();\n+        for (Iterator i = _delegates.iterator(); i.hasNext();) {\n+            LogFactory f = (LogFactory) i.next();\n             if (f != null) {\n                 Log l = f.getLog(channel);\n                 if (l != null)\n                     logs.add(l);\n             }\n         }\n \n-        return new MultiLog((Log[])logs.toArray(new Log[logs.size()]));\n+        return new MultiLog((Log[]) logs.toArray(new Log[logs.size()]));\n     }\n \n     /**\n      * Combinatory Log impl.\n      */\n     private static class MultiLog implements Log {\n+\n         private Log[] _logs;\n \n         public MultiLog(Log[] logs) {"},{"sha":"566aa89b111513ea4851d74214f01b67d76d2c72","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -15,10 +15,11 @@\n /**\n  * A log factory implementation that does not do any logging, as\n  * quickly as possible.\n- * \n+ *\n  * @author Patrick Linskey\n  */\n public class NoneLogFactory implements LogFactory {\n+\n     public final Log getLog(String channel) {\n         return NoneLog.getInstance();\n     }\n@@ -27,6 +28,7 @@ public final Log getLog(String channel) {\n      * No-op log.\n      */\n     public static class NoneLog implements Log {\n+\n         private static final NoneLog s_log = new NoneLog();\n \n         public static NoneLog getInstance() {"},{"sha":"fe381cf5d84f31444f8a797f21687dde48799ac6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/package.html","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -1,11 +1,12 @@\n <html>\n <body>\n-\t<p><strong>Logging</strong></p>\n-\t<p>\n-\t\tThis package provides a lightweight logging interface, a simple\n-\t\timplementation that writes logging output to the console and\n-\t\tallows for basic log configuration, and plug-ins for the Apache\n-\t\tCommons Logging and the Apache Log4J frameworks.\n-\t</p>\n+<p><strong>Logging</strong></p>\n+\n+<p>\n+    This package provides a lightweight logging interface, a simple\n+    implementation that writes logging output to the console and\n+    allows for basic log configuration, and plug-ins for the Apache\n+    Commons Logging and the Apache Log4J frameworks.\n+</p>\n </body>\n </html>"},{"sha":"7a96445618ab1718486fd264f06f9bb214f41d7c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,19 +12,21 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import org.apache.openjpa.lib.util.*;\n-import org.xml.sax.*;\n-import serp.util.*;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.apache.openjpa.lib.util.Localizer;\n+import serp.util.Strings;\n \n /**\n  * Custom SAX parser used by the system to quickly parse metadata files\n  * for classes.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class CFMetaDataParser extends XMLMetaDataParser {\n-    static final String[] PACKAGES = new String[] {\n+\n+    static final String[] PACKAGES = new String[]{\n         \"java.lang.\", \"java.util.\", \"java.math.\" };\n     private static final Localizer _loc = Localizer.forPackage\n         (CFMetaDataParser.class);"},{"sha":"f3039308d03541df2b832a7afbf09ece95177065","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,20 +12,24 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.util.*;\n-import org.apache.commons.collections.map.*;\n-import org.apache.openjpa.lib.util.*;\n-import org.xml.sax.*;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Map;\n+\n+import org.apache.commons.collections.map.LinkedMap;\n+import org.xml.sax.SAXException;\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Helps serialize metadata objects to package and class elements.\n- * \n- * @see CFMetaDataParser\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n+ * @see CFMetaDataParser\n  */\n public abstract class CFMetaDataSerializer extends XMLMetaDataSerializer {\n+\n     private static final Localizer _loc = Localizer.forPackage\n         (CFMetaDataSerializer.class);\n \n@@ -47,9 +51,9 @@ protected void setPackage(String pkg) {\n \n     /**\n      * Helper method to group objects by package.\n-     * \n+     *\n      * @return mapping of package name to a collection of objects in\n-     * that package\n+     *         that package\n      */\n     protected Map groupByPackage(Collection objs) throws SAXException {\n         Map packages = new LinkedMap();"},{"sha":"c6392cc325e4ecd2a50a6d513fdf8d0d9f3f228f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","status":"modified","additions":38,"deletions":34,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassAnnotationMetaDataFilter.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,25 +12,27 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import serp.bytecode.lowlevel.*;\n+import java.io.IOException;\n+\n+import serp.bytecode.lowlevel.ConstantPoolTable;\n \n /**\n  * Filter that looks for classes with one of a set of annotations.\n  * See JDK 1.5 JVM spec for details on annotation bytecode:<br />\n  * java.sun.com/docs/books/vmspec/2nd-edition/ClassFileFormat-final-draft.pdf\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class ClassAnnotationMetaDataFilter implements MetaDataFilter {\n+\n     private final String[] _annos;\n \n     /**\n      * Constructor; supply annotation to match against.\n      */\n     public ClassAnnotationMetaDataFilter(Class anno) {\n-        this(new Class[] { anno });\n+        this(new Class[]{ anno });\n     }\n \n     /**\n@@ -121,36 +123,38 @@ private static int skipAnnotationPropertyValue(ConstantPoolTable table,\n         int idx) {\n         int skipped = 0;\n         switch (table.readByte(idx + skipped++)) {\n-        case 'Z': // bool\n-        case 'B': // byte\n-        case 'C': // char\n-        case 'D': // double\n-        case 'F': // float\n-        case 'I': // int\n-        case 'J': // long\n-        case 'S': // short\n-        case 's': // string\n-        case 'c': // class\n-            skipped += 2;\n-            break;\n-        case 'e': // enum ptr\n-            skipped += 4;\n-            break;\n-        case '[': // array\n-            int size = table.readUnsignedShort(idx + skipped);\n-            skipped += 2;\n-            for (int i = 0; i < size; i++)\n-                skipped += skipAnnotationPropertyValue(table, idx + skipped);\n-            break;\n-        case '@': // anno\n-            skipped += 2; // type\n-            int props = table.readUnsignedShort(idx + skipped);\n-            skipped += 2;\n-            for (int j = 0; j < props; j++) {\n-                skipped += 2; // name\n-                skipped += skipAnnotationPropertyValue(table, idx + skipped);\n-            }\n-            break;\n+            case 'Z': // bool\n+            case 'B': // byte\n+            case 'C': // char\n+            case 'D': // double\n+            case 'F': // float\n+            case 'I': // int\n+            case 'J': // long\n+            case 'S': // short\n+            case 's': // string\n+            case 'c': // class\n+                skipped += 2;\n+                break;\n+            case 'e': // enum ptr\n+                skipped += 4;\n+                break;\n+            case '[': // array\n+                int size = table.readUnsignedShort(idx + skipped);\n+                skipped += 2;\n+                for (int i = 0; i < size; i++)\n+                    skipped +=\n+                        skipAnnotationPropertyValue(table, idx + skipped);\n+                break;\n+            case '@': // anno\n+                skipped += 2; // type\n+                int props = table.readUnsignedShort(idx + skipped);\n+                skipped += 2;\n+                for (int j = 0; j < props; j++) {\n+                    skipped += 2; // name\n+                    skipped +=\n+                        skipAnnotationPropertyValue(table, idx + skipped);\n+                }\n+                break;\n         }\n         return skipped;\n     }"},{"sha":"b76657131a32e1f8df4c438df78ce1ac9b066c12","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","status":"modified","additions":87,"deletions":60,"changes":147,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,31 +12,44 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.net.*;\n-import java.util.*;\n-import org.apache.commons.lang.exception.*;\n-import org.apache.openjpa.lib.util.*;\n-import org.xml.sax.*;\n-import org.xml.sax.Attributes;\n-import serp.bytecode.lowlevel.*;\n-import serp.util.*;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.Localizer;\n+import serp.bytecode.lowlevel.ConstantPoolTable;\n+import serp.util.Strings;\n \n /**\n  * Parser used to resolve arguments into java classes.\n  * Interprets command-line args as either class names, .class files or\n  * resources, .java files or resources, or metadata files or resources\n  * conforming to the common format defined by {@link CFMetaDataParser}.\n  * Transforms the information in these args into {@link Class} instances.\n- *  Note that when parsing .java files, only the main class in the file\n+ * Note that when parsing .java files, only the main class in the file\n  * is detected. Other classes defined in the file, such as inner classes,\n  * are not added to the returned classes list.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class ClassArgParser {\n-    private static final int TOKEN_EOF  = -1;\n+\n+    private static final int TOKEN_EOF = -1;\n     private static final int TOKEN_NONE = 0;\n     private static final int TOKEN_PACKAGE = 1;\n     private static final int TOKEN_CLASS = 2;\n@@ -51,7 +64,7 @@\n     private char[] _classAttr = \"name\".toCharArray();\n     private char[][] _beginElements = { { 'p' }, { 'c' } };\n     private char[][] _endElements = { \"ackage\".toCharArray(),\n-                                                \"lass\".toCharArray() };\n+        \"lass\".toCharArray() };\n \n     /**\n      * The class loader with which to load parsed classes.\n@@ -130,9 +143,9 @@ private static boolean charsUnique(char[] buf) {\n     /**\n      * Return the {@link Class} representation of the class(es) named in the\n      * given arg.\n-     * \n+     *\n      * @param arg a class name, .java file, .class file, or metadata\n-     * file naming the type(s) to act on\n+     *            file naming the type(s) to act on\n      */\n     public Class[] parseTypes(String arg) {\n         String[] names = parseTypeNames(arg);\n@@ -176,9 +189,9 @@ public Map mapTypes(MetaDataIterator itr) {\n \n     /**\n      * Return the names of the class(es) from the given arg.\n-     * \n+     *\n      * @param arg a class name, .java file, .class file, or metadata\n-     * file naming the type(s) to act on\n+     *            file naming the type(s) to act on\n      * @throws IllegalArgumentException with appropriate message on error\n      */\n     public String[] parseTypeNames(String arg) {\n@@ -188,19 +201,19 @@ public Map mapTypes(MetaDataIterator itr) {\n         try {\n             File file = Files.getFile(arg, _loader);\n             if (arg.endsWith(\".class\"))\n-                return new String[] { getFromClassFile(file) };\n+                return new String[]{ getFromClassFile(file) };\n             if (arg.endsWith(\".java\"))\n-                return new String[] { getFromJavaFile(file) };\n+                return new String[]{ getFromJavaFile(file) };\n             if (file.exists()) {\n                 Collection col = getFromMetaDataFile(file);\n-                return(String[]) col.toArray(new String[col.size()]);\n+                return (String[]) col.toArray(new String[col.size()]);\n             }\n         } catch (Exception e) {\n             throw new NestableRuntimeException(_loc.get(\"class-arg\", arg), e);\n         }\n \n         // must be a class name\n-        return new String[] { arg };\n+        return new String[]{ arg };\n     }\n \n     /**\n@@ -221,7 +234,7 @@ public Map mapTypes(MetaDataIterator itr) {\n             throw new NestableRuntimeException(_loc.get(\"class-arg\", source),\n                 e);\n         }\n-        return(String[]) names.toArray(new String[names.size()]);\n+        return (String[]) names.toArray(new String[names.size()]);\n     }\n \n     /**\n@@ -236,7 +249,10 @@ private void appendTypeNames(Object source, InputStream in, List names)\n             names.addAll(getFromMetaData(new InputStreamReader(in)));\n         }\n         finally {\n-            try { in.close(); } catch (IOException ioe) {}\n+            try {\n+                in.close();\n+            } catch (IOException ioe) {\n+            }\n         }\n     }\n \n@@ -278,7 +294,10 @@ private String getFromClassFile(File file) throws IOException {\n         }\n         finally {\n             if (fin != null)\n-                try { fin.close(); } catch (IOException ioe) {}\n+                try {\n+                    fin.close();\n+                } catch (IOException ioe) {\n+                }\n         }\n     }\n \n@@ -334,7 +353,10 @@ private String getFromJavaFile(File file) throws IOException {\n         }\n         finally {\n             if (in != null)\n-                try { in.close(); } catch (IOException ioe) {}\n+                try {\n+                    in.close();\n+                } catch (IOException ioe) {\n+                }\n         }\n     }\n \n@@ -349,7 +371,10 @@ private Collection getFromMetaDataFile(File file) throws IOException {\n         }\n         finally {\n             if (in != null)\n-                try { in.close(); } catch (IOException ioe) {}\n+                try {\n+                    in.close();\n+                } catch (IOException ioe) {\n+                }\n         }\n     }\n \n@@ -364,7 +389,8 @@ private Collection getFromMetaData(Reader xml) throws IOException {\n         int token = TOKEN_NONE;\n         String pkg = \"\";\n         String name;\n-        read: for (int ch = 0, last = 0, last2 = 0;\n+        read:\n+        for (int ch = 0, last = 0, last2 = 0;\n             ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) {\n             // handle comments\n             if (comment && last2 == '-' && last == '-' && ch == '>') {\n@@ -396,38 +422,38 @@ private Collection getFromMetaData(Reader xml) throws IOException {\n             // read element name; look for packages and classes\n             token = readElementToken(ch, in);\n             switch (token) {\n-            case TOKEN_EOF:\n-                break read;\n-            case TOKEN_PACKAGE:\n-                pkg = readAttribute(in, _packageAttr);\n-                if (pkg == null)\n-                    break read;\n-                break;\n-            case TOKEN_PACKAGE_NOATTR:\n-                pkg = readElementText(in);\n-                if (pkg == null)\n-                    break read;\n-                ch = '<'; // reading element text reads to next '<'\n-                break;\n-            case TOKEN_CLASS:\n-                name = readAttribute(in, _classAttr);\n-                if (name == null)\n-                    break read;\n-                if (pkg.length() > 0 && name.indexOf('.') == -1)\n-                    names.add(pkg + \".\" + name);\n-                else\n-                    names.add(name);\n-                break;\n-            case TOKEN_CLASS_NOATTR:\n-                name = readElementText(in);\n-                if (name == null)\n+                case TOKEN_EOF:\n                     break read;\n-                ch = '<'; // reading element text reads to next '<'\n-                if (pkg.length() > 0 && name.indexOf('.') == -1)\n-                    names.add(pkg + \".\" + name);\n-                else\n-                    names.add(name);\n-                break;\n+                case TOKEN_PACKAGE:\n+                    pkg = readAttribute(in, _packageAttr);\n+                    if (pkg == null)\n+                        break read;\n+                    break;\n+                case TOKEN_PACKAGE_NOATTR:\n+                    pkg = readElementText(in);\n+                    if (pkg == null)\n+                        break read;\n+                    ch = '<'; // reading element text reads to next '<'\n+                    break;\n+                case TOKEN_CLASS:\n+                    name = readAttribute(in, _classAttr);\n+                    if (name == null)\n+                        break read;\n+                    if (pkg.length() > 0 && name.indexOf('.') == -1)\n+                        names.add(pkg + \".\" + name);\n+                    else\n+                        names.add(name);\n+                    break;\n+                case TOKEN_CLASS_NOATTR:\n+                    name = readElementText(in);\n+                    if (name == null)\n+                        break read;\n+                    ch = '<'; // reading element text reads to next '<'\n+                    if (pkg.length() > 0 && name.indexOf('.') == -1)\n+                        names.add(pkg + \".\" + name);\n+                    else\n+                        names.add(name);\n+                    break;\n             }\n         }\n         return names;\n@@ -442,7 +468,8 @@ private int readElementToken(int ch, Reader in) throws IOException {\n         int matchIdx = -1;\n         int matched = 0;\n         int dq = 0;\n-        for (int beginIdx = 0; beginIdx < _beginElements[0].length; beginIdx++) {\n+        for (int beginIdx = 0; beginIdx < _beginElements[0].length; beginIdx++)\n+        {\n             if (beginIdx != 0)\n                 ch = in.read();\n             if (ch == -1)\n@@ -554,7 +581,7 @@ private String readElementText(Reader in) throws IOException {\n                 buf = new StringBuffer();\n             buf.append((char) ch);\n         }\n-        return(buf == null) ? \"\" : buf.toString();\n+        return (buf == null) ? \"\" : buf.toString();\n     }\n \n     /**"},{"sha":"fa4ee8952cc267f1ef7f284ffe1f0ae99d4849ef","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,22 +12,30 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.net.*;\n-import java.util.*;\n-import org.apache.commons.collections.set.*;\n-import org.apache.openjpa.lib.util.*;\n-import serp.util.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.MultiClassLoader;\n+import serp.util.Strings;\n \n /**\n  * Iterator over all metadata resources that might contain the\n  * metadata for a given class, starting with the most general. Assumes that\n  * package-level resources are named \"package.&lt;suffix&gt;\".\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class ClassMetaDataIterator implements MetaDataIterator {\n+\n     private final ClassLoader _loader;\n     private final List _locs;\n     private int _loc = -1;\n@@ -148,15 +156,15 @@ public Object next() throws IOException {\n     public InputStream getInputStream() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n-        return((URL) _urls.get(_url)).openStream();\n+        return ((URL) _urls.get(_url)).openStream();\n     }\n \n     public File getFile() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n         File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n             getFile()));\n-        return(file.exists()) ? file : null;\n+        return (file.exists()) ? file : null;\n     }\n \n     public void close() {"},{"sha":"c7fa30cb66d7a73f50f16bfc4bfad4f63b742ebb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,18 +12,21 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.util.*;\n-import java.util.zip.*;\n-import serp.util.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Properties;\n+import java.util.zip.ZipFile;\n+\n+import serp.util.Strings;\n \n /**\n  * Iterator over directories in the classpath.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class ClasspathMetaDataIterator extends MetaDataIteratorChain {\n+\n     /**\n      * Default constructor; iterates over all classpath elements.\n      */"},{"sha":"e9d43f7db915584c3ec8a7011d1d317e151334d2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,17 +12,26 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.util.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Iterator over a file, or over all metadata resources below a given directory.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class FileMetaDataIterator implements MetaDataIterator {\n+\n     private static final long SCAN_LIMIT = 100000;\n \n     private static final Localizer _loc = Localizer.forPackage\n@@ -109,6 +118,7 @@ public void close() {\n     }\n \n     private static class FileResource implements MetaDataFilter.Resource {\n+\n         private File _file = null;\n \n         public void setFile(File file) {"},{"sha":"c51ff0091742cdf1ba5b6f6df9f6758be74ecd50","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,16 +12,17 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n+import java.io.IOException;\n \n /**\n  * Filters metadata resources. Typically used to constrain the results\n  * of a {@link MetaDataIterator}.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public interface MetaDataFilter {\n+\n     /**\n      * Return whether the given resource passes the filter.\n      */\n@@ -31,6 +32,7 @@\n      * Information about a metadata resource.\n      */\n     public static interface Resource {\n+\n         /**\n          * The name of the resource.\n          */"},{"sha":"3bcee1458578005b0cffa83885b0dad5668171c9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,17 +12,19 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.util.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n import org.apache.openjpa.lib.util.Closeable; // also in java.io(in 1.5)\n \n /**\n  * Iterator over metadata resources.\n- * \n+ *\n  * @author Abe White\n  */\n public interface MetaDataIterator extends Closeable {\n+\n     /**\n      * Return whether there is another resource to iterate over.\n      */"},{"sha":"676115b713a1f8e6944db0d2dd8ff86b1d2b459e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,19 +12,24 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.util.*;\n-import org.apache.commons.collections.iterators.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n \n /**\n  * Metadata iterator that combines several iterators.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class MetaDataIteratorChain implements MetaDataIterator {\n+\n     private List _itrs = null;\n-    private int  _cur = -1;\n+    private int _cur = -1;\n     private MetaDataIterator _itr = null;\n \n     /**"},{"sha":"bceeafa87e31b520274d7d3e4ac0f700a36f080e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,17 +12,20 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.net.*;\n-import java.util.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.net.URL;\n+import java.util.List;\n \n /**\n  * Interface for metadata parsers.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public interface MetaDataParser {\n+\n     /**\n      * The classloader to use to resolve resources, or null for impl-defined\n      * default.\n@@ -59,10 +62,10 @@\n \n     /**\n      * Parse the metadata in the given reader.\n-     * \n-     * @param content reader containing the metadata to parse\n+     *\n+     * @param content    reader containing the metadata to parse\n      * @param sourceName the name of the source being parsed, for use\n-     * in error messages\n+     *                   in error messages\n      */\n     public void parse(Reader content, String sourceName) throws IOException;\n "},{"sha":"6d5f5ce66c84be8e6da67fb0e5287a1abee0daa2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,17 +12,19 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.util.*;\n-import org.apache.openjpa.lib.log.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Map;\n \n /**\n  * Interface for meta data serializers.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public interface MetaDataSerializer {\n+\n     public static final int COMPACT = 0;\n     public static final int PRETTY = 1;\n     public static final int APPEND = 2;\n@@ -32,38 +34,38 @@\n      * Serialize the current set of objects to the files from which they were\n      * parsed. Any objects for which a source file cannot be determined will\n      * not be included in the output.\n-     * \n+     *\n      * @param flags bit flags specifying the output flags; e.g.\n-     * {@link PRETTY #PRETTY}\n+     *              {@link PRETTY #PRETTY}\n      */\n     public void serialize(int flags) throws IOException;\n \n     /**\n      * Serialize the current set of objects to the files from which they were\n      * parsed. The objects must implement the {@link SourceTracker} interface.\n-     * \n+     *\n      * @param output if null, then serialize directly to the file system;\n-     * othwerwise, populate the specified {@link Map} with\n-     * keys that are the {@link File} instances, and\n-     * values that are the {@link String} contents of the metadata\n-     * @param flags bit flags specifying the output flags; e.g.\n-     * {@link PRETTY #PRETTY}\n+     *               othwerwise, populate the specified {@link Map} with\n+     *               keys that are the {@link File} instances, and\n+     *               values that are the {@link String} contents of the metadata\n+     * @param flags  bit flags specifying the output flags; e.g.\n+     *               {@link PRETTY #PRETTY}\n      */\n     public void serialize(Map output, int flags) throws IOException;\n \n     /**\n      * Serialize the current set of objects to the given file.\n-     * \n+     *\n      * @param flags bit flags specifying the output flags; e.g.\n-     * {@link PRETTY #PRETTY} | {@link APPEND #APPEND}\n+     *              {@link PRETTY #PRETTY} | {@link APPEND #APPEND}\n      */\n     public void serialize(File file, int flags) throws IOException;\n \n     /**\n      * Serialize the current set of objects to the given stream.\n-     * \n+     *\n      * @param flags bit flags specifying the output flags; e.g.\n-     * {@link PRETTY #PRETTY}\n+     *              {@link PRETTY #PRETTY}\n      */\n     public void serialize(Writer out, int flags) throws IOException;\n }"},{"sha":"e6abe593103b2613d5acde2e1f0aa34fe8e405ba","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,19 +12,26 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n-import java.net.*;\n-import java.util.*;\n-import org.apache.commons.collections.iterators.*;\n-import org.apache.openjpa.lib.util.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.MultiClassLoader;\n \n /**\n  * Iterator over a given metadata resource.\n- * \n+ *\n  * @author Abe White\n  * @nojavadoc\n  */\n public class ResourceMetaDataIterator implements MetaDataIterator {\n+\n     private List _urls = null;\n     private int _url = -1;\n \n@@ -69,15 +76,15 @@ public Object next() {\n     public InputStream getInputStream() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n-        return((URL) _urls.get(_url)).openStream();\n+        return ((URL) _urls.get(_url)).openStream();\n     }\n \n     public File getFile() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n         File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n             getFile()));\n-        return(file.exists()) ? file : null;\n+        return (file.exists()) ? file : null;\n     }\n \n     public void close() {"},{"sha":"0f20ffb8e31b50fbea960ec17bf9bf36c5462839","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331","patch":"@@ -12,15 +12,16 @@\n  */\n package org.apache.openjpa.lib.meta;\n \n-import java.io.*;\n+import java.io.File;\n \n /**\n  * Interface that can optionally be implemented by metadata\n  * to include the source file from which the metadata was originally parsed.\n- * \n+ *\n  * @author Abe White\n  */\n public interface SourceTracker {\n+\n     public static final int SRC_OTHER = 0;\n     public static final int SRC_ANNOTATIONS = 1;\n     public static final int SRC_XML = 2;"},{"sha":"d6cbd21f889d74341059c4c1c3cc19a5c6b292c7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"a2fbf415ee1763f1530fc60844b06fb6d02c1f40","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"776adbb51c089e887afaa07956c67ba9b016094f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"dcb87d6e46bfac3fc8d33c4b7c90fadb5d62836a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":37,"deletions":15,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"6c66a66bab6542ab5007a99c801baa0aa678113a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","status":"modified","additions":34,"deletions":16,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"3aef5ac07b952eacfba747c20ea35900e91ee1ca","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","status":"modified","additions":16,"deletions":7,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"758dc2e69991f339ff6e9749c783e7a0c2463282","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"aa9f691b7d8a0099a5a3a68f48e6593b27271c8c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/package.html","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"88cb35b85c4e9902505eae7a265125bb6d44c162","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"f4200ff9da81fe634d3bf6cfebdfd10a8874e85b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"22f3724723d5306b08fe32ae30a1be2e9bdc4cc0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"9a04fe90fc25f74528f7388bc08d1bb40d8ee60e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"fc090ee1901c0e475ccc5d20914a6277d082cb95","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"9c1676b316b5393587119d189676c816ae5af461","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"ff21bc9fb2211d3a1334d59f08e6c7153890127b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"e2264f61edf9eb8e8c32576003b93c4518be3f8e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"f7984598bc95ded261245613dde042c3bd731ed6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","status":"modified","additions":33,"deletions":31,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"d648da024ee7d2a6d9230a2eca6b3053ebed3ccf","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"0f16386b9a9e785406d2c5e9b2a4539cfc5e9a30","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"855f4e7cf63baa1076cf9a7fbe11ab2c4c4d9f76","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"b42c3e7ec3a2e2d952add5ecfcddff46a03fcdeb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"acf4bb2bebb957ac0814d48f024b5f8542f4c873","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"1aae749f1472248361c30ce92ab131e2d907a7b1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"5abd64aea8cdcdb29a6ad5874cc54d3228713f70","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"bfe972efeb65ceb4d2165c44d8de684d13c096a7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"1b41494c19aa40aa42713ccbbc4d094cf6944efc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"9312434dd8b4fa89031b3174293e5a1eaa8745fd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/package.html","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"c73ae3b10f9d5e5c332f48b208be756175f52cd1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"d31665cd72d2d1dd11559ea1b2f3c3955d4dd77c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"c595377f0c5e19dd7d8e75d1ab2e52a114e97d3d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"2bb83076057c488da7a7c68804a17cbd95c41e7a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"72ec020eecc93f0f48e371800582fee33024bf3e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"0754b5c214588a5b52bfcd8fda1140adcce00629","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"a749a2595f84bd13e5af19a1afcbd0334ff33063","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","status":"modified","additions":33,"deletions":14,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"531d52c3868673b374bbe5b04547f70ccfaecd4b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","status":"modified","additions":86,"deletions":58,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"5f733100b8aa74d1252d37b15b6b2650897bd9b1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"2149f6d4a9ecdd028d6ee2cdd32ed16ef4cc2e6d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"4ccbbd26357d1a5cc199b1744b6b85ace5cc1c7b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":34,"deletions":24,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"be1eb1b957bf5926280dd6479915301ded4dc854","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"0d1e6c3219f7cce45b9dd4a7d365a1daaa0fc82c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"modified","additions":62,"deletions":49,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"07b313c1b513f1643fec9da38d3b38f5bea1dab5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","status":"modified","additions":23,"deletions":5,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"7702ad3cec9aa47e80799b1ea6e5501d6118552d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"e4a1be624234a6520138e60a4e81a2a4f30a6821","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"9a020e5f9d66c163d0f9ff046df36b31dfdbdd10","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"67319ec4d19d23edea23e310a8209e78f30ee89d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"543e66624a6d22fad4ccf3cd57c36bf165ba5257","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"1745263ab5ef0ae36560a265b1136d38575a6e10","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":20,"deletions":11,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"8624dcdcda7d0c53cc05e5915c486fad6c162adb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"137f3bf218f5c79aa0fd4ee234fc1575455031c1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"07efcdb12d3993b5469630e9d69549024a728096","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"8ed254451c9ff33b52c4a068ca78b53f8947684d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"c4a5fd60c7a6fb14df72196f5e42901a97a2185c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"9c570a3a5179c93ff51d4a1eaf4dee9512a23f72","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"6434fe73f724e219d142fa1d718426fc01d47cf7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","status":"modified","additions":35,"deletions":34,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"e31a9d77bbe9dad96e776c3c6229ed062b22787f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"34a46b34c97a921456e7115561662b6d4da88055","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"afdd4bf4eb168e49f01f8c1d7fa3064e43753768","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractCollection.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractCollection.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractCollection.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"62b7492be3080e347bc1f7675ccd78386ce8efc5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"bce3661955e114d96acfc040237bf07393d18cc4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","status":"modified","additions":30,"deletions":29,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractQueue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"782638290befab2176480d2bd197ce6f1d5b48c5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractSet.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractSet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractSet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"e93a0dc04bc00fdcdfc8bebf6ab7c8d6853f8e9f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","status":"modified","additions":112,"deletions":95,"changes":207,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Arrays.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"d4ef9971467452f539c6d98ecd88d037251382c9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","status":"modified","additions":71,"deletions":62,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"9f43209c6f3c2bd1da686b6c3d14958b181fc2f3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashSet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"080182fa2fc224f846fbab9483d066fb05661457","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","status":"modified","additions":46,"deletions":32,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentLinkedQueue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"886f08f69a7d5b0a9281fab79e6c38f467555a01","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"65dd310476cb41bbae605863a070359475eee899","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","status":"modified","additions":96,"deletions":88,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"6ca6013f9dfde286731296ad1d2ddef0209564fa","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"2c6757ddc0fc188f9e672f568d1c94dbbf69a9dc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","status":"modified","additions":19,"deletions":12,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CondVar.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"bbf077318b12748e4d91a1d4f112dfecec52b9ee","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","status":"modified","additions":39,"deletions":41,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Condition.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"d8062c0133169bbb2dd0e828b003c2895c23d8f4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","status":"modified","additions":161,"deletions":113,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"5927544fd985a0a93b058b2347caea87fa78056f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","status":"modified","additions":56,"deletions":51,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArraySet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"c1f7543816722cffb4dbc1e5475e19ff61eba089","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOCondVar.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"bbf13b6083e2270489bf001f126d3ae1929776b9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"5223e49789aaec3712a7d750fcb0c169041da437","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","status":"modified","additions":34,"deletions":40,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Lock.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"3a611a09e3685d99567d0f3e4b3a712c878002cb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NanoTimer.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"54450edb70eaa2e11f09b3bbe53bf3235af06abb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","status":"modified","additions":36,"deletions":33,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Queue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"a095ca46ebd0d27e8b08b31d735580df99b81b22","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","status":"modified","additions":120,"deletions":103,"changes":223,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ReentrantLock.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"872e68358640267673258d98ea785f87df928ddd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","status":"modified","additions":314,"deletions":108,"changes":422,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/TimeUnit.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"13635d4d250b4e3023d399c96d4bddb5532413d9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","status":"modified","additions":43,"deletions":31,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"4ba1f8583d6ecb788e23c237fc76ef52635a668e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/WaitQueue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"386ddc753298ae464b4d0917c457a39bd4bce8e1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/package.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"108cd5fa25af92cf5a430980f8f6f55193e8a176","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/package.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"6d2cd28dacb086e21b6213200779ce0c98873835","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"6425bfe0164e5af21870e7ddad5c73e0797f0859","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"e54aaa657c70f118db7016092e9f9917c6c47707","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"dbee2f17150b2d44edf40f070644a489a92d6ff3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"73c36e2af42ec34b60f846c0171ff2379d30a7f7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"535c4034c9bde7ccfd87a4de27a1f5c2a98b0176","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"9d5954d798a9e10e214d4563f33fb50880d5b8f1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/package.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/package.html","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/package.html?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"43bd0e7185f99684a8fd0b26b39e761f7b3c165a","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"cc0d424e9aa24dbbe911f7da209a583fc216e42b","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"ad5d832b1310fb4b433cdfb2e77ed7bd91bd37a9","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"aba366c29e80582f2785f93a673d24a334a9a139","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"74af933d96f1a9576d556664d6dc2e291efd6fc3","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"8c65a54a9afa6258ab1f7356bf01c5826c774a66","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"e5c7082d640a17ef18a8240a134aa319f7f28a7a","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"c88d34ddc17bb4fb8d42e682e8d9638fe9a8a709","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"321402493842817d622f8b52e288ac5f38f83ae4","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"b8ab84f21ae3ab216dbb798d78875eb4ae380223","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"561e0e34029890fdd9e41add4085c6306a6fcb51","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"fbf195699075f92cb2468e505790a3bd3249771e","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"c8ae2492c0e8373f2aaa034072fb8b04c4d05763","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"2d7e6f585298cca12a5ac6a4aed027b19f19a9b5","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"9d837a204d497f707dde4f7a247ca75db4557ae1","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","status":"modified","additions":241,"deletions":181,"changes":422,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"481095624f1e83e9c843365aad6685fa977a29e6","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"e9faa6fac40c83721e5c84de74bda189454e3f5d","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"6b04c52fae01497dc461885e5dcd0d0451e4ccf4","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"599918ee8b49faab7857dd066705dfeba1360fb5","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"4b2a8a7e309ea39b1650b4558eb4f8c71dede86e","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"db3f6257378726b93daac036ec43f12f69a60339","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","status":"modified","additions":53,"deletions":38,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"b72a8282cac781bcce7bda2c683ee48a6d973084","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"8cbed5af8d118dc0039597504bbbe996fdc176cb","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"603755990de7d96a60331f2a3dceefff5db991ae","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"02c03d2fd00e3c8e089fe578f075f2b5d5a44a62","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"3de5183bf9b20a2705e912c90dc2fe2680f9c6c8","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"b6a686bea91041c77ed91b8e240929d787996b48","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"8d5a1b6266617bcf033c26240dc777caf7e62577","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"b9ab07518da40c8069bb378dadadfb3428ee8d3f","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","status":"modified","additions":18,"deletions":7,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"7ade5cffe01219a8cf40cd440dd8352686d0f4e9","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"96de44f3d5297d7deee7499ee2519e4d9e1bc410","filename":"openjpa-persistence/pom.xml","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"0d2d76e1339c06cd361381cbb91e9f5458022942","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"added","additions":1502,"deletions":0,"changes":1502,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"7c9e4e7efa1697bbe55832e2404ece5fb06a03a6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"5c50eb5b9fc6d39e713b325a79169302cb3990aa","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","status":"added","additions":340,"deletions":0,"changes":340,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"fcf2328717ed46c6d95f8b68caf886f27f835da4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"6557cce58a0a398f7d90eaafefb1b6a66aa09116","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"1c79fce05e9b61456092d2f9597c4cef1edd391b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"aac4b02a17ae5f41cb93e34c622fa54eefb8ab09","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"eadb74f89c2e59f43143262ba723c0bc520ebf84","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"ee32bad54808000e0445471dd940514bb048764e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"},{"sha":"749423de6d090d3418a18b31fa7ea70e32d84673","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityExistsException.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityExistsException.java","raw_url":"https://github.com/apache/openjpa/raw/1fede626e2cad16f7bb4d77dd9fc3270a8b6b331/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityExistsException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityExistsException.java?ref=1fede626e2cad16f7bb4d77dd9fc3270a8b6b331"}]}

