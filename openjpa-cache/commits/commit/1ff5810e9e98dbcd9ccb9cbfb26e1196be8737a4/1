{"sha":"1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","node_id":"MDY6Q29tbWl0MjA2MzY0OjFmZjU4MTBlOWU5OGRiY2Q5Y2NiOWNiZmIyNmUxMTk2YmU4NzM3YTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-01T21:30:39Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-01T21:30:39Z"},"message":"OPENJPA-250: Correct MetaDataRepository plug-in configuration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820804 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"757b0f44d6bea0349dd76b63cfb2195e08f53087","url":"https://api.github.com/repos/apache/openjpa/git/trees/757b0f44d6bea0349dd76b63cfb2195e08f53087"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","html_url":"https://github.com/apache/openjpa/commit/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/comments","author":null,"committer":null,"parents":[{"sha":"fa02d2a5faea007b48a3158808de79c584d03574","url":"https://api.github.com/repos/apache/openjpa/commits/fa02d2a5faea007b48a3158808de79c584d03574","html_url":"https://github.com/apache/openjpa/commit/fa02d2a5faea007b48a3158808de79c584d03574"}],"stats":{"total":130,"additions":74,"deletions":56},"files":[{"sha":"c027a5271c0d1b73161c75f08a698830accbc227","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","status":"modified","additions":1,"deletions":22,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataRepositoryValue.java?ref=1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","patch":"@@ -35,9 +35,7 @@\n     extends PluginValue {\n \n     private static final String KEY = \"MetaDataRepository\";\n-    private static final String PRELOAD_STR = \"Preload=true\";\n-    private static final String NOLOCK_STR = \"NoLock=true\";\n-      \n+\n     public MetaDataRepositoryValue() {\n         super(KEY, false);\n         String[] aliases = new String[] {\n@@ -49,25 +47,6 @@ public MetaDataRepositoryValue() {\n         setString(aliases[0]);\n     }\n \n-    public boolean getPreload() {\n-        String p = getProperties();\n-        if (p != null && p.indexOf(PRELOAD_STR) >= 0) {\n-            return true;\n-        } else if (getNoLock() == true) {\n-            // No locking implies that we need to also preload.\n-            // Return true regardless of the value of the\n-            // preload flag.\n-            return true;\n-        }\n-        return false;\n-    }\n-    public boolean getNoLock(){\n-        String p = getProperties();\n-        if (p != null && p.indexOf(NOLOCK_STR) >= 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n     public Object instantiate(Class type, Configuration c, boolean fatal) {\n         MetaDataRepository repos = null;\n         OpenJPAConfiguration conf = (OpenJPAConfiguration) c;"},{"sha":"90a95aaea6ee3cfd0d643b1818ed53251c8b8296","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","patch":"@@ -333,7 +333,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         mapping = addString(\"Mapping\");\n         metaFactoryPlugin = addPlugin(\"MetaDataFactory\", false);\n \n-        metaRepositoryPlugin = (MetaDataRepositoryValue)addValue(new MetaDataRepositoryValue());\n+        metaRepositoryPlugin = addValue(new MetaDataRepositoryValue());\n \n         connectionFactory = addObject(\"ConnectionFactory\");\n         connectionFactory.setInstantiatingGetter(\"getConnectionFactory\");"},{"sha":"b8d90b194bfe7590be793ed315ffd743031e7853","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","patch":"@@ -60,6 +60,7 @@\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n import org.apache.openjpa.writebehind.WriteBehindCache;\n@@ -163,21 +164,24 @@ protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n                 _conf.getConnectionRetainModeConstant(), false).close(); \n         }\n \n-        // This logic needs to happen here for a reason! The preloading of the MDR\n-        // can not happen during the configuration of the MDR because when running\n-        // in a container environment we need to be able to get an uninitialized\n-        // MDR to pass to the PCClassFileTransformer. If we preload before registering\n+        // This eager metadata loading is invoked at construction. \n+        // It can not happen during the MetaDataRepository configuration because \n+        // within a container environment an uninitialized repository must be passed\n+        // to the PCClassFileTransformer. If we attempt to load before registering\n         // the class transformer, we miss the class being defined by the JVM and in turn\n         // we fail to enhance our entities.\n-        OpenJPAConfigurationImpl impl = (OpenJPAConfigurationImpl) config;\n-        MetaDataRepositoryValue m = impl.metaRepositoryPlugin;\n-        if (m.getPreload() == true) {\n-            // Obtain a reference to the MetaDataRepository and trigger the preload\n+        try {\n             MetaDataRepository mdr = config.getMetaDataRepositoryInstance();\n             mdr.preload();\n+        } catch (MetaDataException e) {\n+            // recognize metadata related error if using early initialization\n+            throw e;\n+        } catch (Throwable t) {\n+            // swallow other errors because merely trying to obtain a repository \n+            // may trigger a database connection \n+            _conf.getConfigurationLog().error(_loc.get(\"factory-init-error\",t));\n         }\n-        \n-        initWriteBehindCallback();\n+        initWriteBehindCallback();        \n     }\n \n     /**"},{"sha":"dce6cf3d3492f7dde8aad6efe66a03ac830cbf92","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":41,"deletions":19,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","patch":"@@ -274,32 +274,58 @@ else if (on)\n             _sourceMode &= ~mode;\n     }\n \n+    /**\n+     * Sets whether this repository will load all known persistent classes at initialization.\n+     * Defaults to false.\n+     */\n+    public boolean getPreload() {\n+        return _preload;\n+    }\n+    \n+    /**\n+     * Sets whether this repository will load all known persistent classes at initialization.\n+     * Defaults to false.\n+     */\n     public void setPreload(boolean l) {\n         _preload = l;\n     }\n \n+    /**\n+     * Sets whether this repository will use unguarded access. Unguarded access\n+     * can be safe if all metadata has been loaded at initialization.\n+     */\n     public void setNoLock(boolean l) {\n         _noLock = l;\n     }\n+    \n+    /**\n+     * Affirms whether this repository will use unguarded access. Unguarded access\n+     * can be safe if all metadata has been loaded at initialization.\n+     */\n+    public boolean getNoLock() {\n+        return _noLock;\n+    }\n \n     /**\n-     * If the openjpa.MetaDataRepository plugin value preload=false is set, this method will noop.\n-     * If preload=true this method gets the list of persistent classes and calls to the\n-     * MetaDataFactory to load ALL metadata.\n-     * <p>\n+     * Loads all the known persistent classes if {@linkplain #setPreload(boolean) early loading} \n+     * initialization has been set. The configuration must enlist all classes.\n      * \n-     * If noLock=true, calling this method will also remove ALL locking from this class.\n+     * <br>\n+     * If {@linkplain #setNoLock(boolean) no lock} has been set then uses unguarded access to\n+     * all internal data container structures.\n+     * If the openjpa.MetaDataRepository plugin value preload=false is set, this method will noop.\n      * <p>\n-     * \n      * NOTE : This method is not thread safe and should ONLY be called by the AbstractBrokerFactory\n      * constructor.\n+     * \n+     * @see #getPersistentTypeNames(boolean, ClassLoader)\n      */\n     public void preload() {\n-        if (_preload == false) {\n+        if (!_preload) {\n             return;\n         }\n-        if (_log.isTraceEnabled()) {\n-            _log.trace(\"MetaDataRepository preload=\" + _preload + \",noLock=\" + _noLock);\n+        if (_log.isInfoEnabled()) {\n+            _log.info(_loc.get(_noLock ? \"repos-preload\" : \"repos-preload-nolock\"));\n         }\n \n         // Remove locking and use unsynchronized maps.\n@@ -319,28 +345,24 @@ public void preload() {\n         MultiClassLoader multi = AccessController.doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n         multi.addClassLoader(AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction()));\n         multi.addClassLoader(AccessController.doPrivileged(J2DoPrivHelper\n-            .getClassLoaderAction(MetaDataRepository.class)));\n+             .getClassLoaderAction(MetaDataRepository.class)));\n \n         Set<String> classes = getPersistentTypeNames(false, multi);\n         if (classes == null || classes.size() == 0) {\n-            throw new RuntimeException(\"No persistent classes listed when trying to preload the MetaDataRepository\");\n+            throw new MetaDataException(_loc.get(\"repos-preload-none\"));\n         }\n-        if (_log.isTraceEnabled() == true) {\n-            _log.trace(MetaDataRepository.class.getName() \n-                + \" preloading the following classes : \" + classes.toString());\n+        if (_log.isTraceEnabled()) {\n+            _log.trace(_loc.get(\"repos-preloading\", this.getClass().getName(), classes.toString()));\n         }\n \n         for (String c : classes) {\n             try {\n                 Class<?> cls = AccessController.doPrivileged((J2DoPrivHelper.getForNameAction(c, true, multi)));\n                 _factory.load(cls, MODE_ALL, multi);\n             } catch (PrivilegedActionException pae) {\n-                // Unexpected!\n-                if (_log.isTraceEnabled() == true) {\n-                    _log.trace(MetaDataRepository.class.getName() + \" encountered an unexpected exception \", pae);\n-                }\n+                throw new MetaDataException(_loc.get(\"repos-preload-error\"), pae);\n             }\n-        }// end for\n+        }\n     }\n \n     protected void lock() {"},{"sha":"af50e5288cd0f3d45370b50d5aa2a961102aac13","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","patch":"@@ -187,6 +187,8 @@ dup-load: Cannot load object with id \"{0}\".  Instance \"{1}\" with the same id \\\n bad-id-value: The given value \"{0}\" cannot be converted into an identity \\\n \tfor \"{2}\".  The value is the wrong type ({1}).\n factory-init: Starting OpenJPA {0}\n+factory-init-error: Error during initialization of configured properties: \"{0}\"\\\n+\tThe initialization will continue. \n factory-properties: Properties: {0}\n inverse-consistency: An inverse inconsistency in the object featureSelection was \\\n \tdetected while flushing the field \"{0}\" of the instance with id \"{1}\" \\"},{"sha":"e4e62958dfb9496a42038d853840216c0a2cdf20","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","patch":"@@ -336,5 +336,15 @@ unexpected_proxy_sm_attribute_type: Unexpected attribute type \"{1}\" for \\\n     inherited class(es) are packaged in the same jar file.\n meta-no-featureSelection: Meta class \"{0}\" for entity {1} can not be registered with \\\n \tfollowing exception \"{2}\"\n-no-mapped-by-in-mapped-super: Persistent relationship {0} defined by a mapped superclass {1} must be \\\n-\tunidirectional.\t\n\\ No newline at end of file\n+no-mapped-by-in-mapped-super: Persistent relationship {0} defined by a mapped \\\n+\tsuperclass {1} must be unidirectional.\n+repos-preload: Metadata is loaded during initialization. The persistent classes \\\n+\tmust be enlisted in configuration to be loaded during initialization.\n+repos-preload-nolock: Metadata is loaded during initialization with unguarded access. \\\n+    The persistent classes must be enlisted in configuration to be loaded during \\\n+    initialization.  \t\n+repos-preload-none: No persistent metadata found for loading during initialization. \\\n+\tThe persistent classes must be enlisted in configuration to be loaded during initialization.  \n+repos-preloading: Following metadata are being loaded during initialization by \"{0}\": {1}. \n+repos-preload-error: Unexpected error during early loading during initialization. \\\n+\tSee nested stacktrace for details. \t  \n\\ No newline at end of file"},{"sha":"dc9749d6326625a55730963997e117914521941a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","patch":"@@ -158,7 +158,8 @@\n      * Add the given value to the set of configuration properties. This\n      * method replaces any existing value under the same property.\n      */\n-    public Value addValue(Value val);\n+    public <T extends Value> T addValue(T val);\n+    //public Value addValue(Value val);\n \n     /**\n      * Remove the given value from the set of configuration properties."},{"sha":"c4049705979aece98eb8ce0d4a6831f85837ecad","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=1ff5810e9e98dbcd9ccb9cbfb26e1196be8737a4","patch":"@@ -994,7 +994,7 @@ public boolean removeValue(Value val) {\n         return true;\n     }\n \n-    public Value addValue(Value val) {\n+    public <T extends Value> T addValue(T val) {\n         _vals.add(val);\n         val.addListener(this);\n         return val;"}]}

