{"sha":"201701459ab6a3fa8fd715700855f11e756436cf","node_id":"MDY6Q29tbWl0MjA2MzY0OjIwMTcwMTQ1OWFiNmEzZmE4ZmQ3MTU3MDA4NTVmMTFlNzU2NDM2Y2Y=","commit":{"author":{"name":"Ravi Prakash Palacherla","email":"rpalache@apache.org","date":"2011-10-27T16:42:11Z"},"committer":{"name":"Ravi Prakash Palacherla","email":"rpalache@apache.org","date":"2011-10-27T16:42:11Z"},"message":"OPENJPA-2066 Edge case in OPENJPA-1227. openJPA fails to create a join and thus returns wrong data when a collection is selected from superclass and another field is selected from subclass two or more levels down the hierarchy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1189858 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10a47e447a1bbed90a94fb00d69a004c733cc664","url":"https://api.github.com/repos/apache/openjpa/git/trees/10a47e447a1bbed90a94fb00d69a004c733cc664"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/201701459ab6a3fa8fd715700855f11e756436cf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/201701459ab6a3fa8fd715700855f11e756436cf","html_url":"https://github.com/apache/openjpa/commit/201701459ab6a3fa8fd715700855f11e756436cf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/201701459ab6a3fa8fd715700855f11e756436cf/comments","author":null,"committer":null,"parents":[{"sha":"1e4a05c6db07f3112fdae4923e6c6ce7bf47ce28","url":"https://api.github.com/repos/apache/openjpa/commits/1e4a05c6db07f3112fdae4923e6c6ce7bf47ce28","html_url":"https://github.com/apache/openjpa/commit/1e4a05c6db07f3112fdae4923e6c6ce7bf47ce28"}],"stats":{"total":272,"additions":271,"deletions":1},"files":[{"sha":"2ce937bc6d05f340249c3c0705fbfc1aa7d11fcf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=201701459ab6a3fa8fd715700855f11e756436cf","patch":"@@ -1382,7 +1382,7 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n \n         // in certain circumstances force join to superclass table to avoid\n         // SQL generation error.\n-        if ( eagerToMany != null && pseld < 0 && seld > 0 && !joined\n+        if ( eagerToMany != null && pseld < 0 && !joined\n                 && parent != null ) {\n             FieldMapping[] pfms = parent.getDefinedFieldMappings();\n             for (int i = 0; i < pfms.length; i++) {"},{"sha":"442564e3f9d9d7b045a73b384fdf6502bf08ee0d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildChildClass.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildChildClass.java","raw_url":"https://github.com/apache/openjpa/raw/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildChildClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildChildClass.java?ref=201701459ab6a3fa8fd715700855f11e756436cf","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.FetchAttribute;\n+import org.apache.openjpa.persistence.FetchGroup;\n+import org.apache.openjpa.persistence.FetchGroups;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public class ChildChildClass extends ChildClass {\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String name2;\n+\n+    public ChildChildClass() {\n+        super();\n+    }\n+\n+    public String getName2() {\n+        return name2;\n+    }\n+\n+    public void setName2(String name2) {\n+        this.name2 = name2;\n+    }\n+    \n+    @Override\n+    public String toString() {\n+        return super.toString()+\"\\n\"+\"Name2: \"+name2+\"\\n\";\n+    }\n+}\n+"},{"sha":"45e13a4bd801de5d9a16cb119f3dd82e7c839bd3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildClass.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildClass.java","raw_url":"https://github.com/apache/openjpa/raw/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChildClass.java?ref=201701459ab6a3fa8fd715700855f11e756436cf","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.FetchAttribute;\n+import org.apache.openjpa.persistence.FetchGroup;\n+import org.apache.openjpa.persistence.FetchGroups;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+\n+public class ChildClass extends ParentClass {\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String name;\n+\n+    public ChildClass() {\n+        super();\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sBuf = new StringBuilder();\n+        sBuf.append(\"Name: \").append(name).append(\"\\n\");\n+        sBuf.append(\"Items: \");\n+        if (getItems().isEmpty()) {\n+            sBuf.append(\"none\\n\");\n+        } else {\n+            sBuf.append(getItems().size()).append('\\n');\n+            for (String item : getItems()) {\n+                sBuf.append(\"\\t\");\n+                sBuf.append(item);\n+                sBuf.append(\"\\n\");\n+            }\n+        }\n+        return sBuf.toString();\n+    }\n+}"},{"sha":"25cdd7079af0faa843852b4a7e026f07372009ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChildClass.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChildClass.java","raw_url":"https://github.com/apache/openjpa/raw/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChildClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChildClass.java?ref=201701459ab6a3fa8fd715700855f11e756436cf","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public class GrandChildClass extends ChildChildClass {\n+ \n+    @Basic(fetch=FetchType.EAGER)\n+    private String someUnloadedField;\n+\n+    public String getSomeUnloadedString() {\n+        return someUnloadedField;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \"SomeUnloadedField: \" + someUnloadedField + \"\\n\";\n+    }\n+}"},{"sha":"716d66d470777563304e62989338071daabb4b0f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ParentClass.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ParentClass.java","raw_url":"https://github.com/apache/openjpa/raw/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ParentClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ParentClass.java?ref=201701459ab6a3fa8fd715700855f11e756436cf","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.Collection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public abstract class ParentClass {\n+\n+    @PersistentCollection(fetch=FetchType.EAGER)\n+    private Set<String> items = new HashSet<String>();\n+\n+    protected ParentClass() {\n+    }\n+\n+    public Set<String> getItems() {\n+        return items;\n+    }\n+    \n+    public void setItems(Collection<String> items) {\n+        this.items.addAll(items);\n+    }\n+}"},{"sha":"057d48d4be9ee198aa5cb4ed16019f86d8544250","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedMultiInheritanceHierarchy.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedMultiInheritanceHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/201701459ab6a3fa8fd715700855f11e756436cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedMultiInheritanceHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedMultiInheritanceHierarchy.java?ref=201701459ab6a3fa8fd715700855f11e756436cf","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Collection;\n+\n+import org.apache.openjpa.meta.FetchGroup;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.PersistenceException;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestJoinedMultiInheritanceHierarchy\n+    extends SingleEMFTestCase {\n+    \n+    public void setUp() {\n+        super.setUp( CLEAR_TABLES, ChildChildClass.class, ChildClass.class, \n+                     GrandChildClass.class, ParentClass.class,\n+                     \"openjpa.BrokerImpl\", \"EvictFromDataCache=true\" );\n+    }\n+    \n+    public void testCacheSqlGeneration() throws PersistenceException {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        em.getTransaction().begin();\n+        final GrandChildClass notEmpty = new GrandChildClass();\n+        notEmpty.setName(\"Not empty object\");\n+        Collection<String> itemSet = notEmpty.getItems();\n+        for (int i = 0; i < 5; i++) {\n+            itemSet.add(notEmpty.getName() + \" : item n.\" + i);\n+        }\n+        \n+        notEmpty.setItems(itemSet);\n+        \n+        final GrandChildClass empty = new GrandChildClass();\n+        empty.setName(\"empty object\");\n+        \n+        em.persist(notEmpty);\n+        em.persist(empty);\n+        em.getTransaction().commit();\n+        \n+        em.evictAll();\n+        assertTrue(empty.getItems().isEmpty());\n+    }\n+    \n+}\n+"}]}

