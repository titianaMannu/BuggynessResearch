{"sha":"201d680a0db05dacef0c9d8635e9eb6cfe546c59","node_id":"MDY6Q29tbWl0MjA2MzY0OjIwMWQ2ODBhMGRiMDVkYWNlZjBjOWQ4NjM1ZTllYjZjZmU1NDZjNTk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-22T16:52:39Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-03-22T16:52:39Z"},"message":"OPENJPA-1586 - Commit test case contribution by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@926181 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a37122f148c24042011e8ac8ac9061d2a5598b24","url":"https://api.github.com/repos/apache/openjpa/git/trees/a37122f148c24042011e8ac8ac9061d2a5598b24"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/201d680a0db05dacef0c9d8635e9eb6cfe546c59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/201d680a0db05dacef0c9d8635e9eb6cfe546c59","html_url":"https://github.com/apache/openjpa/commit/201d680a0db05dacef0c9d8635e9eb6cfe546c59","comments_url":"https://api.github.com/repos/apache/openjpa/commits/201d680a0db05dacef0c9d8635e9eb6cfe546c59/comments","author":null,"committer":null,"parents":[{"sha":"87ea1de7c25579249ae3c8ac0b9985b39a88515b","url":"https://api.github.com/repos/apache/openjpa/commits/87ea1de7c25579249ae3c8ac0b9985b39a88515b","html_url":"https://github.com/apache/openjpa/commit/87ea1de7c25579249ae3c8ac0b9985b39a88515b"}],"stats":{"total":21,"additions":15,"deletions":6},"files":[{"sha":"a472afa5922b47a8c35b58597afe7a1edb12d14e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/201d680a0db05dacef0c9d8635e9eb6cfe546c59/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","raw_url":"https://github.com/apache/openjpa/raw/201d680a0db05dacef0c9d8635e9eb6cfe546c59/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java?ref=201d680a0db05dacef0c9d8635e9eb6cfe546c59","patch":"@@ -45,9 +45,9 @@\n     public int deptId = 1;\n     public int empId = 1;\n \n-    public List rsAllDepartment1 = null;\n-    public List rsAllDepartment2 = null;\n-    public List rsAllDepartment3 = null;\n+    public List<Department1> rsAllDepartment1 = null;\n+    public List<Department2> rsAllDepartment2 = null;\n+    public List<Department3> rsAllDepartment3 = null;\n \n     public void setUp() {\n         super.setUp(DROP_TABLES,\n@@ -112,7 +112,7 @@ public void testQueryQualifiedId() throws Exception {\n         queryQualifiedId(false);\n     }\n \n-    public void setCandidate(Query q, Class clz) \n+    public void setCandidate(Query q, Class<?> clz) \n         throws Exception {\n         org.apache.openjpa.persistence.QueryImpl q1 = \n             (org.apache.openjpa.persistence.QueryImpl) q;\n@@ -133,7 +133,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         Query q = em.createQuery(query);\n         if (inMemory) \n             setCandidate(q, Department1.class);\n-        List rs = q.getResultList();\n+        List<?> rs = q.getResultList();\n         Integer d = (Integer) rs.get(0);\n         \n         query = \"select KEY(e) from Department2 d, \" +\n@@ -164,6 +164,15 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         Integer deptId = (Integer) rs.get(0);\n         assertEquals(\"dept id is not 2\", 2, deptId.intValue());\n         \n+        query = \"select KEY(e).lName from Department3 d, \" + \"in (d.emps) e \" + \"group by KEY(e).lName \"\n+                + \"having KEY(e).lName like 'l%'\";\n+        q = em.createQuery(query);\n+        if (inMemory)\n+            setCandidate(q, Department1.class);\n+        rs = q.getResultList();\n+        assertEquals(\"number of employees is not equal to numDepartments*numEmployeesPerDept\", numDepartments\n+                * numEmployeesPerDept, rs.size());\n+\n         em.close();\n     }\n \n@@ -192,7 +201,7 @@ public void createObj() {\n     public void createDepartment1(EntityManager em, int id) {\n         Department1 d = new Department1();\n         d.setDeptId(id);\n-        Map empMap = new HashMap();\n+        Map<Integer,Employee1> empMap = new HashMap<Integer,Employee1>();\n         for (int i = 0; i < numEmployeesPerDept; i++) {\n             Employee1 e = createEmployee1(em, empId++);\n             //d.addEmployee1(e);"}]}

