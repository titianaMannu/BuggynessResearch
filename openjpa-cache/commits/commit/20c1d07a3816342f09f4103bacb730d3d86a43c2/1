{"sha":"20c1d07a3816342f09f4103bacb730d3d86a43c2","node_id":"MDY6Q29tbWl0MjA2MzY0OjIwYzFkMDdhMzgxNjM0MmYwOWY0MTAzYmFjYjczMGQzZDg2YTQzYzI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-12-09T15:33:11Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2010-12-09T15:33:11Z"},"message":"OPENJPA-1904 Propagate refresh operation for eagerly fetched relationship fields.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1044006 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b6dd9228706b29b5f48e71ce2368612f4ebd65ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/b6dd9228706b29b5f48e71ce2368612f4ebd65ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/20c1d07a3816342f09f4103bacb730d3d86a43c2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/20c1d07a3816342f09f4103bacb730d3d86a43c2","html_url":"https://github.com/apache/openjpa/commit/20c1d07a3816342f09f4103bacb730d3d86a43c2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/20c1d07a3816342f09f4103bacb730d3d86a43c2/comments","author":null,"committer":null,"parents":[{"sha":"09dab24fcd5b44519db55fc0ab3d51b6e1446c8d","url":"https://api.github.com/repos/apache/openjpa/commits/09dab24fcd5b44519db55fc0ab3d51b6e1446c8d","html_url":"https://github.com/apache/openjpa/commit/09dab24fcd5b44519db55fc0ab3d51b6e1446c8d"}],"stats":{"total":27,"additions":19,"deletions":8},"files":[{"sha":"ba4de640f959a763589e0ff234f5927a6f13d518","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/20c1d07a3816342f09f4103bacb730d3d86a43c2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/20c1d07a3816342f09f4103bacb730d3d86a43c2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=20c1d07a3816342f09f4103bacb730d3d86a43c2","patch":"@@ -3011,7 +3011,7 @@ else if (sm.beforeRefresh(true)) {\n                         }\n                         int level = _fc.getReadLockLevel();\n                         int timeout = _fc.getLockTimeout();\n-                        _lm.lock(sm, level, timeout, null, false);\n+                        _lm.refreshLock(sm, level, timeout, null);\n                         sm.readLocked(level, level);\n                     } else if (assertPersistenceCapable(obj).pcIsDetached()\n                         == Boolean.TRUE)\n@@ -3083,7 +3083,7 @@ else if (sm.beforeRefresh(false)) {\n                 }\n                 int level = _fc.getReadLockLevel();\n                 int timeout = _fc.getLockTimeout();\n-                _lm.lock(sm, level, timeout, null, false);\n+                _lm.refreshLock(sm, level, timeout, null);\n                 sm.readLocked(level, level);\n                 fireLifecycleEvent(sm.getManagedInstance(), null,\n                     sm.getMetaData(), LifecycleEvent.AFTER_REFRESH);"},{"sha":"9f5d4b62fa06c4492008dfdb39dc37ec5842da37","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/20c1d07a3816342f09f4103bacb730d3d86a43c2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","raw_url":"https://github.com/apache/openjpa/raw/20c1d07a3816342f09f4103bacb730d3d86a43c2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java?ref=20c1d07a3816342f09f4103bacb730d3d86a43c2","patch":"@@ -74,8 +74,8 @@ public void lock(OpenJPAStateManager sm, int level, int timeout,\n      * Perform the same function as previous lock method and has the option\n      * to perform a version check after the lock function has completed. \n      */\n-    public void lock(OpenJPAStateManager sm, int level, int timeout,\n-        Object sdata, boolean postLockVersionCheck);\n+    public void refreshLock(OpenJPAStateManager sm, int level, int timeout,\n+        Object sdata);\n     \n     /**\n      * Obtain locks on the specified objects."},{"sha":"56bbb8bd53ab19f96aa732a8a965b46979937d55","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/NoneLockManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/20c1d07a3816342f09f4103bacb730d3d86a43c2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/NoneLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/20c1d07a3816342f09f4103bacb730d3d86a43c2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/NoneLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/NoneLockManager.java?ref=20c1d07a3816342f09f4103bacb730d3d86a43c2","patch":"@@ -33,8 +33,8 @@ public void lock(OpenJPAStateManager sm, int level, int timeout,\n         sm.setLock(Boolean.TRUE);\n     }\n \n-    public void lock(OpenJPAStateManager sm, int level, int timeout,\n-        Object context, boolean postLockVersionCheck) {\n+    public void refreshLock(OpenJPAStateManager sm, int level, int timeout,\n+        Object context) {\n         sm.setLock(Boolean.TRUE);\n     }\n "},{"sha":"93bcf12059ac69377128a89efa862e6ec59928a1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/20c1d07a3816342f09f4103bacb730d3d86a43c2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/20c1d07a3816342f09f4103bacb730d3d86a43c2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java?ref=20c1d07a3816342f09f4103bacb730d3d86a43c2","patch":"@@ -31,6 +31,7 @@\n \n     private boolean _versionCheckOnReadLock = true;\n     private boolean _versionUpdateOnWriteLock = true;\n+    private boolean _refreshing = false;\n \n     /**\n      * Returns the given instance's lock level, assuming that the state's\n@@ -67,10 +68,20 @@ public void release(OpenJPAStateManager sm) {\n      */\n     public void lock(OpenJPAStateManager sm, int level, int timeout,\n         Object sdata) {\n-        lock(sm, level, timeout, sdata, true);\n+        commonLock(sm, level, timeout, sdata, !_refreshing);\n     }\n     \n-    public void lock(OpenJPAStateManager sm, int level, int timeout,\n+    public void refreshLock(OpenJPAStateManager sm, int level, int timeout,\n+            Object sdata) {\n+    \ttry {\n+        \t_refreshing = true;\n+    \t\tcommonLock(sm, level, timeout, sdata, false);\n+    \t} finally {\n+        \t_refreshing = false;    \t\t\n+    \t}\n+    }\n+\n+    private void commonLock(OpenJPAStateManager sm, int level, int timeout,\n             Object sdata, boolean postLockVersionCheck) {\n         if (level == LOCK_NONE)\n             return;"}]}

