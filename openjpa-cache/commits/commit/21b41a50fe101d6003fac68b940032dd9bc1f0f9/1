{"sha":"21b41a50fe101d6003fac68b940032dd9bc1f0f9","node_id":"MDY6Q29tbWl0MjA2MzY0OjIxYjQxYTUwZmUxMDFkNjAwM2ZhYzY4Yjk0MDAzMmRkOWJjMWYwZjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-04-15T08:34:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-04-15T08:34:45Z"},"message":"OPENJPA-1039: treat AND OR operators as non-associative\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@765085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f662b1de03d4da2634d0e5dfa70dd5e119edad4a","url":"https://api.github.com/repos/apache/openjpa/git/trees/f662b1de03d4da2634d0e5dfa70dd5e119edad4a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/21b41a50fe101d6003fac68b940032dd9bc1f0f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/21b41a50fe101d6003fac68b940032dd9bc1f0f9","html_url":"https://github.com/apache/openjpa/commit/21b41a50fe101d6003fac68b940032dd9bc1f0f9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/21b41a50fe101d6003fac68b940032dd9bc1f0f9/comments","author":null,"committer":null,"parents":[{"sha":"affdc073d025fc279e35c8ac1f8ee6654f2a6302","url":"https://api.github.com/repos/apache/openjpa/commits/affdc073d025fc279e35c8ac1f8ee6654f2a6302","html_url":"https://github.com/apache/openjpa/commit/affdc073d025fc279e35c8ac1f8ee6654f2a6302"}],"stats":{"total":24,"additions":22,"deletions":2},"files":[{"sha":"517ee61a87a8d0e2222c7ed7200fb37608e23d38","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/21b41a50fe101d6003fac68b940032dd9bc1f0f9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/21b41a50fe101d6003fac68b940032dd9bc1f0f9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java?ref=21b41a50fe101d6003fac68b940032dd9bc1f0f9","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.persistence.query.DomainObject;\n import org.apache.openjpa.persistence.query.Expression;\n import org.apache.openjpa.persistence.query.OpenJPAQueryBuilder;\n+import org.apache.openjpa.persistence.query.Predicate;\n import org.apache.openjpa.persistence.query.QueryBuilderImpl;\n import org.apache.openjpa.persistence.query.QueryDefinition;\n import org.apache.openjpa.persistence.query.SelectItem;\n@@ -90,6 +91,25 @@ public void tearDown() {\n \t\t// do nothing as we may not have a database connection\n \t}\n \t\n+\tpublic void testLogicalPredicateAssociativity() {\n+\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\n+\t\tPredicate p1 = e.get(\"salary\").greaterThan(100);\n+\t\tPredicate p2 = e.get(\"rating\").equal(5);\n+\t\tPredicate p3 = e.get(\"name\").like(\"John\");\n+\t\tPredicate w1 = p1.and(p2.or(p3));\n+\t\tPredicate w2 = (p1.and(p2)).or(p3);\n+\t\tQueryDefinition q1 = e.select(e).where(w1);\n+\t\tString jpql1 = qb.toJPQL(q1);\n+\t\temf.createEntityManager().createDynamicQuery(q1).getResultList();\n+\t\t\n+\t\tQueryDefinition q2 = e.select(e).where(w2);\n+\t\tString jpql2 = qb.toJPQL(q2);\n+\t\tSystem.err.println(jpql1);\n+\t\tSystem.err.println(jpql2);\n+\t\tassertNotEquals(jpql1, jpql2);\n+\t\temf.createEntityManager().createDynamicQuery(q2).getResultList();\n+\t}\n+\t\n \tpublic void testMultipleDomainOfSameClass() {\n \t\tDomainObject o1 = qb.createQueryDefinition(Order.class);\n \t\tDomainObject o2 = o1.addRoot(Order.class);"},{"sha":"df782cf23bae681d67f5ac8e573460a60fa859ea","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LogicalPredicate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/21b41a50fe101d6003fac68b940032dd9bc1f0f9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LogicalPredicate.java","raw_url":"https://github.com/apache/openjpa/raw/21b41a50fe101d6003fac68b940032dd9bc1f0f9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LogicalPredicate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LogicalPredicate.java?ref=21b41a50fe101d6003fac68b940032dd9bc1f0f9","patch":"@@ -52,7 +52,7 @@ public Predicate not() {\n \t}\n \n \tpublic String asExpression(AliasContext ctx) {\n-\t\treturn ((Visitable)_p1).asExpression(ctx) + \" \" + _op + \" \" \n-\t\t     + ((Visitable)_p2).asExpression(ctx);\n+\t\treturn OPEN_BRACE + ((Visitable)_p1).asExpression(ctx) + SPACE + _op + \n+\t\t\t   SPACE + ((Visitable)_p2).asExpression(ctx) + CLOSE_BRACE;\n \t}\n }"}]}

