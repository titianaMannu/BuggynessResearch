{"sha":"21d88cadc79848e5c678069478a036fbac439ddf","node_id":"MDY6Q29tbWl0MjA2MzY0OjIxZDg4Y2FkYzc5ODQ4ZTVjNjc4MDY5NDc4YTAzNmZiYWM0MzlkZGY=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-20T00:03:30Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-08-20T00:03:30Z"},"message":"OPENJPA-1256: fix ClassCastExcepton when IdClass contains an ENUM type\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806011 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efee5b1d5760d13e2c0f65b1a9b261ba7baaa376","url":"https://api.github.com/repos/apache/openjpa/git/trees/efee5b1d5760d13e2c0f65b1a9b261ba7baaa376"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/21d88cadc79848e5c678069478a036fbac439ddf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/21d88cadc79848e5c678069478a036fbac439ddf","html_url":"https://github.com/apache/openjpa/commit/21d88cadc79848e5c678069478a036fbac439ddf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/21d88cadc79848e5c678069478a036fbac439ddf/comments","author":null,"committer":null,"parents":[{"sha":"7065743f1766b69e3b56b23315f930dcf6930789","url":"https://api.github.com/repos/apache/openjpa/commits/7065743f1766b69e3b56b23315f930dcf6930789","html_url":"https://github.com/apache/openjpa/commit/7065743f1766b69e3b56b23315f930dcf6930789"}],"stats":{"total":209,"additions":206,"deletions":3},"files":[{"sha":"d761c7f54a1b195e76460ed600f0c4e72eaa1385","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=21d88cadc79848e5c678069478a036fbac439ddf","patch":"@@ -2015,7 +2015,8 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n                 code.iadd();\n                 code.invokeinterface().setMethod\n                     (getFieldSupplierMethod(type));\n-                if (fmds[i].getObjectIdFieldTypeCode() == JavaTypes.OBJECT) {\n+                if (fmds[i].getObjectIdFieldTypeCode() == JavaTypes.OBJECT &&\n+                    !fmds[i].getDeclaredType().isEnum()) {\n                 \tcode.checkcast().setType(ObjectId.class);\n                 \tcode.invokevirtual().setMethod(ObjectId.class, \"getId\", \n             \t\t\tObject.class, null);                \t"},{"sha":"7a857176aed13d38104242583dc563065fcd665a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmpId.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmpId.java","raw_url":"https://github.com/apache/openjpa/raw/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmpId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmpId.java?ref=21d88cadc79848e5c678069478a036fbac439ddf","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+\n+public class EmpId {\n+    int empId;\n+    \n+    @Enumerated(EnumType.ORDINAL)  \n+    Employee.EmpType empType;\n+    \n+    public int getEmpId() {\n+        return empId;\n+    }\n+    \n+    public void setEmpId(int empId) {\n+        this.empId = empId;\n+    }\n+\n+    public Employee.EmpType getEmpType() {\n+        return empType;\n+    }\n+    \n+    public void setEmpType(Employee.EmpType empType) {\n+        this.empType = empType;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof EmpId)) return false;\n+        if (((EmpId)o).empId == empId &&\n+            ((EmpId)o).empType == empType) return true;\n+        return false;\n+    }\n+    \n+    public int hashCode() {\n+        return empId *31 + empType.hashCode();\n+    }\n+    \n+}"},{"sha":"eb0b86619ab037201cac07c00db4767043a3fcfd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee.java?ref=21d88cadc79848e5c678069478a036fbac439ddf","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import javax.persistence.*;\n+\n+\n+@Entity\n+@Table(name=\"EMP_MBI\")\n+@IdClass(EmpId.class)\n+public class Employee {\n+    @Id\n+    int empId;\n+    \n+    @Id\n+    @Enumerated\n+    EmpType empType;\n+\n+    @OneToOne\n+    PhoneNumber phoneNumber; \n+    \n+    public PhoneNumber getPhoneNumber() {\n+        return phoneNumber;\n+    }\n+    \n+    public void setPhoneNumber(PhoneNumber phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+      \n+    public int getEmpId() {\n+        return empId;\n+    }\n+    \n+    public void setEmpId(int empId) {\n+        this.empId = empId;\n+    }\n+\n+    public EmpType getEmpType() {\n+        return empType;\n+    }\n+    \n+    public void setEmpType(EmpType empType) {\n+        this.empType = empType;\n+    }\n+\n+    public boolean equals(Object o) {\n+        Employee e = (Employee) o;\n+        PhoneNumber p = e.getPhoneNumber();\n+        if (p.getNumber() != phoneNumber.getNumber())\n+            return false;\n+        \n+        return true;\n+    }\n+    \n+    public enum EmpType { A1, A2, A3, A4 };\n+    \n+    \n+}"},{"sha":"e98c4760f2df21168845ef03aa4b5297707e17f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PhoneNumber.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PhoneNumber.java?ref=21d88cadc79848e5c678069478a036fbac439ddf","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"PH_MBI\")\n+public class PhoneNumber {\n+    @Id\n+    int number;\n+    \n+    @OneToOne(fetch=FetchType.LAZY)\n+    Employee emp;\n+    \n+    \n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(int number) {\n+        this.number = number;\n+    }\n+    \n+    public Employee getEmp() {\n+        return emp;\n+    }\n+    \n+    public void setEmp(Employee emp) {\n+        this.emp = emp;\n+    }\n+}"},{"sha":"51d9c652ac4d855c81ec57bc8646261ea8a0562a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/21d88cadc79848e5c678069478a036fbac439ddf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=21d88cadc79848e5c678069478a036fbac439ddf","patch":"@@ -79,14 +79,14 @@\n     public int mId4 = 1;\n \n     public void setUp() throws Exception {\n-        super.setUp(DROP_TABLES, Dependent1.class, Employee1.class, \n+        super.setUp(DROP_TABLES, Dependent1.class, Employee.class, Employee1.class, \n             DependentId1.class, Dependent2.class, Employee2.class,\n             DependentId2.class, EmployeeId2.class, MedicalHistory1.class,\n             Person1.class, PersonId1.class, MedicalHistory2.class,\n             Person2.class, Person3.class, MedicalHistory3.class, \n             Person4.class, PersonId4.class, MedicalHistory4.class,\n             Dependent3.class, Employee3.class, DependentId3.class, \n-            Parent3.class, Dependent4.class, Employee4.class,\n+            Parent3.class, Dependent4.class, Employee4.class, PhoneNumber.class,\n             BeneContact.class, BeneContactId.class, Beneficiary.class);\n     }\n \n@@ -164,6 +164,29 @@ public void testMappedById7() {\n         queryObj7();\n     }\n \n+    public void testEnumIdClass() {\n+        EntityManager em = emf.createEntityManager();\n+        Employee e = new Employee();\n+        e.setEmpId(1);\n+        e.setEmpType(Employee.EmpType.A1);\n+        PhoneNumber phoneNumber = new PhoneNumber();\n+        phoneNumber.setNumber(1);\n+        phoneNumber.setEmp(e);\n+        e.setPhoneNumber(phoneNumber);\n+        em.persist(phoneNumber);\n+        em.persist(e);\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.clear();\n+        PhoneNumber p = em.find(PhoneNumber.class, 1);\n+        Employee emp = p.getEmp();\n+        assertEquals(1, emp.getEmpId());\n+        em.close();\n+    }\n+    \n+    \n     public void createObj1() {\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();"}]}

