{"sha":"2274f9c21f0619a9ae9d8abbc62f274c002f37bc","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyNzRmOWMyMWYwNjE5YTlhZTlkOGFiYmM2MmYyNzRjMDAyZjM3YmM=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-12-25T19:12:35Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-12-25T19:12:35Z"},"message":"Fix test cases adapting to Geronimo Persistence class single/multiple providers behaviors.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893878 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed8fd63bbbd45a7ffe3692e456340b40d45b1449","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed8fd63bbbd45a7ffe3692e456340b40d45b1449"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2274f9c21f0619a9ae9d8abbc62f274c002f37bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2274f9c21f0619a9ae9d8abbc62f274c002f37bc","html_url":"https://github.com/apache/openjpa/commit/2274f9c21f0619a9ae9d8abbc62f274c002f37bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2274f9c21f0619a9ae9d8abbc62f274c002f37bc/comments","author":null,"committer":null,"parents":[{"sha":"5607a959abde3e078e095c47524487f7e3c69891","url":"https://api.github.com/repos/apache/openjpa/commits/5607a959abde3e078e095c47524487f7e3c69891","html_url":"https://github.com/apache/openjpa/commit/5607a959abde3e078e095c47524487f7e3c69891"}],"stats":{"total":50,"additions":34,"deletions":16},"files":[{"sha":"d2363b977d566d628e0875325eb0604a6a023306","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","status":"modified","additions":34,"deletions":16,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/2274f9c21f0619a9ae9d8abbc62f274c002f37bc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","raw_url":"https://github.com/apache/openjpa/raw/2274f9c21f0619a9ae9d8abbc62f274c002f37bc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java?ref=2274f9c21f0619a9ae9d8abbc62f274c002f37bc","patch":"@@ -18,15 +18,17 @@\n  */\n package org.apache.openjpa.conf;\n \n-import java.util.*;\n+import java.util.HashMap;\n \n-import javax.persistence.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n import javax.persistence.PersistenceException;\n \n-import junit.framework.*;\n+import junit.framework.TestCase;\n \n import org.apache.openjpa.lib.util.ParseException;\n-import org.apache.openjpa.persistence.*;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n \n public class TestBadAutoDetachProperty extends TestCase {\n     public void testEmptyValue() {\n@@ -50,12 +52,20 @@ public void testCommaOnlyValue() {\n             emf.close();\n         } catch (PersistenceException e) {\n             Throwable cause = e.getCause();\n-            while (cause instanceof PersistenceException)\n-                cause = ((PersistenceException) cause).getCause();\n-            if (!(cause instanceof ParseException)) {\n-                fail(\"Should have caught PersistenceException whose cause was \"\n-                        + \"a ParseException. \" + \"Instead the cause was: \"\n-                        + cause);\n+            if (cause != null) {\n+                // Geronimo Persistence.class single provider semantics\n+                while (cause instanceof PersistenceException)\n+                    cause = ((PersistenceException) cause).getCause();\n+                if (!(cause instanceof ParseException)) {\n+                    fail(\"Should have caught PersistenceException whose cause was \" + \"a ParseException. \"\n+                            + \"Instead the cause was: \" + cause);\n+                }\n+            } else {\n+                // Geronimo Persistence.class multiple providers semantics\n+                String msg = e.getMessage();\n+                if (msg.indexOf(\"org.apache.openjpa.lib.util.ParseException\") == -1)\n+                    fail(\"Should have caught PersistenceException whose cause was \" + \"a ParseException. \"\n+                            + \"Instead the cause was: \" + cause);\n             }\n         } catch (RuntimeException e) {\n             fail(\"Should have caught a PersistenceException, instead caught: \"\n@@ -74,12 +84,20 @@ public void testEmptyItemValue() {\n             emf.close();\n         } catch (PersistenceException e) {\n             Throwable cause = e.getCause();\n-            while (cause instanceof PersistenceException)\n-                cause = ((PersistenceException) cause).getCause();\n-            if (!(cause instanceof ParseException)) {\n-                fail(\"Should have caught PersistenceException whose cause was \"\n-                        + \"a ParseException. \" + \"Instead the cause was: \"\n-                        + cause);\n+            if (cause != null) {\n+                // Geronimo Persistence.class single provider semantics\n+                while (cause instanceof PersistenceException)\n+                    cause = ((PersistenceException) cause).getCause();\n+                if (!(cause instanceof ParseException)) {\n+                    fail(\"Should have caught PersistenceException whose cause was \" + \"a ParseException. \"\n+                            + \"Instead the cause was: \" + cause);\n+                }\n+            } else {\n+                // Geronimo Persistence.class multiple providers semantics\n+                String msg = e.getMessage();\n+                if (msg.indexOf(\"org.apache.openjpa.lib.util.ParseException\") == -1)\n+                    fail(\"Should have caught PersistenceException whose cause was \" + \"a ParseException. \"\n+                            + \"Instead the cause was: \" + cause);\n             }\n         } catch (RuntimeException e) {\n             fail(\"Should have caught a PersistenceException, instead caught: \""}]}

