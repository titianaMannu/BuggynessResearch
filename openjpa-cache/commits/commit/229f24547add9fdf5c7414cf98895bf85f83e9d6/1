{"sha":"229f24547add9fdf5c7414cf98895bf85f83e9d6","node_id":"MDY6Q29tbWl0MjA2MzY0OjIyOWYyNDU0N2FkZDlmZGY1Yzc0MTRjZjk4ODk1YmY4NWY4M2U5ZDY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-19T21:46:45Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-19T21:46:45Z"},"message":"OPENJPA-174 : Remove legacy code throwing an exception when attempting to \nconstruct an oid instance for an abstract persistent type.  Improve error\nmessage in ApplicationIds when attempting to create a new id instance when the\nid class is abstract.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@520117 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4d64c0dee5b86718038e6d1905e1e5c654595b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/a4d64c0dee5b86718038e6d1905e1e5c654595b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/229f24547add9fdf5c7414cf98895bf85f83e9d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/229f24547add9fdf5c7414cf98895bf85f83e9d6","html_url":"https://github.com/apache/openjpa/commit/229f24547add9fdf5c7414cf98895bf85f83e9d6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/229f24547add9fdf5c7414cf98895bf85f83e9d6/comments","author":null,"committer":null,"parents":[{"sha":"4ce16ed9d3abe5c8d98a9384607aba8648378674","url":"https://api.github.com/repos/apache/openjpa/commits/4ce16ed9d3abe5c8d98a9384607aba8648378674","html_url":"https://github.com/apache/openjpa/commit/4ce16ed9d3abe5c8d98a9384607aba8648378674"}],"stats":{"total":208,"additions":180,"deletions":28},"files":[{"sha":"b91b7a3b71f9317b64a8c0aa46efc117d8654956","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":15,"deletions":25,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=229f24547add9fdf5c7414cf98895bf85f83e9d6","patch":"@@ -1080,37 +1080,27 @@ public Object newObjectId(Class cls, Object val) {\n         try {\n             ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n                 getMetaData(cls, _loader, true);\n-\n-            // delegate to store manager for datastore ids\n-            if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE) {\n+            switch (meta.getIdentityType()) {\n+            case ClassMetaData.ID_DATASTORE:\n+                // delegate to store manager for datastore ids\n                 if (val instanceof String\n                     && ((String) val).startsWith(StateManagerId.STRING_PREFIX))\n                     return new StateManagerId((String) val);\n                 return _store.newDataStoreId(val, meta);\n-            } else if (meta.getIdentityType() == ClassMetaData.ID_UNKNOWN)\n+            case ClassMetaData.ID_APPLICATION:\n+                if (ImplHelper.isAssignable(meta.getObjectIdType(), \n+                    val.getClass())) {\n+                    if (!meta.isOpenJPAIdentity() \n+                        && meta.isObjectIdTypeShared())\n+                        return new ObjectId(cls, val);\n+                    return val;\n+                }\n+                Object[] arr = (val instanceof Object[]) ? (Object[]) val\n+                    : new Object[]{ val };\n+                return ApplicationIds.fromPKValues(arr, meta);\n+            default:\n                 throw new UserException(_loc.get(\"meta-unknownid\", cls));\n-\n-            if (val instanceof String\n-                && !_conf.getCompatibilityInstance().getStrictIdentityValues())\n-            {\n-                // bug #958: section 9.6 of the JDO 1.0.1 specification states\n-                // that a fatal internal exception should be thrown when\n-                // invoking this method on an abstract class\n-                if (Modifier.isAbstract(cls.getModifiers()))\n-                    throw new InternalException(_loc.get(\"objectid-abstract\",\n-                        cls));\n-                return PCRegistry.newObjectId(cls, (String) val);\n-            }\n-            if (ImplHelper.isAssignable(meta.getObjectIdType(), val.getClass()))\n-            {\n-                if (!meta.isOpenJPAIdentity() && meta.isObjectIdTypeShared())\n-                    return new ObjectId(cls, val);\n-                return val;\n             }\n-\n-            Object[] arr = (val instanceof Object[]) ? (Object[]) val\n-                : new Object[]{ val };\n-            return ApplicationIds.fromPKValues(arr, meta);\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (ClassCastException cce) {"},{"sha":"1c6dd431ded813b0e8513b861ef1c569123d2d67","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=229f24547add9fdf5c7414cf98895bf85f83e9d6","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.kernel.ObjectIdStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -41,6 +42,9 @@\n  */\n public class ApplicationIds {\n \n+    private static final Localizer _loc = Localizer.forPackage\n+        (ApplicationIds.class);\n+\n     /**\n      * Return the primary key values for the given object id. The values\n      * will be returned in the same order as the metadata primary key fields.\n@@ -165,6 +169,8 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n \n         // default to reflection\n         Class oidType = meta.getObjectIdType();\n+        if (Modifier.isAbstract(oidType.getModifiers()))\n+            throw new UserException(_loc.get(\"objectid-abstract\", meta));\n         Object copy = null;\n         try {\n             copy = oidType.newInstance();"},{"sha":"8e9058b6446bbc7f8ff90ac6944872114f65d1fa","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=229f24547add9fdf5c7414cf98895bf85f83e9d6","patch":"@@ -180,8 +180,6 @@ dup-load: Cannot load object with id \"{0}\".  Instance \"{1}\" with the same id \\\n \talready exists in the L1 cache.  This can occur when you \\\n \tassign an existing id to a new instance, and before flushing attempt to \\\n \tload the existing instance for that id.\n-objectid-abstract: Cannot create new application identity instance for \\\n-\tabstract class \"{0}\".\n bad-id-value: The given value \"{0}\" cannot be converted into an identity \\\n \tfor \"{2}\".  The value is the wrong type ({1}).\n factory-init: Starting OpenJPA {0}"},{"sha":"35cd9fdb43143ed8f3b7a6237ed82b2e55e25f0e","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/util/localizer.properties?ref=229f24547add9fdf5c7414cf98895bf85f83e9d6","patch":"@@ -16,7 +16,8 @@ failed: Failed:\n nested: Nested:\n null-oid: Null id value encountered while creating datastore identity for \"{0}\".\n unknown-oid: While creating datastore identity for \"{0}\", unknown id value \\\n-\t\"{1}\" of type \"{2}\" encountered.  Cannot convert to org.apache.openjpa.util.Id.\n+\t\"{1}\" of type \"{2}\" encountered.  Cannot convert to \\\n+    org.apache.openjpa.util.Id.\n bad-ser-oid: Encountered object id \"{0}\" in serialized data, but the \\\n \tcorresponding persistent object no longer exists.  Substituting null into \\\n \tthe deserialization stream. \n@@ -67,3 +68,5 @@ dup-oid: A duplicate object id exception has occurred.  Each object you \\\n unique: A unique constraint violation has occurred. \n ref-integrity: A referential integrity constraint has occurred.\n no-store-exts: No store-specific facade found matching \"{0}\".  Using default.\n+objectid-abstract: Cannot create new application identity instance for \\\n+\tabstract class \"{0}\"."},{"sha":"dc51f7ac1dfeb6e9dec9329c243beed5a494ac2d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/AbstractBase.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/AbstractBase.java","raw_url":"https://github.com/apache/openjpa/raw/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/AbstractBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/AbstractBase.java?ref=229f24547add9fdf5c7414cf98895bf85f83e9d6","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public abstract class AbstractBase {\n+\n+    @Id\n+    private String id;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+}\n+"},{"sha":"b683bb0bdeafda53c482e215223f760b53752852","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/ConcreteSubclass.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/ConcreteSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/ConcreteSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/ConcreteSubclass.java?ref=229f24547add9fdf5c7414cf98895bf85f83e9d6","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+\n+@Entity \n+public class ConcreteSubclass \n+    extends AbstractBase {\n+\n+    private int subclassData;\n+\n+    public int getSubclassData() {\n+        return subclassData;\n+    }\n+\n+    public void setSubclassData(int subclassData) {\n+        this.subclassData = subclassData;\n+    }\n+}\n+"},{"sha":"3128ede592fb1ab9068a88eddf4edea16142ca53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","raw_url":"https://github.com/apache/openjpa/raw/229f24547add9fdf5c7414cf98895bf85f83e9d6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java?ref=229f24547add9fdf5c7414cf98895bf85f83e9d6","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test that you can find a concrete subclass record when passing in its\n+ * abstract base class to EntityManager.find().\n+ *\n+ * @author Abe White\n+ */\n+public class TestFindAbstractClass\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        String types = AbstractBase.class.getName() + \";\"\n+            + ConcreteSubclass.class.getName();\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        ConcreteSubclass e = new ConcreteSubclass();\n+        e.setId(\"id\");\n+        e.setSubclassData(1); \n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from ConcreteSubclass\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testFind() {\n+        EntityManager em = emf.createEntityManager();\n+        AbstractBase e = em.find(AbstractBase.class, \"id\");\n+        assertNotNull(e);\n+        assertTrue(e instanceof ConcreteSubclass);\n+        assertEquals(1, ((ConcreteSubclass) e).getSubclassData());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestFindAbstractClass.class);\n+    }\n+}\n+"}]}

