{"sha":"237c092ebb1dd885954e4a93c476ff70554c7bf2","node_id":"MDY6Q29tbWl0MjA2MzY0OjIzN2MwOTJlYmIxZGQ4ODU5NTRlNGE5M2M0NzZmZjcwNTU0YzdiZjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-08T08:59:12Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-08T08:59:12Z"},"message":"OPENJPA-677: Make a judgement whether reading discrimnator value from the result makes sense in a context\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@683916 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4392380f1b3b012380e60a7491de82588d351059","url":"https://api.github.com/repos/apache/openjpa/git/trees/4392380f1b3b012380e60a7491de82588d351059"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/237c092ebb1dd885954e4a93c476ff70554c7bf2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/237c092ebb1dd885954e4a93c476ff70554c7bf2","html_url":"https://github.com/apache/openjpa/commit/237c092ebb1dd885954e4a93c476ff70554c7bf2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/237c092ebb1dd885954e4a93c476ff70554c7bf2/comments","author":null,"committer":null,"parents":[{"sha":"610023adee027bfa7124b3764df0b8fed5e2a672","url":"https://api.github.com/repos/apache/openjpa/commits/610023adee027bfa7124b3764df0b8fed5e2a672","html_url":"https://github.com/apache/openjpa/commit/610023adee027bfa7124b3764df0b8fed5e2a672"}],"stats":{"total":23,"additions":18,"deletions":5},"files":[{"sha":"58bfbb4df843481d7a37c082523d839999d215ef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/237c092ebb1dd885954e4a93c476ff70554c7bf2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/237c092ebb1dd885954e4a93c476ff70554c7bf2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=237c092ebb1dd885954e4a93c476ff70554c7bf2","patch":"@@ -175,14 +175,15 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n         FieldMapping fm;\n         Joinable join;\n         int pkIdx;\n+        boolean canReadDiscriminator = true;\n         for (int i = 0; i < pks.length; i++) {\n             // we know that all pk column join mappings use primary key fields,\n             // cause this mapping uses the oid as its primary key (we recursed\n             // at the beginning of the method to ensure this)\n             join = assertJoinable(pks[i]);\n             fm = getFieldMapping(join.getFieldIndex());\n             pkIdx = fm.getPrimaryKeyIndex();\n-\n+            canReadDiscriminator &= isSelfReference(fk, join.getColumns()); \n             // could have already set value with previous multi-column joinable\n             if (vals[pkIdx] == null) {\n                 res.startDataRequest(fm);\n@@ -197,8 +198,13 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n         // the oid data is loaded by the base type, but if discriminator data\n         // is present, make sure to use it to construct the actual oid instance\n         // so that we get the correct app id class, etc\n+        \n+        // Discriminator refers to the row but the vals[] may hold data that\n+        // refer to another row. Then there is little point reading the disc\n+        // value\n+\n         ClassMapping dcls = cls;\n-        if (subs) {\n+        if (subs && canReadDiscriminator) {\n             res.startDataRequest(cls.getDiscriminator());\n             try {\n                 Class dtype = cls.getDiscriminator().getClass(store, cls, res);\n@@ -217,6 +223,15 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n         }\n         return oid;\n     }\n+    \n+    boolean isSelfReference(ForeignKey fk, Column[] cols) {\n+    \tif (fk == null)\n+    \t\treturn true;\n+    \tfor (Column col : cols)\n+    \t\tif (fk.getColumn(col) != col)\n+    \t\t\treturn false;\n+    \treturn true;\n+    }\n \n     /**\n      * Return the given column value(s) for the given object. The given"},{"sha":"e83db10f806ed1a200ed8824ba93593e14b685df","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/237c092ebb1dd885954e4a93c476ff70554c7bf2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/237c092ebb1dd885954e4a93c476ff70554c7bf2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=237c092ebb1dd885954e4a93c476ff70554c7bf2","patch":"@@ -556,10 +556,8 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         ClassMapping relMapping = field.getTypeMapping();\n         Object oid = null;\n         if (relMapping.isMapped()) {\n-        \tboolean subs = field.getPolymorphic() != ValueMapping.POLY_FALSE \n-        \t\t&& relMapping.getPCSubclasses().length > 0;\n             oid = relMapping.getObjectId(store, res, field.getForeignKey(),\n-                subs, null);\n+            \t\tfield.getPolymorphic() != ValueMapping.POLY_FALSE, null);\n         } else {\n             Column[] cols = field.getColumns();\n             if (relMapping.getIdentityType() == ClassMapping.ID_DATASTORE) {"}]}

