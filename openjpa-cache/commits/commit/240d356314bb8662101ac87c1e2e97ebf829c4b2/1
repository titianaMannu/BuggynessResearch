{"sha":"240d356314bb8662101ac87c1e2e97ebf829c4b2","node_id":"MDY6Q29tbWl0MjA2MzY0OjI0MGQzNTYzMTRiYjg2NjIxMDFhYzg3YzFlMmU5N2ViZjgyOWM0YjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-01-16T22:01:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-01-16T22:01:42Z"},"message":"OPENJPA-495 Populate Ordering/ProjectClauses from JPQL parser to be used for merging multiple ordered results\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@612583 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3e8b4446d2369076407bf730e165a5371a59d0db","url":"https://api.github.com/repos/apache/openjpa/git/trees/3e8b4446d2369076407bf730e165a5371a59d0db"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/240d356314bb8662101ac87c1e2e97ebf829c4b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/240d356314bb8662101ac87c1e2e97ebf829c4b2","html_url":"https://github.com/apache/openjpa/commit/240d356314bb8662101ac87c1e2e97ebf829c4b2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/240d356314bb8662101ac87c1e2e97ebf829c4b2/comments","author":null,"committer":null,"parents":[{"sha":"8464ea75f10492f7f815ccd1c3604dc238f8cfc0","url":"https://api.github.com/repos/apache/openjpa/commits/8464ea75f10492f7f815ccd1c3604dc238f8cfc0","html_url":"https://github.com/apache/openjpa/commit/8464ea75f10492f7f815ccd1c3604dc238f8cfc0"}],"stats":{"total":7,"additions":6,"deletions":1},"files":[{"sha":"dd9520a019d083e6a02effbe41ebccd4d7cddc23","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/240d356314bb8662101ac87c1e2e97ebf829c4b2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/240d356314bb8662101ac87c1e2e97ebf829c4b2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=240d356314bb8662101ac87c1e2e97ebf829c4b2","patch":"@@ -722,6 +722,8 @@ public Object getOrderingValue(StoreQuery q, Object[] params,\n                     _inMemOrdering = _parser.eval(_exps[0].orderingClauses,\n                         (ExpressionStoreQuery) q, factory, _meta);\n                 }\n+                if (_inMemOrdering == null)\n+                    _inMemOrdering = _exps[0].ordering;\n             }\n \n             // use the parsed ordering expression to extract the ordering value"},{"sha":"acb939cd26a6fee57e50fb938d7a46c220070f3a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/240d356314bb8662101ac87c1e2e97ebf829c4b2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/240d356314bb8662101ac87c1e2e97ebf829c4b2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=240d356314bb8662101ac87c1e2e97ebf829c4b2","patch":"@@ -319,6 +319,7 @@ private Expression assignProjections(JPQLNode parametersNode,\n             JPQLNode node = onlyChild(parent);\n             Value proj = getValue(node);\n             exps.projections[i] = proj;\n+            exps.projectionClauses[i] = assemble(node);\n             exps.projectionAliases[i] = nextAlias();\n         }\n         return exp;\n@@ -370,10 +371,12 @@ private void evalOrderingClauses(QueryExpressions exps) {\n         if (orderby != null) {\n             int ordercount = orderby.getChildCount();\n             exps.ordering = new Value[ordercount];\n+            exps.orderingClauses = new String[ordercount];\n             exps.ascending = new boolean[ordercount];\n             for (int i = 0; i < ordercount; i++) {\n                 JPQLNode node = orderby.getChild(i);\n                 exps.ordering[i] = getValue(firstChild(node));\n+                exps.orderingClauses[i] = assemble(firstChild(node));\n                 // ommission of ASC/DESC token implies ascending\n                 exps.ascending[i] = node.getChildCount() <= 1 ||\n                     lastChild(node).id == JJTASCENDING ? true : false;\n@@ -1374,7 +1377,7 @@ private Path newPath(Value val, ClassMetaData meta) {\n     private Value getValue(JPQLNode node, int handleVar) {\n         Value val = (Value) eval(node);\n \n-        // determind how to evauate a variabe\n+        // determined how to evaluate a variable\n         if (!val.isVariable())\n             return val;\n         else if (handleVar == VAR_PATH && !(val instanceof Path))"}]}

