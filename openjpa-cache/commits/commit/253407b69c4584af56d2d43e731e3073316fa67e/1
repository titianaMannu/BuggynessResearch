{"sha":"253407b69c4584af56d2d43e731e3073316fa67e","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1MzQwN2I2OWM0NTg0YWY1NmQyZDQzZTczMWUzMDczMzE2ZmE2N2U=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-09-06T13:52:35Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-09-06T13:52:35Z"},"message":"Refatoring user facing classes (FetchPlan, Generator, Extent, StoreCache) into interfaces.\nAdding hooks for extended EntityManagerFactory and ConfigurationProvider.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@440714 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47108d956fc090fea4a9d27a4fdb7e128aa9dc3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/47108d956fc090fea4a9d27a4fdb7e128aa9dc3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/253407b69c4584af56d2d43e731e3073316fa67e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/253407b69c4584af56d2d43e731e3073316fa67e","html_url":"https://github.com/apache/openjpa/commit/253407b69c4584af56d2d43e731e3073316fa67e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/253407b69c4584af56d2d43e731e3073316fa67e/comments","author":null,"committer":null,"parents":[{"sha":"b34fec7e38ddfec969f1573711939be648e7d04b","url":"https://api.github.com/repos/apache/openjpa/commits/b34fec7e38ddfec969f1573711939be648e7d04b","html_url":"https://github.com/apache/openjpa/commit/b34fec7e38ddfec969f1573711939be648e7d04b"}],"stats":{"total":1706,"additions":1157,"deletions":549},"files":[{"sha":"498f6b30f26e59be65f515cd6a636c8b6c2b9109","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -49,6 +49,27 @@ public Class getImplementation(Class facadeType, Class storeType) {\n         }    \r\n         return (Class) _impls.get(facadeType);\r\n     }\r\n+    \r\n+    /**\r\n+     * Return the implementation for the given facade and store. If no \r\n+     * registered implementation is found then returns the given default type\r\n+     * provided it the facade type is assignable from the deafult type.\r\n+     *\r\n+     * @param facadeType the facade interface\r\n+     * @param storeType the store's \r\n+     * {@link org.apache.openjpa.kernel.StoreManager} type, or null for generic\r\n+     * @param implType the registered implementor\r\n+     * @param defaultType class if no registered implementation is available.\r\n+     */\r\n+    public Class getImplementation(Class facadeType, Class storeType, \r\n+    \tClass defaultType) {\r\n+    \tClass result = getImplementation(facadeType, storeType);\r\n+    \tif (result == null)\r\n+    \t\tresult = defaultType;\r\n+    \tif (facadeType == null || !facadeType.isAssignableFrom(result))\r\n+    \t\tthrow new InternalException();\r\n+    \treturn result;\r\n+    }\r\n \r\n     /**\r\n      * Lookup key for facade+store hash.\r"},{"sha":"6a4cea6bb794d12247a17afa9291194b1962aa53","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","status":"modified","additions":16,"deletions":63,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -28,82 +28,35 @@\n /**\n  * JDBC extensions to the fetch plan.\n  *\n- * @since 0.4.0\n+ * @since 0.4.1\n  * @author Abe White\n+ * @author Pinaki Poddar\n  * @published\n  */\n-public class JDBCFetchPlan\n-    extends FetchPlan\n-    implements EagerFetchModes, LRSSizes, JoinSyntaxes {\n+public interface JDBCFetchPlan\n+    extends FetchPlan, EagerFetchModes, LRSSizes, JoinSyntaxes {\n \n-    private DelegatingJDBCFetchConfiguration _fetch;\n+    public int getEagerFetchMode();\n \n-    /**\n-     * Constructor; supply delegate.\n-     */\n-    public JDBCFetchPlan(FetchConfiguration fetch) {\n-        super(fetch);\n-    }\n+    public JDBCFetchPlan setEagerFetchMode(int mode);\n \n-    @Override\n-    protected DelegatingFetchConfiguration newDelegatingFetchConfiguration\n-        (FetchConfiguration fetch) {\n-        _fetch = new DelegatingJDBCFetchConfiguration((JDBCFetchConfiguration)\n-            fetch, PersistenceExceptions.TRANSLATOR);\n-        return _fetch;\n-    }\n+    public int getSubclassFetchMode();\n \n-    public int getEagerFetchMode() {\n-        return _fetch.getEagerFetchMode();\n-    }\n+    public JDBCFetchPlan setSubclassFetchMode(int mode);\n \n-    public JDBCFetchPlan setEagerFetchMode(int mode) {\n-        _fetch.setEagerFetchMode(mode);\n-        return this;\n-    }\n+    public int getResultSetType();\n \n-    public int getSubclassFetchMode() {\n-        return _fetch.getSubclassFetchMode();\n-    }\n+    public JDBCFetchPlan setResultSetType(int type);\n \n-    public JDBCFetchPlan setSubclassFetchMode(int mode) {\n-        _fetch.setSubclassFetchMode(mode);\n-        return this;\n-    }\n+    public int getFetchDirection();\n \n-    public int getResultSetType() {\n-        return _fetch.getResultSetType();\n-    }\n+    public JDBCFetchPlan setFetchDirection(int direction);\n \n-    public JDBCFetchPlan setResultSetType(int type) {\n-        _fetch.setResultSetType(type);\n-        return this;\n-    }\n+    public int getLRSSize();\n \n-    public int getFetchDirection() {\n-        return _fetch.getFetchDirection();\n-    }\n+    public JDBCFetchPlan setLRSSize(int lrsSize);\n \n-    public JDBCFetchPlan setFetchDirection(int direction) {\n-        _fetch.setFetchDirection(direction);\n-        return this;\n-    }\n+    public int getJoinSyntax();\n \n-    public int getLRSSize() {\n-        return _fetch.getLRSSize();\n-    }\n-\n-    public JDBCFetchPlan setLRSSize(int lrsSize) {\n-        _fetch.setLRSSize(lrsSize);\n-        return this;\n-    }\n-\n-    public int getJoinSyntax() {\n-        return _fetch.getJoinSyntax();\n-    }\n-\n-    public JDBCFetchPlan setJoinSyntax(int syntax) {\n-        _fetch.setJoinSyntax(syntax);\n-        return this;\n-    }\n+    public JDBCFetchPlan setJoinSyntax(int syntax);\n }"},{"sha":"9b7733585fa1ff09961cac40aea0a3c47f4bcd66","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import org.apache.openjpa.jdbc.kernel.DelegatingJDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.LRSSizes;\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n+import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.FetchPlanImpl;\n+import org.apache.openjpa.persistence.PersistenceExceptions;\n+\n+/**\n+ * JDBC extensions to the fetch plan.\n+ *\n+ * @since 0.4.0\n+ * @author Abe White\n+ * @published\n+ */\n+public class JDBCFetchPlanImpl\n+    extends FetchPlanImpl\n+    implements JDBCFetchPlan {\n+\n+    private DelegatingJDBCFetchConfiguration _fetch;\n+\n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public JDBCFetchPlanImpl(FetchConfiguration fetch) {\n+        super(fetch);\n+    }\n+\n+    @Override\n+    protected DelegatingFetchConfiguration newDelegatingFetchConfiguration\n+        (FetchConfiguration fetch) {\n+        _fetch = new DelegatingJDBCFetchConfiguration((JDBCFetchConfiguration)\n+            fetch, PersistenceExceptions.TRANSLATOR);\n+        return _fetch;\n+    }\n+\n+    public int getEagerFetchMode() {\n+        return _fetch.getEagerFetchMode();\n+    }\n+\n+    public JDBCFetchPlanImpl setEagerFetchMode(int mode) {\n+        _fetch.setEagerFetchMode(mode);\n+        return this;\n+    }\n+\n+    public int getSubclassFetchMode() {\n+        return _fetch.getSubclassFetchMode();\n+    }\n+\n+    public JDBCFetchPlanImpl setSubclassFetchMode(int mode) {\n+        _fetch.setSubclassFetchMode(mode);\n+        return this;\n+    }\n+\n+    public int getResultSetType() {\n+        return _fetch.getResultSetType();\n+    }\n+\n+    public JDBCFetchPlanImpl setResultSetType(int type) {\n+        _fetch.setResultSetType(type);\n+        return this;\n+    }\n+\n+    public int getFetchDirection() {\n+        return _fetch.getFetchDirection();\n+    }\n+\n+    public JDBCFetchPlanImpl setFetchDirection(int direction) {\n+        _fetch.setFetchDirection(direction);\n+        return this;\n+    }\n+\n+    public int getLRSSize() {\n+        return _fetch.getLRSSize();\n+    }\n+\n+    public JDBCFetchPlanImpl setLRSSize(int lrsSize) {\n+        _fetch.setLRSSize(lrsSize);\n+        return this;\n+    }\n+\n+    public int getJoinSyntax() {\n+        return _fetch.getJoinSyntax();\n+    }\n+\n+    public JDBCFetchPlanImpl setJoinSyntax(int syntax) {\n+        _fetch.setJoinSyntax(syntax);\n+        return this;\n+    }\n+}"},{"sha":"e9e4bfe256b99187def4cccab501d04946a994c7","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -41,7 +41,7 @@ public void beforeConfigurationConstruct(ConfigurationProvider cp) {\n \n     public void beforeConfigurationLoad(OpenJPAConfiguration c) {\n         c.getStoreFacadeTypeRegistry().registerImplementation(FetchPlan.class, \n-            JDBCStoreManager.class, JDBCFetchPlan.class);\n+            JDBCStoreManager.class, JDBCFetchPlanImpl.class);\n         if (!(c instanceof JDBCConfigurationImpl))\n             return;\n "},{"sha":"326f3840e33abc76c02c9592481f75a9643c6867","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -93,9 +93,9 @@ public boolean load(PersistenceUnitInfo pinfo, Map m)\n             return false;\n         String providerName = pinfo.getPersistenceProviderClassName();\n         if (!StringUtils.isEmpty(providerName)\n-            && !PersistenceProviderImpl.class.getName().equals(providerName))\n+            && !getPersistenceProviderName().equals(providerName))\n             return false;\n-\n+        \n         addProperties(PersistenceUnitInfoImpl.toOpenJPAProperties(pinfo));\n         if (m != null)\n             addProperties(m);\n@@ -168,7 +168,7 @@ public boolean loadDefaults(ClassLoader loader)\n      * @return {@link Boolean#TRUE} if the resource was loaded, null if it\n      * does not exist, or {@link Boolean#FALSE} if it is not for OpenJPA\n      */\n-    private Boolean load(String rsrc, String name, Map m, ClassLoader loader,\n+    protected Boolean load(String rsrc, String name, Map m, ClassLoader loader,\n         boolean explicit)\n         throws IOException {\n         if (loader == null)\n@@ -227,7 +227,7 @@ private PersistenceUnitInfo findUnit(List<PersistenceUnitInfo> pinfos,\n             }\n \n             if (StringUtils.isEmpty(pinfo.getPersistenceProviderClassName())\n-                || PersistenceProviderImpl.class.getName().equals(pinfo.\n+                || getPersistenceProviderName().equals(pinfo.\n                     getPersistenceProviderClassName())) {\n                 // if no name given and found unnamed unit, return it.  \n                 // otherwise record as default unit unless we find a \n@@ -276,6 +276,21 @@ public void setInto(Configuration conf) {\n             log.trace(_loc.get(\"conf-load\", _source, getProperties()));\n     }\n \n+    /**\n+     * Gets the concrete class used as Persistence Provider. \n+     * Used to detect whether this receiver should load the configuration.\n+     * This receiver will load only if the provider name in the resource\n+     * matches the provider name returned by this method. \n+     * <B>Note</B>: This is a tentative hook for backward-compatibility work\n+     * and would be replaced/removed once ProductDerivation-based extension\n+     * framework is available.\n+     *  \n+     * @return\n+     */\n+    protected String getPersistenceProviderName() {\n+    \treturn PersistenceProviderImpl.class.getName();\n+    }\n+    \n     /**\n      * SAX handler capable of parsing an JPA persistence.xml file.\n      * Package-protected for testing."},{"sha":"5a27ba05ce44196da536ebeccd7c2b2b81f35f8e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -94,7 +94,7 @@ public StoreCache getStoreCache() {\n         try {\n             if (_cache == null) {\n                 OpenJPAConfiguration conf = _factory.getConfiguration();\n-                _cache = new StoreCache(this,\n+                _cache = new StoreCacheImpl(this,\n                     conf.getDataCacheManagerInstance().getSystemDataCache());\n             }\n             return _cache;\n@@ -104,15 +104,15 @@ public StoreCache getStoreCache() {\n     }\n \n     public StoreCache getStoreCache(String cacheName) {\n-        return new StoreCache(this, _factory.getConfiguration().\n+        return new StoreCacheImpl(this, _factory.getConfiguration().\n             getDataCacheManagerInstance().getDataCache(cacheName));\n     }\n \n     public QueryResultCache getQueryResultCache() {\n         _factory.lock();\n         try {\n             if (_queryCache == null)\n-                _queryCache = new QueryResultCache(_factory.getConfiguration().\n+                _queryCache = new QueryResultCacheImpl(_factory.getConfiguration().\n                     getDataCacheManagerInstance().getSystemQueryCache());\n             return _queryCache;\n         } finally {\n@@ -274,9 +274,8 @@ FetchPlan toFetchPlan(Broker broker, FetchConfiguration fetch) {\n                     getStoreManager().getInnermostDelegate().getClass();\n                 Class cls = _factory.getConfiguration().\n                     getStoreFacadeTypeRegistry().\n-                    getImplementation(FetchPlan.class, storeType);\n-                if (cls == null)\n-                    cls = FetchPlan.class;\n+                    getImplementation(FetchPlan.class, storeType, \n+                    \t\tFetchPlanImpl.class);\n                 _plan = cls.getConstructor(FetchConfiguration.class);\n             }\n             return _plan.newInstance(fetch);"},{"sha":"a6bbef2adbcf464e4d0c20a609af6de8b48ae5a5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -614,7 +614,7 @@ public Generator getNamedGenerator(String name) {\n                 getMetaDataRepositoryInstance().getSequenceMetaData(name,\n                 _broker.getClassLoader(), true);\n             Seq seq = meta.getInstance(_broker.getClassLoader());\n-            return new Generator(seq, name, _broker, null);\n+            return new GeneratorImpl(seq, name, _broker, null);\n         } catch (RuntimeException re) {\n             throw PersistenceExceptions.toPersistenceException(re);\n         }\n@@ -626,7 +626,7 @@ public Generator getIdGenerator(Class forClass) {\n                 getMetaDataRepositoryInstance().getMetaData(forClass,\n                 _broker.getClassLoader(), true);\n             Seq seq = _broker.getIdentitySequence(meta);\n-            return (seq == null) ? null : new Generator(seq, null, _broker,\n+            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\n                 meta);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n@@ -644,15 +644,15 @@ public Generator getFieldGenerator(Class forClass, String fieldName) {\n                     forClass, fieldName), null, null, false);\n \n             Seq seq = _broker.getValueSequence(fmd);\n-            return (seq == null) ? null : new Generator(seq, null, _broker,\n+            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\n                 meta);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n     }\n \n     public <T> Extent<T> createExtent(Class<T> cls, boolean subclasses) {\n-        return new Extent<T>(this, _broker.newExtent(cls, subclasses));\n+        return new ExtentImpl<T>(this, _broker.newExtent(cls, subclasses));\n     }\n \n     public OpenJPAQuery createQuery(String query) {"},{"sha":"9546fa23b833cdf214ce60f39e0cbc99f3522085","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","status":"modified","additions":13,"deletions":70,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -24,113 +24,56 @@\n  * An extent is a logical view of all instances of a class.\n  *\n  * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.0\n  * @published\n  */\n-public class Extent<T>\n-    implements Iterable {\n+public interface Extent<T>\n+    extends Iterable<T> {\n \n-    private final EntityManagerImpl _em;\n-    private final DelegatingExtent _extent;\n-    private FetchPlan _fetch = null;\n-\n-    /**\n-     * Constructor; supply delegate.\n-     */\n-    public Extent(EntityManagerImpl em,\n-        org.apache.openjpa.kernel.Extent extent) {\n-        _em = em;\n-        _extent = new DelegatingExtent(extent,\n-            PersistenceExceptions.getRollbackTranslator(em));\n-    }\n \n     /**\n      * Delegate.\n      */\n-    public org.apache.openjpa.kernel.Extent getDelegate() {\n-        return _extent.getDelegate();\n-    }\n+    public org.apache.openjpa.kernel.Extent getDelegate();\n \n     /**\n      * The extent's element type.\n      */\n-    public Class<T> getElementClass() {\n-        return _extent.getElementType();\n-    }\n+    public Class<T> getElementClass();\n \n     /**\n      * Whether the extent includes subclasses.\n      */\n-    public boolean hasSubclasses() {\n-        return _extent.hasSubclasses();\n-    }\n+    public boolean hasSubclasses();\n \n     /**\n      * The owning entity manager.\n      */\n-    public OpenJPAEntityManager getEntityManager() {\n-        return _em;\n-    }\n+    public OpenJPAEntityManager getEntityManager();\n \n     /**\n      * Fetch configuration for controlling how iterated objects are loaded.\n      */\n-    public FetchPlan getFetchPlan() {\n-        _extent.lock();\n-        try {\n-            if (_fetch == null)\n-                _fetch = ((EntityManagerFactoryImpl) _em.\n-                    getEntityManagerFactory()).toFetchPlan(_extent.getBroker(),\n-                    _extent.getFetchConfiguration());\n-            return _fetch;\n-        } finally {\n-            _extent.unlock();\n-        }\n-    }\n+    public FetchPlan getFetchPlan();\n \n     /**\n      * Whether the extent sees inserts and deletes in the current transaction.\n      */\n-    public boolean getIgnoreChanges() {\n-        return _extent.getIgnoreChanges();\n-    }\n+    public boolean getIgnoreChanges();\n \n     /**\n      * Whether the extent sees inserts and deletes in the current transaction.\n      */\n-    public void setIgnoreChanges(boolean ignoreChanges) {\n-        _extent.setIgnoreChanges(ignoreChanges);\n-    }\n+    public void setIgnoreChanges(boolean ignoreChanges);\n \n     /**\n      * List the extent contents.\n      */\n-    public List<T> list() {\n-        return _extent.list();\n-    }\n-\n-    /**\n-     * Iterator over contents.\n-     */\n-    public Iterator<T> iterator() {\n-        return _extent.iterator();\n-    }\n+    public List<T> list();\n \n     /**\n      * Close all open iterators that are consuming database resources.\n      */\n-    public void closeAll() {\n-        _extent.closeAll();\n-    }\n-\n-    public int hashCode() {\n-        return _extent.hashCode();\n-    }\n-\n-    public boolean equals(Object other) {\n-        if (other == this)\n-            return true;\n-        if (!(other instanceof Extent))\n-            return false;\n-        return _extent.equals(((Extent) other)._extent);\n-\t}\n+    public void closeAll();\n }"},{"sha":"e9fc9d87f8c517949278b36187b5642fa4927397","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.openjpa.kernel.DelegatingExtent;\n+\n+/**\n+ * An extent is a logical view of all instances of a class.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class ExtentImpl<T>\n+    implements Extent<T> {\n+\n+    private final EntityManagerImpl _em;\n+    private final DelegatingExtent _extent;\n+    private FetchPlan _fetch = null;\n+\n+\n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public ExtentImpl(EntityManagerImpl em,\n+        org.apache.openjpa.kernel.Extent extent) {\n+        _em = em;\n+        _extent = new DelegatingExtent(extent,\n+            PersistenceExceptions.getRollbackTranslator(em));\n+    }\n+\n+    public org.apache.openjpa.kernel.Extent getDelegate() {\n+        return _extent.getDelegate();\n+    }\n+\n+    public Class<T> getElementClass() {\n+        return _extent.getElementType();\n+    }\n+\n+    public boolean hasSubclasses() {\n+        return _extent.hasSubclasses();\n+    }\n+\n+    public OpenJPAEntityManager getEntityManager() {\n+        return _em;\n+    }\n+\n+    public FetchPlan getFetchPlan() {\n+        _extent.lock();\n+        try {\n+            if (_fetch == null)\n+                _fetch = ((EntityManagerFactoryImpl) _em.\n+                    getEntityManagerFactory()).toFetchPlan(_extent.getBroker(),\n+                    _extent.getFetchConfiguration());\n+            return _fetch;\n+        } finally {\n+            _extent.unlock();\n+        }\n+    }\n+\n+    public boolean getIgnoreChanges() {\n+        return _extent.getIgnoreChanges();\n+    }\n+\n+    public void setIgnoreChanges(boolean ignoreChanges) {\n+        _extent.setIgnoreChanges(ignoreChanges);\n+    }\n+\n+    public List<T> list() {\n+        return _extent.list();\n+    }\n+\n+    public Iterator<T> iterator() {\n+        return _extent.iterator();\n+    }\n+\n+    public void closeAll() {\n+        _extent.closeAll();\n+    }\n+\n+    public int hashCode() {\n+        return _extent.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof ExtentImpl))\n+            return false;\n+        return _extent.equals(((ExtentImpl) other)._extent);\n+\t}\n+}"},{"sha":"aac587d577ae2ed1cc61a503558c64627ef10167","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","status":"modified","additions":41,"deletions":182,"changes":223,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -30,10 +30,11 @@\n  * configuration and other aspects of data loading.\n  *\n  * @author Abe White\n- * @since 0.4.0\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n  * @published\n  */\n-public class FetchPlan {\n+public interface FetchPlan {\n \n     /**\n      * Fetch group representing all fields.\n@@ -55,64 +56,35 @@\n      */\n     public static final int DEFAULT = FetchConfiguration.DEFAULT;\n \n-    private final DelegatingFetchConfiguration _fetch;\n-\n-    /**\n-     * Constructor; supply delegate.\n-     */\n-    public FetchPlan(FetchConfiguration fetch) {\n-        _fetch = newDelegatingFetchConfiguration(fetch);\n-    }\n-\n-    /**\n-     * Create a new exception-translating delegating fetch configuration.\n-     */\n-    protected DelegatingFetchConfiguration newDelegatingFetchConfiguration\n-        (FetchConfiguration fetch) {\n-        return new DelegatingFetchConfiguration(fetch,\n-            PersistenceExceptions.TRANSLATOR);\n-    }\n \n     /**\n      * Delegate.\n      */\n-    public FetchConfiguration getDelegate() {\n-        return _fetch.getDelegate();\n-    }\n+    public FetchConfiguration getDelegate();\n \n     /**\n      * The maximum fetch depth when loading an object.\n      */\n-    public int getMaxFetchDepth() {\n-        return _fetch.getMaxFetchDepth();\n-    }\n+    public int getMaxFetchDepth();\n \n     /**\n      * The maximum fetch depth when loading an object.\n      */\n-    public FetchPlan setMaxFetchDepth(int depth) {\n-        _fetch.setMaxFetchDepth(depth);\n-        return this;\n-    }\n+    public FetchPlan setMaxFetchDepth(int depth);\n \n     /**\n      * Return the fetch batch size for large result set support.\n      * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n      * that this property will be ignored under some data stores.\n      */\n-    public int getFetchBatchSize() {\n-        return _fetch.getFetchBatchSize();\n-    }\n+    public int getFetchBatchSize();\n \n     /**\n      * Set the fetch batch size for large result set support.\n      * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n      * that this property will be ignored under some data stores.\n      */\n-    public FetchPlan setFetchBatchSize(int fetchBatchSize) {\n-        _fetch.setFetchBatchSize(fetchBatchSize);\n-        return this;\n-    }\n+    public FetchPlan setFetchBatchSize(int fetchBatchSize);\n \n     /**\n      * Return whether or not query caching is enabled. If this returns\n@@ -121,304 +93,191 @@ public FetchPlan setFetchBatchSize(int fetchBatchSize) {\n      * returns <code>false</code>, query caching will not be used\n      * even if the datacache plugin is installed.\n      */\n-    public boolean getQueryResultCache() {\n-        return _fetch.getQueryCache();\n-    }\n+    public boolean getQueryResultCache();\n \n     /**\n      * Control whether or not query caching is enabled. This has no effect\n      * if the datacache plugin is not installed, or if the query cache size\n      * is set to zero.\n      */\n-    public FetchPlan setQueryResultCache(boolean cache) {\n-        _fetch.setQueryCache(cache);\n-        return this;\n-    }\n+    public FetchPlan setQueryResultCache(boolean cache);\n \n     /**\n      * Returns the names of the fetch groups that this component will use\n      * when loading objects. Defaults to the\n      * <code>org.apache.openjpa.FetchGroups</code> setting.\n      */\n-    public Collection<String> getFetchGroups() {\n-        return _fetch.getFetchGroups();\n-    }\n+    public Collection<String> getFetchGroups();\n \n     /**\n      * Adds <code>group</code> to the set of fetch group to\n      * use when loading objects.\n      */\n-    public FetchPlan addFetchGroup(String group) {\n-        _fetch.addFetchGroup(group);\n-        return this;\n-    }\n+    public FetchPlan addFetchGroup(String group);\n \n     /**\n      * Adds <code>groups</code> to the set of fetch group names to\n      * use when loading objects.\n      */\n-    public FetchPlan addFetchGroups(String... groups) {\n-        return addFetchGroups(Arrays.asList(groups));\n-    }\n-\n+    public FetchPlan addFetchGroups(String... groups);\n     /**\n      * Adds <code>groups</code> to the set of fetch group names to\n      * use when loading objects.\n      */\n-    public FetchPlan addFetchGroups(Collection groups) {\n-        _fetch.addFetchGroups(groups);\n-        return this;\n-    }\n+    public FetchPlan addFetchGroups(Collection groups);\n \n     /**\n      * Remove the given fetch group.\n      */\n-    public FetchPlan removeFetchGroup(String group) {\n-        _fetch.removeFetchGroup(group);\n-        return this;\n-    }\n+    public FetchPlan removeFetchGroup(String group);\n \n     /**\n      * Removes <code>groups</code> from the set of fetch group names\n      * to use when loading objects.\n      */\n-    public FetchPlan removeFetchGroups(String... groups) {\n-        return removeFetchGroups(Arrays.asList(groups));\n-    }\n+    public FetchPlan removeFetchGroups(String... groups);\n \n     /**\n      * Removes <code>groups</code> from the set of fetch group names\n      * to use when loading objects.\n      */\n-    public FetchPlan removeFetchGroups(Collection groups) {\n-        _fetch.removeFetchGroups(groups);\n-        return this;\n-    }\n+    public FetchPlan removeFetchGroups(Collection groups);\n \n     /**\n      * Clears the set of fetch group names to use wen loading\n      * data. After this operation is invoked, only those fields in\n      * the default fetch group (and any requested field) will be\n      * loaded when loading an object.\n      */\n-    public FetchPlan clearFetchGroups() {\n-        _fetch.clearFetchGroups();\n-        return this;\n-    }\n+    public FetchPlan clearFetchGroups();\n \n     /**\n      * Resets the set of fetch groups to the list in the global configuration.\n      */\n-    public FetchPlan resetFetchGroups() {\n-        _fetch.resetFetchGroups();\n-        return this;\n-    }\n+    public FetchPlan resetFetchGroups();\n \n     /**\n      * Returns the fully qualified names of the fields that this component\n      * will use when loading objects. Defaults to the empty set.\n      */\n-    public Collection<String> getFields() {\n-        return (Collection<String>) _fetch.getFields();\n-    }\n+    public Collection<String> getFields();\n \n     /**\n      * Return true if the given field has been added.\n      */\n-    public boolean hasField(String field) {\n-        return _fetch.hasField(field);\n-    }\n+    public boolean hasField(String field);\n \n     /**\n      * Return true if the given field has been added.\n      */\n-    public boolean hasField(Class cls, String field) {\n-        return hasField(toFieldName(cls, field));\n-    }\n+    public boolean hasField(Class cls, String field);\n \n     /**\n      * Adds <code>field</code> to the set of fully-qualified field names to\n      * use when loading objects.\n      */\n-    public FetchPlan addField(String field) {\n-        _fetch.addField(field);\n-        return this;\n-    }\n+    public FetchPlan addField(String field);\n \n     /**\n      * Adds <code>field</code> to the set of field names to\n      * use when loading objects.\n      */\n-    public FetchPlan addField(Class cls, String field) {\n-        return addField(toFieldName(cls, field));\n-    }\n+    public FetchPlan addField(Class cls, String field);\n \n     /**\n      * Adds <code>fields</code> to the set of fully-qualified field names to\n      * use when loading objects.\n      */\n-    public FetchPlan addFields(String... fields) {\n-        return addFields(Arrays.asList(fields));\n-    }\n+    public FetchPlan addFields(String... fields);\n \n     /**\n      * Adds <code>fields</code> to the set of field names to\n      * use when loading objects.\n      */\n-    public FetchPlan addFields(Class cls, String... fields) {\n-        return addFields(cls, Arrays.asList(fields));\n-    }\n+    public FetchPlan addFields(Class cls, String... fields);\n \n     /**\n      * Adds <code>fields</code> to the set of fully-qualified field names to\n      * use when loading objects.\n      */\n-    public FetchPlan addFields(Collection fields) {\n-        _fetch.addFields(fields);\n-        return this;\n-    }\n+    public FetchPlan addFields(Collection fields);\n \n     /**\n      * Adds <code>fields</code> to the set of field names to\n      * use when loading objects.\n      */\n-    public FetchPlan addFields(Class cls, Collection fields) {\n-        return addFields(toFieldNames(cls, fields));\n-    }\n+    public FetchPlan addFields(Class cls, Collection fields);\n \n     /**\n      * Remove the given fully-qualified field.\n      */\n-    public FetchPlan removeField(String field) {\n-        _fetch.removeField(field);\n-        return this;\n-    }\n+    public FetchPlan removeField(String field);\n \n     /**\n      * Remove the given field.\n      */\n-    public FetchPlan removeField(Class cls, String field) {\n-        return removeField(toFieldName(cls, field));\n-    }\n+    public FetchPlan removeField(Class cls, String field);\n \n     /**\n      * Removes <code>fields</code> from the set of fully-qualified field names\n      * to use when loading objects.\n      */\n-    public FetchPlan removeFields(String... fields) {\n-        return removeFields(Arrays.asList(fields));\n-    }\n+    public FetchPlan removeFields(String... fields);\n \n     /**\n      * Removes <code>fields</code> from the set of field names\n      * to use when loading objects.\n      */\n-    public FetchPlan removeFields(Class cls, String... fields) {\n-        return removeFields(cls, Arrays.asList(fields));\n-    }\n+    public FetchPlan removeFields(Class cls, String... fields);\n \n     /**\n      * Removes <code>fields</code> from the set of fully-qualified field names\n      * to use when loading objects.\n      */\n-    public FetchPlan removeFields(Collection fields) {\n-        _fetch.removeFields(fields);\n-        return this;\n-    }\n+    public FetchPlan removeFields(Collection fields);\n \n     /**\n      * Removes <code>fields</code> from the set of field names\n      * to use when loading objects.\n      */\n-    public FetchPlan removeFields(Class cls, Collection fields) {\n-        return removeFields(toFieldNames(cls, fields));\n-    }\n+    public FetchPlan removeFields(Class cls, Collection fields);\n \n     /**\n      * Clears the set of field names to use wen loading\n      * data. After this operation is invoked, only those fields in\n      * the configured fetch groups will be loaded when loading an object.\n      */\n-    public FetchPlan clearFields() {\n-        _fetch.clearFields();\n-        return this;\n-    }\n-\n-    /**\n-     * Combine the class and field to a fully-qualified field name.\n-     */\n-    private static String toFieldName(Class cls, String field) {\n-        return cls.getName() + \".\" + field;\n-    }\n-\n-    /**\n-     * Combine the class and fields to fully-qualified field names.\n-     */\n-    private static Collection toFieldNames(Class cls, Collection fields) {\n-        if (fields.isEmpty())\n-            return fields;\n-        Collection names = new ArrayList(fields);\n-        for (Iterator itr = fields.iterator(); itr.hasNext();)\n-            names.add(toFieldName(cls, (String) itr.next()));\n-        return names;\n-    }\n+    public FetchPlan clearFields();\n \n     /**\n      * The number of milliseconds to wait for an object lock, or -1 for no\n      * limit.\n      */\n-    public int getLockTimeout() {\n-        return _fetch.getLockTimeout();\n-    }\n+    public int getLockTimeout();\n \n     /**\n      * The number of milliseconds to wait for an object lock, or -1 for no\n      * limit.\n      */\n-    public FetchPlan setLockTimeout(int timeout) {\n-        _fetch.setLockTimeout(timeout);\n-        return this;\n-    }\n+    public FetchPlan setLockTimeout(int timeout);\n \n     /**\n      * The lock level to use for locking loaded objects.\n      */\n-    public LockModeType getReadLockMode() {\n-        return EntityManagerImpl.fromLockLevel(_fetch.getReadLockLevel());\n-    }\n+    public LockModeType getReadLockMode();\n \n     /**\n      * The lock level to use for locking loaded objects.\n      */\n-    public FetchPlan setReadLockMode(LockModeType mode) {\n-        _fetch.setReadLockLevel(EntityManagerImpl.toLockLevel(mode));\n-        return this;\n-    }\n+    public FetchPlan setReadLockMode(LockModeType mode);\n \n     /**\n      * The lock level to use for locking dirtied objects.\n      */\n-    public LockModeType getWriteLockMode() {\n-        return EntityManagerImpl.fromLockLevel(_fetch.getWriteLockLevel());\n-    }\n+    public LockModeType getWriteLockMode();\n \n     /**\n      * The lock level to use for locking dirtied objects.\n      */\n-    public FetchPlan setWriteLockMode(LockModeType mode) {\n-        _fetch.setWriteLockLevel(EntityManagerImpl.toLockLevel(mode));\n-        return this;\n-    }\n-\n-    public int hashCode() {\n-        return _fetch.hashCode();\n-    }\n-\n-    public boolean equals(Object other) {\n-        if (other == this)\n-            return true;\n-        if (!(other instanceof FetchPlan))\n-            return false;\n-        return _fetch.equals(((FetchPlan) other)._fetch);\n-    }\n+    public FetchPlan setWriteLockMode(LockModeType mode);\n }"},{"sha":"787a6f872325711d97696f6cee86b3de5dbe3785","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","status":"added","additions":406,"deletions":0,"changes":406,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -0,0 +1,406 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import javax.persistence.LockModeType;\n+\n+import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.meta.FetchGroup;\n+\n+/**\n+ * Implements FetchPlan via delegation to FetchConfiguration.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class FetchPlanImpl\n+\timplements FetchPlan {\n+\n+    private final DelegatingFetchConfiguration _fetch;\n+\n+    \n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public FetchPlanImpl(FetchConfiguration fetch) {\n+        _fetch = newDelegatingFetchConfiguration(fetch);\n+    }\n+\n+    /**\n+     * Create a new exception-translating delegating fetch configuration.\n+     */\n+    protected DelegatingFetchConfiguration newDelegatingFetchConfiguration\n+        (FetchConfiguration fetch) {\n+        return new DelegatingFetchConfiguration(fetch,\n+            PersistenceExceptions.TRANSLATOR);\n+    }\n+\n+    /**\n+     * Delegate.\n+     */\n+    public FetchConfiguration getDelegate() {\n+        return _fetch.getDelegate();\n+    }\n+\n+    /**\n+     * The maximum fetch depth when loading an object.\n+     */\n+    public int getMaxFetchDepth() {\n+        return _fetch.getMaxFetchDepth();\n+    }\n+\n+    /**\n+     * The maximum fetch depth when loading an object.\n+     */\n+    public FetchPlan setMaxFetchDepth(int depth) {\n+        _fetch.setMaxFetchDepth(depth);\n+        return this;\n+    }\n+\n+    /**\n+     * Return the fetch batch size for large result set support.\n+     * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n+     * that this property will be ignored under some data stores.\n+     */\n+    public int getFetchBatchSize() {\n+        return _fetch.getFetchBatchSize();\n+    }\n+\n+    /**\n+     * Set the fetch batch size for large result set support.\n+     * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n+     * that this property will be ignored under some data stores.\n+     */\n+    public FetchPlan setFetchBatchSize(int fetchBatchSize) {\n+        _fetch.setFetchBatchSize(fetchBatchSize);\n+        return this;\n+    }\n+\n+    /**\n+     * Return whether or not query caching is enabled. If this returns\n+     * <code>true</code> but the datacache plugin is not installed, caching\n+     * will not be enabled. If this\n+     * returns <code>false</code>, query caching will not be used\n+     * even if the datacache plugin is installed.\n+     */\n+    public boolean getQueryResultCache() {\n+        return _fetch.getQueryCache();\n+    }\n+\n+    /**\n+     * Control whether or not query caching is enabled. This has no effect\n+     * if the datacache plugin is not installed, or if the query cache size\n+     * is set to zero.\n+     */\n+    public FetchPlan setQueryResultCache(boolean cache) {\n+        _fetch.setQueryCache(cache);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the names of the fetch groups that this component will use\n+     * when loading objects. Defaults to the\n+     * <code>org.apache.openjpa.FetchGroups</code> setting.\n+     */\n+    public Collection<String> getFetchGroups() {\n+        return _fetch.getFetchGroups();\n+    }\n+\n+    /**\n+     * Adds <code>group</code> to the set of fetch group to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFetchGroup(String group) {\n+        _fetch.addFetchGroup(group);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds <code>groups</code> to the set of fetch group names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFetchGroups(String... groups) {\n+        return addFetchGroups(Arrays.asList(groups));\n+    }\n+\n+    /**\n+     * Adds <code>groups</code> to the set of fetch group names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFetchGroups(Collection groups) {\n+        _fetch.addFetchGroups(groups);\n+        return this;\n+    }\n+\n+    /**\n+     * Remove the given fetch group.\n+     */\n+    public FetchPlan removeFetchGroup(String group) {\n+        _fetch.removeFetchGroup(group);\n+        return this;\n+    }\n+\n+    /**\n+     * Removes <code>groups</code> from the set of fetch group names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFetchGroups(String... groups) {\n+        return removeFetchGroups(Arrays.asList(groups));\n+    }\n+\n+    /**\n+     * Removes <code>groups</code> from the set of fetch group names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFetchGroups(Collection groups) {\n+        _fetch.removeFetchGroups(groups);\n+        return this;\n+    }\n+\n+    /**\n+     * Clears the set of fetch group names to use wen loading\n+     * data. After this operation is invoked, only those fields in\n+     * the default fetch group (and any requested field) will be\n+     * loaded when loading an object.\n+     */\n+    public FetchPlan clearFetchGroups() {\n+        _fetch.clearFetchGroups();\n+        return this;\n+    }\n+\n+    /**\n+     * Resets the set of fetch groups to the list in the global configuration.\n+     */\n+    public FetchPlan resetFetchGroups() {\n+        _fetch.resetFetchGroups();\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the fully qualified names of the fields that this component\n+     * will use when loading objects. Defaults to the empty set.\n+     */\n+    public Collection<String> getFields() {\n+        return (Collection<String>) _fetch.getFields();\n+    }\n+\n+    /**\n+     * Return true if the given field has been added.\n+     */\n+    public boolean hasField(String field) {\n+        return _fetch.hasField(field);\n+    }\n+\n+    /**\n+     * Return true if the given field has been added.\n+     */\n+    public boolean hasField(Class cls, String field) {\n+        return hasField(toFieldName(cls, field));\n+    }\n+\n+    /**\n+     * Adds <code>field</code> to the set of fully-qualified field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addField(String field) {\n+        _fetch.addField(field);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds <code>field</code> to the set of field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addField(Class cls, String field) {\n+        return addField(toFieldName(cls, field));\n+    }\n+\n+    /**\n+     * Adds <code>fields</code> to the set of fully-qualified field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFields(String... fields) {\n+        return addFields(Arrays.asList(fields));\n+    }\n+\n+    /**\n+     * Adds <code>fields</code> to the set of field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFields(Class cls, String... fields) {\n+        return addFields(cls, Arrays.asList(fields));\n+    }\n+\n+    /**\n+     * Adds <code>fields</code> to the set of fully-qualified field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFields(Collection fields) {\n+        _fetch.addFields(fields);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds <code>fields</code> to the set of field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFields(Class cls, Collection fields) {\n+        return addFields(toFieldNames(cls, fields));\n+    }\n+\n+    /**\n+     * Remove the given fully-qualified field.\n+     */\n+    public FetchPlan removeField(String field) {\n+        _fetch.removeField(field);\n+        return this;\n+    }\n+\n+    /**\n+     * Remove the given field.\n+     */\n+    public FetchPlan removeField(Class cls, String field) {\n+        return removeField(toFieldName(cls, field));\n+    }\n+\n+    /**\n+     * Removes <code>fields</code> from the set of fully-qualified field names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFields(String... fields) {\n+        return removeFields(Arrays.asList(fields));\n+    }\n+\n+    /**\n+     * Removes <code>fields</code> from the set of field names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFields(Class cls, String... fields) {\n+        return removeFields(cls, Arrays.asList(fields));\n+    }\n+\n+    /**\n+     * Removes <code>fields</code> from the set of fully-qualified field names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFields(Collection fields) {\n+        _fetch.removeFields(fields);\n+        return this;\n+    }\n+\n+    /**\n+     * Removes <code>fields</code> from the set of field names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFields(Class cls, Collection fields) {\n+        return removeFields(toFieldNames(cls, fields));\n+    }\n+\n+    /**\n+     * Clears the set of field names to use wen loading\n+     * data. After this operation is invoked, only those fields in\n+     * the configured fetch groups will be loaded when loading an object.\n+     */\n+    public FetchPlan clearFields() {\n+        _fetch.clearFields();\n+        return this;\n+    }\n+\n+    /**\n+     * Combine the class and field to a fully-qualified field name.\n+     */\n+    private static String toFieldName(Class cls, String field) {\n+        return cls.getName() + \".\" + field;\n+    }\n+\n+    /**\n+     * Combine the class and fields to fully-qualified field names.\n+     */\n+    private static Collection toFieldNames(Class cls, Collection fields) {\n+        if (fields.isEmpty())\n+            return fields;\n+        Collection names = new ArrayList(fields);\n+        for (Iterator itr = fields.iterator(); itr.hasNext();)\n+            names.add(toFieldName(cls, (String) itr.next()));\n+        return names;\n+    }\n+\n+    /**\n+     * The number of milliseconds to wait for an object lock, or -1 for no\n+     * limit.\n+     */\n+    public int getLockTimeout() {\n+        return _fetch.getLockTimeout();\n+    }\n+\n+    /**\n+     * The number of milliseconds to wait for an object lock, or -1 for no\n+     * limit.\n+     */\n+    public FetchPlan setLockTimeout(int timeout) {\n+        _fetch.setLockTimeout(timeout);\n+        return this;\n+    }\n+\n+    /**\n+     * The lock level to use for locking loaded objects.\n+     */\n+    public LockModeType getReadLockMode() {\n+        return EntityManagerImpl.fromLockLevel(_fetch.getReadLockLevel());\n+    }\n+\n+    /**\n+     * The lock level to use for locking loaded objects.\n+     */\n+    public FetchPlan setReadLockMode(LockModeType mode) {\n+        _fetch.setReadLockLevel(EntityManagerImpl.toLockLevel(mode));\n+        return this;\n+    }\n+\n+    /**\n+     * The lock level to use for locking dirtied objects.\n+     */\n+    public LockModeType getWriteLockMode() {\n+        return EntityManagerImpl.fromLockLevel(_fetch.getWriteLockLevel());\n+    }\n+\n+    /**\n+     * The lock level to use for locking dirtied objects.\n+     */\n+    public FetchPlan setWriteLockMode(LockModeType mode) {\n+        _fetch.setWriteLockLevel(EntityManagerImpl.toLockLevel(mode));\n+        return this;\n+    }\n+\n+    public int hashCode() {\n+        return _fetch.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof FetchPlanImpl))\n+            return false;\n+        return _fetch.equals(((FetchPlanImpl) other)._fetch);\n+    }\n+}"},{"sha":"cbc68acc8d5da116b35891ac8f39b746315f5b78","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","status":"modified","additions":8,"deletions":45,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -24,76 +24,39 @@\n  * Represents a store sequence.\n  *\n  * @author Abe White\n- * @since 0.4.0\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n  * @published\n  */\n-public class Generator {\n+public interface Generator {\n \n     public static final String UUID_HEX = \"uuid-hex\";\n     public static final String UUID_STRING = \"uuid-string\";\n \n-    private final DelegatingSeq _seq;\n-    private final String _name;\n-    private final StoreContext _ctx;\n-    private final ClassMetaData _meta;\n-\n-    /**\n-     * Constructor; supply delegate.\n-     */\n-    public Generator(Seq seq, String name, StoreContext ctx,\n-        ClassMetaData meta) {\n-        _seq = new DelegatingSeq(seq, PersistenceExceptions.TRANSLATOR);\n-        _name = name;\n-        _ctx = ctx;\n-        _meta = meta;\n-    }\n-\n     /**\n      * Delegate.\n      */\n-    public Seq getDelegate() {\n-        return _seq.getDelegate();\n-    }\n+    public Seq getDelegate();\n \n     /**\n      * The sequence name.\n      */\n-    public String getName() {\n-        return _name;\n-    }\n+    public String getName();\n \n     /**\n      * The next sequence value.\n      */\n-    public Object next() {\n-        return _seq.next(_ctx, _meta);\n-    }\n+    public Object next();\n \n     /**\n      * The current sequence value, or null if the sequence does not\n      * support current values.\n      */\n-    public Object current() {\n-        return _seq.current(_ctx, _meta);\n-    }\n+    public Object current();\n \n     /**\n      * Hint to the sequence to allocate additional values up-front for\n      * efficiency.\n      */\n-    public void allocate(int additional) {\n-        _seq.allocate(additional, _ctx, _meta);\n-    }\n-\n-    public int hashCode() {\n-        return _seq.hashCode();\n-    }\n-\n-    public boolean equals(Object other) {\n-        if (other == this)\n-            return true;\n-        if (!(other instanceof Generator))\n-            return false;\n-        return _seq.equals(((Generator) other)._seq);\n-\t}\n+    public void allocate(int additional);\n }"},{"sha":"d4017320b1f6fecb605a572d8e49b7260aa2b884","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.DelegatingSeq;\n+import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Represents a store sequence.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class GeneratorImpl\n+\timplements Generator {\n+\n+    private final DelegatingSeq _seq;\n+    private final String _name;\n+    private final StoreContext _ctx;\n+    private final ClassMetaData _meta;\n+\n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public GeneratorImpl(Seq seq, String name, StoreContext ctx,\n+        ClassMetaData meta) {\n+        _seq = new DelegatingSeq(seq, PersistenceExceptions.TRANSLATOR);\n+        _name = name;\n+        _ctx = ctx;\n+        _meta = meta;\n+    }\n+\n+    public Seq getDelegate() {\n+        return _seq.getDelegate();\n+    }\n+\n+    public String getName() {\n+        return _name;\n+    }\n+\n+    public Object next() {\n+        return _seq.next(_ctx, _meta);\n+    }\n+\n+    public Object current() {\n+        return _seq.current(_ctx, _meta);\n+    }\n+\n+    public void allocate(int additional) {\n+        _seq.allocate(additional, _ctx, _meta);\n+    }\n+\n+    public int hashCode() {\n+        return _seq.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof GeneratorImpl))\n+            return false;\n+        return _seq.equals(((GeneratorImpl) other)._seq);\n+\t}\n+}"},{"sha":"29c42692f0eac663ee52f729ba6e8f5a3be80acf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -79,7 +79,7 @@\n             OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\n                 factory.getUserObject(EMF_KEY);\n             if (emf == null) {\n-                emf = new EntityManagerFactoryImpl(factory);\n+                emf = newEntityManagerFactory(factory);\n                 factory.putUserObject(EMF_KEY, emf);\n             }\n             return emf;\n@@ -90,6 +90,10 @@\n         }\n     }\n \n+    protected static OpenJPAEntityManagerFactory newEntityManagerFactory(BrokerFactory factory) {\n+\t\treturn new EntityManagerFactoryImpl(factory);\n+\t}\n+    \n     /**\n      * Return the underlying broker factory for the given persistence manager\n      * factory facade.\n@@ -125,6 +129,8 @@ public static OpenJPAEntityManager toEntityManager(Broker broker) {\n             broker.unlock();\n         }\n     }\n+    \n+     \n \n     /**\n      * Return the underlying broker for the given entity manager facade."},{"sha":"af9be5c95978ad2da1d97109d40b3833b4b2f450","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -17,6 +17,7 @@\n \n import java.lang.instrument.ClassFileTransformer;\n import java.lang.instrument.IllegalClassFormatException;\n+import java.lang.reflect.Method;\n import java.security.ProtectionDomain;\n import java.util.Map;\n import java.util.Properties;\n@@ -31,6 +32,8 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PCClassFileTransformer;\n import org.apache.openjpa.kernel.Bootstrap;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n@@ -43,7 +46,7 @@\n  * @see Persistence#createEntityManagerFactory(String,Map)\n  */\n public class PersistenceProviderImpl\n-    implements PersistenceProvider {\n+    implements PersistenceProvider, PersistenceProviderExtension {\n \n     static final String CLASS_TRANSFORMER_OPTIONS =\n         \"openjpa.ClassTransformerOptions\";\n@@ -60,13 +63,13 @@\n      */\n     public EntityManagerFactory createEntityManagerFactory(String name,\n         String resource, Map m) {\n-        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        ConfigurationProviderImpl cp = newConfigurationProviderImpl();\n         try {\n             if (cp.load(resource, name, m))\n-                return OpenJPAPersistence.toEntityManagerFactory(\n-                    Bootstrap.newBrokerFactory(cp, cp.getClassLoader()));\n+            \treturn toEntityManagerFactory(\n+            \t\tBootstrap.newBrokerFactory(cp, cp.getClassLoader()));\n             else\n-                return null;\n+                 return null;\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n@@ -78,11 +81,10 @@ public EntityManagerFactory createEntityManagerFactory(String name, Map m) {\n \n     public EntityManagerFactory createContainerEntityManagerFactory(\n         PersistenceUnitInfo pui, Map map) {\n-        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        ConfigurationProviderImpl cp = newConfigurationProviderImpl();\n         try {\n             if (cp.load(pui, map)) {\n-                OpenJPAEntityManagerFactory emf =\n-                    OpenJPAPersistence.toEntityManagerFactory(\n+                OpenJPAEntityManagerFactory emf = toEntityManagerFactory(\n                         Bootstrap.newBrokerFactory(cp, cp.getClassLoader()));\n                 Properties p = pui.getProperties();\n                 String ctOpts = null;\n@@ -98,7 +100,15 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n     }\n-\n+    \n+    public ConfigurationProviderImpl newConfigurationProviderImpl() {\n+    \treturn new ConfigurationProviderImpl();\n+    }\n+    \n+    public OpenJPAEntityManagerFactory toEntityManagerFactory(BrokerFactory factory) {\n+    \treturn OpenJPAPersistence.toEntityManagerFactory(factory);\n+    }\n+    \n     /**\n      * Java EE 5 class transformer.\n      */"},{"sha":"32f0abd57060b2f0c4c9317c18c059ab3643bf2f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","status":"modified","additions":8,"deletions":58,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -27,88 +27,38 @@\n  * Query result cache.\n  *\n  * @author Abe White\n- * @since 0.4.0\n+ * @since 0.4.1\n  * @published\n  */\n-public class QueryResultCache {\n-\n-    private final DelegatingQueryCache _cache;\n-\n-    /**\n-     * Constructor; supply delegate.\n-     */\n-    public QueryResultCache(QueryCache cache) {\n-        _cache = new DelegatingQueryCache(cache,\n-            PersistenceExceptions.TRANSLATOR);\n-    }\n+public interface QueryResultCache {\n \n     /**\n      * Delegate.\n      */\n-    public QueryCache getDelegate() {\n-        return _cache.getDelegate();\n-    }\n+    public QueryCache getDelegate();\n \n     /**\n      * Pin the given query's result to the cache.\n      */\n-    public void pin(Query q) {\n-        if (_cache.getDelegate() != null)\n-            _cache.pin(toQueryKey(q));\n-    }\n+    public void pin(Query q);\n \n     /**\n      * Unpin a previously-pinned query result.\n      */\n-    public void unpin(Query q) {\n-        if (_cache.getDelegate() != null)\n-            _cache.unpin(toQueryKey(q));\n-    }\n+    public void unpin(Query q);\n \n     /**\n      * Evict a query result from the cache.\n      */\n-    public void evict(Query q) {\n-        if (_cache.getDelegate() != null)\n-            _cache.remove(toQueryKey(q));\n-    }\n+    public void evict(Query q);\n \n     /**\n      * Clear the cache.\n      */\n-    public void evictAll() {\n-        _cache.clear();\n-    }\n+    public void evictAll();\n \n     /**\n      * Evict all result for queries involving the given class.\n      */\n-    public void evictAll(Class cls) {\n-        _cache.onTypesChanged(new TypesChangedEvent(this,\n-            Collections.singleton(cls)));\n-    }\n-\n-    /**\n-     * Return a cache key for the given query.\n-     */\n-    private QueryKey toQueryKey(Query q) {\n-        QueryImpl impl = (QueryImpl) q;\n-        if (impl.hasPositionalParameters())\n-            return QueryKey.newInstance(impl.getDelegate(),\n-                impl.getPositionalParameters());\n-        return QueryKey.newInstance(impl.getDelegate(),\n-            impl.getNamedParameters());\n-    }\n-\n-    public int hashCode() {\n-        return _cache.hashCode();\n-    }\n-\n-    public boolean equals(Object other) {\n-        if (other == this)\n-            return true;\n-        if (!(other instanceof QueryResultCache))\n-            return false;\n-        return _cache.equals(((QueryResultCache) other)._cache);\n-\t}\n+    public void evictAll(Class cls);\n }"},{"sha":"939c9fee2b86dee5ea7e508b1efb5252af4a990b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Collections;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.datacache.DelegatingQueryCache;\n+import org.apache.openjpa.datacache.QueryCache;\n+import org.apache.openjpa.datacache.QueryKey;\n+import org.apache.openjpa.datacache.TypesChangedEvent;\n+\n+/**\n+ * Implements Query result cache via delegation to QueryCache.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class QueryResultCacheImpl\n+\timplements QueryResultCache {\n+\n+    private final DelegatingQueryCache _cache;\n+\n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public QueryResultCacheImpl(QueryCache cache) {\n+        _cache = new DelegatingQueryCache(cache,\n+            PersistenceExceptions.TRANSLATOR);\n+    }\n+\n+    /**\n+     * Delegate.\n+     */\n+    public QueryCache getDelegate() {\n+        return _cache.getDelegate();\n+    }\n+\n+    /**\n+     * Pin the given query's result to the cache.\n+     */\n+    public void pin(Query q) {\n+        if (_cache.getDelegate() != null)\n+            _cache.pin(toQueryKey(q));\n+    }\n+\n+    /**\n+     * Unpin a previously-pinned query result.\n+     */\n+    public void unpin(Query q) {\n+        if (_cache.getDelegate() != null)\n+            _cache.unpin(toQueryKey(q));\n+    }\n+\n+    /**\n+     * Evict a query result from the cache.\n+     */\n+    public void evict(Query q) {\n+        if (_cache.getDelegate() != null)\n+            _cache.remove(toQueryKey(q));\n+    }\n+\n+    /**\n+     * Clear the cache.\n+     */\n+    public void evictAll() {\n+        _cache.clear();\n+    }\n+\n+    /**\n+     * Evict all result for queries involving the given class.\n+     */\n+    public void evictAll(Class cls) {\n+        _cache.onTypesChanged(new TypesChangedEvent(this,\n+            Collections.singleton(cls)));\n+    }\n+\n+    /**\n+     * Return a cache key for the given query.\n+     */\n+    private QueryKey toQueryKey(Query q) {\n+        QueryImpl impl = (QueryImpl) q;\n+        if (impl.hasPositionalParameters())\n+            return QueryKey.newInstance(impl.getDelegate(),\n+                impl.getPositionalParameters());\n+        return QueryKey.newInstance(impl.getDelegate(),\n+            impl.getNamedParameters());\n+    }\n+\n+    public int hashCode() {\n+        return _cache.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof QueryResultCacheImpl))\n+            return false;\n+        return _cache.equals(((QueryResultCacheImpl) other)._cache);\n+\t}\n+}"},{"sha":"3912937229f51559705c0c2224cb564f25eecf8c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","status":"modified","additions":17,"deletions":106,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -28,169 +28,80 @@\n  * Represents the L2 cache over the data store.\n  *\n  * @author Abe White\n- * @since 0.4.0\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n  * @published\n  */\n-public class StoreCache {\n+public interface StoreCache {\n \n     public static final String NAME_DEFAULT = DataCache.NAME_DEFAULT;\n \n-    private final MetaDataRepository _repos;\n-    private final DelegatingDataCache _cache;\n-\n-    /**\n-     * Constructor; supply delegate.\n-     */\n-    public StoreCache(EntityManagerFactoryImpl emf, DataCache cache) {\n-        _repos = emf.getConfiguration().getMetaDataRepositoryInstance();\n-        _cache = new DelegatingDataCache(cache,\n-            PersistenceExceptions.TRANSLATOR);\n-    }\n-\n     /**\n      * Delegate.\n      */\n-    public DataCache getDelegate() {\n-        return _cache.getDelegate();\n-    }\n+    public DataCache getDelegate();\n \n     /**\n      * Whether the cache contains data for the given oid.\n      */\n-    public boolean contains(Class cls, Object oid) {\n-        return _cache.getDelegate() != null\n-            && _cache.contains(OpenJPAPersistence.toOpenJPAObjectId\n-            (getMetaData(cls), oid));\n-    }\n+    public boolean contains(Class cls, Object oid);\n \n     /**\n      * Whether the cache contains data for the given oids.\n      */\n-    public boolean containsAll(Class cls, Object... oids) {\n-        return containsAll(cls, Arrays.asList(oids));\n-    }\n+    public boolean containsAll(Class cls, Object... oids);\n \n     /**\n      * Whether the cache contains data for the given oids.\n      */\n-    public boolean containsAll(Class cls, Collection oids) {\n-        if (_cache.getDelegate() == null)\n-            return oids.isEmpty();\n-\n-        BitSet set = _cache.containsAll(OpenJPAPersistence.toOpenJPAObjectIds\n-            (getMetaData(cls), oids));\n-        for (int i = 0; i < oids.size(); i++)\n-            if (!set.get(i))\n-                return false;\n-        return true;\n-    }\n+    public boolean containsAll(Class cls, Collection oids);\n \n     /**\n      * Pin the data for the given oid to the cache.\n      */\n-    public void pin(Class cls, Object oid) {\n-        if (_cache.getDelegate() != null)\n-            _cache.pin(\n-                OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls), oid));\n-    }\n+    public void pin(Class cls, Object oid);\n \n     /**\n      * Pin the data for the given oids to the cache.\n      */\n-    public void pinAll(Class cls, Object... oids) {\n-        pinAll(cls, Arrays.asList(oids));\n-    }\n+    public void pinAll(Class cls, Object... oids);\n \n     /**\n      * Pin the data for the given oids to the cache.\n      */\n-    public void pinAll(Class cls, Collection oids) {\n-        if (_cache.getDelegate() != null)\n-            _cache\n-                .pinAll(OpenJPAPersistence.toOpenJPAObjectIds(getMetaData(cls),\n-                    oids));\n-    }\n+    public void pinAll(Class cls, Collection oids);\n \n     /**\n      * Unpin the data for the given oid from the cache.\n      */\n-    public void unpin(Class cls, Object oid) {\n-        if (_cache.getDelegate() != null)\n-            _cache.unpin(OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls),\n-                oid));\n-    }\n+    public void unpin(Class cls, Object oid);\n \n     /**\n      * Unpin the data for the given oids from the cache.\n      */\n-    public void unpinAll(Class cls, Object... oids) {\n-        unpinAll(cls, Arrays.asList(oids));\n-    }\n+    public void unpinAll(Class cls, Object... oids);\n \n     /**\n      * Unpin the data for the given oids from the cache.\n      */\n-    public void unpinAll(Class cls, Collection oids) {\n-        if (_cache.getDelegate() != null)\n-            _cache.unpinAll(\n-                OpenJPAPersistence.toOpenJPAObjectIds(getMetaData(cls),\n-                    oids));\n-    }\n+    public void unpinAll(Class cls, Collection oids);\n \n     /**\n      * Remove data for the given oid from the cache.\n      */\n-    public void evict(Class cls, Object oid) {\n-        if (_cache.getDelegate() != null)\n-            _cache.remove(OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls),\n-                oid));\n-    }\n-\n+    public void evict(Class cls, Object oid);\n     /**\n      * Remove data for the given oids from the cache.\n      */\n-    public void evictAll(Class cls, Object... oids) {\n-        evictAll(cls, Arrays.asList(oids));\n-    }\n+    public void evictAll(Class cls, Object... oids);\n \n     /**\n      * Remove data for the given oids from the cache.\n      */\n-    public void evictAll(Class cls, Collection oids) {\n-        if (_cache.getDelegate() != null)\n-            _cache.removeAll(\n-                OpenJPAPersistence.toOpenJPAObjectIds(getMetaData(cls),\n-                    oids));\n-    }\n+    public void evictAll(Class cls, Collection oids);\n \n     /**\n      * Clear the cache.\n      */\n-    public void evictAll() {\n-        _cache.clear();\n-    }\n-\n-    /**\n-     * Return metadata for the given class, throwing the proper exception\n-     * if not persistent.\n-     */\n-    private ClassMetaData getMetaData(Class cls) {\n-        try {\n-            return _repos.getMetaData(cls, null, true);\n-        } catch (RuntimeException re) {\n-            throw PersistenceExceptions.toPersistenceException(re);\n-        }\n-    }\n-\n-    public int hashCode() {\n-        return _cache.hashCode();\n-    }\n-\n-    public boolean equals(Object other) {\n-        if (other == this)\n-            return true;\n-        if (!(other instanceof StoreCache))\n-            return false;\n-        return _cache.equals (((StoreCache) other)._cache);\n-\t}\n+    public void evictAll();\n }"},{"sha":"a6dcb1c24f42a93b161f3f915ccbccd86e417e2b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/253407b69c4584af56d2d43e731e3073316fa67e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java?ref=253407b69c4584af56d2d43e731e3073316fa67e","patch":"@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.Collection;\n+\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.DelegatingDataCache;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+\n+/**\n+ * Implements the L2 cache over the data store via delegation to DataCache.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class StoreCacheImpl \n+\timplements StoreCache {\n+\n+    private final MetaDataRepository _repos;\n+    private final DelegatingDataCache _cache;\n+\n+    \n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public StoreCacheImpl(EntityManagerFactoryImpl emf, DataCache cache) {\n+        _repos = emf.getConfiguration().getMetaDataRepositoryInstance();\n+        _cache = new DelegatingDataCache(cache,\n+            PersistenceExceptions.TRANSLATOR);\n+    }\n+\n+    public DataCache getDelegate() {\n+        return _cache.getDelegate();\n+    }\n+\n+    public boolean contains(Class cls, Object oid) {\n+        return _cache.getDelegate() != null\n+            && _cache.contains(OpenJPAPersistence.toOpenJPAObjectId\n+            (getMetaData(cls), oid));\n+    }\n+\n+    public boolean containsAll(Class cls, Object... oids) {\n+        return containsAll(cls, Arrays.asList(oids));\n+    }\n+\n+    public boolean containsAll(Class cls, Collection oids) {\n+        if (_cache.getDelegate() == null)\n+            return oids.isEmpty();\n+\n+        BitSet set = _cache.containsAll(OpenJPAPersistence.toOpenJPAObjectIds\n+            (getMetaData(cls), oids));\n+        for (int i = 0; i < oids.size(); i++)\n+            if (!set.get(i))\n+                return false;\n+        return true;\n+    }\n+\n+    public void pin(Class cls, Object oid) {\n+        if (_cache.getDelegate() != null)\n+            _cache.pin(\n+                OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls), oid));\n+    }\n+\n+    public void pinAll(Class cls, Object... oids) {\n+        pinAll(cls, Arrays.asList(oids));\n+    }\n+\n+    public void pinAll(Class cls, Collection oids) {\n+        if (_cache.getDelegate() != null)\n+            _cache\n+                .pinAll(OpenJPAPersistence.toOpenJPAObjectIds(getMetaData(cls),\n+                    oids));\n+    }\n+\n+    public void unpin(Class cls, Object oid) {\n+        if (_cache.getDelegate() != null)\n+            _cache.unpin(OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls),\n+                oid));\n+    }\n+\n+    public void unpinAll(Class cls, Object... oids) {\n+        unpinAll(cls, Arrays.asList(oids));\n+    }\n+\n+    public void unpinAll(Class cls, Collection oids) {\n+        if (_cache.getDelegate() != null)\n+            _cache.unpinAll(\n+                OpenJPAPersistence.toOpenJPAObjectIds(getMetaData(cls),\n+                    oids));\n+    }\n+\n+    public void evict(Class cls, Object oid) {\n+        if (_cache.getDelegate() != null)\n+            _cache.remove(OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls),\n+                oid));\n+    }\n+\n+    public void evictAll(Class cls, Object... oids) {\n+        evictAll(cls, Arrays.asList(oids));\n+    }\n+\n+    public void evictAll(Class cls, Collection oids) {\n+        if (_cache.getDelegate() != null)\n+            _cache.removeAll(\n+                OpenJPAPersistence.toOpenJPAObjectIds(getMetaData(cls),\n+                    oids));\n+    }\n+\n+    public void evictAll() {\n+        _cache.clear();\n+    }\n+\n+    /**\n+     * Return metadata for the given class, throwing the proper exception\n+     * if not persistent.\n+     */\n+    private ClassMetaData getMetaData(Class cls) {\n+        try {\n+            return _repos.getMetaData(cls, null, true);\n+        } catch (RuntimeException re) {\n+            throw PersistenceExceptions.toPersistenceException(re);\n+        }\n+    }\n+\n+    public int hashCode() {\n+        return _cache.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof StoreCacheImpl))\n+            return false;\n+        return _cache.equals (((StoreCacheImpl) other)._cache);\n+\t}\n+}"}]}

