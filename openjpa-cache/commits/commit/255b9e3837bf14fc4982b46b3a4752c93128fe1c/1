{"sha":"255b9e3837bf14fc4982b46b3a4752c93128fe1c","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1NWI5ZTM4MzdiZjE0ZmM0OTgyYjQ2YjNhNDc1MmM5MzEyOGZlMWM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T02:29:49Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-10T02:29:49Z"},"message":"OPENJPA-1623 Add tests for qualified paths in JPQL.  Merged in from trunk r932487.  Contributed by Dianne.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932661 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4a65f671cf93d44c3754222360600957d84773b","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4a65f671cf93d44c3754222360600957d84773b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/255b9e3837bf14fc4982b46b3a4752c93128fe1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/255b9e3837bf14fc4982b46b3a4752c93128fe1c","html_url":"https://github.com/apache/openjpa/commit/255b9e3837bf14fc4982b46b3a4752c93128fe1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/255b9e3837bf14fc4982b46b3a4752c93128fe1c/comments","author":null,"committer":null,"parents":[{"sha":"3736c1bc0659e7f9951d411d91c2f525c201dae9","url":"https://api.github.com/repos/apache/openjpa/commits/3736c1bc0659e7f9951d411d91c2f525c201dae9","html_url":"https://github.com/apache/openjpa/commit/3736c1bc0659e7f9951d411d91c2f525c201dae9"}],"stats":{"total":379,"additions":379,"deletions":0},"files":[{"sha":"b83eef2fd5628344efb1ec785e7f583b4ab16531","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Division.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Division.java","raw_url":"https://github.com/apache/openjpa/raw/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Division.java?ref=255b9e3837bf14fc4982b46b3a4752c93128fe1c","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"qual_path_Division\")\n+public class Division {\n+    @Id\n+    private int id;\n+    \n+    @ElementCollection\n+    private Map<Employee, String> employees = new HashMap<Employee, String>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Map<Employee, String> getEmployees() {\n+        return employees;\n+    }\n+\n+    public void setEmployees(Map<Employee, String> employees) {\n+        this.employees = employees;\n+    }\n+}"},{"sha":"bebfeb7d9b1cc3cf9bd08f678dede9d4250bdd4b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Employee.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Employee.java?ref=255b9e3837bf14fc4982b46b3a4752c93128fe1c","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"qual_path_Employee\")\n+public class Employee {\n+    @Id\n+    private int id;\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    \n+    @Embedded\n+    private PersonalInfo personalInfo;\n+\n+    public PersonalInfo getPersonalInfo() {\n+        return personalInfo;\n+    }\n+\n+    public void setPersonalInfo(PersonalInfo personalInfo) {\n+        this.personalInfo = personalInfo;\n+    }\n+}"},{"sha":"5806f273270b88feb68e2cd3eeba2f7ade659bf0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/PersonalInfo.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/PersonalInfo.java","raw_url":"https://github.com/apache/openjpa/raw/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/PersonalInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/PersonalInfo.java?ref=255b9e3837bf14fc4982b46b3a4752c93128fe1c","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class PersonalInfo {\n+    private String firstName;\n+    private String lastName;\n+    \n+    @ElementCollection\n+    private Set<Phone> phones = new HashSet<Phone>();\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public Set<Phone> getPhones() {\n+        return phones;\n+    }\n+\n+    public void setPhones(Set<Phone> phones) {\n+        this.phones = phones;\n+    }\n+\n+    public void addPhone(Phone phone) {\n+        phones.add(phone);\n+    }\n+\n+}"},{"sha":"9ef723d3edd873f7397fb0332d8d9294727e9112","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Phone.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Phone.java","raw_url":"https://github.com/apache/openjpa/raw/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Phone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/Phone.java?ref=255b9e3837bf14fc4982b46b3a4752c93128fe1c","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"qual_path_Phone\")\n+public class Phone {\n+    public final static String HOME= \"home\";\n+    public final static String OFFICE = \"office\";\n+    public final static String MOBILE = \"mobile\";\n+    \n+    @Id\n+    private int id;\n+    \n+    private String type;\n+    \n+    private int number;\n+\n+    public int getId() {\n+        return id;\n+    }\n+    \n+    public Phone(int id, String type, int number) {\n+        setId(id);\n+        setType(type);\n+        setNumber(number);\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(int number) {\n+        this.number = number;\n+    }\n+}"},{"sha":"0311d614f537716d0381333a7d9fd1a8fe582195","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/TestQualifiedPath.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/TestQualifiedPath.java","raw_url":"https://github.com/apache/openjpa/raw/255b9e3837bf14fc4982b46b3a4752c93128fe1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/TestQualifiedPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/qualified/path/TestQualifiedPath.java?ref=255b9e3837bf14fc4982b46b3a4752c93128fe1c","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.qualified.path;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test queries containing qualified paths of the form:\n+ * <pre>\n+ * general_identification_variable.{single_valued_object_field.}*single_valued_object_field \n+ *    or\n+ * general_identification_variable.{single_valued_object_field.}*collection_valued_field \n+ * </pre>\n+ */\n+public class TestQualifiedPath extends SQLListenerTestCase {\n+    private int numDivisions = 2;\n+    private int numEmployeesPerDivision = 3;\n+    private int numMobilePhonesPerEmployee = 2;\n+    \n+    private int divisionId = 0;\n+    private int employeeId = 0;\n+    private int nameCount = 0;\n+    private int phoneId = 0;\n+    private int phoneNumber = 1234567890;\n+    \n+    OpenJPAEntityManager em;\n+    \n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            Division.class, Employee.class, Phone.class, PersonalInfo.class);\n+        assertNotNull(emf);\n+        em = emf.createEntityManager();\n+        assertNotNull(em);\n+        createObj();\n+    }\n+\n+    public void testQueries() {\n+        em.clear();\n+        String query = \"select p \" + \n+            \" from Division d, in(d.employees) e, in(KEY(e).personalInfo.phones) p\";\n+        Query q = em.createQuery(query);\n+        List<?> rs = q.getResultList();\n+        assertEquals(numDivisions*numEmployeesPerDivision*(2 + numMobilePhonesPerEmployee), rs.size());\n+       \n+        em.clear();\n+        query = \"select KEY(e) \" +\n+            \"from Division d, in(d.employees) e \" +\n+            \"where KEY(e).personalInfo.lastName = 'lName2'\";\n+        q = em.createQuery(query);\n+        rs = q.getResultList();\n+        assertEquals(1, rs.size());\n+        Employee employee = (Employee)rs.get(0);\n+        assertEquals(\"lName2\", employee.getPersonalInfo().getLastName());\n+        \n+        em.clear();\n+        query = \"select KEY(e) \" +\n+            \"from Division d, in(d.employees) e \" +\n+            \"order by KEY(e).personalInfo.lastName\";\n+        q = em.createQuery(query);\n+        rs = q.getResultList();\n+        assertEquals(numDivisions * numEmployeesPerDivision, rs.size());\n+        employee = (Employee)rs.get(0);\n+        assertTrue(employee.getPersonalInfo().getLastName().equals(\"lName1\"));\n+        employee = (Employee)rs.get(1);\n+        assertTrue(employee.getPersonalInfo().getLastName().equals(\"lName2\"));\n+        \n+        em.clear();\n+        query = \"select KEY(e).personalInfo.lastName \" +\n+            \"from Division d, in (d.employees) e \" +\n+            \"group by KEY(e).personalInfo.lastName \" +\n+            \"having KEY(e).personalInfo.lastName = 'lName3'\";\n+        q = em.createQuery(query);\n+        rs = q.getResultList();\n+        assertEquals(1, rs.size());\n+    }\n+    \n+    private void createObj() {\n+        em.getTransaction().begin();\n+        for (int i = 0; i < numDivisions; i++) {\n+            createDivision(divisionId++);\n+        }\n+        em.flush();\n+        em.getTransaction().commit();\n+    }\n+    \n+    private void createDivision(int id) {\n+        Division division = new Division();\n+        division.setId(id);\n+        Map<Employee, String> employees = new HashMap<Employee, String>();\n+        for (int i = 0; i < numEmployeesPerDivision; i++) {\n+            Employee employee = createEmployee(employeeId++);\n+            employees.put(employee, employee.getPersonalInfo().getLastName());\n+        }\n+        division.setEmployees(employees);\n+        em.persist(division);\n+    }\n+    \n+    private Employee createEmployee(int id) {\n+        Employee employee = new Employee();\n+        employee.setId(id);\n+        \n+        PersonalInfo personalInfo = new PersonalInfo();\n+        personalInfo.setFirstName(\"fName\" + nameCount++);\n+        personalInfo.setLastName(\"lName\" + nameCount);\n+        \n+        Phone homePhone = new Phone(phoneId++, Phone.HOME, phoneNumber++);\n+        personalInfo.addPhone(homePhone);\n+        Phone officePhone = new Phone(phoneId++, Phone.OFFICE, phoneNumber++);\n+        personalInfo.addPhone(officePhone);\n+        for (int i = 0; i < numMobilePhonesPerEmployee; i++) {\n+            Phone mobilePhone = new Phone(phoneId++, Phone.MOBILE, phoneNumber++);\n+            personalInfo.addPhone(mobilePhone);\n+        }\n+        \n+        employee.setPersonalInfo(personalInfo);\n+        \n+        em.persist(employee);\n+        \n+        return employee;\n+    }\n+\n+}"}]}

