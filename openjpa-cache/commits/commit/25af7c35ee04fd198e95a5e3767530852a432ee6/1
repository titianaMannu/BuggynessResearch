{"sha":"25af7c35ee04fd198e95a5e3767530852a432ee6","node_id":"MDY6Q29tbWl0MjA2MzY0OjI1YWY3YzM1ZWUwNGZkMTk4ZTk1YTVlMzc2NzUzMDg1MmE0MzJlZTY=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-05-07T21:07:41Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-05-07T21:07:41Z"},"message":"OPENJPA-2849 proper handling of different Date types","tree":{"sha":"6b76ade8f3a8598fb14401fa8cc7f728dbd97701","url":"https://api.github.com/repos/apache/openjpa/git/trees/6b76ade8f3a8598fb14401fa8cc7f728dbd97701"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/25af7c35ee04fd198e95a5e3767530852a432ee6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/25af7c35ee04fd198e95a5e3767530852a432ee6","html_url":"https://github.com/apache/openjpa/commit/25af7c35ee04fd198e95a5e3767530852a432ee6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/25af7c35ee04fd198e95a5e3767530852a432ee6/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"477d73a99682f4b029e1f52767e70a6061a04ad3","url":"https://api.github.com/repos/apache/openjpa/commits/477d73a99682f4b029e1f52767e70a6061a04ad3","html_url":"https://github.com/apache/openjpa/commit/477d73a99682f4b029e1f52767e70a6061a04ad3"}],"stats":{"total":371,"additions":211,"deletions":160},"files":[{"sha":"e39556ec914e76fcff79b0263228fc57311f6b1b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/25af7c35ee04fd198e95a5e3767530852a432ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/25af7c35ee04fd198e95a5e3767530852a432ee6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=25af7c35ee04fd198e95a5e3767530852a432ee6","patch":"@@ -132,6 +132,11 @@ public Object load(ExpContext ctx, ExpState state, Result res)\n         throws SQLException {\n         Class<?> type = getType();\n         int typeCode = type != null ? JavaTypes.getTypeCode(type) : JavaSQLTypes.JDBC_DEFAULT;\n+        if (typeCode == JavaTypes.DATE) {\n+            // further clarify which date exactly\n+            typeCode = JavaSQLTypes.getDateTypeCode(type);\n+        }\n+\n         Object value = res.getObject(this, typeCode, null);\n         if (value == null) {\n             if (nullableValue(ctx, state)) {  // OPENJPA-1794"},{"sha":"ccb58dbb2d75126c0d69f4702fca0441e570ae6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity.java","status":"modified","additions":184,"deletions":160,"changes":344,"blob_url":"https://github.com/apache/openjpa/blob/25af7c35ee04fd198e95a5e3767530852a432ee6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity.java","raw_url":"https://github.com/apache/openjpa/raw/25af7c35ee04fd198e95a5e3767530852a432ee6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/AggEntity.java?ref=25af7c35ee04fd198e95a5e3767530852a432ee6","patch":"@@ -1,160 +1,184 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.jira1794;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name = \"j1794_ae\")\r\n-public class AggEntity {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private int id;\r\n-\r\n-    private short pshortVal;\r\n-    private Short shortVal;\r\n-\r\n-    private int pintVal;\r\n-    private Integer intVal;\r\n-\r\n-    private long plongVal;\r\n-    private Long longVal;\r\n-\r\n-    private float pfloatVal;\r\n-    private Float floatVal;\r\n-\r\n-    private double pdblVal;\r\n-    private Double dblVal;\r\n-\r\n-    private String stringVal;\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setPshortVal(short pshortVal) {\r\n-        this.pshortVal = pshortVal;\r\n-    }\r\n-\r\n-    public short getPshortVal() {\r\n-        return pshortVal;\r\n-    }\r\n-\r\n-    public void setShortVal(Short pShortVal) {\r\n-        this.shortVal = pShortVal;\r\n-    }\r\n-\r\n-    public Short getShortVal() {\r\n-        return shortVal;\r\n-    }\r\n-\r\n-    public void setPintVal(int pintVal) {\r\n-        this.pintVal = pintVal;\r\n-    }\r\n-\r\n-    public int getPintVal() {\r\n-        return pintVal;\r\n-    }\r\n-\r\n-    public void setIntVal(Integer intVal) {\r\n-        this.intVal = intVal;\r\n-    }\r\n-\r\n-    public Integer getIntVal() {\r\n-        return intVal;\r\n-    }\r\n-\r\n-    public void setPlongVal(long plongVal) {\r\n-        this.plongVal = plongVal;\r\n-    }\r\n-\r\n-    public long getPlongVal() {\r\n-        return plongVal;\r\n-    }\r\n-\r\n-    public void setLongVal(Long longVal) {\r\n-        this.longVal = longVal;\r\n-    }\r\n-\r\n-    public Long getLongVal() {\r\n-        return longVal;\r\n-    }\r\n-\r\n-    public void setPfloatVal(float pfloatVal) {\r\n-        this.pfloatVal = pfloatVal;\r\n-    }\r\n-\r\n-    public float getPfloatVal() {\r\n-        return pfloatVal;\r\n-    }\r\n-\r\n-    public void setFloatVal(Float floatVal) {\r\n-        this.floatVal = floatVal;\r\n-    }\r\n-\r\n-    public Float getFloatVal() {\r\n-        return floatVal;\r\n-    }\r\n-\r\n-    public void setPdblVal(double pdblVal) {\r\n-        this.pdblVal = pdblVal;\r\n-    }\r\n-\r\n-    public double getPdblVal() {\r\n-        return pdblVal;\r\n-    }\r\n-\r\n-    public void setDblVal(Double dblVal) {\r\n-        this.dblVal = dblVal;\r\n-    }\r\n-\r\n-    public Double getDblVal() {\r\n-        return dblVal;\r\n-    }\r\n-\r\n-    public void setStringVal(String stringVal) {\r\n-        this.stringVal = stringVal;\r\n-    }\r\n-\r\n-    public String getStringVal() {\r\n-        return stringVal;\r\n-    }\r\n-\r\n-    public void init() {\r\n-        setPshortVal((short) 1);\r\n-        setShortVal((short) 1);\r\n-        setIntVal(1);\r\n-        setPintVal(1);\r\n-        setLongVal(1L);\r\n-        setPlongVal(1L);\r\n-        setDblVal(1d);\r\n-        setPdblVal(1d);\r\n-        setFloatVal(1f);\r\n-        setPfloatVal(1f);\r\n-        setStringVal(\"1\");\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jira1794;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"j1794_ae\")\n+public class AggEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    private short pshortVal;\n+    private Short shortVal;\n+\n+    private int pintVal;\n+    private Integer intVal;\n+\n+    private long plongVal;\n+    private Long longVal;\n+\n+    private float pfloatVal;\n+    private Float floatVal;\n+\n+    private double pdblVal;\n+    private Double dblVal;\n+\n+    private String stringVal;\n+\n+    private java.util.Date utilDate;\n+\n+    private java.sql.Date sqlDate;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setPshortVal(short pshortVal) {\n+        this.pshortVal = pshortVal;\n+    }\n+\n+    public short getPshortVal() {\n+        return pshortVal;\n+    }\n+\n+    public void setShortVal(Short pShortVal) {\n+        this.shortVal = pShortVal;\n+    }\n+\n+    public Short getShortVal() {\n+        return shortVal;\n+    }\n+\n+    public void setPintVal(int pintVal) {\n+        this.pintVal = pintVal;\n+    }\n+\n+    public int getPintVal() {\n+        return pintVal;\n+    }\n+\n+    public void setIntVal(Integer intVal) {\n+        this.intVal = intVal;\n+    }\n+\n+    public Integer getIntVal() {\n+        return intVal;\n+    }\n+\n+    public void setPlongVal(long plongVal) {\n+        this.plongVal = plongVal;\n+    }\n+\n+    public long getPlongVal() {\n+        return plongVal;\n+    }\n+\n+    public void setLongVal(Long longVal) {\n+        this.longVal = longVal;\n+    }\n+\n+    public Long getLongVal() {\n+        return longVal;\n+    }\n+\n+    public void setPfloatVal(float pfloatVal) {\n+        this.pfloatVal = pfloatVal;\n+    }\n+\n+    public float getPfloatVal() {\n+        return pfloatVal;\n+    }\n+\n+    public void setFloatVal(Float floatVal) {\n+        this.floatVal = floatVal;\n+    }\n+\n+    public Float getFloatVal() {\n+        return floatVal;\n+    }\n+\n+    public void setPdblVal(double pdblVal) {\n+        this.pdblVal = pdblVal;\n+    }\n+\n+    public double getPdblVal() {\n+        return pdblVal;\n+    }\n+\n+    public void setDblVal(Double dblVal) {\n+        this.dblVal = dblVal;\n+    }\n+\n+    public Double getDblVal() {\n+        return dblVal;\n+    }\n+\n+    public void setStringVal(String stringVal) {\n+        this.stringVal = stringVal;\n+    }\n+\n+    public String getStringVal() {\n+        return stringVal;\n+    }\n+\n+    public Date getUtilDate() {\n+        return utilDate;\n+    }\n+\n+    public void setUtilDate(Date utilDate) {\n+        this.utilDate = utilDate;\n+    }\n+\n+    public java.sql.Date getSqlDate() {\n+        return sqlDate;\n+    }\n+\n+    public void setSqlDate(java.sql.Date sqlDate) {\n+        this.sqlDate = sqlDate;\n+    }\n+\n+    public void init() {\n+        setPshortVal((short) 1);\n+        setShortVal((short) 1);\n+        setIntVal(1);\n+        setPintVal(1);\n+        setLongVal(1L);\n+        setPlongVal(1L);\n+        setDblVal(1d);\n+        setPdblVal(1d);\n+        setFloatVal(1f);\n+        setPfloatVal(1f);\n+        setStringVal(\"1\");\n+        setUtilDate(new java.util.Date());\n+        setSqlDate(new java.sql.Date(getUtilDate().getTime()));\n+    }\n+}"},{"sha":"71af87c226e48faea80bb2d1a0f1b8c49bbff734","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/25af7c35ee04fd198e95a5e3767530852a432ee6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","raw_url":"https://github.com/apache/openjpa/raw/25af7c35ee04fd198e95a5e3767530852a432ee6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira1794/TestAggregateFunctions.java?ref=25af7c35ee04fd198e95a5e3767530852a432ee6","patch":"@@ -75,13 +75,18 @@ public void testAggregateJPQL() {\n         verifyResult(em, stringAggregateFunctions,\r\n                 new String[] { \"ae.stringVal\" }, true, true);\r\n \r\n+        verifyResult(em, stringAggregateFunctions,\r\n+                new String[]{\"ae.utilDate\", \"ae.sqlDate\"}, true, true);\r\n+\r\n         // Add a row to the table and re-test\r\n         AggEntity ae = new AggEntity();\r\n         ae.init();\r\n         em.getTransaction().begin();\r\n         em.persist(ae);\r\n         em.getTransaction().commit();\r\n \r\n+        verifyResult(em, stringAggregateFunctions,  \"ae.sqlDate\", java.sql.Date.class);\r\n+\r\n         // Verify all numeric types for all aggregate functions return a\r\n         // non-null value when there is a query result\r\n         verifyResult(em, numericAggregateFunctions, numericAttributes, false);\r\n@@ -90,6 +95,8 @@ public void testAggregateJPQL() {\n         verifyResult(em, stringAggregateFunctions,\r\n                 new String[] { \"ae.stringVal\" }, false);\r\n \r\n+        verifyResult(em, stringAggregateFunctions,  \"ae.utilDate\", java.util.Date.class);\r\n+\r\n         em.close();\r\n     }\r\n \r\n@@ -241,6 +248,21 @@ private void verifyResult(EntityManager em, String[] aggregates,\n         }\r\n     }\r\n \r\n+    private <T> void verifyResult(EntityManager em, String[] aggregates,\r\n+                              String attr, Class<T> expectedType) {\r\n+        for (String func : aggregates) {\r\n+            // JPQL with aggregate and aggregate in subselect\r\n+            String sql = \"SELECT \" + func + \"(\" + attr + \")\"\r\n+                    + \" FROM AggEntity ae WHERE \" + attr + \" <= \"\r\n+                    + \"(SELECT \" + func + \"(\"\r\n+                    + attr.replaceFirst(\"^ae.\", \"ae2.\")\r\n+                    + \") FROM AggEntity ae2)\";\r\n+            TypedQuery<T> q = em.createQuery(sql, expectedType);\r\n+            T intance = q.getSingleResult();\r\n+            assertEquals(intance.getClass(), expectedType);\r\n+        }\r\n+    }\r\n+\r\n     private void verifyQueryResult(Query q, boolean emptyRs) {\r\n         verifyQueryResult(q, emptyRs, false);\r\n     }\r"}]}

