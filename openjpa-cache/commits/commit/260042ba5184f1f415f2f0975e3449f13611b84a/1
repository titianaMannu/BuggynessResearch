{"sha":"260042ba5184f1f415f2f0975e3449f13611b84a","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2MDA0MmJhNTE4NGYxZjQxNWYyZjA5NzVlMzQ0OWYxMzYxMWI4NGE=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-01-02T08:58:03Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-01-02T08:58:03Z"},"message":"OPENJPA-2764 fix tests with random behaviour\n\nThe behaviour was random due to the undefined order in which\nreal databases return data.","tree":{"sha":"728aff1b23b3c4acd22dbd23bad1696c74067a43","url":"https://api.github.com/repos/apache/openjpa/git/trees/728aff1b23b3c4acd22dbd23bad1696c74067a43"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/260042ba5184f1f415f2f0975e3449f13611b84a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/260042ba5184f1f415f2f0975e3449f13611b84a","html_url":"https://github.com/apache/openjpa/commit/260042ba5184f1f415f2f0975e3449f13611b84a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/260042ba5184f1f415f2f0975e3449f13611b84a/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"9cdd90d041b1c699df0b2abb6a81358e395dfd4e","url":"https://api.github.com/repos/apache/openjpa/commits/9cdd90d041b1c699df0b2abb6a81358e395dfd4e","html_url":"https://github.com/apache/openjpa/commit/9cdd90d041b1c699df0b2abb6a81358e395dfd4e"}],"stats":{"total":188,"additions":91,"deletions":97},"files":[{"sha":"54504c061da5bcbbaaa05a8ab85eb54909e5f269","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -94,11 +94,7 @@ public void testOptimisticLockRecovery()\n         // via direct SQL in a separate transaction\n         int secondOpLockValue = firstOpLockValue + 1;\n \n-        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n-            OpenJPAPersistence.cast(em).getEntityManagerFactory();\n-        DataSource ds = (DataSource) emf.getConfiguration()\n-            .getConnectionFactory();\n-        Connection c = ds.getConnection();\n+        Connection c = (Connection)OpenJPAPersistence.cast(em).getConnection();\n         c.setAutoCommit(false);\n         PreparedStatement ps = c.prepareStatement(\n             \"UPDATE OPTIMISTIC_LOCK_INSTANCE SET OPLOCK = ? WHERE PK = ?\");"},{"sha":"9c5d77db3ce3b4578d0b849c02f1eb7c1d7f52e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -54,8 +54,8 @@ public void setUp() {\n         super.setUp(CLEAR_TABLES, Division.class,\n             Employee.class, PhoneNumber.class);\n         createObj();\n-       \trsAllPhones = getAll(PhoneNumber.class);\n-       \trsAllEmps = getAll(Employee.class);\n+        rsAllPhones = getAll(PhoneNumber.class);\n+        rsAllEmps = getAll(Employee.class);\n     }\n     @AllowFailure\n     public void testQueryInMemoryQualifiedId() throws Exception {\n@@ -81,15 +81,15 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         // test navigation thru VALUE\n         String query = \"select VALUE(e).empId from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         List rs = q.getResultList();\n \n         // test navigation thru KEY\n         query = \"select KEY(e), KEY(e).name from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n@@ -99,41 +99,41 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         assertEquals(d0.getName(), name);\n \n         query = \"select KEY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n         Division d = (Division) rs.get(0);\n \n         query = \"select KEY(p) from Employee e, \" +\n-            \" in (e.phones) p\";\n+            \" in (e.phones) p order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Employee.class);\n         rs = q.getResultList();\n         Division d2 = (Division) rs.get(0);\n \n         query = \"select VALUE(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n         Employee e = (Employee) rs.get(0);\n         em.clear();\n         query = \"select ENTRY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         query = \"select TYPE(KEY(p)) from Employee e, \" +\n-            \" in (e.phones) p\";\n+            \" in (e.phones) p  order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Employee.class);"},{"sha":"82750df0df95e45b5dbe6cb7d43c3de5e68f35cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/TestMany2ManyMapEx1.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/TestMany2ManyMapEx1.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/TestMany2ManyMapEx1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/TestMany2ManyMapEx1.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -89,7 +89,7 @@ else if (clz == Division.class)\n     public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n         String query = \"select KEY(e), p from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n@@ -98,7 +98,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         PhoneNumber p = (PhoneNumber) ((Object[]) rs.get(0))[1];\n \n         query = \"select KEY(p) from Employee e, \" +\n-                \" in (e.phones) p\";\n+                \" in (e.phones) p order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Employee.class);\n@@ -107,7 +107,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n@@ -121,7 +121,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         // test navigation thru KEY\n         em.clear();\n         query = \"select KEY(e), KEY(e).name from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n@@ -132,7 +132,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select KEY(p), KEY(p).name from Employee e, \" +\n-            \" in (e.phones) p\";\n+            \" in (e.phones) p order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Employee.class);"},{"sha":"62e7c10eb710dfd70413a0da37bf3ed91a02615b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -126,7 +126,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         // test navigation thru KEY\n         em.clear();"},{"sha":"574f163393a33c900f239282f9fe3645adf25121","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -108,7 +108,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         query = \"select KEY(e) from PhoneNumber p, \" +\n             \" in (p.emps) e WHERE value(e).empId = 1 and KEY(e) = 'String1'\";"},{"sha":"ed237ec6b9a523c31e78ebe158220f7969c6f4dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/TestMany2ManyMapEx3.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/TestMany2ManyMapEx3.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/TestMany2ManyMapEx3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/TestMany2ManyMapEx3.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -112,7 +112,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         // test navigation thru KEY\n         em.clear();"},{"sha":"773d17c8e7f87367efcd7e5694f1725e11c5f6be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/TestMany2ManyMapEx4.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/TestMany2ManyMapEx4.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/TestMany2ManyMapEx4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/TestMany2ManyMapEx4.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -96,7 +96,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n         // a collection valued path thru KEY in FROM clause\n         String query = \"select o.address.city from PhoneNumber p, \" +\n-            \" in (p.emps) e, in(KEY(e).offices) o\";\n+            \" in (p.emps) e, in(KEY(e).offices) o order by o.address.city\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n@@ -113,22 +113,22 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         // a path thru KEY nagivation apprear in WHERE clause\n         query = \"select o.address.city as city from PhoneNumber p, \" +\n             \" in (p.emps) e, in(KEY(e).offices) o \" +\n-            \" where o.address.city like '%1'\";\n+            \" where o.address.city like '%1' order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n \n         query = \"select KEY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n         Division d = (Division) rs.get(0);\n \n         query = \"select KEY(p) from Employee e, \" +\n-            \" in (e.phones) p\";\n+            \" in (e.phones) p order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Employee.class);\n@@ -137,14 +137,14 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.close();\n     }"},{"sha":"33bbe6f72bfc3f162026ed633f5ffa9aaf98bb0c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/TestMany2ManyMapEx5.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/TestMany2ManyMapEx5.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/TestMany2ManyMapEx5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/TestMany2ManyMapEx5.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -114,7 +114,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         query = \"select p from PhoneNumber p,\" +\n             \" in (p.emps) e where Key(e) = 'String2' order by p.number\";"},{"sha":"209085c34cf96b0988d193c8d0b291655ddf3e87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/TestMany2ManyMapEx6.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/TestMany2ManyMapEx6.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/TestMany2ManyMapEx6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/TestMany2ManyMapEx6.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -116,7 +116,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         // test GROUP BY qualified path\n         sql.clear();"},{"sha":"0eb4fce88e5a2c98f3f614354017fb2c8262ae58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/TestMany2ManyMapEx7.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/TestMany2ManyMapEx7.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/TestMany2ManyMapEx7.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/TestMany2ManyMapEx7.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -92,15 +92,15 @@ else if (clz == Employee.class)\n     public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n         String query = \"select KEY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         List rs = q.getResultList();\n         Division d = (Division) rs.get(0);\n \n         query = \"select KEY(p) from Employee e, \" +\n-            \" in (e.phones) p\";\n+            \" in (e.phones) p order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Employee.class);\n@@ -109,14 +109,14 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.close();\n     }"},{"sha":"142efa9837b7b9096b893551c5f10c47f9793b9c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/TestMany2ManyMapEx8.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/TestMany2ManyMapEx8.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/TestMany2ManyMapEx8.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/TestMany2ManyMapEx8.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -89,15 +89,15 @@ else if (clz == Employee.class)\n     public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n         String query = \"select KEY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         List rs = q.getResultList();\n         String d = (String) rs.get(0);\n \n         query = \"select KEY(p) from Employee e, \" +\n-            \" in (e.phones) p\";\n+            \" in (e.phones) p order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Employee.class);\n@@ -106,19 +106,19 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         // test KEY(e) of basic type in conditional expression\n         sql.clear();\n         query = \"select KEY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e where KEY(e) like '%1'\";\n+            \" in (p.emps) e where KEY(e) like '%1' order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);"},{"sha":"efb9421bc70bb8681bb5ce35385bfd8452ed702c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/TestMany2ManyMapEx9.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/TestMany2ManyMapEx9.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/TestMany2ManyMapEx9.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/TestMany2ManyMapEx9.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -94,15 +94,15 @@ else if (clz == Employee.class)\n     public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n         String query = \"select KEY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         List rs = q.getResultList();\n         FullName d = (FullName) rs.get(0);\n \n         query = \"select KEY(p) from Employee e, \" +\n-            \" in (e.phones) p\";\n+            \" in (e.phones) p order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Employee.class);\n@@ -111,14 +111,14 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from PhoneNumber p, \" +\n-            \" in (p.emps) e order by e.empId\";\n+            \" in (p.emps) e order by p.number, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, PhoneNumber.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.close();\n     }"},{"sha":"344bc6d5b2245ff209f0405c187aa1ca57a06a7f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/TestSpec10_1_26_Ex1.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/TestSpec10_1_26_Ex1.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/TestSpec10_1_26_Ex1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/TestSpec10_1_26_Ex1.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -74,10 +74,6 @@ public void setCandidate(Query q, Class clz)\n \n     public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n-        String query1 = \"select d.deptId, KEY(e), VALUE(e).empId \" +\n-        \"from Department d, in (d.empMap) e\";\n-List rs1 = em.createQuery(query1).getResultList();\n-System.out.println(\"rs size=\"+rs1.size());\n \n         String query = \"select KEY(e) from Department d, \" +\n             \" in (d.empMap) e order by d.deptId, e.empId\";\n@@ -96,12 +92,12 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         // test KEY(e) of basic type in conditional expression\n         sql.clear();\n         query = \"select KEY(e) from Department d, \" +\n-            \" in (d.empMap) e where KEY(e) > 1\";\n+            \" in (d.empMap) e where KEY(e) > 1 order by d.deptId, e.empId\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Department.class);"},{"sha":"84159dcb4916969ce1a02f151d9ec6c9e5fbe213","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/TestSpec10_1_26_Ex2.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/TestSpec10_1_26_Ex2.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/TestSpec10_1_26_Ex2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/TestSpec10_1_26_Ex2.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -73,7 +73,7 @@ public void setCandidate(Query q, Class clz)\n     public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n         String query = \"select KEY(e), KEY(e).name from Department d, \" +\n-            \" in (d.empMap) e where d.deptId = 1\";\n+            \" in (d.empMap) e where d.deptId = 1 order by d.deptId, e.empPK\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Department.class);\n@@ -84,14 +84,14 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Department d, \" +\n-            \" in (d.empMap) e  where d.deptId = 1\";\n+            \" in (d.empMap) e  where d.deptId = 1 order by d.deptId, e.empPK\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Department.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         // test GROUP BY qualified path\n         sql.clear();"},{"sha":"6b25b9b6a9a28a91e045f86a0d7fe93789c927c8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -92,7 +92,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         // test ORDER BY qualified path\n         query = \"select KEY(e), KEY(e).fName from Department d, \" +"},{"sha":"1d17d001fce6defcc6032239e930198eba8fc77b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex3/TestSpec10_1_27_Ex3.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex3/TestSpec10_1_27_Ex3.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex3/TestSpec10_1_27_Ex3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex3/TestSpec10_1_27_Ex3.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -121,7 +121,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         rs = q.getResultList();\n         me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.close();\n     }"},{"sha":"f3e95262e57cd669afcad45602c4a0532b0b16ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex4/Company.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex4/Company.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex4/Company.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex4/Company.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -33,8 +33,7 @@\n     int id;\n \n     @OneToMany\n-    Map<Division, VicePresident> organization =\n-        new HashMap<>();\n+    Map<Division, VicePresident> organization = new HashMap<>();\n \n     public int getId() {\n         return id;"},{"sha":"b62bf6afdbcfe411b3383f48710544836686feb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex4/TestSpec10_1_27_Ex4.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex4/TestSpec10_1_27_Ex4.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex4/TestSpec10_1_27_Ex4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex4/TestSpec10_1_27_Ex4.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -81,7 +81,7 @@ private void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n \n         String query = \"select KEY(e) from Company c, \" +\n-            \" in (c.organization) e order by c.id\";\n+            \" in (c.organization) e order by KEY(e).id\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -90,7 +90,7 @@ private void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c, \" +\n-            \" in (c.organization) e order by c.id\";\n+            \" in (c.organization) e order by KEY(e).id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -101,7 +101,7 @@ private void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select KEY(e) from Company c \" +\n-            \" left join c.organization e order by c.id\";\n+            \" left join c.organization e order by KEY(e).id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -110,13 +110,13 @@ private void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c \" +\n-            \" left join c.organization e order by c.id\";\n+            \" left join c.organization e order by KEY(e).id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         me = (Map.Entry) rs.get(0);\n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.close();\n     }"},{"sha":"e680f500d0d81a1796502ccc41125acab3b57d26","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex5/TestSpec10_1_27_Ex5.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex5/TestSpec10_1_27_Ex5.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex5/TestSpec10_1_27_Ex5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex5/TestSpec10_1_27_Ex5.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -83,7 +83,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n \n         String query = \"select KEY(e) from Company c, \" +\n-            \" in (c.orgs) e order by c.id\";\n+            \" in (c.orgs) e order by c.id, e.id\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -92,18 +92,18 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c, \" +\n-            \" in (c.orgs) e order by c.id\";\n+            \" in (c.orgs) e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.clear();\n         query = \"select KEY(e) from Company c \" +\n-            \" left join c.orgs e order by c.id\";\n+            \" left join c.orgs e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -112,13 +112,13 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c \" +\n-            \" left join c.orgs e order by c.id\";\n+            \" left join c.orgs e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         me = (Map.Entry) rs.get(0);\n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.close();\n     }"},{"sha":"29f77413edb4c4e38a2f653b423d0064fba7ec12","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/TestSpec10_1_27_Ex6.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/TestSpec10_1_27_Ex6.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/TestSpec10_1_27_Ex6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/TestSpec10_1_27_Ex6.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -81,7 +81,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n \n         String query = \"select KEY(e) from Company c, \" +\n-            \" in (c.organization) e order by c.id\";\n+            \" in (c.organization) e order by c.id, e.id\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -90,7 +90,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c, \" +\n-            \" in (c.organization) e order by c.id\";\n+            \" in (c.organization) e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -101,7 +101,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select KEY(e) from Company c \" +\n-            \" left join c.organization e order by c.id\";\n+            \" left join c.organization e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -110,13 +110,13 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c \" +\n-            \" left join c.organization e order by c.id\";\n+            \" left join c.organization e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         me = (Map.Entry) rs.get(0);\n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.close();\n     }"},{"sha":"551db66937b8071b39b5a21dba0933e6d5d89478","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/TestSpec10_1_27_Ex7.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/TestSpec10_1_27_Ex7.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/TestSpec10_1_27_Ex7.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/TestSpec10_1_27_Ex7.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -83,7 +83,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n \n         String query = \"select KEY(e) from Company c, \" +\n-            \" in (c.orgs) e order by c.id\";\n+            \" in (c.orgs) e order by c.id, e.id\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -92,18 +92,18 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c, \" +\n-            \" in (c.orgs) e order by c.id\";\n+            \" in (c.orgs) e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.clear();\n         query = \"select KEY(e) from Company c \" +\n-            \" left join c.orgs e order by c.id\";\n+            \" left join c.orgs e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -112,13 +112,13 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c \" +\n-            \" left join c.orgs e order by c.id\";\n+            \" left join c.orgs e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         me = (Map.Entry) rs.get(0);\n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n \n         em.close();\n     }"},{"sha":"e29df868a3d5fe10f616342fa693533ae86317fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex8/TestSpec10_1_27_Ex8.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex8/TestSpec10_1_27_Ex8.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex8/TestSpec10_1_27_Ex8.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex8/TestSpec10_1_27_Ex8.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -33,6 +33,8 @@\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n import junit.framework.Assert;\n+import static junit.framework.TestCase.assertEquals;\n+import org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6.Division;\n \n \n public class TestSpec10_1_27_Ex8 extends SQLListenerTestCase {\n@@ -85,7 +87,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n \n         String query = \"select KEY(e), e from Company c, \" +\n-            \" in (c.orgs) e order by c.id\";\n+            \" in (c.orgs) e order by c.id, e.id\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -95,18 +97,18 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c, \" +\n-            \" in (c.orgs) e order by c.id\";\n+            \" in (c.orgs) e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n         assertEquals(v.getId(), ((VicePresident) me.getValue()).getId());\n \n         em.clear();\n         query = \"select KEY(e), e from Company c \" +\n-            \" left join c.orgs e order by c.id\";\n+            \" left join c.orgs e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -116,14 +118,15 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c \" +\n-            \" left join c.orgs e order by c.id\";\n+            \" left join c.orgs e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         me = (Map.Entry) rs.get(0);\n \n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d.getFName(), ((FileName) me.getKey()).getFName());\n+        assertEquals(d.getLName(), ((FileName) me.getKey()).getLName());\n \n         assertEquals(v.getId(), ((VicePresident) me.getValue()).getId());\n "},{"sha":"52a209848343e0684a1508f3a98ed1ef9ee77449","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_29_ex1/TestSpec10_1_29_Ex1.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_29_ex1/TestSpec10_1_29_Ex1.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_29_ex1/TestSpec10_1_29_Ex1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_29_ex1/TestSpec10_1_29_Ex1.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -79,7 +79,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n \n         String query = \"select KEY(e), e from Company c, \" +\n-            \" in (c.organization) e order by c.id\";\n+            \" in (c.organization) e order by c.id, e.id\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -98,18 +98,18 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c, \" +\n-            \" in (c.organization) e order by c.id\";\n+            \" in (c.organization) e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n-        assertTrue(d.equals(me.getKey()));\n+        assertEquals(d, me.getKey());\n         assertEquals(v.getId(), ((VicePresident) me.getValue()).getId());\n \n         em.clear();\n         query = \"select KEY(e), e from Company c \" +\n-            \" left join c.organization e order by c.id\";\n+            \" left join c.organization e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);\n@@ -119,7 +119,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Company c \" +\n-            \" left join c.organization e order by c.id\";\n+            \" left join c.organization e order by c.id, e.id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Company.class);"},{"sha":"6ea174e76f12610712d812422c567aa5bfebb52c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_29_ex3/TestSpec10_1_29_Ex3.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_29_ex3/TestSpec10_1_29_Ex3.java","raw_url":"https://github.com/apache/openjpa/raw/260042ba5184f1f415f2f0975e3449f13611b84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_29_ex3/TestSpec10_1_29_Ex3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_29_ex3/TestSpec10_1_29_Ex3.java?ref=260042ba5184f1f415f2f0975e3449f13611b84a","patch":"@@ -78,7 +78,7 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n         EntityManager em = emf.createEntityManager();\n \n         String query = \"select KEY(e), e from Student s, \" +\n-            \" in (s.enrollment) e order by s.id\";\n+            \" in (s.enrollment) e order by s.id, KEY(e).id\";\n         Query q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Student.class);\n@@ -88,19 +88,19 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Student s, \" +\n-            \" in (s.enrollment) e order by s.id\";\n+            \" in (s.enrollment) e order by s.id, KEY(e).id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Student.class);\n         rs = q.getResultList();\n         Map.Entry me = (Map.Entry) rs.get(0);\n \n-        assertTrue(c.equals(me.getKey()));\n+        assertEquals(c, me.getKey());\n         assertEquals(s.getId(), ((Semester) me.getValue()).getId());\n \n         em.clear();\n         query = \"select KEY(e), e from Student s \" +\n-            \" left join s.enrollment e order by s.id\";\n+            \" left join s.enrollment e order by s.id, KEY(e).id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Student.class);\n@@ -110,18 +110,18 @@ public void queryQualifiedId(boolean inMemory) throws Exception {\n \n         em.clear();\n         query = \"select ENTRY(e) from Student s \" +\n-            \" left join s.enrollment e order by s.id\";\n+            \" left join s.enrollment e order by s.id, KEY(e).id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Student.class);\n         rs = q.getResultList();\n         me = (Map.Entry) rs.get(0);\n \n-        assertTrue(c.equals(me.getKey()));\n+        assertEquals(c, me.getKey());\n         assertEquals(s.getId(), ((Semester) me.getValue()).getId());\n \n         query = \"select KEY(e) from Student s \" +\n-            \" join s.enrollment e WHERE KEY(e).id = 1 order by s.id\";\n+            \" join s.enrollment e WHERE KEY(e).id = 1 order by s.id, KEY(e).id\";\n         q = em.createQuery(query);\n         if (inMemory)\n             setCandidate(q, Student.class);"}]}

