{"sha":"264356a23f3044a9e67d76aa47cd437dacdf5276","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2NDM1NmEyM2YzMDQ0YTllNjdkNzZhYTQ3Y2Q0MzdkYWNkZjUyNzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-12-16T23:58:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-12-16T23:58:54Z"},"message":"created methods for interacting with product prefixes; moved configuration loading mechanisms to these new methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@487919 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d66866c515618c723cd0baf9a1a91612c8d6579b","url":"https://api.github.com/repos/apache/openjpa/git/trees/d66866c515618c723cd0baf9a1a91612c8d6579b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/264356a23f3044a9e67d76aa47cd437dacdf5276","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/264356a23f3044a9e67d76aa47cd437dacdf5276","html_url":"https://github.com/apache/openjpa/commit/264356a23f3044a9e67d76aa47cd437dacdf5276","comments_url":"https://api.github.com/repos/apache/openjpa/commits/264356a23f3044a9e67d76aa47cd437dacdf5276/comments","author":null,"committer":null,"parents":[{"sha":"3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","url":"https://api.github.com/repos/apache/openjpa/commits/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","html_url":"https://github.com/apache/openjpa/commit/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a"}],"stats":{"total":265,"additions":181,"deletions":84},"files":[{"sha":"eeb1e493ae3f964d71ef17a1debfb872b8a1f9b8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.kernel.StoreManager;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.UserException;\n \n@@ -51,8 +52,8 @@\n      * The property name under which to name the concrete store manager\n      * class for this runtime.\n      */\n-    public static final String PROP_ABSTRACT_STORE =\n-        \"org.apache.openjpa.abstractstore.AbstractStoreManager\";\n+    private static final String PROP_ABSTRACT_STORE =\n+        \"abstractstore.AbstractStoreManager\";\n \n     private static final Localizer s_loc = Localizer.forPackage\n         (AbstractStoreBrokerFactory.class);\n@@ -86,7 +87,8 @@\n         // use a tmp store manager to get metadata about the capabilities of\n         // this runtime\n         Map map = cp.getProperties();\n-        String storePlugin = (String) map.get(PROP_ABSTRACT_STORE);\n+        String storePlugin = (String) map.get(ProductDerivations\n+            .getConfigurationKey(PROP_ABSTRACT_STORE, map));\n         String storeCls = Configurations.getClassName(storePlugin);\n         String storeProps = Configurations.getProperties(storePlugin);\n         AbstractStoreManager store = createStoreManager(storeCls,"},{"sha":"431d301851547f1d70f0b3b98357b7a8bcfc4ef4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -187,7 +187,7 @@ public void rollback() {\n      * Since this store manager does not provide optimistic locking\n      * support, this method always returns <code>true</code>.\n      */\n-    public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n+    public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         return true;\n     }\n \n@@ -210,7 +210,7 @@ public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n      * data into the object.\n      */\n     public abstract boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchConfiguration fetch, Object context);\n+        FetchConfiguration fetch, Object edata);\n \n     /**\n      * This method is invoked when OpenJPA needs to load additional data\n@@ -222,7 +222,7 @@ public abstract boolean initialize(OpenJPAStateManager sm, PCState state,\n      * data into the object.\n      */\n     public abstract boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchConfiguration fetch, int lockLevel, Object context);\n+        FetchConfiguration fetch, int lockLevel, Object edata);\n \n     /**\n      * This implementation just delegates to the proper singular\n@@ -232,8 +232,8 @@ public abstract boolean load(OpenJPAStateManager sm, BitSet fields,\n      * advantageous.\n      */\n     public Collection loadAll(Collection sms, PCState state, int load,\n-        FetchConfiguration fetch, Object context) {\n-        return ImplHelper.loadAll(sms, this, state, load, fetch, context);\n+        FetchConfiguration fetch, Object edata) {\n+        return ImplHelper.loadAll(sms, this, state, load, fetch, edata);\n     }\n \n     /**\n@@ -362,19 +362,18 @@ public Object getClientConnection() {\n      * by <code>subclasses</code>.\n      *  The implementation of the result provider will typically execute\n      * some sort of data store query to find all the applicable objects, loop\n-     * through the returned data, extracting object IDs from the data, and\n-     * invoking \n+     * through the results, extracting object IDs from the data, and invoke\n      * {@link StoreContext#find(Object,FetchConfiguration,BitSet,Object,int)}\n      * on each OID. When invoking this method, the first argument is the OID.\n      * The second is the given fetch configuration. The\n      * third argument is a mask of fields to exclude from loading; it will\n-     * typically be null. The last argument is an object that will be passed\n+     * typically be null. The fourth argument is an object that will be passed\n      * through to {@link #initialize} or {@link #load}, and typically will\n      * contain the actual data to load. For example, for a JDBC-based store\n      * manager, this might be the result set that is being iterated over. If\n      * this argument is <code>null</code>, then the {@link #initialize} or\n      * {@link #load} method will have to issue another command to the data\n-     * store in order to fetch the data to be loaded.\n+     * store in order to fetch the data to be loaded. \n      */\n     public abstract ResultObjectProvider executeExtent(ClassMetaData meta,\n         boolean subs, FetchConfiguration fetch);"},{"sha":"3e4c28456ca714bb5cf93ffb648fbf4264ec4489","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -64,22 +64,17 @@\n      * Extract the value of this property if set in the given provider.\n      */\n     public static Object get(ConfigurationProvider cp) {\n-        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n         Map props = cp.getProperties();\n-        Object bf;\n-        for (int i = 0; i < prefixes.length; i++) {\n-            bf = props.get(prefixes[i] + \".\" + KEY);\n-            if (bf != null)\n-                return  bf;\n-        }\n-        return null;\n+        return props.get(ProductDerivations.getConfigurationKey(KEY, props));\n     }\n \n     /**\n      * Set the value of this property in the given provider.\n      */\n     public static void set(ConfigurationProvider cp, String value) {\n-        cp.addProperty(\"openjpa.\" + KEY, value);\n+        String key = ProductDerivations.getConfigurationKey(KEY, \n+            cp.getProperties());\n+        cp.addProperty(key, value);\n     }\n \n     public BrokerFactoryValue() {"},{"sha":"3c9515cac341fd1001feace9754ebc2ff6f84bfe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -193,10 +193,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         dataCacheManagerPlugin.setInstantiatingGetter(\"getDataCacheManager\");\n \n         dataCachePlugin = addPlugin(\"DataCache\", false);\n-        aliases =\n-            new String[] { \"false\", null, \"true\",\n-                ConcurrentDataCache.class.getName(), \"concurrent\",\n-                ConcurrentDataCache.class.getName(), };\n+        aliases = new String[] { \n+            \"false\", null, \n+            \"true\", ConcurrentDataCache.class.getName(), \n+            \"concurrent\", ConcurrentDataCache.class.getName(), \n+        };\n         dataCachePlugin.setAliases(aliases);\n         dataCachePlugin.setDefault(aliases[0]);\n         dataCachePlugin.setString(aliases[0]);\n@@ -206,10 +207,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         dataCacheTimeout.set(-1);\n \n         queryCachePlugin = addPlugin(\"QueryCache\", true);\n-        aliases =\n-            new String[] { \"true\", ConcurrentQueryCache.class.getName(),\n-                \"concurrent\", ConcurrentQueryCache.class.getName(), \"false\",\n-                null, };\n+        aliases = new String[] { \n+            \"true\", ConcurrentQueryCache.class.getName(),\n+            \"concurrent\", ConcurrentQueryCache.class.getName(), \n+            \"false\", null, \n+        };\n         queryCachePlugin.setAliases(aliases);\n         queryCachePlugin.setDefault(aliases[0]);\n         queryCachePlugin.setString(aliases[0]);"},{"sha":"7ff47a2e50327dda8a59fbce1a4db017419b2249","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -33,7 +33,7 @@\n \r\n     /**\r\n      * Load default alias options into the given map.  Each entry maps an\r\n-     * alias to a broker factory class name.  Replace anything perviously \r\n+     * alias to a broker factory class name.  Replace anything previously \r\n      * under the desired keys.\r\n      */\r\n     public void putBrokerFactoryAliases(Map aliases);\r"},{"sha":"714153c7cd804803f04ed572865c521841166b64","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -141,7 +141,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n     /**\n      * Load the given state manager.\n      * Note that any collection or map types loaded into the state manager\n-     * will be proxied with the correct type; therefore the stroe manager\n+     * will be proxied with the correct type; therefore the store manager\n      * does not have to load the same concrete collection/map types as the\n      * instance declares. However, array types must be consistent with the\n      * array type stored by the persistence capable instance. If this method"},{"sha":"2e97b1ab7247bf2232becd42ab9d0e1718094857","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -296,7 +296,7 @@\n \n     /**\n      * Copy state from the given value to this one. Do not copy mapping\n-      * information.\n+     * information.\n      */\n-    public void copy (ValueMetaData vmd);\n+    public void copy(ValueMetaData vmd);\n }"},{"sha":"1c649f24ba2cb827d153f8db9b9edc6bfa2e1995","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":5,"deletions":21,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -665,27 +665,11 @@ private void put(Map map, Value val, Object o) {\n      * Look up the given value, testing all available prefixes.\n      */\n     private Object get(Map map, Value val, boolean setLoadKey) {\n-        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n-        String firstKey = null;\n-        String key;\n-        Object o = null;\n-        for (int i = 0; i < prefixes.length; i++) {\n-            key = prefixes[i] + \".\" + val.getProperty();\n-            if (firstKey == null) {\n-                o = map.get(key);\n-                if (o != null)\n-                    firstKey = key;\n-            } else if (map.containsKey(key)) {\n-                // if we've already found a property with a previous prefix,\n-                // then this is a collision.\n-                throw new IllegalStateException(\n-                    _loc.get(\"dup-with-different-prefixes\", firstKey, key)\n-                        .getMessage());\n-            }\n-        }\n-        if (firstKey != null && setLoadKey)\n-            val.setLoadKey(firstKey);\n-        return o;\n+        String key = ProductDerivations.getConfigurationKey(\n+            val.getProperty(), map);\n+        if (map.containsKey(key) && setLoadKey)\n+            val.setLoadKey(key);\n+        return map.get(key);\n     }\n \n     /**"},{"sha":"b3317a50856ee1694d833b8eab1c91dfa6cbeddd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":10,"deletions":26,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -513,47 +513,31 @@ public static Object lookup(String name) {\n      * configuration prefix.\n      */\n     public static boolean containsProperty(String key, Map props) {\n-        if (key == null || props == null)\n+        if (key == null || props == null || props.isEmpty())\n             return false;\n-        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n-        for (int i = 0; i < prefixes.length; i++)\n-            if (props.containsKey(prefixes[i] + \".\" + key))\n-                return true;\n-        return false;\n+        else\n+            return props.containsKey(\n+                ProductDerivations.getConfigurationKey(key, props));\n     }\n \n     /**\n      * Get the property under the given key, prefixed with any possible\n      * configuration prefix.\n      */\n-    public static Object getProperty(String key, Map props) {\n-        if (key == null || props == null)\n+    public static Object getProperty(String key, Map m) {\n+        if (key == null || m == null || m.isEmpty())\n             return null;\n-        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n-        Object val;\n-        for (int i = 0; i < prefixes.length; i++) {\n-            val = props.get(prefixes[i] + \".\" + key);\n-            if (val != null)\n-                return val;\n-        }\n-        return null;\n+        else \n+            return m.get(ProductDerivations.getConfigurationKey(key, m));\n     }\n \n     /**\n      * Remove the property under the given key, prefixed with any possible\n      * configuration prefix.\n      */\n     public static Object removeProperty(String key, Map props) {\n-        if (key == null || props == null)\n+        if (key == null || props == null || props.isEmpty())\n             return null;\n-        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n-        Object val = null;\n-        Object cur;\n-        for (int i = 0; i < prefixes.length; i++) {\n-            cur = props.remove(prefixes[i] + \".\" + key);\n-            if (cur != null && val == null)\n-                val = cur;\n-        }\n-        return val;\n+        return props.remove(ProductDerivations.getConfigurationKey(key, props));\n     }\n }"},{"sha":"6c53ea4e9134cca0cacd56d84c5ee3dd281b4953","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":50,"deletions":4,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -20,6 +20,7 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n import java.util.MissingResourceException;\n \n import org.apache.commons.lang.StringUtils;\n@@ -40,7 +41,7 @@\n     private static final ProductDerivation[] _derivations;\n     private static final String[] _derivationNames;\n     private static final Throwable[] _derivationErrors;\n-    private static final String[] _prefixes;\n+    private static String[] _prefixes;\n     static {\n         ClassLoader l = ProductDerivation.class.getClassLoader();\n         _derivationNames = Services.getImplementors(ProductDerivation.class, l);\n@@ -85,10 +86,11 @@\n                 && !\"openjpa\".equals(_derivations[i].getConfigurationPrefix()))\n                 prefixes.add(_derivations[i].getConfigurationPrefix());\n         }\n-        _prefixes = new String[1 + prefixes.size()];\n-        _prefixes[0] = \"openjpa\";\n+        String[] prefixArray = new String[1 + prefixes.size()];\n+        prefixArray[0] = \"openjpa\";\n         for (int i = 0; i < prefixes.size(); i++)\n-            _prefixes[i + 1] = (String) prefixes.get(i);\n+            prefixArray[i + 1] = (String) prefixes.get(i);\n+        setConfigurationPrefixes(prefixArray);\n     }\n \n     /**\n@@ -105,6 +107,50 @@\n         return _prefixes;\n     }\n \n+    /**\n+     * Set the configuration prefix array. This is package-visible for \n+     * testing purposes.\n+     * \n+     * @since 0.9.7\n+     */\n+    static void setConfigurationPrefixes(String[] prefixes) {\n+        _prefixes = prefixes;\n+    }\n+    \n+    /**\n+     * Determine the full key name for <code>key</code>, given the registered\n+     * prefixes and the entries in <code>map</code>. This method\n+     * computes the appropriate configuration prefix to use by looking \n+     * through <code>map</code> for a key starting with any of the known\n+     * configuration prefixes and ending with <code>key</code> and, if a\n+     * value is found, using the prefix of that key. Otherwise, it uses\n+     * the first registered prefix. \n+     * \n+     * @since 0.9.7\n+     */\n+    public static String getConfigurationKey(String partialKey, Map map) {\n+        String firstKey = null;\n+        for (int i = 0; map != null && i < _prefixes.length; i++) {\n+            String fullKey = _prefixes[i] + \".\" + partialKey;\n+            if (map.containsKey(fullKey)) {\n+                if (firstKey == null) \n+                    firstKey = fullKey;\n+                else {\n+                    // if we've already found a property with a previous \n+                    // prefix, then this is a collision.\n+                    throw new IllegalStateException(_loc.get(\n+                        \"dup-with-different-prefixes\", firstKey, fullKey)\n+                        .getMessage());\n+                }\n+            }\n+        }\n+        \n+        if (firstKey == null)\n+            return _prefixes[0] + \".\" + partialKey;\n+        else\n+            return firstKey;\n+    }\n+\n     /**\n      * Apply {@link ProductDerivation#beforeConfigurationConstruct} callbacks\n      * to the the given instance. Exceptions are swallowed."},{"sha":"5b2b3967abd290d3e82204d90e0608caa345e4b8","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java","raw_url":"https://github.com/apache/openjpa/raw/264356a23f3044a9e67d76aa47cd437dacdf5276/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java?ref=264356a23f3044a9e67d76aa47cd437dacdf5276","patch":"@@ -0,0 +1,85 @@\n+package org.apache.openjpa.lib.conf;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+\n+public class TestConfigurationProviderPrefixes\n+    extends TestCase {\n+    \n+    private static final String CUSTOM_PREFIX = \n+        TestConfigurationProviderPrefixes.class.getName();\n+\n+    private String[] _origPrefixes;\n+\n+    public void setUp() {\n+        _origPrefixes = ProductDerivations.getConfigurationPrefixes();\n+        List l = new ArrayList(Arrays.asList(_origPrefixes));\n+        l.add(CUSTOM_PREFIX);\n+        ProductDerivations.setConfigurationPrefixes(\n+            (String[]) l.toArray(new String[0]));\n+    }\n+    \n+    public void tearDown() {\n+        ProductDerivations.setConfigurationPrefixes(_origPrefixes);\n+    }\n+    \n+    public void testPrefixContents() { \n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        assertEquals(CUSTOM_PREFIX, prefixes[prefixes.length - 1]);\n+        assertEquals(\"openjpa\", prefixes[0]);\n+    }\n+    \n+    public void testPartialKeyAndNullMap() {\n+        assertEquals(\"openjpa.Foo\", \"Foo\", (Map) null, null);\n+    }\n+        \n+    public void testPartialKeyWithInvalidPrefix() {\n+        Map map = new HashMap();\n+        map.put(\"bar.Foo\", \"value\");\n+        assertEquals(\"openjpa.Foo\", \"Foo\", map, null);\n+    }\n+\n+    public void testPartialKeyWithoutMatch() {\n+        Map map = new HashMap();\n+        map.put(\"bar.Baz\", \"value\");\n+        assertEquals(\"openjpa.Foo\", \"Foo\", map, null);\n+    }\n+\n+    public void testPartialKeyWithOpenJPAMatch() {\n+        Map map = new HashMap();\n+        map.put(\"openjpa.Foo\", \"value\");\n+        assertEquals(\"openjpa.Foo\", \"Foo\", map, \"value\");\n+    }\n+\n+    public void testPartialKeyWithCustomMatch() {\n+        Map map = new HashMap();\n+        map.put(CUSTOM_PREFIX + \".Foo\", \"value\");\n+        assertEquals(CUSTOM_PREFIX + \".Foo\", \"Foo\", map, \"value\");\n+    }\n+    \n+    public void testPartialKeyDuplicateFullKeys() {\n+        Map map = new HashMap();\n+        map.put(CUSTOM_PREFIX + \".Foo\", \"value\");\n+        map.put(\"openjpa.Foo\", \"value\");\n+        try {\n+            ProductDerivations.getConfigurationKey(\"Foo\", map);\n+            fail(\"duplicate keys should result in an IllegalStateException\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+    private static void assertEquals(String fullKey, String partialKey, \n+        Map map, Object value) {\n+        assertEquals(fullKey, ProductDerivations.getConfigurationKey(\n+            partialKey, map));\n+        if (map != null)\n+            assertEquals(value, map.get(fullKey));\n+    }\n+}"}]}

