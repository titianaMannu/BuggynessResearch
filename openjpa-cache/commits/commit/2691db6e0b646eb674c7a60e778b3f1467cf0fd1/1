{"sha":"2691db6e0b646eb674c7a60e778b3f1467cf0fd1","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2OTFkYjZlMGI2NDZlYjY3NGM3YTYwZTc3OGIzZjE0NjdjZjBmZDE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-09T14:29:09Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-09T14:29:09Z"},"message":"add a log.trace to denote the tests are being skipped for some DBs\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@812974 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fb79fad9a86362da700012abb2e91da04524512","url":"https://api.github.com/repos/apache/openjpa/git/trees/1fb79fad9a86362da700012abb2e91da04524512"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2691db6e0b646eb674c7a60e778b3f1467cf0fd1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2691db6e0b646eb674c7a60e778b3f1467cf0fd1","html_url":"https://github.com/apache/openjpa/commit/2691db6e0b646eb674c7a60e778b3f1467cf0fd1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2691db6e0b646eb674c7a60e778b3f1467cf0fd1/comments","author":null,"committer":null,"parents":[{"sha":"a875ef52b1a9262faadd8c43ccf3f102fcced68e","url":"https://api.github.com/repos/apache/openjpa/commits/a875ef52b1a9262faadd8c43ccf3f102fcced68e","html_url":"https://github.com/apache/openjpa/commit/a875ef52b1a9262faadd8c43ccf3f102fcced68e"}],"stats":{"total":77,"additions":49,"deletions":28},"files":[{"sha":"e322efc943489c1a4aa91c7f7eb0bdee3b1c6108","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/2691db6e0b646eb674c7a60e778b3f1467cf0fd1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/2691db6e0b646eb674c7a60e778b3f1467cf0fd1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=2691db6e0b646eb674c7a60e778b3f1467cf0fd1","patch":"@@ -38,8 +38,8 @@\n \n public class TestMultipleSchemaNames extends SingleEMFTestCase {\n \n-    static DBDictionary dict = null;\n-    static Boolean skipTests = null;\n+    static private DBDictionary dict = null;\n+    static private Boolean skipTests = null;\n     \n     public void setUp() {\n         // Need to skip tests on MySQL, Oracle and MS SQL Server\n@@ -54,10 +54,12 @@ public void setUp() {\n                     (dict instanceof OracleDictionary) ||\n                     (dict instanceof SQLServerDictionary)) {\n                 skipTests = Boolean.TRUE;\n+                // do some logging\n+                emf.getConfiguration().getLog(\"Tests\").trace(\n+                    \"TestMultipleSchemaNames() - Skipping all tests - Not supported on this DB\");\n             } else {\n                 skipTests = Boolean.FALSE;\n-            }\n-            \n+            }            \n             closeEMF(emf);\n         }\n         \n@@ -434,7 +436,6 @@ public void testGeneratedIDENTITY() {\n         em.close();\n     }\n \n-\n     /**\n      * Create necessary schemas if running on PostgreSQL as it does\n      * not create them automatically."},{"sha":"b59a8b8974af335ba826fb314bc9f5a2362b245a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"modified","additions":43,"deletions":23,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/2691db6e0b646eb674c7a60e778b3f1467cf0fd1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/2691db6e0b646eb674c7a60e778b3f1467cf0fd1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=2691db6e0b646eb674c7a60e778b3f1467cf0fd1","patch":"@@ -30,19 +30,15 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n-import org.apache.openjpa.persistence.test.AllowFailure;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n import org.apache.openjpa.persistence.xmlmapping.entities.Customer;\n import org.apache.openjpa.persistence.xmlmapping.entities.EAddress;\n import org.apache.openjpa.persistence.xmlmapping.entities.Order;\n import org.apache.openjpa.persistence.xmlmapping.entities.Customer.CreditRating;\n import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.Address;\n-import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.\n-        CANAddress;\n-import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.\n-        ObjectFactory;\n-import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.\n-        USAAddress;\n+import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.CANAddress;\n+import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.ObjectFactory;\n+import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.USAAddress;\n \n /**\n  * Test query with predicates on persistent field mapped to XML column.\n@@ -56,7 +52,7 @@\n public class TestXMLCustomerOrder\n     extends SingleEMFTestCase {\n \n-    private boolean enabled = false;\n+    private static Boolean skipTests = null;\n     \n     private static final int ORDER_1_OID = 10;\n     private static final double ORDER_1_AMOUNT = 850;\n@@ -68,11 +64,23 @@\n \n     public void setUp() {\n         // skip test if dictionary has no support for XML column type\n-        if (!dictionarySupportsXMLColumn()) {\n-            return;\n+        if (skipTests == null) {\n+            if (!dictionarySupportsXMLColumn()) {\n+                skipTests = Boolean.TRUE;\n+                // do some logging\n+                OpenJPAEntityManagerFactorySPI emf = createEMF();\n+                emf.getConfiguration().getLog(\"Tests\").trace(\n+                    \"TestXMLCustomerOrder() - Skipping all tests - No XML Column support\");\n+                closeEMF(emf);\n+            } else {\n+                skipTests = Boolean.FALSE;\n+            }\n         }\n \n-        enabled = true;\n+        if (skipTests) {\n+            return;\n+        }\n+        \n         setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n             EAddress.class, CLEAR_TABLES);\n         EntityManager em = emf.createEntityManager();\n@@ -84,8 +92,9 @@ public void setUp() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLFieldProjection() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         List<Address> addrs = em.createQuery(\n@@ -107,8 +116,9 @@ public void testXMLFieldProjection() {\n     \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLFieldInEntity() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         List<Order> orders = em.createQuery(\n@@ -132,8 +142,9 @@ public void testXMLFieldInEntity() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLStringToXMLStringComparison() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         List<Object[]> orders = em.createQuery(\n@@ -160,8 +171,9 @@ public void testXMLStringToXMLStringComparison() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLStringToEmbeddedStringComparison() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         List<Order> orders = em.createQuery(\n@@ -178,8 +190,9 @@ public void testXMLStringToEmbeddedStringComparison() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLStringToConstantStringComparison() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         List<Order> orders = em.createQuery(\n@@ -195,8 +208,9 @@ public void testXMLStringToConstantStringComparison() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLStringToParameterStringComparison() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         Query query = em.createQuery(\n@@ -213,8 +227,9 @@ public void testXMLStringToParameterStringComparison() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testParameterStringToXMLStringComparison() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         Query query = em.createQuery(\n@@ -230,8 +245,9 @@ public void testParameterStringToXMLStringComparison() {\n     }\n \n     public void testUpdate() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -257,8 +273,9 @@ public void testUpdate() {\n     }\n \n     public void testNullify() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -281,8 +298,9 @@ public void testNullify() {\n     }\n \n     public void testXMLStringToConstantIntComparison() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         try {\n@@ -298,8 +316,9 @@ public void testXMLStringToConstantIntComparison() {\n     }\n \n     public void testXMLListToConstantStringComparison() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         try {\n@@ -315,8 +334,9 @@ public void testXMLListToConstantStringComparison() {\n     }\n \n     public void testSubclassPropertyInXMLFieldComparison() {\n-        if (!enabled)\n+        if (skipTests) {\n             return;\n+        }\n         \n         EntityManager em = emf.createEntityManager();\n         try {"}]}

