{"sha":"26aa776627e84f62767d689f3f71941a51687602","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2YWE3NzY2MjdlODRmNjI3NjdkNjg5ZjNmNzE5NDFhNTE2ODc2MDI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-08T18:39:07Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-05-08T18:39:07Z"},"message":"OPENJPA-1992: Throw exception if a JPQL query is missing the first positional parameter\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1100787 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d9daa6af6851425ac0662d4f554f036a0d35f752","url":"https://api.github.com/repos/apache/openjpa/git/trees/d9daa6af6851425ac0662d4f554f036a0d35f752"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26aa776627e84f62767d689f3f71941a51687602","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26aa776627e84f62767d689f3f71941a51687602","html_url":"https://github.com/apache/openjpa/commit/26aa776627e84f62767d689f3f71941a51687602","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26aa776627e84f62767d689f3f71941a51687602/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6fc7d55a09c87112d2ade2f451c0c11947f9fab0","url":"https://api.github.com/repos/apache/openjpa/commits/6fc7d55a09c87112d2ade2f451c0c11947f9fab0","html_url":"https://github.com/apache/openjpa/commit/6fc7d55a09c87112d2ade2f451c0c11947f9fab0"}],"stats":{"total":52,"additions":46,"deletions":6},"files":[{"sha":"7b22b8d16b23a87bdc2b562bb751bc18bd58dd08","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26aa776627e84f62767d689f3f71941a51687602/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/26aa776627e84f62767d689f3f71941a51687602/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=26aa776627e84f62767d689f3f71941a51687602","patch":"@@ -334,6 +334,7 @@ public final void validate(StoreQuery q) {\n             QueryExpressions exps = assertQueryExpression();    \n             ValidateGroupingExpressionVisitor.validate(q.getContext(), exps); \n         }\n+        \n \n         public void getRange(StoreQuery q, Object[] params, Range range) {\n             QueryExpressions exps = assertQueryExpression();\n@@ -490,7 +491,7 @@ public final Map getUpdates(StoreQuery q) {\n         public boolean isPacking(StoreQuery q) {\n             return false;\n         }\n-\n+        \n         /**\n          * Throws an exception if select or having clauses contain \n          * non-aggregate, non-grouped paths."},{"sha":"d83cdb7d3831e8589bb852bc6b993e07843fdbee","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/26aa776627e84f62767d689f3f71941a51687602/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/26aa776627e84f62767d689f3f71941a51687602/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=26aa776627e84f62767d689f3f71941a51687602","patch":"@@ -45,7 +45,6 @@\n import org.apache.openjpa.kernel.ResultShape;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.kernel.exps.AbstractExpressionBuilder;\n-import org.apache.openjpa.kernel.exps.Constant;\n import org.apache.openjpa.kernel.exps.Context;\n import org.apache.openjpa.kernel.exps.Expression;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n@@ -311,7 +310,10 @@ QueryExpressions getQueryExpressions() {\n \n         exps.accessPath = getAccessPath();\n         exps.hasInExpression = this.hasParameterizedInExpression;\n-        \n+\n+        // verify parameters are consistent. \n+        validateParameters();\n+\n         return exps;\n     }\n \n@@ -2465,5 +2467,23 @@ public String toString ()\n \t\t\treturn this.query;\n \t\t}\n \t}\n+    \n+    \n+    // throws an exception if there are numeric parameters which do not start with 1. \n+    private void validateParameters() {\n+        if(parameterTypes == null || parameterTypes.isEmpty()) { \n+            return;\n+        }\n+        \n+        Object firstKey = parameterTypes.keySet().iterator().next();\n+        if (firstKey != null) { // paranoia\n+            if (firstKey instanceof Number) {\n+                if (!parameterTypes.keySet().contains(1)) {\n+                    throw new UserException(_loc.get(\"missing-positional-parameter\", resolver.getQueryContext()\n+                        .getQueryString(), parameterTypes.keySet().toString()));\n+                }\n+            }\n+        }\n+    }\n }\n "},{"sha":"45542f70165b5446435e78645cf99b3c4816b339","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/26aa776627e84f62767d689f3f71941a51687602/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","raw_url":"https://github.com/apache/openjpa/raw/26aa776627e84f62767d689f3f71941a51687602/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java?ref=26aa776627e84f62767d689f3f71941a51687602","patch":"@@ -82,3 +82,4 @@ public String getLanguage() {\n         return JPQLParser.LANG_JPQL;\n     }\n }\n+"},{"sha":"b7814874e6371e1b66667863ff4bbfd28ed190e0","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26aa776627e84f62767d689f3f71941a51687602/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/26aa776627e84f62767d689f3f71941a51687602/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=26aa776627e84f62767d689f3f71941a51687602","patch":"@@ -87,3 +87,5 @@ cant-bulk-update-embeddable: Bulk update of embeddables: \"{0}\" is not allowed.\n cant-groupby-embeddable: Grouping by embeddables: \"{0}\" is not allowed.\n cant-groupby-key-value-embeddable: Grouping by embeddables: \"{0}({1})\" is not allowed.\n no-constructor: NEW constructor operation could not resolve class named \"{0}\".\n+missing-positional-parameter: Query \"{0}\" did not contain positional parameter 1. \\\n+    JPQL positional parameters must start at 1. Detected parameters \"{1}\"."},{"sha":"73415444458b345149743e1cd6ea301e979dc332","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/26aa776627e84f62767d689f3f71941a51687602/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","raw_url":"https://github.com/apache/openjpa/raw/26aa776627e84f62767d689f3f71941a51687602/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java?ref=26aa776627e84f62767d689f3f71941a51687602","patch":"@@ -18,8 +18,14 @@\n  */\n package org.apache.openjpa.persistence.jpql.functions;\n \n+import java.util.HashSet;\n+import java.util.Set;\n+\n import javax.persistence.EntityManager;\n \n+import org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.persistence.ArgumentException;\n import org.apache.openjpa.persistence.common.apps.Address;\n import org.apache.openjpa.persistence.common.apps.CompUser;\n import org.apache.openjpa.persistence.common.apps.FemaleUser;\n@@ -127,10 +133,20 @@ public void testNativeSQL() {\n           .executeUpdate();\n         em.getTransaction().commit();\n         assertEquals(1, count);\n-        \n-        \n     }\n-\n+    \n+    public void testMissingFirstPositionalParameter() {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"UPDATE CompUser e set e.name= ?2, e.age = ?4 \" + \"WHERE e.userid = ?3\";\n+        try {\n+            em.createQuery(query);\n+            fail(\"Did not get UserException with invalid JPQL query\");\n+        } catch (ArgumentException ae) {\n+            // expected\n+        }\n+        em.close();\n+    }\n+    \n     public CompUser createUser(String name, String cName, int age,\n         boolean isMale) {\n         CompUser user = null;"}]}

