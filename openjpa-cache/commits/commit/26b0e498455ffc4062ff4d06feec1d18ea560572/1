{"sha":"26b0e498455ffc4062ff4d06feec1d18ea560572","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2YjBlNDk4NDU1ZmZjNDA2MmZmNGQwNmZlZWMxZDE4ZWE1NjA1NzI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-14T17:38:00Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-08-14T17:38:00Z"},"message":"Help Catalina committing OPENJPA-313.r564688.patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@565845 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a2953c05deaaac7da12f4b13bf78553d2cb94841","url":"https://api.github.com/repos/apache/openjpa/git/trees/a2953c05deaaac7da12f4b13bf78553d2cb94841"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26b0e498455ffc4062ff4d06feec1d18ea560572","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26b0e498455ffc4062ff4d06feec1d18ea560572","html_url":"https://github.com/apache/openjpa/commit/26b0e498455ffc4062ff4d06feec1d18ea560572","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26b0e498455ffc4062ff4d06feec1d18ea560572/comments","author":null,"committer":null,"parents":[{"sha":"99ecf9564bc9f260bde9f702b2a79b121414345a","url":"https://api.github.com/repos/apache/openjpa/commits/99ecf9564bc9f260bde9f702b2a79b121414345a","html_url":"https://github.com/apache/openjpa/commit/99ecf9564bc9f260bde9f702b2a79b121414345a"}],"stats":{"total":30,"additions":28,"deletions":2},"files":[{"sha":"4619016329576ecf8fee9078ad636597c731354c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/26b0e498455ffc4062ff4d06feec1d18ea560572/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/26b0e498455ffc4062ff4d06feec1d18ea560572/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=26b0e498455ffc4062ff4d06feec1d18ea560572","patch":"@@ -30,6 +30,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n@@ -189,8 +190,33 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n             }\n         }\n         Object oid = ApplicationIds.fromPKValues(vals, cls);\n-        if (!subs && oid instanceof OpenJPAId)\n-            ((OpenJPAId) oid).setManagedInstanceType(cls.getDescribedType());\n+        if (oid instanceof OpenJPAId) {\n+            Class type = cls.getDescribedType();\n+            if (!subs)\n+                // non-polymorphic relations\n+                ((OpenJPAId) oid).setManagedInstanceType(type);\n+            else if (cls.getDiscriminator() != null\n+                && !StringUtils.equals(\"none\",\n+                    cls.getDiscriminator().getStrategy().getAlias())) {\n+                // for polymorphic relations,\n+                // the type field in the oid is initially set to base type.\n+                // If the discriminator value is preset in the current result,\n+                // then the type field needs reset based on discriminator value.\n+                // If the discriminator value is not present or invalid,\n+                // ignore any exceptions being thrown.\n+                // The discriminator value can potentially be null in the \n+                // database because the mapping tool does not enforce the \n+                // discriminator column 'not null'.\n+                // We can not prevent other non-jpa applications from inserting\n+                // a null or invalid discriminator value.\n+                res.startDataRequest(cls.getDiscriminator());\n+                try {\n+                    type = cls.getDiscriminator().getClass(store, cls, res);\n+                    ((OpenJPAId) oid).setManagedInstanceType(type);\n+                } catch (Exception e) {}\n+                res.endDataRequest();  \n+            } \n+        }\n         return oid;\n     }\n "}]}

