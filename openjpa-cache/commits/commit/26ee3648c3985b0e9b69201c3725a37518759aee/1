{"sha":"26ee3648c3985b0e9b69201c3725a37518759aee","node_id":"MDY6Q29tbWl0MjA2MzY0OjI2ZWUzNjQ4YzM5ODViMGU5YjY5MjAxYzM3MjVhMzc1MTg3NTlhZWU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-12T19:07:34Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-12T19:07:34Z"},"message":"removed some extraneous JDO / licensing-related code\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@421375 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"43cd9dea489eb1ada68ed4b7c76d3c67a46b2823","url":"https://api.github.com/repos/apache/openjpa/git/trees/43cd9dea489eb1ada68ed4b7c76d3c67a46b2823"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/26ee3648c3985b0e9b69201c3725a37518759aee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/26ee3648c3985b0e9b69201c3725a37518759aee","html_url":"https://github.com/apache/openjpa/commit/26ee3648c3985b0e9b69201c3725a37518759aee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/26ee3648c3985b0e9b69201c3725a37518759aee/comments","author":null,"committer":null,"parents":[{"sha":"3feb467900547ecac8be5acadcdb02f79433db33","url":"https://api.github.com/repos/apache/openjpa/commits/3feb467900547ecac8be5acadcdb02f79433db33","html_url":"https://github.com/apache/openjpa/commit/3feb467900547ecac8be5acadcdb02f79433db33"}],"stats":{"total":129,"additions":29,"deletions":100},"files":[{"sha":"86a4261dfc38563c3ca4814964a8d152a3550050","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -70,8 +70,6 @@ public PCClassFileTransformer(MetaDataRepository repos, Options opts,\n         flags.addDefaultConstructor = opts.removeBooleanProperty\n             (\"addDefaultConstructor\", \"AddDefaultConstructor\",\n                 flags.addDefaultConstructor);\n-        flags.jdoEnhance = opts.removeBooleanProperty\n-            (\"jdoEnhance\", \"JdoEnhance\", flags.jdoEnhance);\n         flags.enforcePropertyRestrictions = opts.removeBooleanProperty\n             (\"enforcePropertyRestrictions\", \"EnforcePropertyRestrictions\",\n                 flags.enforcePropertyRestrictions);\n@@ -118,7 +116,6 @@ public PCClassFileTransformer(MetaDataRepository repos,\n                 new Project().loadClass(new ByteArrayInputStream(bytes),\n                     _loader), _repos);\n             enhancer.setAddDefaultConstructor(_flags.addDefaultConstructor);\n-            enhancer.setJDOEnhance(_flags.jdoEnhance);\n             enhancer.setEnforcePropertyRestrictions\n                 (_flags.enforcePropertyRestrictions);\n "},{"sha":"e4cd9b744c70044c0356e4e5b90f904acc15903f","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -30,13 +30,13 @@\n  * {@link PersistenceCapable} interface at runtime.  The agent is launched\n  * at JVM startup from the command line:</p>\n  * <p/>\n- * <code>java -javaagent:org.apache.openjpa.jar[=&lt;options&gt;]</code>\n+ * <code>java -javaagent:openjpa.jar[=&lt;options&gt;]</code>\n  * <p/>\n- * <p>The options string should be formatted as a OpenJPA plugin, and may contain\n- * any properties understood by the OpenJPA enhancer or any configuration\n- * properties.  For example:</p>\n+ * <p>The options string should be formatted as a OpenJPA plugin, and may \n+ * contain any properties understood by the OpenJPA enhancer or any \n+ * configuration properties.  For example:</p>\n  * <p/>\n- * <code>java -javaagent:org.apache.openjpa.jar=JdoEnhance=true,LicenseKey=xxx</code>\n+ * <code>java -javaagent:openjpa.jar</code>\n  *\n  * @author Abe White\n  */"},{"sha":"4a48dd07a8be839598203383f77e322d16e7f780","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -35,7 +35,6 @@\n  * <li><code>directory</code></li>\n  * <li><code>addDefaultConstructor</code></li>\n  * <li><code>tmpClassLoader</code></li>\n- * <li><code>jdoEnhance</code></li>\n  * <li><code>enforcePropertyRestrictions</code></li>\n  * </ul></p>\n  */\n@@ -60,13 +59,6 @@ public void setAddDefaultConstructor(boolean addDefCons) {\n         flags.addDefaultConstructor = addDefCons;\n     }\n \n-    /**\n-     * Whether to perform JDO enhancement in addition to OpenJPA enhancement.\n-     */\n-    public void setJdoEnhance(boolean jdoEnhance) {\n-        flags.jdoEnhance = jdoEnhance;\n-    }\n-\n     /**\n      * Set whether to fail if the persistent type uses property access and\n      * bytecode analysis shows that it may be violating OpenJPA's property"},{"sha":"f02c1f655ed34a808a25f700cf268cdc5df67a46","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -1228,12 +1228,11 @@ private CodeFormat newCodeFormat() {\n      * <p>Where the following options are recognized.\n      * <ul>\n      * <li><i>-properties/-p &lt;properties file&gt;</i>: The path to a OpenJPA\n-     * properties file containing information such as the license key,\n-     * as outlined in {@link Configuration}; optional.</li>\n+     * properties file containing information as outlined in \n+     * {@link Configuration}; optional.</li>\n      * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n      * properties of the standard OpenJPA {@link OpenJPAConfiguration} can be\n-     * set by using their names and supplying a value; for example:\n-     * <code>-licenseKey adslfja83r3lkadf</code></li>\n+     * set by using their names and supplying a value.</li>\n      * <li><i>-directory/-d &lt;output directory&gt;</i>: Path to the base\n      * source directory.  The package structure will be created beneath\n      * this directory if necessary.  If not specified, the tool will try"},{"sha":"d6172dda48273f6b17d8dea8695fbc4572c16091","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":16,"deletions":44,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -49,6 +49,7 @@\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n+import org.apache.openjpa.lib.util.Services;\n import org.apache.openjpa.lib.util.TemporaryClassLoader;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -114,9 +115,8 @@\n     private Collection _oids = null;\n \n     private boolean _defCons = true;\n-    private boolean _jdo = false;\n     private boolean _fail = false;\n-    private AuxiliaryEnhancer _auxEnhance = null;\n+    private AuxiliaryEnhancer[] _auxEnhancers = null;\n     private File _dir = null;\n     private BytecodeWriter _writer = null;\n     private Map _backingFields = null;\n@@ -205,20 +205,6 @@ public void setAddDefaultConstructor(boolean addDefaultConstructor) {\n         _defCons = addDefaultConstructor;\n     }\n \n-    /**\n-     * Whether to perform JDO enhancement in addition to OpenJPA enhancement.\n-     */\n-    public boolean getJDOEnhance() {\n-        return _jdo;\n-    }\n-\n-    /**\n-     * Whether to perform JDO enhancement in addition to OpenJPA enhancement.\n-     */\n-    public void setJDOEnhance(boolean jdoEnhance) {\n-        _jdo = jdoEnhance;\n-    }\n-\n     /**\n      * Whether to fail if the persistent type uses property access and\n      * bytecode analysis shows that it may be violating OpenJPA's property\n@@ -460,7 +446,6 @@ private static BCField findField(BCMethod meth, Instruction template,\n         if (meth.isStatic())\n             return null;\n \n-        boolean nonFieldsFound = false;\n         Code code = meth.getCode(false);\n         if (code == null)\n             return null;\n@@ -2647,23 +2632,18 @@ private BCClass getObjectIdBytecode(Class cls) {\n      * Allow any registered auxiliary code generators to run.\n      */\n     private void runAuxiliaryEnhancers() {\n-        if (!_jdo)\n-            return;\n-\n-        if (_auxEnhance == null) {\n-            try {\n-                // make sure JDO libs are available before creating a JDO\n-                // enhancer\n-                Class c = Class.forName(\"javax.jdo.spi.PersistenceCapable\");\n-                c = Class.forName(\"org.apache.openjpa.jdo.JDOEnhancer\", true,\n-                    AuxiliaryEnhancer.class.getClassLoader());\n-                _auxEnhance = (AuxiliaryEnhancer) c.newInstance();\n-            }\n-            catch (Throwable t) {\n-                throw new GeneralException(t);\n-            }\n-        }\n-        _auxEnhance.run(_pc, _meta);\n+\tif (_auxEnhancers == null) {\n+\t    try {\n+\t\tClass[] classes = Services\n+\t\t    .getImplementorClasses(AuxiliaryEnhancer.class);\n+\t\t_auxEnhancers = new AuxiliaryEnhancer[classes.length];\n+\t\tfor (int i = 0; i < _auxEnhancers.length; i++)\n+\t\t    _auxEnhancers[i] = (AuxiliaryEnhancer) classes[i]\n+\t\t\t.newInstance();\n+\t    } catch (Throwable t) {\n+\t\tthrow new GeneralException(t);\n+\t    }\n+\t}\n     }\n \n     /**\n@@ -3364,21 +3344,17 @@ private static void transferCodeAttributes(BCMethod from, BCMethod to) {\n      * <p>Where the following options are recognized.\n      * <ul>\n      * <li><i>-properties/-p &lt;properties file&gt;</i>: The path to a OpenJPA\n-     * properties file containing information such as the license key,\n-     * as outlined in {@link Configuration}; optional.</li>\n+     * properties file containing information as outlined in \n+     * {@link Configuration}; optional.</li>\n      * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n      * properties of the standard OpenJPA {@link OpenJPAConfiguration} can be\n      * set by using their names and supplying a value; for example:\n-     * <code>-licenseKey adslfja83r3lkadf</code></li>\n      * <li><i>-directory/-d &lt;build directory&gt;</i>: The path to the base\n      * directory where enhanced classes are stored.  By default, the\n      * enhancer overwrites the original .class file with the enhanced\n      * version.  Use this option to store the generated .class file in\n      * another directory.  The package structure will be created beneath\n      * the given directory.</li>\n-     * <li><i>-jdoEnhance/-jdo [true/t | false/f]</i>: Whether to\n-     * enhance to implement JDO <code>PersistenceCapable</code> interface\n-     * in addition to OpenJPA enhancement.  Defaults to false.</li>\n      * <li><i>-addDefaultConstructor/-adc [true/t | false/f]</i>: Whether to\n      * add a default constructor to persistent classes missing one, as\n      * opposed to throwing an exception.  Defaults to true.</li>\n@@ -3434,8 +3410,6 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             (\"addDefaultConstructor\", \"adc\", flags.addDefaultConstructor);\n         flags.tmpClassLoader = opts.removeBooleanProperty\n             (\"tmpClassLoader\", \"tcl\", flags.tmpClassLoader);\n-        flags.jdoEnhance = opts.removeBooleanProperty(\"jdoEnhance\", \"jdo\",\n-            flags.jdoEnhance);\n         flags.enforcePropertyRestrictions = opts.removeBooleanProperty\n             (\"enforcePropertyRestrictions\", \"epr\",\n                 flags.enforcePropertyRestrictions);\n@@ -3491,7 +3465,6 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n                 enhancer.setBytecodeWriter(writer);\n             enhancer.setDirectory(flags.directory);\n             enhancer.setAddDefaultConstructor(flags.addDefaultConstructor);\n-            enhancer.setJDOEnhance(flags.jdoEnhance);\n             status = enhancer.run();\n             if (status == ENHANCE_NONE)\n                 log.info(_loc.get(\"enhance-norun\"));\n@@ -3527,7 +3500,6 @@ else if (status == ENHANCE_AWARE) {\n         public File directory = null;\n         public boolean addDefaultConstructor = true;\n         public boolean tmpClassLoader = true;\n-\t\tpublic boolean jdoEnhance = false;\n \t\tpublic boolean enforcePropertyRestrictions = false;\n \t}\n "},{"sha":"01fcdb1dae015d7826128e729043dd364b6d7504","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -48,8 +48,6 @@\n     /**\n      * Return the context assiciated with this configuration;\n      * may be null if it has not been set or this object has been serialized.\n-     * In this case, the fetch configuration may not allow the setting of\n-     * certain properties that require non-standard license capabilities.\n      */\n     public StoreContext getContext();\n "},{"sha":"ec3f2a1b9bce9abf1fdb2455446e7aece93bcc44","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -192,9 +192,6 @@ public synchronized boolean hasFetchGroup(Set groups) {\n \n     /**\n      * Adds a fetch group of the given name to this receiver.\n-     * Checks if license allows for adding custom fetch groups. Makes\n-     * an exception if the given name matches with the default fetch group\n-     * name.\n      *\n      * @param name must not be null or empty.\n      */"},{"sha":"4fa2830af1538c2b2f2ecb18a171e1243dbe6fbe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -353,8 +353,8 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n      * Return a query implementation suitable for this store.  If the query\n      * is iterated within a data store transaction, returned instances should\n      * be locked.  Return null if this store does not support native execution\n-     * of the given language.  OpenJPA can execute JDOQL and JPQL in memory\n-     * even without back end support.\n+     * of the given language.  OpenJPA can execute JPQL in memory even without \n+     * back end support.\n      *\n      * @param    language the query language\n      */"},{"sha":"e14b06062c282b3681c79214cdf03e3672d3f8bb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -152,7 +152,6 @@\n     private int _cacheTimeout = Integer.MIN_VALUE;\n     private Boolean _detachable = null;\n     private String _detachState = DEFAULT_STRING;\n-    private Boolean _auditable = null;\n     private String _alias = null;\n     private int _versionIdx = Integer.MIN_VALUE;\n \n@@ -1342,27 +1341,6 @@ private Boolean usesDetachedState(String detachedField,\n         return null;\n     }\n \n-    /**\n-     * Whether this class is auditable.\n-     */\n-    public boolean isAuditable() {\n-        if (_auditable == null) {\n-            if (_super != null)\n-                _auditable = (getPCSuperclassMetaData().isAuditable())\n-                    ? Boolean.TRUE : Boolean.FALSE;\n-            else\n-                _auditable = Boolean.FALSE;\n-        }\n-        return _auditable.booleanValue();\n-    }\n-\n-    /**\n-     * Whether this class is auditable.\n-     */\n-    public void setAuditable(boolean auditable) {\n-        _auditable = (auditable) ? Boolean.TRUE : Boolean.FALSE;\n-    }\n-\n     /**\n      * Clear cached field data.\n      */\n@@ -2117,8 +2095,6 @@ public void copy(ClassMetaData meta) {\n             _detachable = meta._detachable;\n         if (_detachState == DEFAULT_STRING)\n             _detachState = meta.getDetachedState();\n-        if (_auditable == null)\n-            _auditable = (meta.isAuditable()) ? Boolean.TRUE : Boolean.FALSE;\n \n         // synch field information; first remove extra fields\n         clearFieldCache();"},{"sha":"a38811764edc94531c94119bc17af257a80e9552","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -229,12 +229,10 @@ public void record() {\n      * <ul>\n      * <li><i>-properties/-p &lt;properties file or resource&gt;</i>: The path\n      * or resource name of a OpenJPA properties file containing information\n-     * such as the license key\tdata as outlined in\n-     * {@link OpenJPAConfiguration}.  Optional.</li>\n+     * as outlined in {@link OpenJPAConfiguration}.  Optional.</li>\n      * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n      * properties of the OpenJPA {@link OpenJPAConfiguration} can be set by\n-     * using their\tnames and supplying a value.  For example:\n-     * <code>-licenseKey adslfja83r3lkadf</code></li>\n+     * using their names and supplying a value.</li>\n      * <li><i>-file/-f &lt;stdout | output file or resource&gt;</i>: The path\n      * or resource name of a file the metadata should be generated to.\n      * If the given file already contains metadata, the generated"},{"sha":"77fe6c6566f443f55eb5124a1633b51405f2daf9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/26ee3648c3985b0e9b69201c3725a37518759aee/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=26ee3648c3985b0e9b69201c3725a37518759aee","patch":"@@ -31,7 +31,7 @@\n  * the configuration as a bean-like task. E.g., you can do:\n  * <p/>\n  * <code> &lt;mytask&rt;<br />\n- * &nbsp;&nbsp;&lt;config licenseKey=\"key\" connectionUserName=\"foo\"/&rt;<br />\n+ * &nbsp;&nbsp;&lt;config connectionUserName=\"foo\"/&rt;<br />\n  * &lt;/mytask&rt;\n  * </code>\n  * The defailt configuration for the system will be used if the"}]}

