{"sha":"27563987ef2d4d4dc88e22070a8c3152ae310ca0","node_id":"MDY6Q29tbWl0MjA2MzY0OjI3NTYzOTg3ZWYyZDRkNGRjODhlMjIwNzBhOGMzMTUyYWUzMTBjYTA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-10-26T17:08:05Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-10-26T17:08:05Z"},"message":"First step in resolving OPENJPA-63.  This change removes the usage of internal WebSphere transaction-related APIs and replaces it with the public ExtendedJTATransaction interface usage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@468064 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3f8a8549ed248791fb5dccc3765ed5451e9b9a8c","url":"https://api.github.com/repos/apache/openjpa/git/trees/3f8a8549ed248791fb5dccc3765ed5451e9b9a8c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/27563987ef2d4d4dc88e22070a8c3152ae310ca0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/27563987ef2d4d4dc88e22070a8c3152ae310ca0","html_url":"https://github.com/apache/openjpa/commit/27563987ef2d4d4dc88e22070a8c3152ae310ca0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/27563987ef2d4d4dc88e22070a8c3152ae310ca0/comments","author":null,"committer":null,"parents":[{"sha":"5bb9249ee1c3a53f70c982162890b701afd6e31e","url":"https://api.github.com/repos/apache/openjpa/commits/5bb9249ee1c3a53f70c982162890b701afd6e31e","html_url":"https://github.com/apache/openjpa/commit/5bb9249ee1c3a53f70c982162890b701afd6e31e"}],"stats":{"total":1207,"additions":916,"deletions":291},"files":[{"sha":"cdffce723330a5e90cf443f5edd56d9568a4839e","filename":"openjpa-kernel/pom.xml","status":"modified","additions":123,"deletions":110,"changes":233,"blob_url":"https://github.com/apache/openjpa/blob/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=27563987ef2d4d4dc88e22070a8c3152ae310ca0","patch":"@@ -1,110 +1,123 @@\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <groupId>org.apache.openjpa</groupId>\n-    <artifactId>openjpa-kernel</artifactId>\n-    <packaging>jar</packaging>\n-    <name>OpenJPA Kernel</name>\n-    <description>OpenJPA Kernel</description>\n-    <url>http://incubator.apache.org/projects/openjpa</url>\n-    <parent>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa</artifactId>\n-        <version>0.9.6-incubating-SNAPSHOT</version>\n-    </parent>\n-    <dependencies>\n-        <dependency>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-lib</artifactId>\n-            <version>${pom.version}</version>\n-            <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jms_1.1_spec</artifactId>\n-            <version>1.0.1</version>\n-            <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-j2ee-connector_1.5_spec</artifactId>\n-            <version>1.0.1</version>\n-            <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.geronimo.specs</groupId>\n-            <artifactId>geronimo-jta_1.0.1B_spec</artifactId>\n-            <version>1.0.1</version>\n-            <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>commons-pool</groupId>\n-            <artifactId>commons-pool</artifactId>\n-            <version>1.3</version>\n-            <scope>compile</scope>\n-        </dependency>\n-    </dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-compiler-plugin</artifactId>\n-                <configuration>\n-                    <source>1.3</source>\n-                    <target>1.3</target>\n-                </configuration>\n-            </plugin>\n-            <plugin>\n-                <groupId>org.codehaus.mojo</groupId>\n-                <artifactId>javacc-maven-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <id>jjtree-jpql</id>\n-                        <phase>generate-sources</phase>\n-                        <configuration>\n-                            <sourceDirectory>\n-                                ${basedir}/src/main/jjtree/org/apache/openjpa/kernel/jpql</sourceDirectory>\n-                            <outputDirectory>\n-                                ${project.build.directory}/generated-sources/jjtree/org/apache/openjpa/kernel/jpql</outputDirectory>\n-                            <buildNodeFiles>false</buildNodeFiles>\n-                        </configuration>\n-                        <goals>\n-                            <goal>jjtree</goal>\n-                        </goals>\n-                    </execution>\n-                    <execution>\n-                        <id>javacc-jpql</id>\n-                        <phase>generate-sources</phase>\n-                        <configuration>\n-                            <sourceDirectory>\n-                                ${project.build.directory}/generated-sources/jjtree/org/apache/openjpa/kernel/jpql</sourceDirectory>\n-                            <outputDirectory>\n-                                ${project.build.directory}/generated-sources/javacc/org/apache/openjpa/kernel/jpql</outputDirectory>\n-                        </configuration>\n-                        <goals>\n-                            <goal>javacc</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-            <plugin>\n-                <artifactId>maven-antrun-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <phase>process-sources</phase>\n-                        <configuration>\n-                            <tasks>\n-                                <delete\n-                                    file=\"${project.build.directory}/generated-sources/javacc/org/apache/openjpa/kernel/jpql/ParseException.java\"/>\n-                            </tasks>\n-                        </configuration>\n-                        <goals>\n-                            <goal>run</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n-        </plugins>\n-    </build>\n-</project>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+    <modelVersion>4.0.0</modelVersion>\r\n+    <groupId>org.apache.openjpa</groupId>\r\n+    <artifactId>openjpa-kernel</artifactId>\r\n+    <packaging>jar</packaging>\r\n+    <name>OpenJPA Kernel</name>\r\n+    <description>OpenJPA Kernel</description>\r\n+    <url>http://incubator.apache.org/projects/openjpa</url>\r\n+    <parent>\r\n+        <groupId>org.apache.openjpa</groupId>\r\n+        <artifactId>openjpa</artifactId>\r\n+        <version>0.9.6-incubating-SNAPSHOT</version>\r\n+    </parent>\r\n+    <dependencies>\r\n+        <dependency>\r\n+            <groupId>org.apache.openjpa</groupId>\r\n+            <artifactId>openjpa-lib</artifactId>\r\n+            <version>${pom.version}</version>\r\n+            <scope>compile</scope>\r\n+        </dependency>\r\n+        <dependency>\r\n+            <groupId>org.apache.geronimo.specs</groupId>\r\n+            <artifactId>geronimo-jms_1.1_spec</artifactId>\r\n+            <version>1.0.1</version>\r\n+            <scope>compile</scope>\r\n+        </dependency>\r\n+        <dependency>\r\n+            <groupId>org.apache.geronimo.specs</groupId>\r\n+            <artifactId>geronimo-j2ee-connector_1.5_spec</artifactId>\r\n+            <version>1.0.1</version>\r\n+            <scope>compile</scope>\r\n+        </dependency>\r\n+        <dependency>\r\n+            <groupId>org.apache.geronimo.specs</groupId>\r\n+            <artifactId>geronimo-jta_1.0.1B_spec</artifactId>\r\n+            <version>1.0.1</version>\r\n+            <scope>compile</scope>\r\n+        </dependency>\r\n+        <dependency>\r\n+            <groupId>commons-pool</groupId>\r\n+            <artifactId>commons-pool</artifactId>\r\n+            <version>1.3</version>\r\n+            <scope>compile</scope>\r\n+        </dependency>\r\n+    </dependencies>\r\n+    <build>\r\n+        <plugins>\r\n+            <plugin>\r\n+                <groupId>org.apache.maven.plugins</groupId>\r\n+                <artifactId>maven-compiler-plugin</artifactId>\r\n+                <configuration>\r\n+                    <source>1.3</source>\r\n+                    <target>1.3</target>\r\n+                </configuration>\r\n+            </plugin>\r\n+            <plugin>\r\n+                <groupId>org.codehaus.mojo</groupId>\r\n+                <artifactId>javacc-maven-plugin</artifactId>\r\n+                <executions>\r\n+                    <execution>\r\n+                        <id>jjtree-jpql</id>\r\n+                        <phase>generate-sources</phase>\r\n+                        <configuration>\r\n+                            <sourceDirectory>\r\n+                                ${basedir}/src/main/jjtree/org/apache/openjpa/kernel/jpql</sourceDirectory>\r\n+                            <outputDirectory>\r\n+                                ${project.build.directory}/generated-sources/jjtree/org/apache/openjpa/kernel/jpql</outputDirectory>\r\n+                            <buildNodeFiles>false</buildNodeFiles>\r\n+                        </configuration>\r\n+                        <goals>\r\n+                            <goal>jjtree</goal>\r\n+                        </goals>\r\n+                    </execution>\r\n+                    <execution>\r\n+                        <id>javacc-jpql</id>\r\n+                        <phase>generate-sources</phase>\r\n+                        <configuration>\r\n+                            <sourceDirectory>\r\n+                                ${project.build.directory}/generated-sources/jjtree/org/apache/openjpa/kernel/jpql</sourceDirectory>\r\n+                            <outputDirectory>\r\n+                                ${project.build.directory}/generated-sources/javacc/org/apache/openjpa/kernel/jpql</outputDirectory>\r\n+                        </configuration>\r\n+                        <goals>\r\n+                            <goal>javacc</goal>\r\n+                        </goals>\r\n+                    </execution>\r\n+                </executions>\r\n+            </plugin>\r\n+            <plugin>\r\n+                <artifactId>maven-antrun-plugin</artifactId>\r\n+                <executions>\r\n+                    <execution>\r\n+                        <phase>process-sources</phase>\r\n+                        <configuration>\r\n+                            <tasks>\r\n+                                <delete\r\n+                                    file=\"${project.build.directory}/generated-sources/javacc/org/apache/openjpa/kernel/jpql/ParseException.java\"/>\r\n+                            </tasks>\r\n+                        </configuration>\r\n+                        <goals>\r\n+                            <goal>run</goal>\r\n+                        </goals>\r\n+                    </execution>\r\n+                    <execution>\r\n+\t\t\t\t\t\t<id>add-was-interfaces</id>\r\n+\t\t\t\t\t\t<phase>process-classes</phase>\r\n+\t\t\t\t\t\t<configuration>\r\n+\t\t\t\t\t\t\t<tasks>\r\n+\t\t\t\t\t\t\t\t<java\r\n+\t\t\t\t\t\t\t\t\tclassname=\"org.apache.openjpa.util.WASTransformer\" classpathref=\"maven.runtime.classpath\" />\r\n+\t\t\t\t\t\t\t</tasks>\r\n+\t\t\t\t\t\t</configuration>\r\n+\t\t\t\t\t\t<goals>\r\n+\t\t\t\t\t\t\t<goal>run</goal>\r\n+\t\t\t\t\t\t</goals>\r\n+\t\t\t\t\t</execution>\r\n+                </executions>\r\n+            </plugin>\r\n+        </plugins>\r\n+    </build>\r\n+</project>\r"},{"sha":"8179cc295e5d38ad2974d8018a28c568aa176b65","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":193,"deletions":173,"changes":366,"blob_url":"https://github.com/apache/openjpa/blob/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=27563987ef2d4d4dc88e22070a8c3152ae310ca0","patch":"@@ -1,173 +1,193 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.ee;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n-import javax.transaction.TransactionManager;\n-\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.InvalidStateException;\n-\n-/**\n- * Implementation of the {@link ManagedRuntime} interface that searches\n- * through a set of known JNDI locations and method invocations to locate the\n- * appropriate mechanism for obtaining a TransactionManager.\n- *  Built in support is provided for the following Application Servers:\n- * <ul>\n- * <li>Bluestone</li>\n- * <li>HP Application Server</li>\n- * <li>JBoss</li>\n- * <li>JRun</li>\n- * <li>OpenEJB</li>\n- * <li>Oracle Application Server</li>\n- * <li>Orion</li>\n- * <li>SunONE</li>\n- * <li>Weblogic</li>\n- * <li>Websphere</li>\n- * </ul>\n- *\n- * @author Marc Prud'hommeaux\n- */\n-public class AutomaticManagedRuntime\n-    implements ManagedRuntime, Configurable {\n-\n-    private static final String [] JNDI_LOCS = new String []{\n-        \"javax.transaction.TransactionManager\", // weblogic\n-        \"java:/TransactionManager\", // jboss & jrun\n-        \"java:/DefaultDomain/TransactionManager\", // jrun too\n-        \"java:comp/pm/TransactionManager\", // orion & oracle\n-        \"java:comp/TransactionManager\", // generic\n-        \"java:pm/TransactionManager\", // borland\n-    };\n-    private static final String [] METHODS = new String[]{\n-        \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp\n-        \"com.bluestone.jta.SaTransactionManagerFactory.SaGetTransactionManager\",\n-        \"com.ibm.ejs.jts.jta.JTSXA.getTransactionManager\",\n-        \"com.ibm.ejs.jts.jta.TransactionManagerFactory.getTransactionManager\",\n-        \"com.ibm.ws.Transaction.TransactionManagerFactory.\"\n-            + \"getTransactionManager\", // WS 5.1\n-        \"org.openejb.OpenEJB.getTransactionManager\",\n-        \"com.sun.jts.jta.TransactionManagerImpl.getTransactionManagerImpl\",\n-        \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\n-            + \"getTransactionManagerImpl\", // borland\n-    };\n-    private static final ManagedRuntime WLS;\n-    private static final ManagedRuntime SUNONE;\n-\n-    private static Localizer _loc = Localizer.forPackage\n-        (AutomaticManagedRuntime.class);\n-\n-    static {\n-        ManagedRuntime mr = null;\n-        try {\n-            mr = new WLSManagedRuntime();\n-        } catch (Throwable t) {\n-        }\n-        WLS = mr;\n-\n-        mr = null;\n-        try {\n-            mr = new SunOneManagedRuntime();\n-        } catch (Throwable t) {\n-        }\n-        SUNONE = mr;\n-    }\n-\n-    private Configuration _conf = null;\n-    private ManagedRuntime _runtime = null;\n-\n-    public TransactionManager getTransactionManager()\n-        throws Exception {\n-        if (_runtime != null)\n-            return _runtime.getTransactionManager();\n-\n-        List errors = new LinkedList();\n-        TransactionManager tm = null;\n-\n-        if (WLS != null) {\n-            try {\n-                tm = WLS.getTransactionManager();\n-            } catch (Throwable t) {\n-                errors.add(t);\n-            }\n-            if (tm != null) {\n-                _runtime = WLS;\n-                return tm;\n-            }\n-        }\n-\n-        // try to find a jndi runtime\n-        JNDIManagedRuntime jmr = new JNDIManagedRuntime();\n-        for (int i = 0; i < JNDI_LOCS.length; i++) {\n-            jmr.setTransactionManagerName(JNDI_LOCS[i]);\n-            try {\n-                tm = jmr.getTransactionManager();\n-            } catch (Throwable t) {\n-                errors.add(t);\n-            }\n-            if (tm != null) {\n-                _runtime = jmr;\n-                return tm;\n-            }\n-        }\n-\n-        // look for a method runtime\n-        InvocationManagedRuntime imr = new InvocationManagedRuntime();\n-        for (int i = 0; i < METHODS.length; i++) {\n-            imr.setConfiguration(_conf);\n-            imr.setTransactionManagerMethod(METHODS[i]);\n-            try {\n-                tm = imr.getTransactionManager();\n-            } catch (Throwable t) {\n-                errors.add(t);\n-            }\n-            if (tm != null) {\n-                _runtime = imr;\n-                return tm;\n-            }\n-        }\n-\n-        if (SUNONE != null) {\n-            try {\n-                tm = SUNONE.getTransactionManager();\n-            } catch (Throwable t) {\n-                errors.add(t);\n-            }\n-            if (tm != null) {\n-                _runtime = SUNONE;\n-                return tm;\n-            }\n-        }\n-\n-        Throwable[] t = (Throwable []) errors.toArray(\n-            new Throwable [errors.size()]);\n-        throw new InvalidStateException(_loc.get(\"tm-not-found\")).\n-            setFatal(true).setNestedThrowables(t);\n-    }\n-\n-    public void setConfiguration(Configuration conf) {\n-        _conf = conf;\n-    }\n-\n-    public void startConfiguration() {\n-    }\n-\n-    public void endConfiguration() {\n-    }\n-}\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.ee;\r\n+\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import javax.transaction.TransactionManager;\r\n+\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.InvalidStateException;\r\n+\r\n+/**\r\n+ * Implementation of the {@link ManagedRuntime} interface that searches\r\n+ * through a set of known JNDI locations and method invocations to locate the\r\n+ * appropriate mechanism for obtaining a TransactionManager.\r\n+ *  Built in support is provided for the following Application Servers:\r\n+ * <ul>\r\n+ * <li>Bluestone</li>\r\n+ * <li>HP Application Server</li>\r\n+ * <li>JBoss</li>\r\n+ * <li>JRun</li>\r\n+ * <li>OpenEJB</li>\r\n+ * <li>Oracle Application Server</li>\r\n+ * <li>Orion</li>\r\n+ * <li>SunONE</li>\r\n+ * <li>Weblogic</li>\r\n+ * <li>Websphere</li>\r\n+ * </ul>\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ */\r\n+public class AutomaticManagedRuntime\r\n+    implements ManagedRuntime, Configurable {\r\n+\r\n+    private static final String [] JNDI_LOCS = new String []{\r\n+        \"javax.transaction.TransactionManager\", // weblogic\r\n+        \"java:/TransactionManager\", // jboss & jrun\r\n+        \"java:/DefaultDomain/TransactionManager\", // jrun too\r\n+        \"java:comp/pm/TransactionManager\", // orion & oracle\r\n+        \"java:comp/TransactionManager\", // generic\r\n+        \"java:pm/TransactionManager\", // borland\r\n+    };\r\n+    private static final String [] METHODS = new String[]{\r\n+        \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp\r\n+        \"com.bluestone.jta.SaTransactionManagerFactory.SaGetTransactionManager\",\r\n+        \"org.openejb.OpenEJB.getTransactionManager\",\r\n+        \"com.sun.jts.jta.TransactionManagerImpl.getTransactionManagerImpl\",\r\n+        \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\r\n+            + \"getTransactionManagerImpl\", // borland\r\n+    };\r\n+    private static final ManagedRuntime WLS;\r\n+    private static final ManagedRuntime SUNONE;\r\n+    private static final ManagedRuntime WAS;\r\n+\r\n+    private static Localizer _loc = Localizer.forPackage\r\n+        (AutomaticManagedRuntime.class);\r\n+\r\n+    static {\r\n+        ManagedRuntime mr = null;\r\n+        try {\r\n+            mr = new WLSManagedRuntime();\r\n+        } catch (Throwable t) {\r\n+        }\r\n+        WLS = mr;\r\n+\r\n+        mr = null;\r\n+        try {\r\n+            mr = new SunOneManagedRuntime();\r\n+        } catch (Throwable t) {\r\n+        }\r\n+        SUNONE = mr;\r\n+\r\n+        mr = null;\r\n+        try {\r\n+            mr = new WASManagedRuntime();\r\n+        }\r\n+        catch(Throwable t) {\r\n+\r\n+        }\r\n+        WAS= mr;\r\n+\r\n+    }\r\n+\r\n+    private Configuration _conf = null;\r\n+    private ManagedRuntime _runtime = null;\r\n+\r\n+    public TransactionManager getTransactionManager()\r\n+        throws Exception {\r\n+        if (_runtime != null)\r\n+            return _runtime.getTransactionManager();\r\n+\r\n+        List errors = new LinkedList();\r\n+        TransactionManager tm = null;\r\n+\r\n+        if (WLS != null) {\r\n+            try {\r\n+                tm = WLS.getTransactionManager();\r\n+            } catch (Throwable t) {\r\n+                errors.add(t);\r\n+            }\r\n+            if (tm != null) {\r\n+                _runtime = WLS;\r\n+                return tm;\r\n+            }\r\n+        }\r\n+\r\n+        if (WAS != null) {\r\n+            try {\r\n+                ((Configurable)WAS).setConfiguration(_conf);\r\n+                tm = WAS.getTransactionManager();\r\n+            } catch (Throwable t) {\r\n+                errors.add(t);\r\n+            }\r\n+            if (tm != null) {\r\n+                _runtime = WAS;\r\n+                return tm;\r\n+            }\r\n+        }\r\n+\r\n+        // try to find a jndi runtime\r\n+        JNDIManagedRuntime jmr = new JNDIManagedRuntime();\r\n+        for (int i = 0; i < JNDI_LOCS.length; i++) {\r\n+            jmr.setTransactionManagerName(JNDI_LOCS[i]);\r\n+            try {\r\n+                tm = jmr.getTransactionManager();\r\n+            } catch (Throwable t) {\r\n+                errors.add(t);\r\n+            }\r\n+            if (tm != null) {\r\n+                _runtime = jmr;\r\n+                return tm;\r\n+            }\r\n+        }\r\n+\r\n+        // look for a method runtime\r\n+        InvocationManagedRuntime imr = new InvocationManagedRuntime();\r\n+        for (int i = 0; i < METHODS.length; i++) {\r\n+            imr.setConfiguration(_conf);\r\n+            imr.setTransactionManagerMethod(METHODS[i]);\r\n+            try {\r\n+                tm = imr.getTransactionManager();\r\n+            } catch (Throwable t) {\r\n+                errors.add(t);\r\n+            }\r\n+            if (tm != null) {\r\n+                _runtime = imr;\r\n+                return tm;\r\n+            }\r\n+        }\r\n+\r\n+        if (SUNONE != null) {\r\n+            try {\r\n+                tm = SUNONE.getTransactionManager();\r\n+            } catch (Throwable t) {\r\n+                errors.add(t);\r\n+            }\r\n+            if (tm != null) {\r\n+                _runtime = SUNONE;\r\n+                return tm;\r\n+            }\r\n+        }\r\n+\r\n+        Throwable[] t = (Throwable []) errors.toArray(\r\n+            new Throwable [errors.size()]);\r\n+        throw new InvalidStateException(_loc.get(\"tm-not-found\")).\r\n+            setFatal(true).setNestedThrowables(t);\r\n+    }\r\n+\r\n+    public void setConfiguration(Configuration conf) {\r\n+        _conf = conf;\r\n+    }\r\n+\r\n+    public void startConfiguration() {\r\n+    }\r\n+\r\n+    public void endConfiguration() {\r\n+    }\r\n+}\r"},{"sha":"c1c33ab2f44ca969358dfa08fe53e2fd6b68c680","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","status":"added","additions":458,"deletions":0,"changes":458,"blob_url":"https://github.com/apache/openjpa/blob/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java?ref=27563987ef2d4d4dc88e22070a8c3152ae310ca0","patch":"@@ -0,0 +1,458 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.ee;\r\n+\r\n+import java.lang.reflect.Method;\r\n+\r\n+import javax.naming.Context;\r\n+import javax.naming.InitialContext;\r\n+import javax.naming.NamingException;\r\n+import javax.transaction.HeuristicMixedException;\r\n+import javax.transaction.HeuristicRollbackException;\r\n+import javax.transaction.InvalidTransactionException;\r\n+import javax.transaction.NotSupportedException;\r\n+import javax.transaction.RollbackException;\r\n+import javax.transaction.Status;\r\n+import javax.transaction.Synchronization;\r\n+import javax.transaction.SystemException;\r\n+import javax.transaction.Transaction;\r\n+import javax.transaction.xa.XAResource;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.InvalidStateException;\r\n+import org.apache.openjpa.util.NoTransactionException;\r\n+\r\n+/**\r\n+ * {@link ManagedRuntime} implementation that allows synchronization with a\r\n+ * WebSphere managed transaction.\r\n+ *\r\n+ * <P>\r\n+ * WebSphere Application Server does not expose the TransactionManager to an\r\n+ * application. Instead it provides a proprietary interface to register for\r\n+ * synchronization and obtain transaction ids.\r\n+ *\r\n+ * <P>\r\n+ * WASManagedRuntime provides the wrapper classes needed to interact with the\r\n+ * WAS proprietary interface and the OpenJPA kernel.\r\n+ *\r\n+ * @author Michael Dick, Kevin Sutter\r\n+ */\r\n+public class WASManagedRuntime implements ManagedRuntime, Configurable {\r\n+\r\n+    private static Localizer _loc =\r\n+        Localizer.forPackage(WASManagedRuntime.class);\r\n+\r\n+    protected Object _extendedTransaction = null;\r\n+\r\n+    protected Method _getGlobalId = null;\r\n+\r\n+    protected Method _getLocalId = null;\r\n+\r\n+    protected Method _registerSync = null;\r\n+\r\n+    OpenJPAConfiguration _conf = null;\r\n+\r\n+    Log _log = null;\r\n+\r\n+    /**\r\n+     * Lookup the extendedTransaction object from JNDI.\r\n+     *\r\n+     * @throws NamingException\r\n+     */\r\n+    private void getExtendedTransaction() throws NamingException {\r\n+\r\n+        if (_extendedTransaction == null) {\r\n+            Context ctx = new InitialContext();\r\n+            try {\r\n+                _extendedTransaction =\r\n+                    ctx.lookup(\"java:comp/websphere/ExtendedJTATransaction\");\r\n+\r\n+            } finally {\r\n+                ctx.close();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Caches the WebSphere proprietary methods for ExtendedJTATransaction.\r\n+     */\r\n+    private void getWebSphereMethods() throws Exception {\r\n+        ClassLoader loader =\r\n+            _conf.getClassResolverInstance().getClassLoader(getClass(), null);\r\n+\r\n+        Class extendedJTATransaction =\r\n+            Class.forName(\r\n+                \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\", true,\r\n+                loader);\r\n+\r\n+        _registerSync =\r\n+            extendedJTATransaction.getMethod(\r\n+                \"registerSynchronizationCallbackForCurrentTran\",\r\n+                new Class[] { Class.forName(\r\n+                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\",\r\n+                    true, loader) });\r\n+\r\n+        _getGlobalId = extendedJTATransaction.getMethod(\"getGlobalId\", null);\r\n+\r\n+        _getLocalId = extendedJTATransaction.getMethod(\"getLocalId\", null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets an extendedJTATransaction from JNDI and creates a transaction\r\n+     * wrapper\r\n+     */\r\n+    public javax.transaction.TransactionManager getTransactionManager()\r\n+        throws Exception {\r\n+        getExtendedTransaction();\r\n+        return new WASTransaction();\r\n+    }\r\n+\r\n+    /**\r\n+     * Transaction wrapper for WebSphere. WebSphere exposes a subset of the\r\n+     * Transaction and TransactionManager interfaces to the customer. Any\r\n+     * methods which are not exposed by WebSphere will throw an\r\n+     * IllegalStateException to the caller.\r\n+     *\r\n+     * <P>\r\n+     * Methods supporded by WAS are\r\n+     * <UL>\r\n+     * <LI>RegisterSynchronization </LI>\r\n+     * <LI>GetStatus</LI>\r\n+     * </UL>\r\n+     */\r\n+    class WASTransaction implements javax.transaction.TransactionManager,\r\n+        javax.transaction.Transaction {\r\n+\r\n+        public int getStatus() throws SystemException {\r\n+            int rval = Status.STATUS_UNKNOWN;\r\n+\r\n+            try {\r\n+                if (getId() != null) {\r\n+                    rval = Status.STATUS_ACTIVE;\r\n+                } else {\r\n+\r\n+                    if (_log != null && _log.isErrorEnabled()) {\r\n+                        _log.error(_loc.get(\"was-no-transaction\"));\r\n+                    }\r\n+\r\n+                    throw new NoTransactionException(_loc\r\n+                        .get(\"was-no-transaction\"));\r\n+                }\r\n+            } catch (Exception e) {\r\n+\r\n+                if (_log != null && _log.isErrorEnabled()) {\r\n+                    _log.error(_loc.get(\"was-no-transaction\"), e);\r\n+                }\r\n+                throw new NoTransactionException(_loc.get(\"was-no-transaction\"))\r\n+                    .setCause(e);\r\n+            }\r\n+            return rval;\r\n+        }\r\n+\r\n+        /**\r\n+         * Provides a Transaction wrapper. The transaction wrapper mayb only be\r\n+         * used to determine the status of the current transaction. WebSphere\r\n+         * does not allow direct control of container transactions.\r\n+         *\r\n+         * @return A WebSphere transaction wrapper.\r\n+         */\r\n+        public Transaction getTransaction() throws SystemException {\r\n+            return this;\r\n+        }\r\n+\r\n+        /**\r\n+         * Register for synchronization with a WebSphere managed transaction via\r\n+         * the extendedJTATransaction interface.\r\n+         */\r\n+        public void registerSynchronization(Synchronization arg0)\r\n+            throws IllegalStateException, RollbackException, SystemException {\r\n+\r\n+            if (_extendedTransaction != null) {\r\n+                try {\r\n+                    if (_registerSync == null) {\r\n+                        getWebSphereMethods();\r\n+                    }\r\n+                    _registerSync.invoke(_extendedTransaction,\r\n+                        new Object[] { new WASSynchronization(arg0) });\r\n+                } catch (Exception e) {\r\n+                    if (_log != null && _log.isErrorEnabled()) {\r\n+                        _log.error(_loc.get(\"was-reflection-exception\"), e);\r\n+                    }\r\n+\r\n+                    throw new InvalidStateException(_loc\r\n+                        .get(\"was-reflection-exception\")).setCause(e);\r\n+                }\r\n+            } else {\r\n+                if (_log != null && _log.isErrorEnabled()) {\r\n+                    _log.error(_loc.get(\"was-lookup-error\"));\r\n+                }\r\n+\r\n+                throw new InvalidStateException(_loc.get(\"was-lookup-error\"));\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Determines the ID of the current WebSphere managed transaction using\r\n+         * the extendedJTATransaction interface\r\n+         *\r\n+         * @return If a GlobalTransaction is active a byte[] ID will be\r\n+         *         returned. If a LocalTransaction is active an int ID will be\r\n+         *         returned.\r\n+         *\r\n+         * @throws Exception\r\n+         */\r\n+        private Object getId() throws Exception {\r\n+            Object rval;\r\n+\r\n+            rval = getGlobalId();\r\n+\r\n+            if (rval == null) {\r\n+                rval = getLocalId();\r\n+            }\r\n+\r\n+            if (rval instanceof Integer && ((Integer) rval).intValue() == 0) {\r\n+                /*\r\n+                 * If there's no globalId or localId we're running outside of a\r\n+                 * transaction and need to throw an error.\r\n+                 */\r\n+                if (_log != null && _log.isErrorEnabled()) {\r\n+                    _log.error(_loc.get(\"was-no-transaction\"));\r\n+                }\r\n+                throw new NoTransactionException(_loc.get(\"was-no-transaction\"));\r\n+            }\r\n+            return rval;\r\n+        }\r\n+\r\n+        /**\r\n+         * Gets the GlobalTransaction ID of the WebSphere managed transaction.\r\n+         * If no Global Transaction is active null will be returned.\r\n+         *\r\n+         * @return Null if a global transaction is not active or if an error\r\n+         *         occurs. byte[] id if a global transaction is active.\r\n+         */\r\n+        private byte[] getGlobalId() {\r\n+\r\n+            byte[] rval = null;\r\n+\r\n+            try {\r\n+                if(_getGlobalId == null) {\r\n+                    getWebSphereMethods();\r\n+                }\r\n+                rval = (byte[]) _getGlobalId.invoke(_extendedTransaction, null);\r\n+            } catch (Exception e) {\r\n+                if (_log != null && _log.isErrorEnabled()) {\r\n+                    _log.error(_loc.get(\"was-reflection-exception\"), e);\r\n+                }\r\n+\r\n+                throw new InvalidStateException(_loc\r\n+                    .get(\"was-reflection-exception\")).setCause(e);\r\n+            }\r\n+\r\n+            return rval;\r\n+        }\r\n+\r\n+        /**\r\n+         * Gets the LocalTransaction ID of the WebSphere managed transaction. If\r\n+         * a LocalTransaction is not active 0 will be returned.\r\n+         *\r\n+         * @return LocalTransaction ID. 0 if a LocalTransaction is not active or\r\n+         *         if an error occurs.\r\n+         */\r\n+        private Integer getLocalId() {\r\n+            Integer rval;\r\n+\r\n+            try {\r\n+                if(_getLocalId == null)  {\r\n+                    getWebSphereMethods();\r\n+                }\r\n+                rval = (Integer) _getLocalId.invoke(_extendedTransaction, null);\r\n+            } catch (Exception e) {\r\n+                if (_log != null && _log.isErrorEnabled()) {\r\n+                    _log.error(_loc.get(\"was-reflection-exception\"), e);\r\n+                }\r\n+                throw new InvalidStateException(_loc\r\n+                    .get(\"was-reflection-exception\")).setCause(e);\r\n+            }\r\n+            return rval;\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void begin() throws NotSupportedException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"begin\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void commit() throws HeuristicMixedException,\r\n+            HeuristicRollbackException, IllegalStateException,\r\n+            RollbackException, SecurityException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"commit\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void resume(Transaction arg0) throws IllegalStateException,\r\n+            InvalidTransactionException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"resume\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void rollback() throws IllegalStateException, SecurityException,\r\n+            SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"rollback\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void setRollbackOnly() throws IllegalStateException,\r\n+            SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"setRollbackOnly\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void setTransactionTimeout(int arg0) throws SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"setTransactionTimeout\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public Transaction suspend() throws SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"suspend\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public boolean delistResource(XAResource arg0, int arg1)\r\n+            throws IllegalStateException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"delistResource\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public boolean enlistResource(XAResource arg0)\r\n+            throws IllegalStateException, RollbackException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"enlistResource\"));\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * WASSynchronization wrapper. This class translates the WAS proprietary\r\n+     * synchronization callback methods to javax.transaction.Synchronization\r\n+     * methods.\r\n+     *\r\n+     * <P>\r\n+     * This class implements the\r\n+     * com.ibm.websphere.jtaextensions.SynchronizationCallback interface. Since\r\n+     * SynchronizationCallback is not available at compile time we use Serp to\r\n+     * add the interface to the class after all classes have been compiled.\r\n+     *\r\n+     * <P>\r\n+     * SynchronizationCallback is expected to be available whenever this class\r\n+     * is instantiated, therefore this class should only be used when running in\r\n+     * WebSphere.\r\n+     *\r\n+     * @see org.apache.openjpa.util.WASTransformer\r\n+     */\r\n+    static class WASSynchronization {\r\n+        Synchronization _sync = null;\r\n+\r\n+        WASSynchronization(Synchronization sync) {\r\n+            _sync = sync;\r\n+        }\r\n+\r\n+        /**\r\n+         * AfterCompletion wrapper. Translates the WAS proprietary call to a\r\n+         * javax.transaction.Synchronization call.\r\n+         */\r\n+        public void afterCompletion(int localTransactionId,\r\n+            byte[] globalTransactionId, boolean committed) {\r\n+            if (_sync != null) {\r\n+                if (committed) {\r\n+                    _sync.afterCompletion(Status.STATUS_COMMITTED);\r\n+                } else {\r\n+                    _sync.afterCompletion(Status.STATUS_UNKNOWN);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * BeforeCompletion wrapper. Translates WAS proprietary call to a\r\n+         * javax.transaction.Synchronization call.\r\n+         */\r\n+        public void beforeCompletion(int arg0, byte[] arg1) {\r\n+            if (_sync != null) {\r\n+                _sync.beforeCompletion();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Caches a copy of the configuration. The configuration is used to obtain\r\n+     * the logger and classloader.\r\n+     */\r\n+    public void setConfiguration(Configuration conf) {\r\n+        _conf = (OpenJPAConfiguration) conf;\r\n+        _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\r\n+    }\r\n+\r\n+    /**\r\n+     * EndConfiguration stub.\r\n+     */\r\n+    public void endConfiguration() {\r\n+        // Nothing to do\r\n+    }\r\n+\r\n+    /**\r\n+     * StartConfiguration stub.\r\n+     */\r\n+    public void startConfiguration() {\r\n+        // Nothing to do\r\n+    }\r\n+}\r"},{"sha":"6970b2ebadc7291e662c95f6d9189adaa7283a6c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/WASTransformer.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/main/java/org/apache/openjpa/util/WASTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/main/java/org/apache/openjpa/util/WASTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/WASTransformer.java?ref=27563987ef2d4d4dc88e22070a8c3152ae310ca0","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import serp.bytecode.BCClass;\r\n+import serp.bytecode.Project;\r\n+\r\n+/**\r\n+ * WASTransformer uses Serp to add WebSphere proprietary interface to\r\n+ * WASManagedRuntime$WASSynchronization. The interface is added at build time.\r\n+ * The WebSphere extensions classes must be found on the classpath whenever an\r\n+ * instance of WASManagedRuntime$WASSynchronization is instantiated.\r\n+ *\r\n+ * @author Michael Dick\r\n+ *\r\n+ */\r\n+public class WASTransformer {\r\n+\r\n+    /**\r\n+     * Class that will be modified\r\n+     */\r\n+    public static final String _class =\r\n+        \"org.apache.openjpa.ee.WASManagedRuntime$WASSynchronization\";\r\n+\r\n+    /**\r\n+     * Interface which will be added\r\n+     */\r\n+    public static final String _interface =\r\n+        \"com.ibm.websphere.jtaextensions.SynchronizationCallback\";\r\n+\r\n+    public static void main(String[] args) {\r\n+\r\n+        Project project = new Project();\r\n+\r\n+        BCClass bcClass = project.loadClass(_class);\r\n+\r\n+        bcClass.declareInterface(_interface);\r\n+        try {\r\n+            bcClass.write();\r\n+        } catch (Exception e) {\r\n+            System.err.println(e);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"83063b746f2df145651302304e0f109ffae3c7bf","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","status":"modified","additions":31,"deletions":8,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties?ref=27563987ef2d4d4dc88e22070a8c3152ae310ca0","patch":"@@ -1,8 +1,31 @@\n-tm-not-found: Could not perform automatic lookup of EJB container''s \\\n-\tjavax.transaction.TransactionManager implementation. Please ensure that \\\n-\tyou are running the application from within an EJB 1.1 compliant EJB \\\n-\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to the \\\n-\tappropriate value to obtain the TransactionManager.\n-expected-reference: Expected object to be of type Reference, but instead was \\\n-\t\"{0}\".\n-not-supported: This operation is not supported.\n+tm-not-found: Could not perform automatic lookup of EJB container''s \\\r\n+\tjavax.transaction.TransactionManager implementation. Please ensure that \\\r\n+\tyou are running the application from within an EJB 1.1 compliant EJB \\\r\n+\tcontainer, and then set the org.apache.openjpa.ManagedRuntime property to the \\\r\n+\tappropriate value to obtain the TransactionManager.\r\n+expected-reference: Expected object to be of type Reference, but instead was \\\r\n+\t\"{0}\".\r\n+not-supported: This operation is not supported.\r\n+was-unsupported-op: Unable to execute {0} on a WebSphere managed transaction. \\\r\n+\tWebSphere does not support direct manipulation of managed transactions.\r\n+was-no-transaction: Unable to detect a WebSphere transaction context. \\ Please ensure \\\r\n+\tthat you are running the application from within WebSphere Application Server \\\r\n+\t(version 5.0.2 or newer) and the application has not spun a thread. \\\r\n+\tIf the application does manage its own threads the behavior is undefined.\r\n+was-reflection-exception: An error occured reflecting WebSphere proprietary \\\r\n+\tinterfaces. Please ensure that you are running the application from within \\\r\n+\tWebSphere Application Server (version 5.0.2 or newer).\r\n+was-lookup-error: An error occurred looking up the WebSphere extended JTA \\\r\n+\tservice. Please ensure that you are running the application from within WebSphere \\\r\n+\tApplication Server (version 5.0.2 or newer).was-unsupported-op: Unable to execute {0} on a WebSphere managed transaction. \\\r\n+\tWebSphere does not support direct manipulation of managed transactions.\r\n+was-no-transaction: Unable to detect a WebSphere transaction context. \\ Please ensure \\\r\n+\tthat you are running the application from within WebSphere Application Server \\\r\n+\t(version 5.0.2 or newer) and the application has not spun a thread. \\\r\n+\tIf the application does manage its own threads the behavior is undefined.\r\n+was-reflection-exception: An error occured reflecting WebSphere proprietary \\\r\n+\tinterfaces. Please ensure that you are running the application from within \\\r\n+\tWebSphere Application Server (version 5.0.2 or newer).\r\n+was-lookup-error: An error occurred looking up the WebSphere extended JTA \\\r\n+\tservice. Please ensure that you are running the application from within WebSphere \\\r\n+\tApplication Server (version 5.0.2 or newer).\n\\ No newline at end of file"},{"sha":"65eaf986ba42cab407891242e04fb849a21c21f8","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestWASTransformer.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestWASTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/27563987ef2d4d4dc88e22070a8c3152ae310ca0/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestWASTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestWASTransformer.java?ref=27563987ef2d4d4dc88e22070a8c3152ae310ca0","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.util;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+import org.apache.openjpa.util.WASTransformer;\r\n+\r\n+/**\r\n+ * Test class for WASTransformer.\r\n+ *\r\n+ */\r\n+public class TestWASTransformer extends TestCase {\r\n+\r\n+    /**\r\n+     * This test will verify that the WASManagedRuntime$WASSynchronization\r\n+     * class was properly modified by the maven build process (reference\r\n+     * the top level pom.xml).  This testcase will not execute properly\r\n+     * within Eclipse since the Eclipse target directory (probably) hasn't\r\n+     * been modified via the maven build.\r\n+     *\r\n+     * @throws ClassNotFoundException\r\n+     * @author Michael Dick\r\n+     */\r\n+    public void testInterfaceAdded()throws ClassNotFoundException {\r\n+\r\n+        boolean caughtExpectedException = false;\r\n+\r\n+        Class syncClass = null;\r\n+\r\n+        try {\r\n+             syncClass = Class.forName(WASTransformer._class);\r\n+        } catch (NoClassDefFoundError e) {\r\n+            if (e.getMessage().contains(WASTransformer._interface)) {\r\n+                caughtExpectedException = true;\r\n+            }\r\n+        }\r\n+        assertNull(syncClass);\r\n+        assertTrue(caughtExpectedException);\r\n+    }\r\n+}\r"}]}

