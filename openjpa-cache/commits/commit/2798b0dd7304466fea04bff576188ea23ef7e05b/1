{"sha":"2798b0dd7304466fea04bff576188ea23ef7e05b","node_id":"MDY6Q29tbWl0MjA2MzY0OjI3OThiMGRkNzMwNDQ2NmZlYTA0YmZmNTc2MTg4ZWEyM2VmN2UwNWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-10T16:29:02Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-10T16:29:02Z"},"message":"OPENJPA-1556: fix @Strategy inside Embeddable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@921436 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"47aec75e0b31d2db8c684fd320f15f7137ed045d","url":"https://api.github.com/repos/apache/openjpa/git/trees/47aec75e0b31d2db8c684fd320f15f7137ed045d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2798b0dd7304466fea04bff576188ea23ef7e05b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2798b0dd7304466fea04bff576188ea23ef7e05b","html_url":"https://github.com/apache/openjpa/commit/2798b0dd7304466fea04bff576188ea23ef7e05b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2798b0dd7304466fea04bff576188ea23ef7e05b/comments","author":null,"committer":null,"parents":[{"sha":"137ad1bacc9ae57248e0339dd4252b3efc833fca","url":"https://api.github.com/repos/apache/openjpa/commits/137ad1bacc9ae57248e0339dd4252b3efc833fca","html_url":"https://github.com/apache/openjpa/commit/137ad1bacc9ae57248e0339dd4252b3efc833fca"}],"stats":{"total":201,"additions":198,"deletions":3},"files":[{"sha":"40efac425d96cf60cbdbafb82ac34d4201284ffe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/2798b0dd7304466fea04bff576188ea23ef7e05b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","raw_url":"https://github.com/apache/openjpa/raw/2798b0dd7304466fea04bff576188ea23ef7e05b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/RuntimeStrategyInstaller.java?ref=2798b0dd7304466fea04bff576188ea23ef7e05b","patch":"@@ -22,6 +22,7 @@\n \n import org.apache.openjpa.jdbc.meta.strats.NoneFieldStrategy;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.MetaDataException;\n \n /**\n@@ -56,7 +57,10 @@ public void installStrategy(ClassMapping cls) {\n     }\n \n     public void installStrategy(FieldMapping field) {\n-        FieldStrategy strategy = repos.namedStrategy(field, true);\n+        FieldStrategy strategy = null;\n+        ClassMapping owner = getOutermostDefiningMapping(field); \n+        if (owner != null && !owner.isEmbeddable())\n+            strategy = repos.namedStrategy(field, true);\n         if (strategy == null) {\n             try {\n                 strategy = repos.defaultStrategy(field, true, false);\n@@ -77,6 +81,20 @@ public void installStrategy(FieldMapping field) {\n         }\n         field.setStrategy(strategy, Boolean.FALSE);\n     }\n+    \n+    private ClassMapping getOutermostDefiningMapping(ValueMetaData vm) {\n+        if (vm instanceof FieldMapping) {\n+            ClassMapping owner = ((FieldMapping)vm).getDefiningMapping();\n+            ValueMetaData val = owner.getEmbeddingMetaData();\n+            if (val == null)\n+                return owner; \n+            return getOutermostDefiningMapping(val);\n+        } else if (vm instanceof ValueMappingImpl) {\n+            FieldMapping owner = ((ValueMappingImpl)vm).getFieldMapping();\n+            return getOutermostDefiningMapping(owner);\n+        }\n+        return null;\n+    }\n \n     public void installStrategy(Version version) {\n         VersionStrategy strat = repos.namedStrategy(version);"},{"sha":"4810ff096b8951dac5d9c4efeb31a8aec8fa33bb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue3.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/2798b0dd7304466fea04bff576188ea23ef7e05b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue3.java","raw_url":"https://github.com/apache/openjpa/raw/2798b0dd7304466fea04bff576188ea23ef7e05b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue3.java?ref=2798b0dd7304466fea04bff576188ea23ef7e05b","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.awt.Point;\n+\n+import javax.persistence.*;\n+\n+import org.apache.openjpa.persistence.Persistent;\n+import org.apache.openjpa.persistence.jdbc.Strategy;\n+\n+\n+/**\n+ * Same as EmbedValue but no blobs for suitable use as key/value/element\n+ * in oracle.\n+ */\n+@Embeddable\n+public class EmbedValue3 {\n+\n+    @Basic\n+    @Column(name = \"EMB_BASIC\")\n+    protected String basic;\n+\n+    @Basic\n+    @Column(name = \"EMB_INTBASIC\")\n+    protected int intBasic;\n+    \n+    @Persistent\n+    @Strategy(\"PointHandler\")\n+    @Column(name=\"my_point\")\n+    private Point point;\n+\n+\n+    public void setBasic(String basic) {\n+        this.basic = basic;\n+    }\n+\n+    public String getBasic() {\n+        return basic;\n+    }\n+\n+    public void setIntBasic(int intBasic) {\n+        this.intBasic = intBasic;\n+    }\n+\n+    public int getIntBasic() {\n+        return intBasic;\n+    }\n+\n+    public Point getPoint() { \n+        return point; \n+    }\n+    \n+    public void setPoint(Point point) { \n+        this.point = point; \n+    }\n+\n+}"},{"sha":"088fe51a3a00253dda81a017b7aca391277b75f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity3.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/2798b0dd7304466fea04bff576188ea23ef7e05b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity3.java","raw_url":"https://github.com/apache/openjpa/raw/2798b0dd7304466fea04bff576188ea23ef7e05b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity3.java?ref=2798b0dd7304466fea04bff576188ea23ef7e05b","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.persistence.CollectionTable;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+\n+\n+@Entity\n+@Table(name = \"NONSTD_ENTITY3\")\n+public class NonstandardMappingEntity3 {\n+    @Id\n+    private long id;\n+    \n+    @ElementCollection(fetch=FetchType.EAGER)\n+    @CollectionTable(name=\"EmbedVal3s\")\n+    private List<EmbedValue3> embedVal3s = new ArrayList<EmbedValue3>();\n+\n+    @Embedded\n+    private EmbedValue3 embedVal3;\n+\n+    public long getId() { \n+        return id; \n+    }\n+    \n+    public void setId(long id) { \n+        this.id = id; \n+    }\n+   \n+    public List<EmbedValue3> getEmbedVal3s() { \n+        return embedVal3s; \n+    }\n+    \n+    public void setEmbedVal3s(List<EmbedValue3> embedVal3s) { \n+        this.embedVal3s = embedVal3s; \n+    }\n+\n+    public EmbedValue3 getEmbedVal3() { \n+        return embedVal3; \n+    }\n+    \n+    public void setEmbedVal3(EmbedValue3 embedVal3) { \n+        this.embedVal3 = embedVal3; \n+    }\n+}"},{"sha":"c5b309657955aa9ff3f4d8a44a96e2e4aacc7bc7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","status":"modified","additions":32,"deletions":2,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/2798b0dd7304466fea04bff576188ea23ef7e05b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/2798b0dd7304466fea04bff576188ea23ef7e05b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java?ref=2798b0dd7304466fea04bff576188ea23ef7e05b","patch":"@@ -45,8 +45,8 @@\n     private DBDictionary _dict;\n \n     public void setUp() {\n-        setUp(NonstandardMappingEntity.class, ExtensionsEntity.class,\n-            NonstandardMappingMappedSuper.class, EmbedValue2.class,\n+        setUp(NonstandardMappingEntity.class, NonstandardMappingEntity3.class, ExtensionsEntity.class,\n+            NonstandardMappingMappedSuper.class, EmbedValue2.class, EmbedValue3.class,\n             EmbedValue.class,\n             CLEAR_TABLES, RETAIN_DATA);\n \n@@ -277,4 +277,34 @@ public void testInsertAndRetrieveEmbeddedCollection() {\n         assertEquals(\"basic\", pc.getEmbedCollection().get(0).getBasic());\n         em.close();\n     }\n+\n+    public void testInsertAndRetrieveEmbeddedObjectWithStrategy() {\n+        NonstandardMappingEntity3 pc = new NonstandardMappingEntity3();\n+        EmbedValue3 embed3 = new EmbedValue3();\n+        embed3.setBasic(\"basic\");\n+        Point point = new Point();\n+        point.setLocation(1, 2);\n+        embed3.setPoint(point);\n+        pc.getEmbedVal3s().add(embed3);\n+        pc.setEmbedVal3(embed3);\n+        pc.setId(1);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        Object pcId = em.getObjectId(pc);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(NonstandardMappingEntity3.class, pcId);\n+        assertEquals(1, pc.getEmbedVal3s().size());\n+        assertEquals(\"basic\", pc.getEmbedVal3s().get(0).getBasic());\n+        assertEquals(1.0, pc.getEmbedVal3s().get(0).getPoint().getX());\n+        assertEquals(2.0, pc.getEmbedVal3s().get(0).getPoint().getY());\n+        assertEquals(1.0, pc.getEmbedVal3().getPoint().getX());\n+        assertEquals(2.0, pc.getEmbedVal3().getPoint().getY());\n+        em.close();\n+    }\n+\n }"}]}

