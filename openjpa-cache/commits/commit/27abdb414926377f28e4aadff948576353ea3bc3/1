{"sha":"27abdb414926377f28e4aadff948576353ea3bc3","node_id":"MDY6Q29tbWl0MjA2MzY0OjI3YWJkYjQxNDkyNjM3N2YyOGU0YWFkZmY5NDg1NzYzNTNlYTNiYzM=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-09T19:39:45Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-02-09T19:39:45Z"},"message":"OPENJPA-1107 TraversableResolver testcases contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908173 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b8e31286913b8a9d8842f1bf36c0f957352493a","url":"https://api.github.com/repos/apache/openjpa/git/trees/3b8e31286913b8a9d8842f1bf36c0f957352493a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/27abdb414926377f28e4aadff948576353ea3bc3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/27abdb414926377f28e4aadff948576353ea3bc3","html_url":"https://github.com/apache/openjpa/commit/27abdb414926377f28e4aadff948576353ea3bc3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/27abdb414926377f28e4aadff948576353ea3bc3/comments","author":null,"committer":null,"parents":[{"sha":"31265de187e0f6ba913ec895ef9e3374f4ecea47","url":"https://api.github.com/repos/apache/openjpa/commits/31265de187e0f6ba913ec895ef9e3374f4ecea47","html_url":"https://github.com/apache/openjpa/commit/31265de187e0f6ba913ec895ef9e3374f4ecea47"}],"stats":{"total":395,"additions":394,"deletions":1},"files":[{"sha":"c9a741d823dcb19dc749798e58d840d9dc92b1c5","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Book.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/27abdb414926377f28e4aadff948576353ea3bc3/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Book.java","raw_url":"https://github.com/apache/openjpa/raw/27abdb414926377f28e4aadff948576353ea3bc3/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Book.java?ref=27abdb414926377f28e4aadff948576353ea3bc3","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.validation.Valid;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.Size;\n+\n+@Entity(name=\"Vbook\")\n+public class Book {\n+    int id;\n+    String title;\n+    int pages;\n+    Publisher publisher;\n+    \n+    public Book() {}\n+    \n+    public Book(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * @return the id\n+     */\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * @return the title\n+     */\n+    @Basic(fetch = FetchType.LAZY)\n+    @Size(min = 0, max = 9)\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    /**\n+     * @param title the title to set\n+     */\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    /**\n+     * @return the pages\n+     */\n+    public int getPages() {\n+        return pages;\n+    }\n+\n+    /**\n+     * @param pages the pages to set\n+     */\n+    public void setPages(int pages) {\n+        this.pages = pages;\n+    }\n+\n+    /**\n+     * @return the publisher\n+     */\n+    @Valid\n+    @Embedded\n+    public Publisher getPublisher() {\n+        return publisher;\n+    }\n+\n+    /**\n+     * @param publisher the publisher to set\n+     */\n+    public void setPublisher(Publisher publisher) {\n+        this.publisher = publisher;\n+    }\n+}"},{"sha":"d42918c7c21db9ed072aa944d189cfcc3e0c6c56","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Publisher.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/27abdb414926377f28e4aadff948576353ea3bc3/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Publisher.java","raw_url":"https://github.com/apache/openjpa/raw/27abdb414926377f28e4aadff948576353ea3bc3/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Publisher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Publisher.java?ref=27abdb414926377f28e4aadff948576353ea3bc3","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embeddable;\n+import javax.validation.constraints.Size;\n+\n+@Embeddable\n+public class Publisher {\n+    @Basic\n+    @Size(min = 0, max = 5)\n+    String name;\n+    \n+    String publisherID;\n+    \n+    public Publisher() {}\n+    \n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * @return the publisherID\n+     */\n+    public String getPublisherID() {\n+        return publisherID;\n+    }\n+\n+    /**\n+     * @param publisherID the publisherID to set\n+     */\n+    public void setPublisherID(String publisherID) {\n+        this.publisherID = publisherID;\n+    }\n+}"},{"sha":"ee25103433f52370601df0c7bee72f5ab2e1d2aa","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","status":"added","additions":214,"deletions":0,"changes":214,"blob_url":"https://github.com/apache/openjpa/blob/27abdb414926377f28e4aadff948576353ea3bc3/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","raw_url":"https://github.com/apache/openjpa/raw/27abdb414926377f28e4aadff948576353ea3bc3/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestTraversableResolver.java?ref=27abdb414926377f28e4aadff948576353ea3bc3","patch":"@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.lang.annotation.ElementType;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Path;\n+import javax.validation.TraversableResolver;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.validation.TraversableResolverImpl;\n+\n+import org.hibernate.validator.engine.PathImpl;\n+\n+/**\n+ * Test the TraversableResolver methods\n+ * \n+ * First run several testcases from a user perspective. These test the methods\n+ * indirectly:\n+ *    1) testLoadedTitle()\n+ *    2} testUnloaded()\n+ *    3) testCascading()\n+ * \n+ * Then test the methods directly:\n+ *    1) testPages()\n+ *    2) testTitle\n+ */\n+public class TestTraversableResolver extends TestCase {\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private OpenJPAEntityManager em;\n+    private Book book;\n+    \n+    /**\n+     * Create a book with a title that is too long, and the embedded\n+     * publisher has a name that is also too long. However, use a\n+     * persistence unit with validation-mode set to NONE. Therefore,\n+     * the create should be successful. This is to setup a situation\n+     * where fields to be potentially validated are not necessarily loaded.\n+     */\n+    @Override\n+    public void setUp() {\n+        createEMF(\"non-validation-pu\", \"SchemaAction='drop,add')\");\n+        createBook(1, \"long title\", 234);\n+        emf.close();\n+    }\n+    \n+    private void createEMF(String pu, String schemaAction) {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,\"\n+            + schemaAction);\n+        emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.createEntityManagerFactory(\n+            pu,\n+            \"org/apache/openjpa/integration/validation/persistence.xml\",\n+            map);\n+        assertNotNull(emf);\n+    }\n+    \n+    /**\n+     * By default, the title is not loaded. Make sure it gets loaded,\n+     * make a change in a different field, and commit. The isLoaded() method\n+     * of the TraversableResolver should return true, resulting in a validation\n+     * being performed and a ConstraintViolationException should be returned\n+     * because the title is too long.\n+     */\n+    public void testLoadedTitle() {\n+        createEMF(\"validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        book.setPages(124);\n+        // load the title\n+        String title = book.getTitle();\n+        assertEquals(\"long title\", title);\n+        boolean exceptionCaught = false;\n+        try {\n+            em.getTransaction().commit();\n+        } catch (ConstraintViolationException e) {\n+            exceptionCaught = true;\n+        }\n+        assertTrue(exceptionCaught);\n+        em.close();\n+        emf.close();\n+    }\n+    \n+    /**\n+     * By default, the title and publisher are not loaded. Make a change in a different field\n+     * and commit. The isLoaded() method of the TraversableResolver should return\n+     * false for both of these. Therefore a validation should not be performed. \n+     * The commit should succeed with no exception.\n+     */\n+    public void testUnloaded() {\n+        createEMF(\"non-validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        book.setPages(124);\n+        boolean exceptionCaught = false;\n+        try {\n+            em.getTransaction().commit();\n+        } catch (ConstraintViolationException e) {\n+            exceptionCaught = true;\n+        }\n+        assertFalse(exceptionCaught);\n+        em.close();\n+        emf.close();\n+    }\n+    \n+    /**\n+     * By default, the publisher is not loaded. Make sure it gets loaded.\n+     * The isLoaded() and isCascadable() methods should both return true,\n+     * resulting in a validation being performed. A ConstraintViolation\n+     * should be thrown since the publisher name is too long.\n+     */\n+    public void testCascading() {\n+        createEMF(\"validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        book.setPages(124);\n+        // load the embedded publisher\n+        Publisher publisher = book.getPublisher();\n+        assertNotNull(publisher);\n+        publisher.setPublisherID(\"yyy\");\n+        boolean exceptionCaught = false;\n+        try {\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            exceptionCaught = true;\n+        }\n+        assertTrue(exceptionCaught);\n+        em.close();\n+        emf.close();\n+    }\n+    \n+    /**\n+     * Test the isReachable() and isCascadable() methods on the pages element of Book,\n+     * which is eagerly fetched by default. \n+     */\n+    public void testPages() {\n+        createEMF(\"validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        PathImpl path = PathImpl.createPathFromString(\"org.apache.openjpa.integration.validation.Book.pages\");\n+        Path.Node node = path.getLeafNode();\n+        TraversableResolver tr = new TraversableResolverImpl();\n+        assertTrue(tr.isReachable(book, node, Book.class, null, ElementType.METHOD));\n+        assertTrue(tr.isCascadable(book, node, Book.class, null, ElementType.METHOD));\n+        em.getTransaction().commit();\n+        em.close();\n+        emf.close();\n+    }\n+    \n+    /**\n+     * Test the isReachable() method on the title.\n+     * It is configured with fetch=FetvhType.LAZY.\n+     */\n+    public void testTitle() {\n+        createEMF(\"validation-pu\", \"SchemaAction='add')\");\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        book = em.find(org.apache.openjpa.integration.validation.Book.class, 1);\n+        assertNotNull(book);\n+        PathImpl path = PathImpl.createPathFromString(\"org.apache.openjpa.integration.validation.Book.title\");\n+        Path.Node node = path.getLeafNode();\n+        TraversableResolver tr = new TraversableResolverImpl();\n+        assertFalse(tr.isReachable(book, node, Book.class, null, ElementType.FIELD));\n+        em.getTransaction().commit();\n+        em.close();\n+        emf.close();\n+    }\n+    \n+    private void createBook(int id, String title, int pages) {\n+        em = emf.createEntityManager();\n+        book = new Book(id);\n+        book.setTitle(title);\n+        book.setPages(pages);\n+        Publisher publisher = new Publisher();\n+        publisher.setName(\"long name\");\n+        publisher.setPublisherID(\"xxx\");\n+        book.setPublisher(publisher);\n+        em.getTransaction().begin();\n+        em.persist(book);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"},{"sha":"0e326bb3e04e962b770d2b4d606c6a531c37e45d","filename":"openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/27abdb414926377f28e4aadff948576353ea3bc3/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/27abdb414926377f28e4aadff948576353ea3bc3/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml?ref=27abdb414926377f28e4aadff948576353ea3bc3","patch":"@@ -135,14 +135,28 @@\n         <class>org.apache.openjpa.integration.validation.ConstraintDates</class>\n         <class>org.apache.openjpa.integration.validation.ConstraintPattern</class>\n         <class>org.apache.openjpa.integration.validation.Person</class>\n-        <class>org.apache.openjpa.integration.validation.Address</class>        \n+        <class>org.apache.openjpa.integration.validation.Address</class> \n+        <class>org.apache.openjpa.integration.validation.Book</class>       \n         <validation-mode>AUTO</validation-mode>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" \n                 value=\"buildSchema\"/>\n         </properties>\n     </persistence-unit>\n     \n+    <persistence-unit name=\"validation-pu\">\n+        <class>org.apache.openjpa.integration.validation.Book</class> \n+        <class>org.apache.openjpa.integration.validation.Publisher</class>      \n+        <validation-mode>AUTO</validation-mode>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"non-validation-pu\">\n+        <class>org.apache.openjpa.integration.validation.Book</class> \n+        <class>org.apache.openjpa.integration.validation.Publisher</class>         \n+        <validation-mode>NONE</validation-mode>\n+    </persistence-unit>\n+    \n+    \n     <persistence-unit name=\"XMLConstraintPU\">\n         <description>Make sure the mapping file and class listings match the same PU\n          in META-INF/ehn-persistence.xml</description>"}]}

