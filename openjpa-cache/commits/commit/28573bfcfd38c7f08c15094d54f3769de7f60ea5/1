{"sha":"28573bfcfd38c7f08c15094d54f3769de7f60ea5","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4NTczYmZjZmQzOGM3ZjA4YzE1MDk0ZDU0ZjM3NjlkZTdmNjBlYTU=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-26T05:26:35Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-09-26T05:26:35Z"},"message":"OPENJPA-1115 Allow schema-less delimited id tests to fail until intermittent cleanup issue is resolved.  Removed duplicate test case and unnecessary em creation in test framework database support methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819093 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7ee7ff71592101e8b25e7c4effe9385661eba4d","url":"https://api.github.com/repos/apache/openjpa/git/trees/e7ee7ff71592101e8b25e7c4effe9385661eba4d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/28573bfcfd38c7f08c15094d54f3769de7f60ea5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/28573bfcfd38c7f08c15094d54f3769de7f60ea5","html_url":"https://github.com/apache/openjpa/commit/28573bfcfd38c7f08c15094d54f3769de7f60ea5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/28573bfcfd38c7f08c15094d54f3769de7f60ea5/comments","author":null,"committer":null,"parents":[{"sha":"5f03f77b5c07befba4c4545d1ec91023ef76e3b5","url":"https://api.github.com/repos/apache/openjpa/commits/5f03f77b5c07befba4c4545d1ec91023ef76e3b5","html_url":"https://github.com/apache/openjpa/commit/5f03f77b5c07befba4c4545d1ec91023ef76e3b5"}],"stats":{"total":147,"additions":12,"deletions":135},"files":[{"sha":"6339bd3720bd5d75a1b09912ce6e60b4bd46dd4e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/28573bfcfd38c7f08c15094d54f3769de7f60ea5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","raw_url":"https://github.com/apache/openjpa/raw/28573bfcfd38c7f08c15094d54f3769de7f60ea5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java?ref=28573bfcfd38c7f08c15094d54f3769de7f60ea5","patch":"@@ -29,8 +29,11 @@\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.AllowFailure;\r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n \r\n+@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\r\n+    \"order issues are resolved.\")\r\n public class TestNoSchemaManualDelimId extends SQLListenerTestCase {\r\n     OpenJPAEntityManager em;\r\n     EntityF entityF;\r"},{"sha":"baa272e905cb65969bab52e01d28788f95547cf1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/28573bfcfd38c7f08c15094d54f3769de7f60ea5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","raw_url":"https://github.com/apache/openjpa/raw/28573bfcfd38c7f08c15094d54f3769de7f60ea5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java?ref=28573bfcfd38c7f08c15094d54f3769de7f60ea5","patch":"@@ -23,8 +23,11 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.AllowFailure;\r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n \r\n+@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\r\n+    \"order issues are resolved.\")\r\n public class TestNoSchemaManualDelimIdSeqGen extends SQLListenerTestCase {\r\n     OpenJPAEntityManager em;\r\n     JDBCConfiguration conf;\r\n@@ -44,7 +47,7 @@ public void setUp() throws Exception {\n         if (isTestsDisabled())\r\n             return;\r\n         \r\n-        super.setUp(EntityE.class); //,DROP_TABLES);\r\n+        super.setUp(EntityE.class, DROP_TABLES);\r\n         assertNotNull(emf);\r\n         \r\n         conf = (JDBCConfiguration) emf.getConfiguration();\r\n@@ -105,7 +108,6 @@ public void testSeqGen() {\n         System.out.println(super.toString(sql));\r\n         \r\n         int genId = entityE.getId();\r\n-        System.out.println(\"generated id - \" + genId);\r\n         em.clear();\r\n         em.getTransaction().begin();\r\n         EntityE eA = em.find(EntityE.class, genId);\r"},{"sha":"31cadc5a249bbb5137f2c574c1f62c08e1ec03b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimInheritance.java","status":"removed","additions":0,"deletions":123,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/5f03f77b5c07befba4c4545d1ec91023ef76e3b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/5f03f77b5c07befba4c4545d1ec91023ef76e3b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimInheritance.java?ref=5f03f77b5c07befba4c4545d1ec91023ef76e3b5","patch":"@@ -1,123 +0,0 @@\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-import org.apache.openjpa.persistence.delimited.identifiers.Animal;\r\n-import org.apache.openjpa.persistence.delimited.identifiers.Cat;\r\n-import org.apache.openjpa.persistence.delimited.identifiers.Dog;\r\n-import org.apache.openjpa.persistence.test.DatabasePlatform;\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-@DatabasePlatform(value=\"\")\r\n-public class TestNoSchemaManualDelimInheritance extends SQLListenerTestCase {\r\n-    OpenJPAEntityManager em;\r\n-    int id = 0;\r\n-    Dog dog;\r\n-    Cat cat;\r\n-    JDBCConfiguration conf;\r\n-    DBDictionary dict;\r\n-    \r\n-    @Override\r\n-    public void setUp() throws Exception {\r\n-        \r\n-        // TODO: Delimiter support is currently limited to database that use\r\n-        // double quote as a delimiter.\r\n-        // Also Disabling DB2 until a SQLCODE -204 issue during the cleanup phase \r\n-        // is resolved.\r\n-        setUnsupportedDatabases(MySQLDictionary.class, DB2Dictionary.class);\r\n-        if (isTestsDisabled())\r\n-            return;\r\n-\r\n-        super.setUp(\r\n-            org.apache.openjpa.persistence.delimited.identifiers.Animal.class,\r\n-            org.apache.openjpa.persistence.delimited.identifiers.Dog.class,\r\n-            org.apache.openjpa.persistence.delimited.identifiers.Cat.class,\r\n-            DROP_TABLES);\r\n-        assertNotNull(emf);\r\n-        \r\n-        em = emf.createEntityManager();\r\n-        assertNotNull(em);\r\n-        \r\n-        conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        dict = conf.getDBDictionaryInstance();\r\n-    }\r\n-    \r\n-    private void createDog(int id) {\r\n-        dog = new Dog(id);\r\n-        dog.setName(\"Spot\");\r\n-        dog.setType(\"dog\");\r\n-    }\r\n-    \r\n-    private void createCat(int id) {\r\n-        cat = new Cat(id);\r\n-        cat.setName(\"Puff\");\r\n-        cat.setType(\"cat\");\r\n-    }\r\n-    \r\n-    public void testCreate() {\r\n-        id++;\r\n-        createDog(id);\r\n-        id++;\r\n-        createCat(id);\r\n-        \r\n-        em.getTransaction().begin();\r\n-        em.persist(dog);\r\n-        em.persist(cat);\r\n-        em.getTransaction().commit();\r\n-        \r\n-        runQueries();\r\n-    }\r\n-    \r\n-    private void runQueries() {\r\n-        em.clear();\r\n-        queryCat();\r\n-        em.clear();\r\n-        queryDog();\r\n-    }\r\n-    \r\n-    private void queryCat() {\r\n-        String query =\r\n-            \"SELECT DISTINCT a \" +\r\n-            \"FROM Animal a \" +\r\n-            \"WHERE a.type = 'cat'\";\r\n-        Query q = em.createQuery(query);\r\n-        List<Animal> results = (List<Animal>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-    \r\n-    // Use native query\r\n-    private void queryDog() {\r\n-        String query = \r\n-            \"SELECT * \" +\r\n-            \"FROM \\\"Animal\\\" a \" +\r\n-            \"WHERE a.\\\"discr col\\\" = 'Dog'\";\r\n-        Query q = em.createNativeQuery(query);\r\n-        List<Animal> results = (List<Animal>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-}\r"},{"sha":"429db1615b3d19d017722fbb7ac31eee8b807a64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/28573bfcfd38c7f08c15094d54f3769de7f60ea5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/28573bfcfd38c7f08c15094d54f3769de7f60ea5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java?ref=28573bfcfd38c7f08c15094d54f3769de7f60ea5","patch":"@@ -27,8 +27,11 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.AllowFailure;\r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n \r\n+@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\r\n+    \"order issues are resolved.\")\r\n public class TestNoSchemaManualDelimitedJoinAnnotations extends SQLListenerTestCase {\r\n     OpenJPAEntityManager em;\r\n     int id = 0;\r"},{"sha":"181671f465b527b63f0eb022af2992432033f0df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/28573bfcfd38c7f08c15094d54f3769de7f60ea5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/28573bfcfd38c7f08c15094d54f3769de7f60ea5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=28573bfcfd38c7f08c15094d54f3769de7f60ea5","patch":"@@ -166,9 +166,7 @@ protected void setUnsupportedDatabases(Class<?> ... dbs) {\n         if (tempEMF == null) {\n             tempEMF = createEMF();\n         }\n-        OpenJPAEntityManagerSPI em = tempEMF.createEntityManager();\n-        JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\n-        DBDictionary dict = conf.getDBDictionaryInstance();\n+        DBDictionary dict = ((JDBCConfiguration)tempEMF.getConfiguration()).getDBDictionaryInstance();\n         for (Class<?> db : dbs) {\n             if (dict.getClass().getCanonicalName().equalsIgnoreCase(db.getCanonicalName())) {\n                 setTestsDisabled(true);\n@@ -177,8 +175,6 @@ protected void setUnsupportedDatabases(Class<?> ... dbs) {\n         }\n         if (emf == null) {\n             closeEMF(tempEMF);\n-        } else {\n-            em.close();\n         }\n     }\n     \n@@ -187,9 +183,7 @@ protected void setSupportedDatabases(Class<?> ... dbs) {\n         if (tempEMF == null) {\n             tempEMF = createEMF();\n         }\n-        OpenJPAEntityManagerSPI em = tempEMF.createEntityManager();\n-        JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\n-        DBDictionary dict = conf.getDBDictionaryInstance();\n+        DBDictionary dict = ((JDBCConfiguration)tempEMF.getConfiguration()).getDBDictionaryInstance();\n         boolean supportedDB = false;\n         for (Class<?> db : dbs) {\n             if (dict.getClass().getCanonicalName().equalsIgnoreCase(db.getCanonicalName())) {\n@@ -200,8 +194,6 @@ protected void setSupportedDatabases(Class<?> ... dbs) {\n         setTestsDisabled(!supportedDB);\n         if (emf == null) {\n             closeEMF(tempEMF);\n-        } else {\n-            em.close();\n         }\n     }\n     "}]}

