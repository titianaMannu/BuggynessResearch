{"sha":"28a0c0da8639543ae859bcf53c576cbaa21f2d72","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4YTBjMGRhODYzOTU0M2FlODU5YmNmNTNjNTc2Y2JhYTIxZjJkNzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2011-01-17T21:15:29Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2011-01-17T21:15:29Z"},"message":"OPENJPA-1923: Remove restriction to enclose collection-valued query parameter in parentheses. The commit ran tests locally and partially as my TeamCity agent is broken.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1060094 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7b5b28797b4c055c955af2aeb601948741a7a517","url":"https://api.github.com/repos/apache/openjpa/git/trees/7b5b28797b4c055c955af2aeb601948741a7a517"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/28a0c0da8639543ae859bcf53c576cbaa21f2d72","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/28a0c0da8639543ae859bcf53c576cbaa21f2d72","html_url":"https://github.com/apache/openjpa/commit/28a0c0da8639543ae859bcf53c576cbaa21f2d72","comments_url":"https://api.github.com/repos/apache/openjpa/commits/28a0c0da8639543ae859bcf53c576cbaa21f2d72/comments","author":null,"committer":null,"parents":[{"sha":"0568802abfa03a59230b6d2b24be2a5cdb70e8e7","url":"https://api.github.com/repos/apache/openjpa/commits/0568802abfa03a59230b6d2b24be2a5cdb70e8e7","html_url":"https://github.com/apache/openjpa/commit/0568802abfa03a59230b6d2b24be2a5cdb70e8e7"}],"stats":{"total":179,"additions":175,"deletions":4},"files":[{"sha":"3cb0bea83de5a749d02758f254aa1437bd46c6a3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/28a0c0da8639543ae859bcf53c576cbaa21f2d72/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/28a0c0da8639543ae859bcf53c576cbaa21f2d72/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=28a0c0da8639543ae859bcf53c576cbaa21f2d72","patch":"@@ -138,10 +138,6 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n             pstate.sqlValue = mapping.toDataStoreValue(val,\n                 mapping.getPrimaryKeyColumns(), ctx.store);\n             pstate.otherLength = mapping.getPrimaryKeyColumns().length;\n-        } else if (val instanceof Collection) {\n-            throw new IllegalArgumentException(_loc.get(\n-                \"collection-param-not-allowed\", _key).toString());\n-            \n         } else\n             pstate.sqlValue = val;\n     }"},{"sha":"8e0bec389c26ec595daaa6423f64dfd6750d7367","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestInExpressionParamaterBinding.java","status":"added","additions":175,"deletions":0,"changes":175,"blob_url":"https://github.com/apache/openjpa/blob/28a0c0da8639543ae859bcf53c576cbaa21f2d72/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestInExpressionParamaterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/28a0c0da8639543ae859bcf53c576cbaa21f2d72/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestInExpressionParamaterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestInExpressionParamaterBinding.java?ref=28a0c0da8639543ae859bcf53c576cbaa21f2d72","patch":"@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.persistence.TypedQuery;\n+\n+import org.apache.openjpa.kernel.PreparedQuery;\n+import org.apache.openjpa.kernel.PreparedQueryCache;\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests parameter binding to IN() expressions. \n+ * IN() expressions accept parameters in following forms according to JPA 2.0 specification<br>\n+ * <tt>select p from PObject p where p.name IN (:n1,:n2,:n3)</tt> // where n1,n2,n3 are of bound to type of p.name<br>\n+ * <tt>select p from PObject p where p.name IN :n</tt> // where n is bound to collection of type of p.name</br>\n+ * <p>\n+ * For backward compatibility to 1.2 version, we also allow<br>\n+ * <tt>select p from PObject p where p.name IN (:n)</tt> where n is a collection and within parentheses<br>\n+ * <p>\n+ * So, collection-valued parameter is allowed with or without parenthese. But, single-valued parameters are \n+ * <em>only</em> allowed with parentheses. \n+ * <p>\n+ * The test also validates that such binding will work with PreparedQuery Cache because Prepared Query cache\n+ * rebinds parameters and designed to ignore queries with IN() expression. \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestInExpressionParamaterBinding extends SingleEMFTestCase {\n+    private static OpenJPAEntityManagerFactory _emf;\n+    private static List<Integer> ORIGINAL_ZIPS;\n+    private OpenJPAEntityManager _em;\n+    \n+    public void setUp() throws Exception {\n+        if (_emf == null) {\n+            super.setUp(Address.class, \"openjpa.ConnectionFactoryProperties\", \"PrintParameters=true\", CLEAR_TABLES);\n+            _emf = emf; // from the super class\n+            ORIGINAL_ZIPS = Arrays.asList(12345, 23456, 34567, 45678, 56789, 67890);\n+            createData();\n+        }\n+        _em = _emf.createEntityManager();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        // block super class tear down\n+    }\n+    \n+    private void createData() {\n+        OpenJPAEntityManager em = _emf.createEntityManager();\n+        em.getTransaction().begin();\n+        for (int i = 0; i < ORIGINAL_ZIPS.size(); i++) {\n+            Address a = new Address();\n+            a.setZip(ORIGINAL_ZIPS.get(i));\n+            em.persist(a);\n+        }\n+        em.getTransaction().commit();\n+    }\n+    \n+    public void testWithCollectionParamOfDifferentSize() {\n+        String jpql = \"select a from Address a where a.zip in (:p)\";\n+        List<Integer> zips1 = ORIGINAL_ZIPS.subList(0, 3);\n+        List<Address> result1 = _em.createQuery(jpql, Address.class).setParameter(\"p\", zips1).getResultList();\n+        assertEquals(zips1.size(), result1.size());\n+        assertNotCached(jpql);\n+        \n+        List<Integer> zips2 = ORIGINAL_ZIPS.subList(2, 4);\n+        List<Address> result2 = _em.createQuery(jpql, Address.class).setParameter(\"p\", zips2).getResultList();\n+        assertEquals(zips2.size(), result2.size());\n+        \n+    }\n+    \n+    public void testWithCollectionParamOfDifferentSizeNoParentheses() {\n+        String jpql = \"select a from Address a where a.zip in :p\";\n+        List<Integer> zips1 = ORIGINAL_ZIPS.subList(0, 3);\n+        List<Address> result1 = _em.createQuery(jpql, Address.class).setParameter(\"p\", zips1).getResultList();\n+        assertEquals(zips1.size(), result1.size());\n+        assertNotCached(jpql);\n+\n+        List<Integer> zips2 = ORIGINAL_ZIPS.subList(2, 4);\n+        List<Address> result2 = _em.createQuery(jpql, Address.class).setParameter(\"p\", zips2).getResultList();\n+        assertEquals(zips2.size(), result2.size());\n+    }\n+    \n+    public void testWithSingleParam() {\n+        String jpql = \"select a from Address a where a.zip in (:p)\";\n+        Integer zip1 = ORIGINAL_ZIPS.get(4);\n+        List<Address> result1 = _em.createQuery(jpql, Address.class).setParameter(\"p\", zip1).getResultList();\n+        assertEquals(1, result1.size());\n+        assertEquals(zip1.intValue(), result1.get(0).getZip());\n+        assertNotCached(jpql);\n+\n+        Integer zip2 = ORIGINAL_ZIPS.get(2);\n+        List<Address> result2 = _em.createQuery(jpql, Address.class).setParameter(\"p\", zip2).getResultList();\n+        assertEquals(1, result2.size());\n+        assertEquals(zip2.intValue(), result2.get(0).getZip());\n+    }\n+    \n+    public void testWithMultiplParamOfDifferentSizeNoParentheses() {\n+        String jpql = \"select a from Address a where a.zip in (:p1,:p2,:p3)\";\n+        List<Integer> zips1 = ORIGINAL_ZIPS.subList(0, 3);\n+        TypedQuery<Address> query1 = _em.createQuery(jpql, Address.class);\n+        query1.setParameter(\"p1\", zips1.get(0));\n+        query1.setParameter(\"p2\", zips1.get(1));\n+        query1.setParameter(\"p3\", zips1.get(2));\n+        List<Address> result1 = query1.getResultList();\n+        assertEquals(zips1.size(), result1.size());\n+        assertNotCached(jpql);\n+        \n+        List<Integer> zips2 = ORIGINAL_ZIPS.subList(2, 5);\n+        TypedQuery<Address> query2 = _em.createQuery(jpql, Address.class);\n+        query2.setParameter(\"p1\", zips2.get(0));\n+        query2.setParameter(\"p2\", zips2.get(1));\n+        query2.setParameter(\"p3\", zips2.get(2));\n+        List<Address> result2 = query2.getResultList();\n+        assertEquals(zips2.size(), result2.size());\n+    }\n+    \n+    public void testWithSingleParamNoParentheses() {\n+        OpenJPAEntityManager em = _emf.createEntityManager();\n+        String jpql = \"select a from Address a where a.zip in :p\";\n+        Integer zip = ORIGINAL_ZIPS.get(4);\n+        TypedQuery<Address> q = em.createQuery(jpql, Address.class);\n+        q.setParameter(\"p\", zip);\n+        try {\n+            List<Address> result = q.getResultList();\n+            fail(\"Expected error in execution because single-valued parameter not acceptable without parenthese\");\n+        } catch (ArgumentException e) {\n+            // expected \n+        }\n+        \n+    }\n+    \n+    \n+    void assertCached(String id) {\n+        PreparedQuery cached = getPreparedQueryCache().get(id);\n+        assertNotNull(getPreparedQueryCache() + \": \" + getPreparedQueryCache().getMapView() + \n+                \" does not contain \" + id, cached);\n+    }\n+    \n+    void assertNotCached(String id) {\n+        PreparedQueryCache cache = getPreparedQueryCache();\n+        if (cache != null) {\n+            assertNull(cache.get(id));\n+        }\n+    }\n+    PreparedQueryCache getPreparedQueryCache() {\n+        return _emf.getConfiguration().getQuerySQLCacheInstance();\n+    }\n+\n+}"}]}

