{"sha":"28da3eaccfb62847285dc270318dd2fc873afe6e","node_id":"MDY6Q29tbWl0MjA2MzY0OjI4ZGEzZWFjY2ZiNjI4NDcyODVkYzI3MDMxOGRkMmZjODczYWZlNmU=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-10-18T19:52:10Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-10-18T19:52:10Z"},"message":"OPENJPA-2609: Sporadic ClassCastException occurs under heavy load when QuerySQLCache is enabled.  Merged 2.1.x changes to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1709312 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2c95757b8dcea019489eca0a187cda782de1640f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2c95757b8dcea019489eca0a187cda782de1640f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/28da3eaccfb62847285dc270318dd2fc873afe6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/28da3eaccfb62847285dc270318dd2fc873afe6e","html_url":"https://github.com/apache/openjpa/commit/28da3eaccfb62847285dc270318dd2fc873afe6e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/28da3eaccfb62847285dc270318dd2fc873afe6e/comments","author":null,"committer":null,"parents":[{"sha":"977ba12bfafc3de8042e93e162985d003cd6a641","url":"https://api.github.com/repos/apache/openjpa/commits/977ba12bfafc3de8042e93e162985d003cd6a641","html_url":"https://github.com/apache/openjpa/commit/977ba12bfafc3de8042e93e162985d003cd6a641"}],"stats":{"total":21,"additions":14,"deletions":7},"files":[{"sha":"2269ba61018c9cccc2a0d8bc6e5038e4d2e958e3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/28da3eaccfb62847285dc270318dd2fc873afe6e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/28da3eaccfb62847285dc270318dd2fc873afe6e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=28da3eaccfb62847285dc270318dd2fc873afe6e","patch":"@@ -105,18 +105,25 @@ public Boolean register(String id, Query query, FetchConfiguration hints) {\n \t}\n \t\n \t/**\n-\t * Cache the given query keyed by its identifier. Does not cache if the \n-\t * identifier matches any exclusion pattern or has been marked as \n-\t * non-cachable. Also register the identifier as not cachable against \n-\t * the matched exclusion pattern.\n+\t * Cache the given query keyed by its identifier. Does not cache if the\n+\t * identifier matches any exclusion pattern or has been marked as\n+\t * non-cachable. Also register the identifier as not cachable against the\n+\t * matched exclusion pattern.\n \t */\n \tpublic boolean cache(PreparedQuery q) {\n \t\tlock(false);\n \t\ttry {\n \t\t\tString id = q.getIdentifier();\n+\n+\t\t\t// OPENJPA-2609: Make sure another thread didn't add the 'id'\n+\t\t\t// while holding the 'lock'.\n+\t\t\tif (_delegate.containsKey(id)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n \t\t\tif (Boolean.FALSE.equals(isCachable(id))) {\n \t\t\t\tif (_log != null && _log.isTraceEnabled())\n-                    _log.trace(_loc.get(\"prepared-query-not-cachable\", id));\n+\t\t\t\t\t_log.trace(_loc.get(\"prepared-query-not-cachable\", id));\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tExclusion exclusion = getMatchedExclusionPattern(id);\n@@ -125,8 +132,8 @@ public boolean cache(PreparedQuery q) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\t_delegate.put(id, q);\n-            if (_log != null && _log.isTraceEnabled())\n-                _log.trace(_loc.get(\"prepared-query-cached\", id));\n+\t\t\tif (_log != null && _log.isTraceEnabled())\n+\t\t\t\t_log.trace(_loc.get(\"prepared-query-cached\", id));\n \t\t\treturn true;\n \t\t} finally {\n \t\t\tunlock(false);"}]}

