{"sha":"2901ea6e52b348dde119185181c33a5038f47922","node_id":"MDY6Q29tbWl0MjA2MzY0OjI5MDFlYTZlNTJiMzQ4ZGRlMTE5MTg1MTgxYzMzYTUwMzhmNDc5MjI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-04-08T22:06:56Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-04-08T22:06:56Z"},"message":"OPENJPA-1028: fixed setMappedByValue when embeddable is involved.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@763427 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70529946e7061010426fc14caae060b0516f28fa","url":"https://api.github.com/repos/apache/openjpa/git/trees/70529946e7061010426fc14caae060b0516f28fa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2901ea6e52b348dde119185181c33a5038f47922","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2901ea6e52b348dde119185181c33a5038f47922","html_url":"https://github.com/apache/openjpa/commit/2901ea6e52b348dde119185181c33a5038f47922","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2901ea6e52b348dde119185181c33a5038f47922/comments","author":null,"committer":null,"parents":[{"sha":"e4ec2cf90d954d9e8df9eeba94dcdfd98dfbe6a0","url":"https://api.github.com/repos/apache/openjpa/commits/e4ec2cf90d954d9e8df9eeba94dcdfd98dfbe6a0","html_url":"https://github.com/apache/openjpa/commit/e4ec2cf90d954d9e8df9eeba94dcdfd98dfbe6a0"}],"stats":{"total":271,"additions":267,"deletions":4},"files":[{"sha":"fe6df76bc39ffa599fc025f421965146841b2078","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2901ea6e52b348dde119185181c33a5038f47922/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2901ea6e52b348dde119185181c33a5038f47922/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=2901ea6e52b348dde119185181c33a5038f47922","patch":"@@ -54,7 +54,6 @@\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -660,7 +659,7 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n             // By saving the mapped-by info in 'res' is to\n             // avoid unneeded SQL pushdown that would otherwise gets\n             // generated.\n-            if (decMeta != null) {\n+            if (decMeta != null && !sm.isEmbedded()) {\n         \t    mappedByValue = sm.getPersistenceCapable();\n         \t    res.setMappedByFieldMapping(mappedByFieldMapping);\n         \t    res.setMappedByValue(mappedByValue);"},{"sha":"bcbb4d496a9df989f4fca1353d7cd9529bde0db6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_MappedToOne.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/2901ea6e52b348dde119185181c33a5038f47922/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_MappedToOne.java","raw_url":"https://github.com/apache/openjpa/raw/2901ea6e52b348dde119185181c33a5038f47922/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_MappedToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_MappedToOne.java?ref=2901ea6e52b348dde119185181c33a5038f47922","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Embeddable \r\n+public class Embed_MappedToOne {\r\n+    protected String name1;\r\n+    protected String name2;\r\n+    protected String name3;\r\n+    \r\n+    @OneToOne(mappedBy=\"entityA\")\r\n+    protected EntityB1 bm;\r\n+    \r\n+    \r\n+    public String getName1() {\r\n+        return name1;\r\n+    }\r\n+    \r\n+    public void setName1(String name1) {\r\n+        this.name1 = name1;\r\n+    }\r\n+    \r\n+    public String getName2() {\r\n+        return name2;\r\n+    }\r\n+    \r\n+    public void setName2(String name2) {\r\n+        this.name2 = name2;\r\n+    }\r\n+    \r\n+    public String getName3() {\r\n+        return name3;\r\n+    }\r\n+    \r\n+    public void setName3(String name3) {\r\n+        this.name3 = name3;\r\n+    }\r\n+    \r\n+    public void setMappedEntityB(EntityB1 bm) {\r\n+        this.bm = bm;\r\n+    }\r\n+    \r\n+    public EntityB1 getMappedEntityB() {\r\n+        return bm;\r\n+    }\r\n+}\r"},{"sha":"24a7f987720cc9ed67c1855b92b35ab562c3b7b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_MappedToOne.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/2901ea6e52b348dde119185181c33a5038f47922/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_MappedToOne.java","raw_url":"https://github.com/apache/openjpa/raw/2901ea6e52b348dde119185181c33a5038f47922/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_MappedToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_MappedToOne.java?ref=2901ea6e52b348dde119185181c33a5038f47922","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Embedded;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class EntityA_Embed_MappedToOne implements Serializable {\r\n+    @Id\r\n+    Integer id;\r\n+\r\n+    @Column(length=30)\r\n+    String name;\r\n+    \r\n+    @Basic(fetch=FetchType.LAZY)\r\n+    int age;\r\n+\r\n+    @Embedded\r\n+    protected Embed_MappedToOne embed;\r\n+    \r\n+    public int getAge() {\r\n+        return age;\r\n+    }\r\n+\r\n+    public void setAge(int age) {\r\n+        this.age = age;\r\n+    }\r\n+\r\n+    public Integer getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Integer id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public Embed_MappedToOne getEmbed() {\r\n+        return embed;\r\n+    }\r\n+    \r\n+    public void setEmbed(Embed_MappedToOne embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+}\r\n+\r"},{"sha":"bf06a944f74940ea171d95bd29d498d5aa3188d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/2901ea6e52b348dde119185181c33a5038f47922/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","raw_url":"https://github.com/apache/openjpa/raw/2901ea6e52b348dde119185181c33a5038f47922/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java?ref=2901ea6e52b348dde119185181c33a5038f47922","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n \n @Entity\n public class EntityB1 implements Serializable {\n@@ -31,6 +32,9 @@\n \n     @Column(length=30)\n     String name;\n+    \n+    @OneToOne\n+    EntityA_Embed_MappedToOne entityA;\n \n     public int getId() {\n         return id;\n@@ -47,5 +51,13 @@ public String getName() {\n     public void setName(String name) {\n         this.name = name;\n     }\n+\n+    public EntityA_Embed_MappedToOne getEntityA() {\n+        return entityA;\n+    }\n+\n+    public void setEntityA(EntityA_Embed_MappedToOne entityA) {\n+        this.entityA = entityA;\n+    }\n }\n "},{"sha":"c8a5d3fa4acbb383d07f679c7ca4247ec02533f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":114,"deletions":2,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/2901ea6e52b348dde119185181c33a5038f47922/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/2901ea6e52b348dde119185181c33a5038f47922/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=2901ea6e52b348dde119185181c33a5038f47922","patch":"@@ -78,8 +78,8 @@ public void setUp() {\n             Employee2.class, EmployeePK2.class, Department3.class,\n             Employee3.class, EmployeeName3.class, Item1.class, Item2.class,\n             Item3.class, Company1.class, Company2.class, Division.class, \n-            VicePresident.class,\n-            DROP_TABLES);\n+            VicePresident.class, EntityA_Embed_MappedToOne.class,\n+            Embed_MappedToOne.class, DROP_TABLES);\n     }\n     \n     public void testEntityA_Coll_String() {\n@@ -94,6 +94,12 @@ public void testEntityA_Embed_ToOne() {\n         findEntityA_Embed_ToOne();\n     }\n \n+    public void testEntityA_Embed_MappedToOne() {\n+        createEntityA_Embed_MappedToOne();\n+        queryEntityA_Embed_MappedToOne();\n+        findEntityA_Embed_MappedToOne();\n+    }\n+\n     public void testEntityA_Coll_Embed_ToOne() {\n         createEntityA_Coll_Embed_ToOne();\n         queryEntityA_Coll_Embed_ToOne();\n@@ -213,6 +219,44 @@ public Embed_ToOne createEmbed_ToOne(EntityManager em, int id) {\n         return embed;\n     }\n \n+    /*\n+     * Create EntityA_Embed_MappedToOne\n+     */\n+    public void createEntityA_Embed_MappedToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        createEntityA_Embed_MappedToOne(em, ID);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void createEntityA_Embed_MappedToOne(EntityManager em, int id) {\n+        EntityA_Embed_MappedToOne a = new EntityA_Embed_MappedToOne();\n+        a.setId(id);\n+        a.setName(\"a\" + id);\n+        a.setAge(id);\n+        Embed_MappedToOne embed = createEmbed_MappedToOne(em, id, a);\n+        a.setEmbed(embed);\n+        em.persist(a);\n+    }\n+\n+    public Embed_MappedToOne createEmbed_MappedToOne(EntityManager em, int id, \n+        EntityA_Embed_MappedToOne a) {\n+        Embed_MappedToOne embed = new Embed_MappedToOne();\n+        embed.setName1(\"name1\");\n+        embed.setName2(\"name2\");\n+        embed.setName3(\"name3\");\n+        EntityB1 b = new EntityB1();\n+        b.setId(id);\n+        b.setName(\"bm\" + id);\n+        b.setEntityA(a);\n+        embed.setMappedEntityB(b);\n+        em.persist(b);\n+        return embed;\n+    }\n+\n     /*\n      * Create EntityA_Coll_Embed_ToOne\n      */\n@@ -670,6 +714,16 @@ public void findEntityA_Embed_ToOne() {\n         em.close();\n     }\n \n+    /*\n+     * Find EntityA_Embed_MappedToOne\n+     */\n+    public void findEntityA_Embed_MappedToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityA_Embed_MappedToOne a = em.find(EntityA_Embed_MappedToOne.class, ID);\n+        checkEntityA_Embed_MappedToOne(a);\n+        em.close();\n+    }\n+\n     /*\n      * Find EntityA_Coll_Embed_ToOne\n      */\n@@ -769,6 +823,20 @@ public void checkEntityA_Embed_ToOne(EntityA_Embed_ToOne a) {\n         checkEmbed_ToOne(embed);\n     }\n \n+    /*\n+     * check EntityA_Embed_MappedToOne\n+     */\n+    public void checkEntityA_Embed_MappedToOne(EntityA_Embed_MappedToOne a) {\n+        int id = a.getId();\n+        String name = a.getName();\n+        int age = a.getAge();\n+        assertEquals(1, id);\n+        assertEquals(\"a\" + id ,name);\n+        assertEquals(1, age);\n+        Embed_MappedToOne embed = a.getEmbed();\n+        checkEmbed_MappedToOne(embed);\n+    }\n+\n     /*\n      * check EntityA_Coll_Embed_ToOne\n      */\n@@ -796,6 +864,18 @@ public void checkEmbed_ToOne(Embed_ToOne embed) {\n         assertEquals(\"b\" + b.getId(), b.getName());\n     }\n \n+    public void checkEmbed_MappedToOne(Embed_MappedToOne embed) {\n+        String name1 = embed.getName1();\n+        String name2 = embed.getName2();\n+        String name3 = embed.getName3();\n+        assertEquals(\"name1\", name1);\n+        assertEquals(\"name2\", name2);\n+        assertEquals(\"name3\", name3);\n+        EntityB1 b = embed.getMappedEntityB();\n+        assertEquals(1, b.getId());\n+        assertEquals(\"bm\" + b.getId(), b.getName());\n+    }\n+\n     /*\n      * check EntityA_Embed_ToMany\n      */\n@@ -1012,6 +1092,38 @@ public void queryEntityA_Embed_ToOne() {\n         em.close();\n     }\n \n+    /*\n+     * Query EntityA_Embed_MappedToOne\n+     */\n+    public void queryEntityA_Embed_MappedToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        // test select embed object\n+        String[] query = {\n+            \"select a.embed from \" +\n+                \" EntityA_Embed_MappedToOne a \",\n+            \"select e from EntityA_Embed_MappedToOne a \" +\n+                \" join a.embed e join e.bm bm where e.bm.id > 0 order by a.id\",\n+        };\n+        for (int i = 0; i < query.length; i++) {\n+            List<Object[]> rs = null;\n+            rs = em.createQuery(query[i]).getResultList();\n+            assertTrue(rs.size() > 0);\n+            Object obj = rs.get(0);\n+            assertTrue(obj instanceof Embed_MappedToOne);\n+            assertTrue(((Embed_MappedToOne) obj).getMappedEntityB() != null);\n+            em.clear();\n+        }\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select a from EntityA_Embed_MappedToOne a\");\n+        List<EntityA_Embed_MappedToOne> as = q.getResultList();\n+        for (EntityA_Embed_MappedToOne a : as) {\n+            checkEntityA_Embed_MappedToOne(a);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n     /*\n      * Query EntityA_Coll_Embed_ToOne\n      */"}]}

