{"sha":"29e919f2ccea6667a47212f1f333fe78a8b43fc0","node_id":"MDY6Q29tbWl0MjA2MzY0OjI5ZTkxOWYyY2NlYTY2NjdhNDcyMTJmMWYzMzNmZTc4YThiNDNmYzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T09:33:28Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T09:33:28Z"},"message":"OPENJPA-1444:  distinct query \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893447 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ea0d77be4231e6cdeed6934fe16de2a08c34c49f","url":"https://api.github.com/repos/apache/openjpa/git/trees/ea0d77be4231e6cdeed6934fe16de2a08c34c49f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/29e919f2ccea6667a47212f1f333fe78a8b43fc0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/29e919f2ccea6667a47212f1f333fe78a8b43fc0","html_url":"https://github.com/apache/openjpa/commit/29e919f2ccea6667a47212f1f333fe78a8b43fc0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/29e919f2ccea6667a47212f1f333fe78a8b43fc0/comments","author":null,"committer":null,"parents":[{"sha":"3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","url":"https://api.github.com/repos/apache/openjpa/commits/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","html_url":"https://github.com/apache/openjpa/commit/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae"}],"stats":{"total":90,"additions":32,"deletions":58},"files":[{"sha":"904b6582e98b9bd0df6444e3ee65fc77dd64a365","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -464,6 +464,10 @@ public boolean isAggregate(StoreQuery q) {\n             return _ex.isAggregate(unwrap(q));\n         }\n \n+        public boolean isDistinct(StoreQuery q) {\n+            return _ex.isDistinct(unwrap(q));\n+        }\n+\n         public boolean hasGrouping(StoreQuery q) {\n             return _ex.hasGrouping(unwrap(q));\n         }"},{"sha":"2abe5de0efacda6cba730e202649491d5c7bb3de","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -184,6 +184,10 @@ public int getOperation(StoreQuery q) {\n         public boolean isAggregate(StoreQuery q) {\n             return false;\n         }\n+        \n+        public boolean isDistinct(StoreQuery q) {\n+            return false;\n+        }\n \n         public boolean hasGrouping(StoreQuery q) {\n             return false;"},{"sha":"cc81bd1833829a3b5f3408e5cebac36230976692","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -343,15 +343,6 @@ public boolean isDistinct() {\n         }\n     }\n \n-    public void setDistinct(boolean distinct) {\n-        try {\n-            _query.setDistinct(distinct);\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-\n     public Class getResultType() {\n         try {\n             return _query.getResultType();"},{"sha":"475b5351dce1854bc6faa0b35d2f393a684dbd43","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -382,6 +382,10 @@ public final int getOperation(StoreQuery q) {\n         public final boolean isAggregate(StoreQuery q) {\n             return assertQueryExpression().isAggregate();\n         }\n+        \n+        public final boolean isDistinct(StoreQuery q) {\n+            return assertQueryExpression().isDistinct();\n+        }\n \n         public final boolean hasGrouping(StoreQuery q) {\n             return assertQueryExpression().grouping.length > 0;"},{"sha":"1869b541db4414f00c8c3bc9ac85735b96986d01","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -126,13 +126,6 @@\n      */\n     public boolean isDistinct();\n \n-    /**\n-     * Specify that the query will return distinct instances.\n-     *\n-     * @since 2.0.0\n-     */\n-    public void setDistinct(boolean distinct);\n-\n \n     /**\n      * Scope of a mapping from the result data to its object representation."},{"sha":"e2e42b63da889c429410d0757487535803dfa000","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -119,7 +119,6 @@\n     // these fields should only be used directly after we have a compilation,\n     // because their values may be encoded in the query string\n     private Boolean _unique = null;\n-    private boolean _distinct = false;\n     private Class<?> _resultClass = null;\n     private transient long _startIdx = 0;\n     private transient long _endIdx = Long.MAX_VALUE;\n@@ -471,27 +470,6 @@ public boolean isUnique() {\n         }\n     }\n     \n-    /**\n-     * Sets this query to return distinct result.\n-     */\n-    public void setDistinct(boolean flag) {\n-        lock();\n-        try {\n-            assertOpen();\n-            // allowed modification: no read-only check\n-            _distinct = flag;\n-        } finally {\n-            unlock();\n-        }\n-    }\n-    \n-    /**\n-     * Affirms if this query will return distinct elements.\n-     */\n-    public boolean isDistinct() {\n-        return _distinct;\n-    }\n-    \n     /**\n      * Affirms if this query has originated by parsing a string-based query.\n      */\n@@ -1548,6 +1526,16 @@ public boolean isAggregate() {\n             unlock();\n         }\n     }\n+    \n+    public boolean isDistinct() {\n+        lock();\n+        try {\n+            return compileForExecutor().isDistinct(_storeQuery);\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n \n     public boolean hasGrouping() {\n         lock();\n@@ -2014,6 +2002,10 @@ public boolean isAggregate(StoreQuery q) {\n                 q.getContext().getCandidateType(),\n                 q.getContext().getQueryString()));\n         }\n+        \n+        public boolean isDistinct(StoreQuery q) {\n+            return _executors[0].isDistinct(q);\n+        }\n \n         public int getOperation(StoreQuery q) {\n             return _executors[0].getOperation(q);"},{"sha":"41e7f0f25375562f50108d8d8cb0a5189921a214","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -105,6 +105,10 @@ public boolean isAggregate() {\n                 ? Boolean.TRUE : Boolean.FALSE;\n         return _aggregate.booleanValue();    \n     }\n+    \n+    public boolean isDistinct() {\n+        return distinct != DISTINCT_FALSE;\n+    }\n \n     /**\n      * Add an update."},{"sha":"b4e250460e98e13bb6fc61f0d70caf69d3fa4b66","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -168,12 +168,8 @@ protected void evalGrouping(QueryExpressions exps, ExpressionFactory factory, Cr\n     }\n \n     protected void evalDistinct(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-        if (q.hasFetchJoins()) {\n-            exps.distinct = QueryExpressions.DISTINCT_FALSE;\n-        } else {\n-            exps.distinct = q.isDistinct() ? QueryExpressions.DISTINCT_TRUE | QueryExpressions.DISTINCT_AUTO\n-                : QueryExpressions.DISTINCT_FALSE;\n-        }\n+        exps.distinct = q.isDistinct() ? QueryExpressions.DISTINCT_TRUE | QueryExpressions.DISTINCT_AUTO\n+            : QueryExpressions.DISTINCT_FALSE;\n      }\n \n     protected void evalCrossJoinRoots(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n@@ -267,16 +263,13 @@ private void getProjections(QueryExpressions exps, List<Selection<?>> selections\n             selections = new ArrayList<Selection<?>>(1);\n             selections.add(r);\n         }\n-        boolean usingFetchJoin = q.hasFetchJoins();\n         for (Selection<?> s : selections) {\n             if (s.isCompoundSelection()) {\n                 getProjections(exps, s.getCompoundSelectionItems(), projections, aliases, \n                     clauses, factory, q, featureSelection, exp2Vals);\n             } else {\n                 Value val = (exp2Vals != null && exp2Vals.containsKey(s) \n                         ? exp2Vals.get(s) : ((ExpressionImpl<?>)s).toValue(factory, q));\n-                if (q.isDistinct() && usingFetchJoin)\n-                    val = factory.distinct(val);\n                 String alias = s.getAlias();\n                 val.setAlias(alias);\n                 projections.add(val);"},{"sha":"91664be98c6a20c96523e18ff5fc178d3c3c6e11","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/29e919f2ccea6667a47212f1f333fe78a8b43fc0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=29e919f2ccea6667a47212f1f333fe78a8b43fc0","patch":"@@ -649,17 +649,6 @@ private void collectParameters(CriteriaExpressionVisitor visitor) {\n         }\n     }\n     \n-    boolean hasFetchJoins() {\n-        Set<Root<?>> roots = getRoots();\n-        if (roots == null || roots.isEmpty())\n-            return false;\n-        for (Root<?> root : roots) {\n-            if (!root.getFetches().isEmpty())\n-                return true;\n-        }\n-        return false;\n-    }\n-\n     /**\n      * Gets the string representation of the query.\n      */"}]}

