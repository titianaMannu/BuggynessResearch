{"sha":"2a588d6a2bcf8982dcc98aa0a8388740bfea8352","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhNTg4ZDZhMmJjZjg5ODJkY2M5OGFhMGE4Mzg4NzQwYmZlYTgzNTI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-03T22:41:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-03T22:41:07Z"},"message":"OPENJPA-652: Formatting to be published base TestCases\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@673855 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4476ac478d30010c0a9518f659b33a12915b9079","url":"https://api.github.com/repos/apache/openjpa/git/trees/4476ac478d30010c0a9518f659b33a12915b9079"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a588d6a2bcf8982dcc98aa0a8388740bfea8352","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a588d6a2bcf8982dcc98aa0a8388740bfea8352","html_url":"https://github.com/apache/openjpa/commit/2a588d6a2bcf8982dcc98aa0a8388740bfea8352","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a588d6a2bcf8982dcc98aa0a8388740bfea8352/comments","author":null,"committer":null,"parents":[{"sha":"13e48971736a7727f65293895c175ef992c30d1e","url":"https://api.github.com/repos/apache/openjpa/commits/13e48971736a7727f65293895c175ef992c30d1e","html_url":"https://github.com/apache/openjpa/commit/13e48971736a7727f65293895c175ef992c30d1e"}],"stats":{"total":34,"additions":26,"deletions":8},"files":[{"sha":"f20312eb0299aac55604851c8288afd9667cfa60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/2a588d6a2bcf8982dcc98aa0a8388740bfea8352/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/2a588d6a2bcf8982dcc98aa0a8388740bfea8352/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=2a588d6a2bcf8982dcc98aa0a8388740bfea8352","patch":"@@ -43,10 +43,15 @@\n     extends TestCase {\n \n     /**\n-     * Marker object you an pass to {@link #setUp} to indicate that the\n-     * database tables should be cleared.\n+     * Marker object you pass to {@link #setUp} to indicate that the\n+     * database table rows should be cleared.\n      */\n     protected static final Object CLEAR_TABLES = new Object();\n+\n+    /**\n+     * Marker object you pass to {@link #setUp} to indicate that the\n+     * database table should be dropped and then recreated.\n+     */\n     protected static final Object DROP_TABLES = new Object();\n \n     /**\n@@ -152,7 +157,8 @@ protected boolean closeEMF(EntityManagerFactory emf) {\n     }\n \n     /**\n-     * Closes all open entity managers after first rolling back any open transactions\n+     * Closes all open entity managers after first rolling back any open \n+     * transactions.\n      */\n     protected void closeAllOpenEMs(EntityManagerFactory emf) {\n         if (emf == null || !emf.isOpen())\n@@ -196,15 +202,17 @@ protected void clear(EntityManagerFactory emf, Class... types) {\n     protected void clear(EntityManagerFactory emf) {\n         if (emf == null)\n             return;\n-        clear(emf, true, ((OpenJPAEntityManagerFactorySPI) emf).getConfiguration().\n-            getMetaDataRepositoryInstance().getMetaDatas());\n+        clear(emf, true, ((OpenJPAEntityManagerFactorySPI) emf)\n+        \t\t.getConfiguration()\n+        \t\t.getMetaDataRepositoryInstance().getMetaDatas());\n     }\n \n     /**\n      * Delete all instances of the given types using bulk delete queries.\n      * @param closeEMs TODO\n      */\n-    private void clear(EntityManagerFactory emf, boolean closeEMs, ClassMetaData... types) {\n+    private void clear(EntityManagerFactory emf, boolean closeEMs, \n+    \t\tClassMetaData... types) {\n         if (emf == null || types.length == 0)\n             return;\n         "},{"sha":"2814024eb249a6d86178a9e5c89dbb38718b6991","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2a588d6a2bcf8982dcc98aa0a8388740bfea8352/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/2a588d6a2bcf8982dcc98aa0a8388740bfea8352/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=2a588d6a2bcf8982dcc98aa0a8388740bfea8352","patch":"@@ -21,6 +21,17 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n \n+/**\n+ * Base class for OpenJPA-specific Test Case.\n+ * Provides utilities for configuration setup and persistent entity \n+ * registration during setUp() method.\n+ * Derived classes can access protected EntityManagerFactory to create \n+ * EntityManager. The protected EntityManagerFactory is declared to be\n+ * OpenJPA-extended SPI interface <code>OpenJPAEntityManagerFactorySPI</code>\n+ * so that derived classes can access internal mapping/metadata/configuration\n+ * and other structures.  \n+ *   \n+ */\n public abstract class SingleEMFTestCase\n     extends PersistenceTestCase {\n \n@@ -71,8 +82,7 @@ public void tearDown() throws Exception {\n     /**\n      * Get the class mapping for a given entity\n      * \n-     * @param name\n-     *            The Entity's name.\n+     * @param name The Entity's name.\n      * \n      * @return If the entity is a known type the ClassMapping for the Entity\n      *         will be returned. Otherwise null"}]}

