{"sha":"2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhNjg4N2Q0YzBhODM5ZTlhZWIxZDFkZDQ1YThkOGNhMTU1ZmE5ODM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:12:18Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-20T18:12:18Z"},"message":"OPENJPA-357 OPENJPA-358\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577846 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09b89f6f1d345379c24fda33f2196ef53de6e02d","url":"https://api.github.com/repos/apache/openjpa/git/trees/09b89f6f1d345379c24fda33f2196ef53de6e02d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","html_url":"https://github.com/apache/openjpa/commit/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"bd40a0cea5bf96f036f9af9d93756c04df7530e4","url":"https://api.github.com/repos/apache/openjpa/commits/bd40a0cea5bf96f036f9af9d93756c04df7530e4","html_url":"https://github.com/apache/openjpa/commit/bd40a0cea5bf96f036f9af9d93756c04df7530e4"}],"stats":{"total":84,"additions":81,"deletions":3},"files":[{"sha":"0975f875fc421a89060c0069d27e40ba051c7a11","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","patch":"@@ -604,6 +604,8 @@ private int getAvailableRecursionDepth(FieldMetaData fm, Class type,\n         int cur;\n         for (int i = 0; max != FetchGroup.DEPTH_INFINITE \n             && i < groups.length; i++) {\n+            // ignore custom groups that are inactive in this configuration\n+            if (!this.hasFetchGroup(groups[i])) continue;\n             cur = meta.getFetchGroup(groups[i]).getRecursionDepth(fm);\n             if (cur == FetchGroup.DEPTH_INFINITE || cur > max) \n                 max = cur;\n@@ -625,7 +627,7 @@ private int getAvailableRecursionDepth(FieldMetaData fm, Class type,\n             return avail;\n         return Math.min(max, avail);\n     }\n- \n+\n     /**\n      * Return the relation type of the given field.\n      */"},{"sha":"cd7c86da6125ecb036bf603f589ee6ad53e05d92","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","status":"modified","additions":39,"deletions":1,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java?ref=2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","patch":"@@ -20,10 +20,13 @@\n \r\n import java.io.Serializable;\r\n import java.util.ArrayList;\r\n+import java.util.Collections;\r\n import java.util.HashMap;\r\n+import java.util.HashSet;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n import org.apache.commons.lang.ObjectUtils;\r\n@@ -74,6 +77,7 @@\n     private final ClassMetaData _meta;\r\n     private final boolean _readOnly;\r\n     private List _includes;\r\n+    private Set  _containedBy;\r\n     private Map _depths;\r\n     private Boolean _postLoad;\r\n \r\n@@ -105,6 +109,9 @@ void copy(FetchGroup fg) {\n         if (fg._includes != null)\r\n             for (Iterator itr = fg._includes.iterator(); itr.hasNext();)\r\n                 addDeclaredInclude((String) itr.next());\r\n+        if (fg._containedBy != null) \r\n+        \tthis._containedBy = new HashSet(fg._containedBy);\r\n+        \r\n         if (fg._depths != null) {\r\n             Map.Entry entry;\r\n             for (Iterator itr = fg._depths.entrySet().iterator(); \r\n@@ -152,7 +159,7 @@ public boolean includes(String fgName, boolean recurse) {\n         if (_includes != null) {\r\n             if (_includes.contains(fgName))\r\n                 return true;\r\n-            if (recurse) {\r\n+            if (recurse && _meta!=null) {\r\n                 FetchGroup fg;\r\n                 for (Iterator i = _includes.iterator(); i.hasNext();) {\r\n                     fg = _meta.getFetchGroup((String) i.next());\r\n@@ -172,6 +179,37 @@ public boolean includes(String fgName, boolean recurse) {\n         }\r\n         return false;\r\n     }\r\n+    \r\n+    /**\r\n+     * Adds this receiver as one of the included fetch groups of the given\r\n+     * parent. \r\n+     * The parent fecth group will include this receiver as a side-effect of\r\n+     * this call.\r\n+     * \r\n+     * @see #includes(String, boolean)\r\n+     * @see #addDeclaredInclude(String) \r\n+     * \r\n+     * @return true if given parent is a new addition. false othrwise.\r\n+     * @since 1.1.1   \r\n+     */\r\n+    public boolean addContainedBy(FetchGroup parent) {\r\n+    \tparent.addDeclaredInclude(this.getName());\r\n+    \tif (_containedBy==null)\r\n+    \t\t_containedBy = new HashSet();\r\n+    \treturn _containedBy.add(parent.getName());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Gets the name of the fetch groups in which this receiver has been\r\n+     * included.\r\n+     * \r\n+     * @see #addContainedBy(FetchGroup)\r\n+     * @since 1.1.1   \r\n+     */\r\n+    public Set getContainedBy() {\r\n+    \treturn (_containedBy == null) ? Collections.EMPTY_SET :\r\n+            Collections.unmodifiableSet(_containedBy);\r\n+    }\r\n \r\n     /**\r\n      * Return the fetch group names declared included by this group.\r"},{"sha":"e4e8b9bbe3f533ffcfc904a4da674a84d7ccc511","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","patch":"@@ -109,6 +109,8 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UnsupportedException;\n+import org.apache.openjpa.util.UserException;\n+\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -875,6 +877,14 @@ private void recordCallbacks(ClassMetaData cls,\n \n     /**\n      * Create fetch groups.\n+     * If FetchGroup A includes FetchGroup B, then a bi-link is set between\n+     * A and B. Both A and B must be declared in the same Class. \n+     * <br>\n+     * Call {@link #parseFetchAttribute(ClassMetaData, \n+     * org.apache.openjpa.meta.FetchGroup, FetchAttribute) only after the\n+     * bi-links have been established, because a field f will not only add the\n+     * fetch group A which explictly includes f to its custom fetch groups but \n+     * also will also add any fetch group B that includes A.  \n      */\n     private void parseFetchGroups(ClassMetaData meta, FetchGroup... groups) {\n         org.apache.openjpa.meta.FetchGroup fg;\n@@ -885,12 +895,33 @@ private void parseFetchGroups(ClassMetaData meta, FetchGroup... groups) {\n             fg = meta.addDeclaredFetchGroup(group.name());\n             if (group.postLoad())\n                 fg.setPostLoad(true); \n-            for (String s : group.fetchGroups())\n+            for (String s : group.fetchGroups()) {\n                 fg.addDeclaredInclude(s);\n+            }\n+        }\n+        // Add the parent-child style bi-links between fetch groups in a \n+        // separate pass. \n+        for (FetchGroup group:groups) {\n+        \tfg = meta.getFetchGroup(group.name());\n+        \tString[] includedFetchGropNames = fg.getDeclaredIncludes();\n+        \tfor (String includedFectchGroupName:includedFetchGropNames) {\n+        \t\torg.apache.openjpa.meta.FetchGroup child =\n+        \t    meta.getFetchGroup(includedFectchGroupName);\n+        \t\tif (child == null) \n+        \t\t\tthrow new UserException(_loc.get(\"missing-included-fg\", \n+        \t\t\t\tmeta.getDescribedType().getName(), fg.getName(),\n+        \t\t\t\tincludedFectchGroupName));\n+        \t\tchild.addContainedBy(fg);\n+        \t}\n+        }\n+        \n+        for (FetchGroup group : groups) {\n+            fg = meta.getFetchGroup(group.name());\n             for (FetchAttribute attr : group.attributes())\n                 parseFetchAttribute(meta, fg, attr);\n         }\n     }\n+    \n \n     /**\n      * Set a field's fetch group.\n@@ -904,6 +935,9 @@ private void parseFetchAttribute(ClassMetaData meta,\n                 meta, attr.name()));\n \n         field.setInFetchGroup(fg.getName(), true);\n+        Set parentFetchGroups = fg.getContainedBy();\n+        for (Object parentFetchGroup:parentFetchGroups)\n+        \tfield.setInFetchGroup(parentFetchGroup.toString(), true);\n         if (attr.recursionDepth() != Integer.MIN_VALUE)\n             fg.setRecursionDepth(field, attr.recursionDepth());\n     }"},{"sha":"b19b4774b99b39d5c0d2c3637223f2880641d092","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=2a6887d4c0a839e9aeb1d1dd45a8d8ca155fa983","patch":"@@ -59,6 +59,9 @@ unnamed-fg: \"{0}\" declares an unnamed fetch group.  All fetch groups \\\n bad-fg-field: Fetch group \"{0}\" in type \"{1}\" includes field \"{2}\", but \\\n \tthis field is not declared in \"{1}\", or is not persistent.  Currently, \\\n \tOpenJPA only supports declared fields in fetch groups.\n+missing-included-fg:\"{0}\" declares a fecth group \"{1}\" includes \"{2}\". But \\\n+\tthe included fetch group \"{2}\" can not be found in \"{0}\". Currently, all \\\n+\tincluded fetch groups must be declared within the same entity scope.\n not-update-delete-query: Cannot perform an update or delete operation \\\n \ton select query: \"{0}\".\n not-select-query: Cannot perform a select on update or delete query: \"{0}\".\n@@ -141,3 +144,4 @@ EntityManagerFactory-cat: Persistence.Advanced\n EntityManagerFactory-displayorder: 50\n EntityManagerFactory-expert: true\n EntityManagerFactory-interface: org.apache.openjpa.persistence.EntityManagerFactoryImpl\n+"}]}

