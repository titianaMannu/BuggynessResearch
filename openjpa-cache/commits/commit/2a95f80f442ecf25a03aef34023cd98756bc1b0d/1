{"sha":"2a95f80f442ecf25a03aef34023cd98756bc1b0d","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhOTVmODBmNDQyZWNmMjVhMDNhZWYzNDAyM2NkOTg3NTZiYzFiMGQ=","commit":{"author":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-02-26T20:46:03Z"},"committer":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-02-26T20:46:03Z"},"message":"OPENJPA-151.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@511998 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80c050618f3cdd7d57bd6193831a6339142225d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/80c050618f3cdd7d57bd6193831a6339142225d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2a95f80f442ecf25a03aef34023cd98756bc1b0d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2a95f80f442ecf25a03aef34023cd98756bc1b0d","html_url":"https://github.com/apache/openjpa/commit/2a95f80f442ecf25a03aef34023cd98756bc1b0d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2a95f80f442ecf25a03aef34023cd98756bc1b0d/comments","author":null,"committer":null,"parents":[{"sha":"e20afb3134610518c408ce1870446de4c19689d3","url":"https://api.github.com/repos/apache/openjpa/commits/e20afb3134610518c408ce1870446de4c19689d3","html_url":"https://github.com/apache/openjpa/commit/e20afb3134610518c408ce1870446de4c19689d3"}],"stats":{"total":140,"additions":30,"deletions":110},"files":[{"sha":"aa6ed25ed74311b0b339dccb0cb57fc054bdc8b7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -945,10 +945,6 @@ public void setRemote(int field, Object value) {\n         // StateManager implementation\n         ///////////////////////////////\n \n-        public byte replaceFlags() {\n-            throw new InternalException();\n-        }\n-\n         public Object getPCPrimaryKey(Object oid, int field) {\n             throw new InternalException();\n         }"},{"sha":"babbd9882efd4d44b0b6acee281889f8aa00d4d6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":27,"deletions":81,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -95,6 +95,11 @@\n  * @author Abe White\n  */\n public class PCEnhancer {\n+    // Designates a version for maintaining compatbility when PCEnhancer\n+    // modifies enhancement that can break serialization or other contracts\n+    // Each enhanced class will return the value of this field via\n+    // public int getEnhancementContractVersion()\n+    public static final int ENHANCER_VERSION = 2;\n \n     public static final int ENHANCE_NONE = 0;\n     public static final int ENHANCE_AWARE = 2 << 0;\n@@ -716,7 +721,6 @@ private void addPCMethods()\n         if (_meta.getPCSuperclass() == null) {\n             addStockMethods();\n             addGetVersionMethod();\n-            addReplaceFlagsMethod();\n             addReplaceStateManagerMethod();\n \n             if (_meta.getIdentityType() != ClassMetaData.ID_APPLICATION)\n@@ -841,11 +845,6 @@ private void addNewInstanceMethod(boolean oid) {\n         code.aload().setParam(0);\n         code.putfield().setField(SM, SMTYPE);\n \n-        // pc.pcFlags = LOAD_REQUIRED\n-        code.aload().setLocal(inst);\n-        code.constant().setValue(PersistenceCapable.LOAD_REQUIRED);\n-        code.putfield().setField(PRE + \"Flags\", byte.class);\n-\n         // copy key fields from oid\n         if (oid) {\n             code.aload().setLocal(inst);\n@@ -1329,35 +1328,6 @@ private Class toPrimitiveWrapper(FieldMetaData fmd) {\n         return fmd.getDeclaredType();\n     }\n \n-    /**\n-     * Adds the {@link PersistenceCapable#pcReplaceFlags}\n-     * method to the bytecode.\n-     */\n-    private void addReplaceFlagsMethod() {\n-        // public final void pcReplaceFlags ()\n-        BCMethod method = _pc.declareMethod(PRE + \"ReplaceFlags\",\n-            void.class, null);\n-        Code code = method.getCode(true);\n-\n-        // if (pcStateManager != null)\n-        loadManagedInstance(code, false);\n-        code.getfield().setField(SM, SMTYPE);\n-        JumpInstruction ifins = code.ifnonnull();\n-        code.vreturn();\n-\n-        // pcFlags = pcStateManager.replaceFlags ();\n-        ifins.setTarget(loadManagedInstance(code, false));\n-        loadManagedInstance(code, false);\n-        code.getfield().setField(SM, SMTYPE);\n-        code.invokeinterface().setMethod(SMTYPE, \"replaceFlags\",\n-            byte.class, null);\n-        code.putfield().setField(PRE + \"Flags\", byte.class);\n-        code.vreturn();\n-\n-        code.calculateMaxStack();\n-        code.calculateMaxLocals();\n-    }\n-\n     /**\n      * Adds the {@link PersistenceCapable#pcReplaceStateManager}\n      * method to the bytecode.\n@@ -2157,6 +2127,9 @@ private void enhanceClass() {\n         // make the class implement PersistenceCapable\n         _pc.declareInterface(PCTYPE);\n \n+        // add a version stamp\n+        addGetEnhancementContractVersionMethod();\n+\n         // find the default constructor\n         BCMethod method = _pc.getDeclaredMethod(\"<init>\", (String[]) null);\n \n@@ -2197,8 +2170,6 @@ private void enhanceClass() {\n      * <li><code>private static byte[] pcFieldFlags</code></li>\n      * <li><code>protected transient StateManager pcStateManager</code>\n      * if no PersistenceCapable superclass present)</li>\n-     * <li><code>protected transient byte pcFlags</code>\n-     * if no PersistenceCapable superclass present)</li>\n      * </ul>\n      */\n     private void addFields() {\n@@ -2212,10 +2183,6 @@ private void addFields() {\n             BCField field = _pc.declareField(SM, SMTYPE);\n             field.makeProtected();\n             field.setTransient(true);\n-\n-            field = _pc.declareField(PRE + \"Flags\", byte.class);\n-            field.makeProtected();\n-            field.setTransient(true);\n         }\n     }\n \n@@ -2724,10 +2691,10 @@ private Code getOrCreateClassInitCode(boolean replaceLast) {\n \n     /**\n      * Adds bytecode modifying the cloning behavior of the class being\n-     * enhanced to correctly replace the <code>pcFlags</code> and\n-     * <code>pcStateManager</code> instance fields of any clone created with\n-     * their default values. Also, if this class is the base PC type\n-     * and does not declared a clone method, one will be added.\n+     * enhanced to correctly replace the <code>pcStateManager</code> \n+     * instance fields of any clone created with their default values. \n+     * Also, if this class is the base PC type and does not declared \n+     * a clone method, one will be added.\n      */\n     private void addCloningCode() {\n         if (_meta.getPCSuperclass() != null)\n@@ -2781,12 +2748,6 @@ private void addCloningCode() {\n             code.constant().setNull();\n             code.putfield().setField(SM, SMTYPE);\n \n-            // ((<type>) clone).pcFlags = 0;\n-            code.dup();\n-            code.checkcast().setType(_pc);\n-            code.constant().setValue(PersistenceCapable.READ_WRITE_OK);\n-            code.putfield().setField(PRE + \"Flags\", byte.class);\n-\n             // if modified, increase stack\n             code.calculateMaxStack();\n             code.calculateMaxLocals();\n@@ -2860,23 +2821,10 @@ private void addGetMethod(int index, FieldMetaData fmd)\n             return;\n         }\n \n-        // dfg: if (inst.pcFlags <= 0) return inst.<field>;\n-        JumpInstruction ifins = null;\n-        if ((fieldFlag & PersistenceCapable.CHECK_READ) > 0) {\n-            loadManagedInstance(code, true);\n-            code.getfield().setField(PRE + \"Flags\", byte.class);\n-            ifins = code.ifgt();\n-            loadManagedInstance(code, true);\n-            addGetManagedValueCode(code, fmd);\n-            code.xreturn().setType(fmd.getDeclaredType());\n-        }\n-\n         // if (inst.pcStateManager == null) return inst.<field>;\n         Instruction ins = loadManagedInstance(code, true);\n-        if (ifins != null)\n-            ifins.setTarget(ins);\n         code.getfield().setField(SM, SMTYPE);\n-        ifins = code.ifnonnull();\n+        JumpInstruction ifins = code.ifnonnull();\n         loadManagedInstance(code, true);\n         addGetManagedValueCode(code, fmd);\n         code.xreturn().setType(fmd.getDeclaredType());\n@@ -2919,25 +2867,10 @@ private void addSetMethod(int index, FieldMetaData fmd)\n         // PCEnhancer uses static methods; PCSubclasser does not.\n         int firstParamOffset = getAccessorParameterOffset();\n \n-        // dfg: if (inst.pcFlags == 0) inst.<field> = value;\n-        JumpInstruction ifins = null;\n-        byte fieldFlag = getFieldFlag(fmd);\n-        if ((fieldFlag & PersistenceCapable.CHECK_WRITE) > 0) {\n-            loadManagedInstance(code, true);\n-            code.getfield().setField(PRE + \"Flags\", byte.class);\n-            ifins = code.ifne();\n-            loadManagedInstance(code, true);\n-            code.xload().setParam(firstParamOffset);\n-            addSetManagedValueCode(code, fmd);\n-            code.vreturn();\n-        }\n-\n         // if (inst.pcStateManager == null) inst.<field> = value;\n         Instruction ins = loadManagedInstance(code, true);\n-        if (ifins != null)\n-            ifins.setTarget(ins);\n         code.getfield().setField(SM, SMTYPE);\n-        ifins = code.ifnonnull();\n+        JumpInstruction ifins = code.ifnonnull();\n         loadManagedInstance(code, true);\n         code.xload().setParam(firstParamOffset);\n         addSetManagedValueCode(code, fmd);\n@@ -3507,6 +3440,19 @@ private BCMethod createSetMethod(FieldMetaData fmd) {\n         return setter;\n     }\n \n+    private void addGetEnhancementContractVersionMethod() {\n+        // public int getEnhancementContractVersion()\n+        BCMethod method = _pc.declareMethod(PRE + \n+                \"GetEnhancementContractVersion\", int.class, null);\n+        method.makePublic();\n+        Code code = method.getCode(true);\n+        code.constant().setValue(ENHANCER_VERSION);\n+        code.ireturn();\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+        return;\n+    }\n+\n     /**\n      * Return the concrete type for the given class, i.e. impl for managed\n      * interfaces"},{"sha":"45db3f11be9148d91da54ed7790101c81a9164e5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PersistenceCapable.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PersistenceCapable.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PersistenceCapable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PersistenceCapable.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -34,6 +34,8 @@\n \n     public static final Object DESERIALIZED = new Object();\n \n+    int pcGetEnhancementContractVersion();\n+\n     Object pcGetGenericContext();\n \n     StateManager pcGetStateManager();\n@@ -48,8 +50,6 @@\n \n     void pcReplaceFields(int[] fieldIndex);\n \n-    void pcReplaceFlags();\n-\n     void pcCopyFields(Object fromObject, int[] fields);\n \n     void pcDirty(String fieldName);"},{"sha":"e4f38937ed5c2ac5cc3eb2f9ab39de3c20f60759","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -40,11 +40,6 @@\n      */\n     public Object getPCPrimaryKey(Object oid, int field);\n \n-    /**\n-     * Change internal flags.\n-     */\n-    public byte replaceFlags();\n-\n     /**\n      * Change state manager.\n      */"},{"sha":"528e8bf2bc674d4ea176b15624a550cb9c2eab67","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -334,10 +334,6 @@ public Object getGenericContext() {\n         return null;\n     }\n \n-    public byte replaceFlags() {\n-        return PersistenceCapable.MEDIATE_WRITE;\n-    }\n-\n     public Object getPCPrimaryKey(Object oid, int field) {\n         throw new UnsupportedOperationException();\n     }\n@@ -939,5 +935,5 @@ public void lock() {\n     public void unlock() {\n         if (_lock != null)\n             _lock.unlock();\n-\t}\n+    }\n }"},{"sha":"7d76cdd02d678cbd0159678f62d8c9021f6766c3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -403,10 +403,6 @@ public Object getPCPrimaryKey(Object oid, int field) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public byte replaceFlags() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n     public StateManager replaceStateManager(StateManager sm) {\n         return sm;\n     }"},{"sha":"6f37ae5c11a48c019fd4733f202c35c9e6df8c46","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -71,10 +71,6 @@ public Object getPCPrimaryKey(Object oid, int field) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public byte replaceFlags() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n     public StateManager replaceStateManager(StateManager sm) {\n         throw new UnsupportedOperationException();\n     }"},{"sha":"de5192182cb0c856db9f3b66ce37e4d1f7fa5573","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -287,7 +287,6 @@ protected void initialize(PersistenceCapable pc, PCState state) {\n         }\n \n         pc.pcSetDetachedState(null);\n-        pc.pcReplaceFlags();\n         _pc = pc;\n \n         if (_oid instanceof OpenJPAId)"},{"sha":"5d77ebf2b9d3348196091000cf068e6e71f3922f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/2a95f80f442ecf25a03aef34023cd98756bc1b0d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java?ref=2a95f80f442ecf25a03aef34023cd98756bc1b0d","patch":"@@ -85,10 +85,6 @@ public Object getPCPrimaryKey(Object oid, int field) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public byte replaceFlags() {\n-        throw new InternalException();\n-    }\n-\n     public StateManager replaceStateManager(StateManager sm) {\n         throw new InternalException();\n     }"}]}

