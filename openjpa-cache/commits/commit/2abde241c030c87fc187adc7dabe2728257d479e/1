{"sha":"2abde241c030c87fc187adc7dabe2728257d479e","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhYmRlMjQxYzAzMGM4N2ZjMTg3YWRjN2RhYmUyNzI4MjU3ZDQ3OWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T22:15:18Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-01T22:15:18Z"},"message":"OPENJPA-855 Final JPQL Index M2M test updates\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@917754 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4437981500f97d952b541fb695b9aa24efa3e110","url":"https://api.github.com/repos/apache/openjpa/git/trees/4437981500f97d952b541fb695b9aa24efa3e110"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2abde241c030c87fc187adc7dabe2728257d479e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2abde241c030c87fc187adc7dabe2728257d479e","html_url":"https://github.com/apache/openjpa/commit/2abde241c030c87fc187adc7dabe2728257d479e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2abde241c030c87fc187adc7dabe2728257d479e/comments","author":null,"committer":null,"parents":[{"sha":"208f5388ce42e99b77e0cec560ac141680a56ee3","url":"https://api.github.com/repos/apache/openjpa/commits/208f5388ce42e99b77e0cec560ac141680a56ee3","html_url":"https://github.com/apache/openjpa/commit/208f5388ce42e99b77e0cec560ac141680a56ee3"}],"stats":{"total":146,"additions":117,"deletions":29},"files":[{"sha":"143405192495b89234b76d6945df4a4e2aa573fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","status":"modified","additions":117,"deletions":29,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/2abde241c030c87fc187adc7dabe2728257d479e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","raw_url":"https://github.com/apache/openjpa/raw/2abde241c030c87fc187adc7dabe2728257d479e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java?ref=2abde241c030c87fc187adc7dabe2728257d479e","patch":"@@ -231,7 +231,6 @@ private void createO2MEntities(JPQLIndexEntityClasses entityType, Class<INameEnt\n             }\n             \n             // add the entities\n-            log.trace(\"Adding \" + newElements.size() + \" of \" + elementClassName + \" to \" + entityClassName);\n             em = emf.createEntityManager();\n             em.getTransaction().begin();\n             for (INameEntity newElement : newElements)\n@@ -244,7 +243,6 @@ private void createO2MEntities(JPQLIndexEntityClasses entityType, Class<INameEnt\n             em.clear();\n \n             // verify the entity was stored\n-            log.trace(\"Verifing the entity was stored\");\n             IOrderedEntity findEntity = em.find(entityClass, entityId);\n             assertNotNull(\"Found entity just created\", findEntity);\n             assertEquals(\"Verify entity id = \" + entityId, entityId.intValue(), findEntity.getId());\n@@ -275,43 +273,48 @@ private void createM2MEntities(JPQLIndexEntityClasses entityType, Class<IColumnE\n             String entityClassName = entityType.getEntityName();\n             String elementClassName = elementClass.getName().substring(\n                 elementClass.getName().lastIndexOf('.') + 1);\n-            Integer entityId = 1;\n             \n-            // create the entity\n-            IOrderedEntity newEntity = (IOrderedEntity)constructNewEntityObject(entityType);\n-            newEntity.setId(entityId);\n-            // persist the entity\n+            // create the EM and transaction\n             em = emf.createEntityManager();\n             em.getTransaction().begin();\n-            em.persist(newEntity);\n+\n+            // create and persist the entities\n+            List<IOrderedEntity> newEntities = new ArrayList<IOrderedEntity>();\n+            for (int i=0; i<3; i++) {\n+                IOrderedEntity newEntity = (IOrderedEntity)constructNewEntityObject(entityType);\n+                newEntity.setId(i);\n+                em.persist(newEntity);\n+                newEntities.add(newEntity);\n+            }\n             \n             // create and persist the elements\n             Constructor<IColumnEntity> elementConstrctor = elementClass.getConstructor(String.class);\n             List<INameEntity> newElements = new ArrayList<INameEntity>();\n             IColumnEntity newElement;\n             for (int i=0; i<Element_Names.length; i++) {\n                 newElement = elementConstrctor.newInstance(Element_Names[i]);\n-                // add parent relationship\n-                newElement.addEntity(newEntity);\n+                // add parent relationships\n+                newElement.setEntities(newEntities);\n                 em.persist(newElement);\n                 newElements.add(newElement);\n             }\n             \n-            // update entity with elements\n-            log.trace(\"Adding \" + newElements.size() + \" of \" + elementClassName + \" to \" + entityClassName);\n-            newEntity.setEntities(newElements);\n-            em.persist(newEntity);\n+            // update entities with elements\n+            for (IOrderedEntity newEntity : newEntities) {\n+                newEntity.setEntities(newElements);\n+                em.persist(newEntity);\n+            }\n             em.getTransaction().commit();\n             em.clear();\n \n-            // verify the entity was stored\n-            log.trace(\"Verifing the entity was stored\");\n-            IOrderedEntity findEntity = em.find(entityClass, entityId);\n-            assertNotNull(\"Found entity just created\", findEntity);\n-            assertEquals(\"Verify entity id = \" + entityId, entityId.intValue(), findEntity.getId());\n-            assertEquals(\"Verify entity name = \" + entityClass.getName(), entityClass.getName(),\n-                findEntity.getClass().getName());\n-\n+            // verify the entities were stored\n+            for (int i=0; i<Element_Names.length; i++) {\n+                IOrderedEntity findEntity = em.find(entityClass, i);\n+                assertNotNull(\"Found entity just created\", findEntity);\n+                assertEquals(\"Verify entity id = \" + i, i, findEntity.getId());\n+                assertEquals(\"Verify entity name = \" + entityClass.getName(), entityClass.getName(),\n+                    findEntity.getClass().getName());\n+            }\n         } catch (Throwable t) {\n             log.error(t);\n             throw new RuntimeException(t);\n@@ -377,10 +380,10 @@ private void createOrderedElements(JPQLIndexEntityClasses entityType)\n         if (IOrderedEntity.class.isAssignableFrom(entityType.getEntityClass())) {\n             if (INameEntity.class.isAssignableFrom(elementClass)) {\n                 log.trace(\"** Verify INameEntity modifications on IOrderedEntity.\");\n-                verifyOrderedEntities(entityType, (Class<INameEntity>)elementClass);\n+                verifyO2MEntities(entityType, (Class<INameEntity>)elementClass);\n             } else if (IColumnEntity.class.isAssignableFrom(elementClass)) {\n                 log.trace(\"** Verify IColumnEntity modifications on IOrderedEntity.\");\n-                verifyOrderedEntities(entityType, (Class<INameEntity>)elementClass);\n+                verifyM2MEntities(entityType, (Class<IColumnEntity>)elementClass);\n             } else {\n                 fail(\"verifyEntities(IOrderedEntity) - Unexpected elementClass=\" + elementClass.getSimpleName());\n             }\n@@ -396,8 +399,10 @@ private void createOrderedElements(JPQLIndexEntityClasses entityType)\n         }\n     }\n     \n-    private <E> void verifyOrderedEntities(JPQLIndexEntityClasses entityType, Class<INameEntity> elementClass)\n+    private <E> void verifyO2MEntities(JPQLIndexEntityClasses entityType, Class<INameEntity> elementClass)\n     {\n+        EntityManager em = null;\n+        \n         try {\n             Class<IOrderedEntity> entityClass = (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n             String entityClassName = entityType.getEntityName();\n@@ -409,7 +414,7 @@ private void createOrderedElements(JPQLIndexEntityClasses entityType)\n                     + Arrays.toString(Element_Names));\n             }\n             \n-            EntityManager em = emf.createEntityManager();\n+            em = emf.createEntityManager();\n             em.clear();\n             int idx = 0;\n             for (String expectedEntityName : Element_Names) {\n@@ -421,9 +426,8 @@ private void createOrderedElements(JPQLIndexEntityClasses entityType)\n                     Object oo = res.get(0);\n                     assertEquals(\"  Verify element type is \" + elementClass.getName(), elementClass.getName(),\n                         oo.getClass().getName());\n-                    String name;\n                     try {\n-                        name = (String) elementClass.getMethod(\"getName\").invoke(oo);\n+                        String name = (String) elementClass.getMethod(\"getName\").invoke(oo);\n                         assertEquals(\"  Verify element value is '\"\n                             + expectedEntityName + \"'\", expectedEntityName, name);\n                     } catch (Exception e) {\n@@ -436,11 +440,90 @@ private void createOrderedElements(JPQLIndexEntityClasses entityType)\n         } catch (Exception e) {\n             log.error(e);\n             throw new RuntimeException(e);\n+        } finally {\n+            if (em != null) {\n+                em.close();\n+                em = null;\n+            }\n+        }\n+    }\n+    \n+    private <E> void verifyM2MEntities(JPQLIndexEntityClasses entityType, Class<IColumnEntity> elementClass)\n+    {\n+        EntityManager em = null;\n+        \n+        try {\n+            Class<IOrderedEntity> entityClass = (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n+            String entityClassName = entityType.getEntityName();\n+            entityClassName = entityClassName.substring(entityClassName.lastIndexOf('.') + 1);\n+            String elementClassName = entityType.getEntityName();\n+            elementClassName = elementClassName.substring(elementClassName.lastIndexOf('.') + 1);\n+\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"Query \" + entityClassName + \" and verify 'entities' collection has \"\n+                    + Element_Names.length + \" elements in this order: \"\n+                    + Arrays.toString(Element_Names));\n+            }\n+            \n+            em = emf.createEntityManager();\n+            em.clear();\n+            int idx = 0, idx2 = 0;\n+            for (String expectedEntityName : Element_Names) {\n+                Query q = em.createQuery(\"select w from \" + entityClassName\n+                    + \" o join o.entities w where index(w) = \" + idx);\n+                List<E> res = (List<E>)q.getResultList();\n+                assertEquals(\"  Verify query returns 1 element for index \" + idx, 1, res.size());\n+                if (res.size() == 1) {\n+                    Object oo = res.get(0);\n+                    assertEquals(\"  Verify element type is \" + elementClass.getName(), elementClass.getName(),\n+                        oo.getClass().getName());\n+                    try {\n+                        String name = (String) elementClass.getMethod(\"getName\").invoke(oo);\n+                        assertEquals(\"  Verify element value is '\"\n+                            + expectedEntityName + \"'\", expectedEntityName, name);\n+                        \n+                        if (log.isTraceEnabled()) {\n+                            log.trace(\"Query \" + elementClassName + \" and verify 'entities' collection content\");\n+                        }\n+                        Query q2 = em.createQuery(\"select w from \" + elementClassName\n+                            + \" o join o.entities w where index(w) = \" + idx2);\n+                        List<E> res2 = (List<E>)q.getResultList();\n+                        assertEquals(\"  Verify query returns 1 entity for index \" + idx2, 1, res2.size());\n+                        if (res2.size() == 1) {\n+                            Object oo2 = res2.get(0);\n+                            assertEquals(\"  Verify entity type is \" + entityClass.getName(), entityClass.getName(),\n+                                oo2.getClass().getName());\n+                            try {\n+                                String name2 = (String) entityClass.getMethod(\"getName\").invoke(oo2);\n+                                assertEquals(\"  Verify entity value is '\"\n+                                    + expectedEntityName + \"'\", expectedEntityName, name);\n+                            } catch (Exception e) {\n+                                log.error(\"  Caught unexpected exception:\" + e.getMessage());\n+                                throw new RuntimeException(e);\n+                            }\n+                        }\n+                    } catch (Exception e) {\n+                        log.error(\"  Caught unexpected exception:\" + e.getMessage());\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                ++idx;\n+            }\n+        } catch (Exception e) {\n+            log.error(e);\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (em != null) {\n+                em.close();\n+                em = null;\n+            }\n         }\n     }\n     \n     private <E> void verifyOrderedElements(JPQLIndexEntityClasses entityType)\n     {\n+        EntityManager em = null;\n+        \n         try {\n             Class<IOrderedEntity> entityClass = (Class<IOrderedEntity>)Class.forName(entityType.getEntityClassName());\n             String entityClassName = entityType.getEntityName();\n@@ -452,7 +535,7 @@ private void createOrderedElements(JPQLIndexEntityClasses entityType)\n                     + Arrays.toString(Element_Names));\n             }\n             \n-            EntityManager em = emf.createEntityManager();\n+            em = emf.createEntityManager();\n             em.clear();\n             int idx = 0;\n             for (String expectedEntityName : Element_Names) {\n@@ -479,6 +562,11 @@ private void createOrderedElements(JPQLIndexEntityClasses entityType)\n         } catch (Exception e) {\n             log.error(e);\n             throw new RuntimeException(e);\n+        } finally {\n+            if (em != null) {\n+                em.close();\n+                em = null;\n+            }\n         }\n     }\n     "}]}

