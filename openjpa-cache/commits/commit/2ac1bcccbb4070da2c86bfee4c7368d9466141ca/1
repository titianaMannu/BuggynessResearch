{"sha":"2ac1bcccbb4070da2c86bfee4c7368d9466141ca","node_id":"MDY6Q29tbWl0MjA2MzY0OjJhYzFiY2NjYmI0MDcwZGEyYzg2YmZlZTRjNzM2OGQ5NDY2MTQxY2E=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-01-31T22:27:29Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-01-31T22:27:29Z"},"message":"OPENJPA-118: Implemented patch provided by David Ezzio for broken openjpa.AutoDetach behavior\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@502022 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a6ba26ed0182d27ea1c342bbe1ab086c24ea3da5","url":"https://api.github.com/repos/apache/openjpa/git/trees/a6ba26ed0182d27ea1c342bbe1ab086c24ea3da5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ac1bcccbb4070da2c86bfee4c7368d9466141ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ac1bcccbb4070da2c86bfee4c7368d9466141ca","html_url":"https://github.com/apache/openjpa/commit/2ac1bcccbb4070da2c86bfee4c7368d9466141ca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/comments","author":null,"committer":null,"parents":[{"sha":"aeafc39d3d198e90624fa2895918911204caefd6","url":"https://api.github.com/repos/apache/openjpa/commits/aeafc39d3d198e90624fa2895918911204caefd6","html_url":"https://github.com/apache/openjpa/commit/aeafc39d3d198e90624fa2895918911204caefd6"}],"stats":{"total":260,"additions":253,"deletions":7},"files":[{"sha":"20c0c87d29827c745e248d27c42815c35c9262f1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","raw_url":"https://github.com/apache/openjpa/raw/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java?ref=2ac1bcccbb4070da2c86bfee4c7368d9466141ca","patch":"@@ -15,6 +15,9 @@\n  */\n package org.apache.openjpa.conf;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.openjpa.kernel.AutoDetach;\n import org.apache.openjpa.lib.conf.StringListValue;\n \n@@ -36,13 +39,13 @@\n     private static String[] ALIASES = new String[]{\n         DETACH_CLOSE, String.valueOf(AutoDetach.DETACH_CLOSE),\n         DETACH_COMMIT, String.valueOf(AutoDetach.DETACH_COMMIT),\n-        DETACH_ROLLBACK, String.valueOf(AutoDetach.DETACH_ROLLBACK),\n         DETACH_NONTXREAD, String.valueOf(AutoDetach.DETACH_NONTXREAD),\n+        DETACH_ROLLBACK, String.valueOf(AutoDetach.DETACH_ROLLBACK),\n         // for compatibility with JDO DetachAllOnCommit\n         \"true\", String.valueOf(AutoDetach.DETACH_COMMIT),\n         \"false\", \"0\",\n     };\n-\n+    \n     private int _flags;\n     private boolean _flagsSet;\n \n@@ -70,4 +73,13 @@ public int getConstant() {\n             \n         return _flags;\n     }\n+\n+    protected List getAliasList() {\n+        // We do not document the numeric values and they are not\n+        // helpful to someone trying to understand the error message\n+        ArrayList list = new ArrayList();\n+        for (int x = 0; x < ALIASES.length; x += 2)\n+            list.add(ALIASES[x]);\n+        return list;\n+    }\n }"},{"sha":"6e3e7ed86c4d35a50f113892a319d7cbcf5d3e4e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","status":"modified","additions":72,"deletions":1,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","raw_url":"https://github.com/apache/openjpa/raw/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java?ref=2ac1bcccbb4070da2c86bfee4c7368d9466141ca","patch":"@@ -15,6 +15,13 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.ParseException;\n+\n import serp.util.Strings;\n \n /**\n@@ -25,6 +32,8 @@\n public class StringListValue extends Value {\n \n     public static final String[] EMPTY = new String[0];\n+    private static final Localizer s_loc = Localizer.forPackage\n+        (StringListValue.class);\n \n     private String[] _values = EMPTY;\n \n@@ -50,21 +59,83 @@ public void set(String[] values) {\n     public Class getValueType() {\n         return String[].class;\n     }\n+    \n+    /**\n+     * Unalias the value list.  This method defers to super.unalias()\n+     * UNLESS the string passed is a list of values for a property that\n+     * has aliases.\n+     */\n+    public String unalias(String str) {\n+        \n+        // defer to super.unalias\n+        String[] aliases = getAliases();\n+        if (aliases.length <= 0 || str == null)\n+            return super.unalias(str);\n+        str = str.trim();\n+        if (str.length() <= 0)\n+            return super.unalias(str);\n+        \n+        // snag this case early as it only causes problems\n+        if (str.equals(\",\"))\n+            throw new ParseException(s_loc.get(\"invalid-list-config\",\n+                getProperty(), str, getAliasList()));\n+        \n+        // unalias the list and concatenate the list of\n+        // canonical values.  Also, catch any bad aliases.\n+        boolean found;\n+        String iString;\n+        StringBuffer retv = new StringBuffer();\n+        String[] vals = str.split(\",\", 0);\n+        \n+        for (int i = 0; i < vals.length; i++) {\n+            iString = vals[i] = vals[i].trim();\n+            \n+            found = false;\n+            if (i > 0)\n+                retv.append(',');\n+            \n+            for (int x = 0; x < aliases.length; x += 2)\n+                if (StringUtils.equals(iString, aliases[x])\n+                    || StringUtils.equals(iString, aliases[x + 1])) {\n+                    retv.append(aliases[x + 1]);\n+                    found = true;\n+                    break;\n+                }\n+            \n+            // If the alias list is not comprehensive, add any unknown\n+            // values back onto the list\n+            if (!found) {\n+                if (isAliasListComprehensive())\n+                    throw new ParseException(s_loc.get(\"invalid-list-config\",\n+                        getProperty(), str, getAliasList()));\n+                else\n+                    retv.append(iString);\n+            }\n+        }\n+        return retv.toString();\n+    }\n \n     protected String getInternalString() {\n         return Strings.join(_values, \", \");\n     }\n \n     protected void setInternalString(String val) {\n         String[] vals = Strings.split(val, \",\", 0);\n-        if (vals != null)\n+        if (vals != null) {\n             for (int i = 0; i < vals.length; i++)\n                 vals[i] = vals[i].trim();\n+        }\n+\n         set(vals);\n     }\n \n     protected void setInternalObject(Object obj) {\n         set((String[]) obj);\n     }\n+    \n+    protected List getAliasList() {\n+        return Arrays.asList(getAliases());\n+    }\n+    \n }\n "},{"sha":"3c4a9bccb4bfaffee3682f8d02f443793d2a6223","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=2ac1bcccbb4070da2c86bfee4c7368d9466141ca","patch":"@@ -35,6 +35,10 @@ invalid-config-param-hint: There was an error while setting up the \\\n invalid-enumerated-config: There was an error while setting up the \\\n \tconfiguration option \"{0}\", and it was set to \"{1}\". All \\\n \tpossible values for this setting are: {2}.\n+invalid-list-config: There was an error setting up the \\\n+\tconfiguration option \"{0}\". It was set to \"{1}\". All \\\n+\tpossible values for this setting are: {2}, or a comma separated list \\\n+\tof the same.\n invalid-property-descriptors: Errors occurred while creating property \\\n \tdescriptors for the following properties: {0}.\n invalid-property: The property named \"{0}\" was not recognized and will \\"},{"sha":"90d769e7a0cf01c8b980d9324f12b8ec737f2df5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","raw_url":"https://github.com/apache/openjpa/raw/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java?ref=2ac1bcccbb4070da2c86bfee4c7368d9466141ca","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.conf;\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+import junit.framework.*;\n+\n+import org.apache.openjpa.kernel.AutoDetach;\n+import org.apache.openjpa.persistence.*;\n+\n+public class TestAutoDetachProperty extends TestCase {\n+    private EntityManager em;\n+    private EntityManagerFactory emf;\n+\n+    protected void setUp() throws Exception {\n+        // Don't modify system props, as we are trying to get as close as\n+        // possible to testing props in persistence.xml\n+        HashMap props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.AutoDetach\", \"commit,close,nontx-read\");\n+        emf = (OpenJPAEntityManagerFactory) Persistence\n+                .createEntityManagerFactory(\"test\", props);\n+\n+        em = emf.createEntityManager();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        em.close();\n+        em = null;\n+    }\n+\n+    public void testIsAutoDetachingOnClose() {\n+        assertTrue(\"not autodetaching on close as expected\",\n+                isAutoDetachingOnClose());\n+    }\n+\n+    public void testIsAutoDetachingOnCommit() {\n+        assertTrue(\"not autodetaching on commit as expected\",\n+                isAutoDetachingOnCommit());\n+    }\n+\n+    public void testIsAutoDetachingOnNonTxRead() {\n+        assertTrue(\"not autodetaching on nontransactional read as expected\",\n+                isAutoDetachingOnNonTxRead());\n+    }\n+\n+    private boolean isAutoDetachingOnClose() {\n+        int autoDetachFlags = OpenJPAPersistence.cast(em).getAutoDetach();\n+        return (autoDetachFlags & AutoDetach.DETACH_CLOSE) > 0;\n+    }\n+\n+    private boolean isAutoDetachingOnCommit() {\n+        int autoDetachFlags = OpenJPAPersistence.cast(em).getAutoDetach();\n+        return (autoDetachFlags & AutoDetach.DETACH_COMMIT) > 0;\n+    }\n+\n+    private boolean isAutoDetachingOnNonTxRead() {\n+        int autoDetachFlags = OpenJPAPersistence.cast(em).getAutoDetach();\n+        return (autoDetachFlags & AutoDetach.DETACH_NONTXREAD) > 0;\n+    }\n+}"},{"sha":"be119a81450d3831b22ee2f0b244308b151702ba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","raw_url":"https://github.com/apache/openjpa/raw/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java?ref=2ac1bcccbb4070da2c86bfee4c7368d9466141ca","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.conf;\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+import junit.framework.*;\n+\n+import org.apache.openjpa.lib.util.ParseException;\n+import org.apache.openjpa.persistence.*;\n+import org.apache.openjpa.persistence.PersistenceException;\n+\n+public class TestBadAutoDetachProperty extends TestCase {\n+    public void testEmptyValue() {\n+        HashMap props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.AutoDetach\", \"\");\n+        EntityManagerFactory emf = (OpenJPAEntityManagerFactory) Persistence\n+                .createEntityManagerFactory(\"test\", props);\n+        EntityManager em = emf.createEntityManager();\n+        em.close();\n+        emf.close();\n+    }\n+\n+    public void testCommaOnlyValue() {\n+        try {\n+            HashMap props = new HashMap(System.getProperties());\n+            props.put(\"openjpa.AutoDetach\", \",\");\n+            EntityManagerFactory emf = (OpenJPAEntityManagerFactory) Persistence\n+                    .createEntityManagerFactory(\"test\", props);\n+            EntityManager em = emf.createEntityManager();\n+            em.close();\n+            emf.close();\n+        } catch (PersistenceException e) {\n+            Throwable cause = e.getCause();\n+            if (!(cause instanceof ParseException)) {\n+                fail(\"Should have caught PersistenceException whose cause was \"\n+                        + \"a ParseException. \" + \"Instead the cause was: \"\n+                        + cause);\n+            }\n+        } catch (RuntimeException e) {\n+            fail(\"Should have caught a PersistenceException, instead caught: \"\n+                    + e);\n+        }\n+    }\n+\n+    public void testEmptyItemValue() {\n+        try {\n+            HashMap props = new HashMap(System.getProperties());\n+            props.put(\"openjpa.AutoDetach\", \"close,,commit\");\n+            EntityManagerFactory emf = (OpenJPAEntityManagerFactory) Persistence\n+                    .createEntityManagerFactory(\"test\", props);\n+            EntityManager em = emf.createEntityManager();\n+            em.close();\n+            emf.close();\n+        } catch (PersistenceException e) {\n+            Throwable cause = e.getCause();\n+            if (!(cause instanceof ParseException)) {\n+                fail(\"Should have caught PersistenceException whose cause was \"\n+                        + \"a ParseException. \" + \"Instead the cause was: \"\n+                        + cause);\n+            }\n+        } catch (RuntimeException e) {\n+            fail(\"Should have caught a PersistenceException, instead caught: \"\n+                    + e);\n+        }\n+    }\n+}"},{"sha":"8002d043d09884208dcde009505ed21dbb3f45bf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ac1bcccbb4070da2c86bfee4c7368d9466141ca/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=2ac1bcccbb4070da2c86bfee4c7368d9466141ca","patch":"@@ -186,10 +186,11 @@ else if (obj == null)\n \n         Broker broker = _factory.newBroker(user, pass, managed, retainMode,\n             false);\n-        // we should allow the user to specify these settings in conf\n-        // regardless of PersistenceContextType\n-        broker.setAutoDetach(AutoDetach.DETACH_CLOSE \n-            | AutoDetach.DETACH_ROLLBACK);\n+            \n+        // add autodetach for close and rollback conditions to the configuration\n+        broker.setAutoDetach(AutoDetach.DETACH_CLOSE, true);\n+        broker.setAutoDetach(AutoDetach.DETACH_ROLLBACK, true);\n+        \n         broker.setDetachedNew(false);\n         OpenJPAEntityManager em = newEntityManagerImpl(broker);\n "}]}

