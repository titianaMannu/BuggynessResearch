{"sha":"2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","node_id":"MDY6Q29tbWl0MjA2MzY0OjJiMmVkZTFlMzhkODZlMDg5Y2IwYjFjODI2MmI2Yzg4N2U2OGY5NWY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T20:53:57Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T20:53:57Z"},"message":"OPENJPA-1374 Enable junits to be executed against an in-memory Derby 10.5.3.0 db.  Moved common Derby profiles to the parent POM.  Added new Derby props in o-p-j which knocked 2 mins off build time.  Added a test-derbymem profile to use Derby 10.5.3.0 as in-memory DB, which reduced build time by 5 mins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901374 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d46a85a8c51ca3649eaca695a882558b17acbc8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/d46a85a8c51ca3649eaca695a882558b17acbc8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","html_url":"https://github.com/apache/openjpa/commit/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/comments","author":null,"committer":null,"parents":[{"sha":"531df90e41e5c80cce3129ef45455e2efe3ef272","url":"https://api.github.com/repos/apache/openjpa/commits/531df90e41e5c80cce3129ef45455e2efe3ef272","html_url":"https://github.com/apache/openjpa/commit/531df90e41e5c80cce3129ef45455e2efe3ef272"}],"stats":{"total":321,"additions":141,"deletions":180},"files":[{"sha":"f942bcee76b4c43c877cea4e212704cbb0612ea9","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":8,"deletions":71,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","patch":"@@ -99,77 +99,6 @@\n         </build>\n         </profile>\n \n-        <!-- Default profile for testing with embedded Apache Derby -->\n-        <profile>\n-            <!--\n-                Optionally, you can override the following properties:\n-                    -Dderby.version=10.2.2.0\n-            -->\n-            <id>test-derby</id>\n-            <activation>\n-                <activeByDefault>true</activeByDefault>\n-                <property>\n-                    <name>test-derby</name>\n-                </property>\n-            </activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.derby</groupId>\n-                    <artifactId>derby</artifactId>\n-                    <version>${derby.version}</version>\n-                    <scope>test</scope>\n-                </dependency>\n-            </dependencies>\n-            <properties>\n-                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n-                <connection.url>jdbc:derby:target/database/openjpa-derby-database;create=true</connection.url>\n-                <connection.username />\n-                <connection.password />\n-            </properties>\n-        </profile>\n-\n-        <!-- Profile for testing with Apache Derby network server -->\n-        <profile>\n-            <!--\n-                Example Derby Network Server profile.\n-                You must manually start a Derby network server instance and\n-                also set the following properties:\n-                    -Dopenjpa.derbynet.url=jdbc:derby://<HOST>:<PORT>/<DBNAME>;\\\n-                    \tcreate=true\n-\n-                Optionally, you can override the following properties:\n-                    -Dopenjpa.derbynet.driver=org.apache.derby.jdbc.ClientXADataSource\n-                    -Dopenjpa.derbynet.username=\n-                    -Dopenjpa.derbynet.password=\n-                    -Dderby.version=10.2.2.0\n-            -->\n-            <id>test-derbynet</id>\n-            <activation>\n-                <property>\n-                    <name>test-derbynet</name>\n-                </property>\n-            </activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.derby</groupId>\n-                    <artifactId>derbyclient</artifactId>\n-                    <version>${derby.version}</version>\n-                    <scope>test</scope>\n-                </dependency>\n-            </dependencies>\n-            <properties>\n-                <openjpa.derbynet.url>jdbc:derby://localhost:1527/openjpa20;create=true;traceDirectory=target;traceFile=derby.log</openjpa.derbynet.url>\n-                <openjpa.derbynet.driver>org.apache.derby.jdbc.ClientDriver</openjpa.derbynet.driver>\n-                <!-- Note: commons-dbcp requires dummy values for uid/pwd -->\n-                <openjpa.derbynet.username>uid</openjpa.derbynet.username>\n-                <openjpa.derbynet.password>pwd</openjpa.derbynet.password>\n-                <connection.driver.name>${openjpa.derbynet.driver}</connection.driver.name>\n-                <connection.url>${openjpa.derbynet.url}</connection.url>\n-                <connection.username>${openjpa.derbynet.username}</connection.username>\n-                <connection.password>${openjpa.derbynet.password}</connection.password>\n-            </properties>\n-        </profile>\n-\n         <!-- Profile for testing with HSQL DB -->\n         <profile>\n             <id>test-hsqldb</id>\n@@ -1062,6 +991,14 @@\n                             <name>derby.locks.waitTimeout</name>\n                             <value>${derby.locks.waitTimeout}</value>\n                         </property>\n+                        <property>\n+                            <name>derby.storage.pageCacheSize</name>\n+                            <value>10000</value>\n+                        </property>\n+                        <property>\n+                            <name>derby.storage.initialPages</name>\n+                            <value>10</value>\n+                        </property>\n                         <property>\n                             <name>openjpa.ConnectionProperties</name>\n                             <value>DriverClassName=${connection.driver.name},Url=${connection.url},Username=${connection.username},Password=${connection.password},${dbcp.args}</value>"},{"sha":"7f82cc5c8d7fb65daa6610e182bc102bcda27907","filename":"openjpa-persistence-locking/pom.xml","status":"modified","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/openjpa-persistence-locking/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/openjpa-persistence-locking/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/pom.xml?ref=2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","patch":"@@ -101,77 +101,6 @@\n             </build>\n         </profile>\n \n-        <!-- Default profile for testing with embedded Apache Derby -->\n-        <profile>\n-            <!--\n-                Optionally, you can override the following properties:\n-                    -Dderby.version=10.2.2.0\n-            -->\n-            <id>test-derby</id>\n-            <activation>\n-                <activeByDefault>true</activeByDefault>\n-                <property>\n-                    <name>test-derby</name>\n-                </property>\n-            </activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.derby</groupId>\n-                    <artifactId>derby</artifactId>\n-                    <version>${derby.version}</version>\n-                    <scope>test</scope>\n-                </dependency>\n-            </dependencies>\n-            <properties>\n-                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n-                <connection.url>jdbc:derby:target/database/openjpa-derby-database;create=true</connection.url>\n-                <connection.username />\n-                <connection.password />\n-            </properties>\n-        </profile>\n-\n-        <!-- Profile for testing with Apache Derby network server -->\n-        <profile>\n-            <!--\n-                Example Derby Network Server profile.\n-                You must manually start a Derby network server instance and\n-                also set the following properties:\n-                    -Dopenjpa.derbynet.url=jdbc:derby://<HOST>:<PORT>/<DBNAME>;\\\n-                    \tcreate=true\n-\n-                Optionally, you can override the following properties:\n-                    -Dopenjpa.derbynet.driver=org.apache.derby.jdbc.ClientXADataSource\n-                    -Dopenjpa.derbynet.username=\n-                    -Dopenjpa.derbynet.password=\n-                    -Dderby.version=10.2.2.0\n-            -->\n-            <id>test-derbynet</id>\n-            <activation>\n-                <property>\n-                    <name>test-derbynet</name>\n-                </property>\n-            </activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.derby</groupId>\n-                    <artifactId>derbyclient</artifactId>\n-                    <version>${derby.version}</version>\n-                    <scope>test</scope>\n-                </dependency>\n-            </dependencies>\n-            <properties>\n-                <openjpa.derbynet.url>jdbc:derby://localhost:1527/openjpa20;create=true;traceDirectory=target;traceFile=derby.log</openjpa.derbynet.url>\n-                <openjpa.derbynet.driver>org.apache.derby.jdbc.ClientDriver</openjpa.derbynet.driver>\n-                <!-- Note: commons-dbcp requires dummy values for uid/pwd -->\n-                <openjpa.derbynet.username>uid</openjpa.derbynet.username>\n-                <openjpa.derbynet.password>pwd</openjpa.derbynet.password>\n-                <connection.driver.name>${openjpa.derbynet.driver}</connection.driver.name>\n-                <connection.url>${openjpa.derbynet.url}</connection.url>\n-                <connection.username>${openjpa.derbynet.username}</connection.username>\n-                <connection.password>${openjpa.derbynet.password}</connection.password>\n-            </properties>\n-        </profile>\n-\n         <!-- Profile for testing with HSQL DB -->\n         <profile>\n             <id>test-hsqldb</id>"},{"sha":"287c0d3ac3cfc63603dc84e10c61016e74e2054d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":25,"deletions":15,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","patch":"@@ -93,12 +93,17 @@ public OpenJPAEntityManagerFactory createEntityManagerFactory(String name, Strin\n             _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);            \n             pd.checkPuNameCollisions(_log,name);\n             \n-            loadAgent(_log, conf);\n+            // add enhancer\n+            loadAgent(factory);\n             \n-            // TODO - Can this be moved back to BrokerImpl.initialize()?\n             // Create appropriate LifecycleEventManager\n-            loadValidator(_log, conf);\n+            loadValidator(factory);\n             \n+            // We need to wait to preload until after we get back a fully configured/instantiated\n+            // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n+            // functions and they need to be allowed time to configure themselves before we go off and\n+            // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n+            // any exceptions here because we want to fail-fast.\n             preloadMetaDataRepository(factory);\n             \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n@@ -181,18 +186,17 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n                     log.warn(_loc.get(\"transformer-registration-error\", pui));\n                 }\n             }\n+\n             // Create appropriate LifecycleEventManager\n-            OpenJPAConfiguration conf = factory.getConfiguration();\n-            conf.setPersistenceUnitRootUrl(pui.getPersistenceUnitRootUrl());\n-            _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-            loadValidator(_log, conf);\n+            loadValidator(factory);\n             \n             // We need to wait to preload until after we get back a fully configured/instantiated\n             // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n             // functions and they need to be allowed time to configure themselves before we go off and\n             // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n             // any exceptions here because we want to fail-fast.\n-            preloadMetaDataRepository(factory);           \n+            preloadMetaDataRepository(factory);\n+            \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n@@ -234,7 +238,7 @@ private void preloadMetaDataRepository(BrokerFactory factory){\n         // We need to wait to preload until after we get back a fully configured/instantiated\n         // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n         // functions and they need to be allowed time to configure themselves before we go off and\n-        // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n+        // start instantiating configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n         // any exceptions here because we want to fail-fast.\n         OpenJPAConfiguration conf = factory.getConfiguration();\n         Options o = Configurations.parseProperties(Configurations.getProperties(conf.getMetaDataRepository()));\n@@ -285,11 +289,14 @@ public ClassLoader getClassLoader(Class<?> context, ClassLoader env) {\n     /**\n      * This private worker method will attempt load the PCEnhancerAgent.\n      */\n-    private void loadAgent(Log log, OpenJPAConfiguration conf) {\n+    private void loadAgent(BrokerFactory factory) {\n+        OpenJPAConfiguration conf = factory.getConfiguration();\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+\n         if (conf.getDynamicEnhancementAgent() == true) {\n             boolean res = PCEnhancerAgent.loadDynamicAgent(log);\n-            if(_log.isInfoEnabled() && res == true ){\n-                _log.info(_loc.get(\"dynamic-agent\"));\n+            if (log.isInfoEnabled() && res == true ){\n+                log.info(_loc.get(\"dynamic-agent\"));\n             }\n         }\n     }\n@@ -302,10 +309,13 @@ private void loadAgent(Log log, OpenJPAConfiguration conf) {\n      * @param conf\n      * @throws if validation setup failed and was required by the config\n      */\n-    private void loadValidator(Log log, OpenJPAConfiguration conf) {\n+    private void loadValidator(BrokerFactory factory) {\n+        OpenJPAConfiguration conf = factory.getConfiguration();\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+\n         if ((ValidationUtils.setupValidation(conf) == true) &&\n-                _log.isInfoEnabled()) {\n-            _log.info(_loc.get(\"vlem-creation-info\"));\n+                log.isInfoEnabled()) {\n+            log.info(_loc.get(\"vlem-creation-info\"));\n         }\n     }\n "},{"sha":"7dfd2f62a19d7b51f18e2ee308df8e905eabf3ac","filename":"openjpa-slice/pom.xml","status":"modified","additions":2,"deletions":23,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","patch":"@@ -63,29 +63,8 @@\n         </dependency>\n     </dependencies>\n     <profiles>\n-        <!-- Profile for testing with Apache Derby -->\n-        <profile>\n-            <id>test-derby</id>\n-            <activation>\n-                <activeByDefault>true</activeByDefault>\n-                <property>\n-                    <name>test-derby</name>\n-                </property>\n-            </activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.derby</groupId>\n-                    <artifactId>derby</artifactId>\n-                    <scope>test</scope>\n-                </dependency>\n-            </dependencies>\n-            <properties>\n-                <connection.driver.name> org.apache.derby.jdbc.EmbeddedDriver </connection.driver.name>\n-                <connection.url> jdbc:derby:target/database/slice-derby-One;create=true </connection.url>\n-                <connection.username />\n-                <connection.password />\n-            </properties>\n-        </profile>\n+        <!-- Default is to test with Embedded Derby, which is setup in\n+             persistence.xml to create the required slices -->\n \n         <!-- Sample profile for testing with MySQL DB -->\n         <profile>"},{"sha":"a259e70643175fa6a4cc6111e146647c604a50e6","filename":"pom.xml","status":"modified","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","patch":"@@ -111,7 +111,113 @@\n         <module>openjpa-integration</module>\n         <module>openjpa-all</module>\n     </modules>\n+\n     <profiles>\n+        <!-- =============== -->\n+        <!--  Test Profiles  -->\n+        <!-- =============== -->\n+        <!-- Default profile for testing with an embedded Apache Derby DB -->\n+        <profile>\n+            <!--\n+                Optionally, you can override the following properties:\n+                    -Dderby.version=10.2.2.0\n+            -->\n+            <id>test-derby</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            <property>\n+                <name>test-derby</name>\n+            </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>org.apache.derby</groupId>\n+                    <artifactId>derby</artifactId>\n+                    <version>${derby.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n+                <connection.url>jdbc:derby:target/database/openjpa-derby-database;create=true</connection.url>\n+                <connection.username />\n+                <connection.password />\n+            </properties>\n+        </profile>\n+        <!-- Profile for testing with an In-Memory Apache Derby DB -->\n+        <profile>\n+            <!--\n+                Optionally, you can override the following properties:\n+                    -Dderby.version=10.5.3.0_1\n+            -->\n+            <id>test-derbymem</id>\n+            <activation>\n+                <property>\n+                    <name>test-derbymem</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>org.apache.derby</groupId>\n+                    <artifactId>derby</artifactId>\n+                    <version>${derby.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <derby.version>10.5.3.0_1</derby.version>\n+                <connection.driver.name>org.apache.derby.jdbc.EmbeddedDriver</connection.driver.name>\n+                <connection.url>jdbc:derby:memory:openjpa-derby-inmem-database;create=true</connection.url>\n+                <connection.username />\n+                <connection.password />\n+            </properties>\n+        </profile>\n+        <!-- Profile for testing with Apache Derby DB network server -->\n+        <profile>\n+            <!--\n+                Example Derby Network Server profile.\n+                You must manually start a Derby network server instance and\n+                also set the following properties:\n+                    -Dopenjpa.derbynet.url=jdbc:derby://<HOST>:<PORT>/<DBNAME>;\\\n+                        create=true\n+\n+                Optionally, you can override the following properties:\n+                    -Dopenjpa.derbynet.driver=org.apache.derby.jdbc.ClientXADataSource\n+                    -Dopenjpa.derbynet.username=\n+                    -Dopenjpa.derbynet.password=\n+                    -Dderby.version=10.2.2.0\n+            -->\n+            <id>test-derbynet</id>\n+            <activation>\n+                <property>\n+                    <name>test-derbynet</name>\n+                </property>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>org.apache.derby</groupId>\n+                    <artifactId>derbyclient</artifactId>\n+                    <version>${derby.version}</version>\n+                    <scope>test</scope>\n+                </dependency>\n+            </dependencies>\n+            <properties>\n+                <openjpa.derbynet.url>jdbc:derby://localhost:1527/openjpa20;create=true;traceDirectory=target;traceFile=derby.log</openjpa.derbynet.url>\n+                <openjpa.derbynet.driver>org.apache.derby.jdbc.ClientDriver</openjpa.derbynet.driver>\n+                <!-- Note: commons-dbcp requires dummy values for uid/pwd -->\n+                <openjpa.derbynet.username>uid</openjpa.derbynet.username>\n+                <openjpa.derbynet.password>pwd</openjpa.derbynet.password>\n+                <connection.driver.name>${openjpa.derbynet.driver}</connection.driver.name>\n+                <connection.url>${openjpa.derbynet.url}</connection.url>\n+                <connection.username>${openjpa.derbynet.username}</connection.username>\n+                <connection.password>${openjpa.derbynet.password}</connection.password>\n+            </properties>\n+        </profile>\n+\n+\n+        <!-- ================ -->\n+        <!--  Build Profiles  -->\n+        <!-- ================ -->\n         <profile>\n             <id>release</id>\n             <activation>"}]}

