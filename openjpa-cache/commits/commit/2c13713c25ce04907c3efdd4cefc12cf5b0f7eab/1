{"sha":"2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjMTM3MTNjMjVjZTA0OTA3YzNlZmRkNGNlZmMxMmNmNWIwZjdlYWI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-12-22T20:07:38Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-12-22T20:07:38Z"},"message":"OPENJPA-838: remove cache from StoreCollectionFieldStrategy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@728758 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f011c03edb52ea4eb5e30f9ad8d0900dd3fb831b","url":"https://api.github.com/repos/apache/openjpa/git/trees/f011c03edb52ea4eb5e30f9ad8d0900dd3fb831b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","html_url":"https://github.com/apache/openjpa/commit/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab/comments","author":null,"committer":null,"parents":[{"sha":"0395328f851e8b3765e67eacbc169007d98e278d","url":"https://api.github.com/repos/apache/openjpa/commits/0395328f851e8b3765e67eacbc169007d98e278d","html_url":"https://github.com/apache/openjpa/commit/0395328f851e8b3765e67eacbc169007d98e278d"}],"stats":{"total":122,"additions":10,"deletions":112},"files":[{"sha":"52a72d33dd1edb81eaf76f7164deafe7fad7021b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":10,"deletions":98,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","patch":"@@ -26,26 +26,20 @@\n import java.util.Map;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n-import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.Joins;\n-import org.apache.openjpa.jdbc.sql.LogicalUnion;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -526,86 +520,19 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             return;\n         }\n \n-        //cache union for field here\n         // select data for this sm\n-        boolean found = true;\n         final ClassMapping[] elems = getIndependentElementMappings(true);\n         final Joins[] resJoins = new Joins[Math.max(1, elems.length)];\n-        List parmList = null;\n-        Union union = null;\n-        SelectImpl sel = null;\n-        Map<JDBCStoreManager.SelectKey, Object[]> storeCollectionUnionCache = null;\n-        JDBCStoreManager.SelectKey selKey = null;\n-        if (!((JDBCStoreManager)store).isQuerySQLCacheOn() || elems.length > 1)\n-            union = newUnion(sm, store, fetch, elems, resJoins);\n-        else {\n-            parmList = new ArrayList();\n-            JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n-            fetchClone.copy(fetch);\n-           \n-            // to specify the type so that no cast is needed\n-            storeCollectionUnionCache = ((JDBCStoreManager)store).\n-                getCacheMapFromQuerySQLCache(StoreCollectionFieldStrategy.class);\n-            selKey = \n-                new JDBCStoreManager.SelectKey(null, field, fetchClone);\n-            Object[] objs = storeCollectionUnionCache.get(selKey);\n-            if (objs != null) {\n-                union = (Union) objs[0];\n-                resJoins[0] = (Joins) objs[1];\n-            }\n-            else {\n-                synchronized(storeCollectionUnionCache) {\n-                    objs = storeCollectionUnionCache.get(selKey);\n-                    if (objs == null) {\n-                        // select data for this sm\n-                        union = newUnion(sm, store, fetch, elems, resJoins);\n-                        found = false;\n-                    } else {\n-                        union = (Union) objs[0];\n-                        resJoins[0] = (Joins) objs[1];\n-                    }\n-\n-                    sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n-                        getDelegate();\n-                    if (sel.getSQL() == null) {\n-                    \t((SelectImpl)sel).setSQL(store, fetch);\n-                        found = false;\n-                    }\n-\n-                    // only cache the union when elems length is 1 for now\n-                    if (!found) { \n-                        Object[] objs1 = new Object[2];\n-                        objs1[0] = union;\n-                        objs1[1] = resJoins[0];\n-                        ((JDBCStoreManager)store).addToSqlCache(\n-                            storeCollectionUnionCache, selKey, objs1);\n-                     }\n-                }\n-            }\n-            \n-            Log log = store.getConfiguration().\n-                getLog(JDBCConfiguration.LOG_JDBC);\n-            if (log.isTraceEnabled()) {\n-                if (found)\n-                    log.trace(_loc.get(\"cache-hit\", field, this.getClass()));\n-                else\n-                    log.trace(_loc.get(\"cache-missed\", field, this.getClass())); \n+        Union union = store.getSQLFactory().newUnion\n+            (Math.max(1, elems.length));\n+        union.select(new Union.Selector() {\n+            public void select(Select sel, int idx) {\n+                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n+                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n+                    JDBCFetchConfiguration.EAGER_PARALLEL);\n             }\n-            \n-            ClassMapping mapping = field.getDefiningMapping();\n-            Object oid = sm.getObjectId();\n-            Column[] cols = mapping.getPrimaryKeyColumns();\n-            if (sel == null)\n-                sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n-                getDelegate();\n-\n-            sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n-                \tnull, null, parmList);\n-            List nonFKParams = sel.getSQL().getNonFKParameters();\n-            if (nonFKParams != null && nonFKParams.size() > 0) \n-                parmList.addAll(nonFKParams);\n-        }\n-        \n+        });\n+\n         // create proxy\n         Object coll;\n         ChangeTracker ct = null;\n@@ -618,7 +545,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         }\n \n         // load values\n-        Result res = union.execute(store, fetch, parmList);\n+        Result res = union.execute(store, fetch);\n         try {\n             int seq = -1;\n             while (res.next()) {\n@@ -642,21 +569,6 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             sm.storeObject(field.getIndex(), coll);\n     }\n \n-    protected Union newUnion(final OpenJPAStateManager sm, final JDBCStore store,\n-        final JDBCFetchConfiguration fetch, final ClassMapping[] elems,\n-        final Joins[] resJoins) {\n-        Union union = store.getSQLFactory().newUnion\n-        (Math.max(1, elems.length));\n-        union.select(new Union.Selector() {\n-            public void select(Select sel, int idx) {\n-                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n-                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n-                        JDBCFetchConfiguration.EAGER_PARALLEL);\n-            }\n-        });\n-        return union;\n-    }\n-    \n     /**\n      * Select data for loading, starting in field table.\n      */"},{"sha":"a4d4c22490edb4e7e791ac39b4941e0f9d64e6b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/2c13713c25ce04907c3efdd4cefc12cf5b0f7eab/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=2c13713c25ce04907c3efdd4cefc12cf5b0f7eab","patch":"@@ -56,7 +56,6 @@\n     private List _subsels = null;\n     private List _params = null;\n     private List _cols = null;\n-    private List _nonFKParams = null;\n \n     /**\n      * Default constructor.\n@@ -147,11 +146,6 @@ else if (_cols != null)\n                         _cols.add(paramIndex, null);\n             }\n         }\n-        if (buf._nonFKParams != null) {\n-            if (_nonFKParams == null)\n-                _nonFKParams = new ArrayList();\n-            _nonFKParams.addAll(buf._nonFKParams);\n-        }\n     }\n \n     public SQLBuffer append(Table table) {\n@@ -271,11 +265,6 @@ else if (o instanceof Raw)\n                 if (isFK)\n                     break;\n             }\n-            if (!isFK) {\n-                if (_nonFKParams == null)\n-                    _nonFKParams = new ArrayList();\n-                _nonFKParams.add(o);                \n-            }\n         }\n         return this;\n     }\n@@ -399,9 +388,6 @@ public List getParameters() {\n         return (_params == null) ? Collections.EMPTY_LIST : _params;\n     }\n \n-    public List getNonFKParameters() {\n-        return (_nonFKParams == null) ? Collections.EMPTY_LIST : _nonFKParams;\n-    }\n     /**\n      * Return the SQL for this buffer.\n      */"}]}

