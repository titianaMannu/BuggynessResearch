{"sha":"2c31d9c6df811638f27bd7dac8608766a4a499e1","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjMzFkOWM2ZGY4MTE2MzhmMjdiZDdkYWM4NjA4NzY2YTRhNDk5ZTE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-09-19T00:50:57Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-09-19T00:50:57Z"},"message":"1. Refactoring ConfigurationProvider/ProductDerivation subsystem.\n2. Extensibility of OpenJPA via ProductDerivation\n\nPrimary modifications are\na) The configuration information resources are located/parsed/loaded via dynamically discovered ProductDerivation services\n(instead of ConfigurationProviders). ConfigurationProvider is not enlisted as a service any more.\nb) Tools are modified to use ProductDerivations instead of Configurations \nc) ProductDerivation has moved to lib from kernel.\nd) ProductDerivation types that are STORE specific are no more defined in lib version.\nOpenJPAProductDerivation in kernel package defines them. The type constants have holes. \ne) One test is modified\nf) pom.xml is modified as ProductDerivation has moved to lib from kernel \n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@447664 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fe7a79018ed7805db4ffec761759f5189921d6bb","url":"https://api.github.com/repos/apache/openjpa/git/trees/fe7a79018ed7805db4ffec761759f5189921d6bb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2c31d9c6df811638f27bd7dac8608766a4a499e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2c31d9c6df811638f27bd7dac8608766a4a499e1","html_url":"https://github.com/apache/openjpa/commit/2c31d9c6df811638f27bd7dac8608766a4a499e1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2c31d9c6df811638f27bd7dac8608766a4a499e1/comments","author":null,"committer":null,"parents":[{"sha":"7740c7842c018e58916f09ed174389c840ec0eef","url":"https://api.github.com/repos/apache/openjpa/commits/7740c7842c018e58916f09ed174389c840ec0eef","html_url":"https://github.com/apache/openjpa/commit/7740c7842c018e58916f09ed174389c840ec0eef"}],"stats":{"total":1524,"additions":915,"deletions":609},"files":[{"sha":"b6c19f0ac8d95daf5844e96c608791e36792f930","filename":"openjpa-all/pom.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-all/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-all/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-all/pom.xml?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -50,10 +50,9 @@\n                                     </sequential>\n                                 </macrodef>\n \n-                                <aggregate-file servicename=\"org.apache.openjpa.conf.ProductDerivation\"/>\n+                                <aggregate-file servicename=\"org.apache.openjpa.lib.conf.ProductDerivation\"/>\n                                 <aggregate-file servicename=\"javax.persistence.spi.PersistenceProvider\"/>\n                                 <aggregate-file servicename=\"org.apache.openjpa.kernel.exps.ExpressionParser\"/>\n-                                <aggregate-file servicename=\"org.apache.openjpa.lib.conf.ConfigurationProvider\"/>\n                             </tasks>\n                         </configuration>\n                         <goals>"},{"sha":"1bb95d5a6f7ca39d48d97873fa429a832a1843d1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -20,7 +20,6 @@\n import javax.sql.DataSource;\n \n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.conf.ProductDerivations;\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n import org.apache.openjpa.jdbc.kernel.LRSSizes;\n@@ -39,6 +38,7 @@\n import org.apache.openjpa.lib.conf.IntValue;\n import org.apache.openjpa.lib.conf.ObjectValue;\n import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.StringListValue;\n import org.apache.openjpa.lib.conf.StringValue;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;"},{"sha":"9fea42880808e98e0c5707d308c3e51dd574b190","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -16,16 +16,16 @@\n package org.apache.openjpa.jdbc.conf;\n \n import org.apache.openjpa.conf.BrokerFactoryValue;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.conf.ProductDerivation;\n+import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n+import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n \n /**\n  * Sets JDBC as default store.\n  */\n-public class JDBCProductDerivation\n-    implements ProductDerivation {\n+public class JDBCProductDerivation extends AbstractProductDerivation\n+    implements OpenJPAProductDerivation {\n \n     static {\n         BrokerFactoryValue.addDefaultAlias(\"jdbc\",\n@@ -36,17 +36,17 @@ public int getType() {\n         return TYPE_STORE;\n     }\n \n-    public void beforeConfigurationConstruct(ConfigurationProvider cp) {\n+    public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n         // default to JDBC when no broker factory set\n         if (BrokerFactoryValue.get(cp) == null) {\n             cp.addProperty(BrokerFactoryValue.getKey(cp),\n                 JDBCBrokerFactory.class.getName());\n+            return true;\n         }\n+        return false;\n     }\n-\n-    public void beforeConfigurationLoad(OpenJPAConfiguration c) {\n-    }\n-\n-    public void afterSpecificationSet(OpenJPAConfiguration c) {\n+    \n+    public ConfigurationProvider newConfigurationProvider() {\n+        return null;\n     }\n }"},{"sha":"17c00adee9e129a4ba3a30f887927f377e36a5d6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;"},{"sha":"a7db4237287df97173cfcc7769dc8a3531cecefb","filename":"openjpa-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","previous_filename":"openjpa-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.conf.ProductDerivation"},{"sha":"1c378b732374a3a5db5d24e2fca238adc8269ec4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -209,7 +209,7 @@\n      * A configuration can be set with defaults for a specific specification.\n      */\n     public String getSpecification();\n-\n+    \n     /**\n      * Set the specification that this configuration should use for the\n      * various properties that need to have different defaults for different"},{"sha":"cee8b43db9ac303e0efb2e22d5a8c23a54c90365","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -15,8 +15,12 @@\n  */\n package org.apache.openjpa.conf;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n \n import org.apache.openjpa.datacache.ConcurrentDataCache;\n import org.apache.openjpa.datacache.ConcurrentQueryCache;\n@@ -38,15 +42,7 @@\n import org.apache.openjpa.kernel.Seq;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n-import org.apache.openjpa.lib.conf.BooleanValue;\n-import org.apache.openjpa.lib.conf.ConfigurationImpl;\n-import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.conf.IntValue;\n-import org.apache.openjpa.lib.conf.ObjectValue;\n-import org.apache.openjpa.lib.conf.PluginListValue;\n-import org.apache.openjpa.lib.conf.PluginValue;\n-import org.apache.openjpa.lib.conf.StringListValue;\n-import org.apache.openjpa.lib.conf.StringValue;\n+import org.apache.openjpa.lib.conf.*;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataFactory;\n@@ -140,7 +136,6 @@\n \n     private Collection supportedOptions = new HashSet(33);\n     private String spec = null;\n-    \n     private final StoreFacadeTypeRegistry _storeFacadeRegistry =\n         new StoreFacadeTypeRegistry();\n \n@@ -531,7 +526,6 @@ public boolean setSpecification(String spec) {\n                     spec));\n             return false;\n         }\n-\n         this.spec = spec;\n         ProductDerivations.afterSpecificationSet(this);\n         return true;"},{"sha":"412e338f07d1f9a4ecdbb506de384eb439374ee4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAProductDerivation.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import org.apache.openjpa.lib.conf.ProductDerivation;\r\n+\r\n+/**\r\n+ * \r\n+ * Adds datastore based extension to ProductDerivation.  \r\n+ *\r\n+ * @since 0.4.1\r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public interface OpenJPAProductDerivation extends ProductDerivation {\r\n+    public static final int TYPE_STORE = 200;\r\n+    public static final int TYPE_SPEC_STORE = 300;\r\n+    public static final int TYPE_PRODUCT_STORE = 400;\r\n+}\r"},{"sha":"626040e353ec78e258657e5ea96f913ab0cf5045","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java?ref=7740c7842c018e58916f09ed174389c840ec0eef","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.conf;\n-\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\n-\n-/**\n- * Hooks for deriving products with additional functionality.\n- * All implementations of this interface will have a chance to mutate\n- * a {@link Configuration} both before and after the user-specified\n- * configuration data is loaded. The order in which the\n- * derivations are evaluated is determined by the specificity of the\n- * derivation type.\n- *\n- * @since 0.4.1\n- */\n-public interface ProductDerivation {\n-\n-    public static final int TYPE_SPEC = 0;\n-    public static final int TYPE_PRODUCT = 1;\n-    public static final int TYPE_STORE = 2;\n-    public static final int TYPE_SPEC_STORE = 3;\n-    public static final int TYPE_PRODUCT_STORE = 4;\n-    public static final int TYPE_FEATURE = 5;\n-\n-    /**\n-     * Return the type of derivation.\n-     */\n-    public int getType();\n-\n-    /**\n-     * Provides the instance with a callback to mutate the initial properties\n-     * of the {@link ConfigurationProvider}. This is primarily to alter or\n-     * add properties that determine what type of configuration is constructed,\n-     * and therefore is typically used at runtime only.\n-     */\n-    public void beforeConfigurationConstruct(ConfigurationProvider cp);\n-\n-    /**\n-     * Provides the instance with the opportunity to mutate\n-     * <code>conf</code> before the user configuration is applied.\n-     */\n-    public void beforeConfigurationLoad(OpenJPAConfiguration conf);\n-\n-    /**\n-     * Called after the specification has been set.\n-     */\n-    public void afterSpecificationSet(OpenJPAConfiguration conf);\n-}"},{"sha":"941840bd183f7750909478ba50faea6d1e22e27b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","status":"removed","additions":0,"deletions":128,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java?ref=7740c7842c018e58916f09ed174389c840ec0eef","patch":"@@ -1,128 +0,0 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.conf;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.MissingResourceException;\n-\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.lib.util.Services;\n-\n-/**\n- * Utilities for running product derivations.\n- *\n- * @author Abe White\n- * @nojavadoc\n- */\n-public class ProductDerivations {\n-\n-    private static final ProductDerivation[] _derivations;\n-\n-    static {\n-        Class[] pdcls = Services.getImplementorClasses(ProductDerivation.class,\n-          ProductDerivation.class.getClassLoader());\n-        List derivations = new ArrayList(pdcls.length);\n-        for (int i = 0; i < pdcls.length; i++) {\n-            try {\n-                derivations.add(pdcls[i].newInstance());\n-            } catch (Throwable t) {\n-                // invalid service\n-                t.printStackTrace();\n-            }\n-        }\n-\n-        // there must be some product derivation to define metadata factories,\n-        // etc. \n-        if (derivations.isEmpty()) {\n-            Localizer loc = Localizer.forPackage(ProductDerivations.class);\n-            throw new MissingResourceException(loc.get(\"no-product-derivations\",\n-                ProductDerivation.class.getName()).getMessage(),\n-                ProductDerivations.class.getName(), \"derivations\");\n-        }\n-\n-        Collections.sort(derivations, new ProductDerivationComparator());\n-        _derivations = (ProductDerivation[]) derivations.toArray\n-            (new ProductDerivation[derivations.size()]);\n-    }\n-\n-    /**\n-     * Apply {@link ProductDerivation#beforeConfigurationConstruct} callbacks\n-     * to the the given instance. Exceptions are swallowed.\n-     */\n-    public static void beforeConfigurationConstruct(ConfigurationProvider cp) {\n-        for (int i = 0; i < _derivations.length; i++) {\n-            try {\n-                _derivations[i].beforeConfigurationConstruct(cp);\n-            } catch (Exception e) {\n-                // can't log; no configuration yet\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Apply {@link ProductDerivation#beforeConfigurationLoad} callbacks\n-     * to the the given instance. Exceptions are swallowed.\n-     */\n-    public static void beforeConfigurationLoad(OpenJPAConfiguration conf) {\n-        for (int i = 0; i < _derivations.length; i++) {\n-            try {\n-                _derivations[i].beforeConfigurationLoad(conf);\n-            } catch (Exception e) {\n-                // logging not configured yet\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Apply {@link ProductDerivation#afterSpecificationSet} callbacks\n-     * to the the given instance. Exceptions are swallowed.\n-     */\n-    public static void afterSpecificationSet(OpenJPAConfiguration conf) {\n-        for (int i = 0; i < _derivations.length; i++) {\n-            try {\n-                _derivations[i].afterSpecificationSet(conf);\n-            } catch (Exception e) {\n-                // logging not configured yet\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Compare {@link ProductDerivation}s.\n-     */\n-    private static class ProductDerivationComparator\n-        implements Comparator {\n-\n-        public int compare(Object o1, Object o2) {\n-            int type1 = ((ProductDerivation) o1).getType();\n-            int type2 = ((ProductDerivation) o2).getType();\n-            if (type1 != type2)\n-                return type1 - type2;\n-\n-            // arbitrary but consistent order\n-            return o1.getClass().getName().compareTo(o2.getClass().\n-                getName());\n-\t\t}\n-\t}\n-}\n-"},{"sha":"2512909095b265da05a6f34886b1eb93e978a520","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -19,9 +19,9 @@\n import java.lang.reflect.Method;\n \n import org.apache.openjpa.conf.BrokerFactoryValue;\n-import org.apache.openjpa.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.OpenJPAException;"},{"sha":"a383c750ac190beb445fe27fc8ec6e4701800e35","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -29,7 +29,7 @@\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationImpl;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n-import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n@@ -155,7 +155,7 @@ public void execute() throws BuildException {\n         if (_conf == null)\n             _conf = newConfiguration();\n         if (_conf.getPropertiesResource() == null) {\n-            ConfigurationProvider cp = Configurations.loadDefaults\n+            ConfigurationProvider cp = ProductDerivations.loadDefaults\n                 (_conf.getClass().getClassLoader());\n             if (cp != null)\n                 cp.setInto(_conf);"},{"sha":"d931e7d6f1f1640e5c46609677c01d3d021565db","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.conf;\r\n+\r\n+import java.io.File;\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * Abstract implementation of ProductDerivation loads configuration data using\r\n+ * ConfigurationProvider supplied by concrete implementation via \r\n+ * {@link #newConfigurationProvider()} method.<p>\r\n+ * This abstract implementation does <em>not</em> provide a concrete \r\n+ * ConfigurationProvider and hence all its loadXXX() methods would return null\r\n+ * by default. When the concrete subclass supplies a ConfigurationProvider,\r\n+ * this abstratct implementation will use it to load the configuration data. \r\n+ *\r\n+ * @author Pinaki Poddar\r\n+ * @since 0.4.1\r\n+ */\r\n+\r\n+public abstract class AbstractProductDerivation\r\n+    implements ProductDerivation {\r\n+\r\n+    public ConfigurationProvider loadGlobals(ClassLoader loader)\r\n+            throws Exception {\r\n+        ConfigurationProvider provider = newConfigurationProvider();\r\n+        if (provider != null && provider.loadGlobals(loader))\r\n+            return provider;\r\n+        return null;\r\n+    }\r\n+\r\n+    public ConfigurationProvider loadDefaults(ClassLoader loader)\r\n+            throws Exception {\r\n+        ConfigurationProvider provider = newConfigurationProvider();\r\n+        if (provider != null && provider.loadDefaults(loader))\r\n+            return provider;\r\n+        return null;\r\n+    }\r\n+\r\n+    public ConfigurationProvider load(String resource, String anchor,\r\n+            ClassLoader loader)  throws Exception {\r\n+        ConfigurationProvider provider = newConfigurationProvider();\r\n+        if (provider != null && provider.load(resource, anchor, loader))\r\n+            return provider;\r\n+        return null;\r\n+    }\r\n+    \r\n+    public ConfigurationProvider load(String resource, String anchor,\r\n+            Map map) throws Exception {\r\n+        ConfigurationProvider provider = newConfigurationProvider();\r\n+        if (provider != null && provider.load(resource, anchor, map))\r\n+            return provider;\r\n+        return null;\r\n+    }\r\n+\r\n+    public ConfigurationProvider load(File file, String anchor)\r\n+            throws Exception {\r\n+        ConfigurationProvider provider = newConfigurationProvider();\r\n+        if (provider != null && provider.load(file, anchor))\r\n+            return provider;\r\n+        return null;\r\n+    }\r\n+\r\n+    public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean beforeConfigurationLoad(Configuration conf) {\r\n+        return false;\r\n+    }\r\n+\r\n+    public boolean afterSpecificationSet(Configuration conf) {\r\n+        return false;\r\n+    }\r\n+    \r\n+    public abstract ConfigurationProvider newConfigurationProvider();\r\n+}\r"},{"sha":"4fbb9cc5f80a3674fa7db8a5ced7b1f5394e9796","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -120,7 +120,7 @@\n \n     /**\n      * Default constructor. Attempts to load default properties through\n-     * system's configured {@link ConfigurationProvider}s.\n+     * system's configured {@link ProductDerivation}s.\n      */\n     public ConfigurationImpl() {\n         this(true);\n@@ -153,10 +153,10 @@ public ConfigurationImpl(boolean loadGlobals) {\n \n     /**\n      * Automatically load global values from the system's\n-     * {@link ConfigurationProvider}s, and from System properties.\n+     * {@link ProductDerivation}s, and from System properties.\n      */\n     public boolean loadGlobals() {\n-        ConfigurationProvider provider = Configurations.loadGlobals\n+        ConfigurationProvider provider = ProductDerivations.loadGlobals\n             (getClass().getClassLoader());\n         if (provider != null)\n             provider.setInto(this);\n@@ -752,8 +752,8 @@ protected boolean isInvalidProperty(String propName) {\n      * <code>properties</code> value with the name of a resource.\n      */\n     public void setProperties(String resourceName) throws IOException {\n-        Configurations.load(resourceName, getClass().getClassLoader()).\n-            setInto(this);\n+        ProductDerivations.load(resourceName, null, \n+                getClass().getClassLoader()).setInto(this);\n         _auto = resourceName;\n     }\n \n@@ -763,7 +763,8 @@ public void setProperties(String resourceName) throws IOException {\n      * <code>propertiesFile</code> value with the name of a file.\n      */\n     public void setPropertiesFile(File file) throws IOException {\n-        Configurations.load(file, getClass().getClassLoader()).setInto(this);\n+        ProductDerivations.load(file, null, \n+                getClass().getClassLoader()).setInto(this);\n         _auto = file.toString();\n     }\n "},{"sha":"f09f9c9f5c9fd0e1177aa728f1a0a73093f53d56","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","status":"modified","additions":44,"deletions":28,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationProvider.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -29,34 +29,6 @@\n  */\n public interface ConfigurationProvider {\n \n-    /**\n-     * Load globals, or return false if no globals for this provider found.\n-     */\n-    public boolean loadGlobals(ClassLoader loader) throws Exception;\n-\n-    /**\n-     * Load defaults, or return false if no defaults for this provider found.\n-     */\n-    public boolean loadDefaults(ClassLoader loader) throws Exception;\n-\n-    /**\n-     * Load the given given resource, or return false if it is not a resource\n-     * this provider understands. The given class loader may be null.\n-     *\n-     * @param anchor optional named anchor within a multiple-configuration\n-     * resource\n-     */\n-    public boolean load(String resource, String anchor, ClassLoader loader) \n-        throws Exception;\n-\n-    /**\n-     * Load given file, or return false if it is not a file this provider\n-     * understands.\n-     *\n-     * @param anchor optional named anchor within a multiple-configuration file\n-     */\n-    public boolean load(File file, String anchor) throws Exception;\n-\n     /**\n      * Return properties loaded thus far, or empty map if none.\n      */\n@@ -78,4 +50,48 @@ public boolean load(String resource, String anchor, ClassLoader loader)\n      * Set loaded information into the given configuration.\n      */\n     public void setInto(Configuration conf);\n+    \n+    /**\n+     * Loads the global resource. The meaning of <em>global</em> is specific\n+     * to concrte implementaion. \n+     * @param loader used to locate the resource. If null uses the current\n+     * thread's loader.\n+     * @return true if located and loaded global configuration \n+     */\n+    public boolean loadGlobals(ClassLoader loader) throws Exception;\n+\n+    /**\n+     * Loads the default resource. The meaning of <em>default</em> is specific\n+     * to concrte implementaion. \n+     * @param loader used to locate the resource. If null uses the current\n+     * thread's loader.\n+     * @return true if located and loaded default configuration \n+     */\n+    public boolean loadDefaults(ClassLoader loader) throws Exception;\n+    \n+    /**\n+     * Loads the given resource. \n+     * @param resource name of the resource\n+     * @param anchor optional named anchor within a resource containing multiple\n+     * configuration\n+     * @param loader used to locate the resource. If null uses the current\n+     * thread's loader.\n+     * @return true if located and loaded configuration \n+     */\n+    public boolean load(String resource, String anchor, ClassLoader loader) \n+        throws Exception;\n+    \n+    public boolean load(String resource, String anchor, Map map) \n+        throws Exception;\n+\n+    /**\n+     * Loads the given resource. \n+     * @param file name of the file to load from\n+     * @param anchor optional named anchor within a file containing multiple\n+     * configuration\n+     * @return true if located and loaded configuration \n+     */\n+    public boolean load(File file, String anchor) throws Exception;\n+\n+\n }"},{"sha":"dc2143b76baf12677ae61c9112e0201d54e8ecb8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":44,"deletions":255,"changes":299,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -162,6 +162,50 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n         }\n     }\n \n+    /**\n+     * Set the given {@link Configuration} instance from the command line\n+     * options provided. All property names of the given configuration are\n+     * recognized; additionally, if a <code>properties</code> or\n+     * <code>p</code> argument exists, the resource it\n+     * points to will be loaded and set into the given configuration instance.\n+     * It can point to either a file or a resource name.\n+     */\n+    public static void populateConfiguration(Configuration conf, Options opts) {\n+        String props = opts.removeProperty(\"properties\", \"p\", null);\n+        ConfigurationProvider provider;\n+        if (props != null && props.length() > 0) {\n+            String path = props;\n+            String anchor = null;\n+            int idx = path.lastIndexOf('#');\n+            if (idx != -1) {\n+                if (idx < path.length() - 1)\n+                    anchor = path.substring(idx + 1);\n+                path = path.substring(0, idx);\n+                if (path.length() == 0)\n+                    throw new MissingResourceException(_loc.get(\"anchor-only\",\n+                        props).getMessage(), Configurations.class.getName(), \n+                        props);\n+            }\n+\n+            File file = new File(path);\n+            if (file.isFile())\n+                provider = ProductDerivations.load(file, anchor, null);\n+            else {\n+                file = new File(\"META-INF\" + File.separatorChar + path);\n+                if (file.isFile())\n+                    provider = ProductDerivations.load(file, anchor, null);\n+                else\n+                    provider = ProductDerivations.load(path, anchor, (Map)null);\n+            }\n+            provider.setInto(conf);\n+        } else {\n+            provider = ProductDerivations.loadDefaults(null);\n+            if (provider != null)\n+                provider.setInto(conf);\n+        }\n+        opts.setInto(conf);\n+    }\n+\n     /**\n      * Helper method to throw an informative description on instantiation error.\n      */\n@@ -400,261 +444,6 @@ else if (val.startsWith(\"\\\"\") || val.startsWith(\"'\")) {\n         }\n     }\n \n-    /**\n-     * Set the given {@link Configuration} instance from the command line\n-     * options provided. All property names of the given configuration are\n-     * recognized; additionally, if a <code>properties</code> or\n-     * <code>p</code> argument exists, the resource it\n-     * points to will be loaded and set into the given configuration instance.\n-     * It can point to either a file or a resource name.\n-     */\n-    public static void populateConfiguration(Configuration conf, Options opts) {\n-        String props = opts.removeProperty(\"properties\", \"p\", null);\n-        if (props != null && props.length() > 0) {\n-            String path = props;\n-            String anchor = null;\n-            int idx = path.lastIndexOf('#');\n-            if (idx != -1) {\n-                if (idx < path.length() - 1)\n-                    anchor = path.substring(idx + 1);\n-                path = path.substring(0, idx);\n-                if (path.length() == 0)\n-                    throw new MissingResourceException(_loc.get(\"anchor-only\",\n-                        props).getMessage(), Configurations.class.getName(), \n-                        props);\n-            }\n-\n-            File file = new File(path);\n-            ConfigurationProvider provider;\n-            if (file.isFile())\n-                provider = load(file, anchor, null);\n-            else {\n-                file = new File(\"META-INF\" + File.separatorChar + path);\n-                if (file.isFile())\n-                    provider = load(file, anchor, null);\n-                else\n-                    provider = load(path, anchor, null);\n-            }\n-            provider.setInto(conf);\n-        } else {\n-            ConfigurationProvider provider = loadDefaults(null);\n-            if (provider != null)\n-                provider.setInto(conf);\n-        }\n-        opts.setInto(conf);\n-    }\n-\n-    /**\n-     * Return a {@link ConfigurationProvider} that has parsed system defaults.\n-     */\n-    public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n-        return load(loader, false);\n-    }\n-\n-    /**\n-     * Return a {@link ConfigurationProvider} that has parsed system globals.\n-     */\n-    static ConfigurationProvider loadGlobals(ClassLoader loader) {\n-        return load(loader, true);\n-    }\n-\n-    /**\n-     * Load globals or defaults.\n-     */\n-    private static ConfigurationProvider load(ClassLoader loader, \n-        boolean globals) {\n-        if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n-        Class[] impls = Services.getImplementorClasses\n-            (ConfigurationProvider.class, loader);\n-        ConfigurationProvider provider = null;\n-        int providerCount = 0;\n-        List errs = null;\n-        for (int i = 0; i < impls.length; i++) {\n-            try {\n-                provider = (ConfigurationProvider) impls[i].newInstance();\n-                if (provider == null)\n-                    continue;\n-\n-                providerCount++;\n-\n-                if ((globals && provider.loadGlobals(loader))\n-                    || (!globals && provider.loadDefaults(loader)))\n-                    return provider;\n-            } catch (MissingResourceException mre) {\n-                throw mre;\n-            } catch (Throwable t) {\n-                (errs == null ? errs = new ArrayList() : errs).add(t);\n-            }\n-        }\n-\n-        String type = (globals) ? \"globals\" : \"defaults\";\n-        MissingResourceException ex = null;\n-\n-        if (errs != null)\n-            ex = new MissingResourceException(errs.toString(),\n-                Configurations.class.getName(), type);\n-        else if (providerCount == 0)\n-            ex = new MissingResourceException(_loc.get (\"no-providers\", \n-                ConfigurationProvider.class.getName()).getMessage(),\n-                Configurations.class.getName(), type);\n-\n-        if (ex != null)\n-            throw (MissingResourceException) JavaVersions.initCause(ex,\n-                errs.size() == 0 ? null : (Throwable) errs.get(0));\n-\n-        return null;\n-    }\n-\n-    /**\n-     * Return a new new configuration provider instance of the given class,\n-     * or null if the class cannot be instantiated.\n-     */\n-    private static ConfigurationProvider newProvider(Class cls) {\n-        try {\n-            return (ConfigurationProvider) cls.newInstance();\n-        } catch (Throwable e) {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Return a {@link ConfigurationProvider} that has parsed the given\n-     * resource. Throws {@link MissingResourceException} if resource does\n-     * not exist.\n-     */\n-    public static ConfigurationProvider load(String resource, \n-        ClassLoader loader) {\n-        if (resource == null || resource.length() == 0)\n-            return null;\n-\n-        String path = resource;\n-        String anchor = null;\n-        int idx = path.indexOf('#');\n-        if (idx != -1) {\n-            if (idx < path.length() - 1)\n-                anchor = path.substring(idx + 1);\n-            path = path.substring(0, idx);\n-            if (path.length() == 0)\n-                throw new MissingResourceException(_loc.get(\"anchor-only\", \n-                    resource).getMessage(), Configurations.class.getName(), \n-                    resource);\n-        }\n-        return load(path, anchor, loader);\n-    }\n-\n-    /**\n-     * Return a {@link ConfigurationProvider} that has parsed the given\n-     * resource. Throws {@link MissingResourceException} if resource does\n-     * not exist.\n-     */\n-    public static ConfigurationProvider load(String resource, String anchor, \n-        ClassLoader loader) {\n-        if (resource == null || resource.length() == 0)\n-            return null;\n-\n-        if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n-        Class[] impls = Services.getImplementorClasses\n-            (ConfigurationProvider.class, loader);\n-        ConfigurationProvider provider = null;\n-        int providerCount = 0;\n-        StringBuffer errs = null;\n-        for (int i = 0; i < impls.length; i++) {\n-            provider = newProvider(impls[i]);\n-            if (provider == null)\n-                continue;\n-\n-            providerCount++;\n-            try {\n-                if (provider.load(resource, anchor, loader))\n-                    return provider;\n-            } catch (MissingResourceException mre) {\n-                throw mre;\n-            } catch (Exception e) {\n-                if (errs == null)\n-                    errs = new StringBuffer();\n-                else\n-                    errs.append(\", \");\n-                errs.append(e.toString());\n-            }\n-        }\n-        String msg;\n-        if (errs != null)\n-            msg = errs.toString();\n-        else if (providerCount == 0)\n-            msg = _loc.get(\"no-providers\", \n-                ConfigurationProvider.class.getName()).getMessage();\n-        else\n-            msg = _loc.get(\"no-provider\", resource).getMessage();\n-        \n-        throw new MissingResourceException(msg,\n-            Configurations.class.getName(), resource);\n-    }\n-\n-    /**\n-     * Return a {@link ConfigurationProvider} that has parsed the given\n-     * file. Throws {@link MissingResourceException} if file does not exist.\n-     */\n-    public static ConfigurationProvider load(File file, ClassLoader loader) {\n-        if (file == null)\n-            return null;\n-\n-        String anchor = null;\n-        try {\n-            String path = file.getCanonicalPath();\n-            int idx = path.indexOf('#');\n-            if (idx != -1) {\n-                if (idx < path.length() - 1)\n-                    anchor = path.substring(idx + 1);\n-                path = path.substring(0, idx);\n-                if (path.length() == 0)\n-                    throw new MissingResourceException(_loc.get(\"anchor-only\",\n-                        file).getMessage(), Configurations.class.getName(), \n-                        file.toString());\n-                file = new File(path);\n-            }\n-        } catch (IOException ioe) {\n-            // ignore\n-        }\n-        return load(file, anchor, loader);\n-    }\n-\n-    /**\n-     * Return a {@link ConfigurationProvider} that has parsed the given\n-     * file. Throws {@link MissingResourceException} if file does not exist.\n-     */\n-    public static ConfigurationProvider load(File file, String anchor, \n-        ClassLoader loader) {\n-        if (file == null)\n-            return null;\n-\n-        if (loader == null)\n-            loader = Thread.currentThread().getContextClassLoader();\n-        Class[] impls = Services.getImplementorClasses\n-            (ConfigurationProvider.class, loader);\n-        ConfigurationProvider provider = null;\n-        StringBuffer errs = null;\n-        for (int i = 0; i < impls.length; i++) {\n-            provider = newProvider(impls[i]);\n-            try {\n-                if (provider != null && provider.load(file, anchor))\n-                    return provider;\n-            } catch (MissingResourceException mre) {\n-                throw mre;\n-            } catch (Exception e) {\n-                if (errs == null)\n-                    errs = new StringBuffer();\n-                else\n-                    errs.append(\", \");\n-                errs.append(e.toString());\n-            }\n-        }\n-        String msg = (errs == null) ? file.toString() : errs.toString();\n-        throw new MissingResourceException(msg,\n-            Configurations.class.getName(), file.toString());\n-    }\n-\n     /**\n      * Looks up the given name in JNDI. If the name is null, null is returned.\n      */"},{"sha":"807d6d390d20b110363343ed13946e21c8b6af52","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -68,6 +68,16 @@ public boolean load(File file, String anchor) throws Exception {\n         return false;\n     }\n \n+    /**\n+     * Loads only if the given map is non-null.\n+     * Always returns false.\n+     */\n+    public boolean load(String rsrc, String anchor, Map m) throws Exception {\n+        if (m != null)\n+            addProperties(m);\n+        return false;\n+    }\n+\n     public Map getProperties() {\n         return (_props == null) ? Collections.EMPTY_MAP : _props;\n     }"},{"sha":"b37018e74568c7be45e2e609efc2555ba3723c1a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.lib.conf;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+/**\n+ * Hooks for deriving products with additional functionality.\n+ * The specific implementation uses corresponding {@link ConfigurationProvider}\n+ * to locate and parse configuration information from global, default or\n+ * explictly-specified resources.\n+ * All implementations of this interface will have a chance to mutate\n+ * a {@link Configuration} both before and after the user-specified\n+ * configuration data is loaded. \n+ * The order in which the product derivations are evaluated is determined by the \n+ * specificity of the derivation type.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n+ */\n+public interface ProductDerivation {\n+\n+    public static final int TYPE_SPEC = 0;\n+    public static final int TYPE_PRODUCT = 100;\n+    public static final int TYPE_FEATURE = 1000;\n+\n+    /**\n+     * Return the type of derivation.\n+     */\n+    public int getType();\n+\n+    /**\n+     * Load globals via the returned ConfigurationProvider, or return null if \n+     * no globals is found.\n+     */\n+    public ConfigurationProvider loadGlobals(ClassLoader loader) \n+        throws Exception;\n+\n+    /**\n+     * Load defaults via the returned ConfigurationProvider, or return null if \n+     * no defaults is found.\n+     */\n+    public ConfigurationProvider loadDefaults(ClassLoader loader) \n+        throws Exception;\n+\n+    /**\n+     * Load the given given resource via the returned ConfigurationProvider, or \n+     * return null if it is not a resource this receiver understands. \n+     * The given class loader may be null.\n+     *\n+     * @param anchor optional named anchor within a multiple-configuration\n+     * resource\n+     */\n+    public ConfigurationProvider load(String resource, String anchor, \n+        ClassLoader loader) throws Exception;\n+\n+    /**\n+     * Load given file, or return null if it is not a file this receiver\n+     * understands.\n+     *\n+     * @param anchor optional named anchor within a multiple-configuration file\n+     */\n+    public ConfigurationProvider load(File file, String anchor) \n+        throws Exception;\n+    \n+    /**\n+     * Load given resource overriding with the given map <code>m</code>, or \n+     * return null if it is not a resource this receiver* understands.\n+     *\n+     * @param anchor optional named anchor within a multiple-configuration file\n+     * @param m optional properties to override the content of the resource.\n+     */\n+    public ConfigurationProvider load(String rsrc, String anchor, Map m) \n+        throws Exception;\n+\n+    \n+    /**\n+     * Provides the instance with a callback to mutate the initial properties\n+     * of the {@link ConfigurationProvider}. This is primarily to alter or\n+     * add properties that determine what type of configuration is constructed,\n+     * and therefore is typically used at runtime only.\n+     * @return true if given ConfigurationProvider has been mutated.\n+     */\n+    public boolean beforeConfigurationConstruct(ConfigurationProvider cp);\n+\n+    /**\n+     * Provides the instance with the opportunity to mutate\n+     * <code>conf</code> before the user configuration is applied.\n+     * @return true if given Configuration has been mutated.\n+     */\n+    public boolean beforeConfigurationLoad(Configuration conf);\n+\n+    /**\n+     * Called after the specification has been set.\n+     * @return true if given Configuration has been mutated.\n+     */\n+    public boolean afterSpecificationSet(Configuration conf);\n+}"},{"sha":"e430dd420e779e264017305fe209cfced8e396d3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"added","additions":258,"deletions":0,"changes":258,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -0,0 +1,258 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.lib.conf;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.MissingResourceException;\n+\n+import org.apache.openjpa.lib.util.JavaVersions;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n+import org.apache.openjpa.lib.util.Services;\n+\n+/**\n+ * Utilities for running product derivations.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ProductDerivations {\n+\n+    private static final ProductDerivation[] _derivations;\n+\n+    static {\n+        Class[] pdcls = Services.getImplementorClasses(ProductDerivation.class,\n+          ProductDerivation.class.getClassLoader());\n+        List derivations = new ArrayList(pdcls.length);\n+        for (int i = 0; i < pdcls.length; i++) {\n+            try {\n+                derivations.add(pdcls[i].newInstance());\n+            } catch (Throwable t) {\n+                // invalid service\n+                t.printStackTrace();\n+            }\n+        }\n+\n+        // must be at least one product derivation to define metadata factories,\n+        // etc. \n+        if (derivations.isEmpty()) {\n+            Localizer loc = Localizer.forPackage(ProductDerivations.class);\n+            throw new MissingResourceException(loc.get(\"no-product-derivations\",\n+                ProductDerivation.class.getName()).getMessage(),\n+                ProductDerivations.class.getName(), \"derivations\");\n+        }\n+\n+        Collections.sort(derivations, new ProductDerivationComparator());\n+        _derivations = (ProductDerivation[]) derivations.toArray\n+            (new ProductDerivation[derivations.size()]);\n+    }\n+\n+    /**\n+     * Apply {@link ProductDerivation#beforeConfigurationConstruct} callbacks\n+     * to the the given instance. Exceptions are swallowed.\n+     */\n+    public static void beforeConfigurationConstruct(ConfigurationProvider cp) {\n+        for (int i = 0; i < _derivations.length; i++) {\n+            try {\n+                boolean ret = _derivations[i].beforeConfigurationConstruct(cp);\n+            } catch (Exception e) {\n+                // can't log; no configuration yet\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Apply {@link ProductDerivation#beforeConfigurationLoad} callbacks\n+     * to the the given instance. Exceptions are swallowed.\n+     */\n+    public static void beforeConfigurationLoad(Configuration conf) {\n+        for (int i = 0; i < _derivations.length; i++) {\n+            try {\n+                boolean ret = _derivations[i].beforeConfigurationLoad(conf);\n+            } catch (Exception e) {\n+                // logging not configured yet\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Apply {@link ProductDerivation#afterSpecificationSet} callbacks\n+     * to the the given instance. Exceptions are swallowed.\n+     */\n+    public static void afterSpecificationSet(Configuration conf) {\n+        for (int i = 0; i < _derivations.length; i++) {\n+            try {\n+                boolean ret = _derivations[i].afterSpecificationSet(conf);\n+            } catch (Exception e) {\n+                // logging not configured yet\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Load the given given resource, or return false if it is not a resource\n+     * this provider understands. The given class loader may be null.\n+     *\n+     * @param anchor optional named anchor within a multiple-configuration\n+     * resource\n+     */\n+    public static ConfigurationProvider load(String resource, String anchor, \n+        ClassLoader loader) {\n+        if (resource == null || resource.length() == 0)\n+            return null;\n+        if (loader == null)\n+            loader = Thread.currentThread().getContextClassLoader();\n+        ConfigurationProvider provider = null;\n+        StringBuffer errs = null;\n+        for (int i = 0; i < _derivations.length; i++) {\n+            try {\n+                provider = _derivations[i].load(resource, anchor, loader);\n+                if (provider != null) {\n+                    return provider;\n+                }\n+            } catch (Throwable t) {\n+                errs = (errs == null) ? new StringBuffer() \n+                        : errs.append(\"\\r\\n\");\n+                errs.append(_derivations[i].getClass().getName() + \":\" + t);\n+            }\n+        }\n+        reportError(errs, resource);\n+        return null;\n+    }\n+\n+    /**\n+     * Load given file, or return false if it is not a file this provider\n+     * understands.\n+     *\n+     * @param anchor optional named anchor within a multiple-configuration file\n+     */\n+    public static ConfigurationProvider load(File file, String anchor, \n+        ClassLoader loader) {\n+        if (file == null)\n+            return null;\n+        if (loader == null)\n+            loader = Thread.currentThread().getContextClassLoader();\n+        ConfigurationProvider provider = null;\n+        StringBuffer errs = null;\n+        for (int i = 0; i < _derivations.length; i++) {\n+            try {\n+                provider = _derivations[i].load(file, anchor);\n+                if (provider != null) {\n+                    return provider;\n+                }\n+            } catch (Throwable t) {\n+                errs = (errs == null) ? new StringBuffer() \n+                        : errs.append(\"\\r\\n\");\n+                errs.append(_derivations[i].getClass().getName() + \":\" + t);\n+            }\n+        }\n+        reportError(errs, file.getAbsolutePath());\n+        return null;\n+    }\n+    \n+    public static ConfigurationProvider load(String rsrc, String anchor, \n+        Map m) {\n+        ConfigurationProvider provider = null;\n+        StringBuffer errs = null;\n+        for (int i = 0; i < _derivations.length; i++) {\n+            try {\n+                provider = _derivations[i].load(rsrc, anchor, m);\n+                if (provider != null) {\n+                    return provider;\n+                }\n+            } catch (Throwable t) {\n+                errs = (errs == null) ? new StringBuffer() \n+                        : errs.append(\"\\r\\n\");\n+                errs.append(_derivations[i].getClass().getName() + \":\" + t);\n+            }\n+        }\n+        reportError(errs, rsrc);\n+        return null;\n+    }\n+        \n+    public static ConfigurationProvider load(ClassLoader loader, \n+       boolean globals) {\n+        if (loader == null)\n+            loader = Thread.currentThread().getContextClassLoader();\n+        \n+        ConfigurationProvider provider = null;\n+        StringBuffer errs = null;\n+        String type = (globals) ? \"globals\" : \"defaults\";\n+        for (int i = 0; i < _derivations.length; i++) {\n+            try {\n+                provider = (globals) ? _derivations[i].loadGlobals(loader) \n+                        : _derivations[i].loadDefaults(loader);\n+                if (provider != null) {\n+                   return provider;\n+                }\n+            } catch (Throwable t) {\n+                errs = (errs == null) ? new StringBuffer() \n+                        : errs.append(\"\\r\\n\");\n+                errs.append(_derivations[i].getClass().getName() + \":\" + t);\n+            }\n+        }\n+        reportError(errs, type);\n+        return null;\n+    }\n+    \n+    private static void reportError(StringBuffer errs, String resource) {\n+        if (errs == null)\n+            return;\n+        throw new MissingResourceException(\n+                errs.toString(), ProductDerivations.class.getName(), resource);\n+    }\n+\n+    /**\n+     * Return a {@link ConfigurationProvider} that has parsed system defaults.\n+     */\n+    public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n+        return load(loader, false);\n+    }\n+\n+    /**\n+     * Return a {@link ConfigurationProvider} that has parsed system globals.\n+     */\n+    public static ConfigurationProvider loadGlobals(ClassLoader loader) {\n+        return load(loader, true);\n+    }\n+    \n+    /**\n+     * Compare {@link ProductDerivation}s.\n+     */\n+    private static class ProductDerivationComparator\n+        implements Comparator {\n+\n+        public int compare(Object o1, Object o2) {\n+            int type1 = ((ProductDerivation) o1).getType();\n+            int type2 = ((ProductDerivation) o2).getType();\n+            if (type1 != type2)\n+                return type1 - type2;\n+\n+            // arbitrary but consistent order\n+            return o1.getClass().getName().compareTo(o2.getClass().\n+                getName());\n+\t\t}\n+\t}\n+}\n+"},{"sha":"cb7498d2359a6621dbbcd48be511e9b6a4d80088","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.conf.test;\r\n+\r\n+import org.apache.openjpa.lib.conf.AbstractProductDerivation;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.ProductDerivation;\r\n+\r\n+/**\r\n+ * A Product Derivation to test loading of global and default configuration with\r\n+ * System settings. This provider uses \r\n+ * {@link ConfigurationTestConfigurationProvider} which reads its global from\r\n+ * a file specified by <code>\"openjpatest.properties\"</code> system property.\r\n+ *\r\n+ * @author Pinaki Poddar\r\n+ */\r\n+public class ConfigurationTestProductDerivation \r\n+    extends AbstractProductDerivation {\r\n+    \r\n+    public int getType() {\r\n+        return ProductDerivation.TYPE_PRODUCT;\r\n+    }\r\n+    \r\n+    public ConfigurationProvider newConfigurationProvider() {\r\n+        return new ConfigurationTestConfigurationProvider();\r\n+    }\r\n+    \r\n+}\r\n+\r"},{"sha":"0fbec559b1995b81c766fc7a606751de6dd8893a","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -18,20 +18,24 @@\n import java.util.MissingResourceException;\n import java.util.Properties;\n \n-import org.apache.openjpa.lib.conf.ConfigurationImpl;\n-import org.apache.openjpa.lib.conf.ObjectValue;\n-import org.apache.openjpa.lib.conf.PluginValue;\n-import org.apache.openjpa.lib.conf.StringValue;\n-import org.apache.openjpa.lib.conf.Value;\n+import org.apache.openjpa.lib.conf.*;\n import org.apache.openjpa.lib.test.AbstractTestCase;\n \n /**\n  * Tests the {@link ConfigurationImpl} type. This needs to be placed\n  * in a sub-package so that it can have its own localizer.properties\n  * properties, which are required for the bean descriptors used by the\n  * configuration framework {@link Value}.\n+ * \n+ * This test has been modified to test the same functionality of \n+ * ConfigurationProvider but now invoked via ProductDerivation.\n+ * \n+ * This test assumes a <code>\"test.properties\"</code> file available in\n+ * classpath and also system property <code>\"openjpatest.properties\"</code>\n+ * is set to <code>\"test.properties\"</code>.\n  *\n  * @author Abe White\n+ * @author Pinaki Poddar\n  */\n public class TestConfigurationImpl extends AbstractTestCase {\n "},{"sha":"902d0f8c4eea70b1d704ba6287a3509bcc0c9af1","filename":"openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","status":"removed","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","raw_url":"https://github.com/apache/openjpa/raw/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider?ref=7740c7842c018e58916f09ed174389c840ec0eef","patch":"@@ -1 +0,0 @@\n-org.apache.openjpa.lib.conf.test.ConfigurationTestConfigurationProvider"},{"sha":"0ea70eff7d71f19418bb4efce5939277e665b33a","filename":"openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -0,0 +1 @@\n+org.apache.openjpa.lib.conf.test.ConfigurationTestProductDerivation"},{"sha":"b9d2bc131564b9d8f03c983661693cd477297ea3","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":25,"deletions":16,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -16,9 +16,11 @@\n package org.apache.openjpa.persistence.jdbc;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.conf.ProductDerivation;\n+import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n+import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n+import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.PersistenceProductDerivation;\n@@ -29,21 +31,20 @@\n  * @author Abe White\n  * @nojavadoc\n  */\n-public class JDBCPersistenceProductDerivation\n-    implements ProductDerivation {\n-\n+public class JDBCPersistenceProductDerivation extends AbstractProductDerivation \n+    implements OpenJPAProductDerivation {\n+    \n     public int getType() {\n         return TYPE_SPEC_STORE;\n     }\n \n-    public void beforeConfigurationConstruct(ConfigurationProvider cp) {\n-    }\n-\n-    public void beforeConfigurationLoad(OpenJPAConfiguration c) {\n-        c.getStoreFacadeTypeRegistry().registerImplementation(FetchPlan.class, \n-            JDBCStoreManager.class, JDBCFetchPlanImpl.class);\n+    public boolean beforeConfigurationLoad(Configuration c) {\n+        if (c instanceof OpenJPAConfiguration) \n+        ((OpenJPAConfiguration)c).getStoreFacadeTypeRegistry().\n+            registerImplementation(FetchPlan.class, JDBCStoreManager.class, \n+            JDBCFetchPlanImpl.class);\n         if (!(c instanceof JDBCConfigurationImpl))\n-            return;\n+            return false;\n \n         JDBCConfigurationImpl conf = (JDBCConfigurationImpl) c;\n         String jpa = PersistenceProductDerivation.SPEC_JPA;\n@@ -63,16 +64,24 @@ public void beforeConfigurationLoad(OpenJPAConfiguration c) {\n             PersistenceMappingDefaults.class.getName());\n         conf.mappingDefaultsPlugin.setAlias(jpa,\n             PersistenceMappingDefaults.class.getName());\n+        return true;\n     }\n \n-    public void afterSpecificationSet(OpenJPAConfiguration c) {\n+    public boolean afterSpecificationSet(Configuration c) {\n         String jpa = PersistenceProductDerivation.SPEC_JPA;\n-        if (!(c instanceof JDBCConfigurationImpl)\n-            || !jpa.equals(c.getSpecification()))\n-            return;\n-\n+        if (!(c instanceof JDBCConfigurationImpl))\n+            return false;\n         JDBCConfigurationImpl conf = (JDBCConfigurationImpl) c;\n+        \n+         if (!jpa.equals(conf.getSpecification()))\n+            return false;\n+        \n         conf.mappingDefaultsPlugin.setDefault(jpa);\n         conf.mappingDefaultsPlugin.setString(jpa);\n+        return true;\n+    }\n+    \n+    public ConfigurationProvider newConfigurationProvider() {\n+        return null;\n     }\n }"},{"sha":"ec17ff434b661419ee550c62773d51fe5b15f0ff","filename":"openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","previous_filename":"openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.conf.ProductDerivation"},{"sha":"81bc69e42f3c840d395868986066b836984c0594","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -85,17 +85,22 @@ public boolean load(PersistenceUnitInfo pinfo)\n \n     /**\n      * Load configuration from the given persistence unit with the specified\n-     * user properties.\n+     * user properties in <code>m</code>.\n+     * Checks if this receiver's PersistenceProvider matches with the \n+     * PersistenceProvider specified in the given PersistenceUnitInfo.\n+     * @return false if PersistenceUnitInfo is null.\n+     * false if this receiver's PersistenceProvider does not matche with the \n+     * PersistenceProvider specified in the given PersistenceUnitInfo. \n      */\n     public boolean load(PersistenceUnitInfo pinfo, Map m)\n         throws IOException {\n         if (pinfo == null)\n             return false;\n         String providerName = pinfo.getPersistenceProviderClassName();\n         if (!StringUtils.isEmpty(providerName)\n-            && !getPersistenceProviderName().equals(providerName))\n+            && !getPersistenceProviderName().equals(providerName)) {\n             return false;\n-        \n+        }\n         addProperties(PersistenceUnitInfoImpl.toOpenJPAProperties(pinfo));\n         if (m != null)\n             addProperties(m);\n@@ -244,14 +249,14 @@ private PersistenceUnitInfo findUnit(List<PersistenceUnitInfo> pinfos,\n     @Override\n     public boolean load(String rsrc, String anchor, ClassLoader loader)\n         throws IOException {\n-        if (!rsrc.endsWith(\".xml\"))\n+        if (rsrc != null && !rsrc.endsWith(\".xml\"))\n             return false;\n         return load(rsrc, anchor, null, loader, true) == Boolean.TRUE;\n     }\n \n     @Override\n     public boolean load(File file, String anchor) {\n-        if (!file.getName().endsWith(\".xml\"))\n+        if (file != null && !file.getName().endsWith(\".xml\"))\n             return false;\n \n         try {"},{"sha":"6337e409b907df2b7c28238f0d59b941994c8047","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -61,7 +61,7 @@\n     /**\n      * Constructor. Delegate must be provided on construction.\n      */\n-    protected EntityManagerFactoryImpl(BrokerFactory factory) {\n+    public EntityManagerFactoryImpl(BrokerFactory factory) {\n         _factory = new DelegatingBrokerFactory(factory,\n             PersistenceExceptions.TRANSLATOR);\n     }\n@@ -175,7 +175,7 @@ else if (obj != null) {\n         // regardless of PersistenceContextType\n         broker.setAutoDetach(AutoDetach.DETACH_CLOSE);\n         broker.setDetachedNew(false);\n-        OpenJPAEntityManager em = OpenJPAPersistence.toEntityManager(broker);\n+        OpenJPAEntityManager em = new EntityManagerImpl(this, broker);\n \n         // allow setting of other bean properties of EM\n         List<RuntimeException> errs = null;"},{"sha":"182a5e6941c54828c175c4e662c475d96dbf3ba6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import org.apache.openjpa.abstractstore.AbstractStoreBrokerFactory;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.PluginValue;\n+\n+/**\n+ * Value type used to represent the {@link EntityManagerFactory}. \n+ *\n+ * @nojavadoc\n+ */\n+public class EntityManagerFactoryValue\n+    extends PluginValue {\n+\n+    public static final String KEY = \"EntityManagerFactory\";\n+\n+    private static final List _prefixes = new ArrayList(2);\n+    static {\n+        _prefixes.add(\"openjpa\");\n+    }\n+    \n+    /**\n+     * Add <code>prefix</code> to the list of prefixes under which configuration\n+     * properties may be scoped.\n+     */\n+    public static void addPropertyPrefix(String prefix) {\n+        if (!_prefixes.contains(prefix))\n+            _prefixes.add(prefix);\n+    }\n+    \n+    /**\n+     * Extract the value of this property if set in the given provider.\n+     */\n+    public static Object get(ConfigurationProvider cp) {\n+        Map props = cp.getProperties();\n+        Object bf;\n+        for (int i = 0; i < _prefixes.size (); i++) {\n+            bf = props.get(_prefixes.get(i) + \".\" + KEY);\n+            if (bf != null)\n+                return  bf;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Return the key to use for this property.\n+     */\n+    public static String getKey(ConfigurationProvider cp) {\n+        return _prefixes.get(0) + \".\" + KEY;\n+    }\n+\n+    public EntityManagerFactoryValue() {\n+        super(KEY, false);\n+    }\n+}"},{"sha":"899bf0d8a4df42153398258a409414f60fd5840c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","status":"modified","additions":60,"deletions":17,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -15,6 +15,9 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -28,24 +31,17 @@\n import javax.persistence.Query;\n import javax.rmi.PortableRemoteObject;\n \n+import org.apache.openjpa.conf.BrokerFactoryValue;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.Bootstrap;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.util.ByteId;\n-import org.apache.openjpa.util.CharId;\n-import org.apache.openjpa.util.Id;\n-import org.apache.openjpa.util.ImplHelper;\n-import org.apache.openjpa.util.IntId;\n-import org.apache.openjpa.util.LongId;\n-import org.apache.openjpa.util.ObjectId;\n-import org.apache.openjpa.util.OpenJPAId;\n-import org.apache.openjpa.util.ShortId;\n-import org.apache.openjpa.util.StringId;\n+import org.apache.openjpa.util.*;\n \n /**\n  * Static helper method for JPA users, including switching\n@@ -66,20 +62,26 @@\n     private static Localizer _loc =\n         Localizer.forPackage(OpenJPAPersistence.class);\n \n+    \n+    public static OpenJPAEntityManagerFactory toEntityManagerFactory\n+       (BrokerFactory factory) {\n+        return toEntityManagerFactory(factory, null);\n+    }\n+    \n     /**\n      * Return an entity manager factory facade to the given broker factory.\n      */\n     public static OpenJPAEntityManagerFactory toEntityManagerFactory\n-        (BrokerFactory factory) {\n+        (BrokerFactory factory, ConfigurationProvider cp) {\n         if (factory == null)\n             return null;\n-\n         factory.lock();\n+        \n         try {\n             OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\n                 factory.getUserObject(EMF_KEY);\n             if (emf == null) {\n-                emf = newEntityManagerFactory(factory);\n+                emf = newEntityManagerFactory(factory, cp, null);\n                 factory.putUserObject(EMF_KEY, emf);\n             }\n             return emf;\n@@ -89,10 +91,6 @@\n             factory.unlock();\n         }\n     }\n-\n-    protected static OpenJPAEntityManagerFactory newEntityManagerFactory(BrokerFactory factory) {\n-\t\treturn new EntityManagerFactoryImpl(factory);\n-\t}\n     \n     /**\n      * Return the underlying broker factory for the given persistence manager\n@@ -443,4 +441,49 @@ public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n \t\t\treturn String.class;\n \t\treturn oidClass;\n \t}\n+    \n+    private static OpenJPAEntityManagerFactory newEntityManagerFactory (\n+        BrokerFactory brokerFactory, ConfigurationProvider conf, \n+        ClassLoader loader) {\n+            if (conf == null)\n+                conf = new MapConfigurationProvider();\n+            ProductDerivations.beforeConfigurationConstruct(conf);\n+\n+            Class cls = getFactoryClass(conf, loader);\n+            Constructor ctr;\n+            try {\n+                ctr = cls.getConstructor(BrokerFactory.class); \n+                return (OpenJPAEntityManagerFactory)ctr\n+                   .newInstance(brokerFactory);\n+            } catch (Exception e) {\n+                throw PersistenceExceptions.toPersistenceException(e);\n+            }\n+        }\n+\n+    /**\n+     * Instantiate the factory class designated in properties.\n+     */\n+    private static Class getFactoryClass(ConfigurationProvider conf,\n+        ClassLoader loader) {\n+        if (loader == null)\n+            loader = Thread.currentThread().getContextClassLoader();\n+\n+        Object cls = EntityManagerFactoryValue.get(conf);\n+        if (cls instanceof Class)\n+            return (Class) cls;\n+\n+        EntityManagerFactoryValue value = new EntityManagerFactoryValue();\n+        value.setString((String) cls);\n+        String clsName = value.getClassName();\n+        if (clsName == null)\n+            throw new UserException(_loc.get(\"no-emf\", \n+                conf.getProperties())).setFatal(true);\n+\n+        try {\n+            return Class.forName(clsName, true, loader);\n+        } catch (Exception e) {\n+            throw new UserException(_loc.get(\"bad-emf-class\",\n+                clsName), e).setFatal(true);\n+        }\n+    }\n }"},{"sha":"efa52f12f7fb98ed587bfd64268ba05f2c5c8af1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":49,"deletions":12,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -15,19 +15,25 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.util.Map;\n+\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.conf.ProductDerivation;\n+import org.apache.openjpa.conf.OpenJPAProductDerivation;\n+import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n+import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.PluginValue;\n \n /**\n  * Sets JPA specification defaults.\n  *\n  * @author Abe White\n  * @nojavadoc\n  */\n-public class PersistenceProductDerivation\n-    implements ProductDerivation {\n+public class PersistenceProductDerivation \n+    extends AbstractProductDerivation\n+    implements OpenJPAProductDerivation {\n \n     public static final String SPEC_JPA = \"jpa\";\n     public static final String ALIAS_EJB = \"ejb\";\n@@ -36,31 +42,62 @@ public int getType() {\n         return TYPE_SPEC;\n     }\n \n-    public void beforeConfigurationConstruct(ConfigurationProvider cp) {\n+    @Override\n+    public ConfigurationProvider newConfigurationProvider() {\n+        return new ConfigurationProviderImpl();\n     }\n \n-    public void beforeConfigurationLoad(OpenJPAConfiguration c) {\n+    @Override\n+    public ConfigurationProvider load(String rsrc, String anchor,\n+            ClassLoader loader)  throws Exception {\n+        if (rsrc != null && !rsrc.endsWith(\".xml\"))\n+            return null;\n+        return super.load(rsrc, anchor, loader);\n+    }\n+    \n+    public ConfigurationProvider load(String rsrc, String anchor,\n+            Map map) throws Exception {\n+        if (rsrc != null && !rsrc.endsWith(\".xml\"))\n+            return null;\n+        return super.load(rsrc, anchor, map);\n+    }\n+    \n+    public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n+        if (EntityManagerFactoryValue.get(cp) == null) {\n+            cp.addProperty(EntityManagerFactoryValue.getKey(cp),\n+                EntityManagerFactoryImpl.class.getName());\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    public boolean beforeConfigurationLoad(Configuration c) {\n         if (!(c instanceof OpenJPAConfigurationImpl))\n-            return;\n-\n+            return false;\n+        \n         OpenJPAConfigurationImpl conf = (OpenJPAConfigurationImpl) c;\n         conf.metaFactoryPlugin.setAlias(ALIAS_EJB,\n             PersistenceMetaDataFactory.class.getName());\n         conf.metaFactoryPlugin.setAlias(SPEC_JPA,\n             PersistenceMetaDataFactory.class.getName());\n+        \n+        PluginValue emfPlugin = new EntityManagerFactoryValue();\n+        conf.addValue(emfPlugin);\n+        return true;\n     }\n \n-    public void afterSpecificationSet(OpenJPAConfiguration c) {\n-        if (!(c instanceof OpenJPAConfigurationImpl)\n-            || !SPEC_JPA.equals(c.getSpecification()))\n-            return;\n-\n+    public boolean afterSpecificationSet(Configuration c) {\n+      if (!(c instanceof OpenJPAConfigurationImpl)\n+         || !SPEC_JPA.equals(((OpenJPAConfiguration)c).getSpecification()))\n+          return false;\n+ \n         OpenJPAConfigurationImpl conf = (OpenJPAConfigurationImpl) c;\n         conf.metaFactoryPlugin.setDefault(SPEC_JPA);\n         conf.metaFactoryPlugin.setString(SPEC_JPA);\n         conf.lockManagerPlugin.setDefault(\"version\");\n         conf.lockManagerPlugin.setString(\"version\");\n         conf.nontransactionalWrite.setDefault(\"true\");\n         conf.nontransactionalWrite.set(true);\n+        return true;\n     }\n }"},{"sha":"5b5c6aa5966d5268221956756e2c60125613f50a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderExtension.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderExtension.java","raw_url":"https://github.com/apache/openjpa/raw/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderExtension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderExtension.java?ref=7740c7842c018e58916f09ed174389c840ec0eef","patch":"@@ -1,25 +0,0 @@\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-\r\n-/**\r\n- * Allows the Persistence Provider to be supply their own Configuration \r\n- * Provider and EntityManagerFactory.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * @since 0.4.1\r\n- * @nojavadoc\r\n- */\r\n-public interface PersistenceProviderExtension {\r\n-\r\n-\t/**\r\n-\t * Gets the Configuration Provider implementation for this receiver.\r\n-\t */\r\n-\tpublic ConfigurationProviderImpl newConfigurationProviderImpl();\r\n-\t\r\n-\t/**\r\n-\t * Gets the EntityManagerFactory given a Broker Factory.\r\n-\t */\r\n-\tpublic OpenJPAEntityManagerFactory toEntityManagerFactory(BrokerFactory \r\n-\t\tfactory);\r\n-}\r"},{"sha":"dba059031e3aa133e29257382f8f9aaf3fea3db4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -35,6 +35,8 @@\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.ProductDerivation;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n \n@@ -46,7 +48,7 @@\n  * @see Persistence#createEntityManagerFactory(String,Map)\n  */\n public class PersistenceProviderImpl\n-    implements PersistenceProvider, PersistenceProviderExtension {\n+    implements PersistenceProvider {\n \n     static final String CLASS_TRANSFORMER_OPTIONS =\n         \"openjpa.ClassTransformerOptions\";\n@@ -63,11 +65,13 @@\n      */\n     public EntityManagerFactory createEntityManagerFactory(String name,\n         String resource, Map m) {\n-        ConfigurationProviderImpl cp = newConfigurationProviderImpl();\n         try {\n-            if (cp.load(resource, name, m))\n-            \treturn toEntityManagerFactory(\n-            \t\tBootstrap.newBrokerFactory(cp, cp.getClassLoader()));\n+            ConfigurationProvider cp = ProductDerivations.load(resource, name, \n+                 m);\n+            if (cp != null) {\n+                BrokerFactory factory = Bootstrap.newBrokerFactory(cp, null);\n+            \treturn OpenJPAPersistence.toEntityManagerFactory(factory, cp);\n+            }\n             else\n                  return null;\n         } catch (Exception e) {\n@@ -81,11 +85,13 @@ public EntityManagerFactory createEntityManagerFactory(String name, Map m) {\n \n     public EntityManagerFactory createContainerEntityManagerFactory(\n         PersistenceUnitInfo pui, Map map) {\n-        ConfigurationProviderImpl cp = newConfigurationProviderImpl();\n+        ConfigurationProviderImpl cp = newConfigurationProvider();\n         try {\n             if (cp.load(pui, map)) {\n-                OpenJPAEntityManagerFactory emf = toEntityManagerFactory(\n-                        Bootstrap.newBrokerFactory(cp, cp.getClassLoader()));\n+                BrokerFactory factory = Bootstrap.newBrokerFactory(cp, \n+                     cp.getClassLoader());\n+                OpenJPAEntityManagerFactory emf = \n+                    OpenJPAPersistence.toEntityManagerFactory(factory);\n                 Properties p = pui.getProperties();\n                 String ctOpts = null;\n                 if (p != null)\n@@ -101,14 +107,14 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n         }\n     }\n     \n-    public ConfigurationProviderImpl newConfigurationProviderImpl() {\n-    \treturn new ConfigurationProviderImpl();\n-    }\n-    \n-    public OpenJPAEntityManagerFactory toEntityManagerFactory(BrokerFactory factory) {\n-    \treturn OpenJPAPersistence.toEntityManagerFactory(factory);\n+    /**\n+     * Gets the configuration provider to locate and load configuration data.\n+     * An implementation is returned rather than the interface.\n+      */\n+    protected ConfigurationProviderImpl newConfigurationProvider() {\n+        return new ConfigurationProviderImpl();\n     }\n-    \n+            \n     /**\n      * Java EE 5 class transformer.\n      */"},{"sha":"70bc41bb6e241401186cd09caab3a7ae8406e47c","filename":"openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","status":"removed","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","raw_url":"https://github.com/apache/openjpa/raw/7740c7842c018e58916f09ed174389c840ec0eef/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider?ref=7740c7842c018e58916f09ed174389c840ec0eef","patch":"@@ -1,2 +0,0 @@\n-org.apache.openjpa.persistence.ConfigurationProviderImpl\n-"},{"sha":"fe738af6a0903e2a7cbd50d085d0aa602ed64e2f","filename":"openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","previous_filename":"openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.conf.ProductDerivation"},{"sha":"7ec58f6d00f0b326efd3748748018b7edf3fd3ef","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/2c31d9c6df811638f27bd7dac8608766a4a499e1/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java?ref=2c31d9c6df811638f27bd7dac8608766a4a499e1","patch":"@@ -16,9 +16,9 @@\n package org.apache.openjpa.xmlstore;\n \n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.conf.ProductDerivations;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n \n /**\n  * Configuration implementation for the XML file store. Each unique"}]}

