{"sha":"2c748d1aea58c480a558efcfe1bf38f7f8787bfb","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjNzQ4ZDFhZWE1OGM0ODBhNTU4ZWZjZmUxYmYzOGY3Zjg3ODdiZmI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-12T21:11:56Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-12T21:11:56Z"},"message":"OPENJPA-360 FOR UPDATE clause incorrectly generated, remove transient variable declaration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@575080 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"976be31cd0eb8ca4e125832c32e7a0451d9fcf63","url":"https://api.github.com/repos/apache/openjpa/git/trees/976be31cd0eb8ca4e125832c32e7a0451d9fcf63"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2c748d1aea58c480a558efcfe1bf38f7f8787bfb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2c748d1aea58c480a558efcfe1bf38f7f8787bfb","html_url":"https://github.com/apache/openjpa/commit/2c748d1aea58c480a558efcfe1bf38f7f8787bfb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2c748d1aea58c480a558efcfe1bf38f7f8787bfb/comments","author":null,"committer":null,"parents":[{"sha":"73513a2af5c5733ce1d87ae737e68f97a56e108e","url":"https://api.github.com/repos/apache/openjpa/commits/73513a2af5c5733ce1d87ae737e68f97a56e108e","html_url":"https://github.com/apache/openjpa/commit/73513a2af5c5733ce1d87ae737e68f97a56e108e"}],"stats":{"total":31,"additions":19,"deletions":12},"files":[{"sha":"096079c4dd1a5e2c1e3f9c822528e6530d8b2be3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2c748d1aea58c480a558efcfe1bf38f7f8787bfb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2c748d1aea58c480a558efcfe1bf38f7f8787bfb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=2c748d1aea58c480a558efcfe1bf38f7f8787bfb","patch":"@@ -286,12 +286,12 @@ else if (isDB2UDBV82OrLater())\n      * updateClause and isolationLevel hints\r\n      */\r\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\r\n-        boolean isForUpdate) {\r\n+        boolean isForUpdate, Select sel) {\r\n         int isolationLevel;\r\n         // For db2UDBV81OrEarlier and db2ISeriesV5R3OrEarlier:\r\n         // \"optimize for\" clause appears before \"for update\" clause.\r\n         StringBuffer forUpdateString = new StringBuffer(\r\n-            getOptimizeClause(fetch));\r\n+            getOptimizeClause(sel));\r\n         try {\r\n             // Determine the isolationLevel; the fetch\r\n             // configuration data overrides the persistence.xml value\r\n@@ -437,7 +437,7 @@ private void getProductVersionMajorMinor() {\n         }\r\n     }\r\n \r\n-    protected String getOptimizeClause(JDBCFetchConfiguration fetch) {\r\n+    protected String getOptimizeClause(Select sel) {\r\n         if (sel != null && sel.getExpectedResultCount() > 0) {\r\n             StringBuffer buf = new StringBuffer();\r\n             buf.append(\" \").append(optimizeClause).append(\" \")\r"},{"sha":"3be26296583d6271c5fd72cd12256a3c24415526","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/2c748d1aea58c480a558efcfe1bf38f7f8787bfb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2c748d1aea58c480a558efcfe1bf38f7f8787bfb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=2c748d1aea58c480a558efcfe1bf38f7f8787bfb","patch":"@@ -58,7 +58,6 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.HashMap;\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -68,8 +67,6 @@\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n import org.apache.openjpa.jdbc.kernel.exps.ExpState;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n-import org.apache.openjpa.jdbc.kernel.exps.Lit;\n-import org.apache.openjpa.jdbc.kernel.exps.Param;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -86,7 +83,6 @@\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n@@ -319,7 +315,6 @@\n     private Method _setBytes = null;\n     private Method _setString = null;\n     private Method _setCharStream = null;\n-    protected transient Select sel = null;\n \n     public DBDictionary() {\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\n@@ -1983,7 +1978,6 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n      */\n     public SQLBuffer toSelect(Select sel, boolean forUpdate,\n         JDBCFetchConfiguration fetch) {\n-        this.sel = sel;\n         sel.addJoinClassConditions();\n         boolean update = forUpdate && sel.getFromSelect() == null;\n         SQLBuffer select = getSelects(sel, false, update);\n@@ -1998,7 +1992,7 @@ public SQLBuffer toSelect(Select sel, boolean forUpdate,\n         SQLBuffer where = getWhere(sel, update);\n         return toSelect(select, fetch, from, where, sel.getGrouping(),\n             sel.getHaving(), ordering, sel.isDistinct(), forUpdate,\n-            sel.getStartIndex(), sel.getEndIndex());\n+            sel.getStartIndex(), sel.getEndIndex(), sel);\n     }\n \n     /**\n@@ -2186,15 +2180,28 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n         boolean distinct, boolean forUpdate, long start, long end) {\n         return toOperation(getSelectOperation(fetch), selects, from, where,\n             group, having, order, distinct, start, end,\n-            getForUpdateClause(fetch, forUpdate));\n+            getForUpdateClause(fetch, forUpdate, null));\n+    }\n+\n+    /**\n+     * Combine the given components into a SELECT statement.\n+     */\n+    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group,\n+        SQLBuffer having, SQLBuffer order,\n+        boolean distinct, boolean forUpdate, long start, long end\n+        , Select sel) {\n+        return toOperation(getSelectOperation(fetch), selects, from, where,\n+            group, having, order, distinct, start, end,\n+            getForUpdateClause(fetch, forUpdate, sel));\n     }\n \n     /**\n      * Get the update clause for the query based on the\n      * updateClause and isolationLevel hints\n      */\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n-        boolean isForUpdate) {\n+        boolean isForUpdate, Select sel) {\n         if (fetch != null && fetch.getIsolation() != -1) {\n             throw new InvalidStateException(_loc.get(\n                 \"isolation-level-config-not-supported\", getClass().getName()));"}]}

