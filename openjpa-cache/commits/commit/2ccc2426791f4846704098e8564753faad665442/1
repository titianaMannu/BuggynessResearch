{"sha":"2ccc2426791f4846704098e8564753faad665442","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjY2MyNDI2NzkxZjQ4NDY3MDQwOThlODU2NDc1M2ZhYWQ2NjU0NDI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-16T23:27:04Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-16T23:27:04Z"},"message":"When a relation mapping uses the expected class of the related type as part of\nits join criteria (in addition to the standard foreign key join), make sure\ndiscriminator conditions are appended to the WHERE SQL not only when loading\nthe relation, but also when traversing it in queries.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@432067 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46879fbe027488f66097441e417f8e143221e83e","url":"https://api.github.com/repos/apache/openjpa/git/trees/46879fbe027488f66097441e417f8e143221e83e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ccc2426791f4846704098e8564753faad665442","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ccc2426791f4846704098e8564753faad665442","html_url":"https://github.com/apache/openjpa/commit/2ccc2426791f4846704098e8564753faad665442","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ccc2426791f4846704098e8564753faad665442/comments","author":null,"committer":null,"parents":[{"sha":"c8af68ac7db71fb2fd8a3829da4df64050ba6208","url":"https://api.github.com/repos/apache/openjpa/commits/c8af68ac7db71fb2fd8a3829da4df64050ba6208","html_url":"https://github.com/apache/openjpa/commit/c8af68ac7db71fb2fd8a3829da4df64050ba6208"}],"stats":{"total":409,"additions":221,"deletions":188},"files":[{"sha":"3321aca956052826b0a423fb80163c83b54e50ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -93,14 +93,4 @@ public Object find(Object oid, ValueMapping vm,\n      * This is usually done automatically.\n      */\n     public void loadSubclasses(ClassMapping mapping);\n-\n-    /**\n-     * Add WHERE conditions to the given select limiting the returned results\n-     * to the given mapping type, possibly including subclasses.\n-     *\n-     * @return true if the mapping was joined down to its base class\n-     * in order to add the conditions\n-     */\n-    public boolean addClassConditions(Select sel, ClassMapping mapping,\n-        boolean subs, Joins joins);\n }"},{"sha":"aa49abe3599fa33b06367590c599e2fea0a4b1ad","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":4,"deletions":37,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -862,9 +862,11 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n         // add class conditions so that they're cloned for any batched selects\n         boolean joinedSupers = false;\n         if ((sm == null || sm.getPCState() == PCState.TRANSIENT)\n-            && (subs == sel.SUBS_JOINABLE || subs == sel.SUBS_NONE))\n-            joinedSupers = addClassConditions(sel, mapping,\n+            && (subs == sel.SUBS_JOINABLE || subs == sel.SUBS_NONE)) {\n+            loadSubclasses(mapping); \n+            joinedSupers = mapping.getDiscriminator().addClassConditions(sel,\n                 subs == sel.SUBS_JOINABLE, null);\n+        }\n \n         // create all our eager selects so that those fields are reserved\n         // and cannot be reused during the actual eager select process,\n@@ -1190,41 +1192,6 @@ public void loadSubclasses(ClassMapping mapping) {\n         }\n     }\n \n-    /**\n-     * Add WHERE conditions to the given select limiting the returned results\n-     * to the given mapping type, possibly including subclasses.\n-     *\n-     * @return true if the mapping was joined down to its base class\n-     * in order to add the conditions\n-     */\n-    public boolean addClassConditions(Select sel, ClassMapping mapping,\n-        boolean subs, Joins joins) {\n-        loadSubclasses(mapping);\n-        if (mapping.getJoinablePCSuperclassMapping() == null\n-            && mapping.getJoinablePCSubclassMappings().length == 0)\n-            return false;\n-\n-        // join down to base class where the conditions will be added\n-        ClassMapping from = mapping;\n-        ClassMapping sup = mapping.getJoinablePCSuperclassMapping();\n-        for (; sup != null; from = sup, sup = from\n-            .getJoinablePCSuperclassMapping()) {\n-            if (from.getTable() != sup.getTable()) {\n-                if (joins == null)\n-                    joins = sel.newJoins();\n-                joins = from.joinSuperclass(joins, false);\n-            }\n-        }\n-\n-        Discriminator dsc = mapping.getDiscriminator();\n-        SQLBuffer buf = dsc.getClassConditions(this, sel, joins, mapping, subs);\n-        if (buf != null) {\n-            sel.where(buf, joins);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     /**\n      * Make the statement a candidate for cancellation.\n      */"},{"sha":"bab8efb41044ace95b858706e3eb61f7e690fa2b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -42,7 +42,7 @@\n import serp.util.Numbers;\n import serp.util.Strings;\n \n-////////////////////////////////////////////////////////////\n+///////////////////////////////////////////////////////////\n // NOTE: Do not change property names; see SequenceMetaData\n // and SequenceMapping for standard property names.\n ////////////////////////////////////////////////////////////\n@@ -270,15 +270,9 @@ private long getSequence(Connection conn)\n         } finally {\n             // clean up our resources\n             if (rs != null)\n-                try {\n-                    rs.close();\n-                } catch (SQLException se) {\n-                }\n+                try { rs.close(); } catch (SQLException se) {}\n             if (stmnt != null)\n-                try {\n-                    stmnt.close();\n-                } catch (SQLException se) {\n-                }\n+                try { stmnt.close(); } catch (SQLException se) {}\n         }\n     }\n \n@@ -357,10 +351,7 @@ else if (ACTION_GET.equals(action)) {\n                 long cur = seq.getSequence(conn);\n                 System.out.println(cur);\n             } finally {\n-                try {\n-                    conn.close();\n-                } catch (SQLException se) {\n-                }\n+                try { conn.close(); } catch (SQLException se) {}\n             }\n         } else\n             return false;"},{"sha":"1b8d780c536b38cb48c8aa104364fe2433150841","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -22,8 +22,6 @@\n \n /**\n  * Absolute value.\n- *\n- * @author Abe White\n  */\n class Abs\n     extends UnaryOp {\n@@ -36,14 +34,8 @@ public Abs(Val val) {\n     }\n \n     protected Class getType(Class c) {\n-        Class wrap = Filters.wrap(c);\n-        if (wrap == Integer.class\n-            || wrap == Float.class\n-            || wrap == Double.class\n-            || wrap == Long.class\n-            || wrap == BigDecimal.class\n-            || wrap == BigInteger.class)\n-            return c;\n+        if (c == Long.class || c == long.class)\n+            return long.class;\n         return int.class;\n     }\n "},{"sha":"19180720d74c227bb09d0b77eeb308e5d6aee1ee","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -123,8 +123,8 @@ public void appendTo(SQLBuffer sql, Select sel, JDBCStore store,\n                 sql.append(\"1 <> 1\");\n         } else {\n             store.loadSubclasses(_dsc.getClassMapping());\n-            SQLBuffer buf = _dsc.getClassConditions(store, sel, _joins,\n-                _mapping, true);\n+            SQLBuffer buf = _dsc.getClassConditions(sel, _joins, _mapping, \n+                true);\n             if (buf == null)\n                 sql.append(\"1 = 1\");\n             else"},{"sha":"9a6d180b5d93f6238286398deb78aa34828b3ef9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -338,8 +338,10 @@ public void select(JDBCStore store, ClassMapping mapping,\n         // add conditions limiting the projections to the proper classes; if\n         // this isn't a projection then they will already be added\n         if (exps.projections.length > 0) {\n+            store.loadSubclasses(mapping);\n             Select indSel = (inner == null) ? sel : inner;\n-            store.addClassConditions(indSel, mapping, subclasses, joins);\n+            mapping.getDiscriminator().addClassConditions(indSel, subclasses, \n+                joins);\n         }\n     }\n }"},{"sha":"c2614d18b43aac4d4119611d60c34dbb3249c19f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","status":"modified","additions":32,"deletions":4,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -289,6 +289,35 @@ public void setSubclassesLoaded(boolean loaded) {\n         _subsLoaded = loaded;\n     }\n \n+    /**\n+     * Add WHERE conditions to the given select limiting the returned results\n+     * to our mapping type, possibly including subclasses.\n+     */\n+    public boolean addClassConditions(Select sel, boolean subs, Joins joins) {\n+        if (_mapping.getJoinablePCSuperclassMapping() == null\n+            && _mapping.getJoinablePCSubclassMappings().length == 0)\n+            return false;\n+\n+        // join down to base class where conditions will be added\n+        ClassMapping from = _mapping;\n+        ClassMapping sup = _mapping.getJoinablePCSuperclassMapping();\n+        for (; sup != null; from = sup, sup = from\n+            .getJoinablePCSuperclassMapping()) {\n+            if (from.getTable() != sup.getTable()) {\n+                if (joins == null)\n+                    joins = sel.newJoins();\n+                joins = from.joinSuperclass(joins, false);\n+            }\n+        }\n+\n+        SQLBuffer buf = getClassConditions(sel, joins, _mapping, subs);\n+        if (buf != null) {\n+            sel.where(buf, joins);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     ////////////////////////////////////////\n     // DiscriminatorStrategy implementation\n     ////////////////////////////////////////\n@@ -365,10 +394,9 @@ public Class getClass(JDBCStore store, ClassMapping base, Result result)\n         return assertStrategy().getClass(store, base, result);\n     }\n \n-    public SQLBuffer getClassConditions(JDBCStore store, Select sel,\n-        Joins joins, ClassMapping base, boolean subs) {\n-        return assertStrategy().getClassConditions(store, sel, joins,\n-            base, subs);\n+    public SQLBuffer getClassConditions(Select sel, Joins joins, \n+        ClassMapping base, boolean subs) {\n+        return assertStrategy().getClassConditions(sel, joins, base, subs);\n     }\n \n     private DiscriminatorStrategy assertStrategy() {"},{"sha":"6729743ea7bb39114abc228ef994cdd6e289b8cc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorStrategy.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -64,6 +64,6 @@ public Class getClass(JDBCStore store, ClassMapping base, Result result)\n      * no conditions needed. The select and joins instances are supplied\n      * in order to get column aliases.\n      */\n-    public SQLBuffer getClassConditions(JDBCStore store, Select sel,\n-        Joins joins, ClassMapping base, boolean subs);\n+    public SQLBuffer getClassConditions(Select sel, Joins joins, \n+        ClassMapping base, boolean subs);\n }"},{"sha":"ef869280ab4708e22229e955b8a679aa69e800d4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMapping.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -189,10 +189,10 @@ public void whereForeignKey(Row row, OpenJPAStateManager rel)\n     public ClassMapping[] getIndependentTypeMappings();\n \n     /**\n-     * Return the {@link org.apache.openjpa.sql.Select} subclasses constant for loading\n-     * this relation, based on how the related type is mapped, whether this\n-     * relation is polymorphic, and whether it is configured to use class\n-     * criteria.\n+     * Return the {@link org.apache.openjpa.sql.Select} subclasses constant \n+     * for loading this relation, based on how the related type is mapped, \n+     * whether this relation is polymorphic, and whether it is configured to \n+     * use class criteria.\n      */\n     public int getSelectSubclasses();\n "},{"sha":"d294ae945126cc635cde525899029d2831d6bb3b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractDiscriminatorStrategy.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -82,8 +82,8 @@ public Class getClass(JDBCStore store, ClassMapping base, Result result)\n         return base.getDescribedType();\n     }\n \n-    public SQLBuffer getClassConditions(JDBCStore store, Select sel,\n-        Joins joins, ClassMapping base, boolean subs) {\n+    public SQLBuffer getClassConditions(Select sel, Joins joins, \n+        ClassMapping base, boolean subs) {\n         return null;\n     }\n }"},{"sha":"4ad3277261af6157717fb861b6dcd05f01e9afb8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/InValueDiscriminatorStrategy.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -113,8 +113,8 @@ public Class getClass(JDBCStore store, ClassMapping base, Result res)\n         return getClass(cls, store);\n     }\n \n-    public SQLBuffer getClassConditions(JDBCStore store, Select sel,\n-        Joins joins, ClassMapping base, boolean subclasses) {\n+    public SQLBuffer getClassConditions(Select sel, Joins joins, \n+        ClassMapping base, boolean subclasses) {\n         // if selecting the first mapped class and all subclasses, no need\n         // to limit the query\n         if (isFinal || (base.getJoinablePCSuperclassMapping() == null\n@@ -128,7 +128,8 @@ public SQLBuffer getClassConditions(JDBCStore store, Select sel,\n \n         // if not selecting subclasses, limit to just the given class\n         Column col = disc.getColumns()[0];\n-        SQLBuffer sql = new SQLBuffer(store.getDBDictionary());\n+        SQLBuffer sql = new SQLBuffer(sel.getConfiguration().\n+            getDBDictionaryInstance());\n         sql.append(sel.getColumnAlias(col, joins));\n         if (!subclasses || subs.length == 0)\n             return sql.append(\" = \").appendValue(getDiscriminatorValue(base),"},{"sha":"3f737de0623bc0ce44d052994570e2dd3008ae6a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":17,"deletions":12,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -398,8 +398,10 @@ private Joins eagerJoin(Joins joins, ClassMapping cls, boolean forceInner) {\n         // and join into relation\n         ForeignKey fk = field.getForeignKey(cls);\n         if (!forceInner && field.getNullValue() != FieldMapping.NULL_EXCEPTION)\n-            return joins.outerJoinRelation(field.getName(), fk, inverse, false);\n-        return joins.joinRelation(field.getName(), fk, inverse, false);\n+            return joins.outerJoinRelation(field.getName(), fk, field.\n+                getTypeMapping(), field.getSelectSubclasses(), inverse, false);\n+        return joins.joinRelation(field.getName(), fk, field.getTypeMapping(), \n+            field.getSelectSubclasses(), inverse, false);\n     }\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n@@ -549,9 +551,9 @@ public void select(Select sel, int idx) {\n                     sel.whereForeignKey(field.getForeignKey(rels[idx]),\n                         sm.getObjectId(), field.getDefiningMapping(), store);\n                 else {\n-                    resJoins[idx] = sel.newJoins().joinRelation\n-                        (field.getName(), field.getForeignKey(rels[idx]),\n-                            false, false);\n+                    resJoins[idx] = sel.newJoins().joinRelation(field.getName(),\n+                        field.getForeignKey(rels[idx]), rels[idx],\n+                        field.getSelectSubclasses(), false, false);\n                     field.wherePrimaryKey(sel, sm, store);\n                 }\n                 sel.select(rels[idx], subs, store, fetch, fetch.EAGER_JOIN, \n@@ -638,13 +640,15 @@ public Joins join(Joins joins, boolean forceOuter) {\n         // already traversed the relation; just join back to owner table\n         if (field.getJoinDirection() != field.JOIN_INVERSE)\n             return field.join(joins, forceOuter, false);\n-        if (field.getIndependentTypeMappings().length != 1)\n+        ClassMapping[] clss = field.getIndependentTypeMappings();\n+        if (clss.length != 1)\n             throw RelationStrategies.uninversable(field);\n         if (forceOuter)\n             return joins.outerJoinRelation(field.getName(),\n-                field.getForeignKey(), true, false);\n+                field.getForeignKey(), clss[0], field.getSelectSubclasses(), \n+                true, false);\n         return joins.joinRelation(field.getName(), field.getForeignKey(),\n-            true, false);\n+            clss[0], field.getSelectSubclasses(), true, false);\n     }\n \n     public Joins joinRelation(Joins joins, boolean forceOuter,\n@@ -659,10 +663,11 @@ public Joins joinRelation(Joins joins, boolean forceOuter,\n             return joins;\n         }\n         if (forceOuter)\n-            return joins.outerJoinRelation(field.getName(),\n-                field.getForeignKey(clss[0]), false, false);\n-        return joins.joinRelation(field.getName(),\n-            field.getForeignKey(clss[0]), false, false);\n+            return joins.outerJoinRelation(field.getName(), \n+                field.getForeignKey(clss[0]), clss[0], \n+                field.getSelectSubclasses(), false, false);\n+        return joins.joinRelation(field.getName(), field.getForeignKey(clss[0]),\n+            clss[0], field.getSelectSubclasses(), false, false);\n     }\n \n     /////////////////////////////"},{"sha":"e7c436e2693525fe647fa9e568206afa25253dcb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -84,8 +84,9 @@ protected Object loadElement(OpenJPAStateManager sm, JDBCStore store,\n     }\n \n     protected Joins join(Joins joins, ClassMapping elem) {\n-        return joins.joinRelation(field.getName(),\n-            field.getElementMapping().getForeignKey(elem), true, true);\n+        ValueMapping vm = field.getElementMapping();\n+        return joins.joinRelation(field.getName(), vm.getForeignKey(elem), \n+            elem, vm.getSelectSubclasses(), true, true);\n     }\n \n     protected Joins joinElementRelation(Joins joins, ClassMapping elem) {\n@@ -295,10 +296,11 @@ public Joins join(Joins joins, boolean forceOuter) {\n         if (clss.length != 1)\n             throw RelationStrategies.unjoinable(elem);\n         if (forceOuter)\n-            return joins.outerJoinRelation(field.getName(),\n-                elem.getForeignKey(clss[0]), true, true);\n-        return joins.joinRelation(field.getName(),\n-            elem.getForeignKey(clss[0]), true, true);\n+            return joins.outerJoinRelation(field.getName(), \n+                elem.getForeignKey(clss[0]), clss[0],\n+                elem.getSelectSubclasses(), true, true);\n+        return joins.joinRelation(field.getName(), elem.getForeignKey(clss[0]),\n+            clss[0], elem.getSelectSubclasses(), true, true);\n     }\n \n     private void assertInversable() {"},{"sha":"c845302fcbdafee496b786d1a8c33740e1907b12","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -84,8 +84,9 @@ protected Joins join(Joins joins, ClassMapping elem) {\n     }\n \n     protected Joins joinElementRelation(Joins joins, ClassMapping elem) {\n-        return joins.joinRelation(field.getName(), field.getElementMapping().\n-            getForeignKey(elem), false, false);\n+        ValueMapping vm = field.getElementMapping();\n+        return joins.joinRelation(field.getName(), vm.getForeignKey(elem), \n+            elem, vm.getSelectSubclasses(), false, false);\n     }\n \n     public void map(boolean adapt) {\n@@ -258,8 +259,9 @@ public Joins joinRelation(Joins joins, boolean forceOuter,\n         }\n         if (forceOuter)\n             return joins.outerJoinRelation(field.getName(),\n-                elem.getForeignKey(clss[0]), false, false);\n-        return joins.joinRelation(field.getName(),\n-            elem.getForeignKey(clss[0]), false, false);\n+                elem.getForeignKey(clss[0]), clss[0], \n+                elem.getSelectSubclasses(), false, false);\n+        return joins.joinRelation(field.getName(), elem.getForeignKey(clss[0]),\n+            clss[0], elem.getSelectSubclasses(), false, false);\n     }\n }"},{"sha":"edec2ced558aee24f3d3a1f4cd57022e406d0a4f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SubclassJoinDiscriminatorStrategy.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -130,8 +130,8 @@ public Class getClass(JDBCStore store, ClassMapping base, Result res)\n         return derived;\n     }\n \n-    public SQLBuffer getClassConditions(JDBCStore store, Select sel,\n-        Joins joins, ClassMapping base, boolean subclasses) {\n+    public SQLBuffer getClassConditions(Select sel, Joins joins, \n+        ClassMapping base, boolean subclasses) {\n         if (isFinal || subclasses)\n             return null;\n         ClassMapping[] subs = base.getJoinablePCSubclassMappings();\n@@ -150,7 +150,8 @@ public SQLBuffer getClassConditions(JDBCStore store, Select sel,\n             if (buf == null) {\n                 // make sure the base class is aliased first so that we don't\n                 // end up with our outer joins before the inner ones\n-                buf = new SQLBuffer(store.getDBDictionary());\n+                buf = new SQLBuffer(sel.getConfiguration().\n+                    getDBDictionaryInstance());\n                 sel.getColumnAlias(base.getPrimaryKeyColumns()[0], joins);\n             } else\n                 buf.append(\" AND \");"},{"sha":"645fc30519d52d603c6d0de949390179b353b5a7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -53,10 +53,9 @@ public Class getClass(JDBCStore store, ClassMapping base, Result res)\n             getDiscriminator().getClass(store, base, res);\n     }\n \n-    public SQLBuffer getClassConditions(JDBCStore store, Select sel,\n-        Joins joins, ClassMapping base, boolean subclasses) {\n+    public SQLBuffer getClassConditions(Select sel, Joins joins, \n+        ClassMapping base, boolean subclasses) {\n         return disc.getClassMapping().getPCSuperclassMapping().\n-            getDiscriminator().getClassConditions(store, sel, joins, base,\n-            subclasses);\n+            getDiscriminator().getClassConditions(sel, joins, base, subclasses);\n     }\n }"},{"sha":"776437c36721d9b7254854aa892a4c38b030f306","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -822,13 +822,13 @@ public Joins outerJoin(ForeignKey fk, boolean inverse, boolean toMany) {\n             return this;\n         }\n \n-        public Joins joinRelation(String name, ForeignKey fk, boolean inverse,\n-            boolean toMany) {\n+        public Joins joinRelation(String name, ForeignKey fk, \n+            ClassMapping target, int subs, boolean inverse, boolean toMany) {\n             return this;\n         }\n \n         public Joins outerJoinRelation(String name, ForeignKey fk,\n-            boolean inverse, boolean toMany) {\n+            ClassMapping target, int subs, boolean inverse, boolean toMany) {\n             return this;\n         }\n "},{"sha":"3614ac4225a1c2487cad9a76e90abc712275f0b7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -60,6 +60,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n+import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n@@ -1659,6 +1660,7 @@ public String getPlaceholderValueString(Column col) {\n     public SQLBuffer toSelectCount(Select sel) {\n         SQLBuffer selectSQL = new SQLBuffer(this);\n         SQLBuffer from;\n+        sel.addJoinClassConditions();\n         if (sel.getFromSelect() != null)\n             from = getFromSelect(sel, false);\n         else\n@@ -1751,13 +1753,14 @@ public SQLBuffer toUpdate(ClassMapping mapping, Select sel,\n      * @return the SQLBuffer for the update, or <em>null</em> if it is not\n      * possible to perform the bulk update\n      */\n-    public SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n+    protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         JDBCStore store, Object[] params, Map updateParams) {\n         SQLBuffer sql = new SQLBuffer(this);\n         if (updateParams == null)\n             sql.append(\"DELETE FROM \");\n         else\n             sql.append(\"UPDATE \");\n+        sel.addJoinClassConditions();\n \n         // if there is only a single table in the select, then we can\n         // just issue a single DELETE FROM TABLE WHERE <conditions>\n@@ -1851,8 +1854,7 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n         for (Iterator i = updateParams.entrySet().iterator(); i.hasNext();) {\n             Map.Entry next = (Map.Entry) i.next();\n             FieldMetaData fmd = (FieldMetaData) next.getKey();\n-            org.apache.openjpa.jdbc.kernel.exps.Val val =\n-                (org.apache.openjpa.jdbc.kernel.exps.Val) next.getValue();\n+            Val val = (Val) next.getValue();\n \n             Column col = ((FieldMapping) fmd).getColumns()[0];\n             sql.append(col.getName());\n@@ -1878,6 +1880,7 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n      */\n     public SQLBuffer toSelect(Select sel, boolean forUpdate,\n         JDBCFetchConfiguration fetch) {\n+        sel.addJoinClassConditions();\n         boolean update = forUpdate && sel.getFromSelect() == null;\n         SQLBuffer select = getSelects(sel, false, update);\n         SQLBuffer ordering = null;\n@@ -1906,7 +1909,6 @@ protected SQLBuffer getFrom(Select sel, boolean forUpdate) {\n                 fromSQL.append(itr.next().toString());\n                 if (forUpdate && tableForUpdateClause != null)\n                     fromSQL.append(\" \").append(tableForUpdateClause);\n-\n                 if (itr.hasNext())\n                     fromSQL.append(\", \");\n             }"},{"sha":"c8e678029533fe6acefd4c2767cc778569693f4d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","status":"modified","additions":40,"deletions":1,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Join.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -15,6 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Table;\n \n@@ -37,6 +38,9 @@\n     private Table _table1;\n     private Table _table2;\n     private ForeignKey _fk;\n+    private ClassMapping _target;\n+    private int _subs;\n+    private Joins _joins;\n     private boolean _inverse;\n \n     /**\n@@ -98,6 +102,38 @@ public boolean isForeignKeyInversed() {\n         return _inverse;\n     }\n \n+    /**\n+     * If joining a relation, the target type.  \n+     */\n+    public ClassMapping getRelationTarget() {\n+        return _target;\n+    }\n+\n+    /**\n+     * If joining a relation, how to deal with subclasses.  See subclass\n+     * constants in {@link Select}.\n+     */\n+    public int getSubclasses() {\n+        return _subs;\n+    }\n+\n+    /**\n+     * If joining a relation, the joins leading to the relation.\n+     */\n+    public Joins getRelationJoins() {\n+        return _joins;\n+    }\n+\n+    /**\n+     * When joining a relation, set target type and how to deal with\n+     * subclasses.  See subclass constants in {@link #Select}.\n+     */\n+    public void setRelation(ClassMapping target, int subs, Joins joins) {\n+        _target = target;\n+        _subs = subs;\n+        _joins = joins;\n+    }\n+\n     /**\n      * Return a join that is this join in reverse.\n      */\n@@ -108,8 +144,11 @@ public Join reverse() {\n         join._alias1 = _alias2;\n         join._table2 = _table1;\n         join._alias2 = _alias1;\n-        join._fk = _fk;\n         join._inverse = !_inverse;\n+        join._fk = _fk;\n+        join._target = _target;\n+        join._subs = _subs;\n+        join._joins = _joins;\n         return join;\n     }\n "},{"sha":"30b4990666e1e0dc5bdb7a5946550d2e5e84e037","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Joins.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -15,6 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Table;\n \n@@ -49,15 +50,15 @@\n      * Join the columns of the given foreign key, which represents a relation\n      * via the given field name.\n      */\n-    public Joins joinRelation(String name, ForeignKey fk, boolean inverse,\n-        boolean toMany);\n+    public Joins joinRelation(String name, ForeignKey fk, ClassMapping target,\n+        int subclasses, boolean inverse, boolean toMany);\n \n     /**\n      * Join the columns of the given foreign key, which represents a relation\n      * via the given field name.\n      */\n-    public Joins outerJoinRelation(String name, ForeignKey fk, boolean inverse,\n-        boolean toMany);\n+    public Joins outerJoinRelation(String name, ForeignKey fk, \n+        ClassMapping target, int subclasses, boolean inverse, boolean toMany);\n \n     /**\n      * Set the variable name being traversed into with the next join."},{"sha":"afd59dc63ac149867c0d2380d00a980a7588a0ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -461,6 +461,10 @@ public SQLBuffer getHaving() {\n             return sel.getHaving();\n         }\n \n+        public void addJoinClassConditions() {\n+            sel.addJoinClassConditions();\n+        }\n+\n         public Joins getJoins() {\n             return sel.getJoins();\n         }"},{"sha":"e4b24b43f16d1062d9862e6020a046f39714a42b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -866,14 +866,8 @@ else if (seq == null)\n             return Numbers.valueOf(rs.getLong(1));\n         } finally {\n             if (rs != null)\n-                try {\n-                    rs.close();\n-                } catch (SQLException se) {\n-                }\n-            try {\n-                stmnt.close();\n-            } catch (SQLException se) {\n-            }\n+                try { rs.close(); } catch (SQLException se) {}\n+            try { stmnt.close(); } catch (SQLException se) {}\n         }\n     }\n "},{"sha":"ad03d9c720d6d51ff2cb0b465a45b974ed2c3ea8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -181,6 +181,13 @@\n      */\n     public SQLBuffer getHaving();\n \n+    /**\n+     * Apply class conditions from relation joins.  This may affect the return\n+     * values of {@link #getJoins}, {@link #getJoinIterator}, and\n+     * {@link #getWhere}.\n+     */\n+    public void addJoinClassConditions();\n+\n     /**\n      * Return the top-level joins for this select.\n      */"},{"sha":"52709b685401f24425d51ad7390e7bbf3c72307a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":54,"deletions":47,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -269,20 +269,11 @@ public int getCount(JDBCStore store)\n             return rs.getInt(1);\n         } finally {\n             if (rs != null)\n-                try {\n-                    rs.close();\n-                } catch (SQLException se) {\n-                }\n+                try { rs.close(); } catch (SQLException se) {}\n             if (stmnt != null)\n-                try {\n-                    stmnt.close();\n-                } catch (SQLException se) {\n-                }\n+                try { stmnt.close(); } catch (SQLException se) {}\n             if (conn != null)\n-                try {\n-                    conn.close();\n-                } catch (SQLException se) {\n-                }\n+                try { conn.close(); } catch (SQLException se) {}\n         }\n     }\n \n@@ -331,14 +322,8 @@ private static Result execute(SelectImpl sel, StoreContext ctx,\n         } catch (SQLException se) {\n             // clean up statement\n             if (stmnt != null)\n-                try {\n-                    stmnt.close();\n-                } catch (SQLException se2) {\n-                }\n-            try {\n-                conn.close();\n-            } catch (SQLException se2) {\n-            }\n+                try { stmnt.close(); } catch (SQLException se2) {}\n+            try { conn.close(); } catch (SQLException se2) {}\n             throw se;\n         }\n \n@@ -496,6 +481,23 @@ public SQLBuffer getHaving() {\n         return _having;\n     }\n \n+    public void addJoinClassConditions() {\n+        if (_joins == null || _joins.joins() == null)\n+            return;\n+\n+        // join set iterator allows concurrent modification\n+        Join j;\n+        for (Iterator itr = _joins.joins().iterator(); itr.hasNext();) {\n+            j = (Join) itr.next();\n+            if (j.getRelationTarget() != null) {\n+                j.getRelationTarget().getDiscriminator().addClassConditions\n+                    (this, j.getSubclasses() == SUBS_JOINABLE, \n+                    j.getRelationJoins());\n+                j.setRelation(null, 0, null);\n+            }\n+        }\n+    }\n+\n     public Joins getJoins() {\n         return _joins;\n     }\n@@ -1928,15 +1930,16 @@ public Joins outerJoin(ForeignKey fk, boolean inverse, boolean toMany) {\n         return new SelectJoins(this).outerJoin(fk, inverse, toMany);\n     }\n \n-    public Joins joinRelation(String name, ForeignKey fk, boolean inverse,\n-        boolean toMany) {\n-        return new SelectJoins(this).joinRelation(name, fk, inverse, toMany);\n+    public Joins joinRelation(String name, ForeignKey fk, ClassMapping target,\n+        int subs, boolean inverse, boolean toMany) {\n+        return new SelectJoins(this).joinRelation(name, fk, target, subs, \n+            inverse, toMany);\n     }\n \n-    public Joins outerJoinRelation(String name, ForeignKey fk,\n-        boolean inverse, boolean toMany) {\n-        return new SelectJoins(this).outerJoinRelation(name, fk, inverse,\n-            toMany);\n+    public Joins outerJoinRelation(String name, ForeignKey fk, \n+        ClassMapping target, int subs, boolean inverse, boolean toMany) {\n+        return new SelectJoins(this).outerJoinRelation(name, fk, target, subs, \n+            inverse, toMany);\n     }\n \n     public Joins setVariable(String var) {\n@@ -2268,15 +2271,16 @@ public Joins outerJoin(ForeignKey fk, boolean inverse, boolean toMany) {\n             return this;\n         }\n \n-        public Joins joinRelation(String name, ForeignKey fk, boolean inverse,\n-            boolean toMany) {\n-            return new PathJoinsImpl().joinRelation(name, fk, inverse, toMany);\n+        public Joins joinRelation(String name, ForeignKey fk, \n+            ClassMapping target, int subs, boolean inverse, boolean toMany) {\n+            return new PathJoinsImpl().joinRelation(name, fk, target, subs, \n+                inverse, toMany);\n         }\n \n         public Joins outerJoinRelation(String name, ForeignKey fk,\n-            boolean inverse, boolean toMany) {\n-            return new PathJoinsImpl().outerJoinRelation(name, fk, inverse,\n-                toMany);\n+            ClassMapping target, int subs, boolean inverse, boolean toMany) {\n+            return new PathJoinsImpl().outerJoinRelation(name, fk, target, subs,\n+                inverse, toMany);\n         }\n \n         public Joins setVariable(String var) {\n@@ -2361,16 +2365,16 @@ public Joins outerJoin(ForeignKey fk, boolean inverse, boolean toMany) {\n             return this;\n         }\n \n-        public Joins joinRelation(String name, ForeignKey fk, boolean inverse,\n-            boolean toMany) {\n+        public Joins joinRelation(String name, ForeignKey fk, \n+            ClassMapping target, int subs, boolean inverse, boolean toMany) {\n             append(name);\n             append(var);\n             var = null;\n             return this;\n         }\n \n         public Joins outerJoinRelation(String name, ForeignKey fk,\n-            boolean inverse, boolean toMany) {\n+            ClassMapping target, int subs, boolean inverse, boolean toMany) {\n             append(name);\n             append(var);\n             var = null;\n@@ -2396,7 +2400,8 @@ public String toString() {\n      * Joins implementation.\n      */\n     private static class SelectJoins\n-        extends PathJoinsImpl {\n+        extends PathJoinsImpl \n+        implements Cloneable {\n \n         private final SelectImpl _sel;\n         private JoinSet _joins = null;\n@@ -2482,25 +2487,25 @@ public Joins crossJoin(Table localTable, Table foreignTable) {\n         }\n \n         public Joins join(ForeignKey fk, boolean inverse, boolean toMany) {\n-            return join(null, fk, inverse, toMany, false);\n+            return join(null, fk, null, -1, inverse, toMany, false);\n         }\n \n         public Joins outerJoin(ForeignKey fk, boolean inverse, boolean toMany) {\n-            return join(null, fk, inverse, toMany, true);\n+            return join(null, fk, null, -1, inverse, toMany, true);\n         }\n \n-        public Joins joinRelation(String name, ForeignKey fk, boolean inverse,\n-            boolean toMany) {\n-            return join(name, fk, inverse, toMany, false);\n+        public Joins joinRelation(String name, ForeignKey fk, \n+            ClassMapping target, int subs, boolean inverse, boolean toMany) {\n+            return join(name, fk, target, subs, inverse, toMany, false);\n         }\n \n         public Joins outerJoinRelation(String name, ForeignKey fk,\n-            boolean inverse, boolean toMany) {\n-            return join(name, fk, inverse, toMany, true);\n+            ClassMapping target, int subs, boolean inverse, boolean toMany) {\n+            return join(name, fk, target, subs, inverse, toMany, true);\n         }\n \n-        private Joins join(String name, ForeignKey fk, boolean inverse,\n-            boolean toMany, boolean outer) {\n+        private Joins join(String name, ForeignKey fk, ClassMapping target,\n+            int subs, boolean inverse, boolean toMany, boolean outer) {\n             // don't let the get alias methods see that a var has been set\n             // until we get past the local table\n             String var = this.var;\n@@ -2536,7 +2541,9 @@ private Joins join(String name, ForeignKey fk, boolean inverse,\n \n                 if (_joins == null)\n                     _joins = new JoinSet();\n-                _joins.add(j);\n+                if (_joins.add(j) && (subs == Select.SUBS_JOINABLE \n+                    || subs == Select.SUBS_NONE))\n+                    j.setRelation(target, subs, clone(_sel));\n             }\n             return this;\n         }"},{"sha":"ab88db45ecfe83197ff2fd110ea715c7e89cb932","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2ccc2426791f4846704098e8564753faad665442/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","raw_url":"https://github.com/apache/openjpa/raw/2ccc2426791f4846704098e8564753faad665442/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java?ref=2ccc2426791f4846704098e8564753faad665442","patch":"@@ -23,8 +23,6 @@\n \n /**\n  * Take the absolute value of a number.\n- *\n- * @author Abe White\n  */\n class Abs\n     extends UnaryMathVal {\n@@ -44,11 +42,12 @@ protected Class getType(Class c) {\n             || wrap == Long.class\n             || wrap == BigDecimal.class\n             || wrap == BigInteger.class)\n-            return c;\n+            return Filters.unwrap(c);\n         return int.class;\n     }\n \n     protected Object operate(Object o, Class c) {\n+        c = Filters.wrap(c);\n         if (c == Integer.class)\n             return Numbers.valueOf(Math.abs(((Number) o).intValue()));\n         if (c == Float.class)"}]}

