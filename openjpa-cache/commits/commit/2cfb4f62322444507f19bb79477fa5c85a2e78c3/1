{"sha":"2cfb4f62322444507f19bb79477fa5c85a2e78c3","node_id":"MDY6Q29tbWl0MjA2MzY0OjJjZmI0ZjYyMzIyNDQ0NTA3ZjE5YmI3OTQ3N2ZhNWM4NWEyZTc4YzM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-03-22T17:41:58Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-03-22T17:41:58Z"},"message":"OPENJPA-1944: Properly handle a null version field.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1084265 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86004837b118d1f2352e302c3a02217b67cf3163","url":"https://api.github.com/repos/apache/openjpa/git/trees/86004837b118d1f2352e302c3a02217b67cf3163"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2cfb4f62322444507f19bb79477fa5c85a2e78c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2cfb4f62322444507f19bb79477fa5c85a2e78c3","html_url":"https://github.com/apache/openjpa/commit/2cfb4f62322444507f19bb79477fa5c85a2e78c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2cfb4f62322444507f19bb79477fa5c85a2e78c3/comments","author":null,"committer":null,"parents":[{"sha":"f6e05d085208568e1ced2881bd564f49065ce653","url":"https://api.github.com/repos/apache/openjpa/commits/f6e05d085208568e1ced2881bd564f49065ce653","html_url":"https://github.com/apache/openjpa/commit/f6e05d085208568e1ced2881bd564f49065ce653"}],"stats":{"total":64,"additions":49,"deletions":15},"files":[{"sha":"b5b185a0628dc8e5ae0f667f9832efb372cc5788","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=2cfb4f62322444507f19bb79477fa5c85a2e78c3","patch":"@@ -270,15 +270,6 @@ public Object load(OpenJPAStateManager sm, JDBCStore store, Result res)\n \n         Object version = populateFromResult(res);\n         \n-        // we know the version column was part of the result - safe to initialize to 1.\n-        if(version == null) { \n-            if (sm.getMetaData().getVersionField().getDeclaredTypeCode() == JavaTypes.DATE) {\n-                version = new Timestamp(1);\n-            } else {\n-                version = new Long(1);\n-            }\n-        }\n-\n         // OPENJPA-662 Allow a null StateManager because this method may just be\n         // invoked to get the result of projection query\n         if (sm != null) {"},{"sha":"400bdf09d889dbe85ed3b33544169925e190e95b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=2cfb4f62322444507f19bb79477fa5c85a2e78c3","patch":"@@ -3069,7 +3069,10 @@ boolean loadFields(BitSet fields, FetchConfiguration fetch, int lockLevel,\n             // always be set after the first state load or set (which is why\n             // we do this even if no fields were loaded -- could be that this\n             // method is being called after a field is set)\n-            if (_loadVersion == null && (_meta == null || _meta.getVersionField() != null)) {\n+            // If the _loadVersion field is null AND the version field has been loaded, skip calling sync version.\n+            // This indicates that the DB has a null value for the version column. \n+            FieldMetaData versionMeta = _meta != null ? _meta.getVersionField() : null;\n+            if (_loadVersion == null && (versionMeta != null && !_loaded.get(versionMeta.getIndex()))) {\n                 syncVersion(sdata);\n                 ret = ret || _loadVersion != null;\n             }"},{"sha":"f6e9a19cd73fbfd51f04d39ad21bfc9286432b49","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","raw_url":"https://github.com/apache/openjpa/raw/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java?ref=2cfb4f62322444507f19bb79477fa5c85a2e78c3","patch":"@@ -41,7 +41,7 @@\n \n     @Version\n     @Column(name = \"ANNOVER\")\n-    protected int version;\n+    protected Integer version;\n \n     @Basic\n     protected int basic;"},{"sha":"dbd0c49e6bb03f1c765ddba32667ceb3d24b59df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","status":"modified","additions":37,"deletions":1,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","raw_url":"https://github.com/apache/openjpa/raw/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java?ref=2cfb4f62322444507f19bb79477fa5c85a2e78c3","patch":"@@ -34,7 +34,10 @@\n \n     public void setUp() {\n         setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\n-            EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\n+            EmbedOwner.class, EmbedValue.class, CLEAR_TABLES \n+            ,\"openjpa.Log\",\"SQL=trace\"\n+            ,\"openjpa.ConnectionFactoryProperties\",\"printParameters=true\"\n+        );\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -192,4 +195,37 @@ public void testVersionWithField() {\n             cls.getVersion().getStrategy());\n         assertEquals(1, cls.getVersion().getColumns().length);\n     }\n+\n+    public void testNullInitialVersion() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        try {\n+            AnnoTest1 e = new AnnoTest1(System.currentTimeMillis());\n+            em.getTransaction().begin();\n+            em.persist(e);\n+            em.createQuery(\"UPDATE AnnoTest1 a SET a.version=null where a.pk=:pk\").setParameter(\"pk\", e.getPk())\n+                .executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+             em = emf.createEntityManager();\n+            \n+            em.getTransaction().begin();\n+            em2.getTransaction().begin();\n+            \n+            AnnoTest1 e2 = em2.find(AnnoTest1.class, e.getPk());\n+            e = em.find(AnnoTest1.class, e.getPk());\n+            e.setBasic(1);\n+            em.getTransaction().commit();\n+            \n+            e2 = em2.find(AnnoTest1.class, e.getPk());\n+            em2.refresh(e2);\n+            System.out.println(e2.getBasic());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }\n+    }\n+\n }"},{"sha":"ff8aa65b7443409cd7515fe564dcdcce878e4c0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/2cfb4f62322444507f19bb79477fa5c85a2e78c3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java?ref=2cfb4f62322444507f19bb79477fa5c85a2e78c3","patch":"@@ -53,7 +53,8 @@ public void testNullIntegerVersion() {\n         assertNotNull(\"No results found\", results);\n         assertFalse(\"No results found\", results.isEmpty());\n         for (IntVersion iv : results) {\n-            assertEquals(\"Version should be initialized to 1, was: \" + iv.getVersion(), 1, iv.getVersion());\n+            assertEquals(\"Version should be initialized to 0, was: \" + iv.getVersion(), 0, iv.getVersion());\n+            em.find(IntVersion.class, iv.getId());\n         }\n \n         assertEquals(\"Unexpected number of SQL statements: \" + getSQLCount(), 1, getSQLCount());\n@@ -80,7 +81,8 @@ public void testNullTimestampVersion() {\n         assertNotNull(\"No results found\", results);\n         assertFalse(\"No results found\", results.isEmpty());\n         for (TimestampVersion iv : results) {\n-            assertEquals(\"Version should be initialized to 1\" + iv.getVersion(), new Timestamp(1), iv.getVersion());\n+            assertEquals(\"Version should be initialized to null, was: \" + iv.getVersion(), null, iv.getVersion());\n+            em.find(TimestampVersion.class, iv.getId());\n         }\n \n         assertEquals(\"Unexpected number of SQL statements: \" + getSQLCount(), 1, getSQLCount());\n@@ -107,9 +109,11 @@ public void testNullShortVersion() {\n         assertNotNull(\"No results found\", results);\n         assertFalse(\"No results found\", results.isEmpty());\n         for (ShortVersion iv : results) {\n-            assertEquals(\"Version should be initialized to 1\" + iv.getVersion(), 1, iv.getVersion());\n+            assertEquals(\"Version should be initialized to 0, was\" + iv.getVersion(), 0, iv.getVersion());\n+            em.find(ShortVersion.class, iv.getId());\n         }\n \n+\n         assertEquals(\"Unexpected number of SQL statements: \" + getSQLCount(), 1, getSQLCount());\n \n         em.close();"}]}

