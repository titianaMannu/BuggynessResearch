{"sha":"2d232cf4c0f6aaa33dc911610ee098cab0320dbb","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkMjMyY2Y0YzBmNmFhYTMzZGM5MTE2MTBlZTA5OGNhYjAzMjBkYmI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-04-05T16:35:56Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-04-05T16:35:56Z"},"message":"OPENJPA-1974: Fix StackOverflow in SelectImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1089124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d72e8d458fd5215581143cda7ed8cc0ad3dc8f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/9d72e8d458fd5215581143cda7ed8cc0ad3dc8f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2d232cf4c0f6aaa33dc911610ee098cab0320dbb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2d232cf4c0f6aaa33dc911610ee098cab0320dbb","html_url":"https://github.com/apache/openjpa/commit/2d232cf4c0f6aaa33dc911610ee098cab0320dbb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2d232cf4c0f6aaa33dc911610ee098cab0320dbb/comments","author":null,"committer":null,"parents":[{"sha":"d470141828c6dab1326a2aedf16490dce8e4c131","url":"https://api.github.com/repos/apache/openjpa/commits/d470141828c6dab1326a2aedf16490dce8e4c131","html_url":"https://github.com/apache/openjpa/commit/d470141828c6dab1326a2aedf16490dce8e4c131"}],"stats":{"total":69,"additions":60,"deletions":9},"files":[{"sha":"f30e09765a05711fe96ad1ac3c34306e98e749e0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/2d232cf4c0f6aaa33dc911610ee098cab0320dbb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d232cf4c0f6aaa33dc911610ee098cab0320dbb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=2d232cf4c0f6aaa33dc911610ee098cab0320dbb","patch":"@@ -155,7 +155,7 @@\n     private Set _eagerKeys = null;\n \n     // subselect support\n-    private List _subsels = null;\n+    private List<SelectImpl> _subsels = null;\n     private SelectImpl _parent = null;\n     private String _subPath = null;\n     private boolean _hasSub = false;\n@@ -2050,7 +2050,7 @@ private int getTableIndex(Table table, PathJoins pj, boolean create) {\n             return -1;\n \n         // not found; create alias\n-        i = aliasSize(null);\n+        i = aliasSize(false, null);\n //        System.out.println(\"GetTableIndex\\t\"+\n //                ((_parent != null) ? \"Sub\" :\"\") +\n //                \" created alias: \"+\n@@ -2153,19 +2153,19 @@ private void recordTableAlias(Table table, Object key, Integer alias) {\n         _tables.put(alias, tableString);\n     }\n \n+    \n     /**\n      * Calculate total number of aliases.\n+     * \n+     * From 1.2.x\n      */\n-    private int aliasSize(SelectImpl fromSub) {\n-        int aliases = (_parent == null) ? 0\n-            : _parent.aliasSize(this);\n+    private int aliasSize(boolean fromParent, SelectImpl fromSub) {\n+        int aliases = (fromParent || _parent == null) ? 0 : _parent.aliasSize(false, this);\n         aliases += (_aliases == null) ? 0 : _aliases.size();\n         if (_subsels != null) {\n-            SelectImpl sub;\n-            for (int i = 0; i < _subsels.size(); i++) {\n-                sub = (SelectImpl) _subsels.get(i);\n+            for (SelectImpl sub : _subsels) {\n                 if (sub != fromSub)\n-                    aliases += sub.aliasSize(null);\n+                    aliases += sub.aliasSize(true, null);\n             }\n         }\n         return aliases;"},{"sha":"04bba7982f9d2f41df31cbed4971577f1ac03eb2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/TestOneToManySubQuery.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/2d232cf4c0f6aaa33dc911610ee098cab0320dbb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/TestOneToManySubQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2d232cf4c0f6aaa33dc911610ee098cab0320dbb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/TestOneToManySubQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/TestOneToManySubQuery.java?ref=2d232cf4c0f6aaa33dc911610ee098cab0320dbb","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.util.EagerEmbed;\n+import org.apache.openjpa.persistence.util.EagerEmbedRel;\n+import org.apache.openjpa.persistence.util.EagerEntity;\n+\n+public class TestOneToManySubQuery extends SingleEMFTestCase {\n+\n+    public void setUp() throws Exception {\n+        super.setUp(CLEAR_TABLES, EagerEntity.class, EagerEmbed.class, EagerEmbedRel.class);\n+    }\n+\n+    public void test() {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            assertEquals(0, em.createQuery(\n+                \"SELECT e FROM EagerEntity e WHERE EXISTS (SELECT e1 FROM e.eagerSelf e1 WHERE e1.id = 0)\"\n+                    + \" OR EXISTS (SELECT e1 FROM e.eagerSelf e1 WHERE e1.id = 1)\", EagerEntity.class).getResultList()\n+                .size());\n+\n+        } finally {\n+            em.close();\n+\n+        }\n+    }\n+}"},{"sha":"8cb3b94b57de148865c46a73d20a86a71e247e89","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/EagerEntity.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2d232cf4c0f6aaa33dc911610ee098cab0320dbb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/EagerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/2d232cf4c0f6aaa33dc911610ee098cab0320dbb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/EagerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/EagerEntity.java?ref=2d232cf4c0f6aaa33dc911610ee098cab0320dbb","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n import javax.persistence.Transient;\n \n @Entity\n@@ -45,6 +46,9 @@\n \n     @ElementCollection(fetch=FetchType.EAGER)\n     private List<EagerEmbed> eagerEmbedColl;\n+\n+    @OneToMany(fetch=FetchType.EAGER)\n+    private List<EagerEntity> eagerSelf;\n     \n     @Transient\n     private String transField;"}]}

