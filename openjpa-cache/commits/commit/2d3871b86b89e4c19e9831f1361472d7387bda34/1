{"sha":"2d3871b86b89e4c19e9831f1361472d7387bda34","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkMzg3MWI4NmI4OWU0YzE5ZTk4MzFmMTM2MTQ3MmQ3Mzg3YmRhMzQ=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-02-21T22:50:04Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-02-21T22:50:04Z"},"message":"DB2 Optimize for clause enhancement\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@510281 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a37a6be5079c0dc334d62685364e510b723c6c3","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a37a6be5079c0dc334d62685364e510b723c6c3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2d3871b86b89e4c19e9831f1361472d7387bda34","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2d3871b86b89e4c19e9831f1361472d7387bda34","html_url":"https://github.com/apache/openjpa/commit/2d3871b86b89e4c19e9831f1361472d7387bda34","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2d3871b86b89e4c19e9831f1361472d7387bda34/comments","author":null,"committer":null,"parents":[{"sha":"82a62a6b7800f0c218102c62232667390ef1d071","url":"https://api.github.com/repos/apache/openjpa/commits/82a62a6b7800f0c218102c62232667390ef1d071","html_url":"https://github.com/apache/openjpa/commit/82a62a6b7800f0c218102c62232667390ef1d071"}],"stats":{"total":40,"additions":37,"deletions":3},"files":[{"sha":"1632d48f2c90dab47e87697f12ed2e83f1d0d8e2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/2d3871b86b89e4c19e9831f1361472d7387bda34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2d3871b86b89e4c19e9831f1361472d7387bda34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=2d3871b86b89e4c19e9831f1361472d7387bda34","patch":"@@ -20,6 +20,7 @@\n import java.sql.SQLException;\n import java.util.Arrays;\n \n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.schema.Sequence;\n \n /**\n@@ -33,7 +34,7 @@ public DB2Dictionary() {\n         validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\n             + \"SYSIBM.SYSTABLES\";\n         supportsSelectEndIndex = true;\n-\n+        optimizeClause =\"optimize for\";\n         nextSequenceQuery = \"VALUES NEXTVAL FOR {0}\";\n \n         sequenceSQL = \"SELECT SEQSCHEMA AS SEQUENCE_SCHEMA, \"\n@@ -191,4 +192,20 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n             }\n     \t}\n     }\n+    \n+    public String getOptimizeClause(JDBCFetchConfiguration fetch) {\n+        Integer rows = null;\n+        StringBuffer optimizeString = null;\n+        if (fetch.getHint(\"openjpa.hint.optimize\") != null) {\n+            optimizeString = new StringBuffer();\n+            rows = (Integer)fetch.getHint(\"openjpa.hint.optimize\");\n+            optimizeString.append(\" \").append(optimizeClause).append(\" \")\n+                .append(rows).append(\" \");\n+            if(rows.intValue() > 1)\n+    \t\t    optimizeString.append(rowsClause).append(\" \");\n+            else\n+    \t\t    optimizeString.append(rowClause).append(\" \");\n+        }\n+        return optimizeString.toString();    \n+    }\n }"},{"sha":"e90f1dde2a71ab4bb50f0f3f4fa72ae29e8c33af","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/2d3871b86b89e4c19e9831f1361472d7387bda34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2d3871b86b89e4c19e9831f1361472d7387bda34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=2d3871b86b89e4c19e9831f1361472d7387bda34","patch":"@@ -184,6 +184,9 @@\n     public String crossJoinClause = \"CROSS JOIN\";\n     public boolean requiresConditionForCrossJoin = false;\n     public String forUpdateClause = \"FOR UPDATE\";\n+    public String optimizeClause = null;\n+    public String rowClause = \"row\";\n+    public String rowsClause = \"rows\";\n     public String tableForUpdateClause = null;\n     public String distinctCountColumnSeparator = null;\n     public boolean supportsSelectForUpdate = true;\n@@ -2143,10 +2146,22 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n         boolean distinct, boolean forUpdate, long start, long end) {\n-        return toOperation(getSelectOperation(fetch), selects, from, where,\n+    \t\n+        String optimizeString = null;\n+        SQLBuffer selString = toOperation(getSelectOperation(fetch), \n+            selects, from, where,\n             group, having, order, distinct, forUpdate, start, end);\n+        if (fetch != null)\n+            optimizeString = getOptimizeClause(fetch);\n+        if (optimizeString != null)\n+            selString.append(optimizeString);\n+        return selString;    \t\n     }\n \n+    public String getOptimizeClause(JDBCFetchConfiguration fetch) {\n+        return null;    \t\n+    }\n+    \n     /**\n      * Return the \"SELECT\" operation clause, adding any available hints, etc.\n      */"},{"sha":"82e6102051ec97d12b0e833813e3ca9204c06f1e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2d3871b86b89e4c19e9831f1361472d7387bda34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d3871b86b89e4c19e9831f1361472d7387bda34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=2d3871b86b89e4c19e9831f1361472d7387bda34","patch":"@@ -765,7 +765,7 @@ protected Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         }\n         if (fetch == null)\n             fetch = _fc;\n-\n+        fetch.setHint(\"openjpa.hint.optimize\", new Integer(1));\n         beginOperation(true);\n         try {\n             assertNontransactionalRead();"},{"sha":"732c16a8537f84f1491c429a3c9b881a5fa76c16","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2d3871b86b89e4c19e9831f1361472d7387bda34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d3871b86b89e4c19e9831f1361472d7387bda34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=2d3871b86b89e4c19e9831f1361472d7387bda34","patch":"@@ -279,6 +279,8 @@ public List getResultList() {\n      */\n     public Object getSingleResult() {\n         _em.assertNotCloseInvoked();\n+    \t_query.getFetchConfiguration().\n+    \t\tsetHint(\"openjpa.hint.optimize\", new Integer(1));\n         Object ob = execute();\n         if (!(ob instanceof List))\n             return ob;"}]}

