{"sha":"2d5ab5c862737cf13c6a77bee4924dd959e8b941","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkNWFiNWM4NjI3MzdjZjEzYzZhNzdiZWU0OTI0ZGQ5NTllOGI5NDE=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-11-30T15:39:17Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-11-30T15:39:17Z"},"message":"OPENJPA-2289: Applied Albert's patch to trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1415702 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7509604215f4ad8ac17ee55826842626adae7098","url":"https://api.github.com/repos/apache/openjpa/git/trees/7509604215f4ad8ac17ee55826842626adae7098"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2d5ab5c862737cf13c6a77bee4924dd959e8b941","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2d5ab5c862737cf13c6a77bee4924dd959e8b941","html_url":"https://github.com/apache/openjpa/commit/2d5ab5c862737cf13c6a77bee4924dd959e8b941","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2d5ab5c862737cf13c6a77bee4924dd959e8b941/comments","author":null,"committer":null,"parents":[{"sha":"9fa9ef4fe825bf29c480303c169413ab997e5707","url":"https://api.github.com/repos/apache/openjpa/commits/9fa9ef4fe825bf29c480303c169413ab997e5707","html_url":"https://github.com/apache/openjpa/commit/9fa9ef4fe825bf29c480303c169413ab997e5707"}],"stats":{"total":258,"additions":257,"deletions":1},"files":[{"sha":"2221060da63a5c380ed739a6f0322702537929a0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=2d5ab5c862737cf13c6a77bee4924dd959e8b941","patch":"@@ -1877,6 +1877,10 @@ else if (\"database\".equals(syntax))\n         else if (!StringUtils.isEmpty(syntax))\n             throw new IllegalArgumentException(syntax);\n     }\n+    \n+    public boolean isImplicitJoin() {\n+        return false;\n+    }\n \n     /**\n      * Return a SQL string to act as a placeholder for the given column."},{"sha":"598395b8bc774969c1829f63d21fa2884c1b2905","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=2d5ab5c862737cf13c6a77bee4924dd959e8b941","patch":"@@ -1366,6 +1366,10 @@ public void insertBlobForStreamingLoad(Row row, Column col,\n         }\n     }\n \n+    public boolean isImplicitJoin() {\n+        return joinSyntax == SYNTAX_DATABASE;\n+    }\n+\n     /**\n      * Oracle requires special handling of XML column.\n      * Unless the value length is less or equal to 4000 bytes,"},{"sha":"166ba107e4af0c488229e54bff4ed77bf98251b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=2d5ab5c862737cf13c6a77bee4924dd959e8b941","patch":"@@ -2847,7 +2847,11 @@ public Joins crossJoin(Table localTable, Table foreignTable) {\n                 || _sel._from != null) {\n                 // don't make any joins, but update the path if a variable\n                 // has been set\n-                this.append(this.var);\n+                if (this.var != null) {\n+                    this.append(this.var);\n+                } else if (this.path == null && this.correlatedVar != null && _sel._dict.isImplicitJoin()) {\n+                    this.append(this.correlatedVar);\n+                }\n                 this.var = null;\n                 _outer = false;\n                 return this;"},{"sha":"58bb8b96e119a607ce42f9c9d2262d602f180008","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/MaxQueryEntity.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/MaxQueryEntity.java","raw_url":"https://github.com/apache/openjpa/raw/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/MaxQueryEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/MaxQueryEntity.java?ref=2d5ab5c862737cf13c6a77bee4924dd959e8b941","patch":"@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.sub;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"OPENJPA_MAXQUERY_ENTITY\")\r\n+public class MaxQueryEntity {\r\n+\r\n+    public MaxQueryEntity() {\r\n+    }\r\n+\r\n+    public MaxQueryEntity(int id, int domainId, int revision) {\r\n+        this.id = id;\r\n+        this.domainId = domainId;\r\n+        this.revision = revision;\r\n+    }\r\n+\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    private int domainId;\r\n+\r\n+    private int revision;\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getRevision() {\r\n+        return revision;\r\n+    }\r\n+\r\n+    public void setRevision(int revision) {\r\n+        this.revision = revision;\r\n+    }\r\n+\r\n+    public int getDomainId() {\r\n+        return domainId;\r\n+    }\r\n+\r\n+    public void setDomainId(int domainId) {\r\n+        this.domainId = domainId;\r\n+    }\r\n+\r\n+}\r"},{"sha":"c6764a3663a83d1e31e9fd753a3ba0a9d68ab643","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/MaxQueryMapEntity.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/MaxQueryMapEntity.java","raw_url":"https://github.com/apache/openjpa/raw/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/MaxQueryMapEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/MaxQueryMapEntity.java?ref=2d5ab5c862737cf13c6a77bee4924dd959e8b941","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.sub;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"OPENJPA_MAXQUERY_MAPENTITY\")\r\n+public class MaxQueryMapEntity {\r\n+\r\n+    public MaxQueryMapEntity(int id, int revision, String selectCriteria) {\r\n+        this.id = id;\r\n+        this.revision = revision;\r\n+        this.selectCriteria = selectCriteria;\r\n+    }\r\n+\r\n+    public MaxQueryMapEntity() {\r\n+    }\r\n+\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    private int revision;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumn(name = \"refEntity\")\r\n+    private MaxQueryEntity refEntity;\r\n+\r\n+    private String selectCriteria;\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getRevision() {\r\n+        return revision;\r\n+    }\r\n+\r\n+    public void setRevision(int revision) {\r\n+        this.revision = revision;\r\n+    }\r\n+\r\n+    public MaxQueryEntity getRefEntity() {\r\n+        return refEntity;\r\n+    }\r\n+\r\n+    public void setRefEntity(MaxQueryEntity refEntity) {\r\n+        this.refEntity = refEntity;\r\n+    }\r\n+\r\n+    public String getSelectCriteria() {\r\n+        return selectCriteria;\r\n+    }\r\n+\r\n+    public void setSelectCriteria(String selectCriteria) {\r\n+        this.selectCriteria = selectCriteria;\r\n+    }\r\n+\r\n+}\r"},{"sha":"b42b0ae7df798a7194a3784e6ea7e2846c80cbd9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/TestSubQuery.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/TestSubQuery.java","raw_url":"https://github.com/apache/openjpa/raw/2d5ab5c862737cf13c6a77bee4924dd959e8b941/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/TestSubQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/sub/TestSubQuery.java?ref=2d5ab5c862737cf13c6a77bee4924dd959e8b941","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.sub;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestSubQuery extends SingleEMFTestCase {\r\n+    public void setUp() throws Exception {\r\n+        super.setUp(CLEAR_TABLES, MaxQueryEntity.class, MaxQueryMapEntity.class);\r\n+        populate();\r\n+    }\r\n+\r\n+    public void populate() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        EntityTransaction tran = em.getTransaction();\r\n+        tran.begin();\r\n+\r\n+        MaxQueryEntity mqe = new MaxQueryEntity(1, 1, 1);\r\n+        MaxQueryMapEntity mqme = new MaxQueryMapEntity(1, 1, \"A1\");\r\n+        MaxQueryMapEntity mqme2 = new MaxQueryMapEntity(2, 2, \"A2\");\r\n+        mqme.setRefEntity(mqe);\r\n+        mqme2.setRefEntity(mqe);\r\n+        em.persist(mqe);\r\n+        em.persist(mqme);\r\n+        em.persist(mqme2);\r\n+\r\n+        mqe = new MaxQueryEntity(2, 2, 1);\r\n+        mqme = new MaxQueryMapEntity(3, 1, \"B1\");\r\n+        mqme.setRefEntity(mqe);\r\n+        em.persist(mqe);\r\n+        em.persist(mqme);\r\n+        mqme = new MaxQueryMapEntity(4, 2, \"B2\");\r\n+        mqme.setRefEntity(mqe);\r\n+        em.persist(mqme);\r\n+        mqme = new MaxQueryMapEntity(5, 3, \"B3\");\r\n+        mqme.setRefEntity(mqe);\r\n+        em.persist(mqme);\r\n+\r\n+        mqe = new MaxQueryEntity(3, 3, 1);\r\n+        mqme = new MaxQueryMapEntity(6, 4, \"C1\");\r\n+        mqme.setRefEntity(mqe);\r\n+        em.persist(mqe);\r\n+        em.persist(mqme);\r\n+\r\n+        tran.commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void test() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        Query query =\r\n+            em\r\n+                .createQuery(\"SELECT e FROM MaxQueryEntity e, MaxQueryMapEntity map \"\r\n+                    + \"WHERE \"\r\n+//                    + \" map.selectCriteria = 'B3' \"\r\n+//                    + \"  AND map.refEntity = e \"\r\n+//                    + \"  AND e.revision = ( SELECT MAX(e_.revision)\"\r\n+//                    + \"                     FROM MaxQueryEntity e_\"\r\n+//                    + \"                     WHERE e_.domainId = e.domainId )\"\r\n+//                    + \"  AND \"\r\n+                    + \" map.revision = ( SELECT MAX(map_.revision)\"\r\n+                    + \"                       FROM MaxQueryMapEntity map_\"\r\n+                    + \"                       WHERE map_.refEntity = map.refEntity )\"\r\n+                    );\r\n+\r\n+//        assertEquals(1, query.getResultList().size());\r\n+        assertEquals(9, query.getResultList().size());\r\n+\r\n+        em.close();\r\n+    }\r\n+}\r"}]}

