{"sha":"2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkOGVlMzRhMDFmNmUwYjA4YjJiZTQ0ZjE1ZTQzNGQxNjUyM2VhOWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-15T16:40:00Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-15T16:40:00Z"},"message":"moved to raw 'openjpa.*' property prefix instead of 'org.apache.openjpa.*'; implemented system to allow multiple property prefixes for configurations without relaxing any of the current validations\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@422262 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d15593ed4aa41c8d3dcb90a6001d80f4644ecbac","url":"https://api.github.com/repos/apache/openjpa/git/trees/d15593ed4aa41c8d3dcb90a6001d80f4644ecbac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","html_url":"https://github.com/apache/openjpa/commit/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/comments","author":null,"committer":null,"parents":[{"sha":"32baa428fe8f575255f2e18987689d05d04f58b3","url":"https://api.github.com/repos/apache/openjpa/commits/32baa428fe8f575255f2e18987689d05d04f58b3","html_url":"https://github.com/apache/openjpa/commit/32baa428fe8f575255f2e18987689d05d04f58b3"}],"stats":{"total":364,"additions":229,"deletions":135},"files":[{"sha":"feba667e8a8ad09eb5a4a0a158ff16bfcd5992d7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -44,8 +44,8 @@\n \n     private int _flags;\n \n-    public AutoDetachValue(String prop) {\n-        super(prop);\n+    public AutoDetachValue() {\n+        super(\"AutoDetach\");\n         setAliases(ALIASES);\n     }\n "},{"sha":"c4aef5b1c853eac323ca02d915f49c82aa2e94bd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","status":"modified","additions":44,"deletions":1,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -15,7 +15,13 @@\n  */\n package org.apache.openjpa.conf;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.PluginValue;\n \n /**\n@@ -30,12 +36,18 @@\n public class BrokerFactoryValue\n     extends PluginValue {\n \n-    public static final String KEY = \"org.apache.openjpa.BrokerFactory\";\n+    private static final String KEY = \"BrokerFactory\";\n \n     private static final String[] ALIASES = new String[]{\n         \"abstractstore\",\n         \"org.apache.openjpa.abstractstore.AbstractStoreBrokerFactory\",\n     };\n+    \n+    private static final Collection _prefixes = new HashSet();\n+    \n+    static {\n+        _prefixes.add(\"openjpa\");\n+    }\n \n     public BrokerFactoryValue() {\n         this(KEY);\n@@ -45,4 +57,35 @@ public BrokerFactoryValue(String prop) {\n         super(prop, false);\n         setAliases(ALIASES);\n     }\n+\n+    /**\n+     * Extract the concrete {@link BrokerFactory} class name that the specified\n+     * configuration will use.\n+     */\n+    public static Object getBrokerFactoryClassName(ConfigurationProvider cp) {\n+        Map props = cp.getProperties();\n+        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); ) {\n+            Object bf = props.get(iter.next() + \".\" + KEY);\n+            if (bf != null)\n+                return  bf;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Return the property to use for setting the broker factory for \n+     * <code>cp</code>.\n+     */\n+    public static String getBrokerFactoryProperty(ConfigurationProvider cp) {\n+        return _prefixes.iterator().next() + \".\" \n+            + BrokerFactoryValue.KEY; \n+    }\n+    \n+    /**\n+     * Add <code>prefix</code> to the list of prefixes under which configuration\n+     * properties may be scoped.\n+     */\n+    public static void addPropertyPrefix(String prefix) {\n+        _prefixes.add(prefix);\n+    }\n }"},{"sha":"c63f57e2393408f5802cec246d36ef181df52e85","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":61,"deletions":72,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -58,7 +58,7 @@\n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface.\n  *  On construction, the class will attempt to locate a default properties\n- * file called <code>org.apache.openjpa.properties</code> located at any top level token\n+ * file called <code>openjpa.properties</code> located at any top level token\n  * of the CLASSPATH. See the {@link ConfigurationImpl} class description\n  * for details.\n  *\n@@ -153,7 +153,7 @@ public OpenJPAConfigurationImpl() {\n      * Constructor.\n      *\n      * @param loadDefaults whether to attempt to load the default\n-     * <code>org.apache.openjpa.properties</code> resource\n+     * <code>openjpa.properties</code> resource\n      */\n     public OpenJPAConfigurationImpl(boolean loadDefaults) {\n         this(true, loadDefaults);\n@@ -164,22 +164,22 @@ public OpenJPAConfigurationImpl(boolean loadDefaults) {\n      *\n      * @param derivations whether to apply product derivations\n      * @param loadDefaults whether to attempt to load the default\n-     * <code>org.apache.openjpa.properties</code> resource\n+     * <code>openjpa.properties</code> resource\n      */\n     public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         super(false);\n         String[] aliases;\n \n         // setup super's log factory plugin\n-        logFactoryPlugin.setProperty(\"org.apache.openjpa.Log\");\n+        logFactoryPlugin.setProperty(\"Log\");\n         logFactoryPlugin\n             .setAlias(\"openjpa\", \"org.apache.openjpa.lib.log.LogFactoryImpl\");\n         aliases = logFactoryPlugin.getAliases();\n         logFactoryPlugin.setDefault(aliases[0]);\n         logFactoryPlugin.setString(aliases[0]);\n \n         classResolverPlugin =\n-            addPlugin(\"org.apache.openjpa.ClassResolver\", true);\n+            addPlugin(\"ClassResolver\", true);\n         aliases = new String[]{\n             \"default\", \"org.apache.openjpa.util.ClassResolverImpl\",\n             // deprecated alias\n@@ -193,14 +193,14 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         brokerFactoryPlugin = new BrokerFactoryValue();\n         addValue(brokerFactoryPlugin);\n \n-        brokerPlugin = addPlugin(\"org.apache.openjpa.BrokerImpl\", false);\n+        brokerPlugin = addPlugin(\"BrokerImpl\", false);\n         aliases = new String[]{ \"default\", BrokerImpl.class.getName() };\n         brokerPlugin.setAliases(aliases);\n         brokerPlugin.setDefault(aliases[0]);\n         brokerPlugin.setString(aliases[0]);\n \n         dataCacheManagerPlugin =\n-            addPlugin(\"org.apache.openjpa.DataCacheManager\", true);\n+            addPlugin(\"DataCacheManager\", true);\n         aliases = new String[]{\n             \"default\", DataCacheManagerImpl.class.getName(),\n         };\n@@ -209,7 +209,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         dataCacheManagerPlugin.setString(aliases[0]);\n         dataCacheManagerPlugin.setInstantiatingGetter(\"getDataCacheManager\");\n \n-        dataCachePlugin = addPlugin(\"org.apache.openjpa.DataCache\", false);\n+        dataCachePlugin = addPlugin(\"DataCache\", false);\n         aliases = new String[]{\n             \"false\", null,\n             \"true\", ConcurrentDataCache.class.getName(),\n@@ -219,11 +219,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         dataCachePlugin.setDefault(aliases[0]);\n         dataCachePlugin.setString(aliases[0]);\n \n-        dataCacheTimeout = addInt(\"org.apache.openjpa.DataCacheTimeout\");\n+        dataCacheTimeout = addInt(\"DataCacheTimeout\");\n         dataCacheTimeout.setDefault(\"-1\");\n         dataCacheTimeout.set(-1);\n \n-        queryCachePlugin = addPlugin(\"org.apache.openjpa.QueryCache\", true);\n+        queryCachePlugin = addPlugin(\"QueryCache\", true);\n         aliases = new String[]{\n             \"true\", ConcurrentQueryCache.class.getName(),\n             \"concurrent\", ConcurrentQueryCache.class.getName(),\n@@ -234,11 +234,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         queryCachePlugin.setString(aliases[0]);\n \n         dynamicDataStructs =\n-            addBoolean(\"org.apache.openjpa.DynamicDataStructs\");\n+            addBoolean(\"DynamicDataStructs\");\n         dynamicDataStructs.setDefault(\"false\");\n         dynamicDataStructs.set(false);\n \n-        lockManagerPlugin = addPlugin(\"org.apache.openjpa.LockManager\", false);\n+        lockManagerPlugin = addPlugin(\"LockManager\", false);\n         aliases = new String[]{\n             \"none\", \"org.apache.openjpa.kernel.NoneLockManager\",\n             \"version\", \"org.apache.openjpa.kernel.VersionLockManager\",\n@@ -248,7 +248,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         lockManagerPlugin.setString(aliases[0]);\n \n         inverseManagerPlugin =\n-            addPlugin(\"org.apache.openjpa.InverseManager\", false);\n+            addPlugin(\"InverseManager\", false);\n         aliases = new String[]{\n             \"false\", null,\n             \"true\", \"org.apache.openjpa.kernel.InverseManager\",\n@@ -258,7 +258,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         inverseManagerPlugin.setString(aliases[0]);\n \n         savepointManagerPlugin =\n-            addPlugin(\"org.apache.openjpa.SavepointManager\", true);\n+            addPlugin(\"SavepointManager\", true);\n         aliases = new String[]{\n             \"in-mem\", \"org.apache.openjpa.kernel.InMemorySavepointManager\",\n         };\n@@ -269,7 +269,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n             (\"getSavepointManagerInstance\");\n \n         orphanedKeyPlugin =\n-            addPlugin(\"org.apache.openjpa.OrphanedKeyAction\", true);\n+            addPlugin(\"OrphanedKeyAction\", true);\n         aliases = new String[]{\n             \"log\", \"org.apache.openjpa.event.LogOrphanedKeyAction\",\n             \"exception\", \"org.apache.openjpa.event.ExceptionOrphanedKeyAction\",\n@@ -281,11 +281,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         orphanedKeyPlugin.setInstantiatingGetter\n             (\"getOrphanedKeyActionInstance\");\n \n-        remoteProviderPlugin = new RemoteCommitProviderValue\n-            (\"org.apache.openjpa.RemoteCommitProvider\");\n+        remoteProviderPlugin = new RemoteCommitProviderValue();\n         addValue(remoteProviderPlugin);\n \n-        transactionMode = addBoolean(\"org.apache.openjpa.TransactionMode\");\n+        transactionMode = addBoolean(\"TransactionMode\");\n         aliases = new String[]{\n             \"local\", \"false\",\n             \"managed\", \"true\",\n@@ -294,7 +293,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         transactionMode.setDefault(aliases[0]);\n \n         managedRuntimePlugin =\n-            addPlugin(\"org.apache.openjpa.ManagedRuntime\", true);\n+            addPlugin(\"ManagedRuntime\", true);\n         aliases = new String[]{\n             \"auto\", \"org.apache.openjpa.ee.AutomaticManagedRuntime\",\n             \"jndi\", \"org.apache.openjpa.ee.JNDIManagedRuntime\",\n@@ -306,63 +305,62 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         managedRuntimePlugin.setInstantiatingGetter\n             (\"getManagedRuntimeInstance\");\n \n-        proxyManagerPlugin = addPlugin(\"org.apache.openjpa.ProxyManager\", true);\n+        proxyManagerPlugin = addPlugin(\"ProxyManager\", true);\n         aliases = new String[]{ \"default\",\n             \"org.apache.openjpa.util.ProxyManagerImpl\" };\n         proxyManagerPlugin.setAliases(aliases);\n         proxyManagerPlugin.setDefault(aliases[0]);\n         proxyManagerPlugin.setString(aliases[0]);\n         proxyManagerPlugin.setInstantiatingGetter(\"getProxyManagerInstance\");\n \n-        mapping = addString(\"org.apache.openjpa.Mapping\");\n+        mapping = addString(\"Mapping\");\n         metaFactoryPlugin =\n-            addPlugin(\"org.apache.openjpa.MetaDataFactory\", false);\n+            addPlugin(\"MetaDataFactory\", false);\n \n-        connectionFactory = addObject(\"org.apache.openjpa.ConnectionFactory\");\n+        connectionFactory = addObject(\"ConnectionFactory\");\n         connectionFactory.setInstantiatingGetter(\"getConnectionFactory\");\n \n-        connectionFactory2 = addObject(\"org.apache.openjpa.ConnectionFactory2\");\n+        connectionFactory2 = addObject(\"ConnectionFactory2\");\n         connectionFactory2.setInstantiatingGetter(\"getConnectionFactory2\");\n \n-        connectionUserName = addString(\"org.apache.openjpa.ConnectionUserName\");\n-        connectionPassword = addString(\"org.apache.openjpa.ConnectionPassword\");\n-        connectionURL = addString(\"org.apache.openjpa.ConnectionURL\");\n+        connectionUserName = addString(\"ConnectionUserName\");\n+        connectionPassword = addString(\"ConnectionPassword\");\n+        connectionURL = addString(\"ConnectionURL\");\n         connectionDriverName =\n-            addString(\"org.apache.openjpa.ConnectionDriverName\");\n+            addString(\"ConnectionDriverName\");\n         connectionFactoryName =\n-            addString(\"org.apache.openjpa.ConnectionFactoryName\");\n+            addString(\"ConnectionFactoryName\");\n         connectionProperties =\n-            addString(\"org.apache.openjpa.ConnectionProperties\");\n-        connectionFactoryProperties = addString\n-            (\"org.apache.openjpa.ConnectionFactoryProperties\");\n+            addString(\"ConnectionProperties\");\n+        connectionFactoryProperties = addString(\"ConnectionFactoryProperties\");\n         connection2UserName =\n-            addString(\"org.apache.openjpa.Connection2UserName\");\n+            addString(\"Connection2UserName\");\n         connection2Password =\n-            addString(\"org.apache.openjpa.Connection2Password\");\n-        connection2URL = addString(\"org.apache.openjpa.Connection2URL\");\n+            addString(\"Connection2Password\");\n+        connection2URL = addString(\"Connection2URL\");\n         connection2DriverName =\n-            addString(\"org.apache.openjpa.Connection2DriverName\");\n+            addString(\"Connection2DriverName\");\n         connection2Properties =\n-            addString(\"org.apache.openjpa.Connection2Properties\");\n-        connectionFactory2Properties = addString\n-            (\"org.apache.openjpa.ConnectionFactory2Properties\");\n+            addString(\"Connection2Properties\");\n+        connectionFactory2Properties = addString(\n+            \"ConnectionFactory2Properties\");\n         connectionFactory2Name =\n-            addString(\"org.apache.openjpa.ConnectionFactory2Name\");\n+            addString(\"ConnectionFactory2Name\");\n \n         connectionFactoryMode =\n-            addBoolean(\"org.apache.openjpa.ConnectionFactoryMode\");\n+            addBoolean(\"ConnectionFactoryMode\");\n         aliases = new String[]{\n             \"local\", \"false\",\n             \"managed\", \"true\",\n         };\n         connectionFactoryMode.setAliases(aliases);\n         connectionFactoryMode.setDefault(aliases[0]);\n \n-        optimistic = addBoolean(\"org.apache.openjpa.Optimistic\");\n+        optimistic = addBoolean(\"Optimistic\");\n         optimistic.setDefault(\"true\");\n         optimistic.set(true);\n \n-        autoClear = addInt(\"org.apache.openjpa.AutoClear\");\n+        autoClear = addInt(\"AutoClear\");\n         aliases = new String[]{\n             \"datastore\", String.valueOf(AutoClear.CLEAR_DATASTORE),\n             \"all\", String.valueOf(AutoClear.CLEAR_ALL),\n@@ -371,11 +369,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         autoClear.setDefault(aliases[0]);\n         autoClear.set(AutoClear.CLEAR_DATASTORE);\n \n-        retainState = addBoolean(\"org.apache.openjpa.RetainState\");\n+        retainState = addBoolean(\"RetainState\");\n         retainState.setDefault(\"true\");\n         retainState.set(true);\n \n-        restoreState = addInt(\"org.apache.openjpa.RestoreState\");\n+        restoreState = addInt(\"RestoreState\");\n         aliases = new String[]{\n             \"none\", String.valueOf(RestoreState.RESTORE_NONE),\n             \"false\", String.valueOf(RestoreState.RESTORE_NONE),\n@@ -388,10 +386,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         restoreState.setDefault(aliases[0]);\n         restoreState.set(RestoreState.RESTORE_IMMUTABLE);\n \n-        autoDetach = new AutoDetachValue(\"org.apache.openjpa.AutoDetach\");\n+        autoDetach = new AutoDetachValue();\n         addValue(autoDetach);\n \n-        detachStatePlugin = addPlugin(\"org.apache.openjpa.DetachState\", true);\n+        detachStatePlugin = addPlugin(\"DetachState\", true);\n         aliases = new String[]{\n             \"loaded\", DetachOptions.Loaded.class.getName(),\n             \"fgs\", DetachOptions.FetchGroups.class.getName(),\n@@ -402,26 +400,26 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         detachStatePlugin.setString(aliases[0]);\n         detachStatePlugin.setInstantiatingGetter(\"getDetachStateInstance\");\n \n-        ignoreChanges = addBoolean(\"org.apache.openjpa.IgnoreChanges\");\n+        ignoreChanges = addBoolean(\"IgnoreChanges\");\n \n         nontransactionalRead =\n-            addBoolean(\"org.apache.openjpa.NontransactionalRead\");\n+            addBoolean(\"NontransactionalRead\");\n         nontransactionalRead.setDefault(\"true\");\n         nontransactionalRead.set(true);\n \n         nontransactionalWrite =\n-            addBoolean(\"org.apache.openjpa.NontransactionalWrite\");\n-        multithreaded = addBoolean(\"org.apache.openjpa.Multithreaded\");\n+            addBoolean(\"NontransactionalWrite\");\n+        multithreaded = addBoolean(\"Multithreaded\");\n \n-        fetchBatchSize = addInt(\"org.apache.openjpa.FetchBatchSize\");\n+        fetchBatchSize = addInt(\"FetchBatchSize\");\n         fetchBatchSize.setDefault(\"-1\");\n         fetchBatchSize.set(-1);\n \n-        fetchGroups = addStringList(\"org.apache.openjpa.FetchGroups\");\n+        fetchGroups = addStringList(\"FetchGroups\");\n         fetchGroups.setDefault(\"default\");\n         fetchGroups.set(new String[]{ \"default\" });\n \n-        flushBeforeQueries = addInt(\"org.apache.openjpa.FlushBeforeQueries\");\n+        flushBeforeQueries = addInt(\"FlushBeforeQueries\");\n         aliases = new String[]{\n             \"true\", String.valueOf(QueryFlushModes.FLUSH_TRUE),\n             \"false\", String.valueOf(QueryFlushModes.FLUSH_FALSE),\n@@ -432,11 +430,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         flushBeforeQueries.setDefault(aliases[0]);\n         flushBeforeQueries.set(QueryFlushModes.FLUSH_TRUE);\n \n-        lockTimeout = addInt(\"org.apache.openjpa.LockTimeout\");\n+        lockTimeout = addInt(\"LockTimeout\");\n         lockTimeout.setDefault(\"-1\");\n         lockTimeout.set(-1);\n \n-        readLockLevel = addInt(\"org.apache.openjpa.ReadLockLevel\");\n+        readLockLevel = addInt(\"ReadLockLevel\");\n         aliases = new String[]{\n             \"read\", String.valueOf(LockLevels.LOCK_READ),\n             \"write\", String.valueOf(LockLevels.LOCK_WRITE),\n@@ -446,7 +444,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         readLockLevel.setDefault(aliases[0]);\n         readLockLevel.set(LockLevels.LOCK_READ);\n \n-        writeLockLevel = addInt(\"org.apache.openjpa.WriteLockLevel\");\n+        writeLockLevel = addInt(\"WriteLockLevel\");\n         aliases = new String[]{\n             \"read\", String.valueOf(LockLevels.LOCK_READ),\n             \"write\", String.valueOf(LockLevels.LOCK_WRITE),\n@@ -456,12 +454,12 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         writeLockLevel.setDefault(aliases[1]);\n         writeLockLevel.set(LockLevels.LOCK_WRITE);\n \n-        seqPlugin = new SeqValue(\"org.apache.openjpa.Sequence\");\n+        seqPlugin = new SeqValue(\"Sequence\");\n         seqPlugin.setInstantiatingGetter(\"getSequenceInstance\");\n         addValue(seqPlugin);\n \n         connectionRetainMode =\n-            addInt(\"org.apache.openjpa.ConnectionRetainMode\");\n+            addInt(\"ConnectionRetainMode\");\n         aliases = new String[]{\n             \"on-demand\",\n             String.valueOf(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n@@ -479,20 +477,20 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         connectionRetainMode.set(ConnectionRetainModes.CONN_RETAIN_DEMAND);\n \n         filterListenerPlugins =\n-            addPluginList(\"org.apache.openjpa.FilterListeners\");\n+            addPluginList(\"FilterListeners\");\n         filterListenerPlugins.setInstantiatingGetter\n             (\"getFilterListenerInstances\");\n \n         aggregateListenerPlugins =\n-            addPluginList(\"org.apache.openjpa.AggregateListeners\");\n+            addPluginList(\"AggregateListeners\");\n         aggregateListenerPlugins.setInstantiatingGetter\n             (\"getAggregateListenerInstances\");\n \n         retryClassRegistration =\n-            addBoolean(\"org.apache.openjpa.RetryClassRegistration\");\n+            addBoolean(\"RetryClassRegistration\");\n \n         compatibilityPlugin =\n-            addPlugin(\"org.apache.openjpa.Compatibility\", true);\n+            addPlugin(\"Compatibility\", true);\n         aliases = new String[]{ \"default\", Compatibility.class.getName() };\n         compatibilityPlugin.setAliases(aliases);\n         compatibilityPlugin.setDefault(aliases[0]);\n@@ -1411,15 +1409,6 @@ public void close() {\n         ProductDerivations.afterClose(this);\n     }\n \n-    protected boolean isInvalidProperty(String propName) {\n-        // handle warnings for org.apache.openjpa.SomeString, but not for\n-        // org.apache.openjpa.some.subpackage.SomeString, since it might be valid for some\n-        // specific implementation of OpenJPA\n-        return propName.toLowerCase().startsWith(\"org.apache.openjpa.\")\n-            && propName.length() > 5\n-            && propName.indexOf('.', 5) == -1;\n-    }\n-\n     public Log getConfigurationLog() {\n         return getLog(LOG_RUNTIME);\n \t}"},{"sha":"4f6ffdfff23375aad35efff8d1426fc61326506b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -42,8 +42,8 @@\n     private Options _opts = null;\n     private Boolean _transmitPersIds = null;\n \n-    public RemoteCommitProviderValue(String prop) {\n-        super(prop, true);\n+    public RemoteCommitProviderValue() {\n+        super(\"RemoteCommitProvider\", true);\n         setAliases(ALIASES);\n     }\n "},{"sha":"deb40ef1d1fde42fd829daea77ff5234697ce534","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitProvider.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -21,7 +21,7 @@\n  * An entity that is responsible for communicating commit\n  * notification to other {@link RemoteCommitEventManager}s. Each\n  * event manager creates a remote commit provider, based on\n- * the values of the <code>org.apache.openjpa.RemoteCommitProvider</code>\n+ * the values of the <code>openjpa.RemoteCommitProvider</code>\n  * configuration property.\n  *  An adapter that implements {@link TransactionListener} is\n  * registered with each {@link org.apache.openjpa.kernel.Broker}. This adapter"},{"sha":"ce8161c363957b88f93cffb34027912e9cc337ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -120,17 +120,16 @@ private static Class getFactoryClass(ConfigurationProvider conf,\n         if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n \n-        Map props = conf.getProperties();\n-        Object cls = props.get(BrokerFactoryValue.KEY);\n+        Object cls = BrokerFactoryValue.getBrokerFactoryClassName(conf);\n         if (cls instanceof Class)\n             return (Class) cls;\n \n         BrokerFactoryValue value = new BrokerFactoryValue();\n         value.setString((String) cls);\n         String clsName = value.getClassName();\n         if (clsName == null)\n-            throw new UserException(s_loc.get(\"no-brokerfactory\", props)).\n-                setFatal(true);\n+            throw new UserException(s_loc.get(\"no-brokerfactory\", \n+                conf.getProperties())).setFatal(true);\n \n         try {\n             return Class.forName(clsName, true, loader);"},{"sha":"4890f2e63cff0eab9d8581ae2d674e6b26b83da8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -200,4 +200,10 @@\n      * Return a copy of this configuration.\n      */\n     public Object clone();\n+\n+    /**\n+     * Add <code>prefix</code> to the list of prefixes to use\n+     * to identify valid configuration properties.\n+     */\n+    public void addPropertyPrefix(String prefix);\n }"},{"sha":"7b652ccdcc0a75a3e33950829b2ae83e88edc1ab","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":82,"deletions":29,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.awt.*;\n+import java.awt.Image;\n import java.beans.BeanDescriptor;\n import java.beans.BeanInfo;\n import java.beans.EventSetDescriptor;\n@@ -36,17 +36,18 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.util.AbstractList;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.MissingResourceException;\n import java.util.Properties;\n+import java.util.Set;\n import java.util.TreeSet;\n \n import org.apache.commons.lang.StringUtils;\n@@ -112,6 +113,8 @@\n     // cache descriptors\n     private PropertyDescriptor[] _pds = null;\n     private MethodDescriptor[] _mds = null;\n+    \n+    private Set _prefixes = new HashSet();\n \n     /**\n      * Default constructor. Attempts to load default properties through\n@@ -127,7 +130,9 @@ public ConfigurationImpl() {\n      * @param loadDefaults whether to attempt to load the default properties\n      */\n     public ConfigurationImpl(boolean loadDefaults) {\n-        logFactoryPlugin = addPlugin(\"org.apache.openjpa.lib.Log\", true);\n+        _prefixes.add(\"openjpa\");\n+        \n+        logFactoryPlugin = addPlugin(\"Log\", true);\n         String[] aliases = new String[]{\n             \"true\", \"org.apache.openjpa.lib.log.LogFactoryImpl\",\n             \"commons\", \"org.apache.openjpa.lib.log.CommonsLogFactory\",\n@@ -171,7 +176,7 @@ public boolean loadDefaults() {\n     }\n \n     public String getProductName() {\n-        return \"solarmetric\";\n+        return \"openjpa\";\n     }\n \n     public LogFactory getLogFactory() {\n@@ -579,7 +584,8 @@ public void fromProperties(Map map) {\n         Object set;\n         for (int i = 0; i < _vals.size(); i++) {\n             val = (Value) _vals.get(i);\n-            set = map.get(val.getProperty());\n+            Object[] propertyInfo = lookUpProperty(val.getProperty(), map);\n+            set = propertyInfo[1];\n             if (set == null)\n                 continue;\n \n@@ -591,13 +597,14 @@ public void fromProperties(Map map) {\n                 val.setObject(set);\n             }\n \n-            remaining.remove(val.getProperty());\n+            removeFoundProperty(val, remaining);\n         }\n-\n+        \n         // convention is to point product at a resource with the\n-        // <product>.properties System property; remove that property so we\n+        // <prefix>.properties System property; remove that property so we\n         // we don't warn about it\n-        remaining.remove(getProductName() + \".properties\");\n+        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); )\n+            remaining.remove((String) iter.next() + \".properties\");\n \n         // now warn if there are any remaining properties that there\n         // is an unhandled prop\n@@ -614,6 +621,35 @@ public void fromProperties(Map map) {\n             _props = map;\n     }\n \n+    /**\n+     * Removes <code>val</code> from <code>remaining</code>. Use this method\n+     * instead of attempting to remove the value directly because this will\n+     * account for any duplicate-but-same-valued keys in the map.\n+     */\n+    private void removeFoundProperty(Value val, Map remaining) {\n+        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); )\n+            remaining.remove((String) iter.next() + \".\" + val.getProperty());\n+    }\n+\n+    private Object[] lookUpProperty(String property, Map map) {\n+        String firstKey = null;\n+        Object o = null;\n+        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); ) {\n+            String key = (String) iter.next() + \".\" + property;\n+            if (firstKey == null) {\n+                o = map.get(key);\n+                if (o != null)\n+                    firstKey = key;\n+            } else if (map.containsKey(key)) {\n+                // if we've already found a property with a previous prefix,\n+                // then this is a collision.\n+                throw new IllegalStateException(\n+                    _loc.get(\"dup-with-different-prefixes\", firstKey, key));\n+            }\n+        }\n+        return new Object[] { firstKey, o };\n+    }\n+\n     /**\n      * Issue a warning that the specified property is not valid.\n      */\n@@ -627,22 +663,41 @@ private void warnInvalidProperty(String propName) {\n         // try to find the closest string to the invalid property\n         // so that we can provide a hint in case of a misspelling\n         String closest = StringDistance.getClosestLevenshteinDistance\n-            (propName, new PropertyList(), 15);\n+            (propName, newPropertyList(), 15);\n \n         if (closest == null)\n             log.warn(_loc.get(\"invalid-property\", propName));\n         else\n             log.warn(_loc.get(\"invalid-property-hint\", propName, closest));\n     }\n \n+    private Collection newPropertyList() {\n+        Set s = new HashSet();\n+        for (Iterator iter = _vals.iterator(); iter.hasNext(); ) {\n+            Value val = (Value) iter.next();\n+            for (Iterator iter2 = _prefixes.iterator(); iter2.hasNext(); )\n+                s.add(((String) iter2.next()) + \".\" + val.getProperty());  \n+        }\n+        return s;\n+    }\n+\n     /**\n      * Returns true if the specified property name should raise a warning\n      * if it is not found in the list of known properties.\n      */\n     protected boolean isInvalidProperty(String propName) {\n-        // by default, we don't warn on any properties, since we don't\n-        // know what property pattern will be used for the base config\n-        return false;\n+        // handle warnings for openjpa.SomeString, but not for\n+        // openjpa.some.subpackage.SomeString, since it might be valid for some\n+        // specific implementation of OpenJPA\n+        boolean invalid = false;\n+        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); ) {\n+            String prefix = (String) iter.next();\n+            if (propName.toLowerCase().startsWith(prefix)\n+                && propName.indexOf('.', prefix.length()) != -1)\n+                invalid = true;\n+        }\n+\n+        return invalid;\n     }\n \n     /**\n@@ -661,7 +716,7 @@ public void setProperties(String resourceName) throws IOException {\n      * <code>propertiesFile</code> value with the name of a file.\n      */\n     public void setPropertiesFile(File file) throws IOException {\n-        Configurations.load(file, getClass().getClassLoader()). setInto(this);\n+        Configurations.load(file, getClass().getClassLoader()).setInto(this);\n     }\n \n     /////////////\n@@ -714,6 +769,8 @@ public int hashCode() {\n     public void readExternal(ObjectInput in)\n         throws IOException, ClassNotFoundException {\n         fromProperties((Map) in.readObject());\n+        _prefixes = (Set) in.readObject();\n+        _defaults = in.readBoolean();\n     }\n \n     /**\n@@ -725,6 +782,9 @@ public void writeExternal(ObjectOutput out) throws IOException {\n             out.writeObject(_props);\n         else\n             out.writeObject(toProperties(false));\n+        \n+        out.writeObject(_prefixes);\n+        out.writeBoolean(_defaults);\n     }\n \n     /**\n@@ -735,8 +795,11 @@ public Object clone() {\n         try {\n             Constructor cons = getClass().getConstructor\n                 (new Class[]{ boolean.class });\n-            Configuration clone = (Configuration) cons.newInstance\n+            ConfigurationImpl clone = (ConfigurationImpl) cons.newInstance\n                 (new Object[]{ Boolean.FALSE });\n+            clone._prefixes.clear();\n+            clone._prefixes.addAll(_prefixes);\n+            clone._defaults = _defaults;\n             clone.fromProperties(toProperties(true));\n             return clone;\n         } catch (RuntimeException re) {\n@@ -759,6 +822,10 @@ public Value addValue(Value val) {\n         return val;\n     }\n \n+    public void addPropertyPrefix(String prefix) {\n+        _prefixes.add(prefix);\n+    }\n+\n     /**\n      * Add the given value to the set of configuration properties.\n      */\n@@ -839,18 +906,4 @@ public PluginListValue addPluginList(String property) {\n         addValue(val);\n         return val;\n     }\n-\n-    /**\n-     * Exposes our values list as a list of property names.\n-     */\n-    private class PropertyList extends AbstractList {\n-\n-        public Object get(int i) {\n-            return ((Value) _vals.get(i)).getProperty();\n-        }\n-\n-        public int size() {\n-            return _vals.size();\n-        }\n-    }\n }"},{"sha":"b7734ad2625c84c0c10cc434edce4ac299442114","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -282,8 +282,8 @@ else if (properties != null) {\n                 String msg = null;\n                 String first = (String) invalidEntries.keySet().iterator()\n                     .next();\n-                if (invalidEntries.keySet().size() == 1 \n-                    && first.indexOf('.') == -1) {\n+                if (invalidEntries.keySet().size() == 1 &&\n+                    first.indexOf('.') == -1) {\n                     // if there's just one misspelling and this is not a\n                     // path traversal, check for near misses.\n                     Collection options = Options.findOptionsFor(obj.getClass());"},{"sha":"196b8c3fc1942dcdaeb9d62955d485d9b4d63495","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/MapConfigurationProvider.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -36,7 +36,7 @@\n         (MapConfigurationProvider.class);\n \n     private Map _props = null;\n-\n+    \n     /**\n      * Construct with null properties.\n      */\n@@ -47,6 +47,7 @@ public MapConfigurationProvider() {\n      * Constructor; supply properties map.\n      */\n     public MapConfigurationProvider(Map props) {\n+        this();\n         addProperties(props);\n     }\n \n@@ -91,6 +92,7 @@ public void setInto(Configuration conf) {\n     protected void setInto(Configuration conf, Log log) {\n         if (log != null && log.isTraceEnabled())\n             log.trace(_loc.get(\"conf-load\", getProperties()));\n+        \n         if (_props != null)\n             conf.fromProperties(_props);\n     }"},{"sha":"0922711b22ede7749655d5a73dc1b6c468366ccf","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -51,6 +51,8 @@ hook-after: An exception occurred while invoking afterConfigurationLoad() \\\n \ton \"{0}\". This exception will be consumed.\n closeable-ex: An exception occurred while invoking close() on \"{0}\". This \\\n \texception will be consumed.\n+dup-with-different-prefixes: Found multiple properties with different valid \\\n+\tprefixes. Properties: {0}, {1}.\n \n Log-name: Log factory\n Log-desc: LogFactory and configuration"},{"sha":"88dcf12c92aac206159ad43a969c0df6004a569e","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -43,19 +43,21 @@ public TestConfigurationImpl(String test) {\n     }\n \n     public void setUp() {\n-        //### any way to avoid hard coding this?\n-        _def = System.getProperty(\"org.apache.openjpa.properties\");\n-        System.setProperty(\"org.apache.openjpa.properties\", \"test.properties\");\n+        _def = System.getProperty(\"openjpa.properties\");\n+        System.setProperty(\"openjpa.properties\", \"test.properties\");\n     }\n \n     public void tearDown() throws Exception {\n-        System.setProperty(\"org.apache.openjpa.properties\", _def);\n+    \tif (_def != null)\n+    \t\tSystem.setProperty(\"openjpa.properties\", _def);\n \n-        super.tearDown();\n+    \tsuper.tearDown();\n     }\n \n     /**\n      * Test that default properties are found and loaded.\n+     * ### This test method requires some sort of ConfigurationProvider\n+     * ### to be available in the openjpa-lib module, which is not the case.\n      */\n     public void testDefaults() {\n         System.setProperty(\"sysKey\", \"sysvalue\");\n@@ -72,17 +74,15 @@ public void testDefaults() {\n         // override the properties location to a non-existant value\n         _conf.setTestKey(null);\n         _conf.setSysKey(null);\n-        //###\n-        System.setProperty(\"org.apache.openjpa.properties\", \"foo.properties\");\n+        System.setProperty(\"openjpa.properties\", \"foo.properties\");\n         try {\n             assertTrue(!_conf.loadDefaults());\n             fail(\"Should have thrown exception for missing resource.\");\n         } catch (MissingResourceException mre) {\n         }\n \n         // set back for remainder of tests\n-        //###\n-        System.setProperty(\"org.apache.openjpa.properties\", \"test.properties\");\n+        System.setProperty(\"openjpa.properties\", \"test.properties\");\n         System.setProperty(\"pluginKey\", \"java.lang.Object\");\n         assertTrue(_conf.loadDefaults());\n         assertEquals(\"testvalue\", _conf.getTestKey());"},{"sha":"475ac1ea32dc04ee402b4bbf6ea29d3ab769e75d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -40,9 +40,9 @@\n  * Configuration provider capable of loading a {@link Configuration} from\n  * the current environment's JPA-style XML configuration data.\n  * \n- * For defaults, looks in <code>org.apache.openjpa.properties</code> system property for\n+ * For defaults, looks in <code>openjpa.properties</code> system property for\n  * the location of a file to parse. If no system property is defined, the\n- * default resource location of <code>org.apache.openjpa.xml</code> is used.\n+ * default resource location of <code>openjpa.xml</code> is used.\n  * If it exists, the resource is parsed as an XML file.\n  *\n  * @nojavadoc\n@@ -51,7 +51,7 @@\n public class ConfigurationProviderImpl\n     extends MapConfigurationProvider {\n \n-    private static final String RSRC_DEFAULT = \"org.apache.openjpa.xml\";\n+    private static final String RSRC_DEFAULT = \"openjpa.xml\";\n     private static final String RSRC_SPEC = \"META-INF/persistence.xml\";\n \n     private static final Localizer _loc = Localizer.forPackage\n@@ -129,7 +129,7 @@ public boolean load(String name, String rsrc, Map m)\n     @Override\n     public boolean loadDefaults(ClassLoader loader)\n         throws IOException {\n-        String rsrc = System.getProperty(\"org.apache.openjpa.properties\");\n+        String rsrc = System.getProperty(\"openjpa.properties\");\n         String name = null;\n         boolean explicit = false;\n         if (rsrc == null)"},{"sha":"22cf44151a93c78fa983a58a944859c7a29955fa","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/2d8ee34a01f6e0b08b2be44f15e434d16523ea9d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=2d8ee34a01f6e0b08b2be44f15e434d16523ea9d","patch":"@@ -134,37 +134,37 @@ else if (!props.isEmpty())\n \n         OpenJPAConfiguration conf = getConfiguration();\n         String user =\n-            (String) props.remove(\"org.apache.openjpa.ConnectionUserName\");\n+            (String) props.remove(\"openjpa.ConnectionUserName\");\n         if (user == null)\n             user = conf.getConnectionUserName();\n         String pass =\n-            (String) props.remove(\"org.apache.openjpa.ConnectionPassword\");\n+            (String) props.remove(\"openjpa.ConnectionPassword\");\n         if (pass == null)\n             pass = conf.getConnectionPassword();\n \n         String str =\n-            (String) props.remove(\"org.apache.openjpa.TransactionMode\");\n+            (String) props.remove(\"openjpa.TransactionMode\");\n         boolean managed;\n         if (str == null)\n             managed = conf.isTransactionModeManaged();\n         else {\n-            Value val = conf.getValue(\"org.apache.openjpa.TransactionMode\");\n+            Value val = conf.getValue(\"openjpa.TransactionMode\");\n             managed = Boolean.parseBoolean(val.unalias(str));\n         }\n \n-        Object obj = props.remove(\"org.apache.openjpa.ConnectionRetainMode\");\n+        Object obj = props.remove(\"openjpa.ConnectionRetainMode\");\n         int retainMode;\n         if (obj instanceof Number)\n             retainMode = ((Number) obj).intValue();\n         else if (obj != null) {\n             Value val =\n-                conf.getValue(\"org.apache.openjpa.ConnectionRetainMode\");\n+                conf.getValue(\"openjpa.ConnectionRetainMode\");\n             try {\n                 retainMode = Integer.parseInt(val.unalias((String) obj));\n             }\n             catch (Exception e) {\n                 throw new ArgumentException(_loc.get(\"bad-em-prop\",\n-                    \"org.apache.openjpa.ConnectionRetainMode\", obj),\n+                    \"openjpa.ConnectionRetainMode\", obj),\n                     new Throwable[]{ e },\n                     obj, true);\n             }\n@@ -186,7 +186,7 @@ else if (obj != null) {\n         Object val;\n         for (Map.Entry entry : (Set<Map.Entry>) props.entrySet()) {\n             prop = (String) entry.getKey();\n-            if (!prop.startsWith(\"org.apache.openjpa.\"))\n+            if (!prop.startsWith(\"openjpa.\"))\n                 continue;\n             prop = prop.substring(5);\n             try {"}]}

