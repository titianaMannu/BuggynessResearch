{"sha":"2dbbe70692adfb38d05ce040768db02ff65fbc16","node_id":"MDY6Q29tbWl0MjA2MzY0OjJkYmJlNzA2OTJhZGZiMzhkMDVjZTA0MDc2OGRiMDJmZjY1ZmJjMTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-03-09T20:32:59Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-03-09T20:32:59Z"},"message":"OPENJPA-1957: treat non element collection like normal serializable types\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1079978 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c04463a2848ef16dd975427374219539fbb567a6","url":"https://api.github.com/repos/apache/openjpa/git/trees/c04463a2848ef16dd975427374219539fbb567a6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2dbbe70692adfb38d05ce040768db02ff65fbc16","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2dbbe70692adfb38d05ce040768db02ff65fbc16","html_url":"https://github.com/apache/openjpa/commit/2dbbe70692adfb38d05ce040768db02ff65fbc16","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2dbbe70692adfb38d05ce040768db02ff65fbc16/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"0022b991ab84c0425663eb6475c6c2c75dcae0f2","url":"https://api.github.com/repos/apache/openjpa/commits/0022b991ab84c0425663eb6475c6c2c75dcae0f2","html_url":"https://github.com/apache/openjpa/commit/0022b991ab84c0425663eb6475c6c2c75dcae0f2"}],"stats":{"total":417,"additions":416,"deletions":1},"files":[{"sha":"7a1da8b8a9d82d7e130992052baa6f5008e8f8f4","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=2dbbe70692adfb38d05ce040768db02ff65fbc16","patch":"@@ -678,6 +678,12 @@ protected void endFieldMapping(FieldMetaData field)\n                     }\n                     // else no break\n                 case JavaTypes.COLLECTION:\n+                    if(fm.isElementCollection()) { \n+                        fm.getElementMapping().getValueInfo().setColumns(_cols);\n+                    } else  {\n+                        fm.getValueInfo().setColumns(_cols);\n+                    }\n+                    break;\n                 case JavaTypes.MAP:\n                     fm.getElementMapping().getValueInfo().setColumns(_cols);\n                     break;"},{"sha":"bf109b402b6cecb2738bd0128b11eb88ef7fba80","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/TestAnnoExceptionEntity.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/TestAnnoExceptionEntity.java","raw_url":"https://github.com/apache/openjpa/raw/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/TestAnnoExceptionEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/TestAnnoExceptionEntity.java?ref=2dbbe70692adfb38d05ce040768db02ff65fbc16","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.arrays;\n+\n+import java.util.ArrayList;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.arrays.featureSelection.AnnoExceptionEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestAnnoExceptionEntity extends SingleEMFTestCase {\n+    \n+    public void setUp() {\n+        super.setUp(AnnoExceptionEntity.class);\n+    }\n+    \n+    public void testExceptionArrayAsLob() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        \n+        AnnoExceptionEntity e = new AnnoExceptionEntity();\n+        e.setId(1);\n+        em.persist(e);\n+        e.setExceptions(new ArrayList<Exception>());\n+        e.getExceptions().add(new Exception(\"Exception 1\"));\n+        e.getExceptions().add(new Exception(\"Exception 2\"));\n+        em.getTransaction().commit();\n+        \n+        em.clear(); \n+        e = em.find(AnnoExceptionEntity.class, 1);\n+        \n+        assertNotNull(e);\n+        assertNotNull(e.getExceptions()); \n+        assertEquals(2, e.getExceptions().size());\n+        // we don't really care about ordering for this example.\n+        \n+        em.getTransaction().begin();\n+        em.remove(e);\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+    }\n+    \n+    public void testExceptionPersistentCollection() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        \n+        AnnoExceptionEntity e = new AnnoExceptionEntity();\n+        e.setId(1);\n+        em.persist(e);\n+        e.setPersCollExceptions(new ArrayList<Exception>());\n+        e.getPersCollExceptions().add(new Exception(\"Exception 1\"));\n+        e.getPersCollExceptions().add(new Exception(\"Exception 2\"));\n+        em.getTransaction().commit();\n+        \n+        em.clear(); \n+        e = em.find(AnnoExceptionEntity.class, 1);\n+        \n+        assertNotNull(e);\n+        assertNotNull(e.getPersCollExceptions()); \n+        assertEquals(2, e.getPersCollExceptions().size());\n+        // we don't really care about ordering for this example.\n+        \n+        em.getTransaction().begin();\n+        em.remove(e);\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+    }\n+\n+    public void testExceptionElementCollection() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        \n+        AnnoExceptionEntity e = new AnnoExceptionEntity();\n+        e.setId(1);\n+        em.persist(e);\n+        e.setElemCollExceptions(new ArrayList<String>());\n+        e.getElemCollExceptions().add(new Exception(\"Exception 1\").toString());\n+        e.getElemCollExceptions().add(new Exception(\"Exception 2\").toString());\n+        em.getTransaction().commit();\n+        \n+        em.clear(); \n+        e = em.find(AnnoExceptionEntity.class, 1);\n+        \n+        assertNotNull(e);\n+        assertNotNull(e.getElemCollExceptions()); \n+        assertEquals(2, e.getElemCollExceptions().size());\n+        // we don't really care about ordering for this example.\n+        \n+        em.getTransaction().begin();\n+        em.remove(e);\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+    }\n+    \n+}"},{"sha":"4d121bbe1875521a0fc33399d0b022f9fb471e7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/TestXMLExceptionEntity.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/TestXMLExceptionEntity.java","raw_url":"https://github.com/apache/openjpa/raw/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/TestXMLExceptionEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/TestXMLExceptionEntity.java?ref=2dbbe70692adfb38d05ce040768db02ff65fbc16","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.arrays;\n+\n+import java.util.ArrayList;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.arrays.featureSelection.XMLExceptionEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestXMLExceptionEntity extends SingleEMFTestCase {\n+    \n+    @Override\n+    protected String getPersistenceUnitName() {\n+        return \"arrays\";\n+    }\n+    \n+    public void testExceptionArrayAsLob() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        \n+        XMLExceptionEntity e = new XMLExceptionEntity();\n+        e.setId(1);\n+        em.persist(e);\n+        e.setExceptions(new ArrayList<Exception>());\n+        e.getExceptions().add(new Exception(\"Exception 1\"));\n+        e.getExceptions().add(new Exception(\"Exception 2\"));\n+        em.getTransaction().commit();\n+        \n+        em.clear(); \n+        e = em.find(XMLExceptionEntity.class, 1);\n+        \n+        assertNotNull(e);\n+        assertNotNull(e.getExceptions()); \n+        assertEquals(2, e.getExceptions().size());\n+        // we don't really care about ordering for this example.\n+        \n+        em.getTransaction().begin();\n+        em.remove(e);\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+    }\n+    \n+    public void testExceptionPersistentCollection() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        \n+        XMLExceptionEntity e = new XMLExceptionEntity();\n+        e.setId(1);\n+        em.persist(e);\n+        e.setPersCollExceptions(new ArrayList<Exception>());\n+        e.getPersCollExceptions().add(new Exception(\"Exception 1\"));\n+        e.getPersCollExceptions().add(new Exception(\"Exception 2\"));\n+        em.getTransaction().commit();\n+        \n+        em.clear(); \n+        e = em.find(XMLExceptionEntity.class, 1);\n+        \n+        assertNotNull(e);\n+        assertNotNull(e.getPersCollExceptions()); \n+        assertEquals(2, e.getPersCollExceptions().size());\n+        // we don't really care about ordering for this example.\n+        \n+        em.getTransaction().begin();\n+        em.remove(e);\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+    }\n+    \n+    public void testExceptionElementCollection() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        \n+        XMLExceptionEntity e = new XMLExceptionEntity();\n+        e.setId(1);\n+        em.persist(e);\n+        e.setElemCollExceptions(new ArrayList<String>());\n+        e.getElemCollExceptions().add(new Exception(\"Exception 1\").toString());\n+        e.getElemCollExceptions().add(new Exception(\"Exception 2\").toString());\n+        em.getTransaction().commit();\n+        \n+        em.clear(); \n+        e = em.find(XMLExceptionEntity.class, 1);\n+        \n+        assertNotNull(e);\n+        assertNotNull(e.getElemCollExceptions()); \n+        assertEquals(2, e.getElemCollExceptions().size());\n+        // we don't really care about ordering for this example.\n+        \n+        em.getTransaction().begin();\n+        em.remove(e);\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+    }\n+\n+}"},{"sha":"45ea53c2bc48d3952989dbbdff2468279824fed4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/featureSelection/AnnoExceptionEntity.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/featureSelection/AnnoExceptionEntity.java","raw_url":"https://github.com/apache/openjpa/raw/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/featureSelection/AnnoExceptionEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/featureSelection/AnnoExceptionEntity.java?ref=2dbbe70692adfb38d05ce040768db02ff65fbc16","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.arrays.featureSelection;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+/**\n+ * Entity of questionable real-world value. Intended to test the ability to persist an array of serializable types (in\n+ * this case exceptions) as a Lob.\n+ */\n+@Entity\n+@Table(name = \"ANN_EX_ENTITY\")\n+public class AnnoExceptionEntity {\n+    @Id\n+    private int id;\n+\n+    @Lob\n+    private ArrayList<Exception> exceptions;\n+\n+    // ElementCollection does not work with exceptions. \n+    @ElementCollection  \n+    private Collection<String> elemCollExceptions;\n+\n+    @PersistentCollection\n+    private Collection<Exception> persCollExceptions;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public ArrayList<Exception> getExceptions() {\n+        return exceptions;\n+    }\n+\n+    public void setExceptions(ArrayList<Exception> exceptions) {\n+        this.exceptions = exceptions;\n+    }\n+\n+    public Collection<String> getElemCollExceptions() {\n+        return elemCollExceptions;\n+    }\n+\n+    public void setElemCollExceptions(Collection<String> elemCollExceptions) {\n+        this.elemCollExceptions = elemCollExceptions;\n+    }\n+\n+    public Collection<Exception> getPersCollExceptions() {\n+        return persCollExceptions;\n+    }\n+\n+    public void setPersCollExceptions(Collection<Exception> persCollExceptions) {\n+        this.persCollExceptions = persCollExceptions;\n+    }\n+}"},{"sha":"75d21b7f8c14ebb457300f208e3b777851833c09","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/featureSelection/XMLExceptionEntity.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/featureSelection/XMLExceptionEntity.java","raw_url":"https://github.com/apache/openjpa/raw/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/featureSelection/XMLExceptionEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/arrays/featureSelection/XMLExceptionEntity.java?ref=2dbbe70692adfb38d05ce040768db02ff65fbc16","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.arrays.featureSelection;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Entity of questionable real-world value. Intended to test the ability to persist an array of serializable types (in\n+ * this case exceptions) as a Lob.\n+ */\n+public class XMLExceptionEntity  {\n+    private int id;\n+\n+    private ArrayList<Exception> exceptions;\n+\n+    // Element collection does not work with Exceptions\n+    private ArrayList<String> elemCollExceptions;\n+\n+    private ArrayList<Exception> persCollExceptions;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public ArrayList<Exception> getExceptions() {\n+        return exceptions;\n+    }\n+\n+    public void setExceptions(ArrayList<Exception> exceptions) {\n+        this.exceptions = exceptions;\n+    }\n+\n+    public ArrayList<String> getElemCollExceptions() {\n+        return elemCollExceptions;\n+    }\n+\n+    public void setElemCollExceptions(ArrayList<String> elemCollExceptions) {\n+        this.elemCollExceptions = elemCollExceptions;\n+    }\n+\n+    public ArrayList<Exception> getPersCollExceptions() {\n+        return persCollExceptions;\n+    }\n+\n+    public void setPersCollExceptions(ArrayList<Exception> persCollExceptions) {\n+        this.persCollExceptions = persCollExceptions;\n+    }\n+}"},{"sha":"c68840bfec722b6af370af149c40bf57966cc272","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/arrays-orm.xml","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/resources/META-INF/arrays-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/resources/META-INF/arrays-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/arrays-orm.xml?ref=2dbbe70692adfb38d05ce040768db02ff65fbc16","patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file \n+    distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under \n+    the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may \n+    obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to \n+    in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF \n+    ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under \n+    the License. -->\n+\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"\n+    version=\"2.0\">\n+    <entity class=\"org.apache.openjpa.persistence.arrays.featureSelection.XMLExceptionEntity\">\n+        <attributes>\n+            <id name=\"id\" />\n+            <basic name=\"exceptions\">\n+                <lob />\n+            </basic>\n+        </attributes>\n+    </entity>\n+</entity-mappings>"},{"sha":"1069c56e769ee4ea2006af16c5ad414c191f0687","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/2dbbe70692adfb38d05ce040768db02ff65fbc16/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=2dbbe70692adfb38d05ce040768db02ff65fbc16","patch":"@@ -54,7 +54,7 @@\n         <mapping-file>org/apache/openjpa/persistence/detach/detach-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/enhance/identity/mapsId-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/entity/orm.xml</mapping-file>\n-        \n+        <mapping-file>META-INF/arrays-orm.xml</mapping-file>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                 value=\"buildSchema(ForeignKeys=true)\"/>\n@@ -378,5 +378,11 @@\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                 value=\"buildSchema\"/>\n         </properties>\n+    </persistence-unit>   \n+    <persistence-unit name=\"arrays\">\n+        <mapping-file>META-INF/arrays-orm.xml</mapping-file>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\n+        </properties>\n     </persistence-unit>\n </persistence>"}]}

