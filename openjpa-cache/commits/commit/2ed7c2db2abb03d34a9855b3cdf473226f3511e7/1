{"sha":"2ed7c2db2abb03d34a9855b3cdf473226f3511e7","node_id":"MDY6Q29tbWl0MjA2MzY0OjJlZDdjMmRiMmFiYjAzZDM0YTk4NTViM2NkZjQ3MzIyNmYzNTExZTc=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-27T19:17:32Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-27T19:17:32Z"},"message":"Move build logic for adding an interface to WASManagedRuntime's inner class to\nWASManagedRuntime itself.  Move caching in WASManagedRuntime to \nendConfiguration() callback to avoid threading issues.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@468504 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3002263ee34bd5bee30c3d3fbe94fef599985970","url":"https://api.github.com/repos/apache/openjpa/git/trees/3002263ee34bd5bee30c3d3fbe94fef599985970"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2ed7c2db2abb03d34a9855b3cdf473226f3511e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2ed7c2db2abb03d34a9855b3cdf473226f3511e7","html_url":"https://github.com/apache/openjpa/commit/2ed7c2db2abb03d34a9855b3cdf473226f3511e7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/comments","author":null,"committer":null,"parents":[{"sha":"ba1d28973531251d4b3c74cab8c1321cf0e74347","url":"https://api.github.com/repos/apache/openjpa/commits/ba1d28973531251d4b3c74cab8c1321cf0e74347","html_url":"https://github.com/apache/openjpa/commit/ba1d28973531251d4b3c74cab8c1321cf0e74347"}],"stats":{"total":249,"additions":74,"deletions":175},"files":[{"sha":"ad6931e980f53b303b70e40d406f9de307851a64","filename":"openjpa-kernel/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/openjpa-kernel/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/openjpa-kernel/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/pom.xml?ref=2ed7c2db2abb03d34a9855b3cdf473226f3511e7","patch":"@@ -109,7 +109,7 @@\n \t\t\t\t\t\t<configuration>\r\n \t\t\t\t\t\t\t<tasks>\r\n \t\t\t\t\t\t\t\t<java\r\n-\t\t\t\t\t\t\t\t\tclassname=\"org.apache.openjpa.util.WASTransformer\" classpathref=\"maven.runtime.classpath\" />\r\n+\t\t\t\t\t\t\t\t\tclassname=\"org.apache.openjpa.ee.WASManagedRuntime\" classpathref=\"maven.runtime.classpath\" />\r\n \t\t\t\t\t\t\t</tasks>\r\n \t\t\t\t\t\t</configuration>\r\n \t\t\t\t\t\t<goals>\r"},{"sha":"3f57664c5c3c755fe0c3be2c6f1eabcf7fac9b38","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=2ed7c2db2abb03d34a9855b3cdf473226f3511e7","patch":"@@ -63,9 +63,9 @@\n         \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\r\n             + \"getTransactionManagerImpl\", // borland\r\n     };\r\n-    private static final ManagedRuntime WLS;\r\n-    private static final ManagedRuntime SUNONE;\r\n-    private static final ManagedRuntime WAS;\r\n+    private static final WLSManagedRuntime WLS;\r\n+    private static final SunOneManagedRuntime SUNONE;\r\n+    private static final WASManagedRuntime WAS;\r\n \r\n     private static Localizer _loc = Localizer.forPackage\r\n         (AutomaticManagedRuntime.class);\r\n@@ -76,24 +76,22 @@\n             mr = new WLSManagedRuntime();\r\n         } catch (Throwable t) {\r\n         }\r\n-        WLS = mr;\r\n+        WLS = (WLSManagedRuntime) mr;\r\n \r\n         mr = null;\r\n         try {\r\n             mr = new SunOneManagedRuntime();\r\n         } catch (Throwable t) {\r\n         }\r\n-        SUNONE = mr;\r\n+        SUNONE = (SunOneManagedRuntime) mr;\r\n \r\n         mr = null;\r\n         try {\r\n             mr = new WASManagedRuntime();\r\n         }\r\n         catch(Throwable t) {\r\n-\r\n         }\r\n-        WAS= mr;\r\n-\r\n+        WAS= (WASManagedRuntime) mr;\r\n     }\r\n \r\n     private Configuration _conf = null;\r\n@@ -121,7 +119,9 @@ public TransactionManager getTransactionManager()\n \r\n         if (WAS != null) {\r\n             try {\r\n-                ((Configurable)WAS).setConfiguration(_conf);\r\n+                WAS.setConfiguration(_conf);\r\n+                WAS.startConfiguration();\r\n+                WAS.endConfiguration();\r\n                 tm = WAS.getTransactionManager();\r\n             } catch (Throwable t) {\r\n                 errors.add(t);\r"},{"sha":"b5180477de1de5629c35b48d185aa99b03daf52d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","status":"modified","additions":58,"deletions":102,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java?ref=2ed7c2db2abb03d34a9855b3cdf473226f3511e7","patch":"@@ -15,6 +15,7 @@\n  */\r\n package org.apache.openjpa.ee;\r\n \r\n+import java.io.IOException;\r\n import java.lang.reflect.Method;\r\n \r\n import javax.naming.Context;\r\n@@ -34,10 +35,11 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n import org.apache.openjpa.lib.conf.Configurable;\r\n import org.apache.openjpa.lib.conf.Configuration;\r\n-import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.util.InvalidStateException;\r\n import org.apache.openjpa.util.NoTransactionException;\r\n+import serp.bytecode.BCClass;\r\n+import serp.bytecode.Project;\r\n \r\n /**\r\n  * {@link ManagedRuntime} implementation that allows synchronization with a\r\n@@ -59,68 +61,18 @@\n     private static Localizer _loc =\r\n         Localizer.forPackage(WASManagedRuntime.class);\r\n \r\n-    protected Object _extendedTransaction = null;\r\n-\r\n-    protected Method _getGlobalId = null;\r\n-\r\n-    protected Method _getLocalId = null;\r\n-\r\n-    protected Method _registerSync = null;\r\n-\r\n-    OpenJPAConfiguration _conf = null;\r\n-\r\n-    Log _log = null;\r\n-\r\n-    /**\r\n-     * Lookup the extendedTransaction object from JNDI.\r\n-     *\r\n-     * @throws NamingException\r\n-     */\r\n-    private void getExtendedTransaction() throws NamingException {\r\n-\r\n-        if (_extendedTransaction == null) {\r\n-            Context ctx = new InitialContext();\r\n-            try {\r\n-                _extendedTransaction =\r\n-                    ctx.lookup(\"java:comp/websphere/ExtendedJTATransaction\");\r\n-\r\n-            } finally {\r\n-                ctx.close();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Caches the WebSphere proprietary methods for ExtendedJTATransaction.\r\n-     */\r\n-    private void getWebSphereMethods() throws Exception {\r\n-        ClassLoader loader =\r\n-            _conf.getClassResolverInstance().getClassLoader(getClass(), null);\r\n-\r\n-        Class extendedJTATransaction =\r\n-            Class.forName(\r\n-                \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\", true,\r\n-                loader);\r\n-\r\n-        _registerSync =\r\n-            extendedJTATransaction.getMethod(\r\n-                \"registerSynchronizationCallbackForCurrentTran\",\r\n-                new Class[] { Class.forName(\r\n-                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\",\r\n-                    true, loader) });\r\n-\r\n-        _getGlobalId = extendedJTATransaction.getMethod(\"getGlobalId\", null);\r\n-\r\n-        _getLocalId = extendedJTATransaction.getMethod(\"getLocalId\", null);\r\n-    }\r\n+    private Object _extendedTransaction = null;\r\n+    private Method _getGlobalId = null;\r\n+    private Method _getLocalId = null;\r\n+    private Method _registerSync = null;\r\n+    private OpenJPAConfiguration _conf = null;\r\n \r\n     /**\r\n      * Gets an extendedJTATransaction from JNDI and creates a transaction\r\n      * wrapper\r\n      */\r\n     public javax.transaction.TransactionManager getTransactionManager()\r\n         throws Exception {\r\n-        getExtendedTransaction();\r\n         return new WASTransaction();\r\n     }\r\n \r\n@@ -142,24 +94,14 @@ private void getWebSphereMethods() throws Exception {\n \r\n         public int getStatus() throws SystemException {\r\n             int rval = Status.STATUS_UNKNOWN;\r\n-\r\n             try {\r\n                 if (getId() != null) {\r\n                     rval = Status.STATUS_ACTIVE;\r\n                 } else {\r\n-\r\n-                    if (_log != null && _log.isErrorEnabled()) {\r\n-                        _log.error(_loc.get(\"was-no-transaction\"));\r\n-                    }\r\n-\r\n                     throw new NoTransactionException(_loc\r\n                         .get(\"was-no-transaction\"));\r\n                 }\r\n             } catch (Exception e) {\r\n-\r\n-                if (_log != null && _log.isErrorEnabled()) {\r\n-                    _log.error(_loc.get(\"was-no-transaction\"), e);\r\n-                }\r\n                 throw new NoTransactionException(_loc.get(\"was-no-transaction\"))\r\n                     .setCause(e);\r\n             }\r\n@@ -183,27 +125,15 @@ public Transaction getTransaction() throws SystemException {\n          */\r\n         public void registerSynchronization(Synchronization arg0)\r\n             throws IllegalStateException, RollbackException, SystemException {\r\n-\r\n             if (_extendedTransaction != null) {\r\n                 try {\r\n-                    if (_registerSync == null) {\r\n-                        getWebSphereMethods();\r\n-                    }\r\n                     _registerSync.invoke(_extendedTransaction,\r\n                         new Object[] { new WASSynchronization(arg0) });\r\n                 } catch (Exception e) {\r\n-                    if (_log != null && _log.isErrorEnabled()) {\r\n-                        _log.error(_loc.get(\"was-reflection-exception\"), e);\r\n-                    }\r\n-\r\n                     throw new InvalidStateException(_loc\r\n                         .get(\"was-reflection-exception\")).setCause(e);\r\n                 }\r\n             } else {\r\n-                if (_log != null && _log.isErrorEnabled()) {\r\n-                    _log.error(_loc.get(\"was-lookup-error\"));\r\n-                }\r\n-\r\n                 throw new InvalidStateException(_loc.get(\"was-lookup-error\"));\r\n             }\r\n         }\r\n@@ -220,9 +150,7 @@ public void registerSynchronization(Synchronization arg0)\n          */\r\n         private Object getId() throws Exception {\r\n             Object rval;\r\n-\r\n             rval = getGlobalId();\r\n-\r\n             if (rval == null) {\r\n                 rval = getLocalId();\r\n             }\r\n@@ -232,9 +160,6 @@ private Object getId() throws Exception {\n                  * If there's no globalId or localId we're running outside of a\r\n                  * transaction and need to throw an error.\r\n                  */\r\n-                if (_log != null && _log.isErrorEnabled()) {\r\n-                    _log.error(_loc.get(\"was-no-transaction\"));\r\n-                }\r\n                 throw new NoTransactionException(_loc\r\n                     .get(\"was-no-transaction\"));\r\n             }\r\n@@ -249,23 +174,13 @@ private Object getId() throws Exception {\n          *         occurs. byte[] id if a global transaction is active.\r\n          */\r\n         private byte[] getGlobalId() {\r\n-\r\n             byte[] rval = null;\r\n-\r\n             try {\r\n-                if(_getGlobalId == null) {\r\n-                    getWebSphereMethods();\r\n-                }\r\n                 rval = (byte[]) _getGlobalId.invoke(_extendedTransaction, null);\r\n             } catch (Exception e) {\r\n-                if (_log != null && _log.isErrorEnabled()) {\r\n-                    _log.error(_loc.get(\"was-reflection-exception\"), e);\r\n-                }\r\n-\r\n                 throw new InvalidStateException(_loc\r\n                     .get(\"was-reflection-exception\")).setCause(e);\r\n             }\r\n-\r\n             return rval;\r\n         }\r\n \r\n@@ -278,16 +193,9 @@ private Object getId() throws Exception {\n          */\r\n         private Integer getLocalId() {\r\n             Integer rval;\r\n-\r\n             try {\r\n-                if(_getLocalId == null)  {\r\n-                    getWebSphereMethods();\r\n-                }\r\n                 rval = (Integer) _getLocalId.invoke(_extendedTransaction, null);\r\n             } catch (Exception e) {\r\n-                if (_log != null && _log.isErrorEnabled()) {\r\n-                    _log.error(_loc.get(\"was-reflection-exception\"), e);\r\n-                }\r\n                 throw new InvalidStateException(_loc\r\n                     .get(\"was-reflection-exception\")).setCause(e);\r\n             }\r\n@@ -402,6 +310,7 @@ public boolean enlistResource(XAResource arg0)\n      * @see org.apache.openjpa.util.WASTransformer\r\n      */\r\n     static class WASSynchronization {\r\n+\r\n         Synchronization _sync = null;\r\n \r\n         WASSynchronization(Synchronization sync) {\r\n@@ -440,14 +349,41 @@ public void beforeCompletion(int arg0, byte[] arg1) {\n      */\r\n     public void setConfiguration(Configuration conf) {\r\n         _conf = (OpenJPAConfiguration) conf;\r\n-        _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\r\n     }\r\n \r\n     /**\r\n      * EndConfiguration stub.\r\n      */\r\n     public void endConfiguration() {\r\n-        // Nothing to do\r\n+        try {\r\n+            Context ctx = new InitialContext();\r\n+            try {\r\n+                _extendedTransaction =\r\n+                    ctx.lookup(\"java:comp/websphere/ExtendedJTATransaction\");\r\n+            } finally {\r\n+                ctx.close();\r\n+            }\r\n+\r\n+            ClassLoader loader = _conf.getClassResolverInstance()\r\n+                .getClassLoader(getClass(), null);\r\n+\r\n+            Class extendedJTATransaction = Class.forName(\r\n+                \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\", true,\r\n+                loader);\r\n+\r\n+            _registerSync = extendedJTATransaction.getMethod(\r\n+                \"registerSynchronizationCallbackForCurrentTran\",\r\n+                new Class[] { Class.forName(\r\n+                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\",\r\n+                    true, loader) });\r\n+            _getGlobalId = extendedJTATransaction.\r\n+                getMethod(\"getGlobalId\", null);\r\n+            _getLocalId = extendedJTATransaction.\r\n+                getMethod(\"getLocalId\", null);\r\n+        } catch (Exception e) {\r\n+            throw new InvalidStateException(_loc\r\n+                .get(\"was-reflection-exception\"), e).setFatal(true);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -456,4 +392,24 @@ public void endConfiguration() {\n     public void startConfiguration() {\r\n         // Nothing to do\r\n     }\r\n+\r\n+    /**\r\n+     * Class that will be modified\r\n+     */\r\n+    static final String CLASS =\r\n+        \"org.apache.openjpa.ee.WASManagedRuntime$WASSynchronization\";\r\n+\r\n+    /**\r\n+     * Interface which will be added\r\n+     */\r\n+    static final String INTERFACE =\r\n+        \"com.ibm.websphere.jtaextensions.SynchronizationCallback\";\r\n+\r\n+    public static void main(String[] args) \r\n+        throws IOException {\r\n+        Project project = new Project();\r\n+        BCClass bcClass = project.loadClass(CLASS);\r\n+        bcClass.declareInterface(INTERFACE);\r\n+        bcClass.write();\r\n+    }\r\n }\r"},{"sha":"6970b2ebadc7291e662c95f6d9189adaa7283a6c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/WASTransformer.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/ba1d28973531251d4b3c74cab8c1321cf0e74347/openjpa-kernel/src/main/java/org/apache/openjpa/util/WASTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/ba1d28973531251d4b3c74cab8c1321cf0e74347/openjpa-kernel/src/main/java/org/apache/openjpa/util/WASTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/WASTransformer.java?ref=ba1d28973531251d4b3c74cab8c1321cf0e74347","patch":"@@ -1,57 +0,0 @@\n-/*\r\n- * Copyright 2006 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.openjpa.util;\r\n-\r\n-import serp.bytecode.BCClass;\r\n-import serp.bytecode.Project;\r\n-\r\n-/**\r\n- * WASTransformer uses Serp to add WebSphere proprietary interface to\r\n- * WASManagedRuntime$WASSynchronization. The interface is added at build time.\r\n- * The WebSphere extensions classes must be found on the classpath whenever an\r\n- * instance of WASManagedRuntime$WASSynchronization is instantiated.\r\n- *\r\n- * @author Michael Dick\r\n- *\r\n- */\r\n-public class WASTransformer {\r\n-\r\n-    /**\r\n-     * Class that will be modified\r\n-     */\r\n-    public static final String _class =\r\n-        \"org.apache.openjpa.ee.WASManagedRuntime$WASSynchronization\";\r\n-\r\n-    /**\r\n-     * Interface which will be added\r\n-     */\r\n-    public static final String _interface =\r\n-        \"com.ibm.websphere.jtaextensions.SynchronizationCallback\";\r\n-\r\n-    public static void main(String[] args) {\r\n-\r\n-        Project project = new Project();\r\n-\r\n-        BCClass bcClass = project.loadClass(_class);\r\n-\r\n-        bcClass.declareInterface(_interface);\r\n-        try {\r\n-            bcClass.write();\r\n-        } catch (Exception e) {\r\n-            System.err.println(e);\r\n-        }\r\n-    }\r\n-}\r"},{"sha":"9396709289f32a44e01fa4c176aae593ea8de908","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/2ed7c2db2abb03d34a9855b3cdf473226f3511e7/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestWASManagedRuntime.java?ref=2ed7c2db2abb03d34a9855b3cdf473226f3511e7","patch":"@@ -13,18 +13,17 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.apache.openjpa.util;\r\n+package org.apache.openjpa.ee;\r\n \r\n import junit.framework.TestCase;\r\n \r\n-import org.apache.openjpa.util.WASTransformer;\r\n import serp.util.Strings;\r\n \r\n /**\r\n- * Test class for WASTransformer.\r\n+ * Test class for build transformation performed by WASManagedRuntime.\r\n  *\r\n  */\r\n-public class TestWASTransformer extends TestCase {\r\n+public class TestWASManagedRuntime extends TestCase {\r\n \r\n     /**\r\n      * This test will verify that the WASManagedRuntime$WASSynchronization\r\n@@ -41,12 +40,13 @@ public void testInterfaceAdded() throws ClassNotFoundException {\n         String msg = null;\r\n \r\n         try {\r\n-            Class.forName(WASTransformer._class);\r\n+            Class.forName(WASManagedRuntime.CLASS);\r\n             fail(\"expected an exception to be thrown\");\r\n         } catch (NoClassDefFoundError e) {\r\n             msg = e.getMessage();\r\n         }\r\n-        String interfaceName = Strings.getClassName(WASTransformer._interface);\r\n+        String interfaceName = Strings.\r\n+            getClassName(WASManagedRuntime.INTERFACE);\r\n         assertTrue(\"message should have contained \"\r\n             + interfaceName + \", but was '\" + msg + \"'\",\r\n             msg.contains(interfaceName));\r","previous_filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestWASTransformer.java"}]}

