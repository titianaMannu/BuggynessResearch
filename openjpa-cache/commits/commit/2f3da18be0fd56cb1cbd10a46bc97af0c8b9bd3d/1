{"sha":"2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","node_id":"MDY6Q29tbWl0MjA2MzY0OjJmM2RhMThiZTBmZDU2Y2IxY2JkMTBhNDZiYzk3YWYwYzhiOWJkM2Q=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T19:11:36Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T19:11:36Z"},"message":"Throw informative error messages on bad enum field\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb8cac86871f0a8ee7d1c39ea53cb9bff2083d38","url":"https://api.github.com/repos/apache/openjpa/git/trees/cb8cac86871f0a8ee7d1c39ea53cb9bff2083d38"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","html_url":"https://github.com/apache/openjpa/commit/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/comments","author":null,"committer":null,"parents":[{"sha":"87b284b52b3d33ca351910bdeca85f30b38181a9","url":"https://api.github.com/repos/apache/openjpa/commits/87b284b52b3d33ca351910bdeca85f30b38181a9","html_url":"https://github.com/apache/openjpa/commit/87b284b52b3d33ca351910bdeca85f30b38181a9"}],"stats":{"total":37,"additions":25,"deletions":12},"files":[{"sha":"d84e88cb70e96720db5e9ef59cae88955649f4c5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EnumValueHandler.java?ref=2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","patch":"@@ -26,19 +26,23 @@\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.MetaDataException;\n \n /**\n  * Value handler for JDK1.5 enum field types.\n  *\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class EnumValueHandler\n     extends AbstractValueHandler {\n \n-    private Enum[] _vals = null;\n+    private Enum<?>[] _vals = null;\n     private boolean _ordinal = false;\n+    private static final Localizer _loc = Localizer.forPackage(EnumValueHandler.class);\n \n     /**\n      * Whether to store the enum value as its ordinal.\n@@ -72,7 +76,9 @@ public void setStoreOrdinal(boolean ordinal) {\n             Method m = vm.getType().getMethod(\"values\", (Class[]) null);\n             _vals = (Enum[]) m.invoke(null, (Object[]) null);\n         } catch (Exception e) {\n-            throw new MetaDataException().setCause(e);\n+            \n+            throw new MetaDataException(_loc.get(\"not-enum-field\", \n+                    vm.getFieldMapping().getFullName(true), Exceptions.toClassName(vm.getType()))).setCause(e);\n         }\n \n         Column col = new Column();\n@@ -96,8 +102,7 @@ public boolean isVersionable() {\n         return true;\n     }\n \n-    public Object toDataStoreValue(ValueMapping vm, Object val,\n-        JDBCStore store) {\n+    public Object toDataStoreValue(ValueMapping vm, Object val, JDBCStore store) {\n         if (val == null)\n             return null;\n         if (_ordinal)"},{"sha":"59c7316143e2352328b4308782d85c999e50d6a5","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","patch":"@@ -137,3 +137,4 @@ unmapped-datastore-value: Instances of type \"{0}\" are not valid query \\\n multi-column-version-unsupported:You have specified more than one column for \\\n \tversion data, but the \"{1}\" version strategy does not support multi-column \\\n \tversioning.\n+not-enum-field: Field \"{0}\" is expected to be a enum but actually is of type \"{1}\".\n\\ No newline at end of file"},{"sha":"4c3f0c36295c8c98ff39c01abc5f1cd835a42d08","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","patch":"@@ -265,4 +265,11 @@ private static Object getObjectId(Object ob) {\n         else\n             return pc.pcFetchObjectId();\n \t}\n+    \n+    public static String toClassName(Class<?> cls) {\n+        if (cls == null) return \"\";\n+        if (cls.isArray())\n+            return toClassName(cls.getComponentType())+\"[]\";\n+        return cls.getName();\n+    }\n }"},{"sha":"a6dc13385f209f9611b85a9fa5fc2f2cacacddea","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=2f3da18be0fd56cb1cbd10a46bc97af0c8b9bd3d","patch":"@@ -48,11 +48,12 @@\n public class Localizer {\n \n     // static cache of package+loc name to localizer mappings\n-    private static final Map _localizers = new ConcurrentHashMap();\n+    private static final Map<String,Localizer> _localizers = new ConcurrentHashMap<String,Localizer>();\n \n     // list of resource providers to delegate to when locating resources\n-    private static final Collection _providers = new CopyOnWriteArraySet\n-        (Arrays.asList(new Object[]{\n+    private static final Collection<ResourceBundleProvider> _providers = \n+        new CopyOnWriteArraySet<ResourceBundleProvider>\n+        (Arrays.asList(new ResourceBundleProvider[]{\n             new SimpleResourceBundleProvider(),\n             new StreamResourceBundleProvider(),\n             new ZipResourceBundleProvider(), }));\n@@ -63,7 +64,7 @@\n      *\n      * @see #forPackage(Class,Locale)\n      */\n-    public static Localizer forPackage(Class cls) {\n+    public static Localizer forPackage(Class<?> cls) {\n         return forPackage(cls, null);\n     }\n \n@@ -77,7 +78,7 @@ public static Localizer forPackage(Class cls) {\n      * @param locale the locale to which strings should be localized; if\n      * null, the system default will be assumed\n      */\n-    public static Localizer forPackage(Class cls, Locale locale) {\n+    public static Localizer forPackage(Class<?> cls, Locale locale) {\n         if (locale == null)\n             locale = Locale.getDefault();\n \n@@ -138,10 +139,9 @@ private ResourceBundle getBundle() {\n         // no locking; it's ok to create multiple bundles\n         if (_bundle == null) {\n             // find resource bundle\n-            for (Iterator itr = _providers.iterator();\n+            for (Iterator<ResourceBundleProvider> itr = _providers.iterator();\n                 itr.hasNext() && _bundle == null; ) {\n-                _bundle = ((ResourceBundleProvider) itr.next())\n-                    .findResource(_file, _locale, _loader);\n+                _bundle = itr.next().findResource(_file, _locale, _loader);\n             }\n         }\n         return _bundle;"}]}

