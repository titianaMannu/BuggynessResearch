{"sha":"2fd7381e5342d83861504517d3ab27d2b5569a79","node_id":"MDY6Q29tbWl0MjA2MzY0OjJmZDczODFlNTM0MmQ4Mzg2MTUwNDUxN2QzYWIyN2QyYjU1NjlhNzk=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-07-31T19:36:46Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-07-31T19:36:46Z"},"message":"Throw good error message about META-INF/services if we can't find any \nconfiguration providers or product derivations.  This has the downside of\nmandating that there must be at least one valid product derivation and one\nvalid configuration provider available (theoretically someone using brokers\ndirectly together with a simpl store like the sample XML store wouldn't need \neither), but otherwise the final error message to the user is often meaningless.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@427229 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ed965924c27f4cac5e80ef6d56038c613cb6f3d","url":"https://api.github.com/repos/apache/openjpa/git/trees/7ed965924c27f4cac5e80ef6d56038c613cb6f3d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/2fd7381e5342d83861504517d3ab27d2b5569a79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/2fd7381e5342d83861504517d3ab27d2b5569a79","html_url":"https://github.com/apache/openjpa/commit/2fd7381e5342d83861504517d3ab27d2b5569a79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/2fd7381e5342d83861504517d3ab27d2b5569a79/comments","author":null,"committer":null,"parents":[{"sha":"696cbee04b6d5d27e1473f3feac5ba227e37987c","url":"https://api.github.com/repos/apache/openjpa/commits/696cbee04b6d5d27e1473f3feac5ba227e37987c","html_url":"https://github.com/apache/openjpa/commit/696cbee04b6d5d27e1473f3feac5ba227e37987c"}],"stats":{"total":47,"additions":43,"deletions":4},"files":[{"sha":"a4150595e0855b2c7c5bc3668a4c8b1a8472dc73","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java?ref=2fd7381e5342d83861504517d3ab27d2b5569a79","patch":"@@ -19,8 +19,10 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.MissingResourceException;\n \n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Services;\n \n /**\n@@ -43,6 +45,16 @@\n                 // invalid service\n             }\n         }\n+\n+        // there must be some product derivation to define metadata factories,\n+        // etc. \n+        if (derivations.isEmpty()) {\n+            Localizer loc = Localizer.forPackage(ProductDerivations.class);\n+            throw new MissingResourceException(loc.get(\"no-product-derivations\",\n+                ProductDerivation.class.getName()),\n+                ProductDerivations.class.getName(), \"derivations\");\n+        }\n+\n         Collections.sort(derivations, new ProductDerivationComparator());\n         _derivations = (ProductDerivation[]) derivations.toArray\n             (new ProductDerivation[derivations.size()]);"},{"sha":"3ff80ab736c5e71651564fdc3a856d0c12d63c1f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","raw_url":"https://github.com/apache/openjpa/raw/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java?ref=2fd7381e5342d83861504517d3ab27d2b5569a79","patch":"@@ -34,7 +34,6 @@\n     public static final String LANG_METHODQL = \"org.apache.openjpa.MethodQL\";\n \n     private static Map _expressionParsers = new HashMap();\n-\n     static {\n         // Load and cache all the query languages available in the system.\n         Class[] classes = Services.getImplementorClasses("},{"sha":"ed7aeb008bf57ce122e7b891bc2ce3ed4c92fc1c","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=2fd7381e5342d83861504517d3ab27d2b5569a79","patch":"@@ -536,3 +536,9 @@ no-named-cf: use a DataSource bound to JNDI\n diff-specs: Attempt to configure for multiple specifications.  Was configured \\\n \tfor \"{0}\".  Attempt to now configure for \"{1}\".  This attempt will be \\\n \tignored.\n+no-product-derivations: Your system is missing product derivations.  Product \\\n+    derivations provide configuration options for supported data stores and \\\n+    specifications.  You must have a META-INF/services/{0} file in your \\\n+    classpath listing the available derivation classes, and some listed class \\\n+    must be instantiable.  Typically this file is bundled as part of the \\\n+    distribution.  Have you unbundled it, or unbundled its listed classes?"},{"sha":"bc87062a821919947946478088aa9fde9f8986df","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=2fd7381e5342d83861504517d3ab27d2b5569a79","patch":"@@ -434,11 +434,16 @@ public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n         Class[] impls = Services.getImplementorClasses\n             (ConfigurationProvider.class, loader);\n         ConfigurationProvider provider = null;\n+        int providerCount = 0;\n         StringBuffer errs = null;\n         for (int i = 0; i < impls.length; i++) {\n             provider = newProvider(impls[i]);\n+            if (provider == null)\n+                continue;\n+\n+            providerCount++;\n             try {\n-                if (provider != null && provider.loadDefaults(loader))\n+                if (provider.loadDefaults(loader))\n                     return provider;\n             } catch (MissingResourceException mre) {\n                 throw mre;\n@@ -453,7 +458,10 @@ public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n         if (errs != null)\n             throw new MissingResourceException(errs.toString(),\n                 Configurations.class.getName(), \"defaults\");\n-\n+        if (providerCount == 0)\n+            throw new MissingResourceException(_loc.get (\"no-providers\", \n+                ConfigurationProvider.class.getName()),\n+                Configurations.class.getName(), \"defaults\"); \n         return null;\n     }\n \n@@ -484,11 +492,16 @@ public static ConfigurationProvider load(String resource,\n         Class[] impls = Services.getImplementorClasses\n             (ConfigurationProvider.class, loader);\n         ConfigurationProvider provider = null;\n+        int providerCount = 0;\n         StringBuffer errs = null;\n         for (int i = 0; i < impls.length; i++) {\n             provider = newProvider(impls[i]);\n+            if (provider == null)\n+                continue;\n+\n+            providerCount++;\n             try {\n-                if (provider != null && provider.load(resource, loader))\n+                if (provider.load(resource, loader))\n                     return provider;\n             } catch (MissingResourceException mre) {\n                 throw mre;\n@@ -503,6 +516,9 @@ public static ConfigurationProvider load(String resource,\n         String msg;\n         if (errs != null)\n             msg = errs.toString();\n+        else if (providerCount == 0)\n+            msg = _loc.get(\"no-providers\", \n+                ConfigurationProvider.class.getName());\n         else\n             msg = _loc.get(\"no-provider\", resource);\n         "},{"sha":"495d26abcee60e1915c552ee392cf6e6135d71e4","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/2fd7381e5342d83861504517d3ab27d2b5569a79/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=2fd7381e5342d83861504517d3ab27d2b5569a79","patch":"@@ -46,6 +46,12 @@ loaded-via-provider: Configuration information loaded via \"{0}\".\n no-default-providers: Default configuration information couldn''t be loaded \\\n \tfrom any configuration provider.\n no-provider: No registered configuration provider could load \"{0}\".\n+no-providers: Your system is missing configuration providers. \\\n+    Configuration providers load configuration information for supported \\\n+    specifications.  You must have a META-INF/services/{0} file in your \\\n+    classpath listing the available provider classes, and some listed class \\\n+    must be instantiable.  Typically this file is bundled as part of the \\\n+    distribution.  Have you unbundled it, or unbundled its listed classes?\n hook-before: An exception occurred while invoking beforeConfigurationLoad() \\\n \ton \"{0}\". This exception will be consumed.\n hook-after: An exception occurred while invoking afterConfigurationLoad() \\"}]}

