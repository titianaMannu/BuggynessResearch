{"sha":"3067245dac166500fd0cc15c445f222334afba27","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwNjcyNDVkYWMxNjY1MDBmZDBjYzE1YzQ0NWYyMjIzMzRhZmJhMjc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-14T21:31:31Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-12-14T21:31:31Z"},"message":"OPENJPA-1224: Updating DBDictionaries to support setting precision on a BigDecimal column.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@890486 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f9bca93ef7fb21c5008f6967c15eb969ad3aaf8e","url":"https://api.github.com/repos/apache/openjpa/git/trees/f9bca93ef7fb21c5008f6967c15eb969ad3aaf8e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3067245dac166500fd0cc15c445f222334afba27","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3067245dac166500fd0cc15c445f222334afba27","html_url":"https://github.com/apache/openjpa/commit/3067245dac166500fd0cc15c445f222334afba27","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3067245dac166500fd0cc15c445f222334afba27/comments","author":null,"committer":null,"parents":[{"sha":"6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb","url":"https://api.github.com/repos/apache/openjpa/commits/6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb","html_url":"https://github.com/apache/openjpa/commit/6cee09c8c9ff17ce3b997f8116e186a9ca64d4fb"}],"stats":{"total":28,"additions":10,"deletions":18},"files":[{"sha":"99b56e760492ad2de6b87c16dcf3e924d953aa0e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3067245dac166500fd0cc15c445f222334afba27/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3067245dac166500fd0cc15c445f222334afba27/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=3067245dac166500fd0cc15c445f222334afba27","patch":"@@ -29,7 +29,10 @@\n     public int varcharCastLength = 1000;\n \n     public AbstractDB2Dictionary() {\n-        numericTypeName = \"DOUBLE\";\n+    \t// http://publib.boulder.ibm.com/infocenter/db2luw/v9/index.jsp?topic=/com.ibm.db2.udb.apdv.java.doc\n+    \t//\t/doc/rjvjdata.htm\n+\t\t// http://db.apache.org/derby/docs/10.3/ref/rrefsqlj12362.html\n+    \tnumericTypeName = \"DECIMAL\";\n         bitTypeName = \"SMALLINT\";\n         smallintTypeName = \"SMALLINT\";\n         tinyintTypeName = \"SMALLINT\";\n@@ -69,6 +72,9 @@ public AbstractDB2Dictionary() {\n         // the equivalent \"X JOIN Y ON 1 = 1\"\n         crossJoinClause = \"JOIN\";\n         requiresConditionForCrossJoin = true;\n+        \n+        // DB2 / Derby allows precision to be set on a DECIMAL column.\n+        fixedSizeTypeNameSet.remove(\"DECIMAL\");\n     }\n \n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,"},{"sha":"5ed5346d52e1db5dc871dbb210519d1b328b77f0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3067245dac166500fd0cc15c445f222334afba27/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3067245dac166500fd0cc15c445f222334afba27/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=3067245dac166500fd0cc15c445f222334afba27","patch":"@@ -145,6 +145,8 @@ public MySQLDictionary() {\n             \"ZEROFILL\" }));\n \n         delimiter = \"`\";\n+        \n+        fixedSizeTypeNameSet.remove(\"NUMERIC\");\n     }\n \n     public void connectedConfiguration(Connection conn) throws SQLException {"},{"sha":"cd90d92c935132d76a0e3324e0a13595c2e9ba0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","status":"modified","additions":1,"deletions":17,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/3067245dac166500fd0cc15c445f222334afba27/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/3067245dac166500fd0cc15c445f222334afba27/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java?ref=3067245dac166500fd0cc15c445f222334afba27","patch":"@@ -24,10 +24,6 @@\n \n import junit.textui.TestRunner;\n \n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n-import org.apache.openjpa.persistence.test.AllowFailure;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n@@ -48,18 +44,6 @@ public void testPersist() {\n         e.setId(decimal);\n         e.setData(1);\n         \n-        // trigger schema definition\n-        JDBCConfiguration jdbccfg = (JDBCConfiguration) emf.getConfiguration();\n-        DBDictionary dict = jdbccfg.getDBDictionaryInstance();\n-        // currently BigDecimal is mapped to NUMERIC column type. This causes\n-        // truncation error from MySQL. Without knowing the implication of changing the\n-        // mapping of BigDecimal universally to DOUBLE, I will just change the mapping\n-        // for this test case.\n-        if (dict instanceof MySQLDictionary) {\n-            dict.numericTypeName = \"DOUBLE\";\n-        }\n-\n-        \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         em.persist(e);\n@@ -74,7 +58,6 @@ public void testPersist() {\n         \n     }\n     \n-    @AllowFailure\n     public void testQuery() {\n         int data = 156;\n         BigDecimal decimal = new BigDecimal(1234);\n@@ -91,6 +74,7 @@ public void testQuery() {\n             (SQLBigDecimalIdEntity) em.createQuery(\"SELECT a FROM SQLBigDecimalIdEntity a WHERE a.data=\" + data)\n                 .getSingleResult();\n         \n+        // This would fail prior to OPENJPA-1224.\n         assertEquals(e, e2);\n         em.close();\n "}]}

