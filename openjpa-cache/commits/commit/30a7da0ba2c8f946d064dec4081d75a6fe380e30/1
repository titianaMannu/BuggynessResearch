{"sha":"30a7da0ba2c8f946d064dec4081d75a6fe380e30","node_id":"MDY6Q29tbWl0MjA2MzY0OjMwYTdkYTBiYTJjOGY5NDZkMDY0ZGVjNDA4MWQ3NWE2ZmUzODBlMzA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-18T20:45:21Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-08-18T20:45:21Z"},"message":"additional test for embeddable, elementcollection and lob\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805573 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98c34f3190609e4a1f755dc4932a326a00842cbf","url":"https://api.github.com/repos/apache/openjpa/git/trees/98c34f3190609e4a1f755dc4932a326a00842cbf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/30a7da0ba2c8f946d064dec4081d75a6fe380e30","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/30a7da0ba2c8f946d064dec4081d75a6fe380e30","html_url":"https://github.com/apache/openjpa/commit/30a7da0ba2c8f946d064dec4081d75a6fe380e30","comments_url":"https://api.github.com/repos/apache/openjpa/commits/30a7da0ba2c8f946d064dec4081d75a6fe380e30/comments","author":null,"committer":null,"parents":[{"sha":"4e6a98f6344ea3e1819415709468cc1294910adc","url":"https://api.github.com/repos/apache/openjpa/commits/4e6a98f6344ea3e1819415709468cc1294910adc","html_url":"https://github.com/apache/openjpa/commit/4e6a98f6344ea3e1819415709468cc1294910adc"}],"stats":{"total":441,"additions":437,"deletions":4},"files":[{"sha":"fd3ae979571a3259051de391785eaf3bac61a5d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Complex.java","status":"added","additions":196,"deletions":0,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/30a7da0ba2c8f946d064dec4081d75a6fe380e30/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Complex.java","raw_url":"https://github.com/apache/openjpa/raw/30a7da0ba2c8f946d064dec4081d75a6fe380e30/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Complex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Complex.java?ref=30a7da0ba2c8f946d064dec4081d75a6fe380e30","patch":"@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import java.io.Serializable;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.AttributeOverrides;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"TBL3C\")\n+public class EntityA_Embed_Complex implements Serializable {\n+    @Id\n+    Integer id;\n+\n+    @Column(length=30)\n+    String name;\n+    \n+    @Basic(fetch=FetchType.LAZY)\n+    int age;\n+\n+    @ElementCollection(fetch=FetchType.EAGER) \n+    @CollectionTable(name=\"NickNames_Tbl\")\n+    @Column(name=\"nicknames1\", length=20)\n+    protected Set<String> nickNames = new HashSet<String>();\n+\n+    @ElementCollection\n+    @Enumerated(EnumType.ORDINAL)\n+    protected List<CreditRating> cr = new ArrayList<CreditRating>();\n+    \n+    @ElementCollection\n+    @Temporal(TemporalType.DATE)\n+    protected List<Timestamp> ts = new ArrayList<Timestamp>();\n+\n+    @ElementCollection\n+    @Lob\n+    protected List<String> lobs = new ArrayList<String>();\n+\n+    protected Embed_Embed embed;\n+    \n+    @ElementCollection\n+    protected List<Embed_Embed> embeds = new ArrayList<Embed_Embed>();\n+\n+    @ElementCollection(fetch=FetchType.EAGER)\n+    @CollectionTable(name=\"EMBED1ToOneS2\") // use default join column name\n+    @AttributeOverrides({\n+        @AttributeOverride(name=\"name1\", column=@Column(name=\"EMB_NAME1\")),\n+        @AttributeOverride(name=\"name2\", column=@Column(name=\"EMB_NAME2\")),\n+        @AttributeOverride(name=\"name3\", column=@Column(name=\"EMB_NAME3\"))\n+    })\n+    protected Set<Embed_ToOne> embed1s = new HashSet<Embed_ToOne>();\n+\n+    private transient Integer transientJavaValue;\n+\n+    @Transient\n+    private Integer transientValue;\n+\n+    \n+    /*\n+     * Getters/Setters\n+     */\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<String> getNickNames() {\n+        return nickNames;\n+    }\n+    \n+    public void addNickName(String nickName) {\n+        nickNames.add(nickName);\n+    }\n+\n+    public List<CreditRating> getCreditRating() {\n+        return cr;\n+    }\n+    \n+    public void addCreditRating(CreditRating c) {\n+        cr.add(c);\n+    }\n+    \n+    public List<Timestamp> getTimestamps() {\n+        return ts;\n+    }\n+    \n+    public void addTimestamp(Timestamp t) {\n+        ts.add(t);\n+    }\n+    \n+    public List<String> getLobs() {\n+        return lobs;\n+    }\n+    \n+    public void addLob(String lob) {\n+        lobs.add(lob);\n+    }\n+\n+    public enum CreditRating { POOR, GOOD, EXCELLENT };\n+    \n+    public Embed_Embed getEmbed() {\n+        return embed;\n+    }\n+    \n+    public void setEmbed(Embed_Embed embed) {\n+        this.embed = embed;\n+    }\n+\n+    public List<Embed_Embed> getEmbeds() {\n+        return embeds;\n+    }\n+    \n+    public void addEmbed(Embed_Embed embed) {\n+        embeds.add(embed);\n+    }\n+\n+    public Set<Embed_ToOne> getEmbed1ToOnes() {\n+        return embed1s;\n+    }\n+    \n+    public void addEmbed1ToOnes(Embed_ToOne embed1) {\n+        embed1s.add(embed1);\n+    }\n+\n+    public Integer getTransientJavaValue() {\n+        return this.transientJavaValue;\n+    }\n+\n+    public void setTransientJavaValue(Integer transientJavaValue) {\n+        this.transientJavaValue = transientJavaValue;\n+    }\n+\n+    public Integer getTransientValue() {\n+        return this.transientValue;\n+    }\n+\n+    public void setTransientValue(Integer transientValue) {\n+        this.transientValue = transientValue;\n+    }\n+}"},{"sha":"09cfec7e240b3ab2a44941155f3ea2e0ec7e18bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":241,"deletions":4,"changes":245,"blob_url":"https://github.com/apache/openjpa/blob/30a7da0ba2c8f946d064dec4081d75a6fe380e30/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/30a7da0ba2c8f946d064dec4081d75a6fe380e30/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=30a7da0ba2c8f946d064dec4081d75a6fe380e30","patch":"@@ -19,8 +19,10 @@\n package org.apache.openjpa.persistence.embed;\n \n import java.sql.Timestamp;\n+import java.util.Calendar;\n import java.util.Collection;\n import java.util.Date;\n+import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -32,11 +34,13 @@\n import javax.persistence.Query;\n \n \n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.ArgumentException;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestEmbeddable extends SingleEMFTestCase {\n-   \n+    private static final Calendar cal = new GregorianCalendar();\n+    private static final Integer timeHash = new Integer(cal.hashCode());\n     public int numEmbeddables = 1;\n     public int numBasicTypes = 1;\n     public int numProgramManagers = 2;\n@@ -86,7 +90,8 @@ public void setUp() {\n             VicePresident.class, EntityA_Embed_MappedToOne.class,\n             Embed_MappedToOne.class, Embed_MappedToOneCascadeDelete.class, \n             EntityA_Embed_MappedToOneCascadeDelete.class, EntityB2.class, \n-            Book.class, Listing.class, Seller.class, DROP_TABLES);\n+            Book.class, Listing.class, Seller.class,\n+            EntityA_Embed_Complex.class, CLEAR_TABLES);\n     }\n     \n     public void testEntityA_Coll_String() {\n@@ -185,6 +190,7 @@ public void testEntityA_Embed_MappedToOneCascadeDelete() {\n     public void testEmbeddableContainingRelationWithGeneratedKey() {\n         createEmbeddableContainingRelationWithGeneratedKey();\n     }\n+\n     /*\n      * Create EntityA_Coll_String\n      */\n@@ -2524,7 +2530,8 @@ public void queryVicePresident(EntityManagerFactory emf) {\n         }\n         tran.commit();\n         em.close();\n-    }        \n+    }\n+    \n     public void createEmbeddableContainingRelationWithGeneratedKey() {\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();\n@@ -2548,6 +2555,236 @@ public void createEmbeddableContainingRelationWithGeneratedKey() {\n             assertNotNull(seller);\n             assertTrue(seller.getId() != 0);\n         }\n-        \n+    }\n+\n+    /*\n+     * EntityA_Embed_Complex routines\n+     */\n+    public void testEntityA_Embed_Complex() {\n+        getLog().trace(\"testEntityA_Embed_Complex() - entered\");\n+        createEntityA_Embed_Complex(null);\n+        queryEntityA_Embed_Complex(null);\n+        findEntityA_Embed_Complex(null);\n+    }\n+\n+    public void testEntityA_Embed_Complex2() {\n+        getLog().trace(\"testEntityA_Embed_Complex2() - entered\");\n+        EntityManager em = emf.createEntityManager();\n+        em.clear();\n+        createEntityA_Embed_Complex(em);\n+        em.clear();\n+        //queryEntityA_Embed_Complex(em);\n+        //em.clear();\n+        findEntityA_Embed_Complex(em);\n+        em.clear();\n+        updateEntityA_Embed_Complex(em);\n+        em.clear();\n+        findEntityA_Embed_Complex(em);\n+        em.clear();\n+        removeEntityA_Embed_Complex(em);\n+        em.close();\n+    }\n+\n+    public void createEntityA_Embed_Complex(EntityManager em) {\n+        Boolean emClose = false;\n+        if (em == null) {\n+            em = emf.createEntityManager();\n+            emClose = true;\n+        }\n+        em.getTransaction().begin();\n+        createEntityA_Embed_Complex(em, ID);\n+        //em.getTransaction().begin();\n+        em.flush();\n+        em.getTransaction().commit();\n+        if (emClose) {\n+            em.close();\n+        }\n+    }\n+\n+    public void createEntityA_Embed_Complex(EntityManager em, int id) {\n+        getLog().trace(\"createEntityA_Embed_Complex() - entered\");\n+        EntityA_Embed_Complex a = new EntityA_Embed_Complex();\n+        a.setId(id);\n+        a.setName(\"a\" + id);\n+        a.setAge(id);\n+        for (int i = 0; i < numBasicTypes; i++) {\n+            a.addNickName(\"nickName_\" + id + i);\n+        }\n+        a.addCreditRating(EntityA_Embed_Complex.CreditRating.POOR);\n+        a.addTimestamp(new Timestamp(cal.getTimeInMillis()));\n+        a.addLob(\"lob_0\");\n+        a.setEmbed(createEmbed_Embed(em, numEmbeddables, 0));\n+        for (int i = 0; i < numEmbeddables; i++) {\n+            Embed_Embed embed = createEmbed_Embed(em, id, i);\n+            a.addEmbed(embed);\n+        }\n+        for (int i = 0; i < numEmbeddables; i++) {\n+            Embed_ToOne embed = createEmbed_ToOne(em, i+id);\n+            a.addEmbed1ToOnes(embed);\n+        }\n+        a.setTransientJavaValue(timeHash);\n+        a.setTransientValue(timeHash);\n+        em.persist(a);\n+    }\n+\n+    public void checkEntityA_Embed_Complex(EntityA_Embed_Complex a) {\n+        getLog().trace(\"checkEntityA_Embed_Complex() - entered\");\n+        int id = a.getId();\n+        String name = a.getName();\n+        int age = a.getAge();\n+        assertEquals(ID, id);\n+        assertEquals(\"a\" + id ,name);\n+        assertEquals(ID, age);\n+        Set<String> nickNames = a.getNickNames();\n+        for (String nickName : nickNames) {\n+            assertEquals(\"nickName_\" + id + \"0\", nickName);\n+        }\n+        List<EntityA_Embed_Complex.CreditRating> cr = a.getCreditRating();\n+        for (EntityA_Embed_Complex.CreditRating c : cr) {\n+            assertEquals(\"POOR\", c.toString());\n+        }\n+        List<Timestamp> tstamps = a.getTimestamps();\n+        for (Timestamp ts : tstamps) {\n+            assertNotEquals(0, ts.getTime());\n+        }\n+        List<String> lobs = a.getLobs();\n+        int i = 0;\n+        for (String lob : lobs) {\n+            assertEquals(\"lob_\" + i++, lob);\n+        }\n+        Embed_Embed embedded = a.getEmbed();\n+        checkEmbed_Embed(embedded);\n+        List<Embed_Embed> embeds = a.getEmbeds();\n+        for (Embed_Embed embed : embeds) {\n+            checkEmbed_Embed(embed);\n+        }\n+        Set<Embed_ToOne> embedOnes = a.getEmbed1ToOnes();\n+        for (Embed_ToOne embed : embedOnes) {\n+            checkEmbed_ToOne(embed);\n+        }\n+        assertNotEquals(a.getTransientJavaValue(), timeHash);\n+        assertNotEquals(a.getTransientValue(), timeHash);\n+    }\n+\n+    public void findEntityA_Embed_Complex(EntityManager em) {\n+        Boolean emClose = false;\n+        getLog().trace(\"findEntityA_Embed_Complex() - entered\");\n+        if (em == null) {\n+            em = emf.createEntityManager();\n+            emClose = true;\n+        }\n+        EntityA_Embed_Complex a = em.find(EntityA_Embed_Complex.class, ID);\n+        checkEntityA_Embed_Complex(a);\n+        if (emClose) {\n+            em.close();\n+        }\n+    }\n+\n+    public void updateEntityA_Embed_Complex(EntityManager em) {\n+        Boolean emClose = false;\n+        getLog().trace(\"updateEntityA_Embed_Complex() - entered\");\n+        if (em == null) {\n+            em = emf.createEntityManager();\n+            emClose = true;\n+        }\n+        em.getTransaction().begin();\n+        EntityA_Embed_Complex a = em.find(EntityA_Embed_Complex.class, ID);\n+        checkEntityA_Embed_Complex(a);\n+        for (int i = 1; i < numEmbeddables; i++) {\n+            a.addLob(\"lob_\" + i);\n+        }\n+        a.setTransientJavaValue(2009);\n+        a.setTransientValue(2009);\n+        em.persist(a);\n+        em.flush();\n+        em.getTransaction().commit();\n+        if (emClose) {\n+            em.close();\n+        }\n+    }\n+\n+    public void removeEntityA_Embed_Complex(EntityManager em) {\n+        Boolean emClose = false;\n+        getLog().trace(\"removeEntityA_Embed_Complex() - entered\");\n+        if (em == null) {\n+            em = emf.createEntityManager();\n+            emClose = true;\n+        }\n+        em.getTransaction().begin();\n+        EntityA_Embed_Complex a = em.find(EntityA_Embed_Complex.class, ID);\n+        checkEntityA_Embed_Complex(a);\n+        em.remove(a);\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.clear();\n+        a = em.find(EntityA_Embed_Complex.class, ID);\n+        assertNull(\"Entity should no longer exist\", a);\n+        if (emClose) {\n+            em.close();\n+        }\n+    }\n+\n+    public void queryEntityA_Embed_Complex(EntityManager em) {\n+        Boolean emClose = false;\n+        getLog().trace(\"queryEntityA_Embed_Complex() - entered\");\n+        if (em == null) {\n+            em = emf.createEntityManager();\n+            emClose = true;\n+        }\n+        String[] query = {\n+            \"select e from \" +\n+                \" EntityA_Embed_Complex a \" +\n+                \" , in (a.nickNames) e order by a.id\",\n+            \"select e from \" +\n+                \" EntityA_Embed_Complex a \" +\n+                \" , in (a.nickNames) e order by a.id\",\n+            \"select e from \" +\n+                \" EntityA_Embed_Complex a \" +\n+                \" , in (a.nickNames) e order by e\",\n+            \"select a from \" +\n+                \" EntityA_Embed_Complex a \" +\n+                \" WHERE a.nickNames IS EMPTY order by a\",\n+            \"select a from \" +\n+                \" EntityA_Embed_Complex a \" +\n+                \" WHERE exists (select n from EntityA_Embed_Complex a, \" +\n+                \" in (a.nickNames) n where n like '%1') \" +\n+                \" order by a\",\n+        };\n+        List rs = null;\n+        for (int i = 0; i < query.length; i++) {\n+            rs = em.createQuery(query[i]).getResultList();\n+            switch (i) {\n+            case 0:\n+            case 1:\n+            case 2:\n+                assertTrue(rs.size() > 0);\n+                Object obj = rs.get(0);\n+                assertTrue(obj instanceof String);\n+                break;\n+            case 3:\n+            case 4:\n+                assertTrue(rs.size() == 0);\n+            }\n+            em.clear();\n+        }\n+        em.getTransaction().begin();\n+        Query q = em.createQuery(\"select a from EntityA_Embed_Complex a\");\n+        List<EntityA_Embed_Complex> as = q.getResultList();\n+        for (EntityA_Embed_Complex a : as) {\n+            checkEntityA_Embed_Complex(a);\n+        }\n+        em.getTransaction().commit();\n+        if (emClose) {\n+            em.close();\n+        }\n+    }\n+    \n+    /**\n+     * Internal convenience method for getting the OpenJPA logger\n+     * \n+     * @return\n+     */\n+    private Log getLog() {\n+        return emf.getConfiguration().getLog(\"Tests\");\n     }\n }"}]}

