{"sha":"30c443dcc32fdc43b75431c9579f8ca415421d17","node_id":"C_kwDOAAMmHNoAKDMwYzQ0M2RjYzMyZmRjNDNiNzU0MzFjOTU3OWY4Y2E0MTU0MjFkMTc","commit":{"author":{"name":"Will Dazey","email":"dazeydev.3@gmail.com","date":"2021-10-18T18:05:17Z"},"committer":{"name":"Will Dazey","email":"dazeydev.3@gmail.com","date":"2021-10-20T19:55:24Z"},"message":"OPENJPA-2882: Exception passing javax.persistence.* String values to createEntityManager(Map)\n\nSigned-off-by: Will Dazey <dazeydev.3@gmail.com>","tree":{"sha":"25d18f27900d27f6ed8653bb6add759d29bcb7f6","url":"https://api.github.com/repos/apache/openjpa/git/trees/25d18f27900d27f6ed8653bb6add759d29bcb7f6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/30c443dcc32fdc43b75431c9579f8ca415421d17","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/30c443dcc32fdc43b75431c9579f8ca415421d17","html_url":"https://github.com/apache/openjpa/commit/30c443dcc32fdc43b75431c9579f8ca415421d17","comments_url":"https://api.github.com/repos/apache/openjpa/commits/30c443dcc32fdc43b75431c9579f8ca415421d17/comments","author":{"login":"dazey3","id":3675328,"node_id":"MDQ6VXNlcjM2NzUzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/3675328?v=4","gravatar_id":"","url":"https://api.github.com/users/dazey3","html_url":"https://github.com/dazey3","followers_url":"https://api.github.com/users/dazey3/followers","following_url":"https://api.github.com/users/dazey3/following{/other_user}","gists_url":"https://api.github.com/users/dazey3/gists{/gist_id}","starred_url":"https://api.github.com/users/dazey3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dazey3/subscriptions","organizations_url":"https://api.github.com/users/dazey3/orgs","repos_url":"https://api.github.com/users/dazey3/repos","events_url":"https://api.github.com/users/dazey3/events{/privacy}","received_events_url":"https://api.github.com/users/dazey3/received_events","type":"User","site_admin":false},"committer":{"login":"dazey3","id":3675328,"node_id":"MDQ6VXNlcjM2NzUzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/3675328?v=4","gravatar_id":"","url":"https://api.github.com/users/dazey3","html_url":"https://github.com/dazey3","followers_url":"https://api.github.com/users/dazey3/followers","following_url":"https://api.github.com/users/dazey3/following{/other_user}","gists_url":"https://api.github.com/users/dazey3/gists{/gist_id}","starred_url":"https://api.github.com/users/dazey3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dazey3/subscriptions","organizations_url":"https://api.github.com/users/dazey3/orgs","repos_url":"https://api.github.com/users/dazey3/repos","events_url":"https://api.github.com/users/dazey3/events{/privacy}","received_events_url":"https://api.github.com/users/dazey3/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2a95194349ea1cae59211247a12560a26b64f0c","url":"https://api.github.com/repos/apache/openjpa/commits/b2a95194349ea1cae59211247a12560a26b64f0c","html_url":"https://github.com/apache/openjpa/commit/b2a95194349ea1cae59211247a12560a26b64f0c"}],"stats":{"total":95,"additions":94,"deletions":1},"files":[{"sha":"bcff7b19685e2a07e1538515dd6754afe69c6d1a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/property/TestEMProperties.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/30c443dcc32fdc43b75431c9579f8ca415421d17/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/property/TestEMProperties.java","raw_url":"https://github.com/apache/openjpa/raw/30c443dcc32fdc43b75431c9579f8ca415421d17/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/property/TestEMProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/property/TestEMProperties.java?ref=30c443dcc32fdc43b75431c9579f8ca415421d17","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agEmployee_Last_Name to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.property;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <b>TestEMProperties</b> is used to test various persistence properties set through EntityManager.setProperty() API\n+ * to ensure no errors are thrown.\n+ */\n+public class TestEMProperties extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(EntityContact.class,\n+              EmbeddableAddress.class,\n+              DROP_TABLES, \"javax.persistence.query.timeout\", 23456);\n+    }\n+\n+    public void testQueryTimeoutPropertyDefault() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        String sql = \"select * from EntityContact\";\n+        OpenJPAQuery<?> query = OpenJPAPersistence.cast(em.createNativeQuery(sql));\n+        assertEquals(23456, query.getFetchPlan().getQueryTimeout());\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public void testQueryTimeoutPropertyOnEntityManagerCreation() {\n+        Map<String, Object> properties = new HashMap<String, Object>();\n+        properties.put(\"javax.persistence.query.timeout\", \"12345\");\n+        // Setting a value of type String should convert if possible and not return an error\n+        EntityManager em = emf.createEntityManager(properties);\n+\n+        String sql = \"select * from EntityContact\";\n+        OpenJPAQuery<?> query = OpenJPAPersistence.cast(em.createNativeQuery(sql));\n+        assertEquals(12345, query.getFetchPlan().getQueryTimeout());\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public void testQueryTimeoutPropertySetOnEntityManager() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // Setting a value of type String should convert if possible and not return an error\n+        em.setProperty(\"javax.persistence.query.timeout\", \"12345\");\n+\n+        String sql = \"select * from EntityContact\";\n+        OpenJPAQuery<?> query = OpenJPAPersistence.cast(em.createNativeQuery(sql));\n+        assertEquals(12345, query.getFetchPlan().getQueryTimeout());\n+\n+        em.clear();\n+        em.close();\n+    }\n+}"},{"sha":"162003c1ad0253734c3c21cf33d20f0aaac3ece0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/30c443dcc32fdc43b75431c9579f8ca415421d17/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","raw_url":"https://github.com/apache/openjpa/raw/30c443dcc32fdc43b75431c9579f8ca415421d17/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java?ref=30c443dcc32fdc43b75431c9579f8ca415421d17","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.util.HashMap;\n import java.util.Locale;\n import java.util.Map;\n@@ -134,8 +136,18 @@ public static String getBeanProperty(String key) {\n             } else if (value instanceof CacheStoreMode || (value instanceof String && CACHE_STORE_MODE.equals(key))) {\n                 return (T)DataCacheStoreMode.valueOf(value.toString().trim().toUpperCase(Locale.ENGLISH));\n             }\n+\n+            // If the value doesn't match the result type, attempt to convert\n+            if(resultType != null && !resultType.isAssignableFrom(value.getClass())) {\n+                if (value instanceof String) {\n+                    if (\"null\".equals(value)) {\n+                        return null;\n+                    }\n+                    return StringUtil.parse((String) value, resultType);\n+                }\n+            }\n         }\n-        return (T)value;\n+        return (T) value;\n     }\n \n     /**"}]}

