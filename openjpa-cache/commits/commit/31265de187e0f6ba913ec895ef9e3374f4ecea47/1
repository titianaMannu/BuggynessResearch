{"sha":"31265de187e0f6ba913ec895ef9e3374f4ecea47","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxMjY1ZGUxODdlMGY2YmE5MTNlYzg5NWVmOWUzMzc0ZjRlY2VhNDc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-09T18:36:10Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-09T18:36:10Z"},"message":"OPENJPA-1496: fix temporal parameter processing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908150 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"878431201aaa24c51d8589445123c855c032a3e0","url":"https://api.github.com/repos/apache/openjpa/git/trees/878431201aaa24c51d8589445123c855c032a3e0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31265de187e0f6ba913ec895ef9e3374f4ecea47","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31265de187e0f6ba913ec895ef9e3374f4ecea47","html_url":"https://github.com/apache/openjpa/commit/31265de187e0f6ba913ec895ef9e3374f4ecea47","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31265de187e0f6ba913ec895ef9e3374f4ecea47/comments","author":null,"committer":null,"parents":[{"sha":"d3b3ee04389520f121eeb1684780e77f3fb75f94","url":"https://api.github.com/repos/apache/openjpa/commits/d3b3ee04389520f121eeb1684780e77f3fb75f94","html_url":"https://github.com/apache/openjpa/commit/d3b3ee04389520f121eeb1684780e77f3fb75f94"}],"stats":{"total":232,"additions":228,"deletions":4},"files":[{"sha":"d84484b0c98f3b3791f2dfa03e5434ef843be632","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/31265de187e0f6ba913ec895ef9e3374f4ecea47/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/31265de187e0f6ba913ec895ef9e3374f4ecea47/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=31265de187e0f6ba913ec895ef9e3374f4ecea47","patch":"@@ -238,6 +238,12 @@ public static boolean canConvert(Class<?> c1, Class<?> c2, boolean strict) {\n             return !strict;\n         if (c1 == String.class && isTemporalType(c2))\n             return true;\n+        if ((c1 == java.util.Date.class ||c1 == java.sql.Time.class) && c2 == java.sql.Timestamp.class)\n+            return false;\n+        if ((c1 == java.util.Date.class ||c1 == java.sql.Timestamp.class) && c2 == java.sql.Time.class)\n+            return false;\n+        if (isTemporalType(c1) && isTemporalType(c2))\n+            return true;\n         return false;\n     }\n \n@@ -972,7 +978,8 @@ public static boolean isTemporalType(Class<?> c) {\n         return c != null \n             && (Date.class.isAssignableFrom(c) \n              || Time.class.isAssignableFrom(c) \n-             || Timestamp.class.isAssignableFrom(c));\n+             || Timestamp.class.isAssignableFrom(c)\n+             || Calendar.class.isAssignableFrom(c));\n     }\n     \n     public static Object getDefaultForNull(Class<?> nType) {"},{"sha":"7daebdc8f0ef28d52c51efcdf78d82a57d2e8bea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","status":"modified","additions":87,"deletions":3,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/31265de187e0f6ba913ec895ef9e3374f4ecea47/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/31265de187e0f6ba913ec895ef9e3374f4ecea47/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java?ref=31265de187e0f6ba913ec895ef9e3374f4ecea47","patch":"@@ -28,6 +28,7 @@\n import javax.persistence.TemporalType;\n \n import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.jdbc.query.domain.TimeEntity;\n import org.apache.openjpa.persistence.jdbc.query.domain.TimeKeeper;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -63,16 +64,27 @@\n \tprivate EntityManager em;\n \t@Override\n \tpublic void setUp() throws Exception {\n-\t\tsuper.setUp(CLEAR_TABLES, TimeKeeper.class);\n+\t\tsuper.setUp(CLEAR_TABLES, TimeKeeper.class, TimeEntity.class);\n \t\tem = emf.createEntityManager();\n \t\t\n \t\tTimeKeeper pc = new TimeKeeper();\n \t\tpc.setDate(VALUE_DATE);\n \t\tpc.setTime(VALUE_TIME);\n \t\tpc.setTstamp(VALUE_TSTAMP);\n-\t\t\n+\n+        TimeEntity te = new TimeEntity();\n+        te.setName(\"name1\");\n+        te.setValue(1);\n+        te.setCal2Timestamp(PARAM_CALENDAR);\n+        te.setCal2Time(PARAM_CALENDAR);\n+        te.setCal2Date(PARAM_CALENDAR);\n+\t\tte.setUDate2SDate(VALUE_DATE);\n+\t\tte.setUDate2Time(VALUE_DATE);\n+\t\tte.setUDate2Timestamp(VALUE_DATE);\n+        \n \t\tem.getTransaction().begin();\n \t\tem.persist(pc);\n+\t\tem.persist(te);\n \t\tem.getTransaction().commit();\n \t}\n \t\n@@ -173,7 +185,61 @@ public void testPositionalParameterWithMismatchedValue() {\n         }\n \t}\n \t\n-\tvoid verifyParams(String jpql, Class<? extends Exception> error,\n+    public void testTemporalType() {\n+        EntityManager em = emf.createEntityManager(); \n+        Calendar endTime = PARAM_CALENDAR;\n+        Calendar startTime = PARAM_CALENDAR;\n+        startTime.add(14, -4);\n+        \n+        //(1) Calendar to Timestamp\n+        String jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.cal2Timestamp BETWEEN ?1 AND ?2\";\n+        Query q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startTime, TemporalType.TIMESTAMP);\n+        assertSetTemporalParameter(q, 2, endTime, TemporalType.TIMESTAMP);\n+        assertEquals(1, q.getResultList().size());\n+         \n+        //(2) Calendar to Time\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.cal2Time BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startTime, TemporalType.TIME);\n+        assertSetTemporalParameter(q, 2, endTime, TemporalType.TIME);\n+        assertEquals(1, q.getResultList().size());\n+        \n+        //(3)Calendar to Date\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.cal2Date BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startTime, TemporalType.DATE);\n+        assertSetTemporalParameter(q, 2, endTime, TemporalType.DATE);\n+        q.setParameter(1, startTime, TemporalType.DATE);\n+        q.setParameter(2, endTime, TemporalType.DATE);\n+        assertEquals(1, q.getResultList().size());\n+ \n+        //(4)Date to Timestamp\n+        java.util.Date endDate = VALUE_DATE;\n+        java.util.Date startDate = new Date(T1 - 1000);\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.udate2Timestamp BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startDate, TemporalType.TIMESTAMP);\n+        assertSetTemporalParameter(q, 2, endDate, TemporalType.TIMESTAMP);\n+        assertEquals(1, q.getResultList().size());\n+        \n+        //(5) Date to Time\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.udate2Time BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startDate, TemporalType.TIME);\n+        assertSetTemporalParameter(q, 2, endDate, TemporalType.TIME);\n+        assertEquals(1, q.getResultList().size());\n+        \n+        //(6) Date to Date\n+        jpql = \"SELECT COUNT(a) FROM TimeEntity a WHERE a.udate2SDate BETWEEN ?1 AND ?2\";\n+        q = em.createQuery(jpql);\n+        assertSetTemporalParameter(q, 1, startDate, TemporalType.DATE);\n+        assertSetTemporalParameter(q, 2, endDate, TemporalType.DATE);\n+        assertEquals(1, q.getResultList().size());\n+    }\n+    \n+\n+    void verifyParams(String jpql, Class<? extends Exception> error,\n         Object... params) {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -198,4 +264,22 @@ void verifyParams(String jpql, Class<? extends Exception> error,\n \t\t}\n \t\tem.getTransaction().commit();\n \t}\n+    \n+    void assertSetTemporalParameter(Query q, int pos, Date v, TemporalType temporalType) {\n+        try {\n+            q.setParameter(pos, v, temporalType);\n+        } catch (Exception e) {\n+            fail(\"Fail in setting positional parameter [\" + pos + \"] to a value of \" + v);\n+        }\n+    }\n+\n+    void assertSetTemporalParameter(Query q, int pos, Calendar v, TemporalType temporalType) {\n+        try {\n+            q.setParameter(pos, v, temporalType);\n+        } catch (Exception e) {\n+            fail(\"Fail in setting positional parameter [\" + pos + \"] to a value of \" + v);\n+        }\n+    }\n+\n+    \n }"},{"sha":"90ce7a30a3fba06dc3e1d52ed8323d2f66ced082","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeEntity.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/31265de187e0f6ba913ec895ef9e3374f4ecea47/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeEntity.java","raw_url":"https://github.com/apache/openjpa/raw/31265de187e0f6ba913ec895ef9e3374f4ecea47/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeEntity.java?ref=31265de187e0f6ba913ec895ef9e3374f4ecea47","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.domain;\n+\n+import java.util.Calendar;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+public class TimeEntity {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+    String name;\n+    \n+    int value;\n+    \n+    @Temporal(TemporalType.TIMESTAMP)\n+    private java.util.Calendar cal2Timestamp;\n+\n+    @Temporal(TemporalType.TIME)\n+    private java.util.Calendar cal2Time;\n+\n+    @Temporal(TemporalType.DATE)\n+    private java.util.Calendar cal2Date;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private java.util.Date udate2Timestamp;\n+\n+    @Temporal(TemporalType.TIME)\n+    private java.util.Date udate2Time;\n+\n+    @Temporal(TemporalType.DATE)\n+    private java.util.Date udate2SDate;\n+\n+    public TimeEntity() {\n+    }\n+\n+    public TimeEntity(int id, String name, int value) {\n+        this.id = id;\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public int getValue() {\n+        return value;\n+    }\n+    \n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+    \n+    public Calendar getCal2Timestamp() {\n+        return cal2Timestamp;\n+    }\n+\n+    public void setCal2Timestamp(Calendar cal2Timestamp) {\n+        this.cal2Timestamp = cal2Timestamp;\n+    }\n+\n+    public Calendar getCal2Time() {\n+        return cal2Time;\n+    }\n+\n+    public void setCal2Time(Calendar cal2Time) {\n+        this.cal2Time = cal2Time;\n+    }\n+\n+    public Calendar getCal2Date() {\n+        return cal2Date;\n+    }\n+\n+    public void setCal2Date(Calendar cal2Date) {\n+        this.cal2Date = cal2Date;\n+    }\n+\n+    public java.util.Date getUDate2Timestamp() {\n+        return udate2Timestamp;\n+    }\n+\n+    public void setUDate2Timestamp(java.util.Date udate2Timestamp) {\n+        this.udate2Timestamp = udate2Timestamp;\n+    }\n+\n+    public java.util.Date getUDate2Time() {\n+        return udate2Time;\n+    }\n+\n+    public void setUDate2Time(java.util.Date udate2Time) {\n+        this.udate2Time = udate2Time;\n+    }\n+\n+    public java.util.Date getUDate2SDate() {\n+        return udate2SDate;\n+    }\n+\n+    public void setUDate2SDate(java.util.Date udate2SDate) {\n+        this.udate2SDate = udate2SDate;\n+    }\n+}"}]}

