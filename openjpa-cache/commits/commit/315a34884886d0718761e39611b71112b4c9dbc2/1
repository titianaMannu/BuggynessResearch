{"sha":"315a34884886d0718761e39611b71112b4c9dbc2","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxNWEzNDg4NDg4NmQwNzE4NzYxZTM5NjExYjcxMTEyYjRjOWRiYzI=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-27T15:08:07Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-03-27T15:08:07Z"},"message":"OPENJPA-417 - add openjpa.Compability(StoreMapCollectionInEntityAsBlob=true) option to enable map/collection stores as Blob in the database. This allows existing application continues to work.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@641842 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d3b8ee0cc7dd06ca758450a7ce533c8f3d919ae2","url":"https://api.github.com/repos/apache/openjpa/git/trees/d3b8ee0cc7dd06ca758450a7ce533c8f3d919ae2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/315a34884886d0718761e39611b71112b4c9dbc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/315a34884886d0718761e39611b71112b4c9dbc2","html_url":"https://github.com/apache/openjpa/commit/315a34884886d0718761e39611b71112b4c9dbc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/315a34884886d0718761e39611b71112b4c9dbc2/comments","author":null,"committer":null,"parents":[{"sha":"dbb722f5eca9d0e8b45080adb38faa939ac105f7","url":"https://api.github.com/repos/apache/openjpa/commits/dbb722f5eca9d0e8b45080adb38faa939ac105f7","html_url":"https://github.com/apache/openjpa/commit/dbb722f5eca9d0e8b45080adb38faa939ac105f7"}],"stats":{"total":84,"additions":83,"deletions":1},"files":[{"sha":"8e2236ab9281d4c38b1a08709d44927add4eb525","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/315a34884886d0718761e39611b71112b4c9dbc2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/315a34884886d0718761e39611b71112b4c9dbc2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=315a34884886d0718761e39611b71112b4c9dbc2","patch":"@@ -883,6 +883,9 @@ protected FieldStrategy defaultTypeStrategy(FieldMapping field,\n      */\n     protected FieldStrategy handlerCollectionStrategy(FieldMapping field, \n         ValueHandler ehandler, boolean installHandlers) {\n+        if (getConfiguration().getCompatibilityInstance()\n+            .isStoreMapCollectionInEntityAsBlob())\n+            return null;\n         if (installHandlers)\n             field.getElementMapping().setHandler(ehandler);\n         return new HandlerCollectionTableFieldStrategy();\n@@ -895,6 +898,9 @@ protected FieldStrategy handlerCollectionStrategy(FieldMapping field,\n     protected FieldStrategy handlerMapStrategy(FieldMapping field, \n         ValueHandler khandler, ValueHandler vhandler, boolean krel, \n         boolean vrel,  boolean installHandlers) {\n+        if (getConfiguration().getCompatibilityInstance()\n+            .isStoreMapCollectionInEntityAsBlob())\n+            return null;\n         if (installHandlers) {\n             field.getKeyMapping().setHandler(khandler);\n             field.getElementMapping().setHandler(vhandler);\n@@ -1077,7 +1083,9 @@ protected ValueHandler defaultHandler(ValueMapping val, boolean adapting) {\n             case JavaTypes.OID:\n                 return new ObjectIdValueHandler();\n         }\n-        if (val.isEmbeddedPC())\n+        if (!getConfiguration().getCompatibilityInstance()\n+            .isStoreMapCollectionInEntityAsBlob()\n+            && val.isEmbeddedPC())\n             return new ElementEmbedValueHandler();\n         return null;\n     }"},{"sha":"36046db82df4e5349f79997cf9e98236f8aa4af8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/315a34884886d0718761e39611b71112b4c9dbc2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/315a34884886d0718761e39611b71112b4c9dbc2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=315a34884886d0718761e39611b71112b4c9dbc2","patch":"@@ -54,6 +54,7 @@\n     private boolean _quotedNumbers = false;\n     private boolean _nonOptimisticVersionCheck = false;\n     private int _jpql = JPQL_STRICT;\n+    private boolean _storeMapCollectionInEntityAsBlob = false;\n \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -215,4 +216,25 @@ else if (\"extended\".equals(jpql))\n         else\n             throw new IllegalArgumentException(jpql);\n     }\n+\n+    /**\n+     * Whether if map and collection in entity are stored as blob.\n+     * Defaults to <code>false</code>.\n+     *\n+     * @since 1.1.0 \n+     */\n+\n+    public boolean isStoreMapCollectionInEntityAsBlob() {\n+        return _storeMapCollectionInEntityAsBlob;\n+    }\n+\n+    /**\n+     * Whether if map and collection in entity are stored as blob.\n+     * Defaults to <code>false</code>.\n+     *\n+     * @since 1.1.0 \n+     */\n+    public void setStoreMapCollectionInEntityAsBlob(boolean storeAsBlob) {\n+        _storeMapCollectionInEntityAsBlob = storeAsBlob;\n+    }\n }"},{"sha":"f8bb7cb5171ce64ed0f6a53b96433a0c0a798f90","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/315a34884886d0718761e39611b71112b4c9dbc2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","raw_url":"https://github.com/apache/openjpa/raw/315a34884886d0718761e39611b71112b4c9dbc2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java?ref=315a34884886d0718761e39611b71112b4c9dbc2","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.sql.Types;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.HandlerFieldStrategy;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestMapCollectionToBlob\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(HandlerToHandlerMapInstance.class, CLEAR_TABLES,\r\n+            \"openjpa.Compatibility\", \"StoreMapCollectionInEntityAsBlob=true\");\r\n+    }\r\n+\r\n+    public void testHandlerToHandlerMaps() {\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n+            HandlerToHandlerMapInstance.class);\r\n+        FieldMapping fm = cm.getFieldMapping(\"map\");        \r\n+        assertEquals(HandlerFieldStrategy.class, fm.getStrategy().getClass());\r\n+        assertEquals(\"NONSTD_MAPPING_MAP\", fm.getTable().getName());\r\n+        assertEquals(fm.getTable().getColumn(\"MAP\").getType(), Types.BLOB);\r\n+\r\n+        HandlerToHandlerMapInstance o = new HandlerToHandlerMapInstance();\r\n+        o.getMap().put(\"foo\", \"bar\");\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\r"}]}

