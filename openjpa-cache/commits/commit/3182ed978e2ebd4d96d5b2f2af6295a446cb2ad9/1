{"sha":"3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxODJlZDk3OGUyZWJkNGQ5NmQ1YjJmMmFmNjI5NWE0NDZjYjJhZDk=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-05-08T07:48:08Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-05-08T07:48:08Z"},"message":"OPENJPA-1072: set up foreign key relationship for the relation within an embeddable in an element collection.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@772874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"525b7b3948399b37c7ff1aa9bb0f0d21b86956e5","url":"https://api.github.com/repos/apache/openjpa/git/trees/525b7b3948399b37c7ff1aa9bb0f0d21b86956e5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","html_url":"https://github.com/apache/openjpa/commit/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/comments","author":null,"committer":null,"parents":[{"sha":"da176436242634acefa16f18d246302f54d9160c","url":"https://api.github.com/repos/apache/openjpa/commits/da176436242634acefa16f18d246302f54d9160c","html_url":"https://github.com/apache/openjpa/commit/da176436242634acefa16f18d246302f54d9160c"}],"stats":{"total":310,"additions":296,"deletions":14},"files":[{"sha":"e3f505c91f80e2164fbb6ac2f449419ed460a01a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java?ref=3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","patch":"@@ -161,6 +161,15 @@ public ForeignKey getForeignKey(ClassMapping target) {\n             return getValueMappedByMapping().getForeignKey(target);\n         if (target == null)\n             return _fk;\n+        ClassMapping embeddedMeta = (ClassMapping)getEmbeddedMetaData(); \n+        if (embeddedMeta != null) {\n+            FieldMapping[] fields = embeddedMeta.getFieldMappings();\n+            for (int i = 0; i < fields.length; i++) {\n+                ValueMapping val = fields[i].getValueMapping(); \n+                if (val.getDeclaredTypeMapping() == target)\n+                    return val.getForeignKey();\n+            }\n+        }\n         if (_fk == null && _cols.length == 0)\n             return null;\n "},{"sha":"8e615181ac075f5cad3377569754a06886df1f61","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerCollectionTableFieldStrategy.java?ref=3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","patch":"@@ -146,18 +146,46 @@ private void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\n         row.setForeignKey(field.getJoinForeignKey(), field.getJoinColumnIO(),\n             sm);\n \n+        StoreContext ctx = sm.getContext();\n         ValueMapping elem = field.getElementMapping();\n         Column order = field.getOrderColumn();\n         boolean setOrder = field.getOrderColumnIO().isInsertable(order, false);\n         int idx = 0;\n         for (Iterator itr = coll.iterator(); itr.hasNext(); idx++) {\n-            HandlerStrategies.set(elem, itr.next(), store, row, _cols,\n+            Object val = itr.next();\n+            HandlerStrategies.set(elem, val, store, row, _cols,\n                 _io, true);\n+            StateManagerImpl esm = (StateManagerImpl)ctx.getStateManager(val);\n+            if (esm != null) {\n+                boolean isEmbedded = esm.isEmbedded();\n+                Collection rels = new ArrayList();\n+                if (isEmbedded) {\n+                    getRelations(esm, rels, ctx);\n+                    for (Object rel : rels) {\n+                        elem.setForeignKey(row, (StateManagerImpl)rel);\n+                    }\n+                }\n+            }\n             if (setOrder)\n                 row.setInt(order, idx);\n             rm.flushSecondaryRow(row);\n         }\n     }\n+    \n+    private void getRelations(StateManagerImpl sm, Collection rels, \n+        StoreContext ctx) {\n+        FieldMetaData[] fields = sm.getMetaData().getFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            Object obj = sm.fetch(i);\n+            StateManagerImpl esm = (StateManagerImpl)ctx.getStateManager(obj);\n+            if (esm != null) {\n+                if (!esm.isEmbedded())\n+                    rels.add(esm);\n+                else\n+                    getRelations(esm, rels, ctx);\n+            }    \n+        }\n+    }    \n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {"},{"sha":"9d4d13b7315d1c70e2236ae4bd9ddec07f98f6a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Book.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Book.java","raw_url":"https://github.com/apache/openjpa/raw/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Book.java?ref=3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name=\"BK_EMD\")\r\n+public class Book {\r\n+\t@Id\r\n+    @GeneratedValue(strategy=GenerationType.IDENTITY)\r\n+    private int id;\r\n+\t\r\n+    private long isbn;\r\n+\t\r\n+    @ElementCollection\r\n+    @CollectionTable(name=\"listing\")\r\n+    protected Set<Listing> listings = new HashSet<Listing>();\r\n+\r\n+    public Book(){}\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+    \r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+    \r\n+\tpublic Book(long isbn){\r\n+\t\tthis.isbn=isbn;\r\n+\t}\r\n+\t\r\n+\tpublic long getIsbc() {\r\n+\t    return isbn;\r\n+\t}\r\n+\t\r\n+\tpublic void setIsbc(long isbn) {\r\n+\t    this.isbn = isbn;\r\n+\t}\r\n+\t\r\n+\tpublic Set<Listing> getListings() {\r\n+\t    return listings;\r\n+\t}\r\n+\t\r\n+\tpublic void setListings(Set<Listing> listings) {\r\n+\t    this.listings = listings;\r\n+\t}\r\n+\t\r\n+\tpublic void addListing(Listing l){\r\n+\t\tlistings.add(l);\r\n+\t}\r\n+\t\r\n+\t\r\n+    public String toString(){\r\n+    \tString res =\"Book isbn: \" + isbn + \"\\nListings: \";\r\n+    \tfor(Listing l : listings){\r\n+    \t\tres+=\"\\t\"+l.toString() + \"\\n\";\r\n+    \t}\r\n+    \treturn res.substring(0, res.length()-2);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"60c1dc3a4f18dd193ac0e85ba74b99aaf3541be7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Listing.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Listing.java","raw_url":"https://github.com/apache/openjpa/raw/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Listing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Listing.java?ref=3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+\r\n+@Embeddable\r\n+public class Listing {\r\n+\t\r\n+\t@ManyToOne(cascade=CascadeType.ALL)\r\n+\tSeller seller;\r\n+\t\r\n+\tDouble price;\r\n+\t\r\n+\tString comments;\r\n+\t\r\n+\tpublic Listing(){}\r\n+\t\r\n+\tpublic Listing(Seller seller, Double price){\r\n+\t\tthis.price=price;\r\n+\t\tthis.seller=seller;\r\n+\t}\r\n+\t\r\n+\tpublic Seller getSeller() {\r\n+\t    return seller;\r\n+\t}\r\n+\t\r\n+\tpublic void setSeller(Seller seller) {\r\n+\t    this.seller = seller;\r\n+\t}\r\n+\t\r\n+\tpublic Double getPrice() {\r\n+\t    return price;\r\n+\t}\r\n+\t\r\n+\tpublic void setPrice(Double price) {\r\n+\t    this.price = price;\r\n+\t}\r\n+\t\r\n+\tpublic String getComments() {\r\n+\t    return comments;\r\n+\t}\r\n+\r\n+\tpublic void setComments(String comments) {\r\n+\t    this.comments = comments;\r\n+\t}\r\n+}\r"},{"sha":"44025c5e769ad54f411afd271be46420903b142e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Seller.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Seller.java","raw_url":"https://github.com/apache/openjpa/raw/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Seller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Seller.java?ref=3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","patch":"@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"SL_EMD\")\r\n+public class Seller {\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n+\tprivate int id;\r\n+\t\r\n+\tprivate String name;\r\n+\t\r\n+\tpublic Seller(){\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic Seller(String n){\r\n+\t\tname=n;\r\n+\t}\r\n+/*\t\r\n+    public Seller(String n, int id){\r\n+        name=n;\r\n+        this.id = id;\r\n+    }\r\n+*/\r\n+    public int getId() {\r\n+\t    return id;\r\n+\t}\r\n+/*\t\r\n+\tpublic void setId(int id) {\r\n+\t    this.id = id;\r\n+\t}\r\n+*/\t\r\n+\tpublic String getName() {\r\n+\t    return name;\r\n+\t}\r\n+\t\r\n+\tpublic void setName(String name) {\r\n+\t    this.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic String toString(){\r\n+\t\treturn \"Seller id: \" + id + \" name: \" + name;\r\n+\t}\r\n+\t\r\n+}\r"},{"sha":"73834dc50687f164bf830fd0e163ae57184cb8e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":41,"deletions":13,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=3182ed978e2ebd4d96d5b2f2af6295a446cb2ad9","patch":"@@ -31,7 +31,7 @@\n import javax.persistence.EntityTransaction;\n import javax.persistence.Query;\n \n-import junit.framework.Assert;\n+\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestEmbeddable extends SingleEMFTestCase {\n@@ -83,7 +83,7 @@ public void setUp() {\n             VicePresident.class, EntityA_Embed_MappedToOne.class,\n             Embed_MappedToOne.class, Embed_MappedToOneCascadeDelete.class, \n             EntityA_Embed_MappedToOneCascadeDelete.class, EntityB2.class, \n-            DROP_TABLES);\n+            Book.class, Listing.class, Seller.class, DROP_TABLES);\n     }\n     \n     public void testEntityA_Coll_String() {\n@@ -179,6 +179,9 @@ public void testEntityA_Embed_MappedToOneCascadeDelete() {\n         updateEntityA_Embed_MappedToOneCascadeDelete();\n     }\n     \n+    public void testEmbeddableContainingRelationWithGeneratedKey() {\n+        createEmbeddableContainingRelationWithGeneratedKey();\n+    }\n     /*\n      * Create EntityA_Coll_String\n      */\n@@ -1877,34 +1880,34 @@ public void findObjMapKey() {\n     public void assertDepartment1(Department1 d) {\n         int id = d.getDeptId();\n         Map<Integer, Employee1> es = d.getEmpMap();\n-        Assert.assertEquals(2,es.size());\n+        assertEquals(2,es.size());\n         Set keys = es.keySet();\n         for (Object obj : keys) {\n             Integer empId = (Integer) obj;\n             Employee1 e = es.get(empId);\n-            Assert.assertEquals(empId.intValue(), e.getEmpId());\n+            assertEquals(empId.intValue(), e.getEmpId());\n         }\n     }\n     \n     public void assertDepartment2(Department2 d) {\n         int id = d.getDeptId();\n         Map<EmployeePK2, Employee2> es = d.getEmpMap();\n-        Assert.assertEquals(2,es.size());\n+        assertEquals(2,es.size());\n         Set<EmployeePK2> keys = es.keySet();\n         for (EmployeePK2 pk : keys) {\n             Employee2 e = es.get(pk);\n-            Assert.assertEquals(pk, e.getEmpPK());\n+            assertEquals(pk, e.getEmpPK());\n         }\n     }   \n \n     public void assertDepartment3(Department3 d) {\n         int id = d.getDeptId();\n         Map<EmployeeName3, Employee3> es = d.getEmployees();\n-        Assert.assertEquals(2,es.size());\n+        assertEquals(2,es.size());\n         Set<EmployeeName3> keys = es.keySet();\n         for (EmployeeName3 key : keys) {\n             Employee3 e = es.get(key);\n-            Assert.assertEquals(key, e.getName());\n+            assertEquals(key, e.getName());\n         }\n     }\n     \n@@ -2010,31 +2013,31 @@ public void findObjMapKeyClass() {\n     public void assertItem1(Item1 item) {\n         int id = item.getId();\n         Map images = item.getImages();\n-        Assert.assertEquals(numImagesPerItem, images.size());\n+        assertEquals(numImagesPerItem, images.size());\n     }\n     \n     public void assertItem2(Item2 item) {\n         int id = item.getId();\n         Map images = item.getImages();\n-        Assert.assertEquals(numImagesPerItem, images.size());\n+        assertEquals(numImagesPerItem, images.size());\n     }\n \n     public void assertItem3(Item3 item) {\n         int id = item.getId();\n         Map images = item.getImages();\n-        Assert.assertEquals(numImagesPerItem, images.size());\n+        assertEquals(numImagesPerItem, images.size());\n     }\n \n     public void assertCompany1(Company1 c) {\n         int id = c.getId();\n         Map organization = c.getOrganization();\n-        Assert.assertEquals(2,organization.size());\n+        assertEquals(2,organization.size());\n     }\n     \n     public void assertCompany2(Company2 c) {\n         int id = c.getId();\n         Map organization = c.getOrganization();\n-        Assert.assertEquals(2,organization.size());\n+        assertEquals(2,organization.size());\n     }    \n     \n     public void assertDivision(Division d) {\n@@ -2145,4 +2148,29 @@ public void queryVicePresident(EntityManagerFactory emf) {\n         tran.commit();\n         em.close();\n     }        \n+    public void createEmbeddableContainingRelationWithGeneratedKey() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        \n+        Book b = new Book(1590596455);\n+        Seller bob = new Seller(\"Bob's books!\");\n+        Seller jim = new Seller(\"Jim's books!\");\n+        Seller mike = new Seller(\"Mikes's books!\");\n+        b.addListing(new Listing(bob , 44.15));\n+        b.addListing(new Listing(jim , 34.15));\n+        b.addListing(new Listing(mike , 14.15));\n+        em.getTransaction().begin();\n+        em.persist(b);\n+        em.getTransaction().commit();\n+        int id = b.getId();\n+        em.clear();\n+        Book b2 = em.find(Book.class, id);\n+        Set<Listing> listings = b2.getListings();\n+        for (Listing listing : listings) {\n+            Seller seller = listing.getSeller();\n+            assertNotNull(seller);\n+            assertTrue(seller.getId() != 0);\n+        }\n+        \n+    }\n }"}]}

