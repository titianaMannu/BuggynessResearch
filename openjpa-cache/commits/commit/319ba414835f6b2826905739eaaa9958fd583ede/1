{"sha":"319ba414835f6b2826905739eaaa9958fd583ede","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxOWJhNDE0ODM1ZjZiMjgyNjkwNTczOWVhYWE5OTU4ZmQ1ODNlZGU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-08-12T20:15:41Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-08-12T20:15:41Z"},"message":"OPENJPA-1765: Add locking to TableJDBCSeq to ensure thread safety.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@984943 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"88fb3e6cd7a854cfc1d44550bdc11916c86ae73d","url":"https://api.github.com/repos/apache/openjpa/git/trees/88fb3e6cd7a854cfc1d44550bdc11916c86ae73d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/319ba414835f6b2826905739eaaa9958fd583ede","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/319ba414835f6b2826905739eaaa9958fd583ede","html_url":"https://github.com/apache/openjpa/commit/319ba414835f6b2826905739eaaa9958fd583ede","comments_url":"https://api.github.com/repos/apache/openjpa/commits/319ba414835f6b2826905739eaaa9958fd583ede/comments","author":null,"committer":null,"parents":[{"sha":"a36ace562b0f634530773ee54eab14b73315d6a7","url":"https://api.github.com/repos/apache/openjpa/commits/a36ace562b0f634530773ee54eab14b73315d6a7","html_url":"https://github.com/apache/openjpa/commit/a36ace562b0f634530773ee54eab14b73315d6a7"}],"stats":{"total":145,"additions":133,"deletions":12},"files":[{"sha":"de4c27876d0428bd94631f84bb066121520926c2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/319ba414835f6b2826905739eaaa9958fd583ede/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/319ba414835f6b2826905739eaaa9958fd583ede/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=319ba414835f6b2826905739eaaa9958fd583ede","patch":"@@ -24,15 +24,15 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n-import java.util.HashMap;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import javax.transaction.NotSupportedException;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n-import org.apache.openjpa.jdbc.identifier.Normalizer;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.Normalizer;\n import org.apache.openjpa.jdbc.identifier.QualifiedDBIdentifier;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -71,9 +71,7 @@\n  *\n  * @author Abe White\n  */\n-public class TableJDBCSeq\n-    extends AbstractJDBCSeq\n-    implements Configurable {\n+public class TableJDBCSeq extends AbstractJDBCSeq implements Configurable {\n \n     public static final String ACTION_DROP = \"drop\";\n     public static final String ACTION_ADD = \"add\";\n@@ -88,8 +86,7 @@\n     private transient Log _log = null;\n     private int _alloc = 50;\n     private int _intValue = 1;\n-    private final HashMap<ClassMapping, Status> _stat =\n-        new HashMap<ClassMapping, Status>();\n+    private final ConcurrentHashMap<ClassMapping, Status> _stat = new ConcurrentHashMap<ClassMapping, Status>();\n \n     private DBIdentifier _table = DBIdentifier.newTable(DEFAULT_TABLE);\n     private DBIdentifier _seqColumnName = DBIdentifier.newColumn(\"SEQUENCE_VALUE\");\n@@ -286,8 +283,7 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         }\n     }\n \n-    protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n-        throws Exception {\n+    protected Object nextInternal(JDBCStore store, ClassMapping mapping) throws Exception {\n         // if needed, grab the next handful of ids\n         Status stat = getStatus(mapping);\n         if (stat == null)\n@@ -301,8 +297,8 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n                 stat.seq = Math.max(stat.seq, 1);\n                 if (stat.seq < stat.max)\n                     return stat.seq++;\n+                allocateSequence(store, mapping, stat, _alloc, true);\n             }\n-            allocateSequence(store, mapping, stat, _alloc, true);\n         }\n     }\n \n@@ -350,10 +346,15 @@ protected void allocateInternal(int count, JDBCStore store,\n      * if cannot handle the given class. The mapping may be null.\n      */\n     protected Status getStatus(ClassMapping mapping) {  \n-        Status status = (Status)_stat.get(mapping);        \n+        Status status = (Status) _stat.get(mapping);        \n         if (status == null){ \n             status = new Status();\n-            _stat.put(mapping, status);\n+            Status tStatus = _stat.putIfAbsent(mapping, status);\n+            // This can happen if another thread calls .put(..) sometime after our call to get. Return\n+            // the value from the putIfAbsent call as that is truly in the map.\n+            if (tStatus != null) {\n+                return tStatus;\n+            }\n         }\n         return status;\n     }"},{"sha":"9532815bad186267545cab55749e0be782ca1858","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGeneratorMultithreaded.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/319ba414835f6b2826905739eaaa9958fd583ede/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGeneratorMultithreaded.java","raw_url":"https://github.com/apache/openjpa/raw/319ba414835f6b2826905739eaaa9958fd583ede/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGeneratorMultithreaded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestTableGeneratorMultithreaded.java?ref=319ba414835f6b2826905739eaaa9958fd583ede","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.meta.SequenceMetaData;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestTableGeneratorMultithreaded extends SingleEMFTestCase {\n+    public final int ALLOC_SIZE = 100000;\n+    public final int INITIAL = 1;\n+    public final int LOOPS = 100000;\n+    public final int THREADS = 5;\n+\n+    public void setUp() {\n+        setUp(Dog.class, CLEAR_TABLES\n+        // , \"openjpa.Log\", \"SQL=trace\", \"openjpa.ConnectionFactoryProperties\",\"PrintParameters=true\"\n+        );\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        MetaDataRepository repo = emf.getConfiguration().getMetaDataRepositoryInstance();\n+        // Initialize MetaData\n+        repo.getMetaData(Dog.class, loader, true);\n+        repo.getSequenceMetaData(\"Dog_Gen\", loader, true);\n+\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testAllIdsAreUsed() throws Exception {\n+        List<WorkerThread> threads = new ArrayList<WorkerThread>();\n+        for (int i = 0; i < THREADS; i++) {\n+            threads.add(new WorkerThread(emf));\n+        }\n+        for (Thread t : threads) {\n+            t.start();\n+        }\n+        long max = 0;\n+        for (WorkerThread w : threads) {\n+            w.join();\n+            max = Math.max(max, (Long) w.getLast());\n+        }\n+        assertEquals((LOOPS * (THREADS)), max);\n+    }\n+\n+    class WorkerThread extends Thread {\n+        Object _first = null, _last = null;\n+        int _count = 0;\n+        StoreContext _ctx;\n+        TableJDBCSeq _seq;\n+        ClassMetaData _cmd;\n+        EntityManagerImpl _em;\n+        MetaDataRepository _repo;\n+\n+        public WorkerThread(OpenJPAEntityManagerFactorySPI emf) {\n+            _repo = emf.getConfiguration().getMetaDataRepositoryInstance();\n+        }\n+\n+        public void run() {\n+            ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();\n+            SequenceMetaData meta = _repo.getSequenceMetaData(\"Dog_Gen\", contextLoader, true);\n+            meta.setInitialValue(1);\n+            meta.setIncrement(10000);\n+            _em = (EntityManagerImpl) emf.createEntityManager();\n+            _ctx = (StoreContext) _em.getBroker();\n+            _cmd = _repo.getMetaData(Dog.class, contextLoader, true);\n+\n+            _seq = (TableJDBCSeq) meta.getInstance(contextLoader);\n+            // Change defaults so this test doesn't take so long to run.\n+            _seq.setAllocate(ALLOC_SIZE);\n+            _seq.setInitialValue(1);\n+\n+            Object obj = _seq.next(_ctx, _cmd);\n+            _first = obj;\n+            // start at 1 because we already got our first result.\n+            for (int i = 1; i < LOOPS; i++) {\n+                obj = _seq.next(_ctx, _cmd);\n+            }\n+            _last = obj;\n+            _em.close();\n+        }\n+\n+        public Object getLast() {\n+            return _last;\n+        }\n+\n+        public Object getFirst() {\n+            return _first;\n+        }\n+\n+        public int getCount() {\n+            return _count;\n+        }\n+    }// end WorkerThread\n+}"}]}

