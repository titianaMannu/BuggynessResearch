{"sha":"319bb37fe1725e998531c4e62cf9133dc42b8639","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxOWJiMzdmZTE3MjVlOTk4NTMxYzRlNjJjZjkxMzNkYzQyYjg2Mzk=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2014-09-23T17:03:48Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2014-09-23T17:03:48Z"},"message":"OPENJPA-2525: Use of JoinColumn targets to another joinColumn key exposed as an attribute will cause a ConstrainViolation exception on persist\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1627091 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08ed8e644bb9ec79f64eef38cb89c9719da9471f","url":"https://api.github.com/repos/apache/openjpa/git/trees/08ed8e644bb9ec79f64eef38cb89c9719da9471f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/319bb37fe1725e998531c4e62cf9133dc42b8639","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/319bb37fe1725e998531c4e62cf9133dc42b8639","html_url":"https://github.com/apache/openjpa/commit/319bb37fe1725e998531c4e62cf9133dc42b8639","comments_url":"https://api.github.com/repos/apache/openjpa/commits/319bb37fe1725e998531c4e62cf9133dc42b8639/comments","author":null,"committer":null,"parents":[{"sha":"077ad2b4462cd2be819df5485d906632488d73be","url":"https://api.github.com/repos/apache/openjpa/commits/077ad2b4462cd2be819df5485d906632488d73be","html_url":"https://github.com/apache/openjpa/commit/077ad2b4462cd2be819df5485d906632488d73be"}],"stats":{"total":374,"additions":363,"deletions":11},"files":[{"sha":"68272b6ae39fdac7ee4caa7d9b9ade93c9391f5f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":46,"deletions":11,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=319bb37fe1725e998531c4e62cf9133dc42b8639","patch":"@@ -14,7 +14,7 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.openjpa.jdbc.sql;\n \n@@ -35,6 +35,7 @@\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.Joinable;\n import org.apache.openjpa.jdbc.meta.RelationId;\n@@ -43,6 +44,8 @@\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n \n@@ -284,15 +287,16 @@ else if (!set)\n             else\n                 val = join.getJoinValue(to, toCols[i], (JDBCStore) to.\n                     getContext().getStoreManager().getInnermostDelegate());\n-                \n+\n             if (set && val == null) {\n                 if (canSet(io, i, true))\n                     setNull(fromCols[i]);\n             } else if (set && val instanceof Raw)\n                 setRaw(fromCols[i], val.toString());\n-            else if (set)\n+            else if (set) {\n                 setObject(fromCols[i], val, toCols[i].getJavaType(), false);\n-            else if (val == null)\n+                setJoinRefColumn(to, fromCols, toCols[i], val);\n+            } else if (val == null)\n                 whereNull(fromCols[i]);\n             else if (val instanceof Raw)\n                 whereRaw(fromCols[i], val.toString());\n@@ -301,6 +305,37 @@ else if (val instanceof Raw)\n         }\n     }\n \n+    private void setJoinRefColumn(OpenJPAStateManager inverseSm, Column ownerCols[], Column inverseCol,\n+                                   Object val) {\n+        OpenJPAStateManager ownerSm = getPrimaryKey();\n+        if (ownerSm != null) {\n+            ClassMetaData ownerMeta = ownerSm.getMetaData();\n+            // loop through all the fields in the owner entity\n+            for (FieldMetaData ownerFM : ownerMeta.getFields()) {\n+                // look for any single column in this field references the\n+                // same column as the foreign key target column\n+                Column cols[] = ((FieldMapping) ownerFM).getColumns();\n+                if (cols.length == 1            // only support attribute of non-compound foreign key\n+                        && cols != ownerCols    // not @Id field\n+                        && cols[0].getIdentifier().equals(ownerCols[0].getIdentifier())) {\n+                    // copy the foreign key value to the current field.\n+                    FieldMetaData inverseFM = inverseSm.getMetaData().getField(\n+                                    inverseCol.getIdentifier().getName());\n+                    if (inverseFM != null) {\n+                        int inverseValIndex = inverseFM.getIndex();\n+                        Class<?> inverseType = inverseSm.getMetaData().getField(inverseValIndex).getType();\n+                        int ownerIndex = ownerFM.getIndex();\n+                        Class<?> ownerType = ownerSm.getMetaData().getField(ownerIndex).getType();\n+                        if (inverseType == ownerType) {\n+                            Object inverseVal = inverseSm.fetch(inverseValIndex);\n+                            ownerSm.storeField(ownerIndex, inverseVal);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     /**\n      * Return true if any of the given column indexes are settable.\n      */\n@@ -682,11 +717,11 @@ protected void setObject(Column col, Object val, int metaType,\n         // never set auto increment columns and honor column defaults\n         if (_action == ACTION_INSERT) {\n             if (col.isAutoAssigned()) {\n-            \t// OPENJPA-349: validate because this can be the only column\n-            \tsetValid(true);\n+                // OPENJPA-349: validate because this can be the only column\n+                setValid(true);\n                 return;\n             }\n-            if (!overrideDefault && val == null \n+            if (!overrideDefault && val == null\n                 && col.getDefaultString() != null)\n                 return;\n         }\n@@ -959,19 +994,19 @@ public void copyInto(RowImpl row, boolean whereOnly) {\n         if (isValid())\n             row.setValid(true);\n     }\n-    \n+\n     public Object[] getVals() {\n         return _vals;\n     }\n-    \n+\n     public int[] getTypes() {\n         return _types;\n     }\n-    \n+\n     public boolean isFlushed() {\n         return _isFlushed;\n     }\n-    \n+\n     public void setFlushed(boolean isFlushed) {\n         _isFlushed = isFlushed;\n     }"},{"sha":"af2c98b3dafa3a7b735103d4dc107688e1553dc7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ACase.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ACase.java","raw_url":"https://github.com/apache/openjpa/raw/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ACase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ACase.java?ref=319bb37fe1725e998531c4e62cf9133dc42b8639","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class ACase {\n+\n+\tprivate int id;\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+    private String name;\n+    public String getName() {\n+    \treturn this.name;\n+    }\n+\n+    public void setName(String name) {\n+    \tthis.name = name;\n+    }\n+\n+\tprivate AText aText;\n+\t@OneToOne(fetch=FetchType.LAZY, mappedBy=\"aCase\", cascade=CascadeType.MERGE)\n+\tpublic AText getAText() {\n+\t\treturn aText;\n+\t}\n+\n+\tpublic void setAText(AText aText) {\n+\t\tthis.aText = aText;\n+\t}\n+}"},{"sha":"b6963f365cd199db956dd6a9ed9dcca4fdc40411","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/AEvident.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/AEvident.java","raw_url":"https://github.com/apache/openjpa/raw/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/AEvident.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/AEvident.java?ref=319bb37fe1725e998531c4e62cf9133dc42b8639","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class AEvident {\n+\n+\tprivate int id;\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+    private String name;\n+    public String getName() {\n+    \treturn this.name;\n+    }\n+\n+    public void setName(String name) {\n+    \tthis.name = name;\n+    }\n+\n+\tprivate AText aText;\n+\t@ManyToOne(fetch=FetchType.LAZY, cascade=CascadeType.MERGE)\n+\t@JoinColumn(name=\"ACASE_ID\", referencedColumnName=\"ACASE_ID\")\n+\tpublic AText getAText() {\n+\t\treturn aText;\n+\t}\n+\n+\tpublic void setAText(AText aText) {\n+\t\tthis.aText = aText;\n+\t}\n+}"},{"sha":"4b044cc4e2e0253fb2bb42a83a581e89af71e93c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/AText.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/AText.java","raw_url":"https://github.com/apache/openjpa/raw/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/AText.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/AText.java?ref=319bb37fe1725e998531c4e62cf9133dc42b8639","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class AText {\n+\n+\tprivate int id;\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+    private String name;\n+    public String getName() {\n+    \treturn this.name;\n+    }\n+\n+    public void setName(String name) {\n+    \tthis.name = name;\n+    }\n+\n+\tprivate ACase aCase;\n+\t@OneToOne(fetch=FetchType.LAZY, cascade=CascadeType.MERGE)\n+\t@JoinColumn(name=\"ACASE_ID\", nullable=false)\n+\tpublic ACase getACase() {\n+\t\treturn aCase;\n+\t}\n+\n+\tpublic void setACase(ACase aCase) {\n+\t\tthis.aCase = aCase;\n+\t}\n+\n+\n+\tprivate Set<AEvident> aEvidents = new HashSet<AEvident>();\n+\t@OneToMany(targetEntity=AEvident.class, mappedBy=\"aText\", cascade=CascadeType.MERGE)\n+\tpublic Set<AEvident> getAEvidents() {\n+\t\treturn aEvidents;\n+\t}\n+\n+\tpublic void setAEvidents(Set<AEvident> aEvidents) {\n+\t\tthis.aEvidents = aEvidents;\n+\t}\n+\n+\tprivate int aCaseId;\n+\t@Column(name=\"ACASE_ID\", insertable=false, updatable=false, unique=true)\n+\tpublic int getACaseId() {\n+\t    return aCaseId;\n+\t}\n+\n+\tpublic void setACaseId(int aCaseId) {\n+\t    this.aCaseId = aCaseId;\n+\t}\n+\n+}"},{"sha":"ae48e549889051fd9d0d4c98af71dadf7a912d69","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestO2ORefColumn.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestO2ORefColumn.java","raw_url":"https://github.com/apache/openjpa/raw/319bb37fe1725e998531c4e62cf9133dc42b8639/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestO2ORefColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestO2ORefColumn.java?ref=319bb37fe1725e998531c4e62cf9133dc42b8639","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Unit test to verify the foreign key of a Join column in an association (aText), that is exposed as an\n+ * attribute, is updated after the entity is flushed or committed to the data store.\n+ * See AText -> ACase's foreign key also exposed a non-insertable and non-updatable attribute 'aCaseId'.\n+ *\n+ * In the test case, if the aCaseId is not updated with the foreign key (aCase.id) value, an association\n+ * of aText (aEvident) with JoinColumn(..referencedColumnName=..) overridden to non-standard foreign key,\n+ * a constraint violation will occur when aEvident is persisted to the data store.\n+ */\n+public class TestO2ORefColumn extends SingleEMFTestCase {\n+\n+    public void setUp () {\n+        setUp(CLEAR_TABLES,\n+                ACase.class, AText.class, AEvident.class,\n+                \"openjpa.jdbc.MappingDefaults\", \"ForeignKeyDeleteAction=cascade,JoinForeignKeyDeleteAction=cascade\"\n+                );\n+    }\n+\n+    public void testRefColumnJoinEntities () {\n+        AEvident aEvident = new AEvident();\n+        aEvident.setName(\"Evident_A\");\n+\n+        AText aText = new AText();\n+        aText.setName(\"Text_A\");\n+        aText.getAEvidents().add(aEvident);\n+        aEvident.setAText(aText);\n+\n+        ACase aCase = new ACase();\n+        aCase.setName (\"Case_A\");\n+        aCase.setAText(aText);\n+        aText.setACase(aCase);\n+\n+        EntityManager em = emf.createEntityManager ();\n+        em.getTransaction().begin ();\n+        em.persist(aEvident);\n+        em.persist(aText);\n+        em.persist(aCase);\n+        em.getTransaction ().commit ();\n+\n+        verify(aCase, aText, aEvident);\n+\n+        em.clear();\n+\n+        ACase fACase = em.find(ACase.class, aCase.getId());\n+        AText fAText = fACase.getAText();\n+        AEvident fAEvident = fAText.getAEvidents().iterator().next();\n+        verify(fACase, fAText, fAEvident);\n+\n+        em.close ();\n+    }\n+\n+    private void verify(ACase aCase, AText aText, AEvident aEvident) {\n+        Assert.assertNotNull(aCase);\n+        Assert.assertNotNull(aText);\n+        Assert.assertNotNull(aEvident);\n+\n+        Assert.assertTrue(aCase.getId() != 0);\n+        Assert.assertTrue(aText.getId() != 0);\n+        Assert.assertTrue(aEvident.getId() != 0);\n+\n+        Assert.assertEquals(\"Case_A\", aCase.getName());\n+        Assert.assertEquals(\"Text_A\", aText.getName());\n+        Assert.assertEquals(\"Evident_A\", aEvident.getName());\n+\n+        Assert.assertNotNull(aCase.getAText());\n+        Assert.assertSame(aCase.getAText(), aText);\n+        Assert.assertNotNull(aText.getACase());\n+        Assert.assertSame(aCase, aText.getACase());\n+\n+        Assert.assertEquals(aText.getACaseId(), aCase.getId());\n+        Assert.assertNotNull(aText.getAEvidents());\n+        Assert.assertTrue(aText.getAEvidents().iterator().hasNext());\n+        Assert.assertSame(aEvident, aText.getAEvidents().iterator().next());\n+        Assert.assertNotNull(aEvident.getAText());\n+        Assert.assertSame(aText, aEvident.getAText());\n+    }\n+}"}]}

