{"sha":"31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","node_id":"MDY6Q29tbWl0MjA2MzY0OjMxY2QwZWIwNGVjNDQ4YzZjMzBkZjg5ZTAzYWQ3YmRjZDEzNTYzYWM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-15T18:33:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-15T18:33:24Z"},"message":"OPENJPA-1628: Usability changes. Merged from trunk revision 934507\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@934511 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5d8fd8ce1bed576084c36c0bd09342a1d4144adb","url":"https://api.github.com/repos/apache/openjpa/git/trees/5d8fd8ce1bed576084c36c0bd09342a1d4144adb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","html_url":"https://github.com/apache/openjpa/commit/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac/comments","author":null,"committer":null,"parents":[{"sha":"5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","url":"https://api.github.com/repos/apache/openjpa/commits/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","html_url":"https://github.com/apache/openjpa/commit/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb"}],"stats":{"total":255,"additions":53,"deletions":202},"files":[{"sha":"39b19b357c51c66dd8aa098876a9a983da98615f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","status":"modified","additions":24,"deletions":179,"changes":203,"blob_url":"https://github.com/apache/openjpa/blob/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","raw_url":"https://github.com/apache/openjpa/raw/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java?ref=31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","patch":"@@ -20,14 +20,10 @@\n \n import static javax.lang.featureSelection.SourceVersion.RELEASE_6;\n \n-import java.io.File;\n import java.io.IOException;\n-import java.io.OutputStream;\n import java.io.PrintWriter;\n-import java.net.URI;\n import java.net.URL;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n@@ -47,11 +43,7 @@\n import javax.lang.featureSelection.util.Elements;\n import javax.persistence.metamodel.StaticMetamodel;\n import javax.tools.Diagnostic;\n-import javax.tools.JavaCompiler;\n import javax.tools.JavaFileObject;\n-import javax.tools.StandardJavaFileManager;\n-import javax.tools.StandardLocation;\n-import javax.tools.ToolProvider;\n \n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataFactory;\n@@ -66,39 +58,29 @@\n  * This tool is invoked during compilation for JDK6 compiler if \n  * <UL>\n  * <LI>OpenJPA and JPA libraries are available in the compiler classpath\n- * and <LI>Annotation Processor option <code>-Aopenjpa.generate=true</code> is specified.\n+ * and <LI>Annotation Processor option <code>-Aopenjpa.metamodel=true</code> is specified.\n  * </UL>\n  * <br>\n  * <B>Usage</B><br>\n- * <code>$ javac -classpath path/to/openjpa-all.jar -Aopenjpa.generated=true mypackage/MyEntity.java</code><br>\n+ * <code>$ javac -classpath path/to/openjpa-all.jar -Aopenjpa.metamodel=true mypackage/MyEntity.java</code><br>\n  * will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n+ * The source code is generated relative to the directory specified in <code>-s</code> option\n+ * of <code>javac</code> compiler and defaulted to the current directory.\n  * <p>\n- * The Annotation Processor also recognizes the following options (none of them are mandatory).\n- * Each of the following option key can also be prefixed with <code>openjpa.</code> to distinguish if multiple \n- * annotation processors are active during compilation:<br>\n+ * The Annotation Processor also recognizes the following options (none of them are mandatory):<br>\n  * <TABLE border=\"1\">\n- * <TR><TD>-Alog={log level}<TD>The logging level. Default is <code>WARN</code>. Permissible values are \n+ * <TR><TD>-Aopenjpa.log={log level}<TD>The logging level. Default is <code>WARN</code>. Permissible values are \n  *     <code>TRACE</code>, <code>INFO</code>, <code>WARN</code> or <code> ERROR</code>.\n- * <TR><TD>-Asource={n}         <TD>Java source version of the generated code. Default is <code>6</code>.\n- * <TR><TD>-Anaming={class name}        <TD>fully-qualified name of a class implementing \n+ * <TR><TD>-Aopenjpa.source={n}          <TD>Java source version of the generated code. Default is <code>6</code>.\n+ * <TR><TD>-Aopenjpa.naming={class name} <TD>fully-qualified name of a class implementing \n  * <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n  * the name of a meta-class given the name of the original persistent Java entity class. Defaults to\n  * <code>org.apache.openjpa.persistence.PersistenceMetaDataFactory</code> which appends a underscore character\n  * (<code>_</code>) to the original Java class name. \n- * <TR><TD>-Aheader={url}           <TD>\n+ * <TR><TD>-Aopenjpa.header={url}        <TD>\n  * A url whose content will appear as comment header to the generated file(s). Recognizes special value\n  * <code>ASL</code> for Apache Source License header as comment. By default adds a OpenJPA proprietary   \n  * text.\n- * <TR><TD>-Aout={dir}                      <TD>\n- * A directory in the local file system. The generated files will be written <em>relative</em> to this directory\n- * according to the package structure i.e. if <code>dir</code> is specified as <code>/myproject/generated-src</code>\n- * then the generated source code will be written to <code>/myproject/generated-src/mypackage/MyEntity_.java</code>.\n- * If this option is not specified, then an attempt will be made to write the generated source file in the same\n- * directory of the source code of original class <code>mypackage.MyEntity</code>. The source code location for \n- * <code>mypackage.MyEntity</code> can only be determined for Sun JDK6 and <code>tools.jar</code> being available \n- * to the compiler classpath. If the source code location for the original class can not be determined, and the \n- * option is not specified, then the generated source code is written relative to the current directory according \n- * to the package structure.  \n  * </TABLE>\n  * <br>\n  *\n@@ -111,19 +93,16 @@\n     \"javax.persistence.Entity\",\n     \"javax.persistence.Embeddable\", \n     \"javax.persistence.MappedSuperclass\" })\n-@SupportedOptions({ \"openjpa.log\", \"log\", \n-                     \"openjpa.out\", \"out\", \n-                     \"openjpa.source\", \"source\",\n-                     \"openjpa.naming\", \"naming\",\n-                     \"openjpa.header\", \"header\",\n-                     \"openjpa.generate\"\n+@SupportedOptions({ \"openjpa.log\", \n+                    \"openjpa.source\",\n+                    \"openjpa.naming\",\n+                    \"openjpa.header\",\n+                    \"openjpa.metamodel\"\n                   })\n @SupportedSourceVersion(RELEASE_6)\n \n public class AnnotationProcessor6 extends AbstractProcessor {\n     private SourceAnnotationHandler handler;\n-    private StandardJavaFileManager fileManager;\n-    private boolean isUserSpecifiedOutputLocation;\n     private MetaDataFactory factory;\n     private int generatedSourceVersion = 6;\n     private CompileTimeLogger logger;\n@@ -206,13 +185,12 @@ private TypeCategory toMetaModelTypeCategory(TypeMirror mirror,\n     @Override\n     public synchronized void init(ProcessingEnvironment processingEnv) {\n         super.init(processingEnv);\n-        active = \"true\".equalsIgnoreCase(getOptionValue(\"openjpa.generate\"));\n+        active = \"true\".equalsIgnoreCase(getOptionValue(\"openjpa.metamodel\"));\n         if (!active)\n             return;\n         processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, _loc.get(\"mmg-tool-banner\").toString());\n-        logger = new CompileTimeLogger(processingEnv, getOptionValue(\"openjpa.log\", \"log\"));\n+        logger = new CompileTimeLogger(processingEnv, getOptionValue(\"openjpa.log\"));\n         setSourceVersion();\n-        setFileManager();\n         setNamingPolicy();\n         setHeader();\n         handler = new SourceAnnotationHandler(processingEnv, logger);\n@@ -252,8 +230,7 @@ private boolean process(TypeElement e) {\n         annotate(source, originalClass);\n         TypeElement supCls = handler.getPersistentSupertype(e);\n         if (supCls != null) {\n-            String superName = factory.getMetaModelClassName(\n-                    supCls.toString());\n+            String superName = factory.getMetaModelClassName(supCls.toString());\n             source.getTopLevelClass().setSuper(superName);\n         }\n         try {\n@@ -327,12 +304,12 @@ private void comment(SourceCode source) {\n     }\n     \n     /**\n-     * Parse annotation processor option <code>-Asource=n</code> to detect\n+     * Parse annotation processor option <code>-Aopenjpa.source=n</code> to detect\n      * the source version for the generated classes. \n      * n must be a integer. Default or wrong specification returns 6.\n      */\n     private void setSourceVersion() {\n-        String version = getOptionValue(\"openjpa.source\", \"source\");\n+        String version = getOptionValue(\"openjpa.source\");\n         if (version != null) {\n             try {\n                 generatedSourceVersion = Integer.parseInt(version);\n@@ -346,7 +323,7 @@ private void setSourceVersion() {\n     }\n     \n     private void setNamingPolicy() {\n-        String policy = getOptionValue(\"openjpa.naming\",\"naming\");\n+        String policy = getOptionValue(\"openjpa.naming\");\n         if (policy != null) {\n             try {\n                 factory = (MetaDataFactory)Class.forName(policy).newInstance();\n@@ -360,7 +337,7 @@ private void setNamingPolicy() {\n     }\n     \n     private void setHeader() {\n-        String headerOption = getOptionValue(\"openjpa.header\", \"header\");\n+        String headerOption = getOptionValue(\"openjpa.header\");\n         if (headerOption == null) {\n             return;\n         }\n@@ -376,54 +353,15 @@ private void setHeader() {\n         }\n     }\n     \n-    private void setFileManager() {\n-        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n-        fileManager = compiler.getStandardFileManager(null, null, null);\n-        String outDir = getOptionValue(\"openjpa.out\", \"out\");\n-        if (outDir != null)\n-           isUserSpecifiedOutputLocation = setSourceOutputDirectory(new File(outDir));\n-    }\n-\n     /**\n      * Creates a file where source code of the given metaClass will be written.\n      * \n      */\n     private PrintWriter createSourceFile(String originalClass, String metaClass, TypeElement e) \n         throws IOException {\n-        if (!isUserSpecifiedOutputLocation) {\n-            setSourceOutputDirectory(OutputPath.getAbsoluteDirectory(processingEnv, e));\n-        }\n-        JavaFileObject javaFile = fileManager.getJavaFileForOutput(StandardLocation.SOURCE_OUTPUT, \n-            metaClass, JavaFileObject.Kind.SOURCE, \n-            null); // do not use sibling hint because of indeterminable behavior across JDK \n-        logger.info(_loc.get(\"mmg-process\", javaFile.toUri()));\n-        OutputStream out = javaFile.openOutputStream();\n-        PrintWriter writer = new PrintWriter(out);\n-        return writer;\n-    }\n-    \n-    /**\n-     * Sets the output directory for generated source files.\n-     * Tries to create the directory structure if does not exist.\n-     * \n-     * @return true if the output has been set successfully.\n-     */\n-    boolean setSourceOutputDirectory(File outDir) {\n-        if (outDir == null)\n-            return false;\n-        if (!outDir.exists()) {\n-            if (!outDir.mkdirs()) {\n-                logger.warn(_loc.get(\"mmg-bad-out\", outDir, StandardLocation.SOURCE_OUTPUT));\n-                return false;\n-            }\n-        }\n-        try {\n-            fileManager.setLocation(StandardLocation.SOURCE_OUTPUT, Collections.singleton(outDir));\n-            return true;\n-        } catch (IOException e) {\n-            logger.warn(_loc.get(\"mmg-bad-out\", outDir, StandardLocation.SOURCE_OUTPUT));\n-            return false;\n-        }\n+        JavaFileObject javaFile = processingEnv.getFiler().createSourceFile(metaClass, e);\n+        logger.info(_loc.get(\"mmg-process\", javaFile.toUri().normalize()));\n+        return new PrintWriter(javaFile.openWriter());\n     }\n     \n     /**\n@@ -437,97 +375,4 @@ private String getOptionValue(String... keys) {\n         }\n         return null;\n     }\n-    \n-    /**\n-     * An utility class to determine the source file corresponding to a {@link TypeElement}.\n-     * The utility uses Sun JDK internal API (com.sun.tools.*) and hence works reflectively\n-     * to avoid compile-time dependency.\n-     *   \n-     * @author Pinaki Poddar\n-     *\n-     */\n-    public static class OutputPath {\n-        private static Class<?> trees = null;\n-        static {\n-            try {\n-                trees = Class.forName(\"com.sun.source.util.Trees\");\n-            } catch (Throwable t) {\n-                \n-            }\n-        }\n-        \n-        /**\n-         * Gets the directory relative to the Java source file corresponding to the TypeElement.\n-         * \n-         * @return null if the com.sun.source.util.* package is not available or the given TypeElement\n-         * does not correspond to a compilation unit associated to a source file.\n-         */\n-        public static File getAbsoluteDirectory(ProcessingEnvironment env, TypeElement e) {\n-            if (trees == null)\n-                return null;\n-            try {\n-                // Trees root = Trees.instance(env);\n-                Object root = trees.getMethod(\"instance\", new Class[]{ProcessingEnvironment.class})\n-                    .invoke(null, env);\n-                \n-                // TreePath path = root.getPath(e);\n-                Object path = root.getClass().getMethod(\"getPath\", new Class[]{Element.class})\n-                    .invoke(root, e);\n-                \n-                // CompilationUnitTree unit = path.getCompilationUnit();\n-                Object unit = path.getClass().getMethod(\"getCompilationUnit\", (Class[])null)\n-                    .invoke(path, (Object[])null);\n-                \n-                // JavaFileObject f = unit.getSourceFile();\n-                JavaFileObject f = (JavaFileObject)unit.getClass().getMethod(\"getSourceFile\", (Class[])null)\n-                    .invoke(unit, (Object[])null);\n-                \n-                URI uri = f.toUri();\n-                File dir = getParentFile(new File(uri.toURL().getPath()), \n-                        packageDepth(e.getQualifiedName().toString()));\n-                return dir;\n-            } catch (Throwable t) {\n-                return null;\n-            }\n-        }\n-        \n-        /**\n-         * Gets the parent of the given file recursively traversing to given number of levels.\n-         */\n-        public static File getParentFile(File f, int n) {\n-            if (n < 0)\n-                return f;\n-            if (n == 0)\n-                return f.getParentFile();\n-            return getParentFile(f.getParentFile(), n-1);\n-        }\n-        \n-        public static int packageDepth(String s) {\n-            String pkg = getPackageName(s);\n-            if (pkg == null)\n-                return 0;\n-            int depth = 1;\n-            int i = 0;\n-            while ((i = pkg.indexOf('.')) != -1) {\n-                depth++;\n-                pkg = pkg.substring(i+1);\n-            }\n-            return depth;\n-        }\n-        \n-        public static String getPackageName(String s) {\n-            if (s == null)\n-                return null;\n-            int i = s.lastIndexOf('.');\n-            return (i == -1) ? null : s.substring(0, i);\n-        }\n-        \n-        public static String getSimpleName(String s) {\n-            if (s == null)\n-                return null;\n-            int i = s.lastIndexOf('.');\n-            return (i == -1) ? s : s.substring(i+1);\n-        }\n-    }\n-\n }"},{"sha":"437ce2b3cbd7e680194671084b07acb89c67d44b","filename":"openjpa-project/src/doc/manual/jpa_overview_criteria.xml","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","raw_url":"https://github.com/apache/openjpa/raw/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_criteria.xml?ref=31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","patch":"@@ -168,32 +168,31 @@ Annotation processing tool generates source code for a metamodel class given\n the annotated source code of persistent entity. \n This tool is invoked during compilation for JDK6 compiler if OpenJPA and JPA \n libraries are specified in the compiler <code>-classpath</code> option <emphasis>and</emphasis>\n-Annotation processor option <code>-Aopenjpa.generate=true</code> is specified.\n+Annotation processor option <code>-Aopenjpa.metamodel=true</code> is specified.\n     <programlisting>\n- $ javac -classpath path/to/openjpa-all.jar -Aopenjpa.generate=true mypackage/MyEntity.java\n+ $ javac -classpath path/to/openjpa-all.jar -Aopenjpa.metamodel=true mypackage/MyEntity.java\n     </programlisting>\n will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n       </para>\n       \n       <para>\n The Annotation Processor recognizes the following options specified in the command-line with <code>-A</code> \n-(none of them are mandatory). Each of the following option key can also be prefixed with <code>openjpa.</code> \n-to distinguish if multiple annotation processors are active during compilation.\n+(none of them are mandatory).\n     <itemizedlist>\n         <listitem>\n \t\t\t<para>\n-              -Alog=TRACE|INFO|WARN|ERROR : The logging level. Default is <code>WARN</code>.\n+              -Aopenjpa.log=TRACE|INFO|WARN|ERROR : The logging level. Default is <code>WARN</code>.\n             </para>\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-             -Asource=&lt;n&gt; : where &lt;n&gt; denotes the integral number for Java source \n+             -Aopenjpa.source=&lt;n&gt; : where &lt;n&gt; denotes the integral number for Java source \n              version of the generated code. Default is <code>6</code>.\n              </para>\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-               -Anaming=class name : fully-qualified name of a class implementing \n+               -Aopenjpa.naming=class name : fully-qualified name of a class implementing \n                <code>org.apache.openjpa.meta.MetaDataFactory</code> that determines\n the name of a meta-class given the name of the original persistent Java entity class. Defaults to\n <code>org.apache.openjpa.persistence.PersistenceMetaDataFactory</code> which appends a underscore character\n@@ -202,7 +201,7 @@ the name of a meta-class given the name of the original persistent Java entity c\n         </listitem>\n         <listitem>\n \t\t\t<para>\n-               -Aheader=&lt;url&gt; : A url whose content will appear as comment header to the generated file(s). \n+               -Aopenjpa.header=&lt;url&gt; : A url whose content will appear as comment header to the generated file(s). \n                Recognizes special value <code>ASL</code> for Apache Source License header as comment. \n                By default, adds a OpenJPA proprietary text as comment block.\n              </para>"},{"sha":"5e265fecc8efb93aba4b259bcdcc393e0eefe093","filename":"scripts/mmg.bat","status":"modified","additions":22,"deletions":11,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac/scripts/mmg.bat","raw_url":"https://github.com/apache/openjpa/raw/31cd0eb04ec448c6c30df89e03ad7bdcd13563ac/scripts/mmg.bat","contents_url":"https://api.github.com/repos/apache/openjpa/contents/scripts/mmg.bat?ref=31cd0eb04ec448c6c30df89e03ad7bdcd13563ac","patch":"@@ -21,34 +21,45 @@\n @rem Example Batch script to generate canonical meta-featureSelection classes\n @rem\n @rem Usage\n-@rem   $ mmg.bat <options.file> <class.list>\n+@rem   $ mmg.bat <class.list>\n @rem \n @rem The canonical meta-featureSelection classes can be generated during compilation of\n @rem domain classes. This batch file compiles a set of classes (X.java) listed \n-@rem in <class.list> file. The compiler is invoked with an annotation\n-@rem processor which generates a meta-featureSelection class X_.java for each X.java. \n-@rem The options for annotation processor is specified in <options.file>.\n+@rem in <class.list> file. The compiler discoveres the annotation\n+@rem processor if openjpa classes are in classpath. The discovered annotation\n+@rem processor, however, is active only if -Aopenjpa.metamodel=true is set.  \n @rem \n @rem See also \n-@rem    mmg.options       : The options to Javac compiler \n @rem    domain-class.list : The domain classes to be compiled\n @rem ---------------------------------------------------------------------------\n @echo off\n setlocal\n-set JAVA_HOME=c:\\java\\jdk1.6.0_10\n set JAVAC=%JAVA_HOME%\\bin\\javac\n \n+@rem ---------------------------------------------------------------------------\n+@rem Compiler classpath shown for a typical OpenJPA development environment in Windows. \n+@rem The essential aspect is openjpa libraries must be in the compiler's classpath.\n set M_REPO=\"C:\\Documents and Settings\\Administrator\\.m2\\repository\"\n set SPEC=geronimo-jpa_2.0_spec\n set VERSION=1.0-EA9-SNAPSHOT\n set JPA_LIB=%M_REPO%\\org\\apache\\geronimo\\specs\\%SPEC%\\%VERSION%\\%SPEC%-%VERSION%.jar\n \n set CLASSPATH=%JPA_LIB%\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-lib\\target\\classes\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-persistence\\src\\main\\resources\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-persistence\\target\\classes\n-set CLASSPATH=%CLASSPATH%;.\\openjpa-kernel\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa\\src\\main\\resources\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-persistence\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-kernel\\target\\classes\n+set CLASSPATH=%CLASSPATH%;..\\openjpa-lib\\target\\classes\n+\n+@rem ---------------------------------------------------------------------------\n+echo Using Java Compiler %JAVAC%\n+%JAVAC% -version\n+\n+@rem ---------------------------------------------------------------------------\n+@rem Root directory for of the generated source files. Specified as -s option \n+set GEN_DIR=../openjpa-persistence-jdbc/src/test/java\n \n-%JAVAC% -cp %CLASSPATH% @%1 @%2\n+@rem Only one option is shown for logging. Other available options are documented in\n+@rem OpenJPA User Manual and JavaDoc\n+%JAVAC% -cp %CLASSPATH% -s %GEN_DIR% -Aopenjpa.metamodel=true -Aopenjpa.log=TRACE @%1\n \n endlocal"},{"sha":"558f652f8dd8cd8aca0b322e74a79d069bc223f5","filename":"scripts/mmg.options","status":"removed","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb/scripts/mmg.options","raw_url":"https://github.com/apache/openjpa/raw/5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb/scripts/mmg.options","contents_url":"https://api.github.com/repos/apache/openjpa/contents/scripts/mmg.options?ref=5c3737fce194bf5f0c03f2c75f1f5aee8edc72fb","patch":"@@ -1,4 +0,0 @@\n--processor org.apache.openjpa.persistence.meta.AnnotationProcessor6\r\n--Alog=TRACE\r\n--Aout=..\\openjpa-persistence-jdbc\\src\\test\\java\\\r\n--Asource=5\r"}]}

