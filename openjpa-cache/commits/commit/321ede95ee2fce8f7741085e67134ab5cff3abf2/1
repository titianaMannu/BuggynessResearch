{"sha":"321ede95ee2fce8f7741085e67134ab5cff3abf2","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyMWVkZTk1ZWUyZmNlOGY3NzQxMDg1ZTY3MTM0YWI1Y2ZmM2FiZjI=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-07T13:47:48Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-07T13:47:48Z"},"message":"Test conversion of svn:eol-style from as-is to native.  One file in DOS line endings and one file in Unix line endings.  Neither file changed on client, only their svn:eol-style property has been changed by this update.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@619411 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"963a647de467782dce6cf03dfd80585f0aab1d06","url":"https://api.github.com/repos/apache/openjpa/git/trees/963a647de467782dce6cf03dfd80585f0aab1d06"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/321ede95ee2fce8f7741085e67134ab5cff3abf2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/321ede95ee2fce8f7741085e67134ab5cff3abf2","html_url":"https://github.com/apache/openjpa/commit/321ede95ee2fce8f7741085e67134ab5cff3abf2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/321ede95ee2fce8f7741085e67134ab5cff3abf2/comments","author":null,"committer":null,"parents":[{"sha":"8051804dbdc6bddbc27f5fe677bcfd80379d83e6","url":"https://api.github.com/repos/apache/openjpa/commits/8051804dbdc6bddbc27f5fe677bcfd80379d83e6","html_url":"https://github.com/apache/openjpa/commit/8051804dbdc6bddbc27f5fe677bcfd80379d83e6"}],"stats":{"total":188,"additions":94,"deletions":94},"files":[{"sha":"b9a124711d955798ece423695b84685a9c0c1259","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"modified","additions":94,"deletions":94,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/321ede95ee2fce8f7741085e67134ab5cff3abf2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/321ede95ee2fce8f7741085e67134ab5cff3abf2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=321ede95ee2fce8f7741085e67134ab5cff3abf2","patch":"@@ -1,94 +1,94 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.simple;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-import junit.textui.TestRunner;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Simple test case to get an EntityManager and perform some basic operations.\r\n- *\r\n- * @author Marc Prud'hommeaux\r\n- */\r\n-public class TestPersistence\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class);\r\n-    }\r\n-\r\n-    public void testCreateEntityManager() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        EntityTransaction t = em.getTransaction();\r\n-        assertNotNull(t);\r\n-        t.begin();\r\n-        t.setRollbackOnly();\r\n-        t.rollback();\r\n-\r\n-        // openjpa-facade test\r\n-        assertTrue(em instanceof OpenJPAEntityManager);\r\n-        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\r\n-        ojem.getFetchPlan().setMaxFetchDepth(1);\r\n-        assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testPersist() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(new AllFieldTypes());\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQuery() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AllFieldTypes aft = new AllFieldTypes();\r\n-        aft.setStringField(\"foo\");\r\n-        aft.setIntField(10);\r\n-        em.persist(aft);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        assertEquals(1, em.createQuery\r\n-            (\"select x from AllFieldTypes x where x.stringField = 'foo'\").\r\n-            getResultList().size());\r\n-        assertEquals(0, em.createQuery\r\n-            (\"select x from AllFieldTypes x where x.stringField = 'bar'\").\r\n-            getResultList().size());\r\n-        assertEquals(1, em.createQuery\r\n-            (\"select x from AllFieldTypes x where x.intField >= 10\").\r\n-            getResultList().size());\r\n-        em.getTransaction().rollback();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public static void main(String[] args) {\r\n-        TestRunner.run(TestPersistence.class);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Simple test case to get an EntityManager and perform some basic operations.\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+public class TestPersistence\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    public void testCreateEntityManager() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        EntityTransaction t = em.getTransaction();\n+        assertNotNull(t);\n+        t.begin();\n+        t.setRollbackOnly();\n+        t.rollback();\n+\n+        // openjpa-facade test\n+        assertTrue(em instanceof OpenJPAEntityManager);\n+        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n+        ojem.getFetchPlan().setMaxFetchDepth(1);\n+        assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\n+        em.close();\n+    }\n+\n+    public void testPersist() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new AllFieldTypes());\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AllFieldTypes aft = new AllFieldTypes();\n+        aft.setStringField(\"foo\");\n+        aft.setIntField(10);\n+        em.persist(aft);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertEquals(1, em.createQuery\n+            (\"select x from AllFieldTypes x where x.stringField = 'foo'\").\n+            getResultList().size());\n+        assertEquals(0, em.createQuery\n+            (\"select x from AllFieldTypes x where x.stringField = 'bar'\").\n+            getResultList().size());\n+        assertEquals(1, em.createQuery\n+            (\"select x from AllFieldTypes x where x.intField >= 10\").\n+            getResultList().size());\n+        em.getTransaction().rollback();\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestPersistence.class);\n+    }\n+}\n+"}]}

