{"sha":"323ebee840e6274e3023ce20417c13dc738c6d2d","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyM2ViZWU4NDBlNjI3NGUzMDIzY2UyMDQxN2MxM2RjNzM4YzZkMmQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-09T21:48:44Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-09T21:48:44Z"},"message":"OPENJPA-1678: add printParameters property to prevent SQL parameter values from being logged in exceptions or trace\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@953169 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2dde72509cbfecfcc95eec4d606cf2f36f7673fd","url":"https://api.github.com/repos/apache/openjpa/git/trees/2dde72509cbfecfcc95eec4d606cf2f36f7673fd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/323ebee840e6274e3023ce20417c13dc738c6d2d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/323ebee840e6274e3023ce20417c13dc738c6d2d","html_url":"https://github.com/apache/openjpa/commit/323ebee840e6274e3023ce20417c13dc738c6d2d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/323ebee840e6274e3023ce20417c13dc738c6d2d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"939f644e775bcf6686d4e8514069799bd1fe2b02","url":"https://api.github.com/repos/apache/openjpa/commits/939f644e775bcf6686d4e8514069799bd1fe2b02","html_url":"https://github.com/apache/openjpa/commit/939f644e775bcf6686d4e8514069799bd1fe2b02"}],"stats":{"total":222,"additions":215,"deletions":7},"files":[{"sha":"73506885011fe4e317084ff0061d25da49f272ff","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":29,"deletions":7,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/323ebee840e6274e3023ce20417c13dc738c6d2d/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/323ebee840e6274e3023ce20417c13dc738c6d2d/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=323ebee840e6274e3023ce20417c13dc738c6d2d","patch":"@@ -125,6 +125,7 @@\n     private int _warningAction = WARN_IGNORE;\n     private SQLWarningHandler _warningHandler;\n     private boolean _trackParameters = true;\n+    private boolean _printParameters = false;\n \n     /**\n      * If set to <code>true</code>, pretty-print SQL by running it\n@@ -169,19 +170,34 @@ public int getPrettyPrintLineLength() {\n     }\n \n     /**\n-     * Whether to track parameters for the purposes of reporting exceptions.\n+     * <p>Whether to track parameters for the purpose of reporting exceptions.</p>\n      */\n     public void setTrackParameters(boolean trackParameters) {\n         _trackParameters = trackParameters;\n     }\n \n     /**\n-     * Whether to track parameters for the purposes of reporting exceptions.\n+     * Whether to track parameters for the purpose of reporting exceptions.\n      */\n     public boolean getTrackParameters() {\n         return _trackParameters;\n     }\n \n+    /**\n+     * <p>\n+     * Whether parameter values will be printed in exception messages or in trace. This is different from\n+     * trackParameters which controls whether OpenJPA will track parameters internally (visible while debugging and used\n+     * in batching).\n+     * </p>\n+     */\n+    public boolean getPrintParameters() {\n+        return _printParameters;\n+    }\n+\n+    public void setPrintParameters(boolean printParameters) {\n+        _printParameters = printParameters;\n+    }\n+\n     /**\n      * What to do with SQL warnings.\n      */\n@@ -1392,17 +1408,23 @@ protected void appendInfo(StringBuffer buf) {\n                     paramBuf = new StringBuilder();\n                     for (Iterator<String> itr = _params.iterator(); itr\n                         .hasNext();) {\n-                        paramBuf.append(itr.next());\n-                        if (itr.hasNext())\n+                        if (_printParameters) {\n+                            paramBuf.append(itr.next());\n+                        } else {\n+                            paramBuf.append(\"?\");\n+                            itr.next();\n+                        }\n+                        if (itr.hasNext()) {\n                             paramBuf.append(\", \");\n+                        }\n                     }\n                 }\n \n                 if (paramBuf != null) {\n-                    if (!_prettyPrint)\n+                    if (!_prettyPrint) {\n                         buf.append(\" \");\n-                    buf.append(\"[params=\").\n-                        append(paramBuf.toString()).append(\"]\");\n+                    }\n+                    buf.append(\"[params=\").append(paramBuf.toString()).append(\"]\");\n                 }\n                 super.appendInfo(buf);\n             }"},{"sha":"b102c9a9e119612a91b5d10bf1b90e41499f6cf1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/323ebee840e6274e3023ce20417c13dc738c6d2d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java","raw_url":"https://github.com/apache/openjpa/raw/323ebee840e6274e3023ce20417c13dc738c6d2d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java?ref=323ebee840e6274e3023ce20417c13dc738c6d2d","patch":"@@ -51,6 +51,7 @@ public EntityManagerFactory newEmf(String batchLimit) {\n                 \"openjpa.jdbc.SynchronizeMappings\", \n                 \"buildSchema(ForeignKeys=true)\",\n                 \"openjpa.jdbc.DBDictionary\", batchLimit, \n+                \"openjpa.ConnectionFactoryProperties\", \"PrintParameters=true\",\n                 CLEAR_TABLES);\n \n         assertNotNull(\"Unable to create EntityManagerFactory\", emf);"},{"sha":"e3891951cbab5ab3e6f3cbf48e9110b4a0806080","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/apache/openjpa/blob/323ebee840e6274e3023ce20417c13dc738c6d2d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","raw_url":"https://github.com/apache/openjpa/raw/323ebee840e6274e3023ce20417c13dc738c6d2d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java?ref=323ebee840e6274e3023ce20417c13dc738c6d2d","patch":"@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.exception;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.util.regex.Pattern;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestParameterLogging extends PersistenceTestCase {\n+\n+    String _regex = \".*params=.*1,.*]\";\n+\n+    /*\n+     * Persist the same row twice in the same transaction - will throw an exception with the failing SQL statement\n+     */\n+    private RollbackException getRollbackException(Object... props) {\n+        EntityManagerFactory emf = createEMF(props);\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+\n+        PObject p1, p2;\n+        p1 = new PObject();\n+        p2 = new PObject();\n+\n+        p1.setId(1);\n+        p2.setId(1);\n+\n+        try {\n+            tran.begin();\n+            em.persist(p1);\n+            em.persist(p2);\n+            tran.commit();\n+            em.close();\n+            fail(\"Expected a RollbackException\");\n+            return null;\n+        } catch (RollbackException re) {\n+            return re;\n+        } finally {\n+            if (tran.isActive()) {\n+                tran.rollback();\n+            }\n+            if (em.isOpen()) {\n+                em.close();\n+            }\n+            if (emf.isOpen()) {\n+                emf.close();\n+            }\n+        }\n+    }\n+\n+    /*\n+     * Ensure that parameter values are not included in exception text by default.\n+     */\n+    public void testNoParamsByDefault() {\n+        RollbackException e = getRollbackException(PObject.class, CLEAR_TABLES);\n+\n+        assertFalse(Pattern.matches(_regex, e.toString()));\n+        Throwable nested = e.getCause();\n+        while (nested != null) {\n+            if (Pattern.matches(\".*INSERT.*\", nested.toString())) {\n+                // only check if the message contains the insert statement.\n+                assertFalse(Pattern.matches(_regex, nested.toString()));\n+            }\n+            nested = nested.getCause();\n+        }\n+    }\n+\n+    /*\n+     * If the EMF is created with PrintParameters=true the parameter values will be logged in exception text.\n+     */\n+    public void testParamsEnabledByConfig() {\n+        RollbackException e =\n+            getRollbackException(PObject.class, CLEAR_TABLES, \"openjpa.ConnectionFactoryProperties\",\n+                \"PrintParameters=true\");\n+        assertFalse(Pattern.matches(_regex, e.toString()));\n+        Throwable nested = e.getCause();\n+        assertNotNull(nested); // expecting at least one nested exception.\n+        while (nested != null) {\n+            if (Pattern.matches(\".*INSERT.*\", nested.toString())) {\n+                // only check if the message contains the insert statement.\n+                assertTrue(Pattern.matches(_regex, nested.toString()));\n+            }\n+            nested = nested.getCause();\n+        }\n+    }\n+\n+    /*\n+     * If the EMF is created with PrintParameters=false and trace is enabled for SQL the parameter values will not be\n+     * logged in exception text.\n+     */\n+    public void testParamsDisbledWithLogging() throws Exception {\n+        RollbackException e =\n+            getRollbackException(PObject.class, CLEAR_TABLES, \"openjpa.ConnectionFactoryProperties\",\n+                \"PrintParameters=false\", \"openjpa.Log\", \"SQL=TRACE,File=temp.txt\");\n+        assertFalse(Pattern.matches(_regex, e.toString()));\n+        Throwable nested = e.getCause();\n+        assertNotNull(nested); // should be at least one nested exception\n+        while (nested != null) {\n+            if (Pattern.matches(\".*INSERT.*\", nested.toString())) {\n+                // only check if the message contains the insert statement.\n+                assertFalse(Pattern.matches(_regex, nested.toString()));\n+            }\n+            nested = nested.getCause();\n+        }\n+        checkAndDeleteLogFile(\"temp.txt\", false);\n+    }\n+\n+    /*\n+     * If the EMF is created with PrintParameters=false and trace is enabled for SQL the parameter values will not be\n+     * logged in exception text.\n+     */\n+    public void testParamsEnabledWithLogging() throws Exception {\n+        RollbackException e =\n+            getRollbackException(PObject.class, CLEAR_TABLES, \"openjpa.ConnectionFactoryProperties\",\n+                \"PrintParameters=true\", \"openjpa.Log\", \"SQL=TRACE,File=temp.txt\");\n+        assertFalse(Pattern.matches(_regex, e.toString()));\n+        Throwable nested = e.getCause();\n+        assertNotNull(nested); // should be at least one nested exception\n+        while (nested != null) {\n+            if (Pattern.matches(\".*INSERT.*\", nested.toString())) {\n+                // only check if the message contains the insert statement.\n+                assertTrue(Pattern.matches(_regex, nested.toString()));\n+            }\n+            nested = nested.getCause();\n+        }\n+        checkAndDeleteLogFile(\"temp.txt\", true);\n+    }\n+\n+    private void checkAndDeleteLogFile(String filename, boolean containsParams) throws Exception {\n+        File f = null;\n+        FileReader fr = null;\n+        BufferedReader br = null;\n+        try {\n+            f = new File(filename);\n+            fr = new FileReader(f);\n+            br = new BufferedReader(fr);\n+\n+            String s = br.readLine();\n+            while (s != null) {\n+                if (Pattern.matches(\".*INSERT.*\", s)) {\n+                    if (containsParams) {\n+                        assertTrue(Pattern.matches(_regex, s));\n+                    } else {\n+                        assertFalse(Pattern.matches(_regex, s));\n+                    }\n+                }\n+                s = br.readLine();\n+            }\n+        } finally {\n+            if (br != null) {\n+                br.close();\n+            }\n+            if (fr != null) {\n+                fr.close();\n+            }\n+            if (f != null) {\n+                f.delete();\n+            }\n+        }\n+    }\n+}"}]}

