{"sha":"325aa77bc15aaa0dc0c0118186525af232f2be36","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyNWFhNzdiYzE1YWFhMGRjMGMwMTE4MTg2NTI1YWYyMzJmMmJlMzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:19:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:19:55Z"},"message":"New test cases, currently disabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627979 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4deeb4f9aeb3d6f72b3c10b78a384fa4a13e3d20","url":"https://api.github.com/repos/apache/openjpa/git/trees/4deeb4f9aeb3d6f72b3c10b78a384fa4a13e3d20"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","html_url":"https://github.com/apache/openjpa/commit/325aa77bc15aaa0dc0c0118186525af232f2be36","comments_url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36/comments","author":null,"committer":null,"parents":[{"sha":"ff42968eed5a7a90fcb4245f6b25bce56659d150","url":"https://api.github.com/repos/apache/openjpa/commits/ff42968eed5a7a90fcb4245f6b25bce56659d150","html_url":"https://github.com/apache/openjpa/commit/ff42968eed5a7a90fcb4245f6b25bce56659d150"}],"stats":{"total":83278,"additions":82831,"deletions":447},"files":[{"sha":"b4ab52b42cea65aa66769ed04993f08aac199826","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","status":"modified","additions":0,"deletions":447,"changes":447,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -95,9 +95,6 @@\n     private static final Localizer _loc =\r\n         Localizer.forPackage(AbstractTestCase.class);\r\n \r\n-    protected String multiThreadExecuting = null;\r\n-    protected boolean inTimeoutThread = false;\r\n-\r\n     private Log log = null;\r\n \r\n     private static Map _times = new HashMap();\r\n@@ -454,410 +451,6 @@ else if (paramType == Date.class)\n         return bean;\r\n     }\r\n \r\n-    ///////////////////\r\n-    // Multi threading\r\n-    ///////////////////\r\n-\r\n-    /**\r\n-     * Re-execute the invoking method a random number of times\r\n-     * in a random number of Threads.\r\n-     */\r\n-    public void mttest() throws ThreadingException {\r\n-        // 6 iterations in 8 threads is a good trade-off between\r\n-        // tests taking way too long and having a decent chance of\r\n-        // identifying MT problems.\r\n-        int iterations = 6;\r\n-        int threads = 8;\r\n-\r\n-        mttest(threads, iterations);\r\n-    }\r\n-\r\n-    /**\r\n-     * Execute the calling method <code>iterations</code>\r\n-     * times in <code>threads</code> Threads.\r\n-     */\r\n-    public void mttest(int threads, int iterations) {\r\n-        mttest(0, threads, iterations);\r\n-    }\r\n-\r\n-    public void mttest(int serialCount, int threads, int iterations)\r\n-        throws ThreadingException {\r\n-        String methodName = callingMethod(\"mttest\");\r\n-        mttest(serialCount, threads, iterations, methodName, new Object [0]);\r\n-    }\r\n-\r\n-    /**\r\n-     * Execute a test method in multiple threads.\r\n-     *\r\n-     * @param threads the number of Threads to run in\r\n-     * @param iterations the number of times the method should\r\n-     * be execute in a single Thread\r\n-     * @param method the name of the method to execute\r\n-     * @param args the arguments to pass to the method\r\n-     * @throws ThreadingException if an errors occur in\r\n-     * any of the Threads. The actual exceptions\r\n-     * will be embedded in the exception. Note that\r\n-     * this means that assert() failures will be\r\n-     * treated as errors rather than warnings.\r\n-     * @author Marc Prud'hommeaux\r\n-     */\r\n-    public void mttest(int threads, int iterations, final String method,\r\n-        final Object [] args) throws ThreadingException {\r\n-        mttest(0, threads, iterations, method, args);\r\n-    }\r\n-\r\n-    public void mttest(int serialCount,\r\n-        int threads, int iterations, final String method, final Object [] args)\r\n-        throws ThreadingException {\r\n-        if (multiThreadExecuting != null && multiThreadExecuting.equals(method))\r\n-        {\r\n-            // we are currently executing in multi-threaded mode:\r\n-            // don't deadlock!\r\n-            return;\r\n-        }\r\n-\r\n-        multiThreadExecuting = method;\r\n-\r\n-        try {\r\n-            Class [] paramClasses = new Class [args.length];\r\n-            for (int i = 0; i < paramClasses.length; i++)\r\n-                paramClasses[i] = args[i].getClass();\r\n-\r\n-            final Method meth;\r\n-\r\n-            try {\r\n-                meth = getClass().getMethod(method, paramClasses);\r\n-            } catch (NoSuchMethodException nsme) {\r\n-                throw new ThreadingException(nsme.toString(), nsme);\r\n-            }\r\n-\r\n-            final Object thiz = this;\r\n-\r\n-            mttest(\"reflection invocation: (\" + method + \")\",\r\n-                serialCount, threads, iterations, new VolatileRunnable() {\r\n-                public void run() throws Exception {\r\n-                    meth.invoke(thiz, args);\r\n-                }\r\n-            });\r\n-        } finally {\r\n-            multiThreadExecuting = null;\r\n-        }\r\n-    }\r\n-\r\n-    public void mttest(String title, final int threads, final int iterations,\r\n-        final VolatileRunnable runner) throws ThreadingException {\r\n-        mttest(title, 0, threads, iterations, runner);\r\n-    }\r\n-\r\n-    /**\r\n-     * Execute a test method in multiple threads.\r\n-     *\r\n-     * @param title a description of the test, for inclusion in the\r\n-     * error message\r\n-     * @param serialCount the number of times to run the method\r\n-     * serially before spawning threads.\r\n-     * @param threads the number of Threads to run in\r\n-     * @param iterations the number of times the method should\r\n-     * @param runner the VolatileRunnable that will execute\r\n-     * the actual test from within the Thread.\r\n-     * @throws ThreadingException if an errors occur in\r\n-     * any of the Threads. The actual exceptions\r\n-     * will be embedded in the exception. Note that\r\n-     * this means that assert() failures will be\r\n-     * treated as errors rather than warnings.\r\n-     * @author Marc Prud'hommeaux be execute in a single Thread\r\n-     * @author Marc Prud'hommeaux\r\n-     */\r\n-    public void mttest(String title, final int serialCount,\r\n-        final int threads, final int iterations, final VolatileRunnable runner)\r\n-        throws ThreadingException {\r\n-        final List exceptions = Collections.synchronizedList(new LinkedList());\r\n-\r\n-        Thread [] runners = new Thread [threads];\r\n-\r\n-        final long startMillis = System.currentTimeMillis() + 1000;\r\n-\r\n-        for (int i = 1; i <= threads; i++) {\r\n-            final int thisThread = i;\r\n-\r\n-            runners[i - 1] =\r\n-                new Thread(title + \" [\" + i + \" of \" + threads + \"]\") {\r\n-                    public void run() {\r\n-                        // do our best to have all threads start at the exact\r\n-                        // same time. This is imperfect, but the closer we\r\n-                        // get to everyone starting at the same time, the\r\n-                        // better chance we have for identifying MT problems.\r\n-                        while (System.currentTimeMillis() < startMillis)\r\n-                            yield();\r\n-\r\n-                        int thisIteration = 1;\r\n-                        try {\r\n-                            for (; thisIteration <= iterations; thisIteration++)\r\n-                            {\r\n-                                // go go go!\r\n-                                runner.run();\r\n-                            }\r\n-                        } catch (Throwable error) {\r\n-                            synchronized (exceptions) {\r\n-                                // embed the exception into something that gives\r\n-                                // us some more information about the threading\r\n-                                // environment\r\n-                                exceptions.add(new ThreadingException(\"thread=\"\r\n-                                    + this.toString()\r\n-                                    + \";threadNum=\" + thisThread\r\n-                                    + \";maxThreads=\" + threads\r\n-                                    + \";iteration=\" + thisIteration\r\n-                                    + \";maxIterations=\" + iterations, error));\r\n-                            }\r\n-                        }\r\n-                    }\r\n-                };\r\n-        }\r\n-\r\n-        // start the serial tests(does not spawn the threads)\r\n-        for (int i = 0; i < serialCount; i++) {\r\n-            runners[0].run();\r\n-        }\r\n-\r\n-        // start the multithreaded\r\n-        for (int i = 0; i < threads; i++) {\r\n-            runners[i].start();\r\n-        }\r\n-\r\n-        // wait for them all to complete\r\n-        for (int i = 0; i < threads; i++) {\r\n-            try {\r\n-                runners[i].join();\r\n-            } catch (InterruptedException e) {\r\n-            }\r\n-        }\r\n-\r\n-        if (exceptions.size() == 0)\r\n-            return; // sweeeeeeeet: no errors\r\n-\r\n-        // embed all the exceptions that were throws into a\r\n-        // ThreadingException\r\n-        Throwable [] errors = (Throwable []) exceptions.toArray(\r\n-            new Throwable [0]);\r\n-        throw new ThreadingException(\"The \"\r\n-            + errors.length + \" embedded errors \"\r\n-            + \"occured in the execution of \" + iterations + \" iterations \"\r\n-            + \"of \" + threads + \" threads: [\" + title + \"]\", errors);\r\n-    }\r\n-\r\n-    /**\r\n-     * Check to see if we are in the top-level execution stack.\r\n-     */\r\n-    public boolean isRootThread() {\r\n-        return multiThreadExecuting == null;\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the last method name that called this one by\r\n-     * parsing the current stack trace.\r\n-     *\r\n-     * @param exclude a method name to skip\r\n-     * @throws IllegalStateException If the calling method could not be\r\n-     * identified.\r\n-     * @author Marc Prud'hommeaux\r\n-     */\r\n-    public String callingMethod(String exclude) {\r\n-        // determine the currently executing method by\r\n-        // looking at the stack track. Hackish, but convenient.\r\n-        StringWriter sw = new StringWriter();\r\n-        new Exception().printStackTrace(new PrintWriter(sw));\r\n-        for (StringTokenizer stackTrace = new StringTokenizer(sw.toString(),\r\n-            System.getProperty(\"line.separator\"));\r\n-            stackTrace.hasMoreTokens();) {\r\n-            String line = stackTrace.nextToken().trim();\r\n-\r\n-            // not a stack trace element\r\n-            if (!(line.startsWith(\"at \")))\r\n-                continue;\r\n-\r\n-            String fullMethodName = line.substring(0, line.indexOf(\"(\"));\r\n-\r\n-            String shortMethodName = fullMethodName.substring(\r\n-                fullMethodName.lastIndexOf(\".\") + 1);\r\n-\r\n-            // skip our own methods!\r\n-            if (shortMethodName.equals(\"callingMethod\"))\r\n-                continue;\r\n-            if (exclude != null && shortMethodName.equals(exclude))\r\n-                continue;\r\n-\r\n-            return shortMethodName;\r\n-        }\r\n-\r\n-        throw new IllegalStateException(\"Could not identify calling \"\r\n-            + \"method in stack trace\");\r\n-    }\r\n-\r\n-    /**\r\n-     * A Runnable that can throw an Exception: used to test cases.\r\n-     */\r\n-    public static interface VolatileRunnable {\r\n-\r\n-        public void run() throws Exception;\r\n-    }\r\n-\r\n-    /**\r\n-     * Exception for errors caught during threading tests.\r\n-     */\r\n-    public class ThreadingException extends RuntimeException {\r\n-\r\n-        private final Throwable[] _nested;\r\n-\r\n-        public ThreadingException(String msg, Throwable nested) {\r\n-            super(msg);\r\n-            if (nested == null)\r\n-                _nested = new Throwable[0];\r\n-            else\r\n-                _nested = new Throwable[]{ nested };\r\n-        }\r\n-\r\n-        public ThreadingException(String msg, Throwable[] nested) {\r\n-            super(msg);\r\n-            if (nested == null)\r\n-                _nested = new Throwable[0];\r\n-            else\r\n-                _nested = nested;\r\n-        }\r\n-\r\n-        public void printStackTrace() {\r\n-            printStackTrace(System.out);\r\n-        }\r\n-\r\n-        public void printStackTrace(PrintStream out) {\r\n-            printStackTrace(new PrintWriter(out));\r\n-        }\r\n-\r\n-        public void printStackTrace(PrintWriter out) {\r\n-            super.printStackTrace(out);\r\n-            for (int i = 0; i < _nested.length; i++) {\r\n-                out.print(\"Nested Throwable #\" + (i + 1) + \": \");\r\n-                _nested[i].printStackTrace(out);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    //////////\r\n-    // Timing\r\n-    //////////\r\n-\r\n-    /**\r\n-     * Sleep the current Thread for a random amount of time from 0-1000 ms.\r\n-     */\r\n-    public void sleepRandom() {\r\n-        sleepRandom(1000);\r\n-    }\r\n-\r\n-    /**\r\n-     * Sleep the current Thread for a random amount of time from\r\n-     * 0-<code>max</code> ms.\r\n-     */\r\n-    public void sleepRandom(int max) {\r\n-        try {\r\n-            Thread.currentThread().sleep((long) (Math.random() * max));\r\n-        } catch (InterruptedException ex) {\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Re-run this method in the current thread, timing out\r\n-     * after the specified number of seconds.\r\n-     * Usage:\r\n-     * <pre> public void timeOutOperation() { if (timeout(5 * 1000)) return;\r\n-     *  Thread.currentThread().sleep(10 * 1000); }\r\n-     * </pre>\r\n-     * <p/>\r\n-     * <p/>\r\n-     * <strong>Warning</strong> this method should be used sparingly,\r\n-     * and only when you expect that a timeout will <strong>not</strong>\r\n-     * occur. It utilized the deprecated {@link Thread#stop()} and\r\n-     * {@link Thread#interrupt} methods, which can leave monitors in an\r\n-     * invalid state. It is only used because it provides more\r\n-     * meaningful information than just seeing that the entire autobuild\r\n-     * timed out.\r\n-     *\r\n-     * @param millis the number of milliseconds we should wait.\r\n-     * @return true if we are are in the thread that requested the\r\n-     *         timeout, false if we are in the timeout thread itself.\r\n-     */\r\n-    public boolean timeout(long millis) throws Throwable {\r\n-        String methodName = callingMethod(\"timeout\");\r\n-        return timeout(millis, methodName);\r\n-    }\r\n-\r\n-    /**\r\n-     * @see #timeout(long)\r\n-     */\r\n-    public boolean timeout(long millis, String methodName) throws Throwable {\r\n-        // we are in the timing out-thread: do nothing so the\r\n-        // actual test method can run\r\n-        if (inTimeoutThread)\r\n-            return false;\r\n-\r\n-        inTimeoutThread = true;\r\n-        long endTime = System.currentTimeMillis() + millis;\r\n-\r\n-        try {\r\n-            final Method method = getClass().\r\n-                getMethod(methodName, (Class[]) null);\r\n-            final Object thz = this;\r\n-\r\n-            // spawn thread\r\n-            TimeOutThread tot = new TimeOutThread(\"TimeOutThread [\"\r\n-                + methodName + \"] (\" + millis + \"ms)\") {\r\n-                public void run() {\r\n-                    try {\r\n-                        method.invoke(thz, (Object[]) null);\r\n-                    } catch (Throwable t) {\r\n-                        throwable = t;\r\n-                    } finally {\r\n-                        completed = true;\r\n-                    }\r\n-                }\r\n-            };\r\n-\r\n-            tot.start();\r\n-\r\n-            // wait for the completion or a timeout to occur\r\n-            tot.join(millis);\r\n-\r\n-            // have we timed out? Kill the thread and throw an exception\r\n-            if (System.currentTimeMillis() >= endTime) {\r\n-                // if we are waiting on a monitor, this will give\r\n-                // us a useful stack trace.\r\n-                try {\r\n-                    tot.interrupt();\r\n-                } catch (Throwable e) {\r\n-                }\r\n-                Thread.currentThread().sleep(500);\r\n-\r\n-                // try to kill the thread\r\n-                try {\r\n-                    tot.stop();\r\n-                } catch (Throwable e) {\r\n-                }\r\n-                Thread.currentThread().sleep(500);\r\n-\r\n-                throw new OperationTimedOutException(\"Execution of \\\"\"\r\n-                    + methodName + \"\\\" timed out after \"\r\n-                    + millis + \" milliseconds\", tot.throwable);\r\n-            }\r\n-\r\n-            // throw any exceptions that may have occured\r\n-            if (tot.throwable != null)\r\n-                throw tot.throwable;\r\n-\r\n-            // I guess everything was OK\r\n-            return true;\r\n-        } finally {\r\n-            inTimeoutThread = false;\r\n-        }\r\n-    }\r\n-\r\n     /**\r\n      * Utility method to start a profile.\r\n      *\r\n@@ -890,46 +483,6 @@ public long endProfile(String name) {\n         return elapsed;\r\n     }\r\n \r\n-    private static class TimeOutThread extends Thread {\r\n-\r\n-        public Throwable throwable = null;\r\n-        public boolean completed = false;\r\n-\r\n-        public TimeOutThread(String name) {\r\n-            super(name);\r\n-            setDaemon(true);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Indicates that a timeout occured.\r\n-     */\r\n-    public static class OperationTimedOutException extends RuntimeException {\r\n-\r\n-        private final Throwable _err;\r\n-\r\n-        public OperationTimedOutException(String msg, Throwable throwable) {\r\n-            super(msg);\r\n-            _err = throwable;\r\n-        }\r\n-\r\n-        public void printStackTrace() {\r\n-            printStackTrace(System.out);\r\n-        }\r\n-\r\n-        public void printStackTrace(PrintStream out) {\r\n-            printStackTrace(new PrintWriter(out));\r\n-        }\r\n-\r\n-        public void printStackTrace(PrintWriter out) {\r\n-            super.printStackTrace(out);\r\n-            if (_err != null) {\r\n-                out.print(\"Nested Throwable: \");\r\n-                _err.printStackTrace(out);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n     /////////////////////////\r\n     // ClassLoader functions\r\n     /////////////////////////\r"},{"sha":"7f08fdbe518971670d7537137cc573cbc36dad84","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":241,"deletions":0,"changes":241,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -261,6 +261,11 @@\n             <version>3.2</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>jakarta-regexp</groupId>\n+            <artifactId>jakarta-regexp</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>\n@@ -310,6 +315,242 @@\n                 <artifactId>maven-surefire-plugin</artifactId>\n                 <configuration>\n                     <argLine>${test.jvm.arguments}</argLine>\n+                    <excludes>\n+                        <!-- exclude classes that end with 'Test'; these \n+                             are not test cases per OpenJPA standards -->\n+                        <exclude>org/apache/openjpa/**/*Test.java</exclude>\n+\n+                        <!-- exclude classes that include a $; inner classes\n+                             are not test cases per OpenJPA standards -->\n+                        <exclude>org/apache/openjpa/**/*$*</exclude>\n+                        <exclude>org/apache/openjpa/**/*.*</exclude>\n+\n+                        <!-- exclude failing Slice tests -->\n+                        <exclude>**/slice/**/*.java</exclude>\n+\n+                        <!-- exclude new tests that aren't passing yet -->\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestAdvAnnot.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestAdvAnnot.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestAnnotationBasics.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestDDCallbackMethods.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestEJBEmbedded.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestEmbeddableSuperclass.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestEmbeddedId.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestEntityListenerAnnot.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestEntityOrderBy.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestEnumerated.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestFlatInheritance.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestGenerators.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestJoinedInheritance.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestManyToMany.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestMapKey.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestOneToMany.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestOneToOne.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestPropertyAccess.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestSerializedLobs.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestTablePerClassInheritance.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/annotations/TestVersion.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/cache/TestQueryCache.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/conf/TestKodoConfiguration.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestFlushDataCache.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestLocalCache.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestMutableParameters.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestResultShapes.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestSJVMCache.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/enhance/TestClone.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/enhance/TestNoNoArgs.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/entityoperation/TestCascades.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestEvents.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestLifecycleEventManager.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestDFG.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestLocators.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestRawField.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchema.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestArrayValues2.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestBigDecimals.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestCalendarFields.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestCheckConsistency.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestDateQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestDependentFields2.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBLobs.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBLocales.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBNullValues.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBState.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestEJBTransactions.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestExtents.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestExtents2.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestFetchGroups.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestFetchPlan.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestFieldRange.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestFieldRange2.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestFieldState.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestGetObjectsById.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestInheritance.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestMultiThreaded.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestNTW.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestPCClass.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestPersistenceManager.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestPersistentMaps.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestPMMemory.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestProxies2.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestRestoreValues.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSavepoints.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSecondClassValues.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSecurityContext.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSequence.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSerialize.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSimple.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestStoreBlob.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/kernel/TestTransition2.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestClassMetaData.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestExternalValues.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestNonPersistentFields.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestOrderBy.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestPersistentClasses.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestSequenceAssigned.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestValueStrategies.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestComplexQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestEJBQueryInterface.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestMathQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestNamedQueries.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestQueryResults.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java</exclude>\n+                        <exclude>org/apache/openjpa/persistence/query/TestSimple.java</exclude>\n+                    </excludes>\n                     <systemProperties>\n                         <property>\n                             <name>openjpa.Log</name>"},{"sha":"d30153d1bbe5ebee29f96d11fad2f9ddc6484c54","filename":"openjpa-persistence-jdbc/src/test/java/BrokerImplInitialization.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/BrokerImplInitialization.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/BrokerImplInitialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/BrokerImplInitialization.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,29 @@\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+\n+public class BrokerImplInitialization extends TestCase {\n+\n+    public void testInitialization() {\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(null);\n+        emf.createEntityManager().close(); // initialization\n+        long start = System.currentTimeMillis();\n+        int count = 100000;\n+        int hash = 0;\n+        Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader());\n+        for(int i = 0; i < count; i++) {\n+            if (i % 10000 == 0)\n+                System.out.printf(\"starting iteration %d after %d millis.\\n\",\n+                    i, System.currentTimeMillis() - start);\n+            EntityManager em = emf.createEntityManager();\n+            hash |= em.hashCode();\n+            em.close();\n+        }\n+        System.out.printf(\"took %d millis to complete %d runs.\\n\", \n+            System.currentTimeMillis() - start, count);\n+        System.out.println(\"hash: \" + hash);\n+        emf.close();\n+    }\n+}"},{"sha":"8448e5f36ed4bd7c4e5023188321900ef9582f06","filename":"openjpa-persistence-jdbc/src/test/java/CurrentTests.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/CurrentTests.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/CurrentTests.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/CurrentTests.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+import junit.framework.Test;\r\n+import junit.framework.TestSuite;\r\n+import org.apache.openjpa.kernel.TestEnhancedInstanceBrokerSerialization;\r\n+import org.apache.openjpa.kernel.TestEntityManagerFactoryPool;\r\n+import org.apache.openjpa.kernel.TestInstanceGraphBrokerSerialization;\r\n+import org.apache.openjpa.kernel.TestUnenhancedFieldAccessInstanceBrokerSerialization;\r\n+import org.apache.openjpa.kernel.TestUnenhancedFieldAccessWithRelationInstanceBrokerSerialization;\r\n+import org.apache.openjpa.kernel.TestUnenhancedPropertyAccessInstanceBrokerSerialization;\r\n+import org.apache.openjpa.kernel.TestUnenhancedPropertyAccessWithRelationInstanceBrokerSerialization;\r\n+\r\n+public class CurrentTests extends TestSuite {\r\n+\r\n+    public static Test suite() {\r\n+        TestSuite suite = new TestSuite(\"Current Tests\");\r\n+        suite.addTestSuite(TestEnhancedInstanceBrokerSerialization.class);\r\n+        suite.addTestSuite(TestInstanceGraphBrokerSerialization.class);\r\n+        suite.addTestSuite(\r\n+            TestUnenhancedFieldAccessWithRelationInstanceBrokerSerialization.class);\r\n+        suite.addTestSuite(\r\n+            TestUnenhancedPropertyAccessWithRelationInstanceBrokerSerialization.class);\r\n+        suite.addTestSuite(\r\n+            TestUnenhancedFieldAccessInstanceBrokerSerialization.class);\r\n+        suite.addTestSuite(\r\n+            TestUnenhancedPropertyAccessInstanceBrokerSerialization.class);\r\n+\r\n+//        suite.addTestSuite(TestPCSubclassNameConversion.class);\r\n+//        suite.addTestSuite(ManagedCacheTest.class);\r\n+        suite.addTestSuite(TestEntityManagerFactoryPool.class);\r\n+        return suite;\r\n+    }\r\n+}\r"},{"sha":"37692b10c46ba743e688ec607ddf35d317382576","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestAdvAnnot.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestAdvAnnot.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestAdvAnnot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestAdvAnnot.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,133 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import junit.framework.*;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestAdvAnnot extends AbstractTestCase\r\n+{\r\n+\tpublic TestAdvAnnot(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(Schedule.class);\r\n+\t\tdeleteAll(FlightSchedule.class);\r\n+\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tfor(int i = 0; i<5; i++)\r\n+\t\t{\r\n+\t\t\tCalendar cal = Calendar.getInstance();\r\n+\t\t\tDate date = new Date(01012006l);\r\n+\t\t\tDate edate = new Date(10031980l);\r\n+\t\t\tString name = \"AmericaWest\"+i;\r\n+\t\t\tString schedname = \"Schedule\"+i;\r\n+\t\t\tFlightSchedule sched = new FlightSchedule(schedname, cal, date, edate, name);\r\n+\r\n+\t\t\tem.persist(sched);\r\n+\r\n+\r\n+\t\t}\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testTimeTemporalAnnot()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\r\n+\t\tString query = \"SELECT d.startDate FROM FlightSchedule d WHERE d.name = :name\";\r\n+\r\n+\t\tDate obj = (Date) em.createQuery(query)\r\n+\t\t              .setParameter(\"name\", \"Schedule3\")\r\n+\t\t              .getSingleResult();\r\n+\r\n+\t\tassertNotNull(obj);\r\n+\t\tassertTrue(obj instanceof Date);\r\n+\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testCalendarTemporalAnnot()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tString query = \"SELECT d FROM FlightSchedule d\";\r\n+\r\n+\t\tList list = em.createQuery(query).getResultList();\r\n+\t\tassertNotNull(list);\r\n+\t\tassertEquals(5, list.size());\r\n+\t\t/*\r\n+\t\tString query = \"SELECT d.dob FROM FlightSchedule d WHERE d.name = :name\";\r\n+\r\n+\t\tList list = em.createQuery(query)\r\n+\t\t              .setParameter(\"name\", \"Schedule3\")\r\n+\t\t              .getResultList();\r\n+\r\n+\t\tassertNotNull(list);\r\n+\t\tassertTrue(list.get(0) instanceof Calendar);*/\r\n+\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testUniqueConstraintAnnot()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tString query = \"Update FlightSchedule f SET f.planeName = :plane WHERE f.name = :sname\";\r\n+\t\tint upd = 0;\r\n+\r\n+\t\ttry\r\n+\t\t{\r\n+\t\t\tupd = em.createQuery(query)\r\n+            .setParameter(\"plane\", \"AmericaWest3\")\r\n+            .setParameter(\"sname\", \"Schedule2\")\r\n+            .executeUpdate();\r\n+\r\n+\t\t\tfail(\"Violated unique constraint rule...@Unique Constraint annotation needs to be supported\");\r\n+\t\t}\r\n+\t\tcatch(Exception e)\r\n+\t\t{\r\n+\t\t\t//suppose to throw exception based on the unique constraint rule\r\n+\t\t}\r\n+\r\n+\t\tassertNotNull(upd);\r\n+\t\tassertEquals(0, upd);\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+}\r"},{"sha":"d86d709a56320aa51563b5b1f7ba921f96dfbe3c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestAnnotationBasics.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestAnnotationBasics.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestAnnotationBasics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestAnnotationBasics.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.meta.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+\r\n+public class TestAnnotationBasics extends AbstractTestCase {\r\n+\r\n+\tpublic TestAnnotationBasics(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void testSingleFieldIdentity()\r\n+    {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(em, Entity1.class);\r\n+        assertTrue(\"Entity1 should use application identity\",\r\n+            ClassMetaData.ID_APPLICATION == meta.getIdentityType());\r\n+        assertTrue(\"Entity1 should use single-field identity\",\r\n+            meta.isOpenJPAIdentity());\r\n+    }\r\n+/*\r\n+    public void testVersionField() {\r\n+        ClassMapping mapping = (ClassMapping) getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(Entity1.class,\r\n+            null, true);\r\n+        FieldMapping fm = mapping.getFieldMapping(\"versionField\");\r\n+        assertTrue(fm.isVersion());\r\n+        String col = mapping.getVersion().getColumns()[0].getName();\r\n+        assertTrue(col, \"VERSIONFIELD\".equalsIgnoreCase(col));\r\n+    }\r\n+*/}\r"},{"sha":"aca608163195dc2ed85af11089ba092a98329123","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestDDCallbackMethods.java","status":"added","additions":266,"deletions":0,"changes":266,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestDDCallbackMethods.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestDDCallbackMethods.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestDDCallbackMethods.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,266 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.util.List;\r\n+\r\n+import junit.framework.*;\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestDDCallbackMethods extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestDDCallbackMethods(String name)\r\n+\t{\r\n+\t\tsuper(name, \"ddcactusapp\");\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(LifeCycleDDEntity.class);\r\n+\t\tdeleteAll(LifeCycleDDEntity2.class);\r\n+\t\tCallbackStorage.clearStore();\r\n+\t}\r\n+\r\n+\tpublic void testDDPrpPop()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tLifeCycleDDEntity lcd = new LifeCycleDDEntity(\"afam\", \"okeke\");\r\n+\r\n+\t\tem.persist(lcd);\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\r\n+\t\tassertNotNull(store.getClist());\r\n+\t\tassertEquals(2, store.getClist().size());\r\n+\t\tassertEquals(\"def-prepersist\", store.getClist().get(0));\r\n+\t\tassertEquals(\"def-postpersist\", store.getClist().get(1));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testDDPrrPor()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tLifeCycleDDEntity lcd = new LifeCycleDDEntity(\"john\", \"rash\");\r\n+\r\n+\t\tem.persist(lcd);\r\n+\t\tint id = lcd.getId();\r\n+\r\n+\t\tlcd = em.find(LifeCycleDDEntity.class, id);\r\n+\r\n+\t\tassertNotNull(lcd);\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.clearStore();\r\n+\r\n+\t\tem.remove(lcd);\r\n+\r\n+\t\tassertNotNull(store.getClist());\r\n+\t\tassertEquals(2, store.getClist().size());\r\n+\t\tassertEquals(\"def-preremove\", store.getClist().get(0));\r\n+\t\tassertEquals(\"def-postremove\", store.getClist().get(1) );\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testDDPouPru()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tLifeCycleDDEntity lcd = new LifeCycleDDEntity(\"Don\", \"Shiddle\");\r\n+\r\n+\t\tem.persist(lcd);\r\n+\t\tint id = lcd.getId();\r\n+\r\n+\t\tCallbackStorage.clearStore();\r\n+\r\n+\t\tString query = \"Update LifeCycleDDEntity e SET e.name = 'Joseph' WHERE e.id = :id\";\r\n+\r\n+\t\tint result = em.createQuery(query)\r\n+\t\t               .setParameter(\"id\", id)\r\n+\t\t               .executeUpdate();\r\n+\r\n+\t\tList store = CallbackStorage.getInstance().getClist();\r\n+\r\n+\t\tassertNotNull(result);\r\n+\t\tassertEquals(1, result);\r\n+\t\tassertNotNull(store);\r\n+\t\tassertEquals(2, store.size());\r\n+\t\tassertEquals(\"def-preupdate\", store.get(0));\r\n+\t\tassertEquals(\"def-postupdate\", store.get(1));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testDDPol()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tLifeCycleDDEntity lcd = new LifeCycleDDEntity(\"Julie\", \"Jolie\");\r\n+\r\n+\t\tem.persist(lcd);\r\n+\t\tint id = lcd.getId();\r\n+\r\n+        CallbackStorage.clearStore();\r\n+\r\n+\t\tendTx(em);\r\n+\r\n+\t\tstartTx(em);\r\n+\t\tCallbackStorage.clearStore();\r\n+\r\n+\t\tassertTrue(CallbackStorage.getInstance().getClist().isEmpty());\r\n+\r\n+\t\tlcd = em.find(LifeCycleDDEntity.class, id);\r\n+\t\tem.refresh(lcd);\r\n+\r\n+\t\tassertNotNull(lcd);\r\n+\t\tassertNotNull(CallbackStorage.getInstance().getClist());\r\n+\t\tassertEquals(2, CallbackStorage.getInstance().getClist().size());\r\n+\t\tassertEquals(\"def-postload\", CallbackStorage.getInstance().getClist().get(0));\r\n+\t\tassertEquals(\"def-postload\", CallbackStorage.getInstance().getClist().get(1));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\r\n+\t}\r\n+\r\n+\t/**  DEFAULT LISTENER DD TESTING **/\r\n+\r\n+\tpublic void testDefaultPrePostPersistListener()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tLifeCycleDDEntity2 lc = new LifeCycleDDEntity2(\"Bill\", \"Clinton\");\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.clearStore();\r\n+\r\n+\t\tem.persist(lc);\r\n+\r\n+\t\tassertEquals(4, store.getClist().size());\r\n+\t\tassertEquals(\"def-prepersist\", store.getClist().get(0));\r\n+\t\tassertEquals(\"verifyprp\", store.getClist().get(1));\r\n+\t\tassertEquals(\"def-postpersist\", store.getClist().get(2));\r\n+\t\tassertEquals(\"verifypop\", store.getClist().get(3));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+    //FIX-ME Default-Entity-listener Impl. is over firing\r\n+\tpublic void testDefaultPrePostUpdateListener()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tLifeCycleDDEntity2 emp = new LifeCycleDDEntity2(\"lincoln\", \"Abraham\");\r\n+\r\n+\t\tem.persist(emp);\r\n+\r\n+\t\tint id = emp.getId();\r\n+\r\n+\t\tCallbackStorage.clearStore();\r\n+\r\n+\t\tString query = \"Update LifeCycleDDEntity2 e SET e.name = 'Joseph' WHERE e.id = :id\";\r\n+\r\n+\t\tint result = em.createQuery(query)\r\n+\t\t               .setParameter(\"id\", id)\r\n+\t\t               .executeUpdate();\r\n+\r\n+\t\tList store = CallbackStorage.getInstance().getClist();\r\n+\r\n+\t\tassertNotNull(result);\r\n+\t\tassertEquals(1, result);\r\n+\t\tassertNotNull(store);\r\n+\t\tassertEquals(2, store.size());\r\n+\t\tassertEquals(\"def-preupdate\", store.get(0));\r\n+\t\tassertEquals(\"def-postupdate\", store.get(1));\r\n+//\t\tassertEquals(\"def-postupdate\", store.get(2));\r\n+//\t\tassertEquals(\"def-postupdate\", store.get(3));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\t//FIX-ME Default-Entity-listener Impl. is over firing\r\n+\tpublic void testDefaultPostLoadListener()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tLifeCycleDDEntity2 emp = new LifeCycleDDEntity2(\"Thomas\", \"Jefferson\");\r\n+\r\n+\t\tem.persist(emp);\r\n+\t\tint id = emp.getId();\r\n+\t\tCallbackStorage.clearStore();\r\n+\r\n+\t\tendTx(em);\r\n+\r\n+\t\tstartTx(em);\r\n+\t\tCallbackStorage.clearStore();\r\n+\r\n+\t\tassertTrue(\"not empty...\", CallbackStorage.isEmpty());\r\n+\r\n+\t\temp = em.find(LifeCycleDDEntity2.class, id);\r\n+\t\tem.refresh(emp);\r\n+\r\n+\t\tassertNotNull(emp);\r\n+\t\tassertNotNull(CallbackStorage.getInstance().getClist());\r\n+\t\tassertEquals(2, CallbackStorage.getInstance().getClist().size());\r\n+\t\tassertEquals(\"def-postload\", CallbackStorage.getInstance().getClist().get(0));\r\n+\t\tassertEquals(\"def-postload\", CallbackStorage.getInstance().getClist().get(1));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testSubClassOverrideSuperCallbacksInh()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tLifeCycleDDEntity2 emp = new LifeCycleDDEntity2(\"Thomas\", \"Jefferson\");\r\n+\r\n+\t\tem.persist(emp);\r\n+\r\n+\t\tassertNotNull(emp);\r\n+\t\tassertNotNull(CallbackStorage.getInstance().getClist());\r\n+\t\tassertEquals(4, CallbackStorage.getInstance().getClist().size());\r\n+\t\tassertEquals(\"def-prepersist\", CallbackStorage.getInstance().getClist().get(0));\r\n+\t\tassertEquals(\"verifyprp\", CallbackStorage.getInstance().getClist().get(1));\r\n+\t\tassertEquals(\"def-postpersist\", CallbackStorage.getInstance().getClist().get(2));\r\n+\t\tassertEquals(\"verifypop\", CallbackStorage.getInstance().getClist().get(3));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+}\n\\ No newline at end of file"},{"sha":"8183153e95a856b9c4dc85250b03d6c9d01a1ee5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEJBEmbedded.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEJBEmbedded.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,140 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.sql.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+//import kodo.persistence.test.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import junit.framework.*;\r\n+\r\n+/**\r\n+ * Test for embedded\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestEJBEmbedded extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestEJBEmbedded(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    private static final String CLOB;\r\n+\r\n+    static {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < 1000; i++)\r\n+            buf.append('a');\r\n+        CLOB = buf.toString();\r\n+    }\r\n+\r\n+    public void setUp()\r\n+    {\r\n+        deleteAll (EmbedOwner.class);\r\n+    }\r\n+\r\n+    public void testEmbedded()\r\n+    {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        EmbedOwner owner = new EmbedOwner();\r\n+        owner.setBasic(\"foo\");\r\n+        EmbedValue embed = new EmbedValue();\r\n+        embed.setClob(CLOB);\r\n+        embed.setBasic(\"bar\");\r\n+        embed.setBlob(\"foobar\".getBytes());\r\n+        embed.setOwner(owner);\r\n+        owner.setEmbed(embed);\r\n+        em.persist(owner);\r\n+        int pk = owner.getPk();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        owner = em.find(EmbedOwner.class, pk);\r\n+        assertEquals(\"foo\", owner.getBasic());\r\n+        embed = owner.getEmbed();\r\n+        assertNotNull(embed);\r\n+        assertEquals(CLOB, embed.getClob());\r\n+        assertEquals(\"bar\", embed.getBasic());\r\n+        assertEquals(\"foobar\", new String(embed.getBlob()));\r\n+        assertEquals(owner, embed.getOwner());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNull() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        EmbedOwner owner = new EmbedOwner();\r\n+        owner.setBasic(\"foo\");\r\n+        em.persist(owner);\r\n+        int pk = owner.getPk();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        owner = em.find(EmbedOwner.class, pk);\r\n+        assertEquals(\"foo\", owner.getBasic());\r\n+        EmbedValue embed = owner.getEmbed();\r\n+        assertNotNull(embed);\r\n+        assertNull(embed.getClob());\r\n+        assertNull(embed.getBasic());\r\n+        assertNull(embed.getBlob());\r\n+        startTx(em);\r\n+    }\r\n+\r\n+//    public void testMappingTransferAndOverride() {\r\n+//        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+//        ClassMapping cls = conf.getMappingRepositoryInstance().getMapping\r\n+//            (EmbedOwner.class, null, true);\r\n+//        assertEquals(\"OWN_BASIC\", cls.getFieldMapping(\"basic\").\r\n+//            getColumns()[0].getName());\r\n+//        ClassMapping embed = cls.getFieldMapping(\"embed\").currentEntityManager()beddedMapping();\r\n+//        assertEquals(\"EMB_BLOB\", embed.getFieldMapping(\"blob\").\r\n+//            getColumns()[0].getName());\r\n+//        assertEquals(\"OVER_BASIC\", embed.getFieldMapping(\"basic\").\r\n+//            getColumns()[0].getName());\r\n+//        assertEquals(\"OVER_OWNER\", embed.getFieldMapping(\"owner\").\r\n+//            getColumns()[0].getName());\r\n+//\r\n+//        FieldMapping fm = embed.getFieldMapping(\"clob\");\r\n+//        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+//        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\r\n+//            if (dict.maxEmbeddedClobSize > 0)\r\n+//                assertTrue(fm.getStrategy() instanceof\r\n+//                    MaxEmbeddedClobFieldStrategy);\r\n+//            else\r\n+//                assertTrue(fm.getHandler() instanceof ClobValueHandler);\r\n+//        } else\r\n+//            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\r\n+//    }\r\n+}\r"},{"sha":"bb7a96a9adef58e569f5558eca55ef4c9d576c26","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEmbeddableSuperclass.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEmbeddableSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEmbeddableSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEmbeddableSuperclass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,140 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.sql.*;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+import org.apache.openjpa.meta.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import junit.framework.*;\r\n+\r\n+/**\r\n+ * <p>Test embeddable superclasses.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEmbeddableSuperclass extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestEmbeddableSuperclass(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(EmbeddableSuperSub.class);\r\n+    }\r\n+\r\n+    /*public void testSuperclassEmbeddedOnly() {\r\n+        ClassMapping cls = ((JDBCConfiguration) getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(EmbeddableSuper.class,\r\n+            null, true);\r\n+        assertTrue(cls.isEmbeddedOnly());\r\n+        assertEquals(NoneClassStrategy.getInstance(), cls.getStrategy());\r\n+    }\r\n+\r\n+    public void testSubclassMappingDefaultsAndOverrides() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertTrue(!cls.isEmbeddedOnly());\r\n+        assertTrue(cls.getStrategy() instanceof FullClassStrategy);\r\n+        assertEquals(ClassMapping.ID_APPLICATION, cls.getIdentityType());\r\n+        assertTrue(cls.isOpenJPAIdentity());\r\n+\r\n+        FieldMapping fm = cls.getFieldMapping(\"pk\");\r\n+        assertTrue(fm.isPrimaryKey());\r\n+        assertEquals(ValueStrategies.SEQUENCE, fm.getValueStrategy());\r\n+        assertEquals(\"ID\", fm.getColumns()[0].getName());\r\n+\r\n+        assertNull(cls.getField(\"trans\"));\r\n+\r\n+        fm = cls.getFieldMapping(\"clob\");\r\n+        assertEquals(\"CC\", fm.getColumns()[0].getName());\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\r\n+            if (dict.maxEmbeddedClobSize > 0)\r\n+                assertTrue(fm.getStrategy() instanceof\r\n+                    MaxEmbeddedClobFieldStrategy);\r\n+            else\r\n+                assertTrue(fm.getHandler() instanceof ClobValueHandler);\r\n+        } else\r\n+            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\r\n+    }\r\n+\r\n+    public void testSubclassDiscriminatorMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertEquals(\"DISC\", cls.getDiscriminator().getColumns()[0].\r\n+            getName());\r\n+    }\r\n+\r\n+    public void testVersionOverrideMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertEquals(\"VERSVAL\", cls.getVersion().getColumns()[0].getName());\r\n+    }\r\n+\r\n+    public void testRelationMappings() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        FieldMapping fm = cls.getFieldMapping(\"sub\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationFieldStrategy);\r\n+\r\n+        fm = cls.getFieldMapping(\"sup\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationFieldStrategy);\r\n+    }\r\n+*/\r\n+    public void testPersistAndFind() {\r\n+        EmbeddableSuperSub parent = new EmbeddableSuperSub();\r\n+        parent.setClob(\"parent\");\r\n+        EmbeddableSuperSub sub = new EmbeddableSuperSub();\r\n+        sub.setClob(\"sub\");\r\n+        EmbeddableSuperSub sup = new EmbeddableSuperSub();\r\n+        sup.setClob(\"sup\");\r\n+        parent.setSub(sub);\r\n+        parent.setSup(sup);\r\n+\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        em.persistAll(parent, sub, sup);\r\n+        endTx(em);\r\n+        long pk = parent.getPK();\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        parent = em.find(EmbeddableSuperSub.class, pk);\r\n+        assertEquals(\"parent\", parent.getClob());\r\n+        assertEquals(\"sub\", parent.getSub().getClob());\r\n+        assertEquals(\"sup\", parent.getSup().getClob());\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"8d3c86c413639c178a690d3e8adb4f94b5225578","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEmbeddedId.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEmbeddedId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEmbeddedId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEmbeddedId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,264 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.enhance.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+/**\r\n+ * <p>Test embedded id classes.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEmbeddedId extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestEmbeddedId(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    EmbeddedIdClass _oid;\r\n+    EmbeddedIdClass _roid;\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(EmbeddedIdEntity.class);\r\n+\r\n+        _oid = new EmbeddedIdClass();\r\n+        _oid.setPk1(1);\r\n+        _oid.setPk2(2);\r\n+\r\n+        EmbeddedIdEntity e = new EmbeddedIdEntity();\r\n+        e.setId(_oid);\r\n+        e.setValue(\"e\");\r\n+\r\n+        _roid = new EmbeddedIdClass();\r\n+        _roid.setPk1(2);\r\n+        _roid.setPk2(3);\r\n+\r\n+        EmbeddedIdEntity rel = new EmbeddedIdEntity();\r\n+        rel.setId(_roid);\r\n+        rel.setValue(\"r\");\r\n+        e.setRelation(rel);\r\n+\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        em.persistAll(e, rel);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testGetObjectId() {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        assertNotNull(e);\r\n+        assertEquals(\"e\", e.getValue());\r\n+        assertNull(e.getMappingOverrideRelation());\r\n+        assertNotNull(e.getRelation());\r\n+        assertEquals(\"r\", e.getRelation().getValue());\r\n+\r\n+        assertEquals(_oid, em.getObjectId(e));\r\n+        assertEquals(_roid, em.getObjectId(e.getRelation()));\r\n+        assertEquals(_oid, e.getId());\r\n+        assertEquals(_roid, e.getRelation().getId());\r\n+        assertNull(((PersistenceCapable) e.getId()).pcGetGenericContext());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMutateEmbeddedIdFieldValueOfNew() {\r\n+        EmbeddedIdEntity e1 = new EmbeddedIdEntity();\r\n+        e1.setValue(\"e1\");\r\n+        EmbeddedIdEntity e2 = new EmbeddedIdEntity();\r\n+        e2.setValue(\"e2\");\r\n+        \r\n+        e2.setId(new EmbeddedIdClass());\r\n+        //Comment this since pk3 is auto-generated and assigning\r\n+        //it explicitly causes a rollback\r\n+        //e2.getId().setPk3(99); // prevent assign on access\r\n+\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        //em.persistAll(e1, e2);\r\n+\r\n+         EmbeddedIdClass oid = new EmbeddedIdClass();\r\n+        oid.setPk1(4);\r\n+        oid.setPk2(5);\r\n+        //Comment this since pk3 is auto-generated and assigning\r\n+        //it explicitly causes a rollback\r\n+        //oid.setPk3(6);\r\n+        e1.setId(oid);\r\n+        e2.getId().setPk1(6);\r\n+        e2.getId().setPk2(7);\r\n+        em.persistAll(e1, e2);\r\n+\r\n+        endTx(em);\r\n+\r\n+        EmbeddedIdClass oid1 = e1.getId();\r\n+        EmbeddedIdClass oid2 = e2.getId();\r\n+        assertEquals(oid1, em.getObjectId(e1));\r\n+        assertEquals(oid2, em.getObjectId(e2));\r\n+        assertEquals(4, oid1.getPk1());\r\n+        assertEquals(5, oid1.getPk2());\r\n+        assertEquals(6, oid2.getPk1());\r\n+        assertEquals(7, oid2.getPk2());\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        e1 = em.find(EmbeddedIdEntity.class, oid1);\r\n+        e2 = em.find(EmbeddedIdEntity.class, oid2);\r\n+        assertEquals(oid1, em.getObjectId(e1));\r\n+        assertEquals(oid2, em.getObjectId(e2));\r\n+        assertEquals(oid1, e1.getId());\r\n+        assertEquals(oid2, e2.getId());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMutateEmbeddedIdFieldValueOfExisting() \r\n+    {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        e.setValue(\"changed\");\r\n+        try {\r\n+            e.getId().setPk1(9);\r\n+            endTx(em);\r\n+            fail(\"Committed with changed oid field.\");\r\n+        } catch (RuntimeException re) {\r\n+            if (isActiveTx(em))\r\n+            \trollbackTx(em);\r\n+        }\r\n+        catch (Exception exc)\r\n+        {\r\n+            if (isActiveTx(em))\r\n+            \trollbackTx(em);\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDetachAttach() {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        e.getRelation();\r\n+        endEm(em);\r\n+\r\n+        e.setValue(\"echanged\");\r\n+        e.getRelation().setValue(\"rchanged\");\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        EmbeddedIdEntity me = (EmbeddedIdEntity) em.mergeAll(e,\r\n+            e.getRelation())[0];\r\n+        assertTrue(me != e);\r\n+        assertNotNull(me.getRelation());\r\n+        assertTrue(me.getRelation() != e.getRelation());\r\n+        assertEquals(\"echanged\", me.getValue());\r\n+        assertEquals(\"rchanged\", me.getRelation().getValue());\r\n+        assertEquals(_oid, me.getId());\r\n+        assertEquals(_oid, em.getObjectId(me));\r\n+        assertEquals(_roid, me.getRelation().getId());\r\n+        assertEquals(_roid, em.getObjectId(me.getRelation()));\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testQuery() {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        Query q = em.createQuery(\"select e from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        EmbeddedIdEntity e = (EmbeddedIdEntity) q.getSingleResult();\r\n+        assertEquals(_oid, e.getId());\r\n+        assertEquals(\"e\", e.getValue());\r\n+\r\n+        q = em.createQuery(\"select e.id.pk2 from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        assertEquals(new Long(_oid.getPk2()), q.getSingleResult());\r\n+\r\n+        q = em.createQuery(\"select e.id from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        assertEquals(_oid, q.getSingleResult());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testAutoAssigned() {\r\n+        // begin with null id object\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        EmbeddedIdEntity e = new EmbeddedIdEntity();\r\n+        em.persist(e);\r\n+        EmbeddedIdClass oid = e.getId();\r\n+        assertNotNull(oid);\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        endTx(em);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        endEm(em);\r\n+\r\n+        // begin with non-null id object\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        e = new EmbeddedIdEntity();\r\n+        oid = new EmbeddedIdClass();\r\n+        oid.setPk1(4);\r\n+        oid.setPk2(5);\r\n+        e.setId(oid);\r\n+        em.persist(e);\r\n+        oid = e.getId();\r\n+        assertEquals(4, oid.getPk1());\r\n+        assertEquals(5, oid.getPk2());\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        endTx(em);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        endEm(em);\r\n+\r\n+        // flush before accessing id field\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        e = new EmbeddedIdEntity();\r\n+        em.persist(e);\r\n+        endTx(em);\r\n+        oid = e.getId();\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"c9f5e5fda2c051156f01c09c48f7eab8dcd26ee2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEntityListenerAnnot.java","status":"added","additions":265,"deletions":0,"changes":265,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEntityListenerAnnot.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEntityListenerAnnot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEntityListenerAnnot.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,265 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestEntityListenerAnnot extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestEntityListenerAnnot(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(Employee.class);\r\n+\t\tdeleteAll(ContractEmployee.class);\r\n+\t\tCallbackStorage.clearStore();\r\n+\t}\r\n+\r\n+\tpublic void testPrePersist()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\r\n+\t\tContractEmployee cemp = new ContractEmployee(21, \"afam\", 25, 5);\r\n+\r\n+\t\tem.persist(cemp);\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\r\n+\t\tassertNotNull(store.getClist());\r\n+\t\tassertEquals(\"@pre/post persist callback is over/under-firing\", 2, store.getClist().size());\r\n+\t\tassertEquals(\"longnamevalidatorprr\", store.getClist().get(0));\r\n+\t\tassertEquals(\"contractemployee\", store.getClist().get(1));\r\n+\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testPostPersist()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em = null;\t\r\n+\t  try{\t\r\n+\t\tem =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tEmployee emp = new Employee(1, \"john\");\r\n+\r\n+\t\tem.persist(emp);\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\r\n+\t\tassertNotNull(store.getClist());\r\n+\t\tassertEquals(\"@pre/post persist callback is over/under-firing\", 4, store.getClist().size());\r\n+\t\tassertEquals(\"namevalidator\", store.getClist().get(0));\r\n+\t\tassertEquals(\"longnamevalidatorprr\", store.getClist().get(1));\r\n+\t\tassertEquals(\"employeepop\", store.getClist().get(2));\r\n+\t\tassertEquals(\"We expected 'gen#\" +  emp.getCheck() + \" : \" + emp.getCheck() + \"'. However, we got '\" + store.getClist().get(3) + \"'\", \"gen#\"+emp.getCheck(), store.getClist().get(3));\r\n+\t  }\r\n+      finally {\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+      }\r\n+\t}\r\n+\r\n+\tpublic void testPre_PostRemove()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tEmployee emp = new Employee(8, \"Jonathan\");\r\n+\t\tem.persist(emp);\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t\t//--------------------------------------------------------------\r\n+\t\tem =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\temp = em.find(Employee.class, 8);\r\n+\r\n+\t\tCallbackStorage.clearStore(); //clear the store\r\n+\t\tassertTrue(CallbackStorage.isEmpty());\r\n+\r\n+\t\tem.remove(emp);\r\n+\r\n+\t\tassertTrue(!CallbackStorage.isEmpty());\r\n+\t\tassertEquals(\"callback is under/over-firing...\", 2, CallbackStorage.size());\r\n+\t\tassertEquals(\"namevalidatorprr\", CallbackStorage.getInstance().getClist().get(0));\r\n+\t\tassertEquals(\"namevalidatorpor\", CallbackStorage.getInstance().getClist().get(1));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testPreUpdate()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tEmployee emp = new Employee(5, \"Abraham\");\r\n+\t\tem.persist(emp);\r\n+\r\n+\t\tCallbackStorage.clearStore();\r\n+\r\n+\t\tString query = \"Update Employee e SET e.name = 'Joseph' WHERE e.id = :id\";\r\n+\r\n+\t\tint result = em.createQuery(query)\r\n+\t\t               .setParameter(\"id\", 5)\r\n+\t\t               .executeUpdate();\r\n+\r\n+\t\tList store = CallbackStorage.getInstance().getClist();\r\n+\r\n+\t\tassertNotNull(result);\r\n+\t\tassertEquals(1, result);\r\n+\t\tassertNotNull(store);\r\n+\t\tassertEquals(3, store.size());\r\n+\t\tassertEquals(\"namevalidatorpou\", store.get(0));\r\n+\t\tassertEquals(\"longnamevalidatorpou\", store.get(1));\r\n+\t\tassertEquals(\"employeepou\", store.get(2));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testPreUpdate2()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tEmployee emp = new Employee(5, \"Abraham\");\r\n+\t\tem.persist(emp);\r\n+\r\n+\t\tCallbackStorage.clearStore();\r\n+\t\tendTx(em);\r\n+\r\n+\t\tstartTx(em);\r\n+\t\temp = em.find(Employee.class, 5);\r\n+\r\n+\t\tCallbackStorage.clearStore();\r\n+\t\tassertEquals(\"Abraham\", emp.getName());\r\n+\r\n+\t\temp.setName(\"Abrahamovich\");\r\n+\t\tem.flush();\r\n+\r\n+\t\tList store = CallbackStorage.getInstance().getClist();\r\n+\r\n+\t\tassertNotNull(store);\r\n+\t\tassertEquals(\"update callback is either underfiring or overfiring...\", 3, store.size());\r\n+\t\tassertEquals(\"namevalidatorpou\", store.get(0));\r\n+\t\tassertEquals(\"longnamevalidatorpou\", store.get(1));\r\n+\t\tassertEquals(\"employeepou\", store.get(2));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testPostLoad()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tEmployee emp = new Employee(6, \"Jefferson\");\r\n+\r\n+\t\tem.persist(emp);\r\n+\t\tCallbackStorage.clearStore();\r\n+\r\n+\t\tendTx(em);\r\n+\r\n+\t\tstartTx(em);\r\n+\t\tCallbackStorage.clearStore();\r\n+\r\n+\t\tassertTrue(CallbackStorage.getInstance().getClist().isEmpty());\r\n+\r\n+\t\temp = em.find(Employee.class, 6);\r\n+\t\tem.refresh(emp);\r\n+\r\n+\t\tassertNotNull(emp);\r\n+\t\tassertNotNull(CallbackStorage.getInstance().getClist());\r\n+\t\tassertEquals(\"PostLoad is overfiring...not accurate\", 2, CallbackStorage.getInstance().getClist().size());\r\n+\t\tassertEquals(\"employeepol\", CallbackStorage.getInstance().getClist().get(0));\r\n+\t\tassertEquals(\"employeepol\", CallbackStorage.getInstance().getClist().get(1));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testGenPriKeyAvailInPostPersist()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tassertNotNull(em);\r\n+\r\n+\t\tEmployee emp = new Employee(7, \"Maxwell\");\r\n+\r\n+\t\tassertEquals(0, emp.getCheck());\r\n+\r\n+\t\tem.persist(emp);\r\n+\t\tint check = emp.getCheck();\r\n+\r\n+\t\tassertNotNull(check);\r\n+\t\tassertTrue(CallbackStorage.getInstance().getClist().contains(\"gen#\"+check));\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\t/*Fix Me: aokeke - should fail when persisting with invalid id*/\r\n+//\tpublic void testExceptionCauseTxRollback2()\r\n+//\t{\r\n+//\t\tOpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+//\t\tstartTx(em);\r\n+//\t\t\r\n+//\t\tEmployee emp = new Employee(-1, \"failure\");\r\n+//\t\t\r\n+//\t\ttry\r\n+//\t\t{\r\n+//\t\t\t//persisting an entity with an invalid id throws an exception\r\n+//\t\t\tem.persist(emp);\r\n+//\t\t\tendTx(em);\r\n+//\t\t\tfail(\"Should have failed..persisting an entity with invalid id\");\r\n+//\t\t}\r\n+//\t\tcatch(RuntimeException e)\r\n+//\t\t{\t\t\t\r\n+//\t\t\tassertFalse(em.isPersistent(emp));\r\n+//\t\t\tassertTrue(\"transaction was not marked for rollback\", em.getRollbackOnly());\r\n+//\t\t\te.printStackTrace();\r\n+//\t\t\tif(em.getRollbackOnly() == true)\r\n+//\t\t\t\tendEm(em);\r\n+//\t\t}\r\n+//\t\tcatch(Exception e)\r\n+//\t\t{\r\n+//\t\t\tassertFalse(em.isPersistent(emp));\r\n+//\t\t\tassertTrue(\"transaction was not marked for rollback\", em.getRollbackOnly());\r\n+//\t\t\te.printStackTrace();\r\n+//\t\t\tif(em.getRollbackOnly() == true)\r\n+//\t\t\t\tendEm(em);\r\n+//\t\t}\r\n+//\t\t\r\n+//\t\tif(em.isActive())\r\n+//\t\t\tendEm(em);\r\n+//\t}\r\n+}\r"},{"sha":"80d34838205bc48099d2f50ee9ca0bfaee440283","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEntityOrderBy.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEntityOrderBy.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEntityOrderBy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEntityOrderBy.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,116 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.conf.*;\r\n+import org.apache.openjpa.meta.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import junit.framework.*;\r\n+\r\n+/**\r\n+ * <p>Test @OrderBy annotation support.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEntityOrderBy extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestEntityOrderBy(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+//    private ClassMetaData _meta;\r\n+\r\n+    public void setUp()\r\n+    {\r\n+//        _meta = ((OpenJPAConfiguration) getConfiguration()).\r\n+//            getMetaDataRepositoryInstance().getMetaData(OrderByEntity.class,\r\n+//            null, true);\r\n+    }\r\n+\r\n+ /*   public void testEmptyOrderBy() {\r\n+        String dec = Order.ELEMENT + \" asc\";\r\n+        assertEquals(dec, _meta.getField(\"strings\").getOrderDeclaration());\r\n+        assertEquals(dec, _meta.getField(\"pkRels\").getOrderDeclaration());\r\n+    }\r\n+\r\n+    public void testSpecifiedOrderBy() {\r\n+        assertEquals(\"string desc\", _meta.getField(\"stringRels\").\r\n+            getOrderDeclaration());\r\n+    }\r\n+*/\r\n+    public void testUse() {\r\n+        // note: functionality thoroughly tested in kodo.meta.TestOrderBy;\r\n+        // this is just a sanity check on JPA use\r\n+        deleteAll(OrderByEntity.class);\r\n+\r\n+        OrderByEntity pc = new OrderByEntity();\r\n+        pc.setId(1L);\r\n+        pc.getStrings().add(\"2\");\r\n+        pc.getStrings().add(\"1\");\r\n+        pc.getStrings().add(\"3\");\r\n+\r\n+        OrderByEntity rel1 = new OrderByEntity();\r\n+        rel1.setId(102L);\r\n+        rel1.setString(\"2\");\r\n+        OrderByEntity rel2 = new OrderByEntity();\r\n+        rel2.setId(101L);\r\n+        rel2.setString(\"1\");\r\n+        OrderByEntity rel3 = new OrderByEntity();\r\n+        rel3.setId(103L);\r\n+        rel3.setString(\"3\");\r\n+        pc.getPKRels().add(rel1);\r\n+        pc.getPKRels().add(rel2);\r\n+        pc.getPKRels().add(rel3);\r\n+        pc.getStringRels().add(rel1);\r\n+        pc.getStringRels().add(rel2);\r\n+        pc.getStringRels().add(rel3);\r\n+\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        em.persistAll(pc, rel1, rel2, rel3);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(OrderByEntity.class, 1L);\r\n+        List<String> strings = pc.getStrings();\r\n+        assertEquals(\"1\", strings.get(0));\r\n+        assertEquals(\"2\", strings.get(1));\r\n+        assertEquals(\"3\", strings.get(2));\r\n+\r\n+        List<OrderByEntity> pkRels = pc.getPKRels();\r\n+        assertEquals(101L, pkRels.get(0).getId());\r\n+        assertEquals(102L, pkRels.get(1).getId());\r\n+        assertEquals(103L, pkRels.get(2).getId());\r\n+\r\n+        List<OrderByEntity> stringRels = pc.getStringRels();\r\n+        assertEquals(\"3\", stringRels.get(0).getString());\r\n+        assertEquals(\"2\", stringRels.get(1).getString());\r\n+        assertEquals(\"1\", stringRels.get(2).getString());\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"7f6037a982533c630b9d632467e0dd4aebd0eb01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEnumerated.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEnumerated.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEnumerated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEnumerated.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,115 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import org.apache.openjpa.persistence.*;\r\n+import java.util.List;\r\n+import javax.persistence.*;\r\n+import junit.framework.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+/**\r\n+ * Test enums and the @Enumerated annotation.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEnumerated extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestEnumerated(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(AnnoTest1.class);\r\n+    }\r\n+\r\n+   /** public void testMapping() {\r\n+        ClassMapping cls = (ClassMapping) getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(AnnoTest1.class,\r\n+            null, true);\r\n+        FieldMapping fm = cls.getDeclaredFieldMapping(\"enumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\r\n+\r\n+        fm = cls.getDeclaredFieldMapping(\"ordinalEnumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\r\n+\r\n+        fm = cls.getDeclaredFieldMapping(\"stringEnumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.STRING, fm.getColumns()[0].getJavaType());\r\n+    }*/\r\n+\r\n+    public void testBehavior() \r\n+    {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();        \r\n+        startTx(em);\r\n+        \r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        assertNotNull(\"pc is null\", pc);\r\n+        assertNotNull(\"InheritanceType.TABLE_PER_CLASS is null\", InheritanceType.TABLE_PER_CLASS);\r\n+        assertNotNull(\"InheritanceType.JOINED is null\", InheritanceType.JOINED);\r\n+        pc.setEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        pc.setOrdinalEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        pc.setStringEnumeration(InheritanceType.JOINED);\r\n+        em.persist(pc);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM AnnoTest1 o\"); \r\n+        assertEquals(1, q.getResultList().size());\r\n+        \r\n+//        AnnoTest1 pc2 = em.find(AnnoTest1.class, new Long(1));\r\n+        AnnoTest1 pc2 = (AnnoTest1) q.getSingleResult();\r\n+        assertNotNull(\"pc2 is null\", pc2);\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS, pc2.getEnumeration());\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS, pc2.getOrdinalEnumeration());\r\n+        assertEquals(InheritanceType.JOINED,  pc2.getStringEnumeration());\r\n+        startTx(em);\r\n+        pc2.setEnumeration(InheritanceType.JOINED);\r\n+        pc2.setOrdinalEnumeration(InheritanceType.JOINED);\r\n+        pc2.setStringEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+//        pc2 = em.find(AnnoTest1.class, new Long(1));\r\n+        q = em.createQuery(\"SELECT o FROM AnnoTest1 o\"); \r\n+        pc2 = (AnnoTest1) q.getSingleResult();\r\n+        assertEquals(InheritanceType.JOINED, pc2.getEnumeration());\r\n+        assertEquals(InheritanceType.JOINED, pc2.getOrdinalEnumeration());\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS, pc2.getStringEnumeration());\r\n+        endEm(em);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"1a5156d004e400b7e49c4a1be0df68a8d6dd7fd4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestFlatInheritance.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestFlatInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestFlatInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestFlatInheritance.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+/**\r\n+ * Test for InheritanceType.SINGLE_TABLE\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestFlatInheritance extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestFlatInheritance(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp()\r\n+    {\r\n+        deleteAll(Flat1.class);\r\n+    }\r\n+\r\n+    public void testInheritance() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        Flat1 pc = new Flat1(1);\r\n+        Flat2 pc2 = new Flat2(2);\r\n+        pc.setBasic(10);\r\n+        pc2.setBasic(20);\r\n+        pc2.setBasic2(\"DOG\");\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(Flat1.class, 1);\r\n+        assertEquals(10, pc.getBasic());\r\n+        pc = em.find(Flat1.class, 2);\r\n+        assertEquals(Flat2.class, pc.getClass());\r\n+        assertEquals(20, pc.getBasic());\r\n+        assertEquals(\"DOG\", ((Flat2) pc).getBasic2());\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"c1b298d149b29444140fc5aaa1f3c416c0b9b85a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestGenerators.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestGenerators.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestGenerators.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestGenerators.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,103 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import junit.framework.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/**\r\n+ * Test for generators\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestGenerators extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestGenerators(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        deleteAll(Generator.class);\r\n+    }\r\n+\r\n+    public void testGet() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        Generator g = new Generator();\r\n+        g.setPk(5);\r\n+        em.persist(g);\r\n+        assertPks(g);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+        assertNew();\r\n+    }\r\n+\r\n+    public void testFlush() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        Generator g = new Generator();\r\n+        g.setPk(5);\r\n+        em.persist(g);\r\n+        em.flush();\r\n+        assertPks(g);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+        assertNew();\r\n+    }\r\n+\r\n+    public void testCommit() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        Generator g = new Generator();\r\n+        g.setPk(5);\r\n+        em.persist(g);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+        assertNew();\r\n+    }\r\n+\r\n+    private void assertNew() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        Query q = em.createQuery(\"select g from Generator g where \"\r\n+            + \"g.stringField = 'foo'\");\r\n+        for (Object o : q.getResultList())\r\n+            assertPks((Generator) o);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private void assertPks(Generator g) {\r\n+        assertNotEquals(0, g.getPk());\r\n+        assertNotNull(g.getPk2());\r\n+       // assertNotEquals(new Integer(0), g);\r\n+        assertNotEquals(0, g.getPk3());\r\n+    }\r\n+\r\n+    private boolean assertNotEquals(long n, long num)\r\n+    {\r\n+    \treturn(n != num);\r\n+    }\r\n+}\r"},{"sha":"3ff706fab8b9eaa31bd44892662ac3e7349ac9f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestJoinedInheritance.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestJoinedInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestJoinedInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestJoinedInheritance.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import junit.framework.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+/**\r\n+ * Test for InheritanceType.JOINED\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestJoinedInheritance extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestJoinedInheritance(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp()\r\n+    {\r\n+        new AnnoTest1();\r\n+        new AnnoTest2();\r\n+        new AnnoTest3();\r\n+\r\n+        deleteAll(AnnoTest1.class);\r\n+        deleteAll(AnnoTest2.class);\r\n+    }\r\n+\r\n+    public void testInheritance() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest3 pc = new AnnoTest3();\r\n+        pc.setPk(new Long(1));\r\n+        pc.setBasic(10);\r\n+        pc.setBasic2(20);\r\n+        em.persist(pc);\r\n+\r\n+        AnnoTest2 pc2 = new AnnoTest2();\r\n+        pc2.setPk1(2);\r\n+        pc2.setPk2(\"bar\");\r\n+        pc2.setInverseOneOne(pc);\r\n+        pc.setSubOneOne(pc2);\r\n+        em.persist(pc2);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc2 = em.find(AnnoTest2.class, new AnnoTest2.Oid(2, \"bar\"));\r\n+        pc = (AnnoTest3) pc2.getInverseOneOne();\r\n+        assertEquals(pc.getInverseOwnerOneOne(), pc2);\r\n+        assertEquals(10, pc.getBasic());\r\n+        assertEquals(20, pc.getBasic2());\r\n+        assertEquals(pc2, pc.getSubOneOne());\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"ef921f463d7e0ed6c7c81006917bf023e0015472","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestManyToMany.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestManyToMany.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestManyToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestManyToMany.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/**\r\n+ * Test for m-m\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestManyToMany extends AbstractTestCase\r\n+{\r\n+\tpublic TestManyToMany(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(AnnoTest1.class);\r\n+        deleteAll(AnnoTest2.class);\r\n+    }\r\n+\r\n+    public void testManyToMany() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        long lid = 4;\r\n+        AnnoTest1 pc = new AnnoTest1(lid);\r\n+        em.persist(pc);\r\n+        AnnoTest2 pc2;\r\n+        for (int i = 0; i < 3; i++) {\r\n+            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\r\n+            pc.getManyMany().add(pc2);\r\n+            em.persist(pc2);\r\n+        }\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(lid));\r\n+        Set<AnnoTest2> many = pc.getManyMany();\r\n+        assertEquals(3, many.size());\r\n+        for (AnnoTest2 manyPc2 : many) {\r\n+            switch ((int) manyPc2.getPk1()) {\r\n+                case 5:\r\n+                    assertEquals(\"foo0\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 6:\r\n+                    assertEquals(\"foo1\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 7:\r\n+                    assertEquals(\"foo2\", manyPc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"bad pk:\" + manyPc2.getPk1());\r\n+            }\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInverseOwnerManyToMany() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        long lid = 4;\r\n+        AnnoTest1 pc = new AnnoTest1(lid);\r\n+        em.persist(pc);\r\n+        AnnoTest2 pc2;\r\n+        for (int i = 0; i < 3; i++) {\r\n+            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\r\n+            pc2.getManyMany().add(pc);\r\n+            em.persist(pc2);\r\n+        }\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(lid));\r\n+        Set<AnnoTest2> many = pc.getInverseOwnerManyMany();\r\n+        assertEquals(3, many.size());\r\n+        for (AnnoTest2 manyPc2 : many) {\r\n+            assertTrue(manyPc2.getManyMany().contains(pc));\r\n+            switch ((int) manyPc2.getPk1()) {\r\n+                case 5:\r\n+                    assertEquals(\"foo0\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 6:\r\n+                    assertEquals(\"foo1\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 7:\r\n+                    assertEquals(\"foo2\", manyPc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"bad pk:\" + manyPc2.getPk1());\r\n+            }\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"d5bd43a73ecc093d2397cc6fc3c458462ff0fe75","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestMapKey.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestMapKey.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestMapKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestMapKey.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * <p>Test the use of the {@link MapKey} annotation.  Note that we have\r\n+ * more thorough Kodo core tests for the mappings themselves.  See\r\n+ * {@link kodo.jdbc.meta.TestMappedByKeyMaps}.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestMapKey extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestMapKey(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    //private ClassMapping _mapping;\r\n+\r\n+    public void setUp()\r\n+    {\r\n+        deleteAll(Flat1.class);\r\n+        deleteAll(AnnoTest2.class);\r\n+        deleteAll(AnnoTest1.class);\r\n+//        _mapping = ((JDBCConfiguration) getConfiguration()).\r\n+//            getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n+//            null, true);\r\n+    }\r\n+\r\n+   /** public void testDefaultMapKeyMapping() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"defaultMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n+        assertEquals(\"pk\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(_mapping.getRepository().getMetaData(Flat1.class, null,\r\n+            true).getField(\"pk\"), fm.getKey().getValueMappedByMetaData());\r\n+    }\r\n+\r\n+    public void testNamedMapKeyMapping() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"namedMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n+        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(_mapping.getRepository().getMetaData(Flat1.class, null,\r\n+            true).getField(\"basic\"), fm.getKey().getValueMappedByMetaData());\r\n+    }\r\n+\r\n+    public void testInverseOwnerMapKeyMapping() {\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"inverseOwnerMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof\r\n+            RelationMapInverseKeyFieldStrategy);\r\n+        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(_mapping.getRepository().getMetaData(AnnoTest2.class,\r\n+            null, true).getField(\"basic\"), fm.getKey().\r\n+            getValueMappedByMetaData());\r\n+    }**/\r\n+\r\n+    public void testInsertAndRetrieve()\r\n+    {\r\n+\r\n+        Flat1 f1 = new Flat1(1);\r\n+        f1.setBasic(100);\r\n+        Flat1 f2 = new Flat1(2);\r\n+        f2.setBasic(200);\r\n+        AnnoTest2 a1 = new AnnoTest2(1L, \"1\");\r\n+        a1.setBasic(\"100\");\r\n+        AnnoTest2 a2 = new AnnoTest2(2L, \"2\");\r\n+        a2.setBasic(\"200\");\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1L);\r\n+        pc.getDefaultMapKey().put(f1.getPk(), f1);\r\n+        pc.getDefaultMapKey().put(f2.getPk(), f2);\r\n+        pc.getNamedMapKey().put(f1.getBasic(), f1);\r\n+        pc.getNamedMapKey().put(f2.getBasic(), f2);\r\n+        pc.getInverseOwnerMapKey().put(a1.getBasic(), a1);\r\n+        pc.getInverseOwnerMapKey().put(a2.getBasic(), a2);\r\n+        a1.setOneManyOwner(pc);\r\n+        a2.setOneManyOwner(pc);\r\n+\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+       startTx(em);\r\n+        em.persistAll(new Object[]{ pc, f1, f2, a1, a2 });\r\n+       endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        assertEquals(2, pc.getDefaultMapKey().size());\r\n+        assertEquals(1, pc.getDefaultMapKey().get(1).getPk());\r\n+        assertEquals(2, pc.getDefaultMapKey().get(2).getPk());\r\n+        assertEquals(2, pc.getNamedMapKey().size());\r\n+        assertEquals(100, pc.getNamedMapKey().get(100).getBasic());\r\n+        assertEquals(200, pc.getNamedMapKey().get(200).getBasic());\r\n+        assertEquals(2, pc.getInverseOwnerMapKey().size());\r\n+        assertEquals(\"100\", pc.getInverseOwnerMapKey().get(\"100\").\r\n+            getBasic());\r\n+        assertEquals(\"200\", pc.getInverseOwnerMapKey().get(\"200\").\r\n+            getBasic());\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"30ffb97746d8bbeb0d4c50bb204f480a1df9741c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToMany.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToMany.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToMany.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,113 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * Test for 1-m\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestOneToMany extends AbstractTestCase\r\n+{\r\n+\tpublic TestOneToMany(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(AnnoTest1.class);\r\n+        deleteAll(AnnoTest2.class);\r\n+    }\r\n+\r\n+    public void testOneToMany() {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        pc.getOneMany().add(new AnnoTest2(15, \"foo\"));\r\n+        pc.getOneMany().add(new AnnoTest2(20, \"foobar\"));\r\n+        em.persist(pc);\r\n+        em.persistAll(pc.getOneMany());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        Collection<AnnoTest2> many = pc.getOneMany();\r\n+        assertEquals(2, many.size());\r\n+        for (AnnoTest2 pc2 : many) {\r\n+            switch ((int) pc2.getPk1()) {\r\n+                case 15:\r\n+                    assertEquals(\"foo\", pc2.getPk2());\r\n+                    break;\r\n+                case 20:\r\n+                    assertEquals(\"foobar\", pc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"unknown element:\" + pc2.getPk1());\r\n+            }\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInverseOwnerOneToMany() {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.getInverseOwnerOneMany().add(pc2);\r\n+        pc2.setOneManyOwner(pc);\r\n+        pc2 = new AnnoTest2(20, \"foobar\");\r\n+        pc.getInverseOwnerOneMany().add(pc2);\r\n+        pc2.setOneManyOwner(pc);\r\n+        em.persist(pc);\r\n+        em.persistAll(pc.getInverseOwnerOneMany());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        Collection<AnnoTest2> many = pc.getInverseOwnerOneMany();\r\n+        assertEquals(2, many.size());\r\n+        for (AnnoTest2 pc3 : many) {\r\n+            assertEquals(pc, pc3.getOneManyOwner());\r\n+            switch ((int) pc3.getPk1()) {\r\n+                case 15:\r\n+                    assertEquals(\"foo\", pc3.getPk2());\r\n+                    break;\r\n+                case 20:\r\n+                    assertEquals(\"foobar\", pc3.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"unknown element:\" + pc3.getPk1());\r\n+            }\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"5fab472158400147c3bb6442193c4b4429e110e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToOne.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToOne.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,146 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/**\r\n+ * Test for 1-1\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestOneToOne extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestOneToOne(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(AnnoTest1.class);\r\n+        deleteAll(AnnoTest2.class);\r\n+    }\r\n+\r\n+    public void testOneToOne() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.setOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        pc2 = pc.getOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSelfOneToOne() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest1 pc2 = new AnnoTest1(15);\r\n+        pc.setSelfOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        pc2 = pc.getSelfOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(new Long(15), pc2.getPk());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testPKJoinSelfOneToOne() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest1 pc2 = new AnnoTest1(15);\r\n+        pc.setSelfOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        pc2 = pc.getSelfOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(new Long(15), pc2.getPk());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testOtherTableOneToOne() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.setOtherTableOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        pc2 = pc.getOtherTableOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInverseOneToOne() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc2.setInverseOneOne(pc);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        pc2 = pc.getInverseOwnerOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        assertEquals(pc, pc2.getInverseOneOne());\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"ac0db66c897b373754a47c0c8ec78d2df1349889","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPropertyAccess.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPropertyAccess.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+\r\n+\r\n+public class TestPropertyAccess extends AbstractTestCase\r\n+{\r\n+\tpublic TestPropertyAccess(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(PropertyAccess1.class);\r\n+    }\r\n+\r\n+    public void testPropertyAccessBasicCreation() {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\r\n+        pa1_1.setName(\"foo\");\r\n+        em.persist(pa1_1);\r\n+        endTx(em);\r\n+\r\n+        // getting a new EM should not be necessary once the extended PC stuff\r\n+        // is complete.\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+\r\n+        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\r\n+        assertNotSame(pa1_1, pa1_2);\r\n+        assertNotNull(pa1_2);\r\n+        assertEquals(10, pa1_2.getId());\r\n+        assertEquals(\"foo\", pa1_2.getName());\r\n+    }\r\n+\r\n+    public void testPropertyAccessBasicMutation() {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\r\n+        pa1_1.setName(\"foo\");\r\n+        em.persist(pa1_1);\r\n+        endTx(em);\r\n+\r\n+        // getting a new EM should not be necessary once the extended PC stuff\r\n+        // is complete.\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+\r\n+        startTx(em);\r\n+        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\r\n+        pa1_2.setName(pa1_2.getName() + \"bar\");\r\n+        endTx(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        PropertyAccess1 pa1_3 = em.find(PropertyAccess1.class, 10);\r\n+        assertNotSame(pa1_2, pa1_3);\r\n+        assertEquals(\"foobar\", pa1_3.getName());\r\n+    }\r\n+\r\n+    public void testJPQL() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        em.createQuery(\"select o from PropertyAccess1 o where \" +\r\n+            \"o.name = 'foo'\").getResultList();\r\n+        em.createQuery(\"select o from PropertyAccess1 o order by \" +\r\n+            \"o.name asc\").getResultList();\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testJPQLWithFieldNameMismatch() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        em.createQuery(\"select o from PropertyAccess1 o where \" +\r\n+            \"o.intValue = 0\").getResultList();\r\n+        em.createQuery(\"select o from PropertyAccess1 o order by \" +\r\n+            \"o.intValue asc\").getResultList();\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /*public void testJDOQL() {\r\n+        PersistenceManager pm = getPM();\r\n+        pm.newQuery(\"select from persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1 \"\r\n+            + \"where name == 'foo'\").execute();\r\n+        pm.newQuery(\"select from persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1 \"\r\n+            + \"order by name ascending\").execute();\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testJDOQLWithFieldNameMismatch() {\r\n+        PersistenceManager pm = getPM();\r\n+        pm.newQuery(\"select from persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1 \"\r\n+            + \"where intValue == 0\").execute();\r\n+        pm.newQuery(\"select from persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1 \"\r\n+            + \"order by intValue asc\").execute();\r\n+        pm.close();\r\n+    }*/\r\n+}\r"},{"sha":"83e9cd0d7ecb023c74769073baf5dc689262f56a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestSerializedLobs.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestSerializedLobs.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestSerializedLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestSerializedLobs.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,146 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.sql.*;\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * Test for serialized, clob, and lob types.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestSerializedLobs extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestSerializedLobs(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+    private static final Date DATE = new Date();\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(AnnoTest1.class);\r\n+    }\r\n+\r\n+    // Serialized fields not being read properly\r\n+    public void testSerialized() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        AnnoTest1 pc1 = new AnnoTest1(1);\r\n+        AnnoTest1 pc2 = new AnnoTest1(2);\r\n+        pc1.setSerialized(\"ASDASD\");\r\n+        pc2.setSerialized(DATE);\r\n+        em.persist(pc1);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc1 = em.find(AnnoTest1.class, em.getObjectId(pc1));\r\n+        pc2 = em.find(AnnoTest1.class, em.getObjectId(pc2));\r\n+        assertEquals(\"ASDASD\", pc1.getSerialized());\r\n+        assertEquals(DATE, pc2.getSerialized());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testBlob()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        pc.setBlob(\"Not Null\".getBytes());\r\n+        em.persist(pc);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class, em.getObjectId(pc));\r\n+        assertEquals(\"Not Null\", new String(pc.getBlob()));\r\n+        Connection conn = (Connection) em.getConnection();\r\n+        Statement stmnt = conn.createStatement();\r\n+        ResultSet rs = stmnt.executeQuery(\"SELECT BLOBVAL FROM ANNOTEST1 \"\r\n+            + \"WHERE PK = 1\");\r\n+        assertTrue(rs.next());\r\n+\r\n+       /** JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.useGetBytesForBlobs)\r\n+            rs.getBytes(1);\r\n+        else if (dict.useGetObjectForBlobs)\r\n+            rs.getObject(1);\r\n+        else {\r\n+            Blob blob = rs.getBlob(1);\r\n+            blob.getBytes(1L, (int) blob.length());\r\n+        }\r\n+        assertEquals(\"Not Null\", new String(pc.getBlob()));\r\n+\r\n+        try {\r\n+            rs.close();\r\n+        } catch (SQLException e) {\r\n+        }\r\n+        try {\r\n+            stmnt.close();\r\n+        } catch (SQLException e) {\r\n+        }\r\n+        try {\r\n+            conn.close();\r\n+        } catch (SQLException e) {\r\n+        }**/\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testClob()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < 1000; i++)\r\n+            buf.append((char) ('a' + (i % 24)));\r\n+        pc.setClob(buf.toString());\r\n+        em.persist(pc);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em =(OpenJPAEntityManager) currentEntityManager();\r\n+        pc = em.find(AnnoTest1.class,em.getObjectId(pc));\r\n+        String str = pc.getClob();\r\n+        assertEquals(1000, str.length());\r\n+        for (int i = 0; i < str.length(); i++)\r\n+            assertEquals('a' + (i % 24), str.charAt(i));\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"c57d59bbb136d78c00c9083a1f530834b8825252","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestTablePerClassInheritance.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestTablePerClassInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestTablePerClassInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestTablePerClassInheritance.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,108 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.*;\r\n+import junit.framework.*;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * <p>Test that InheritanceType.TABLE_PER_CLASS JPA mapping is translated\r\n+ * correctly.  See the <code>kodo.jdbc.meta.tableperclass</code> test package\r\n+ * for more detailed tests of functionality.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestTablePerClassInheritance extends AbstractTestCase\r\n+{\r\n+\r\n+\tpublic TestTablePerClassInheritance(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+   /** public void testMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(TablePerClass2.class,\r\n+            null, true);\r\n+        assertTrue(mapping.getStrategy() instanceof FullClassStrategy);\r\n+        assertTrue(mapping.getDiscriminator().getStrategy()\r\n+            instanceof NoneDiscriminatorStrategy);\r\n+        assertNull(mapping.getJoinForeignKey());\r\n+        assertNull(mapping.getJoinablePCSuperclassMapping());\r\n+        assertEquals(\"TPC_BASIC\", mapping.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        ClassMapping embed = mapping.getFieldMapping(\"embed\").\r\n+            currentEntityManager()beddedMapping();\r\n+        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+\r\n+        ClassMapping sup = mapping.getPCSuperclassMapping();\r\n+        assertEquals(TablePerClass1.class, sup.getDescribedType());\r\n+        assertTrue(sup.getStrategy() instanceof FullClassStrategy);\r\n+        assertTrue(sup.getDiscriminator().getStrategy()\r\n+            instanceof NoneDiscriminatorStrategy);\r\n+        assertEquals(\"TPC_BASIC\", sup.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        embed = sup.getFieldMapping(\"embed\").currentEntityManager()beddedMapping();\r\n+        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+    }**/\r\n+\r\n+    public void testInsertAndRetrieve() {\r\n+        deleteAll(TablePerClass1.class);\r\n+\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+       startTx(em);\r\n+        TablePerClass1 tpc1 = new TablePerClass1();\r\n+        tpc1.setBasic(1);\r\n+        EmbedValue ev = new EmbedValue();\r\n+        ev.setBasic(\"11\");\r\n+        tpc1.setEmbed(ev);\r\n+        TablePerClass2 tpc2 = new TablePerClass2();\r\n+        tpc2.setBasic(2);\r\n+        tpc2.setBasic2(\"2\");\r\n+        ev = new EmbedValue();\r\n+        ev.setBasic(\"22\");\r\n+        tpc2.setEmbed(ev);\r\n+        em.persistAll(tpc1, tpc2);\r\n+       endTx(em);\r\n+        int id1 = tpc1.getPk();\r\n+        int id2 = tpc2.getPk();\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        tpc1 = em.find(TablePerClass1.class, id1);\r\n+        assertEquals(1, tpc1.getBasic());\r\n+        assertEquals(\"11\", tpc1.getEmbed().getBasic());\r\n+        tpc2 = (TablePerClass2) em.find(TablePerClass1.class, id2);\r\n+        assertEquals(2, tpc2.getBasic());\r\n+        assertEquals(\"2\", tpc2.getBasic2());\r\n+        assertEquals(\"22\", tpc2.getEmbed().getBasic());\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"d957c9b3aeecf011cf9f21fb53d8b4bbd7b613f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestVersion.java","status":"added","additions":248,"deletions":0,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestVersion.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestVersion.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,248 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import javax.persistence.* ;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.* ;\r\n+import org.apache.openjpa.jdbc.meta.* ;\r\n+import org.apache.openjpa.jdbc.meta.strats.* ;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.* ;\r\n+import junit.framework.* ;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.* ;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+/*\r\n+   Test for opt-lock\r\n+\r\n+   @author Steve Kim\r\n+  */\r\n+public class TestVersion extends AbstractTestCase\r\n+{\r\n+\tprivate Object oid;\r\n+\r\n+\tprivate Object oid1;\r\n+\r\n+\tprivate Object oid2;\r\n+\r\n+\tpublic TestVersion(String name)\r\n+\t{\r\n+\t\tsuper(name, \"annotationcactusapp\");\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tnew AnnoTest1();\r\n+\t\tnew AnnoTest2();\r\n+\t\tnew AnnoTest3();\r\n+\r\n+\t\tdeleteAll(AnnoTest1.class);\r\n+\t\tdeleteAll(AnnoTest2.class);\r\n+\r\n+\t\tOpenJPAEntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tAnnoTest1 test1 = new AnnoTest1();\r\n+\t\ttest1.setPk(new Long(5));\r\n+\t\ttest1.setBasic(50);\r\n+\t\ttest1.setTransient(500);\r\n+\t\tem.persist(test1);\r\n+\r\n+\t\tAnnoTest2 test2 = new AnnoTest2();\r\n+\t\ttest2.setPk1(5);\r\n+\t\ttest2.setPk2(\"bar\");\r\n+\t\ttest2.setBasic(\"50\");\r\n+\t\tem.persist(test2);\r\n+\r\n+\t\tAnnoTest3 test3 = new AnnoTest3();\r\n+\t\ttest3.setPk(new Long(3));\r\n+\t\ttest3.setBasic2(50);\r\n+\t\tem.persist(test3);\r\n+\t\toid = em.getObjectId(test1);\r\n+\t\toid1 = em.getObjectId(test2);\r\n+\t\toid2 = em.getObjectId(test3);\r\n+\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+/*\r\n+ * Fix Me aokeke -- Testcases causes deadlock during runtime CR307216 is used to track this issue.\r\n+ */\r\n+ public void testVersionNumeric()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em1 = currentEntityManager();\r\n+\t\tstartTx(em1);\r\n+\t\tEntityManager em2 = currentEntityManager();\r\n+\r\n+\r\n+\t\tAnnoTest1 pc1 = em1.find(AnnoTest1.class, oid);\r\n+\t\tAnnoTest1 pc2 = em2.find(AnnoTest1.class, oid);\r\n+\t\tassertEquals(1, pc1.getVersion());\r\n+\t\tassertEquals(1, pc2.getVersion());\r\n+\t\tassertEquals(0, pc1.getTransient());\r\n+\t\tpc1.setBasic(75);\r\n+\r\n+\t\tendTx(em1);\r\n+\t\tendEm(em1);\r\n+\r\n+\t\tstartTx(em2);\r\n+\t\tpc2.setBasic(75);\r\n+\t\tem1 = (OpenJPAEntityManager) currentEntityManager();\r\n+\t\tpc1 = em1.find(AnnoTest1.class, oid);\r\n+\t\tassertEquals(2, pc1.getVersion());\r\n+\t\tendEm(em1);\r\n+\t\ttry\r\n+\t\t{\r\n+\t\t\tendTx(em2);\r\n+\t\t\tfail(\"Optimistic fail\");\r\n+\t\t}\r\n+\t\tcatch (RuntimeException re)\r\n+\t\t{}\r\n+\t\tcatch (Exception e)\r\n+\t\t{}\r\n+\t\tfinally\r\n+\t\t{\r\n+\t\t\tendEm(em2);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic void testVersionTimestamp()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em1 = currentEntityManager();\r\n+\t\tstartTx(em1);\r\n+\t\tOpenJPAEntityManager em2 = currentEntityManager();\r\n+\r\n+\t\tAnnoTest2 pc1 = em1.find(AnnoTest2.class, oid1);\r\n+\t\tAnnoTest2 pc2 = em2.find(AnnoTest2.class, oid1);\r\n+\t\tassertNotNull(pc1.getVersion());\r\n+\t\tassertEquals(pc1.getVersion(), pc2.getVersion());\r\n+\t\tpc1.setBasic(\"75\");\r\n+\r\n+\t\tendTx(em1);\r\n+\t\tendEm(em1);\r\n+\r\n+\r\n+\t\tstartTx(em2);\r\n+\t\tpc2.setBasic(\"75\");\r\n+\r\n+\t\tem1 = (OpenJPAEntityManager) currentEntityManager();\r\n+\t\tpc1 = em1.find(AnnoTest2.class, oid1);\r\n+\t\tassertTrue(pc1.getVersion().compareTo(pc2.getVersion()) > 0);\r\n+\t\tendEm(em1);\r\n+\t\ttry\r\n+\t\t{\r\n+\t\t\tendTx(em2);\r\n+\t\t\tfail(\"Optimistic fail\");\r\n+\t\t}\r\n+\t\tcatch (RuntimeException re)\r\n+\t\t{}\r\n+\t\tcatch (Exception e)\r\n+\t\t{}\r\n+\t\tfinally\r\n+\t\t{\r\n+\t\t\tendEm(em2);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic void testVersionSubclass()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em1 = currentEntityManager();\r\n+\t\tstartTx(em1);\r\n+\t\tOpenJPAEntityManager em2 = currentEntityManager();\r\n+\r\n+\t\tAnnoTest3 pc1 = em1.find(AnnoTest3.class, oid2);\r\n+\t\tAnnoTest3 pc2 = em2.find(AnnoTest3.class, oid2);\r\n+\t\tassertEquals(1, pc1.getVersion());\r\n+\t\tassertEquals(1, pc2.getVersion());\r\n+\t\tpc1.setBasic2(75);\r\n+\r\n+\t\tendTx(em1);\r\n+\t\tendEm(em1);\r\n+\r\n+\r\n+\t\tstartTx(em2);\r\n+\t\tpc2.setBasic2(75);\r\n+\r\n+\r\n+\t\tem1 = (OpenJPAEntityManager) currentEntityManager();\r\n+\t\tpc1 = em1.find(AnnoTest3.class, oid2);\r\n+\t\tassertEquals(2, pc1.getVersion());\r\n+\t\tendEm(em1);\r\n+\t\ttry\r\n+\t\t{\r\n+\t\t\tendTx(em2);\r\n+\t\t\tfail(\"Optimistic fail\");\r\n+\t\t}\r\n+\t\tcatch (RuntimeException re)\r\n+\t\t{}\r\n+\t\tcatch (Exception e)\r\n+\t\t{}\r\n+\t\tfinally\r\n+\t\t{\r\n+\t\t\tendEm(em2);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic void testVersionNoChange()\r\n+\t{\r\n+\t\tOpenJPAEntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\r\n+\t\tAnnoTest1 pc = em.find(AnnoTest1.class, oid);\r\n+\t\tassertEquals(1, pc.getVersion());\r\n+\t\tassertEquals(0, pc.getTransient());\r\n+\t\tpc.setTransient(750);\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\r\n+\t\tem = (OpenJPAEntityManager) currentEntityManager();\r\n+\t\tpc = em.find(AnnoTest1.class, oid);\r\n+\t\tassertEquals(1, pc.getVersion());\r\n+\t\tassertEquals(0, pc.getTransient());\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\r\n+\t   public void testNoDefaultVersionWithoutFieldOrColumn()\r\n+\t   {\r\n+\t\t\tOpenJPAEntityManager pm = (OpenJPAEntityManager) currentEntityManager();\r\n+\t\t   ClassMapping cls =  ((JDBCConfigurationImpl)((OpenJPAEntityManagerSPI) OpenJPAPersistence.cast(pm)).getConfiguration()).getMappingRepositoryInstance().getMapping(EmbedOwner.class, null, true);\r\n+\t\t   assertEquals(NoneVersionStrategy.getInstance(),\r\n+\t\t\t\t   cls.getVersion().getStrategy()); assertEquals(0,\r\n+\t\t\t\t\t\t   cls.getVersion().getColumns().length);\r\n+\t\t\tendEm(pm);\r\n+\t   }\r\n+\r\n+\t   public void testVersionWithField()\r\n+\t   {\r\n+\t\t   OpenJPAEntityManager pm = (OpenJPAEntityManager) currentEntityManager();\r\n+\t\t   ClassMapping cls = ((JDBCConfigurationImpl)((OpenJPAEntityManagerSPI) OpenJPAPersistence.cast(pm)).getConfiguration()).getMappingRepositoryInstance().getMapping(AnnoTest1.class, null, true);\r\n+\t\t   assertTrue(NoneVersionStrategy.getInstance() !=\r\n+\t\t\t   cls.getVersion().getStrategy()); assertEquals(1,\r\n+\t\t\t\t\t   cls.getVersion().getColumns().length);\r\n+\t\t\tendEm(pm);\r\n+\t   }\r\n+\r\n+}\r"},{"sha":"4e4b108d58673e59134aa86a52c8c96d9e39bf3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest1.java","status":"added","additions":311,"deletions":0,"changes":311,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,311 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"ANNOTEST1\")\r\n+@Inheritance(strategy = InheritanceType.JOINED)\r\n+@DiscriminatorColumn(name = \"ANNOCLS\")\r\n+@DiscriminatorValue(\"ANNO1\")\r\n+@SecondaryTables({ @SecondaryTable(name = \"OTHER_ANNOTEST1\",\r\n+    pkJoinColumns = @PrimaryKeyJoinColumn(name = \"OTHER_PK\",\r\n+        referencedColumnName = \"PK\")) })\r\n+public class AnnoTest1 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK\")\r\n+    private Long pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"ANNOVER\")\r\n+    private int version;\r\n+\r\n+    @Basic\r\n+    private int basic;\r\n+\r\n+    @Transient\r\n+    private int trans;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"OTHERVALUE\", table = \"OTHER_ANNOTEST1\")\r\n+    private int otherTableBasic;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"SELFONEONE_PK\", referencedColumnName = \"PK\")\r\n+    private AnnoTest1 selfOneOne;\r\n+\r\n+    @OneToOne\r\n+    @PrimaryKeyJoinColumn\r\n+    private AnnoTest1 pkJoinSelfOneOne;\r\n+\r\n+    @OneToOne\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"ONEONE_PK1\", referencedColumnName = \"PK1\"),\r\n+    @JoinColumn(name = \"ONEONE_PK2\", referencedColumnName = \"PK2\") })\r\n+    private AnnoTest2 oneOne;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"OTHERONE_PK1\", referencedColumnName = \"PK1\",\r\n+        table = \"OTHER_ANNOTEST1\"),\r\n+    @JoinColumn(name = \"OTHERONE_PK2\", referencedColumnName = \"PK2\",\r\n+        table = \"OTHER_ANNOTEST1\") })\r\n+    private AnnoTest2 otherTableOneOne;\r\n+\r\n+    @OneToOne(mappedBy = \"inverseOneOne\", fetch = FetchType.LAZY)\r\n+    private AnnoTest2 inverseOwnerOneOne;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"BLOBVAL\")\r\n+    private byte[] blob;\r\n+\r\n+    @Basic\r\n+    @Lob\r\n+    @Column(name = \"SERVAL\")\r\n+    private Object serial;\r\n+\r\n+    @Column(name = \"CLOBVAL\")\r\n+    @Lob\r\n+    private String clob;\r\n+\r\n+    // un-annotated enum should be persisted by default\r\n+    @Column(name = \"ENUMVAL\")\r\n+    private InheritanceType enumeration;\r\n+\r\n+    @Enumerated\r\n+    @Column(name = \"ORD_ENUMVAL\")\r\n+    private InheritanceType ordinalEnumeration;\r\n+\r\n+    @Enumerated(EnumType.STRING)\r\n+    @Column(name = \"STR_ENUMVAL\")\r\n+    private InheritanceType stringEnumeration;\r\n+\r\n+    @OneToMany\r\n+    @ElementJoinColumn(name = \"ONEMANY_PK\", referencedColumnName = \"PK\")\r\n+    private Set<AnnoTest2> oneMany = new HashSet();\r\n+\r\n+    @OneToMany(mappedBy = \"oneManyOwner\")\r\n+    private Set<AnnoTest2> inverseOwnerOneMany = new HashSet();\r\n+\r\n+    @ManyToMany\r\n+    @JoinTable(name = \"ANNOTEST1_MANYMANY\",\r\n+        joinColumns = @JoinColumn(name = \"MANY_PK\"),\r\n+        inverseJoinColumns = {\r\n+        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\r\n+        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") })\r\n+    private Set<AnnoTest2> manyMany = new HashSet();\r\n+\r\n+    @ManyToMany(mappedBy = \"manyMany\")\r\n+    private Set<AnnoTest2> inverseOwnerManyMany = new HashSet();\r\n+\r\n+    @MapKey\r\n+    @OneToMany\r\n+    private Map<Integer, Flat1> defaultMapKey = new HashMap();\r\n+\r\n+    @MapKey(name = \"basic\")\r\n+    @OneToMany\r\n+    private Map<Integer, Flat1> namedMapKey = new HashMap();\r\n+\r\n+    @MapKey(name = \"basic\")\r\n+    @OneToMany(mappedBy = \"oneManyOwner\")\r\n+    private Map<String, AnnoTest2> inverseOwnerMapKey = new HashMap();\r\n+\r\n+    public AnnoTest1() {\r\n+    }\r\n+\r\n+    public AnnoTest1(long pk) {\r\n+        this.pk = new Long(pk);\r\n+    }\r\n+\r\n+//    public AnnoTest1(Long pk) {\r\n+//        this.pk = pk;\r\n+//    }\r\n+\r\n+    public void setPk(Long val) {\r\n+        pk = val;\r\n+    }\r\n+\r\n+    public Long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setTransient(int i) {\r\n+        trans = i;\r\n+    }\r\n+\r\n+    public int getTransient() {\r\n+        return trans;\r\n+    }\r\n+\r\n+    public void setOtherTableBasic(int i) {\r\n+        otherTableBasic = i;\r\n+    }\r\n+\r\n+    public int getOtherTableBasic() {\r\n+        return otherTableBasic;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(AnnoTest1 other) {\r\n+        selfOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getSelfOneOne() {\r\n+        return selfOneOne;\r\n+    }\r\n+\r\n+    public void setPKJoinSelfOneOne(AnnoTest1 other) {\r\n+        pkJoinSelfOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getPKJoinSelfOneOne() {\r\n+        return pkJoinSelfOneOne;\r\n+    }\r\n+\r\n+    public void setOneOne(AnnoTest2 other) {\r\n+        oneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getOneOne() {\r\n+        return oneOne;\r\n+    }\r\n+\r\n+    public void setOtherTableOneOne(AnnoTest2 other) {\r\n+        otherTableOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getOtherTableOneOne() {\r\n+        return otherTableOneOne;\r\n+    }\r\n+\r\n+    public void setInverseOwnerOneOne(AnnoTest2 other) {\r\n+        inverseOwnerOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getInverseOwnerOneOne() {\r\n+        return inverseOwnerOneOne;\r\n+    }\r\n+\r\n+    public void setBlob(byte[] bytes) {\r\n+        blob = bytes;\r\n+    }\r\n+\r\n+    public byte[] getBlob() {\r\n+        return blob;\r\n+    }\r\n+\r\n+    public void setSerialized(Object o) {\r\n+        serial = o;\r\n+    }\r\n+\r\n+    public Object getSerialized() {\r\n+        return serial;\r\n+    }\r\n+\r\n+    public void setClob(String s) {\r\n+        clob = s;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return clob;\r\n+    }\r\n+\r\n+    public InheritanceType getEnumeration() {\r\n+        return enumeration;\r\n+    }\r\n+\r\n+    public void setEnumeration(InheritanceType val) {\r\n+        enumeration = val;\r\n+    }\r\n+\r\n+    public InheritanceType getOrdinalEnumeration() {\r\n+        return ordinalEnumeration;\r\n+    }\r\n+\r\n+    public void setOrdinalEnumeration(InheritanceType val) {\r\n+        ordinalEnumeration = val;\r\n+    }\r\n+\r\n+    public InheritanceType getStringEnumeration() {\r\n+        return stringEnumeration;\r\n+    }\r\n+\r\n+    public void setStringEnumeration(InheritanceType val) {\r\n+        stringEnumeration = val;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getOneMany() {\r\n+        return oneMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getInverseOwnerOneMany() {\r\n+        return inverseOwnerOneMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getManyMany() {\r\n+        return manyMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getInverseOwnerManyMany() {\r\n+        return inverseOwnerManyMany;\r\n+    }\r\n+\r\n+    public Map<Integer, Flat1> getDefaultMapKey() {\r\n+        return this.defaultMapKey;\r\n+    }\r\n+\r\n+    public void setDefaultMapKey(Map<Integer, Flat1> defaultMapKey) {\r\n+        this.defaultMapKey = defaultMapKey;\r\n+    }\r\n+\r\n+    public Map<Integer, Flat1> getNamedMapKey() {\r\n+        return this.namedMapKey;\r\n+    }\r\n+\r\n+    public void setNamedMapKey(Map<Integer, Flat1> namedMapKey) {\r\n+        this.namedMapKey = namedMapKey;\r\n+    }\r\n+\r\n+    public Map<String, AnnoTest2> getInverseOwnerMapKey() {\r\n+        return this.inverseOwnerMapKey;\r\n+    }\r\n+\r\n+    public void setInverseOwnerMapKey(\r\n+        Map<String, AnnoTest2> inverseOwnerMapKey) {\r\n+        this.inverseOwnerMapKey = inverseOwnerMapKey;\r\n+    }\r\n+}\r\n+\r"},{"sha":"cb3a21c7d0d9a99edf38ca240bd04971071aa6e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest2.java","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,165 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"ANNOTEST2\")\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"ANNOCLS\")\r\n+@DiscriminatorValue(\"ANNO2\")\r\n+@IdClass(AnnoTest2.Oid.class)\r\n+public class AnnoTest2 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK1\")\r\n+    protected long pk1;\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK2\")\r\n+    protected String pk2;\r\n+\r\n+    @Version\r\n+    @Column(name = \"ANNOVER\")\r\n+    protected Date version;\r\n+\r\n+    @Basic\r\n+    protected String basic;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"INVERSEONEONE_PK\", referencedColumnName = \"PK\")\r\n+    protected AnnoTest1 inverseOneOne;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"MANYONEONE_PK\", referencedColumnName = \"PK\")\r\n+    protected AnnoTest1 oneManyOwner;\r\n+\r\n+    @ManyToMany\r\n+    @JoinTable(name = \"ANNOTEST2_MANYMANY\",\r\n+        joinColumns = {\r\n+        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\r\n+        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") },\r\n+        inverseJoinColumns =\r\n+        @JoinColumn(name = \"MANYE_PK\", referencedColumnName = \"PK\"))\r\n+    protected Set<AnnoTest1> manyMany = new HashSet();\r\n+\r\n+    public AnnoTest2() {\r\n+    }\r\n+\r\n+    public AnnoTest2(long pk1, String pk2) {\r\n+        this.pk1 = pk1;\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public void setPk1(long val) {\r\n+        pk1 = val;\r\n+    }\r\n+\r\n+    public long getPk1() {\r\n+        return pk1;\r\n+    }\r\n+\r\n+    public void setPk2(String str) {\r\n+        pk2 = str;\r\n+    }\r\n+\r\n+    public String getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public Date getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(String s) {\r\n+        basic = s;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setInverseOneOne(AnnoTest1 other) {\r\n+        inverseOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getInverseOneOne() {\r\n+        return inverseOneOne;\r\n+    }\r\n+\r\n+    public void setOneManyOwner(AnnoTest1 other) {\r\n+        oneManyOwner = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getOneManyOwner() {\r\n+        return oneManyOwner;\r\n+    }\r\n+\r\n+    public Set getManyMany() {\r\n+        return manyMany;\r\n+    }\r\n+\r\n+    public static class Oid {\r\n+\r\n+        public long pk1;\r\n+        public String pk2;\r\n+\r\n+        public Oid() {\r\n+        }\r\n+\r\n+        public Oid(long pk1, String pk2) {\r\n+            this.pk1 = pk1;\r\n+            this.pk2 = pk2;\r\n+        }\r\n+\r\n+        public Oid(String str) {\r\n+            if (str != null) {\r\n+                int index = str.indexOf(\",\");\r\n+                pk1 = Long.parseLong(str.substring(0, index));\r\n+                pk2 = str.substring(index + 1);\r\n+                if (\"null\".equals(pk2))\r\n+                    pk2 = null;\r\n+            }\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == this)\r\n+                return true;\r\n+            if (!(o instanceof Oid))\r\n+                return false;\r\n+            Oid other = (Oid) o;\r\n+            if (pk1 != other.pk1)\r\n+                return false;\r\n+            if (pk2 == null)\r\n+                return other.pk2 == null;\r\n+            return pk2.equals(other.pk2);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return ((int) pk1) + (pk2 == null ? 0 : pk2.hashCode());\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk1 + \",\" + (pk2 == null ? \"null\" : pk2);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"e4c5ed110a9cd61f19087a1b27ebe674591fd1e8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest3.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"ANNO3\")\r\n+@Table(name = \"ANNOTEST3\")\r\n+@PrimaryKeyJoinColumns(@PrimaryKeyJoinColumn(name = \"SUB_PK\",\r\n+    referencedColumnName = \"PK\"))\r\n+public class AnnoTest3 extends AnnoTest1 {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"SUBBASIC\")\r\n+    protected int basic2;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    protected AnnoTest2 subOneOne;\r\n+\r\n+    public AnnoTest3() {\r\n+    }\r\n+\r\n+    public AnnoTest3(long pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public AnnoTest3(Long pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public void setBasic2(int i) {\r\n+        basic2 = i;\r\n+    }\r\n+\r\n+    public int getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+\r\n+    public AnnoTest2 getSubOneOne() {\r\n+        return subOneOne;\r\n+    }\r\n+\r\n+    public void setSubOneOne(AnnoTest2 anno2) {\r\n+        subOneOne = anno2;\r\n+    }\r\n+}\r"},{"sha":"42f0074863a44d986b4caf34581b55c48daef5d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/CallbackStorage.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/CallbackStorage.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/CallbackStorage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/CallbackStorage.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.List;\r\n+import java.util.ArrayList;\r\n+\r\n+/**\r\n+ * Singleton class to store callback invocation hits\r\n+ * @author aokeke\r\n+ *\r\n+ */\r\n+public class CallbackStorage\r\n+{\r\n+\tprivate static CallbackStorage store = new CallbackStorage();\r\n+\r\n+\tprivate static List<String> clist = new ArrayList<String>();\r\n+\r\n+\tprivate CallbackStorage()\r\n+\t{}\r\n+\r\n+\tpublic static CallbackStorage getInstance()\r\n+\t{\r\n+\t\tif(store == null)\r\n+\t\t\tstore = new CallbackStorage();\r\n+\t\treturn store;\r\n+\t}\r\n+\r\n+\tpublic List<String> getClist() {\r\n+\t\treturn clist;\r\n+\t}\r\n+\r\n+\tpublic void setClist(List<String> clist) {\r\n+\t\tCallbackStorage.clist = clist;\r\n+\t}\r\n+\r\n+\tpublic static void clearStore()\r\n+\t{\r\n+\t\tclist = new ArrayList<String>();\r\n+\t}\r\n+\r\n+\tpublic static boolean isEmpty()\r\n+\t{\r\n+\t\treturn clist.isEmpty();\r\n+\t}\r\n+\r\n+\tpublic static int size()\r\n+\t{\r\n+\t\treturn clist.size();\r\n+\t}\r\n+}\r"},{"sha":"e66dbd97ac290e254dae4b9eae91204c69280444","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/ContractEmployee.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/ContractEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/ContractEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/ContractEmployee.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.ArrayList;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@ExcludeSuperclassListeners\r\n+@EntityListeners(LongNameValidator.class)\r\n+public class ContractEmployee extends Employee\r\n+{\r\n+\tprivate int dailyRate;\r\n+\tprivate int term;\r\n+\r\n+\tpublic ContractEmployee(){}\r\n+\r\n+\tpublic ContractEmployee(int id, String name, int dRate, int term)\r\n+\t{\r\n+\t\tsuper(id, name);\r\n+\t\tthis.dailyRate = dRate;\r\n+\t\tthis.term = term;\r\n+\t}\r\n+\r\n+\t@PrePersist\r\n+\tpublic void verifyTerm()\r\n+\t{\r\n+\t\tSystem.out.println(\"VerifyTerm of ContractEmployee running on\"+this);\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"contractemployee\");\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getDailyRate() {\r\n+\t\treturn dailyRate;\r\n+\t}\r\n+\tpublic void setDailyRate(int dailyRate) {\r\n+\t\tthis.dailyRate = dailyRate;\r\n+\t}\r\n+\tpublic int getTerm() {\r\n+\t\treturn term;\r\n+\t}\r\n+\tpublic void setTerm(int term) {\r\n+\t\tthis.term = term;\r\n+\t}\r\n+}\r"},{"sha":"3e052aa14beb73825b1bd85e1508fd646f943db4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/DateValidator.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/DateValidator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/DateValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/DateValidator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class DateValidator\r\n+{\r\n+\t@PrePersist\r\n+\tpublic void prePersist(Schedule sched)\r\n+\t{\r\n+\t\tif(sched.getStartDate() == null)\r\n+\t\t{\r\n+\t\t\tSystem.out.println(\"Date cannot be null\");\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@PostPersist\r\n+\tpublic void postPersist(Schedule sched)\r\n+\t{\r\n+\t\tSystem.out.println(\"Schedule \"+sched+\" is successfully persisted: DateValidator.class\");\r\n+\t}\r\n+}\r"},{"sha":"46dccefc53fc99502e61ede8e75f5aee1b1eaf63","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/DefaultCallbackListener.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/DefaultCallbackListener.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/DefaultCallbackListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/DefaultCallbackListener.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.PrePersist;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PreRemove;\r\n+import javax.persistence.PostRemove;\r\n+import javax.persistence.PostUpdate;\r\n+import javax.persistence.PreUpdate;\r\n+import javax.persistence.PostLoad;\r\n+\r\n+public class DefaultCallbackListener \r\n+{\r\n+\tpublic DefaultCallbackListener()\r\n+\t{}\r\n+\t\r\n+\t@PrePersist\r\n+\tpublic void prePersist(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-prepersist\");\r\n+\t}\r\n+\t\r\n+\t@PostPersist\r\n+\tpublic void postPersist(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-postpersist\");\r\n+\t}\r\n+\t\r\n+\t@PostRemove\r\n+\tpublic void postRemove(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-postremove\");\r\n+\t}\r\n+\t\r\n+\t@PreRemove\r\n+\tpublic void preRemove(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-preremove\");\r\n+\t}\r\n+\t\r\n+\t@PostUpdate\t\r\n+\tpublic void postUpdate(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-postupdate\");\r\n+\t}\r\n+\t\r\n+\t@PreUpdate\r\n+\tpublic void preUpdate(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-preupdate\");\r\n+\t}\r\n+\t\r\n+\t@PostLoad\r\n+\tpublic void postLoad(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-postload\");\r\n+\t}\r\n+\r\n+}\r"},{"sha":"32473145431777d43a54bf3fac0f7e59d4db47cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedOwner.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedOwner.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedOwner.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@SqlResultSetMapping(name = \"EmbedMapping\", entities = {\r\n+@EntityResult(entityClass = EmbedOwner.class, fields = {\r\n+@FieldResult(name = \"pk\", column = \"OWNER_PK\"),\r\n+@FieldResult(name = \"basic\", column = \"OWNER_BASIC\"),\r\n+@FieldResult(name = \"embed.basic\", column = \"EMBED_BASIC\"),\r\n+@FieldResult(name = \"embed.clob\", column = \"EMBED_CLOB\")\r\n+    })\r\n+    })\r\n+public class EmbedOwner {\r\n+\r\n+    @Embedded\r\n+    @AttributeOverride(name = \"basic\", column = @Column(name = \"OVER_BASIC\"))\r\n+    @AssociationOverride(name = \"owner\",\r\n+        joinColumns = @JoinColumn(name = \"OVER_OWNER\"))\r\n+    protected EmbedValue embed;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"OWN_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected int pk;\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setEmbed(EmbedValue embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+\r\n+    public EmbedValue getEmbed() {\r\n+        return embed;\r\n+    }\r\n+}\r"},{"sha":"79098f146cfad5453b746a8994bb4365e3634f2e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedValue.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedValue.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedValue.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Embeddable\r\n+public class EmbedValue {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"EMB_CLOB\")\r\n+    protected String clob;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"EMB_BLOB\")\r\n+    protected byte[] blob;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumn(name = \"EMB_REL\")\r\n+    protected EmbedOwner owner;\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setClob(String clob) {\r\n+        this.clob = clob;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return clob;\r\n+    }\r\n+\r\n+    public void setBlob(byte[] blob) {\r\n+        this.blob = blob;\r\n+    }\r\n+\r\n+    public byte[] getBlob() {\r\n+        return blob;\r\n+    }\r\n+\r\n+    public void setOwner(EmbedOwner owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public EmbedOwner getOwner() {\r\n+        return owner;\r\n+    }\r\n+}\r"},{"sha":"c5694dc49a48bc829af1b06d3eb0fa29cad5ddda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedValue2.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedValue2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedValue2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbedValue2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Same as EmbedValue but no blobs for suitable use as key/value/element\r\n+ * in oracle.\r\n+ */\r\n+@Embeddable\r\n+public class EmbedValue2 {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_INTBASIC\")\r\n+    protected int intBasic;\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setIntBasic(int intBasic) {\r\n+        this.intBasic = intBasic;\r\n+    }\r\n+\r\n+    public int getIntBasic() {\r\n+        return intBasic;\r\n+    }\r\n+}\r"},{"sha":"e3fb2d116896ee7d6133bf4c4926ed087bfe38f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddableSuper.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddableSuper.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddableSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddableSuper.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,76 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@MappedSuperclass\r\n+public class EmbeddableSuper {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    @Column(name = \"ID\")\r\n+    private long pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"SUPVERS\")\r\n+    private int version;\r\n+\r\n+    @Transient\r\n+    private int trans;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"CLOBVAL\")\r\n+    protected String clob;\r\n+\r\n+    public EmbeddableSuper() {\r\n+    }\r\n+\r\n+    public long getPK() {\r\n+        return this.pk;\r\n+    }\r\n+\r\n+    public void setPK(long pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public int getTrans() {\r\n+        return this.trans;\r\n+    }\r\n+\r\n+    public void setTrans(int trans) {\r\n+        this.trans = trans;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return this.clob;\r\n+    }\r\n+\r\n+    public void setClob(String clob) {\r\n+        this.clob = clob;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return this.version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+}\r"},{"sha":"4ec4cbece729d50c84eeabb4fd13cd92be0ea275","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddableSuperSub.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddableSuperSub.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddableSuperSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddableSuperSub.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorColumn(name = \"DISC\")\r\n+@AttributeOverrides({\r\n+    @AttributeOverride(name = \"clob\", column = @Column(name = \"CC\")),\r\n+    @AttributeOverride(name = \"version\", column = @Column(name = \"VERSVAL\"))\r\n+})\r\n+public class EmbeddableSuperSub\r\n+    extends EmbeddableSuper {\r\n+\r\n+    @ManyToOne\r\n+    private EmbeddableSuperSub sub;\r\n+\r\n+    @ManyToOne\r\n+    private EmbeddableSuper sup;\r\n+\r\n+    public EmbeddableSuperSub() {\r\n+    }\r\n+\r\n+    public EmbeddableSuperSub getSub() {\r\n+        return this.sub;\r\n+    }\r\n+\r\n+    public void setSub(EmbeddableSuperSub sub) {\r\n+        this.sub = sub;\r\n+    }\r\n+\r\n+    public EmbeddableSuper getSup() {\r\n+        return this.sup;\r\n+    }\r\n+\r\n+    public void setSup(EmbeddableSuper sup) {\r\n+        this.sup = sup;\r\n+    }\r\n+}\r"},{"sha":"50218bc83db001805caf6784a39d878a0ba45d46","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddedIdClass.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddedIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddedIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddedIdClass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Embeddable\r\n+public class EmbeddedIdClass {\r\n+\r\n+    @Column(name = \"EPK1\")\r\n+    private long pk1;\r\n+\r\n+    @Column(name = \"EPK2\")\r\n+    private long pk2;\r\n+\r\n+    @Column(name = \"EPK3\")\r\n+    @GeneratedValue\r\n+    private long pk3;\r\n+\r\n+    public long getPk1() {\r\n+        return pk1;\r\n+    }\r\n+\r\n+    public void setPk1(long pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public long getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public void setPk2(long pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public long getPk3() {\r\n+        return pk3;\r\n+    }\r\n+\r\n+    public void setPk3(long pk3) {\r\n+        this.pk3 = pk3;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return pk1 + \":\" + pk2 + \":\" + pk3;\r\n+    }\r\n+\r\n+    public int hashCode() {\r\n+        return (int) ((pk1 ^ pk2 ^ pk3) % Integer.MAX_VALUE);\r\n+    }\r\n+\r\n+    public boolean equals(Object other) {\r\n+        if (other == this)\r\n+            return true;\r\n+        if (!(other instanceof EmbeddedIdClass))\r\n+            return false;\r\n+\r\n+        EmbeddedIdClass id = (EmbeddedIdClass) other;\r\n+        return id.pk1 == pk1\r\n+            && id.pk2 == pk2\r\n+            && id.pk3 == pk3;\r\n+    }\r\n+}\r"},{"sha":"70f9a251816c2d7d711107adf281cea3e2d46ea7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddedIdEntity.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddedIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddedIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/EmbeddedIdEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"EMIDENTITY\")\r\n+@SqlResultSetMapping(name = \"EmbeddedIdMapping\", entities = {\r\n+@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\r\n+@FieldResult(name = \"id.pk1\", column = \"OWNER_PK1\"),\r\n+@FieldResult(name = \"id.pk2\", column = \"OWNER_PK2\"),\r\n+@FieldResult(name = \"id.pk3\", column = \"OWNER_PK3\"),\r\n+@FieldResult(name = \"value\", column = \"OWNER_VAL\"),\r\n+@FieldResult(name = \"relation.id.pk1\", column = \"REL_PK1\"),\r\n+@FieldResult(name = \"relation.id.pk2\", column = \"REL_PK2\"),\r\n+@FieldResult(name = \"relation.id.pk3\", column = \"REL_PK3\")\r\n+    }),\r\n+@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\r\n+@FieldResult(name = \"id.pk1\", column = \"REL_PK1\"),\r\n+@FieldResult(name = \"id.pk2\", column = \"REL_PK2\"),\r\n+@FieldResult(name = \"id.pk3\", column = \"REL_PK3\"),\r\n+@FieldResult(name = \"value\", column = \"REL_VAL\")\r\n+    })\r\n+    })\r\n+public class EmbeddedIdEntity {\r\n+\r\n+    @EmbeddedId\r\n+    private EmbeddedIdClass id;\r\n+\r\n+    @Column(name = \"VAL\")\r\n+    private String value;\r\n+\r\n+    @ManyToOne\r\n+    private EmbeddedIdEntity relation;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"MREL_PK1\", referencedColumnName = \"EPK1\"),\r\n+    @JoinColumn(name = \"MREL_PK2\", referencedColumnName = \"EPK2\")\r\n+        })\r\n+    private EmbeddedIdEntity mapOverrideRelation;\r\n+\r\n+    public EmbeddedIdClass getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(EmbeddedIdClass id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public EmbeddedIdEntity getRelation() {\r\n+        return relation;\r\n+    }\r\n+\r\n+    public void setRelation(EmbeddedIdEntity relation) {\r\n+        this.relation = relation;\r\n+    }\r\n+\r\n+    public EmbeddedIdEntity getMappingOverrideRelation() {\r\n+        return mapOverrideRelation;\r\n+    }\r\n+}\r"},{"sha":"6750281bc5cb77152b4cd20348c47e75d788298e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Employee.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Employee.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@EntityListeners({NameValidator.class, LongNameValidator.class})\r\n+public class Employee implements NamedEntity\r\n+{\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Basic\r\n+\tprotected String name;\r\n+\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprotected int lifecheck;\r\n+\r\n+\t@Transient\r\n+\tprotected long syncTime;\r\n+\r\n+\tpublic Employee()\r\n+\t{}\r\n+\r\n+\tpublic Employee(int id, String name)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic String getName()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic int getId()\r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\t@PostPersist\r\n+\tprivate void resetSyncTime()\r\n+\t{\r\n+\t\tSystem.out.println(\"resetSyncTime is running on \"+this+\"GEN #: \"+lifecheck);\r\n+\t\tsyncTime = System.currentTimeMillis();\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"employeepop\");\r\n+\t\tstore.getClist().add(\"gen#\"+lifecheck);\r\n+\t}\r\n+\r\n+\t@PostLoad\r\n+\tpublic void pload()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"employeepol\");\r\n+\t}\r\n+\r\n+\t@PostUpdate\r\n+\tpublic void pupdate()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"employeepou\");\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn \"Name: \"+name+\" of \"+this.getClass().getName()+\" Id: \"+id+\" Synctime: \"+syncTime;\r\n+\t}\r\n+\r\n+\tpublic int getCheck() {\r\n+\t\treturn this.lifecheck;\r\n+\t}\r\n+\r\n+\tpublic void setCheck(int check) {\r\n+\t\tthis.lifecheck = check;\r\n+\t}\r\n+}\r"},{"sha":"79711d554880ee1f345cdc13b16db7d4ca9bb401","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Entity1.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Entity1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+\r\n+@Entity\r\n+@Table(name=\"entity_1\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\r\n+public class Entity1 implements Serializable\r\n+{\r\n+\tprivate static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\r\n+\tprotected Entity2 entity2Field;\r\n+\r\n+\t@Version\r\n+\tprotected int versionField;\r\n+\r\n+\tpublic Entity1()\r\n+\t{}\r\n+\r\n+\tpublic Entity1 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEntity2Field (Entity2 val)\r\n+\t{\r\n+\t\tentity2Field = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Entity2 getEntity2Field ()\r\n+\t{\r\n+\t\treturn entity2Field;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"5c37ea0d8d50f046d350776eb237864ce5611960","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Entity2.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Entity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,95 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class Entity2 implements Serializable\r\n+{\r\n+\t/**\r\n+\t *\r\n+\t */\r\n+\tprivate static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\tpublic Entity2()\r\n+\t{}\r\n+\r\n+\r\n+\tpublic Entity2 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"b7052786856c82b6d85ed2df29d65b69654e2392","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Flat1.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Flat1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Flat1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Flat1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"EJB_CLS\")\r\n+public class Flat1 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK\")\r\n+    protected int pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"EJB_VER\")\r\n+    protected int version;\r\n+\r\n+    @Basic\r\n+    protected int basic;\r\n+\r\n+    public Flat1() {\r\n+    }\r\n+\r\n+    public Flat1(int pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public void setPk(int val) {\r\n+        pk = val;\r\n+    }\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+}\r\n+\r"},{"sha":"a94862b416a6c62ad59a407929c42d053bea92c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Flat2.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Flat2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Flat2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Flat2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class Flat2\r\n+    extends Flat1 {\r\n+\r\n+    @Basic\r\n+    protected String basic2;\r\n+\r\n+    public Flat2() {\r\n+    }\r\n+\r\n+    public Flat2(int pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public void setBasic2(String s) {\r\n+        basic2 = s;\r\n+    }\r\n+\r\n+    public String getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+}\r\n+\r"},{"sha":"4ee43d443d779f69ed2c05bf73682dcfad00870c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/FlightSchedule.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/FlightSchedule.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/FlightSchedule.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/FlightSchedule.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import java.util.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"fsched\")\r\n+@Table(name=\"Flight_Sched\",\r\n+\t\tuniqueConstraints=@UniqueConstraint(columnNames={\"planeName\"}))\r\n+public class FlightSchedule extends Schedule\r\n+{\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprivate int FlightNum;\r\n+\r\n+\t@Column(nullable=false)\r\n+\tprivate String planeName;\r\n+\r\n+\tpublic FlightSchedule(){}\r\n+\r\n+\tpublic FlightSchedule(String name, Calendar cad, Date start, Date end, String pname)\r\n+\t{\r\n+\t\tsuper(name, cad, start, end);\r\n+\t\tthis.planeName = pname;\r\n+\t}\r\n+\r\n+\tpublic String getFlightName() {\r\n+\t\treturn planeName;\r\n+\t}\r\n+\r\n+\tpublic void setFlightName(String flightName) {\r\n+\t\tplaneName = flightName;\r\n+\t}\r\n+\r\n+\tpublic int getFlightNum() {\r\n+\t\treturn FlightNum;\r\n+\t}\r\n+}\r"},{"sha":"3476f60d74b6e336b185d7ac2b40b6297dbac304","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Generator.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Generator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,109 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+// non-psql/ora dbs cause issues with SequenceGenerator in auto-mapping\r\n+//@SequenceGenerator(name=\"seq\", sequenceName=\"ejb_sequence\")\r\n+@TableGenerator(name = \"tab\")\r\n+@IdClass(Generator.Oid.class)\r\n+public class Generator {\r\n+\r\n+    @Id\r\n+    protected int pk;\r\n+\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"tab\")\r\n+    protected Integer pk2;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected long pk3;\r\n+\r\n+    @Basic\r\n+    protected String stringField;\r\n+\r\n+    // for non-seq\r\n+    public void setPk(int pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public Integer getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public long getPk3() {\r\n+        return pk3;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String s) {\r\n+        stringField = s;\r\n+    }\r\n+\r\n+    public static class Oid {\r\n+\r\n+        public int pk;\r\n+        public Integer pk2;\r\n+        public long pk3;\r\n+\r\n+        public Oid() {\r\n+        }\r\n+\r\n+        public Oid(String str) {\r\n+            StringTokenizer tok = new StringTokenizer(str, \",\");\r\n+            pk = Integer.parseInt(tok.nextToken());\r\n+            pk2 = Integer.valueOf(tok.nextToken());\r\n+            pk3 = Long.valueOf(tok.nextToken());\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == null || !(o instanceof Oid))\r\n+                return false;\r\n+            Oid other = (Oid) o;\r\n+            if (pk != other.pk)\r\n+                return false;\r\n+            if (pk3 != other.pk3)\r\n+                return false;\r\n+            if (pk2 == null)\r\n+                return other.pk2 == null;\r\n+            return pk2.equals(other.pk2);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return pk + (pk2 == null ? 0 : pk2.hashCode())\r\n+                + (int) (pk3 % Integer.MAX_VALUE);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk + \",\" + pk2 + \",\" + pk3;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"b1dcb9fb9190050f8f184a842103d3f936077e33","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/LongNameValidator.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/LongNameValidator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/LongNameValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/LongNameValidator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class LongNameValidator\r\n+{\r\n+\t@PrePersist\r\n+\tpublic void validateName(NamedEntity obj)\r\n+\t{\r\n+\t\tSystem.out.println(\"LongNameValidator is running on \"+obj);\r\n+\t\tif(obj.getName().equals(\"\") || obj.getName() == null)\r\n+\t\t\tthrow new NullPointerException();\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"longnamevalidatorprr\");\r\n+\t}\r\n+\r\n+\t@PostUpdate\r\n+\tpublic void testpost(NamedEntity obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"longnamevalidatorpou\");\r\n+\t}\r\n+\r\n+\r\n+}\r"},{"sha":"faaa110fef3c412940d2937f9311c2bbda247071","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/NameValidator.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/NameValidator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/NameValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/NameValidator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class NameValidator\r\n+{\r\n+\t@PrePersist\r\n+\tpublic void validateName(NamedEntity obj)\r\n+\t{\r\n+\t\tSystem.out.println(\"NameValidator is running on \"+obj);\r\n+\t\tif(obj.getName().equals(\"\") || obj.getName() == null)\r\n+\t\t\tthrow new NullPointerException();\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"namevalidator\");\r\n+\t}\r\n+\r\n+\t@PostUpdate\r\n+\tpublic void testpost(NamedEntity obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"namevalidatorpou\");\r\n+\t}\r\n+\r\n+\t@PostRemove\r\n+\tpublic void validateNothing(NamedEntity obj)\r\n+\t{\r\n+\t\tSystem.out.println(\"NameValidator is running on \");\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"namevalidatorpor\");\r\n+\t}\r\n+\r\n+\t@PreRemove\r\n+\tpublic void validateNothing1(NamedEntity obj)\r\n+\t{\r\n+\t\tSystem.out.println(\"NameValidator is running on \");\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"namevalidatorprr\");\r\n+\t}\r\n+}\r"},{"sha":"fb7e93caa8d76bb13668ed358197e6e820966ecb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/NamedEntity.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/NamedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/NamedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/NamedEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+\r\n+public interface NamedEntity\r\n+{\r\n+\tpublic String getName();\r\n+\r\n+}\r"},{"sha":"8f89fdbc33898d39da5e4204ac296ac177b47b0d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/OrderByEntity.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/OrderByEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/OrderByEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/OrderByEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,84 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.*;\r\n+\r\n+/**\r\n+ * <p>Entity used to test parsing of @OrderBy.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class OrderByEntity {\r\n+\r\n+    @Id\r\n+    private long id;\r\n+    private String string;\r\n+\r\n+    @PersistentCollection\r\n+    @OrderBy\r\n+    private List<String> strings = new ArrayList();\r\n+\r\n+    @ManyToMany\r\n+    @OrderBy\r\n+    @JoinTable(name = \"ORDERBY_PKRELS\",\r\n+        inverseJoinColumns = @JoinColumn(name = \"REL_ID\",\r\n+            referencedColumnName = \"ID\"))\r\n+    private List<OrderByEntity> pkRels = new ArrayList();\r\n+\r\n+    @ManyToMany\r\n+    @OrderBy(\"string desc\")\r\n+    @JoinTable(name = \"ORDERBY_STRINGRELS\",\r\n+        inverseJoinColumns = @JoinColumn(name = \"REL_ID\",\r\n+            referencedColumnName = \"ID\"))\r\n+    private List<OrderByEntity> stringRels = new ArrayList();\r\n+\r\n+    public long getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return this.string;\r\n+    }\r\n+\r\n+    public void setString(String string) {\r\n+        this.string = string;\r\n+    }\r\n+\r\n+    public List<String> getStrings() {\r\n+        return this.strings;\r\n+    }\r\n+\r\n+    public List<OrderByEntity> getPKRels() {\r\n+        return this.pkRels;\r\n+    }\r\n+\r\n+    public List<OrderByEntity> getStringRels() {\r\n+        return this.stringRels;\r\n+    }\r\n+}\r"},{"sha":"595d5af99ef019525ce48ddc6978cd30d150a683","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/PropertyAccess1.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/PropertyAccess1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/PropertyAccess1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/PropertyAccess1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Entity test object that uses property access mode.\r\n+ */\r\n+@Entity\r\n+public class PropertyAccess1 {\r\n+\r\n+    private int id;\r\n+    private String name;\r\n+    private int intVal; // this intentionally does not match the getter name\r\n+\r\n+    protected PropertyAccess1() {\r\n+    }\r\n+\r\n+    public PropertyAccess1(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    @Id\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String n) {\r\n+        this.name = n;\r\n+    }\r\n+\r\n+    public int getIntValue() {\r\n+        return intVal;\r\n+    }\r\n+\r\n+    public void setIntValue(int intVal) {\r\n+        this.intVal = intVal;\r\n+    }\r\n+}\r"},{"sha":"f48483b48762c4f8b0dbe21857e575213d274d94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Schedule.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Schedule.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Schedule.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Schedule.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Calendar;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n+@EntityListeners({DateValidator.class, StringValidator.class})\r\n+public class Schedule\r\n+{\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprivate int id;\r\n+\r\n+\t@Temporal(TemporalType.DATE)\r\n+\t@Basic(fetch=FetchType.EAGER)\r\n+\tprivate Calendar dob;\r\n+\r\n+\t@Temporal(TemporalType.TIME)\r\n+\t@Basic\r\n+\tprivate Date startDate;\r\n+\r\n+\t@Temporal(TemporalType.TIMESTAMP)\r\n+\t@Basic\r\n+\tprivate Date endDate;\r\n+\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\r\n+\tpublic Schedule(){}\r\n+\r\n+\tpublic Schedule(String name, Calendar cad, Date sdate, Date endDate)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.dob = cad;\r\n+\t\tthis.startDate = sdate;\r\n+\t\tthis.endDate = endDate;\r\n+\t}\r\n+\r\n+\tpublic Calendar getDob() {\r\n+\t\treturn dob;\r\n+\t}\r\n+\r\n+\tpublic void setDob(Calendar dob) {\r\n+\t\tthis.dob = dob;\r\n+\t}\r\n+\r\n+\tpublic Date getStartDate() {\r\n+\t\treturn startDate;\r\n+\t}\r\n+\r\n+\tpublic void setStartDate(Date startDate) {\r\n+\t\tthis.startDate = startDate;\r\n+\t}\r\n+\r\n+\tpublic Date getEndDate() {\r\n+\t\treturn endDate;\r\n+\t}\r\n+\r\n+\tpublic void setEndDate(Date endDate) {\r\n+\t\tthis.endDate = endDate;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn \"Schedule \"+name+\" Date \"+startDate;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"4c3c77347c57b02977719100897b6c13bfabd65f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/StringValidator.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/StringValidator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/StringValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/StringValidator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class StringValidator\r\n+{\r\n+\t@PrePersist\r\n+\tpublic void prePersist(FlightSchedule sched)\r\n+\t{\r\n+\t\tif(sched.getName().length() == 0 || sched.getName().equals(\"\"))\r\n+\t\t\tthrow new IllegalArgumentException(\"Needs a valid name\");\r\n+\t}\r\n+\r\n+\t@PostPersist\r\n+\tpublic void postPersist(FlightSchedule sched)\r\n+\t{\r\n+\t\tSystem.out.println(\"Schedule \"+sched+\" is successfully persisted: StringValidator.class\");\r\n+\t}\r\n+}\r"},{"sha":"4f4aeb20228db1d82fee2841c5afd851bb4946ca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TablePerClass1.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TablePerClass1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TablePerClass1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TablePerClass1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\r\n+public class TablePerClass1 {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected int pk;\r\n+\r\n+    @Column(name = \"TPC_BASIC\")\r\n+    protected int basic;\r\n+\r\n+    @Embedded\r\n+    @AttributeOverrides({\r\n+    @AttributeOverride(name = \"basic\",\r\n+        column = @Column(name = \"TPC_EMB_BASIC\")),\r\n+    @AttributeOverride(name = \"clob\", column = @Column(name = \"TPC_EMB_CLOB\")),\r\n+    @AttributeOverride(name = \"blob\", column = @Column(name = \"TPC_EMB_BLOB\"))\r\n+        })\r\n+    protected EmbedValue embed;\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public EmbedValue getEmbed() {\r\n+        return embed;\r\n+    }\r\n+\r\n+    public void setEmbed(EmbedValue ev) {\r\n+        embed = ev;\r\n+    }\r\n+}\r\n+\r"},{"sha":"0ecb4636cabbc059886ff08ecc6743463978ef1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TablePerClass2.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TablePerClass2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TablePerClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TablePerClass2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class TablePerClass2\r\n+    extends TablePerClass1 {\r\n+\r\n+    @Basic\r\n+    protected String basic2;\r\n+\r\n+    public void setBasic2(String s) {\r\n+        basic2 = s;\r\n+    }\r\n+\r\n+    public String getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+}\r\n+\r"},{"sha":"b88a9fe3ad0c2feaae95b56604662374b5df2e81","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TxRollbackEntity.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TxRollbackEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TxRollbackEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/TxRollbackEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.ArrayList;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.PostLoad;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.PostRemove;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"TX_ROLLBACK_ENT\")\r\n+public class TxRollbackEntity\r\n+{\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\r\n+\tpublic TxRollbackEntity(String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\t@PostLoad\r\n+\tpublic void rollBackException()\r\n+\t{\r\n+\t\t//should throw a null pointer exception causing the tx to be rolled back\r\n+\t\tArrayList<Integer> list = null;\r\n+\t\tlist.add(1);\r\n+\t}\r\n+\r\n+\t@PostRemove\r\n+\tpublic void bomb()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"rollbackpor1\");\r\n+\t}\r\n+\r\n+\tpublic void bomb2()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"rollbackpor\");\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+}\r"},{"sha":"0068148e4b562aa98091de33b086740e020ea74a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/CallbackStorage.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/CallbackStorage.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/CallbackStorage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/CallbackStorage.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import java.util.List;\r\n+import java.util.ArrayList;\r\n+\r\n+/**\r\n+ * Singleton class to store callback invocation hits\r\n+ * @author aokeke\r\n+ *\r\n+ */\r\n+public class CallbackStorage\r\n+{\r\n+\tprivate static CallbackStorage store = new CallbackStorage();\r\n+\r\n+\tprivate static List<String> clist = new ArrayList<String>();\r\n+\r\n+\tprivate CallbackStorage()\r\n+\t{}\r\n+\r\n+\tpublic static CallbackStorage getInstance()\r\n+\t{\r\n+\t\tif(store == null)\r\n+\t\t\tstore = new CallbackStorage();\r\n+\t\treturn store;\r\n+\t}\r\n+\r\n+\tpublic List<String> getClist() {\r\n+\t\treturn clist;\r\n+\t}\r\n+\r\n+\tpublic void setClist(List<String> clist) {\r\n+\t\tCallbackStorage.clist = clist;\r\n+\t}\r\n+\r\n+\tpublic static void clearStore()\r\n+\t{\r\n+\t\tclist = new ArrayList<String>();\r\n+\t}\r\n+\r\n+\tpublic static boolean isEmpty()\r\n+\t{\r\n+\t\treturn clist.isEmpty();\r\n+\t}\r\n+\r\n+\tpublic static int size()\r\n+\t{\r\n+\t\treturn clist.size();\r\n+\t}\r\n+}\r"},{"sha":"d50fd9cf65ce12ed2b618427c64304d8d747a397","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/ContractEmployee.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/ContractEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/ContractEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/ContractEmployee.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import java.util.ArrayList;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@ExcludeSuperclassListeners\r\n+@EntityListeners(LongNameValidator.class)\r\n+public class ContractEmployee extends Employee\r\n+{\r\n+\tprivate int dailyRate;\r\n+\tprivate int term;\r\n+\r\n+\tpublic ContractEmployee(){}\r\n+\r\n+\tpublic ContractEmployee(int id, String name, int dRate, int term)\r\n+\t{\r\n+\t\tsuper(id, name);\r\n+\t\tthis.dailyRate = dRate;\r\n+\t\tthis.term = term;\r\n+\t}\r\n+\r\n+\t@PrePersist\r\n+\tpublic void verifyTerm()\r\n+\t{\r\n+\t\tSystem.out.println(\"VerifyTerm of ContractEmployee running on\"+this);\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"contractemployee\");\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getDailyRate() {\r\n+\t\treturn dailyRate;\r\n+\t}\r\n+\tpublic void setDailyRate(int dailyRate) {\r\n+\t\tthis.dailyRate = dailyRate;\r\n+\t}\r\n+\tpublic int getTerm() {\r\n+\t\treturn term;\r\n+\t}\r\n+\tpublic void setTerm(int term) {\r\n+\t\tthis.term = term;\r\n+\t}\r\n+}\r"},{"sha":"5a9e5b34719c013eb72ffe43219eb995a47384ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/DateValidator.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/DateValidator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/DateValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/DateValidator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class DateValidator\r\n+{\r\n+\t@PrePersist\r\n+\tpublic void prePersist(Schedule sched)\r\n+\t{\r\n+\t\tif(sched.getStartDate() == null)\r\n+\t\t{\r\n+\t\t\tSystem.out.println(\"Date cannot be null\");\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@PostPersist\r\n+\tpublic void postPersist(Schedule sched)\r\n+\t{\r\n+\t\tSystem.out.println(\"Schedule \"+sched+\" is successfully persisted: DateValidator.class\");\r\n+\t}\r\n+}\r"},{"sha":"08ce08542e5a44411bc8872a147c4e44923455c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/DefaultCallbackListener.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/DefaultCallbackListener.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/DefaultCallbackListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/DefaultCallbackListener.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.PrePersist;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PreRemove;\r\n+import javax.persistence.PostRemove;\r\n+import javax.persistence.PostUpdate;\r\n+import javax.persistence.PreUpdate;\r\n+import javax.persistence.PostLoad;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.CallbackStorage;\r\n+\r\n+public class DefaultCallbackListener \r\n+{\r\n+\tpublic DefaultCallbackListener()\r\n+\t{}\r\n+\t\r\n+//\t@PrePersist\r\n+\tpublic void prePersist(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-prepersist\");\r\n+\t}\r\n+\t\r\n+//\t@PostPersist\r\n+\tpublic void postPersist(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-postpersist\");\r\n+\t}\r\n+\t\r\n+//\t@PostRemove\r\n+\tpublic void postRemove(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-postremove\");\r\n+\t}\r\n+\t\r\n+//\t@PreRemove\r\n+\tpublic void preRemove(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-preremove\");\r\n+\t}\r\n+\t\r\n+//\t@PostUpdate\t\r\n+\tpublic void postUpdate(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-postupdate\");\r\n+\t}\r\n+\t\r\n+//\t@PreUpdate\r\n+\tpublic void preUpdate(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-preupdate\");\r\n+\t}\r\n+\t\r\n+//\t@PostLoad\r\n+\tpublic void postLoad(Object obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def-postload\");\r\n+\t}\r\n+\r\n+}\r"},{"sha":"58b8b60267d4e01f26b9198d654031b8f4ea6302","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Employee.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Employee.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@EntityListeners({NameValidator.class, LongNameValidator.class})\r\n+public class Employee implements NamedEntity\r\n+{\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Basic\r\n+\tprotected String name;\r\n+\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprotected int lifecheck;\r\n+\r\n+\t@Transient\r\n+\tprotected long syncTime;\r\n+\r\n+\tpublic Employee()\r\n+\t{}\r\n+\r\n+\tpublic Employee(int id, String name)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic String getName()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic int getId()\r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\t@PostPersist\r\n+\tprivate void resetSyncTime()\r\n+\t{\r\n+\t\tSystem.out.println(\"resetSyncTime is running on \"+this+\"GEN #: \"+lifecheck);\r\n+\t\tsyncTime = System.currentTimeMillis();\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"employeepop\");\r\n+\t\tstore.getClist().add(\"gen#\"+lifecheck);\r\n+\t}\r\n+\r\n+\t@PostLoad\r\n+\tpublic void pload()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"employeepol\");\r\n+\t}\r\n+\r\n+\t@PostUpdate\r\n+\tpublic void pupdate()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"employeepou\");\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn \"Name: \"+name+\" of \"+this.getClass().getName()+\" Id: \"+id+\" Synctime: \"+syncTime;\r\n+\t}\r\n+\r\n+\tpublic int getCheck() {\r\n+\t\treturn this.lifecheck;\r\n+\t}\r\n+\r\n+\tpublic void setCheck(int check) {\r\n+\t\tthis.lifecheck = check;\r\n+\t}\r\n+}\r"},{"sha":"e1ce408d26a293c5c30a7bbed98b5b0b2148abf0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Entity1.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Entity1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+\r\n+@Entity\r\n+@Table(name=\"entity_1\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\r\n+public class Entity1 implements Serializable\r\n+{\r\n+\tprivate static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\r\n+\tprotected Entity2 entity2Field;\r\n+\r\n+\t@Version\r\n+\tprotected int versionField;\r\n+\r\n+\tpublic Entity1()\r\n+\t{}\r\n+\r\n+\tpublic Entity1 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEntity2Field (Entity2 val)\r\n+\t{\r\n+\t\tentity2Field = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Entity2 getEntity2Field ()\r\n+\t{\r\n+\t\treturn entity2Field;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"cca187022c8908afe6d3e693dd982be15bc8f5d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Entity2.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Entity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,95 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class Entity2 implements Serializable\r\n+{\r\n+\t/**\r\n+\t *\r\n+\t */\r\n+\tprivate static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\tpublic Entity2()\r\n+\t{}\r\n+\r\n+\r\n+\tpublic Entity2 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"800b7c455397fd1eb6960567ee7ad892c68ae7a2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/EntityDDListener.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/EntityDDListener.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/EntityDDListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/EntityDDListener.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.CallbackStorage;\r\n+\r\n+public class EntityDDListener \r\n+{\r\n+\tpublic EntityDDListener()\r\n+\t{}\r\n+\t\r\n+\tpublic void verifyPostRemove(Object lcd)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"verifypor\");\r\n+\t}\r\n+\t\r\n+\tpublic void verifyPostUpdate(Object lcd)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"verifypou\");\r\n+\t}\r\n+}\r"},{"sha":"9fef57d025fa769ff6c26555c798c1db64dfedfa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/EntityDDListener2.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/EntityDDListener2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/EntityDDListener2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/EntityDDListener2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.CallbackStorage;\r\n+\r\n+public class EntityDDListener2 \r\n+{\r\n+\tpublic void verifyPreUpdate(Object lcd)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def2-verifypru\");\r\n+\t}\r\n+\t\r\n+\tpublic void verifyPostLoad(Object lcd)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"def2-verifypol\");\r\n+\t}\r\n+}\r"},{"sha":"6bf8a02864d081ab236f1e93718e6e0432116f16","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/FlightSchedule.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/FlightSchedule.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/FlightSchedule.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/FlightSchedule.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import java.util.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"fsched\")\r\n+//@Table(name=\"Flight_Sched\",\r\n+//\t\tuniqueConstraints=@UniqueConstraint(columnNames={\"planeName\"}))\r\n+public class FlightSchedule extends Schedule\r\n+{\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprivate int FlightNum;\r\n+\r\n+\t@Column(name=\"flight_name\")\r\n+\tprivate String planeName;\r\n+\r\n+\tpublic FlightSchedule(){}\r\n+\r\n+\tpublic FlightSchedule(String name, Calendar cad, Date start, Date end, String pname)\r\n+\t{\r\n+\t\tsuper(name, cad, start, end);\r\n+\t\tthis.planeName = pname;\r\n+\t}\r\n+\r\n+\tpublic String getFlightName() {\r\n+\t\treturn planeName;\r\n+\t}\r\n+\r\n+\tpublic void setFlightName(String flightName) {\r\n+\t\tplaneName = flightName;\r\n+\t}\r\n+\r\n+\tpublic int getFlightNum() {\r\n+\t\treturn FlightNum;\r\n+\t}\r\n+}\r"},{"sha":"3c38950a350174ef660a87a86dacda91c18ff3e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDD.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+public interface LifeCycleDD \r\n+{\r\n+}\r"},{"sha":"101f406931fdd290c00176cc5c50e41ec53ce7c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntity.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.CallbackStorage;\r\n+\r\n+@Entity\r\n+public class LifeCycleDDEntity\r\n+{\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprivate int id;\r\n+\t\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\t\r\n+\t@Basic\r\n+\tprivate String surname;\r\n+\t\r\n+\tpublic LifeCycleDDEntity()\r\n+\t{}\r\n+\t\r\n+\tpublic LifeCycleDDEntity(String name, String surname)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.surname = surname;\r\n+\t}\r\n+\t\r\n+\tpublic void verifyPrePersist()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"verifyprp\");\r\n+\t}\r\n+\t\r\n+\tpublic void verifyPostPersist()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"verifypop\");\r\n+\t}\r\n+\t\r\n+    public void verifyPreRemove()\r\n+    {\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"verifyprr\");\r\n+    }\r\n+    \r\n+    public int getId()\r\n+    {\r\n+    \treturn id;\r\n+    }\r\n+    \r\n+    public void setName(String name)\r\n+    {\r\n+    \tthis.name = name;\r\n+    }\r\n+    \r\n+    public String getName()\r\n+    {\r\n+    \treturn name;\r\n+    }\r\n+    \r\n+    public void setSurName(String name)\r\n+    {\r\n+    \tthis.surname = name;\r\n+    }\r\n+    \r\n+    public String getSurName()\r\n+    {\r\n+    \treturn surname;\r\n+    }\r\n+}\r"},{"sha":"3d7fa9242d04a3a0f61cd39d3958987ed777099e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntity2.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,105 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityListeners;\r\n+import javax.persistence.ExcludeDefaultListeners;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.PrePersist;\r\n+import javax.persistence.PreRemove;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.CallbackStorage;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LongNameValidator;\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.NameValidator;\r\n+\r\n+@Entity\r\n+public class LifeCycleDDEntity2\r\n+{\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprivate int id;\r\n+\t\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\t\r\n+\t@Basic\r\n+\tprivate String surname;\r\n+\t\r\n+\tpublic LifeCycleDDEntity2()\r\n+\t{\t\t\r\n+\t}\r\n+\t\r\n+\tpublic LifeCycleDDEntity2(String name, String surname)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.surname = surname;\r\n+\t}\r\n+\t\r\n+\t@PrePersist\r\n+\tpublic void verifyPrePersist()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"verifyprp\");\r\n+\t}\r\n+\t\r\n+\t@PostPersist\r\n+\tpublic void verifyPostPersist()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"verifypop\");\r\n+\t}\r\n+\t\r\n+\t@PreRemove\r\n+    public void verifyPreRemove()\r\n+    {\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"verifyprr\");\r\n+    }\r\n+    \r\n+    public int getId()\r\n+    {\r\n+    \treturn id;\r\n+    }\r\n+    \r\n+    public void setName(String name)\r\n+    {\r\n+    \tthis.name = name;\r\n+    }\r\n+    \r\n+    public String getName()\r\n+    {\r\n+    \treturn name;\r\n+    }\r\n+    \r\n+    public void setSurName(String name)\r\n+    {\r\n+    \tthis.surname = name;\r\n+    }\r\n+    \r\n+    public String getSurName()\r\n+    {\r\n+    \treturn surname;\r\n+    }\r\n+}\r"},{"sha":"a5716260b44dbbed3b65d2333c907b080568f286","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntitySub.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntitySub.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntitySub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LifeCycleDDEntitySub.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.CallbackStorage;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"SUB\")\r\n+public class LifeCycleDDEntitySub extends LifeCycleDDEntity\r\n+{\r\n+\tpublic LifeCycleDDEntitySub()\r\n+\t{}\r\n+\t\r\n+\tpublic LifeCycleDDEntitySub(String n, String sn)\r\n+\t{\r\n+\t\tsuper(n, sn);\r\n+\t}\r\n+\t\r\n+\tpublic void verifyPrePersist()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"over-verifyprp\");\r\n+\t}\r\n+\t\r\n+\tpublic void verifyPostPersist()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"over-verifypop\");\r\n+\t}\r\n+\t\r\n+    public void verifyPreRemove()\r\n+    {\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"over-verifyprr\");\r\n+    }\r\n+}\r"},{"sha":"a5c28415f98f8782c587838975dfc188c55dbd9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LongNameValidator.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LongNameValidator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LongNameValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/LongNameValidator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class LongNameValidator\r\n+{\r\n+\t@PrePersist\r\n+\tpublic void validateName(NamedEntity obj)\r\n+\t{\r\n+\t\tSystem.out.println(\"LongNameValidator is running on \"+obj);\r\n+\t\tif(obj.getName().equals(\"\") || obj.getName() == null)\r\n+\t\t\tthrow new NullPointerException();\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"longnamevalidatorprr\");\r\n+\t}\r\n+\r\n+\t@PostUpdate\r\n+\tpublic void testpost(NamedEntity obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"longnamevalidatorpou\");\r\n+\t}\r\n+\r\n+\r\n+}\r"},{"sha":"90766867f1430eef53b65b4c1d1dc98748d07625","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/NameValidator.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/NameValidator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/NameValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/NameValidator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class NameValidator\r\n+{\r\n+\t@PrePersist\r\n+\tpublic void validateName(NamedEntity obj)\r\n+\t{\r\n+\t\tSystem.out.println(\"NameValidator is running on \"+obj);\r\n+\t\tif(obj.getName().equals(\"\") || obj.getName() == null)\r\n+\t\t\tthrow new NullPointerException();\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"namevalidator\");\r\n+\t}\r\n+\r\n+\t@PostUpdate\r\n+\tpublic void testpost(NamedEntity obj)\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"namevalidatorpou\");\r\n+\t}\r\n+\r\n+\t@PostRemove\r\n+\tpublic void validateNothing(NamedEntity obj)\r\n+\t{\r\n+\t\tSystem.out.println(\"NameValidator is running on \");\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"namevalidatorpor\");\r\n+\t}\r\n+\r\n+\t@PreRemove\r\n+\tpublic void validateNothing1(NamedEntity obj)\r\n+\t{\r\n+\t\tSystem.out.println(\"NameValidator is running on \");\r\n+\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"namevalidatorprr\");\r\n+\t}\r\n+}\r"},{"sha":"61f63daa2e7c387b4e151edb0f3d7dd240916567","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/NamedEntity.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/NamedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/NamedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/NamedEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+\r\n+public interface NamedEntity\r\n+{\r\n+\tpublic String getName();\r\n+\r\n+}\r"},{"sha":"23de65ebe473aab834b65cbe0efe1731c16c685d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Schedule.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Schedule.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Schedule.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/Schedule.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Calendar;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+//@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+@EntityListeners({DateValidator.class, StringValidator.class})\r\n+public class Schedule\r\n+{\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprivate int id;\r\n+\r\n+\t@Temporal(TemporalType.DATE)\r\n+\t@Basic\r\n+\tprivate Calendar dob;\r\n+\r\n+\t@Temporal(TemporalType.TIME)\r\n+\t@Basic\r\n+\tprivate Date startDate;\r\n+\r\n+\t@Temporal(TemporalType.TIMESTAMP)\r\n+\t@Basic\r\n+\tprivate Date endDate;\r\n+\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\r\n+\tpublic Schedule(){}\r\n+\r\n+\tpublic Schedule(String name, Calendar cad, Date sdate, Date endDate)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.dob = cad;\r\n+\t\tthis.startDate = sdate;\r\n+\t\tthis.endDate = endDate;\r\n+\t}\r\n+\r\n+\tpublic Calendar getDob() {\r\n+\t\treturn dob;\r\n+\t}\r\n+\r\n+\tpublic void setDob(Calendar dob) {\r\n+\t\tthis.dob = dob;\r\n+\t}\r\n+\r\n+\tpublic Date getStartDate() {\r\n+\t\treturn startDate;\r\n+\t}\r\n+\r\n+\tpublic void setStartDate(Date startDate) {\r\n+\t\tthis.startDate = startDate;\r\n+\t}\r\n+\r\n+\tpublic Date getEndDate() {\r\n+\t\treturn endDate;\r\n+\t}\r\n+\r\n+\tpublic void setEndDate(Date endDate) {\r\n+\t\tthis.endDate = endDate;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn \"Schedule \"+name+\" Date \"+startDate;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"8fa87b306258ef879935e91f35203bb0d7d17d2c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/StringValidator.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/StringValidator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/StringValidator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/StringValidator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+public class StringValidator\r\n+{\r\n+\t@PrePersist\r\n+\tpublic void prePersist(FlightSchedule sched)\r\n+\t{\r\n+\t\tif(sched.getName().length() == 0 || sched.getName().equals(\"\"))\r\n+\t\t\tthrow new IllegalArgumentException(\"Needs a valid name\");\r\n+\t}\r\n+\r\n+\t@PostPersist\r\n+\tpublic void postPersist(FlightSchedule sched)\r\n+\t{\r\n+\t\tSystem.out.println(\"Schedule \"+sched+\" is successfully persisted: StringValidator.class\");\r\n+\t}\r\n+}\r"},{"sha":"633d8a2fe47d47b95202872ada7a04065640ba72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/TxRollbackEntity.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/TxRollbackEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/TxRollbackEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/TxRollbackEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype;\r\n+\r\n+import java.util.ArrayList;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.PostLoad;\r\n+import javax.persistence.PostPersist;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.PostRemove;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"TX_ROLLBACK_ENT\")\r\n+public class TxRollbackEntity\r\n+{\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\r\n+\tpublic TxRollbackEntity(String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\t@PostLoad\r\n+\tpublic void rollBackException()\r\n+\t{\r\n+\t\t//should throw a null pointer exception causing the tx to be rolled back\r\n+\t\tArrayList<Integer> list = null;\r\n+\t\tlist.add(1);\r\n+\t}\r\n+\r\n+\t@PostRemove\r\n+\tpublic void bomb()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"rollbackpor1\");\r\n+\t}\r\n+\r\n+\tpublic void bomb2()\r\n+\t{\r\n+\t\tCallbackStorage store = CallbackStorage.getInstance();\r\n+\t\tstore.getClist().add(\"rollbackpor\");\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+}\r"},{"sha":"49d1a4c17524714a98cd0c2db080264625db7683","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/TestQueryCache.java","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/TestQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/TestQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/TestQueryCache.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,183 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.cache;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+import org.apache.openjpa.persistence.cache.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.cache.common.apps.Entity2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+@NamedQuery(name = \"setParam1\",\r\n+    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+public class TestQueryCache extends AbstractTestCase {\r\n+\r\n+    EntityManager em;\r\n+\r\n+    public TestQueryCache(String name) {\r\n+        super(name);\r\n+        System.setProperty(\"cactus.contextURL\",\r\n+            \"http://localhost:9000/cachecactus\");\r\n+        em = currentEntityManager();\r\n+    }\r\n+\r\n+    /*public static Test suite()\r\n+    {\r\n+        ServletTestSuite suite = new ServletTestSuite();\r\n+        suite.addTestSuite(TestQueryCache.class);\r\n+        return suite;\r\n+    }*/\r\n+    public void setUp() {\r\n+        System.setProperty(\"cactus.contextURL\",\r\n+            \"http://localhost:9000/cactuswebapp\");\r\n+\r\n+        //deleteAll(Entity2.class);\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        int instNum = 10;\r\n+\r\n+        startTx(em);\r\n+\r\n+        //create and persist multiple entity1 instances\r\n+        for (int i = 0; i < instNum; i++) {\r\n+            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\r\n+            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\r\n+            ent.setEntity2Field(ent2);\r\n+            em.persist(ent);\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testResultList() {\r\n+        em = currentEntityManager();\r\n+        List list = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertEquals(10, list.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testGetSingleList() {\r\n+        em = currentEntityManager();\r\n+        String curr = 2 + \"\";\r\n+\r\n+        Entity1 ret = (Entity1) em\r\n+            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .getSingleResult();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"string2\", ret.getStringField());\r\n+        assertEquals(4, ret.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExecuteUpdate() {\r\n+        String curr = 2 + \"\";\r\n+        String curr2 = 22 + \"\";\r\n+\r\n+        em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Entity1 entity1 = (Entity1) em\r\n+            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .getSingleResult();\r\n+\r\n+        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .executeUpdate();\r\n+        assertEquals(ret, 1);\r\n+\r\n+//cascade remove doesn't remove the entity2\r\n+        int retTmp = em.createQuery(\"Delete FROM Entity2 o WHERE o.pk LIKE :pk\")\r\n+            .setParameter(\"pk\", entity1.getEntity2Field().getPk())\r\n+            .executeUpdate();\r\n+\r\n+        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+            .setParameter(\"pk\", curr2)\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret2, 0);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetMaxResults() {\r\n+        em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setMaxResults(5)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(5, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetFirstResults() {\r\n+        em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setFirstResult(3)\r\n+            .getResultList();\r\n+\r\n+        Entity1 ent = (Entity1) l.get(0);\r\n+\r\n+        assertNotNull(ent);\r\n+        assertEquals(\"string3\", ent.getStringField());\r\n+        assertEquals(5, ent.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    // Tests Binding an argument to a named parameter.\r\n+    // pk, the named parameter --Not working yet--\r\n+    public void xxxtestSetParameter1() {\r\n+\r\n+        em = currentEntityManager();\r\n+        String curr = 2 + \"\";\r\n+\r\n+        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        ret = em.createNamedQuery(\"setParam1\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        endTx(em);\r\n+    }\r\n+\r\n+    //rest of the interface is tested by the CTS\r\n+}\r"},{"sha":"84392a2e06bfb26a12ec40b773809a57dc9a1f98","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity1.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.cache.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name = \"NativeTestResult\",\r\n+    entities = @EntityResult(entityClass = Entity1.class))\r\n+public class Entity1 implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+    @Id\r\n+    protected long pk;\r\n+\r\n+    @Basic\r\n+    @Column(length = 35)\r\n+    protected String stringField;\r\n+\r\n+    @Basic\r\n+    protected int intField;\r\n+\r\n+    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\r\n+    protected Entity2 entity2Field;\r\n+\r\n+    @Version\r\n+    protected int versionField;\r\n+\r\n+    public Entity1() {\r\n+    }\r\n+\r\n+    public Entity1(long pk, String stringField, int intField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setIntField(int val) {\r\n+        intField = val;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public void setEntity2Field(Entity2 val) {\r\n+        entity2Field = val;\r\n+    }\r\n+\r\n+    public Entity2 getEntity2Field() {\r\n+        return entity2Field;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n+            intField);\r\n+    }\r\n+}\r"},{"sha":"16c51cc537c13cec45f7ea7524e329b33bfb11ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity2.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.cache.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+public class Entity2 implements Serializable {\r\n+\r\n+    /**\r\n+     *\r\n+     */\r\n+    private static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+    @Id\r\n+    protected long pk;\r\n+\r\n+    @Basic\r\n+    @Column(length = 35)\r\n+    protected String stringField;\r\n+\r\n+    @Basic\r\n+    protected int intField;\r\n+\r\n+    public Entity2() {\r\n+    }\r\n+\r\n+    public Entity2(long pk, String stringField, int intField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setIntField(int val) {\r\n+        intField = val;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n+            intField);\r\n+    }\r\n+}\r"},{"sha":"6989f534631096c6f834cbce5298d632a936f7b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Address.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Address.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Address.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,94 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class Address\r\n+{\r\n+\t@Basic\r\n+\t@Column(length=50)\r\n+\tprivate String streetAd;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=50)\r\n+\tprivate String city;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=50)\r\n+\tprivate String country;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=25)\r\n+\tprivate String zipcode;\r\n+\r\n+\t@OneToOne(mappedBy=\"address\")\r\n+\tprivate CompUser user;\r\n+\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tprivate int id;\r\n+\r\n+\tpublic Address(){}\r\n+\r\n+\tpublic Address(String streetAd, String city, String country, String zipcode)\r\n+\t{\r\n+\t\tthis.streetAd = streetAd;\r\n+\t\tthis.city = city;\r\n+\t\tthis.country = country;\r\n+\t\tthis.zipcode = zipcode;\r\n+\t}\r\n+\r\n+\tpublic String getCity() {\r\n+\t\treturn city;\r\n+\t}\r\n+\r\n+\tpublic void setCity(String city) {\r\n+\t\tthis.city = city;\r\n+\t}\r\n+\r\n+\tpublic String getCountry() {\r\n+\t\treturn country;\r\n+\t}\r\n+\r\n+\tpublic void setCountry(String country) {\r\n+\t\tthis.country = country;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic String getStreetAd() {\r\n+\t\treturn streetAd;\r\n+\t}\r\n+\r\n+\tpublic void setStreetAd(String streetAd) {\r\n+\t\tthis.streetAd = streetAd;\r\n+\t}\r\n+\r\n+\tpublic String getZipcode() {\r\n+\t\treturn zipcode;\r\n+\t}\r\n+\r\n+\tpublic void setZipcode(String zipcode) {\r\n+\t\tthis.zipcode = zipcode;\r\n+\t}\r\n+}\r"},{"sha":"14918e18be375b07f8473cd9b98da6ac5b464003","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ArtCourse.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ArtCourse.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ArtCourse.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ArtCourse.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"Art\")\r\n+public class ArtCourse extends Course\r\n+{\r\n+\tprivate static final long serialVersionUID = 1L;\r\n+\r\n+\tprivate String relCourse;\r\n+\r\n+\tpublic ArtCourse(String relCourse)\r\n+\t{\r\n+\t\tthis.relCourse = relCourse;\r\n+\t}\r\n+\r\n+\tpublic ArtCourse(int id, String relCourse)\r\n+\t{\r\n+\t\tsuper(id);\r\n+\t\tthis.relCourse = relCourse;\r\n+\t}\r\n+\r\n+\tpublic String getRelCourse()\r\n+\t{\r\n+\t\treturn relCourse;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"a26e5ad0bb1007cdd8c4979571b8e9588494e27d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+import org.apache.openjpa.persistence.*;\r\n+\r\n+import java.util.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class CompUser\r\n+{\r\n+\t@Basic\r\n+\t@Column(length=50)\r\n+\tprivate String name;\r\n+\r\n+\t@Basic\r\n+\tprivate int age;\r\n+\r\n+\t@Basic\r\n+\t@Column(name=\"compName\", length=50)\r\n+\tprivate String computerName;\r\n+\r\n+\t@PersistentCollection\r\n+\tprivate String[] nicknames = new String[0];\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\t@JoinColumn(name=\"ADD_ID\")\r\n+\tprivate Address address;\r\n+\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n+\tpublic int userid;\r\n+\r\n+\tpublic CompUser(){}\r\n+\r\n+\tpublic CompUser(String name, String cName, Address address, int age)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.computerName = cName;\r\n+\t\tthis.address = address;\r\n+\t\tthis.age = age;\r\n+\t}\r\n+\r\n+\tpublic String getComputerName() {\r\n+\t\treturn computerName;\r\n+\t}\r\n+\r\n+\tpublic void setComputerName(String computerName) {\r\n+\t\tthis.computerName = computerName;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic int getUserid() {\r\n+\t\treturn userid;\r\n+\t}\r\n+\r\n+\tpublic Address getAddress() {\r\n+\t\treturn address;\r\n+\t}\r\n+\r\n+\tpublic void setAddress(Address address) {\r\n+\t\tthis.address = address;\r\n+\t}\r\n+\r\n+\tpublic int getAge() {\r\n+\t\treturn age;\r\n+\t}\r\n+\r\n+\tpublic void setAge(int age) {\r\n+\t\tthis.age = age;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"1eddd4e2bcdd148c95bc6122a5c002ee23228e55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ComplexEmbeddedPC.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ComplexEmbeddedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Embedded type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+public class ComplexEmbeddedPC\r\n+{\r\n+\t@Basic\r\n+\tprivate String \t\t\t\tstringField;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate EmbeddedOwnerPC\t\townerField;\r\n+\r\n+\tprivate Set\t\t\t\t\tstringSet = new HashSet ();\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic EmbeddedOwnerPC getOwnerField ()\r\n+\t{\r\n+\t\treturn this.ownerField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setOwnerField (EmbeddedOwnerPC ownerField)\r\n+\t{\r\n+\t\tthis.ownerField = ownerField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Set getStringSet ()\r\n+\t{\r\n+\t\treturn this.stringSet;\r\n+\t}\r\n+\r\n+\tpublic void setStringSet (Set stringSet)\r\n+\t{\r\n+\t\tthis.stringSet = stringSet;\r\n+\t}\r\n+}\r"},{"sha":"04603d6c029ee1432c4d7c491688b4c9a428eb9b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Course.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Course.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Course.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Course.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class Course implements Serializable\r\n+{\r\n+\t@Transient\r\n+\tprivate static final long serialVersionUID = 1L;\r\n+\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\r\n+\t@Basic\r\n+\tprivate int units;\r\n+\r\n+\t@ManyToMany(mappedBy=\"course\")\r\n+\tprivate List<Student> students;\r\n+\r\n+\t@Id\r\n+\tprivate int courseId;\r\n+\r\n+\tpublic Course(){}\r\n+\r\n+\tpublic Course(int courseId)\r\n+\t{\r\n+\t\tthis.courseId = courseId;\r\n+\t}\r\n+\r\n+\tpublic Course(String name, int units, int courseId)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.units = units;\r\n+\t\tthis.courseId = courseId;\r\n+\t}\r\n+\r\n+\tpublic int getCourseId() {\r\n+\t\treturn courseId;\r\n+\t}\r\n+\r\n+\tpublic void setCourseId(int courseId) {\r\n+\t\tthis.courseId = courseId;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic int getUnits() {\r\n+\t\treturn units;\r\n+\t}\r\n+\r\n+\tpublic void setUnits(int units) {\r\n+\t\tthis.units = units;\r\n+\t}\r\n+}\r"},{"sha":"45ba51e73332f9159da45702cc17c2cdbe09dfdd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Department.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Department.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Department.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+\r\n+@Entity\r\n+public class Department implements Serializable\r\n+{\r\n+\t@Transient\r\n+\tprivate static final long serialVersionUID = 1L;\r\n+\r\n+\t@Id\r\n+\tprivate int id;\r\n+\r\n+\t@Basic\r\n+\tprivate String name;\r\n+\r\n+\t@ManyToMany(mappedBy=\"department\")\r\n+\tprivate List<Student> slist;\r\n+\r\n+\tpublic Department(){}\r\n+\r\n+\tpublic Department(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic Department(String name, List<Student> slist, int id)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.slist = slist;\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic List<Student> getSlist() {\r\n+\t\treturn slist;\r\n+\t}\r\n+\r\n+\tpublic void setSlist(List<Student> slist) {\r\n+\t\tthis.slist = slist;\r\n+\t}\r\n+}\r"},{"sha":"5e10e0fde5053673360f7aa021381d172c0de9b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedOwnerPC.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedOwnerPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,158 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persistent type used in testing embedded instances.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+@Table(name=\"embownpc\")\r\n+@IdClass(EmbeddedOwnerPC.EmbKey.class)\r\n+public class EmbeddedOwnerPC\r\n+{\r\n+\t@Id\r\n+\tprivate int\t\t\t\t\tid1;\r\n+\t@Id\r\n+\tprivate int\t\t\t\t\tid2;\r\n+\t@Basic\r\n+\tprivate String\t\t\t\tstringField;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate EmbeddedPC \t\t\tembedded;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate ComplexEmbeddedPC\tcomplexEmbedded;\r\n+\r\n+\r\n+\tprotected EmbeddedOwnerPC ()\r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic EmbeddedOwnerPC (int id1, int id2)\r\n+\t{\r\n+\t\tthis.id1 = id1;\r\n+\t\tthis.id2 = id2;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getId1 ()\r\n+\t{\r\n+\t\treturn id1;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getId2 ()\r\n+\t{\r\n+\t\treturn id2;\r\n+\t}\r\n+\r\n+\r\n+\tpublic EmbeddedPC getEmbedded ()\r\n+\t{\r\n+\t\treturn this.embedded;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEmbedded (EmbeddedPC embedded)\r\n+\t{\r\n+\t\tthis.embedded = embedded;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic ComplexEmbeddedPC getComplexEmbedded ()\r\n+\t{\r\n+\t\treturn this.complexEmbedded;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setComplexEmbedded (ComplexEmbeddedPC complexEmbedded)\r\n+\t{\r\n+\t\tthis.complexEmbedded = complexEmbedded;\r\n+\t}\r\n+\r\n+\tpublic static class EmbKey implements Serializable\r\n+\t{\r\n+\t\tpublic int\t\t\t\t\tid1;\r\n+\t\tpublic int\t\t\t\t\tid2;\r\n+\r\n+\t\tpublic EmbKey()\r\n+\t\t{\r\n+\t\t}\r\n+\r\n+\t\tpublic EmbKey (String str)\r\n+\t\t{\r\n+\t\t\tint index = str.indexOf (\":\");\r\n+\t\t\tif (index != -1)\r\n+\t\t\t{\r\n+\t\t\t\tid1 = Integer.parseInt (str.substring (0, index));\r\n+\t\t\t\tid2 = Integer.parseInt(str.substring (index + 1));\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic boolean equals(Object other)\r\n+\t\t{\r\n+\t\t\tif(!(other instanceof EmbKey))\r\n+\t\t\t\t  return false;\r\n+\r\n+\t     \tEmbKey touse = (EmbKey)other;\r\n+\r\n+\t\t\tif (id2 == 0 && touse.id2 != 0)\r\n+\t\t\t\treturn false;\r\n+\t\t\tif (id2 != 0 && touse.id2 == 0)\r\n+\t\t\t\treturn false;\r\n+\t\t\tif (!(id1 == touse.id1))\r\n+\t\t\t\treturn false;\r\n+\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic int hashCode()\r\n+\t\t{\r\n+\t\t\treturn (id1 + id2+\"\").hashCode();\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"a1b0df1bad7b7dfc29bf10caeae3fffeba3a56b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedPC.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Embedded type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+@Table(name=\"embpc\")\r\n+public class EmbeddedPC\r\n+{\r\n+\t@Id\r\n+\tprivate int\t\tintField;\r\n+\r\n+\tprivate String \tstringField;\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn this.intField;\r\n+\t}\r\n+\r\n+\tpublic void setIntField (int intField)\r\n+\t{\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+}\r"},{"sha":"aa5402e2d5bb8413451c4b89ed357ee75ccdc48a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity1.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+\r\n+@Entity\r\n+@Table(name=\"entity_1\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\r\n+public class Entity1 implements Serializable\r\n+{\r\n+\tprivate static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\r\n+\tprotected Entity2 entity2Field;\r\n+\r\n+\t@Version\r\n+\tprotected int versionField;\r\n+\r\n+\tpublic Entity1()\r\n+\t{}\r\n+\r\n+\tpublic Entity1 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEntity2Field (Entity2 val)\r\n+\t{\r\n+\t\tentity2Field = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Entity2 getEntity2Field ()\r\n+\t{\r\n+\t\treturn entity2Field;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"732d0af76bcec382115e233cbaec64230fd5a2de","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity2.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+/**FIX-ME \r\n+ * \r\n+ * It should complain if i uncomment the above strategies...but it does\r\n+ */\r\n+@Entity\r\n+public class Entity2 implements Serializable\r\n+{\r\n+\t/**\r\n+\t *\r\n+\t */\r\n+\tprivate static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\tpublic Entity2()\r\n+\t{}\r\n+\r\n+\r\n+\tpublic Entity2 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"ded6ff4ed0f20ec1e871125fce847f7ca7375a52","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/FemaleUser.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/FemaleUser.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/FemaleUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/FemaleUser.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity(name=\"FemUser\")\r\n+@DiscriminatorValue(value=\"F\")\r\n+public class FemaleUser extends CompUser\r\n+{\r\n+\r\n+\tpublic FemaleUser(){}\r\n+\r\n+\tpublic FemaleUser(String name, String cname, Address add, int age, int id)\r\n+\t{\r\n+\t\tsuper(name, cname, add, age);\r\n+\t}\r\n+}\r"},{"sha":"81740f2f6b88f75e47fcaa665382dd686b09617a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/MaleUser.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/MaleUser.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/MaleUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/MaleUser.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(value=\"M\")\r\n+public class MaleUser extends CompUser\r\n+{\r\n+\tpublic MaleUser(){}\r\n+\r\n+\tpublic MaleUser(String name, String cname, Address add, int age, int id)\r\n+\t{\r\n+\t\tsuper(name, cname, add, age);\r\n+\t}\r\n+}\r"},{"sha":"0babcfd2941968536acd2f5c77492f1dc58fb0f1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest1.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,143 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.math.*;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persitent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+@Table(name=\"rtest1\")\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class RuntimeTest1 implements Serializable\r\n+{\r\n+\r\n+\tprivate static final long serialVersionUID = 1L;\r\n+\r\n+\t@Transient\r\n+\tpublic static final String someStaticField = \"someField\";\r\n+\r\n+\tprivate Locale\t\tlocaleField;\r\n+\r\n+\t@Id\r\n+\tprivate int\t\t\tintField;\r\n+\r\n+\t@Column(length=35)\r\n+\tprivate String\t\tstringField;\r\n+\r\n+\t// transactional only\r\n+\t@Column(length=35)\r\n+\tpublic String\t\ttransString;\r\n+\r\n+\t// relations\r\n+\t//@Transient\r\n+\t@OneToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\tprivate RuntimeTest1\tselfOneOne;\r\n+\r\n+\t@Transient\r\n+\tprivate Set\t\tselfOneMany = new HashSet ();\r\n+\r\n+\r\n+\tpublic RuntimeTest1 ()\r\n+\t{}\r\n+\r\n+\tpublic RuntimeTest1(int key)\r\n+\t{\r\n+\t\tthis.intField = key;\r\n+\t}\r\n+\r\n+\tpublic RuntimeTest1 (String str, int i)\r\n+\t{\r\n+\t\tstringField = str;\r\n+\t\tintField = i;\r\n+\t}\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn this.intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setIntField (int intField)\r\n+\t{\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn this.stringField;\r\n+\t}\r\n+\r\n+\tpublic void setStringField (String stringField)\r\n+\t{\r\n+\t\tthis.stringField = stringField;\r\n+\t}\r\n+\r\n+\tpublic RuntimeTest1 getSelfOneOne ()\r\n+\t{\r\n+\t\treturn this.selfOneOne;\r\n+\t}\r\n+\r\n+\tpublic void setSelfOneOne (RuntimeTest1 selfOneOne)\r\n+\t{\r\n+\t\tthis.selfOneOne = selfOneOne;\r\n+\t}\r\n+\r\n+\tpublic Set getSelfOneMany ()\r\n+\t{\r\n+\t\treturn this.selfOneMany;\r\n+\t}\r\n+\r\n+\tpublic void setSelfOneMany (Set selfOneMany)\r\n+\t{\r\n+\t\tthis.selfOneMany = selfOneMany;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn \"IntField: \"+intField+\", StringField: \"+stringField+\" .\";\r\n+\t}\r\n+\r\n+\tpublic Locale getLocaleField() {\r\n+\t\treturn localeField;\r\n+\t}\r\n+\r\n+\tpublic void setLocaleField(Locale localeField) {\r\n+\t\tthis.localeField = localeField;\r\n+\t}\r\n+}\r"},{"sha":"c79b740c66052d9da07f4bd3b6387ca6faa59001","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest2.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.Table;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persitent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"RT2\")\r\n+public class RuntimeTest2 extends RuntimeTest1\r\n+{\r\n+\tprivate static final long serialVersionUID = 1L;\r\n+\tprivate int intField2;\r\n+\r\n+\tpublic RuntimeTest2 (int key)\r\n+\t{\r\n+\t\tsuper(key);\r\n+\t}\r\n+\r\n+\tpublic RuntimeTest2 (String str, int i)\r\n+\t{\r\n+\t\tsuper (str, i);\r\n+\t}\r\n+\r\n+\tpublic int getIntField2 ()\r\n+\t{\r\n+\t\treturn this.intField2;\r\n+\t}\r\n+\r\n+\tpublic void setIntField2 (int intField2)\r\n+\t{\r\n+\t\tthis.intField2 = intField2;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn \"IntField: \"+intField2+\", StringField: \"+super.getStringField()+\" .\";\r\n+\t}\r\n+}\r"},{"sha":"40e9f0f42b5a12d94dfbcce6f2d487b7a01b1aa2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ScienceCourse.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ScienceCourse.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ScienceCourse.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ScienceCourse.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"Science\")\r\n+public class ScienceCourse extends Course\r\n+{\r\n+\tprivate static final long serialVersionUID = 1L;\r\n+\r\n+\tprivate String relCourse;\r\n+\r\n+\tpublic ScienceCourse(String relCourse)\r\n+\t{\r\n+\t\tthis.relCourse = relCourse;\r\n+\t}\r\n+\r\n+\tpublic ScienceCourse(int id, String relCourse)\r\n+\t{\r\n+\t\tsuper(id);\r\n+\t\tthis.relCourse = relCourse;\r\n+\t}\r\n+\r\n+\tpublic String getRelCourse()\r\n+\t{\r\n+\t\treturn relCourse;\r\n+\t}\r\n+}\r"},{"sha":"c46f05aa0fbfb1f412478a434faa15d03ab10bd4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Student.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Student.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Student.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Student.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class Student implements Serializable {\r\n+\r\n+\t@Transient\r\n+\tprivate static final long serialVersionUID = 1L;\r\n+\r\n+\t@Id\r\n+\t@Column(length=50)\r\n+\tprivate String name;\r\n+\r\n+\t@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\t@JoinTable(name=\"STUD_COURSE\",\r\n+\t\t            joinColumns=@JoinColumn(name=\"STUD_ID\"),\r\n+\t\t            inverseJoinColumns=@JoinColumn(name=\"CRSE_ID\"))\r\n+\tprivate List<Course> course;\r\n+\r\n+\t@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+\t@JoinTable(name=\"STUD_DEP\",\r\n+\t\t            joinColumns=@JoinColumn(name=\"STUD_ID\"),\r\n+\t\t            inverseJoinColumns=@JoinColumn(name=\"DEP_ID\"))\r\n+\tprivate List<Department> department;\r\n+\r\n+\tpublic Student(){}\r\n+\r\n+\tpublic Student(String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic Student(String name, List<Course> clist, List<Department> dlist)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t\tthis.course = clist;\r\n+\t\tthis.department = dlist;\r\n+\t}\r\n+\r\n+\tpublic List<Course> getCourse() {\r\n+\t\treturn course;\r\n+\t}\r\n+\r\n+\tpublic void setCourse(List<Course> course) {\r\n+\t\tthis.course = course;\r\n+\t}\r\n+\r\n+\tpublic List<Department> getDepartment() {\r\n+\t\treturn department;\r\n+\t}\r\n+\r\n+\tpublic void setDepartment(List<Department> department) {\r\n+\t\tthis.department = department;\r\n+\t}\r\n+\r\n+\tpublic String getName()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\r"},{"sha":"934b9083e1e3959cc8f95abdf9841e2289607528","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","status":"added","additions":1167,"deletions":0,"changes":1167,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,1167 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.utils;\r\n+\r\n+import java.util.Map;\r\n+import java.util.Date;\r\n+import java.util.Collection;\r\n+import java.util.EnumSet;\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Iterator;\r\n+import java.util.Collections;\r\n+import java.util.LinkedList;\r\n+import java.util.StringTokenizer;\r\n+import java.util.ListIterator;\r\n+import java.util.NoSuchElementException;\r\n+import java.util.Arrays;\r\n+import java.util.Comparator;\r\n+import java.math.BigInteger;\r\n+import java.math.BigDecimal;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+import java.beans.BeanInfo;\r\n+import java.beans.Introspector;\r\n+import java.beans.PropertyDescriptor;\r\n+import java.io.IOException;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.StringWriter;\r\n+import java.io.PrintWriter;\r\n+import java.io.PrintStream;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+import javax.management.IntrospectionException;\r\n+\r\n+import org.apache.regexp.RESyntaxException;\r\n+import org.apache.regexp.RE;\r\n+import org.apache.regexp.REUtil;\r\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+\r\n+public abstract class AbstractTestCase extends PersistenceTestCase {\r\n+\r\n+    protected enum Platform {\r\n+        EMPRESS,\r\n+        HYPERSONIC,\r\n+        POSTGRESQL,\r\n+        MYSQL,\r\n+        SQLSERVER,\r\n+        DB2,\r\n+        ORACLE,\r\n+        DERBY,\r\n+        INFORMIX,\r\n+        POINTBASE,\r\n+        SYBASE,\r\n+    }\r\n+\r\n+    protected String multiThreadExecuting = null;\r\n+    protected boolean inTimeoutThread = false;\r\n+\r\n+\r\n+    public AbstractTestCase(String name, String s) {\r\n+        setName(name);\r\n+    }\r\n+\r\n+    public AbstractTestCase() {\r\n+    }\r\n+\r\n+    public AbstractTestCase(String name) {\r\n+        setName(name);\r\n+    }\r\n+\r\n+    protected OpenJPAStateManager getStateManager(Object obj,\r\n+        EntityManager pm) {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    protected int deleteAll(Class type, EntityManager em) {\r\n+        final boolean useDeleteByQuery = true;\r\n+\r\n+        if (useDeleteByQuery) {\r\n+            Broker broker = JPAFacadeHelper.toBroker(em);\r\n+            org.apache.openjpa.kernel.Query query = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, type, \"\");\r\n+            query.setCandidateType(type, true);\r\n+            return (int) query.deleteAll();\r\n+        } else {\r\n+            List list = OpenJPAPersistence.cast(em).createExtent(type, true)\r\n+                .list();\r\n+            int size = list.size();\r\n+            for (Object o : list)\r\n+                em.remove(o);\r\n+            return size;\r\n+        }\r\n+    }\r\n+\r\n+    protected int deleteAll(Class... types) {\r\n+        EntityManager em = getEmf().createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        int ret = 0;\r\n+        for (Class type : types)\r\n+            ret += deleteAll(type, em);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        return ret;\r\n+    }\r\n+\r\n+    protected OpenJPAEntityManagerFactory getEmf(Map map) {\r\n+        Collection keys = new ArrayList();\r\n+        for (Object key : map.keySet())\r\n+            if (key.toString().startsWith(\"kodo\"))\r\n+                keys.add(key);\r\n+        if (keys.size() > 0)\r\n+            throw new IllegalArgumentException(\r\n+                \"kodo-prefixed properties must be converted to openjpa. \" +\r\n+                \"Properties: \" + keys);\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    protected OpenJPAEntityManagerFactory getEmf() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    protected BrokerFactory getBrokerFactory() {\r\n+        return JPAFacadeHelper.toBrokerFactory(getEmf());\r\n+    }\r\n+\r\n+    protected BrokerFactory getBrokerFactory(String[] args) {\r\n+        if (args.length % 2 != 0)\r\n+            throw new IllegalArgumentException(\r\n+                \"odd number of elements in arg array\");\r\n+        Map map = new HashMap();\r\n+        for (int i = 0; i < args.length; i = i + 2)\r\n+            map.put(args[i], args[i+1]);\r\n+        return JPAFacadeHelper.toBrokerFactory(getEmf(map));\r\n+    }\r\n+\r\n+    protected OpenJPAEntityManager currentEntityManager() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    protected void startTx(EntityManager em) {\r\n+        em.getTransaction().begin();\r\n+    }\r\n+\r\n+    protected boolean isActiveTx(EntityManager em) {\r\n+        return em.getTransaction().isActive();\r\n+    }\r\n+\r\n+    protected void endTx(EntityManager em) {\r\n+        if (em.getTransaction().isActive()) {\r\n+            if (em.getTransaction().getRollbackOnly())\r\n+                em.getTransaction().rollback();\r\n+            else\r\n+                em.getTransaction().commit();\r\n+        }\r\n+    }\r\n+\r\n+    protected void rollbackTx(EntityManager em) {\r\n+        em.getTransaction().rollback();\r\n+    }\r\n+\r\n+    protected void endEm(EntityManager em) {\r\n+        if (em.isOpen())\r\n+            em.close();\r\n+    }\r\n+\r\n+    protected Object getStackTrace(Throwable t) {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    protected OpenJPAConfiguration getConfiguration() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    protected Platform getCurrentPlatform() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    protected void bug(int id, String s) {\r\n+        bug(id, null, s);\r\n+    }\r\n+    \r\n+    protected void bug(Platform platform, int id, Throwable t, String s) {\r\n+        bug(EnumSet.of(platform), id, t, s);\r\n+    }\r\n+\r\n+    protected void bug(EnumSet<Platform> platforms, int id, Throwable t, String s) {\r\n+        if (platforms.contains(getCurrentPlatform()))\r\n+            bug(id, t, s);\r\n+        else\r\n+            fail(String.format(\r\n+                \"bug %s is unexpectedly occurring on platform %s\",\r\n+                id, getCurrentPlatform()));\r\n+    }\r\n+\r\n+    protected void bug(int id, Throwable t, String s) {\r\n+        if (t != null) {\r\n+            if (t instanceof RuntimeException)\r\n+                throw (RuntimeException) t;\r\n+            else\r\n+                throw new RuntimeException(t);\r\n+        } else {\r\n+            fail(s);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Integer for testing.\r\n+     */\r\n+    public static Integer randomInt() {\r\n+        return new Integer((int) (Math.random() * Integer.MAX_VALUE));\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Character for testing.\r\n+     */\r\n+    public static Character randomChar() {\r\n+        char [] TEST_CHAR_ARRAY = new char []{\r\n+            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\r\n+            'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\r\n+            's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1',\r\n+            '2', '3', '4', '5', '6', '7', '8', '9' };\r\n+\r\n+        return new Character(TEST_CHAR_ARRAY[\r\n+                (int) (Math.random() * TEST_CHAR_ARRAY.length)]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Long for testing.\r\n+     */\r\n+    public static Long randomLong() {\r\n+        return new Long((long) (Math.random() * Long.MAX_VALUE));\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Short for testing.\r\n+     */\r\n+    public static Short randomShort() {\r\n+        return new Short((short) (Math.random() * Short.MAX_VALUE));\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Double for testing.\r\n+     */\r\n+    public static Double randomDouble() {\r\n+        return new Double((double) (Math.round(Math.random() * 5000d)) / 1000d);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Float for testing.\r\n+     */\r\n+    public static Float randomFloat() {\r\n+        return new Float((float) (Math.round(Math.random() * 5000f)) / 1000f);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Byte for testing.\r\n+     */\r\n+    public static Byte randomByte() {\r\n+        return new Byte((byte) (Math.random() * Byte.MAX_VALUE));\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Boolean for testing.\r\n+     */\r\n+    public static Boolean randomBoolean() {\r\n+        return new Boolean(Math.random() > 0.5 ? true : false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Date for testing.\r\n+     */\r\n+    public static Date randomDate() {\r\n+        long millis = (long) (Math.random() * System.currentTimeMillis());\r\n+\r\n+        // round millis to the nearest 1000: this is because some\r\n+        // databases do not store the milliseconds correctly (e.g., MySQL).\r\n+        // This is a really a bug we should fix. FC #27.\r\n+        millis -= (millis % 1000);\r\n+\r\n+        return new Date(millis);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random String for testing.\r\n+     */\r\n+    public static String randomString() {\r\n+        // default to a small string, in case column sizes are\r\n+        // limited (such as with a string primary key)\r\n+        return randomString(50);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random String for testing.\r\n+     */\r\n+    public static String randomString(int len) {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < (int) (Math.random() * len) + 1; i++)\r\n+            buf.append(randomChar());\r\n+        return buf.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random clob for testing.\r\n+     */\r\n+    public static String randomClob() {\r\n+        StringBuffer sbuf = new StringBuffer();\r\n+        while (sbuf.length() < (5 * 1024)) // at least 5K\r\n+        {\r\n+            sbuf.append(randomString(1024));\r\n+        }\r\n+\r\n+        return sbuf.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random BigInteger for testing.\r\n+     */\r\n+    public static BigInteger randomBigInteger() {\r\n+        // too many of our test databases don't support bigints > MAX_LONG:\r\n+        // I don't like it, but for now, let's only test below MAX_LONG\r\n+        BigInteger lng = new BigInteger(\r\n+                ((long) (Math.random() * Long.MAX_VALUE)) + \"\");\r\n+\r\n+        BigInteger multiplier = new BigInteger(\"1\");\r\n+        // (1 + (int)(Math.random () * 10000)) + \"\");\r\n+        if (Math.random() < 0.5)\r\n+            multiplier = multiplier.multiply(new BigInteger(\"-1\"));\r\n+\r\n+        return lng.multiply(multiplier);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random BigDecimal for testing.\r\n+     */\r\n+    public static BigDecimal randomBigDecimal() {\r\n+        BigInteger start = randomBigInteger();\r\n+        String str = start.toString();\r\n+        // truncate off the last 8 digits: we still get some\r\n+        // overflows with lame databases.\r\n+        for (int i = 0; i < 8; i++)\r\n+            if (str.length() > 2)\r\n+                str = str.substring(0, str.length() - 1);\r\n+        start = new BigInteger(str);\r\n+\r\n+        String val = start + \".\"\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10))\r\n+                + ((int) (Math.random() * 10));\r\n+\r\n+        return new BigDecimal(val);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random blob for testing.\r\n+     */\r\n+    public static byte[] randomBlob() {\r\n+        // up to 100K blob\r\n+        byte [] blob = new byte [(int) (Math.random() * 1024 * 100)];\r\n+        for (int i = 0; i < blob.length; i++)\r\n+            blob[i] = randomByte().byteValue();\r\n+\r\n+        return blob;\r\n+    }\r\n+\r\n+    /**\r\n+     * Invoke setters for pimitives and primitive wrappers on the\r\n+     * specified object.\r\n+     */\r\n+    public static Object randomizeBean(Object bean)\r\n+    throws IntrospectionException, IllegalAccessException,\r\n+        InvocationTargetException, java.beans.IntrospectionException {\r\n+        BeanInfo info = Introspector.getBeanInfo(bean.getClass());\r\n+        PropertyDescriptor[] props = info.getPropertyDescriptors();\r\n+        for (int i = 0; i < props.length; i++) {\r\n+            Method write = props[i].getWriteMethod();\r\n+            if (write == null)\r\n+                continue;\r\n+\r\n+            Class [] params = write.getParameterTypes();\r\n+            if (params == null || params.length != 1)\r\n+                continue;\r\n+\r\n+            Class paramType = params[0];\r\n+            Object arg = null;\r\n+\r\n+            if (paramType == boolean.class || paramType == Boolean.class)\r\n+                arg = randomBoolean();\r\n+            else if (paramType == byte.class || paramType == Byte.class)\r\n+                arg = randomByte();\r\n+            else if (paramType == char.class || paramType == Character.class)\r\n+                arg = randomChar();\r\n+            else if (paramType == short.class || paramType == Short.class)\r\n+                arg = randomShort();\r\n+            else if (paramType == int.class || paramType == Integer.class)\r\n+                arg = randomInt();\r\n+            else if (paramType == long.class || paramType == Long.class)\r\n+                arg = randomLong();\r\n+            else if (paramType == double.class || paramType == Double.class)\r\n+                arg = randomDouble();\r\n+            else if (paramType == float.class || paramType == Float.class)\r\n+                arg = randomFloat();\r\n+            else if (paramType == String.class)\r\n+                arg = randomString();\r\n+            else if (paramType == BigInteger.class)\r\n+                arg = randomBigInteger();\r\n+            else if (paramType == BigDecimal.class)\r\n+                arg = randomBigDecimal();\r\n+            else if (paramType == Date.class)\r\n+                arg = randomDate();\r\n+\r\n+            if (arg != null)\r\n+                write.invoke(bean, new Object []{ arg });\r\n+        }\r\n+\r\n+        return bean;\r\n+    }\r\n+\r\n+    protected void assertSize(int size, Collection c) {\r\n+        assertEquals(size, c.size());\r\n+    }\r\n+\r\n+    protected void assertSize(int size, Query q) {\r\n+        assertEquals(size, q.getResultList().size());\r\n+    }\r\n+\r\n+    /**\r\n+     * Serialize and deserialize the object.\r\n+     *\r\n+     * @param validateEquality make sure the hashCode and equals\r\n+     * methods hold true\r\n+     */\r\n+    public static Object roundtrip(Object orig, boolean validateEquality)\r\n+        throws IOException, ClassNotFoundException {\r\n+        assertNotNull(orig);\r\n+\r\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\r\n+        out.writeObject(orig);\r\n+        ByteArrayInputStream bin = new ByteArrayInputStream(\r\n+            bout.toByteArray());\r\n+        ObjectInputStream in = new ObjectInputStream(bin);\r\n+        Object result = in.readObject();\r\n+\r\n+        if (validateEquality) {\r\n+            assertEquals(orig.hashCode(), result.hashCode());\r\n+            assertEquals(orig, result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return true if the specified input matches the regular expression regex.\r\n+     */\r\n+    public static boolean matches(String regex, String input)\r\n+        throws RESyntaxException {\r\n+        RE re = REUtil.createRE(regex);\r\n+        return re.match(input);\r\n+    }\r\n+\r\n+    public static void assertMatches(String regex, String input) {\r\n+        try {\r\n+            if (!(matches(regex, input)))\r\n+                fail(\"Expected regular expression: <\" + regex + \">\"\r\n+                    + \" did not match: <\" + input + \">\");\r\n+        } catch (RESyntaxException e) {\r\n+            throw new IllegalArgumentException(e.toString());\r\n+        }\r\n+    }\r\n+\r\n+    public static void assertNotMatches(String regex, String input) {\r\n+        try {\r\n+            if (matches(regex, input))\r\n+                fail(\"Regular expression: <\" + regex + \">\"\r\n+                    + \" should not match: <\" + input + \">\");\r\n+        } catch (RESyntaxException e) {\r\n+            throw new IllegalArgumentException(e.toString());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Check the list if strings and return the ones that match\r\n+     * the specified match.\r\n+     */\r\n+    public static List matches(String regex, Collection input)\r\n+        throws RESyntaxException {\r\n+        List matches = new ArrayList();\r\n+        for (Iterator i = input.iterator(); i.hasNext();) {\r\n+            String check = (String) i.next();\r\n+            if (matches(regex, check))\r\n+                matches.add(check);\r\n+        }\r\n+\r\n+        return matches;\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the specified collection of Strings contains at least\r\n+     * one string that matches the specified regular expression.\r\n+     */\r\n+    public static void assertMatches(String regex, Collection input) {\r\n+        try {\r\n+            if (matches(regex, input).size() == 0)\r\n+                fail(\"The specified list of size \" + input.size()\r\n+                    + \" did not contain any strings that match the\"\r\n+                    + \" specified regular expression(\\\"\" + regex + \"\\\")\");\r\n+        } catch (RESyntaxException e) {\r\n+            throw new IllegalArgumentException(e.toString());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the specified collection of Strings does not match\r\n+     * the specified regular expression.\r\n+     */\r\n+    public static void assertNotMatches(String regex, Collection input) {\r\n+        try {\r\n+            List matches;\r\n+\r\n+            if (((matches = matches(regex, input))).size() > 0)\r\n+                fail(\"The specified list of size \" + input.size()\r\n+                    + \" did contain one or more strings that matchs the\"\r\n+                    + \" specified illegal regular expression\"\r\n+                    + \" (\\\"\" + regex + \"\\\").\"\r\n+                    + \" First example of a matching message is: \"\r\n+                    + matches.iterator().next());\r\n+        } catch (RESyntaxException e) {\r\n+            throw new IllegalArgumentException(e.toString());\r\n+        }\r\n+    }\r\n+\r\n+    protected Log getLog() {\r\n+        return getConfiguration().getLog(\"Tests\");\r\n+    }\r\n+\r\n+    ///////////////////\r\n+    // Multi threading\r\n+    ///////////////////\r\n+\r\n+    /**\r\n+     * Re-execute the invoking method a random number of times\r\n+     * in a random number of Threads.\r\n+     */\r\n+    public void mttest() throws ThreadingException {\r\n+        // 6 iterations in 8 threads is a good trade-off between\r\n+        // tests taking way too long and having a decent chance of\r\n+        // identifying MT problems.\r\n+        int iterations = 6;\r\n+        int threads = 8;\r\n+\r\n+        mttest(threads, iterations);\r\n+    }\r\n+\r\n+    /**\r\n+     * Execute the calling method <code>iterations</code>\r\n+     * times in <code>threads</code> Threads.\r\n+     */\r\n+    public void mttest(int threads, int iterations) {\r\n+        mttest(0, threads, iterations);\r\n+    }\r\n+\r\n+    public void mttest(int serialCount, int threads, int iterations)\r\n+        throws ThreadingException {\r\n+        String methodName = callingMethod(\"mttest\");\r\n+        mttest(serialCount, threads, iterations, methodName, new Object [0]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Execute a test method in multiple threads.\r\n+     *\r\n+     * @param threads the number of Threads to run in\r\n+     * @param iterations the number of times the method should\r\n+     * be execute in a single Thread\r\n+     * @param method the name of the method to execute\r\n+     * @param args the arguments to pass to the method\r\n+     * @throws ThreadingException if an errors occur in\r\n+     * any of the Threads. The actual exceptions\r\n+     * will be embedded in the exception. Note that\r\n+     * this means that assert() failures will be\r\n+     * treated as errors rather than warnings.\r\n+     * @author Marc Prud'hommeaux\r\n+     */\r\n+    public void mttest(int threads, int iterations, final String method,\r\n+        final Object [] args) throws ThreadingException {\r\n+        mttest(0, threads, iterations, method, args);\r\n+    }\r\n+\r\n+    public void mttest(int serialCount,\r\n+        int threads, int iterations, final String method, final Object [] args)\r\n+        throws ThreadingException {\r\n+        if (multiThreadExecuting != null && multiThreadExecuting.equals(method))\r\n+        {\r\n+            // we are currently executing in multi-threaded mode:\r\n+            // don't deadlock!\r\n+            return;\r\n+        }\r\n+\r\n+        multiThreadExecuting = method;\r\n+\r\n+        try {\r\n+            Class [] paramClasses = new Class [args.length];\r\n+            for (int i = 0; i < paramClasses.length; i++)\r\n+                paramClasses[i] = args[i].getClass();\r\n+\r\n+            final Method meth;\r\n+\r\n+            try {\r\n+                meth = getClass().getMethod(method, paramClasses);\r\n+            } catch (NoSuchMethodException nsme) {\r\n+                throw new ThreadingException(nsme.toString(), nsme);\r\n+            }\r\n+\r\n+            final Object thiz = this;\r\n+\r\n+            mttest(\"reflection invocation: (\" + method + \")\",\r\n+                serialCount, threads, iterations, new VolatileRunnable() {\r\n+                public void run() throws Exception {\r\n+                    meth.invoke(thiz, args);\r\n+                }\r\n+            });\r\n+        } finally {\r\n+            multiThreadExecuting = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void mttest(String title, final int threads, final int iterations,\r\n+        final VolatileRunnable runner) throws ThreadingException {\r\n+        mttest(title, 0, threads, iterations, runner);\r\n+    }\r\n+\r\n+    /**\r\n+     * Execute a test method in multiple threads.\r\n+     *\r\n+     * @param title a description of the test, for inclusion in the\r\n+     * error message\r\n+     * @param serialCount the number of times to run the method\r\n+     * serially before spawning threads.\r\n+     * @param threads the number of Threads to run in\r\n+     * @param iterations the number of times the method should\r\n+     * @param runner the VolatileRunnable that will execute\r\n+     * the actual test from within the Thread.\r\n+     * @throws ThreadingException if an errors occur in\r\n+     * any of the Threads. The actual exceptions\r\n+     * will be embedded in the exception. Note that\r\n+     * this means that assert() failures will be\r\n+     * treated as errors rather than warnings.\r\n+     * @author Marc Prud'hommeaux be execute in a single Thread\r\n+     * @author Marc Prud'hommeaux\r\n+     */\r\n+    public void mttest(String title, final int serialCount,\r\n+        final int threads, final int iterations, final VolatileRunnable runner)\r\n+        throws ThreadingException {\r\n+        final List exceptions = Collections.synchronizedList(new LinkedList());\r\n+\r\n+        Thread [] runners = new Thread [threads];\r\n+\r\n+        final long startMillis = System.currentTimeMillis() + 1000;\r\n+\r\n+        for (int i = 1; i <= threads; i++) {\r\n+            final int thisThread = i;\r\n+\r\n+            runners[i - 1] =\r\n+                new Thread(title + \" [\" + i + \" of \" + threads + \"]\") {\r\n+                    public void run() {\r\n+                        // do our best to have all threads start at the exact\r\n+                        // same time. This is imperfect, but the closer we\r\n+                        // get to everyone starting at the same time, the\r\n+                        // better chance we have for identifying MT problems.\r\n+                        while (System.currentTimeMillis() < startMillis)\r\n+                            yield();\r\n+\r\n+                        int thisIteration = 1;\r\n+                        try {\r\n+                            for (; thisIteration <= iterations; thisIteration++)\r\n+                            {\r\n+                                // go go go!\r\n+                                runner.run();\r\n+                            }\r\n+                        } catch (Throwable error) {\r\n+                            synchronized (exceptions) {\r\n+                                // embed the exception into something that gives\r\n+                                // us some more information about the threading\r\n+                                // environment\r\n+                                exceptions.add(new ThreadingException(\"thread=\"\r\n+                                    + this.toString()\r\n+                                    + \";threadNum=\" + thisThread\r\n+                                    + \";maxThreads=\" + threads\r\n+                                    + \";iteration=\" + thisIteration\r\n+                                    + \";maxIterations=\" + iterations, error));\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                };\r\n+        }\r\n+\r\n+        // start the serial tests(does not spawn the threads)\r\n+        for (int i = 0; i < serialCount; i++) {\r\n+            runners[0].run();\r\n+        }\r\n+\r\n+        // start the multithreaded\r\n+        for (int i = 0; i < threads; i++) {\r\n+            runners[i].start();\r\n+        }\r\n+\r\n+        // wait for them all to complete\r\n+        for (int i = 0; i < threads; i++) {\r\n+            try {\r\n+                runners[i].join();\r\n+            } catch (InterruptedException e) {\r\n+            }\r\n+        }\r\n+\r\n+        if (exceptions.size() == 0)\r\n+            return; // sweeeeeeeet: no errors\r\n+\r\n+        // embed all the exceptions that were throws into a\r\n+        // ThreadingException\r\n+        Throwable [] errors = (Throwable []) exceptions.toArray(\r\n+            new Throwable [0]);\r\n+        throw new ThreadingException(\"The \"\r\n+            + errors.length + \" embedded errors \"\r\n+            + \"occured in the execution of \" + iterations + \" iterations \"\r\n+            + \"of \" + threads + \" threads: [\" + title + \"]\", errors);\r\n+    }\r\n+\r\n+    /**\r\n+     * Check to see if we are in the top-level execution stack.\r\n+     */\r\n+    public boolean isRootThread() {\r\n+        return multiThreadExecuting == null;\r\n+    }\r\n+\r\n+    /**\r\n+     * A Runnable that can throw an Exception: used to test cases.\r\n+     */\r\n+    public static interface VolatileRunnable {\r\n+\r\n+        public void run() throws Exception;\r\n+    }\r\n+\r\n+    /**\r\n+     * Exception for errors caught during threading tests.\r\n+     */\r\n+    public class ThreadingException extends RuntimeException {\r\n+\r\n+        private final Throwable[] _nested;\r\n+\r\n+        public ThreadingException(String msg, Throwable nested) {\r\n+            super(msg);\r\n+            if (nested == null)\r\n+                _nested = new Throwable[0];\r\n+            else\r\n+                _nested = new Throwable[]{ nested };\r\n+        }\r\n+\r\n+        public ThreadingException(String msg, Throwable[] nested) {\r\n+            super(msg);\r\n+            if (nested == null)\r\n+                _nested = new Throwable[0];\r\n+            else\r\n+                _nested = nested;\r\n+        }\r\n+\r\n+        public void printStackTrace() {\r\n+            printStackTrace(System.out);\r\n+        }\r\n+\r\n+        public void printStackTrace(PrintStream out) {\r\n+            printStackTrace(new PrintWriter(out));\r\n+        }\r\n+\r\n+        public void printStackTrace(PrintWriter out) {\r\n+            super.printStackTrace(out);\r\n+            for (int i = 0; i < _nested.length; i++) {\r\n+                out.print(\"Nested Throwable #\" + (i + 1) + \": \");\r\n+                _nested[i].printStackTrace(out);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the last method name that called this one by\r\n+     * parsing the current stack trace.\r\n+     *\r\n+     * @param exclude a method name to skip\r\n+     * @throws IllegalStateException If the calling method could not be\r\n+     * identified.\r\n+     * @author Marc Prud'hommeaux\r\n+     */\r\n+    public String callingMethod(String exclude) {\r\n+        // determine the currently executing method by\r\n+        // looking at the stack track. Hackish, but convenient.\r\n+        StringWriter sw = new StringWriter();\r\n+        new Exception().printStackTrace(new PrintWriter(sw));\r\n+        for (StringTokenizer stackTrace = new StringTokenizer(sw.toString(),\r\n+            System.getProperty(\"line.separator\"));\r\n+            stackTrace.hasMoreTokens();) {\r\n+            String line = stackTrace.nextToken().trim();\r\n+\r\n+            // not a stack trace element\r\n+            if (!(line.startsWith(\"at \")))\r\n+                continue;\r\n+\r\n+            String fullMethodName = line.substring(0, line.indexOf(\"(\"));\r\n+\r\n+            String shortMethodName = fullMethodName.substring(\r\n+                fullMethodName.lastIndexOf(\".\") + 1);\r\n+\r\n+            // skip our own methods!\r\n+            if (shortMethodName.equals(\"callingMethod\"))\r\n+                continue;\r\n+            if (exclude != null && shortMethodName.equals(exclude))\r\n+                continue;\r\n+\r\n+            return shortMethodName;\r\n+        }\r\n+\r\n+        throw new IllegalStateException(\"Could not identify calling \"\r\n+            + \"method in stack trace\");\r\n+    }\r\n+\r\n+    //////////\r\n+    // Timing\r\n+    //////////\r\n+\r\n+    /**\r\n+     * Sleep the current Thread for a random amount of time from 0-1000 ms.\r\n+     */\r\n+    public void sleepRandom() {\r\n+        sleepRandom(1000);\r\n+    }\r\n+\r\n+    /**\r\n+     * Sleep the current Thread for a random amount of time from\r\n+     * 0-<code>max</code> ms.\r\n+     */\r\n+    public void sleepRandom(int max) {\r\n+        try {\r\n+            Thread.currentThread().sleep((long) (Math.random() * max));\r\n+        } catch (InterruptedException ex) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Re-run this method in the current thread, timing out\r\n+     * after the specified number of seconds.\r\n+     * Usage:\r\n+     * <pre> public void timeOutOperation() { if (timeout(5 * 1000)) return;\r\n+     *  Thread.currentThread().sleep(10 * 1000); }\r\n+     * </pre>\r\n+     * <p/>\r\n+     * <p/>\r\n+     * <strong>Warning</strong> this method should be used sparingly,\r\n+     * and only when you expect that a timeout will <strong>not</strong>\r\n+     * occur. It utilized the deprecated {@link Thread#stop()} and\r\n+     * {@link Thread#interrupt} methods, which can leave monitors in an\r\n+     * invalid state. It is only used because it provides more\r\n+     * meaningful information than just seeing that the entire autobuild\r\n+     * timed out.\r\n+     *\r\n+     * @param millis the number of milliseconds we should wait.\r\n+     * @return true if we are are in the thread that requested the\r\n+     *         timeout, false if we are in the timeout thread itself.\r\n+     */\r\n+    public boolean timeout(long millis) throws Throwable {\r\n+        String methodName = callingMethod(\"timeout\");\r\n+        return timeout(millis, methodName);\r\n+    }\r\n+\r\n+    /**\r\n+     * @see #timeout(long)\r\n+     */\r\n+    public boolean timeout(long millis, String methodName) throws Throwable {\r\n+        // we are in the timing out-thread: do nothing so the\r\n+        // actual test method can run\r\n+        if (inTimeoutThread)\r\n+            return false;\r\n+\r\n+        inTimeoutThread = true;\r\n+        long endTime = System.currentTimeMillis() + millis;\r\n+\r\n+        try {\r\n+            final Method method = getClass().\r\n+                getMethod(methodName, (Class[]) null);\r\n+            final Object thz = this;\r\n+\r\n+            // spawn thread\r\n+            TimeOutThread tot = new TimeOutThread(\"TimeOutThread [\"\r\n+                + methodName + \"] (\" + millis + \"ms)\") {\r\n+                public void run() {\r\n+                    try {\r\n+                        method.invoke(thz, (Object[]) null);\r\n+                    } catch (Throwable t) {\r\n+                        throwable = t;\r\n+                    } finally {\r\n+                        completed = true;\r\n+                    }\r\n+                }\r\n+            };\r\n+\r\n+            tot.start();\r\n+\r\n+            // wait for the completion or a timeout to occur\r\n+            tot.join(millis);\r\n+\r\n+            // have we timed out? Kill the thread and throw an exception\r\n+            if (System.currentTimeMillis() >= endTime) {\r\n+                // if we are waiting on a monitor, this will give\r\n+                // us a useful stack trace.\r\n+                try {\r\n+                    tot.interrupt();\r\n+                } catch (Throwable e) {\r\n+                }\r\n+                Thread.currentThread().sleep(500);\r\n+\r\n+                // try to kill the thread\r\n+                try {\r\n+                    tot.stop();\r\n+                } catch (Throwable e) {\r\n+                }\r\n+                Thread.currentThread().sleep(500);\r\n+\r\n+                throw new OperationTimedOutException(\"Execution of \\\"\"\r\n+                    + methodName + \"\\\" timed out after \"\r\n+                    + millis + \" milliseconds\", tot.throwable);\r\n+            }\r\n+\r\n+            // throw any exceptions that may have occured\r\n+            if (tot.throwable != null)\r\n+                throw tot.throwable;\r\n+\r\n+            // I guess everything was OK\r\n+            return true;\r\n+        } finally {\r\n+            inTimeoutThread = false;\r\n+        }\r\n+    }\r\n+\r\n+    private static class TimeOutThread extends Thread {\r\n+\r\n+        public Throwable throwable = null;\r\n+        public boolean completed = false;\r\n+\r\n+        public TimeOutThread(String name) {\r\n+            super(name);\r\n+            setDaemon(true);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Indicates that a timeout occured.\r\n+     */\r\n+    public static class OperationTimedOutException extends RuntimeException {\r\n+\r\n+        private final Throwable _err;\r\n+\r\n+        public OperationTimedOutException(String msg, Throwable throwable) {\r\n+            super(msg);\r\n+            _err = throwable;\r\n+        }\r\n+\r\n+        public void printStackTrace() {\r\n+            printStackTrace(System.out);\r\n+        }\r\n+\r\n+        public void printStackTrace(PrintStream out) {\r\n+            printStackTrace(new PrintWriter(out));\r\n+        }\r\n+\r\n+        public void printStackTrace(PrintWriter out) {\r\n+            super.printStackTrace(out);\r\n+            if (_err != null) {\r\n+                out.print(\"Nested Throwable: \");\r\n+                _err.printStackTrace(out);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    ///////////////\r\n+    // Collections\r\n+    ///////////////\r\n+\r\n+    /**\r\n+     * Validate that the specified {@link Collection} fulfills the\r\n+     * Collection contract as specified by the Collections API.\r\n+     * <p/>\r\n+     * <strong>Note</strong>: does not validate mutable operations\r\n+     */\r\n+    public static void validateCollection(Collection collection) {\r\n+        int size = collection.size();\r\n+        int iterated = 0;\r\n+        // ensure we can walk along the iterator\r\n+        for (Iterator i = collection.iterator(); i.hasNext();) {\r\n+            iterated++;\r\n+            i.next();\r\n+        }\r\n+\r\n+        // ensure the number of values iterated is the same as the list size\r\n+        assertEquals(size, iterated);\r\n+\r\n+        // also validate the list\r\n+        if (collection instanceof List) {\r\n+            List ll = new ArrayList();\r\n+            for (int i = 0; i < 100; i++)\r\n+                ll.add(new Integer(i));\r\n+            validateList((List) ll);\r\n+            validateList((List) collection);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Validate that the specified {@link List} fulfills the\r\n+     * List contract as specified by the Collections API.\r\n+     * <p/>\r\n+     * <strong>Note</strong>: does not validate mutable operations\r\n+     */\r\n+    public static void validateList(List list) {\r\n+        Object [] coreValues = list.toArray();\r\n+        Object [] values1 = new Object [list.size()];\r\n+        Object [] values2 = new Object [list.size()];\r\n+        Object [] values3 = new Object [list.size()];\r\n+        Object [] values4 = new Object [list.size()];\r\n+\r\n+        // fill sequential index access list\r\n+        for (int i = 0; i < list.size(); i++)\r\n+            values1[i] = list.get(i);\r\n+\r\n+        // fill sequential list\r\n+        int index = 0;\r\n+        ListIterator iter;\r\n+        for (iter = list.listIterator(0); iter.hasNext();) {\r\n+            assertEquals(index, iter.nextIndex());\r\n+            assertEquals(index, iter.previousIndex() + 1);\r\n+            values2[index] = iter.next();\r\n+            assertTrue(list.contains(values2[index]));\r\n+            index++;\r\n+        }\r\n+\r\n+        // ensure NoSuchElementException is thrown as appropriate\r\n+        try {\r\n+            iter.next();\r\n+            fail(\"next() should have resulted in a NoSuchElementException\");\r\n+        } catch (NoSuchElementException e) {\r\n+        } // as expected\r\n+\r\n+        // fill reverse sequential list\r\n+        int back = 0;\r\n+        for (iter = list.listIterator(list.size()); iter.hasPrevious();) {\r\n+            assertEquals(index, iter.previousIndex() + 1);\r\n+            assertEquals(index, iter.nextIndex());\r\n+            values3[--index] = iter.previous();\r\n+            back++;\r\n+        }\r\n+        assertEquals(list.size(), back);\r\n+\r\n+        // ensure NoSuchElementException is thrown as appropriate\r\n+        try {\r\n+            iter.previous();\r\n+            fail(\"previous() should have resulted in a \"\r\n+                + \"NoSuchElementException\");\r\n+        } catch (NoSuchElementException e) {\r\n+        } // as expected\r\n+\r\n+        // fill random access list\r\n+        List indices = new LinkedList();\r\n+        for (int i = 0; i < list.size(); i++)\r\n+            indices.add(new Integer(i));\r\n+\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            int rand = (int) (Math.random() * indices.size());\r\n+            Integer randIndex = (Integer) indices.remove(rand);\r\n+            values4[randIndex.intValue()] = list.get(randIndex.intValue());\r\n+        }\r\n+\r\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values1));\r\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values1));\r\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values2));\r\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values2));\r\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values4));\r\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values4));\r\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values3));\r\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values3));\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the given List contain the exact same\r\n+     * elements. This is different than the normal List contract, which\r\n+     * states that list1.equals(list2) if each element e1.equals(e2).\r\n+     * This method asserts that e1 == n2.\r\n+     */\r\n+    public static void assertIdentical(List c1, List c2) {\r\n+        assertEquals(c1.size(), c2.size());\r\n+        for (Iterator i1 = c1.iterator(), i2 = c2.iterator();\r\n+            i1.hasNext() && i2.hasNext();)\r\n+            assertTrue(i1.next() == i2.next());\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the collection parameter is already ordered\r\n+     * according to the specified comparator.\r\n+     */\r\n+    public void assertOrdered(Collection c, Comparator comp) {\r\n+        List l1 = new LinkedList(c);\r\n+        List l2 = new LinkedList(c);\r\n+        assertEquals(l1, l2);\r\n+        Collections.sort(l2, comp);\r\n+        assertEquals(l1, l2);\r\n+        Collections.sort(l1, comp);\r\n+        assertEquals(l1, l2);\r\n+    }\r\n+}\r"},{"sha":"3e6cbc0e182b45441adc18decf28d76aa624ee53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/BufferedLogFactory.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/BufferedLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/BufferedLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/BufferedLogFactory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.utils;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.lib.log.*;\r\n+\r\n+/**\r\n+ * Simple default log implementation to test whether certain messages\r\n+ * are logged or not.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public class BufferedLogFactory\r\n+    extends LogFactoryImpl {\r\n+\r\n+    private int bufferSize = 10000;\r\n+    private List buffer = new ArrayList();\r\n+    private List disallowedMessages = new LinkedList();\r\n+\r\n+    protected LogImpl newLogImpl() {\r\n+        return new BufferedLog();\r\n+    }\r\n+\r\n+    public List getBuffer() {\r\n+        return Collections.unmodifiableList(buffer);\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        buffer.clear();\r\n+    }\r\n+\r\n+    public void clearDisallowedMessages() {\r\n+        disallowedMessages.clear();\r\n+    }\r\n+\r\n+    public void addDisallowedMessage(String regexp) {\r\n+        disallowedMessages.add(regexp);\r\n+    }\r\n+\r\n+    public boolean removeDisallowedMessage(String regexp) {\r\n+        return disallowedMessages.remove(regexp);\r\n+    }\r\n+\r\n+    public List getDisallowedMessages() {\r\n+        return Collections.unmodifiableList(disallowedMessages);\r\n+    }\r\n+\r\n+    public void assertLogMessage(String regex) {\r\n+    \tAbstractTestCase.assertMatches(regex, getBuffer());\r\n+    }\r\n+\r\n+    public void assertNoLogMessage(String regex) {\r\n+    \tAbstractTestCase.assertNotMatches(regex, getBuffer());\r\n+    }\r\n+\r\n+    public void setBufferSize(int bufferSize) {\r\n+        this.bufferSize = bufferSize;\r\n+    }\r\n+\r\n+    public int getBufferSize() {\r\n+        return this.bufferSize;\r\n+    }\r\n+\r\n+    public class BufferedLog\r\n+        extends LogFactoryImpl.LogImpl {\r\n+\r\n+        protected void log(short level, String message, Throwable t) {\r\n+            super.log(level, message, t);\r\n+            buffer.add(message);\r\n+\r\n+            // trim to max buffer length\r\n+            while (buffer.size() > getBufferSize())\r\n+                buffer.iterator().remove();\r\n+\r\n+            if (disallowedMessages.size() > 0) {\r\n+                for (Iterator i = disallowedMessages.iterator(); i.hasNext();) {\r\n+                    String regex = (String) i.next();\r\n+                    AbstractTestCase.assertNotMatches(regex, message);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"f78ca7579198c90fca9aca8270c5b6465aaf20c8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/Bug.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/Bug.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/Bug.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/Bug.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.common.utils;\r\n+\r\n+import java.io.*;\r\n+\r\n+import junit.framework.*;\r\n+\r\n+/**\r\n+ * Extension of an assertion error that indicates to the outside\r\n+ * build process (if any) that an assertion failed due to a known\r\n+ * bug.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ */\r\n+public class Bug\r\n+    extends AssertionFailedError {\r\n+\r\n+    public static final String BUG_TOKEN = \"SOLARBUG\";\r\n+    public static final String BUG_DELIMITER = \"|\";\r\n+\r\n+    private Throwable error = null;\r\n+    private int trackingId;\r\n+\r\n+    // the the static factory method, please\r\n+    private Bug(int trackingId, Throwable t, String message) {\r\n+        super(BUG_DELIMITER + BUG_TOKEN + BUG_DELIMITER\r\n+            + trackingId + BUG_DELIMITER + message);\r\n+        this.trackingId = trackingId;\r\n+        error = t;\r\n+\r\n+        printStackTrace(System.err);\r\n+    }\r\n+\r\n+    public static Bug bug(int trackingId, Throwable t, String message) {\r\n+        return new Bug(trackingId, t, message);\r\n+    }\r\n+\r\n+    public void printStackTrace(PrintWriter pw) {\r\n+        super.printStackTrace(pw);\r\n+        if (error != null) {\r\n+            pw.println(\"Embedded error message:\");\r\n+            error.printStackTrace(pw);\r\n+        }\r\n+    }\r\n+\r\n+    public void printStackTrace(PrintStream ps) {\r\n+        super.printStackTrace(ps);\r\n+        if (error != null) {\r\n+            ps.println(\"Embedded error message:\");\r\n+            error.printStackTrace(ps);\r\n+        }\r\n+    }\r\n+\r\n+    public String getMessage() {\r\n+        return super.getMessage() + \" [reported bug #\" + trackingId + \"]\";\r\n+    }\r\n+\r\n+    public int getTrackingId() {\r\n+        return trackingId;\r\n+    }\r\n+}\r\n+\r\n+\r"},{"sha":"e159e41af59e379bf6cc899ab11840d822816727","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestKodoConfiguration.java","status":"added","additions":230,"deletions":0,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestKodoConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestKodoConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestKodoConfiguration.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,230 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.conf;\r\n+\r\n+import java.beans.PropertyDescriptor;\r\n+import java.lang.reflect.Method;\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Properties;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.common.utils.BufferedLogFactory;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.lib.conf.PluginValue;\r\n+import org.apache.openjpa.lib.conf.Value;\r\n+\r\n+/**\r\n+ * <p>Tests the JDO configuration classes.</p>\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ */\r\n+public class TestKodoConfiguration\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestKodoConfiguration(String test) {\r\n+        super(test, \"confcactusapp\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Test that you can set the connection factory and other properties as\r\n+     * objects.\r\n+     */\r\n+    public void testSetObjects() {\r\n+        Map map = new HashMap();\r\n+        Object cfactory = new Object();\r\n+        Object cfactory2 = new Object();\r\n+        map.put(\"openjpa.ConnectionFactory\", cfactory);\r\n+        map.put(\"openjpa.ConnectionFactory2\", cfactory2);\r\n+        map.put(\"openjpa.Optimistic\", Boolean.FALSE);\r\n+        map.put(\"openjpa.LockTimeout\", new Integer(503));\r\n+\r\n+        // use new conf so no unexpected restrictions on type of connection\r\n+        // factory\r\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl(true, false);\r\n+        conf.fromProperties(map);\r\n+        assertEquals(cfactory, conf.getConnectionFactory());\r\n+        assertEquals(cfactory2, conf.getConnectionFactory2());\r\n+        assertEquals(false, conf.getOptimistic());\r\n+        assertEquals(503, conf.getLockTimeout());\r\n+\r\n+        OpenJPAConfiguration conf2 = new OpenJPAConfigurationImpl(true, false);\r\n+        conf2.fromProperties(map);\r\n+        assertEquals(conf, conf2);\r\n+\r\n+        Map p = conf.toProperties(false);\r\n+        assertTrue(!p.containsKey(\"openjpa.ConnectionFactory\"));\r\n+        assertTrue(!p.containsKey(\"openjpa.ConnectionFactory2\"));\r\n+        assertEquals(\"false\", p.get(\"openjpa.Optimistic\"));\r\n+        assertEquals(\"503\", p.get(\"openjpa.LockTimeout\"));\r\n+        assertEquals(p, conf2.toProperties(false));\r\n+\r\n+        map.put(\"openjpa.LockTimeout\", new Integer(504));\r\n+        OpenJPAConfiguration conf3 = new OpenJPAConfigurationImpl(true, false);\r\n+        conf3.fromProperties(map);\r\n+        assertNotEquals(conf, conf3);\r\n+    }\r\n+\r\n+    public void testClassAliases()\r\n+        throws Exception {\r\n+        OpenJPAConfiguration conf = getConfiguration();\r\n+        if (!(conf instanceof OpenJPAConfigurationImpl))\r\n+            return;\r\n+\r\n+        Value[] values = ((OpenJPAConfigurationImpl) conf).getValues();\r\n+        String[] aliases;\r\n+        String clsName;\r\n+        List failures = new ArrayList();\r\n+        for (int i = 0; i < values.length; i++) {\r\n+            if (!(values[i] instanceof PluginValue))\r\n+                continue;\r\n+\r\n+            aliases = values[i].getAliases();\r\n+            for (int j = 0; j < aliases.length; j += 2) {\r\n+                try {\r\n+                    clsName = Configurations.getClassName(aliases[j + 1]);\r\n+                    if (clsName != null)\r\n+                        Class.forName(clsName);\r\n+                } catch (ClassNotFoundException cnfe) {\r\n+                    failures.add(\"Key: \" + aliases[j] + \" for property \"\r\n+                        + values[i].getProperty() + \" does not list a valid \"\r\n+                        + \"class: \" + aliases[j + 1]);\r\n+                } catch (UnsupportedClassVersionError ucve) {\r\n+                    //### JDK 5 plugin; ignore\r\n+                }\r\n+            }\r\n+        }\r\n+        if (failures.size() != 0)\r\n+            fail(failures.toString());\r\n+    }\r\n+\r\n+    public void testBeanAccessors()\r\n+        throws Exception {\r\n+        OpenJPAConfiguration conf = getConfiguration();\r\n+        OpenJPAConfigurationImpl simp = (OpenJPAConfigurationImpl) conf.clone();\r\n+\r\n+        Value[] values = simp.getValues();\r\n+        PropertyDescriptor[] pds = simp.getPropertyDescriptors();\r\n+        List failures = new ArrayList();\r\n+        for (int i = 0; i < values.length; i++) {\r\n+            try {\r\n+                assertNotNull(pds[i].getShortDescription());\r\n+                assertNotNull(pds[i].getDisplayName());\r\n+\r\n+                Method setter = pds[i].getWriteMethod();\r\n+                Method getter = pds[i].getReadMethod();\r\n+                assertNotNull(setter);\r\n+                assertNotNull(getter);\r\n+\r\n+                assertNotNull(\"Missing attribute (\"\r\n+                    + Configuration.ATTRIBUTE_TYPE\r\n+                    + \") for property \" + pds[i].getName(),\r\n+                    pds[i].getValue(Configuration.ATTRIBUTE_TYPE));\r\n+\r\n+                assertNotNull(\"Missing attribute (\"\r\n+                    + Configuration.ATTRIBUTE_CATEGORY\r\n+                    + \") for property \" + pds[i].getName(),\r\n+                    pds[i].getValue(Configuration.ATTRIBUTE_CATEGORY));\r\n+\r\n+                assertNotNull(\"Missing attribute (\"\r\n+                    + Configuration.ATTRIBUTE_ORDER\r\n+                    + \") for property \" + pds[i].getName(),\r\n+                    pds[i].getValue(Configuration.ATTRIBUTE_ORDER));\r\n+\r\n+                pds[i].getReadMethod().invoke(simp, (Object[]) null);\r\n+\r\n+            } catch (Exception e) {\r\n+                failures.add(pds[i].getName());\r\n+            }\r\n+        }\r\n+        if (failures.size() != 0)\r\n+            fail(\"not all properties had valid comments / setters / getters.\"\r\n+                + \" failed props: \" + failures);\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that invalid plug-in values throw the appropriate exception\r\n+     * type.\r\n+     */\r\n+    public void testInvalidPlugins() {\r\n+        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\r\n+        config.setLog(\"log3j\");\r\n+        try {\r\n+            config.getLogFactory().getLog(\"Foo\");\r\n+            fail(\"getting the Foo log should have failed\");\r\n+        } catch (RuntimeException re) {\r\n+            // as expected ... make sure the exception suggests the\r\n+            // name \"log4j\" in the message\r\n+            assertTrue(-1 != re.getMessage().indexOf(\"log4j\"));\r\n+        }\r\n+    }\r\n+\r\n+    public void testInvalidConfigurationWarnings() {\r\n+        Properties props = new Properties();\r\n+        props.setProperty(\"openjpa.MaxxFetchDepth\", \"1\");\r\n+\r\n+        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\r\n+        // track the messages\r\n+        BufferedLogFactory log = new BufferedLogFactory();\r\n+        config.setLogFactory(log);\r\n+\r\n+        config.fromProperties(props);\r\n+\r\n+        // make sure we got a warning that contains the string with the\r\n+        // bad property name and a hint for the valid property name.\r\n+        log.assertLogMessage(\"*\\\"openjpa.MaxxFetchDepth\\\"*\");\r\n+        log.assertLogMessage(\"*\\\"openjpa.MaxFetchDepth\\\"*\");\r\n+\r\n+        log.clear();\r\n+\r\n+        // now make sure we do *not* try to validate sub-configurations (such\r\n+        // as kodo.jdbc.Foo).\r\n+        props.clear();\r\n+        props.setProperty(\"openjpa.jdbc.Foo\", \"XXX\");\r\n+        props.setProperty(\"oponjpa\", \"XXX\");\r\n+        config.fromProperties(props);\r\n+        log.assertNoLogMessage(\"*\\\"openjpa.jdbc.Foo\\\"*\");\r\n+        log.assertNoLogMessage(\"*\\\"oponjpa\\\"*\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that invalid fixed-list values throw the appropriate exception\r\n+     * type.\r\n+     */\r\n+    public void testInvalidNonPluginValues() {\r\n+        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\r\n+        try {\r\n+            config.setConnectionFactoryMode(\"aoeu\");\r\n+            fail(\"setting the ConnectionFactoryMode to aoeu should fail\");\r\n+        } catch (RuntimeException re) {\r\n+            re.printStackTrace();\r\n+            // as expected ... make sure the exception suggests the\r\n+            // valid names in the message.\r\n+            assertTrue(-1 != re.getMessage().indexOf(\"managed\"));\r\n+            assertTrue(-1 != re.getMessage().indexOf(\"local\"));\r\n+            assertTrue(-1 != re.getMessage().indexOf(\"true\"));\r\n+            assertTrue(-1 != re.getMessage().indexOf(\"false\"));\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"e60b35d07e8b14483c8d3f97624fd428742d408e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java","status":"added","additions":178,"deletions":0,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,178 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachA;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachB;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachC;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachD;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachE;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/**\r\n+ * Tests load on the cache. To run:\r\n+ * <p/>\r\n+ * java -Dkodo.properties=hsql.properties -Dcachetest.threads=30\r\n+ * -Dcachetest.iterations=1000 kodo.datacache.CacheLoadTest\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public class CacheLoadTest\r\n+    extends AbstractTestCase {\r\n+\r\n+    private EntityManagerFactory emf;\r\n+    protected int threadCount =\r\n+        Integer.getInteger(\"cachetest.threads\", 30).intValue();\r\n+    protected int interationCount =\r\n+        Integer.getInteger(\"cachetest.iterations\", 1000).intValue();\r\n+\r\n+    public void setUp() {\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.QueryCache\", \"true\");\r\n+        emf = getEmf(propsMap);\r\n+    }\r\n+\r\n+    public void testCacheLoad()\r\n+        throws Exception {\r\n+        mttest(Integer.getInteger(\"cachetest.threads\", 30).intValue(),\r\n+            Integer.getInteger(\"cachetest.iterations\", 1000).intValue());\r\n+\r\n+        switch ((int) (Math.random() * 4)) {\r\n+            case 0:\r\n+                insert();\r\n+                break;\r\n+            case 1:\r\n+                query();\r\n+                break;\r\n+            case 2:\r\n+                delete();\r\n+                break;\r\n+            case 3:\r\n+                read();\r\n+                break;\r\n+        }\r\n+    }\r\n+\r\n+    private int rnd(int num) {\r\n+        return randomInt().intValue() % num;\r\n+    }\r\n+\r\n+    private void insert()\r\n+        throws Exception {\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        startTx(em);\r\n+\r\n+        for (int i = 0; i < (rnd(100)); i++) {\r\n+            em.persist(randomizeBean(rndclass().newInstance()));\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private void query() {\r\n+\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) emf.createEntityManager();\r\n+\r\n+        String[] filters = new String[]{\r\n+            \"select from \" + AttachA.class.getName() + \" where aint > 0\",\r\n+            \"select from \" + AttachA.class.getName() + \" where aint < 0\",\r\n+            \"select from \" + AttachB.class.getName() + \" where aint > 0\",\r\n+            \"select from \" + AttachB.class.getName() + \" where aint < 0\",\r\n+            \"select from \" + AttachC.class.getName() + \" where aint > 0\",\r\n+            \"select from \" + AttachC.class.getName() + \" where aint < 0\",\r\n+        };\r\n+\r\n+        for (int i = 0; i < rnd(50); i++) {\r\n+            try {\r\n+                new ArrayList((Collection) em\r\n+                    .createQuery(\"org.apache.openjpa.kernel.jpql.JPQL\",\r\n+                        filters[randomInt().intValue() % filters.length]).\r\n+                    getResultList());\r\n+            } catch (IllegalStateException e) {\r\n+                e.printStackTrace();\r\n+            }\r\n+        }\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private void delete() {\r\n+\r\n+        try {\r\n+            OpenJPAEntityManager em =\r\n+                (OpenJPAEntityManager) emf.createEntityManager();\r\n+            startTx(em);\r\n+\r\n+            for (Iterator i = em.createExtent(rndclass(), Math.random() > 0.5f).\r\n+                iterator(); i.hasNext();) {\r\n+                Object o = i.next();\r\n+                if (Math.random() > 0.6f)\r\n+                    em.remove(o);\r\n+            }\r\n+\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        } catch (IllegalStateException e) {\r\n+            e.printStackTrace();\r\n+        } catch (Exception e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+    }\r\n+\r\n+    private void read() {\r\n+\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) emf.createEntityManager();\r\n+\r\n+        for (Iterator i = em.createExtent(rndclass(), Math.random() > 0.5f).\r\n+            iterator(); i.hasNext();) {\r\n+            Object o = i.next();\r\n+        }\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private Class rndclass() {\r\n+        Class[] c = new Class[]{\r\n+            AttachA.class,\r\n+            AttachB.class,\r\n+            AttachC.class,\r\n+            AttachD.class,\r\n+            AttachE.class,\r\n+        };\r\n+\r\n+        return c[(int) (Math.random() * c.length)];\r\n+    }\r\n+}\r\n+\r"},{"sha":"2558974e54826c46edef481fd595192006678d9c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","status":"added","additions":1591,"deletions":0,"changes":1591,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,1591 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Locale;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.AppIdCacheObject;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild2;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectBChild1;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectC;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectD;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectF;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectG;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectH;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectInterface;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import junit.framework.AssertionFailedError;\r\n+import org.apache.openjpa.datacache.ConcurrentDataCache;\r\n+import org.apache.openjpa.datacache.DataCache;\r\n+import org.apache.openjpa.datacache.DelegatingDataCache;\r\n+import org.apache.openjpa.datacache.QueryCache;\r\n+import org.apache.openjpa.datacache.TypesChangedEvent;\r\n+import org.apache.openjpa.datacache.DataCacheManager;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.PCData;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.util.CacheMap;\r\n+import org.apache.openjpa.util.Id;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n+import org.apache.openjpa.util.OpenJPAException;\r\n+import org.apache.openjpa.util.ProxyDate;\r\n+\r\n+/**\r\n+ * ### should add 1..1 relation test ### app id compound key test\r\n+ */\r\n+public abstract class CacheTest extends AbstractTestCase {\r\n+\r\n+    private static String ORIG_NAME = \"origName\";\r\n+\r\n+    private static String NEW_NAME = \"newName\";\r\n+\r\n+    private static int ORIG_AGE = 30;\r\n+\r\n+    private static String ORIG_PARENT_NAME = \"origParentName\";\r\n+\r\n+    private static int ORIG_PARENT_AGE = 31;\r\n+\r\n+    private OpenJPAEntityManagerFactory timeoutFactory = null;\r\n+\r\n+    private OpenJPAEntityManagerFactory factory = null;\r\n+\r\n+    private OpenJPAEntityManagerFactory factory2 = null;\r\n+\r\n+    private MetaDataRepository repos;\r\n+\r\n+    private Object oid;\r\n+\r\n+    private Object parentOid;\r\n+\r\n+    private Object oidwithclass;\r\n+\r\n+    private OpenJPAEntityManager em;\r\n+\r\n+    private CacheObjectA a;\r\n+\r\n+    public CacheTest(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    public void clear() throws Exception {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            Class[] toDelete = new Class[]{ CacheObjectA.class,\r\n+                CacheObjectB.class, CacheObjectC.class, CacheObjectD.class,\r\n+                CacheObjectE.class, CacheObjectJ.class,\r\n+                AppIdCacheObject.class, };\r\n+            for (int i = 0; i < toDelete.length; i++) {\r\n+                startTx(em);\r\n+                Extent e = em.createExtent(toDelete[i], true);\r\n+                Iterator it = e.iterator();\r\n+                while (it.hasNext()) {\r\n+                    em.remove(it.next());\r\n+                }\r\n+                endTx(em);\r\n+            }\r\n+        }\r\n+        catch (OpenJPAException jpae) {\r\n+            Throwable[] ts = jpae.getNestedThrowables();\r\n+            for (int i = 0; ts != null && i < ts.length; i++) {\r\n+                ts[i].printStackTrace();\r\n+            }\r\n+//\t\t\tjpae.printStackTrace();\r\n+\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a string array of extra configuration options for the specified\r\n+     * cache.\r\n+     */\r\n+    protected abstract String[] getConfs();\r\n+\r\n+    /**\r\n+     * Return a string array of extra configuration options for a second cache.\r\n+     */\r\n+    protected abstract String[] getConfs2();\r\n+\r\n+    /**\r\n+     * Return true if this cache is a coherent one (one where changes in one\r\n+     * cache are immediately visible elsewhere); otherwise returns false. In the\r\n+     * context of this test class, coherence is a single-JVM thing only.\r\n+     */\r\n+    protected boolean isCacheCoherent() {\r\n+        return false;\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+\r\n+        String[] confs = getConfs();\r\n+        for (int i = 0; i < confs.length; i = i + 2) {\r\n+            if (\"openjpa.DataCache\".equals(confs[i]))\r\n+                confs[i + 1] +=\r\n+                    \", true(Name=not-the-default-cache, CacheSize=10)\";\r\n+        }\r\n+\r\n+        String[] confs2 = getConfs2();\r\n+        for (int i = 0; i < confs2.length; i = i + 2) {\r\n+            if (\"openjpa.DataCache\".equals(confs2[i]))\r\n+                confs2[i + 1] +=\r\n+                    \", true(Name=not-the-default-cache, CacheSize=10)\";\r\n+        }\r\n+\r\n+        Map propsMap1 = new HashMap();\r\n+        for (int i = 0; i < confs.length; i += 2) {\r\n+            propsMap1.put(confs[i], confs[i + 1]);\r\n+        }\r\n+        Map propsMap2 = new HashMap();\r\n+        for (int i = 0; i < confs2.length; i += 2) {\r\n+            propsMap2.put(confs2[i], confs2[i + 1]);\r\n+        }\r\n+\r\n+        factory = (OpenJPAEntityManagerFactory) getEmf(propsMap1);\r\n+        factory2 = (OpenJPAEntityManagerFactory) getEmf(propsMap2);\r\n+\r\n+        repos = JPAFacadeHelper.toBrokerFactory(factory).getConfiguration()\r\n+            .getMetaDataRepositoryInstance();\r\n+\r\n+        String[] biggerConfs = new String[confs.length + 2];\r\n+        System.arraycopy(confs, 0, biggerConfs, 0, confs.length);\r\n+        biggerConfs[biggerConfs.length - 2] = \"openjpa.DataCacheTimeout\";\r\n+        biggerConfs[biggerConfs.length - 1] = \"1000\";\r\n+        Map propsMap3 = new HashMap();\r\n+        for (int i = 0; i < biggerConfs.length; i += 2) {\r\n+            propsMap3.put(biggerConfs[i], biggerConfs[i + 1]);\r\n+        }\r\n+        timeoutFactory = (OpenJPAEntityManagerFactory) getEmf(propsMap3);\r\n+\r\n+        clear();\r\n+\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+\r\n+        CacheObjectA a;\r\n+        CacheObjectA aparent;\r\n+        try {\r\n+            // we can't specify this for UserTransaction\r\n+            /*\r\n+                * pm.currentTransaction().setNontransactionalRead(true);\r\n+                * pm.currentTransaction().setOptimistic(true);\r\n+                */\r\n+\r\n+//\t\t\tem.setNontransactionalRead(true);\r\n+//\t\t\tem.setOptimistic(true);\r\n+\r\n+            a = new CacheObjectA(ORIG_NAME, ORIG_AGE);\r\n+            aparent = new CacheObjectA(ORIG_PARENT_NAME, ORIG_PARENT_AGE);\r\n+            a.setRelatedObject(aparent);\r\n+            LinkedList children = new LinkedList();\r\n+            children.add(a);\r\n+            aparent.setRelatedCollection(children);\r\n+\r\n+            startTx(em);\r\n+            em.persist(a);\r\n+            em.persist(aparent);\r\n+            oid = em.getObjectId(a);\r\n+            oidwithclass = new Id(CacheObjectA.class, oid.toString());\r\n+            parentOid = em.getObjectId(aparent);\r\n+            endTx(em);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        // load an object in a separate pm before the update\r\n+        // happens. This should not change, else we're in\r\n+        // violation of the spec.\r\n+        this.em = factory.createEntityManager();\r\n+        startTx(this.em);\r\n+        try {\r\n+            // OpenJPAEntityManager openEm=(OpenJPAEntityManager) this.em;\r\n+            this.a = (CacheObjectA) this.em.find(CacheObjectA.class, oid);\r\n+\r\n+            // load the parent for testCollections().\r\n+            CacheObjectA rel = this.a.getRelatedObject();\r\n+            rel.getRelatedCollection();\r\n+        }\r\n+        catch (Exception e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        finally {\r\n+            endTx(this.em);\r\n+            // endEm(this.em);\r\n+        }\r\n+\r\n+        em = factory.createEntityManager();\r\n+        try {\r\n+            startTx(em);\r\n+            a = (CacheObjectA) em.find(CacheObjectA.class, oid);\r\n+            a.setName(NEW_NAME);\r\n+\r\n+            aparent = (CacheObjectA) em.find(CacheObjectA.class, parentOid);\r\n+\r\n+            CacheObjectA a2 = new CacheObjectA(ORIG_NAME, ORIG_AGE);\r\n+            a2.setRelatedObject(aparent);\r\n+            aparent.getRelatedCollection().add(a2);\r\n+            em.persist(a2);\r\n+            endTx(em);\r\n+\r\n+            assertNew(a);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    public void tearDown() throws Exception {\r\n+        endEm(em);\r\n+\r\n+        try {\r\n+            factory.close();\r\n+        }\r\n+        catch (Exception e) {\r\n+        }\r\n+        try {\r\n+            factory2.close();\r\n+        }\r\n+        catch (Exception e) {\r\n+        }\r\n+        super.tearDown();\r\n+\r\n+        factory = null;\r\n+        factory2 = null;\r\n+        timeoutFactory = null;\r\n+        oid = null;\r\n+        parentOid = null;\r\n+        em = null;\r\n+        a = null;\r\n+    }\r\n+\r\n+    public void testDeletedOneToOneRelations() throws Exception {\r\n+        EntityManager em = factory.createEntityManager();\r\n+        try {\r\n+            startTx(em);\r\n+            CacheObjectA a = (CacheObjectA) em.find(CacheObjectA.class, oid);\r\n+            assertNotNull(a.getRelatedObject());\r\n+            em.remove(a.getRelatedObject());\r\n+            endTx(em);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        EntityManager em2 = factory.createEntityManager();\r\n+        try {\r\n+            CacheObjectA a2 = (CacheObjectA) em2.find(CacheObjectA.class, oid);\r\n+            assertNull(a2.getRelatedObject());\r\n+        }\r\n+        finally {\r\n+            endEm(em2);\r\n+        }\r\n+    }\r\n+\r\n+    public void testCanCacheExtension() throws Exception {\r\n+        DataCache cache = cacheManager(factory).getSystemDataCache();\r\n+\r\n+        // first, test caching of newly created objects.\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        Object o;\r\n+        Object oid;\r\n+        try {\r\n+            startTx(em);\r\n+            o = new CacheObjectB(\"foo\");\r\n+            em.persist(o);\r\n+            endTx(em);\r\n+            oid = em.getObjectId(o);\r\n+            assertNotNull(oid);\r\n+            assertNull(cache.get(oid));\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        // now, test caching of data loaded from the data store.\r\n+        em = factory.createEntityManager();\r\n+        try {\r\n+            o = em.find(CacheObjectB.class, oid);\r\n+            assertNotNull(o);\r\n+            assertNull(cache.get(oid));\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    public void testGetCache() {\r\n+        // first, test caching of newly created objects.\r\n+        DataCache defaultCache = cacheManager(factory).getDataCache(\r\n+            DataCache.NAME_DEFAULT, false);\r\n+        assertNotNull(defaultCache);\r\n+\r\n+        DataCache cache = cacheManager(factory).getSystemDataCache();\r\n+        assertEquals(defaultCache, cache);\r\n+\r\n+        ClassMetaData aMeta = repos.getMetaData(CacheObjectA.class, null, true);\r\n+        ClassMetaData aChild1Meta = repos.getMetaData(CacheObjectAChild1.class,\r\n+            null, true);\r\n+        ClassMetaData aChild2Meta = repos.getMetaData(CacheObjectAChild2.class,\r\n+            null, true);\r\n+        ClassMetaData bMeta = repos.getMetaData(CacheObjectB.class, null, true);\r\n+        ClassMetaData bChild1Meta = repos.getMetaData(CacheObjectBChild1.class,\r\n+            null, true);\r\n+        ClassMetaData cMeta = repos.getMetaData(CacheObjectC.class, null, true);\r\n+        ClassMetaData dMeta = repos.getMetaData(CacheObjectD.class, null, true);\r\n+        ClassMetaData eMeta = repos.getMetaData(CacheObjectE.class, null, true);\r\n+\r\n+        cache = aMeta.getDataCache();\r\n+        assertEquals(defaultCache, cache);\r\n+        System.out.println(\"******DataCacheName:\"\r\n+            + aChild2Meta.getDataCacheName());\r\n+        assertNull(aChild2Meta.getDataCache());\r\n+\r\n+        assertNull(bMeta.getDataCache());\r\n+\r\n+        assertEquals(cMeta.getDataCache(), dMeta.getDataCache());\r\n+        if (dMeta.getDataCache() instanceof ConcurrentDataCache) {\r\n+            ConcurrentDataCache dCacheImpl =\r\n+                (ConcurrentDataCache) dMeta.getDataCache();\r\n+            assertEquals(10, dCacheImpl.getCacheSize());\r\n+        }\r\n+        assertEquals(aMeta.getDataCache(), eMeta.getDataCache());\r\n+    }\r\n+\r\n+    public void testPrimitives() throws Exception {\r\n+        // make sure that the 'a' that was found before changes\r\n+        // were made is still valid.\r\n+        assertOld(a);\r\n+        em.refresh(a);\r\n+        assertNew(a);\r\n+    }\r\n+\r\n+    // FIXME Seetha Sep 25,2006\r\n+    /*\r\n+      * public void testCollections() throws Exception { CacheObjectA parent =\r\n+      * (CacheObjectA) em.find(CacheObjectA.class,ORIG_PARENT_NAME);\r\n+      * assertEquals(1, parent.getRelatedCollection().size());\r\n+      * em.refresh(parent); assertEquals(2,\r\n+      * parent.getRelatedCollection().size()); }\r\n+      */\r\n+\r\n+    // FIXME Seetha Sep 25,2006\r\n+    /*\r\n+      * public void testExpiredCollections() { CacheObjectA parent =\r\n+      * (CacheObjectA) em.find(CacheObjectA.class,ORIG_PARENT_NAME);\r\n+      * em.refresh(parent); Collection relatedOids = new HashSet(); for (Iterator\r\n+      * iter = parent.getRelatedCollection().iterator(); iter.hasNext();) {\r\n+      * relatedOids.add(JDOHelper.getObjectId(iter.next())); }\r\n+      *\r\n+      * ClassMetaData meta = repos.getMetaData(CacheObjectA.class, null, true);\r\n+      * DataCache cache = meta.getDataCache();\r\n+      *  // drop the related data from the cache for (Iterator iter =\r\n+      * relatedOids.iterator(); iter.hasNext();) cache.remove(iter.next());\r\n+      *\r\n+      * PersistenceManager pm2 = factory.getPersistenceManager(); try {\r\n+      * assertTrue(cache.contains(parentOid)); parent = (CacheObjectA)\r\n+      * pm2.getObjectById(parentOid, true);\r\n+      *\r\n+      * try { for (Iterator iter = relatedOids.iterator(); iter.hasNext();)\r\n+      * assertFalse(cache.contains(iter.next())); } catch (AssertionFailedError\r\n+      * e) { bug(467, \"data cache can over-eagerly load relation data\"); } }\r\n+      * finally { close(pm2); } }\r\n+      */\r\n+\r\n+    public void testExpiredRelations() {\r\n+        CacheObjectA a = (CacheObjectA) em.find(CacheObjectA.class, oid);\r\n+        em.refresh(a);\r\n+        Object relationOid = em.getObjectId(a.getRelatedObject());\r\n+        relationOid = new Id(CacheObjectA.class, relationOid.toString());\r\n+\r\n+        ClassMetaData meta = repos.getMetaData(CacheObjectA.class, null, true);\r\n+        DataCache cache = meta.getDataCache();\r\n+\r\n+        // drop the related data from the cache\r\n+        cache.remove(relationOid);\r\n+\r\n+        OpenJPAEntityManager em2 = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            assertTrue(cache.contains(oidwithclass));\r\n+            a = (CacheObjectA) em2.find(CacheObjectA.class, oid);\r\n+\r\n+            try {\r\n+                assertFalse(cache.contains(relationOid));\r\n+            }\r\n+            catch (AssertionFailedError e) {\r\n+                // bug(467, \"data cache can over-eagerly load relation data\");\r\n+                e.printStackTrace();\r\n+            }\r\n+        }\r\n+        finally {\r\n+            endEm(em2);\r\n+        }\r\n+    }\r\n+\r\n+    public void testPCArrays() throws Exception {\r\n+        OpenJPAEntityManager newEm = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            startTx(newEm);\r\n+            CacheObjectA parent = (CacheObjectA) newEm.find(CacheObjectA.class,\r\n+                parentOid);\r\n+            CacheObjectA a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            a.setRelatedArray(new CacheObjectA[]{ parent, a });\r\n+            endTx(newEm);\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+\r\n+        newEm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        try {\r\n+            a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            CacheObjectA[] array = a.getRelatedArray();\r\n+            assertEquals(2, array.length);\r\n+            assertTrue(array[0] instanceof CacheObjectA);\r\n+            assertTrue(array[1] instanceof CacheObjectA);\r\n+\r\n+            Object arrayOid = newEm.getObjectId(array[0]);\r\n+            if (!arrayOid.equals(parentOid) && !arrayOid.equals(oid)) {\r\n+                fail(\"array does not contain correct oids\");\r\n+            }\r\n+\r\n+            arrayOid = newEm.getObjectId(array[1]);\r\n+            if (!arrayOid.equals(parentOid) && !arrayOid.equals(oid)) {\r\n+                fail(\"array does not contain correct oids\");\r\n+            }\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testStringArrays() throws Exception {\r\n+        OpenJPAEntityManager newEm = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            startTx(newEm);\r\n+            CacheObjectA a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            a.setStringArray(new String[]{ \"string0\", \"string1\", \"string2\" });\r\n+            endTx(newEm);\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+\r\n+        newEm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        try {\r\n+            a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            String[] array = a.getStringArray();\r\n+            assertEquals(3, array.length);\r\n+            assertEquals(\"string0\", array[0]);\r\n+            assertEquals(\"string1\", array[1]);\r\n+            assertEquals(\"string2\", array[2]);\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testPrimitiveArrays() throws Exception {\r\n+        OpenJPAEntityManager newEm = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            startTx(newEm);\r\n+            CacheObjectA a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            a.setPrimitiveArray(new float[]{ 0, 1, 2 });\r\n+            endTx(newEm);\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+\r\n+        newEm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        try {\r\n+            a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            float[] array = a.getPrimitiveArray();\r\n+            assertEquals(3, array.length);\r\n+            assertEquals(0.0F, array[0], 0);\r\n+            assertEquals(1.0F, array[1], 0);\r\n+            assertEquals(2.0f, array[2], 0);\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testDateArrays() throws Exception {\r\n+        OpenJPAEntityManager newEm = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        CacheObjectA a;\r\n+        Date[] dateArray;\r\n+        try {\r\n+            startTx(newEm);\r\n+            a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            dateArray = new Date[]{ new Date(), new Date(), new Date() };\r\n+            a.setDateArray(dateArray);\r\n+            endTx(newEm);\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+\r\n+        newEm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        try {\r\n+            a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            Date[] array = a.getDateArray();\r\n+            if (array[0] == dateArray[0]) {\r\n+                fail(\"date objects are the same\");\r\n+            }\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testDate() throws Exception {\r\n+        OpenJPAEntityManager newEm = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        CacheObjectA a;\r\n+        Date d;\r\n+        try {\r\n+            startTx(newEm);\r\n+            a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            d = new Date();\r\n+            a.setDate(d);\r\n+            endTx(newEm);\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+\r\n+        // sleep a bit so we can ensure that the date doesn't just\r\n+        // happen to be the same.\r\n+        Thread.sleep(100);\r\n+\r\n+        newEm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        try {\r\n+            a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+            Date d2 = a.getDate();\r\n+            if (d == d2) {\r\n+                fail(\"date objects are the same\");\r\n+            }\r\n+\r\n+            assertEquals(d.getTime(), d2.getTime());\r\n+        }\r\n+        finally {\r\n+            endEm(newEm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testLocale() throws Exception {\r\n+        OpenJPAEntityManager newEm = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        startTx(newEm);\r\n+        CacheObjectA a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+        Locale l = Locale.getDefault();\r\n+        a.setLocale(l);\r\n+        endTx(newEm);\r\n+\r\n+        OpenJPAEntityManager newEm2 = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+\r\n+        a = (CacheObjectA) newEm2.find(CacheObjectA.class, oid);\r\n+        Locale l2 = a.getLocale();\r\n+        // locales are immutable and final, so the different cached\r\n+        // copies should be ==.\r\n+        if (l != l2) {\r\n+            fail(\"locale objects are not the same.\");\r\n+        }\r\n+\r\n+        endEm(newEm);\r\n+        endEm(newEm2);\r\n+    }\r\n+\r\n+    // ---------- Test query caching ----------\r\n+    // * FCOs as params\r\n+    // * multi-threaded stuff\r\n+    // * access path stuff (see also TestQueryAccessPath)\r\n+    // * serializability of returned lists\r\n+    // * PM.setQueryCacheEnabled (false);\r\n+    // * Query.setQueryCacheEnabled (false);\r\n+    // * Pessimistic transactions\r\n+\r\n+    public void testBasicQuery() {\r\n+        basicQueries(factory.createEntityManager(), Boolean.FALSE, 3, 1);\r\n+        basicQueries(factory.createEntityManager(), Boolean.TRUE, 3, 1);\r\n+\r\n+        // manually notify the cache of changes\r\n+        QueryCache cache = cacheManager(factory).getSystemQueryCache();\r\n+\r\n+        // test to see if modifying B causes A's query cache to be flushed\r\n+        Set s = new HashSet();\r\n+        s.add(CacheObjectB.class);\r\n+        cache.onTypesChanged(new TypesChangedEvent(this, s));\r\n+        basicQueries(factory.createEntityManager(), Boolean.TRUE, 3, 1);\r\n+\r\n+        // test to see if modifying A causes A's query cache to be flushed\r\n+        s.add(CacheObjectA.class);\r\n+        cache.onTypesChanged(new TypesChangedEvent(this, s));\r\n+        basicQueries(factory.createEntityManager(), Boolean.FALSE, 3, 1);\r\n+\r\n+        // make sure that non-manual notification works\r\n+        EntityManager em = factory.createEntityManager();\r\n+        try {\r\n+            startTx(em);\r\n+            CacheObjectA a = new CacheObjectA(ORIG_NAME, ORIG_AGE);\r\n+            em.persist(a);\r\n+            endTx(em);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        basicQueries(factory.createEntityManager(), Boolean.FALSE, 4, 2);\r\n+    }\r\n+\r\n+    protected void basicQueries(EntityManager em, Boolean inCache, int allSize,\r\n+        int origSize) {\r\n+        try {\r\n+            long start;\r\n+            long q1p1;\r\n+            long q1p2;\r\n+            long q2p1;\r\n+            long q2p2;\r\n+\r\n+            Broker broker = JPAFacadeHelper.toBroker(em);\r\n+            org.apache.openjpa.kernel.Query q = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+                + CacheObjectA.class.getSimpleName() + \" a\");\r\n+            q.setCandidateExtent(broker.newExtent(CacheObjectA.class, false));\r\n+            start = System.currentTimeMillis();\r\n+            assertInCache(q, inCache);\r\n+            List l = (List) q.execute();\r\n+            iterate(l);\r\n+            q1p1 = System.currentTimeMillis() - start;\r\n+\r\n+            assertEquals(allSize, l.size());\r\n+\r\n+            start = System.currentTimeMillis();\r\n+            List l2 = (List) q.execute();\r\n+            iterate(l2);\r\n+            q1p2 = System.currentTimeMillis() - start;\r\n+            assertEquals(allSize, l2.size());\r\n+\r\n+            q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n+                \"select a.name,a.age from \"\r\n+                    + CacheObjectA.class.getSimpleName()\r\n+                    + \" a where a.name = :n AND a.age = :a\");\r\n+            q.setCandidateExtent(broker.newExtent(CacheObjectA.class, false));\r\n+            start = System.currentTimeMillis();\r\n+            assertInCache(q, inCache, new Object[]{ ORIG_NAME,\r\n+                new Integer(ORIG_AGE) });\r\n+            l = (List) q.execute(new Object[]{ ORIG_NAME,\r\n+                new Integer(ORIG_AGE) });\r\n+            iterate(l);\r\n+            q2p1 = System.currentTimeMillis() - start;\r\n+\r\n+            assertEquals(origSize, l.size());\r\n+\r\n+            start = System.currentTimeMillis();\r\n+            l2 = (List) q.execute(new Object[]{ ORIG_NAME,\r\n+                new Integer(ORIG_AGE) });\r\n+            iterate(l2);\r\n+            q2p2 = System.currentTimeMillis() - start;\r\n+\r\n+            assertEquals(origSize, l2.size());\r\n+            // System.out.println (\"inCache: \" + inCache + \";\\t q1p1: \" + q1p1\r\n+            // + \";\\t q1p2: \" + q1p2 + \";\\t q2p1: \" + q2p1 + \";\\t q2p2: \"\r\n+            // + q2p2);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    public void testNonCacheableClass() {\r\n+        Broker broker = JPAFacadeHelper.toBrokerFactory(factory).newBroker();\r\n+        try {\r\n+            org.apache.openjpa.kernel.Query q = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+                + CacheObjectB.class.getSimpleName() + \" a\");\r\n+\r\n+            Collection c = (Collection) q.execute();\r\n+            iterate(c);\r\n+\r\n+            assertInCache(q, Boolean.FALSE);\r\n+        }\r\n+        finally {\r\n+            close(broker);\r\n+        }\r\n+    }\r\n+\r\n+    public void testNonCacheableAccessPath() {\r\n+        Broker broker = JPAFacadeHelper.toBrokerFactory(factory).newBroker();\r\n+        try {\r\n+            org.apache.openjpa.kernel.Query q = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+                + CacheObjectA.class.getSimpleName()\r\n+                + \" a where a.relatedB.str = 'foo'\");\r\n+            // \"relatedB.str == 'foo'\");\r\n+            q.setCandidateExtent(broker.newExtent(CacheObjectA.class, false));\r\n+\r\n+            Collection c = (Collection) q.execute();\r\n+            iterate(c);\r\n+\r\n+            assertInCache(q, Boolean.FALSE);\r\n+        }\r\n+        finally {\r\n+            close(broker);\r\n+        }\r\n+    }\r\n+\r\n+    public void testNonCacheableSubclasses1() {\r\n+        Broker broker = JPAFacadeHelper.toBrokerFactory(factory).newBroker();\r\n+        try {\r\n+            // a query on the CacheObjectA class includes an uncacheable\r\n+            // class; it should therefore not be cacheable.\r\n+            org.apache.openjpa.kernel.Query q = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+                + CacheObjectA.class.getSimpleName() + \" a\");\r\n+\r\n+            Collection c = (Collection) q.execute();\r\n+            iterate(c);\r\n+\r\n+            assertInCache(q, Boolean.FALSE);\r\n+        }\r\n+        finally {\r\n+            close(broker);\r\n+        }\r\n+    }\r\n+\r\n+    public void testNonCacheableSubclasses2() {\r\n+        Broker broker = JPAFacadeHelper.toBrokerFactory(factory).newBroker();\r\n+        try {\r\n+            // a query on the CacheObjectA extent configured without\r\n+            // subclasses does not include an uncacheable class; it should\r\n+            // therefore be cacheable.\r\n+            org.apache.openjpa.kernel.Query q = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, \"select a from \"\r\n+                + CacheObjectA.class.getSimpleName() + \" a\");\r\n+            q.setCandidateExtent(broker.newExtent(CacheObjectA.class, false));\r\n+\r\n+            Collection c = (Collection) q.execute();\r\n+            iterate(c);\r\n+\r\n+            assertInCache(q, Boolean.TRUE);\r\n+        }\r\n+        finally {\r\n+            close(broker);\r\n+        }\r\n+    }\r\n+\r\n+    public void testCacheNames() {\r\n+        assertCacheName(CacheObjectA.class, DataCache.NAME_DEFAULT);\r\n+        assertCacheName(CacheObjectAChild1.class, DataCache.NAME_DEFAULT);\r\n+        assertCacheName(CacheObjectAChild2.class, null);\r\n+        assertCacheName(CacheObjectB.class, null);\r\n+        assertCacheName(CacheObjectBChild1.class, null);\r\n+        assertCacheName(CacheObjectC.class, \"not-the-default-cache\");\r\n+        assertCacheName(CacheObjectD.class, \"not-the-default-cache\");\r\n+        assertCacheName(CacheObjectE.class, DataCache.NAME_DEFAULT);\r\n+        assertCacheName(CacheObjectF.class, DataCache.NAME_DEFAULT);\r\n+        assertCacheName(CacheObjectG.class, DataCache.NAME_DEFAULT);\r\n+        assertCacheName(CacheObjectH.class, DataCache.NAME_DEFAULT);\r\n+        assertCacheName(CacheObjectJ.class, DataCache.NAME_DEFAULT);\r\n+        assertCacheName(AppIdCacheObject.class, DataCache.NAME_DEFAULT);\r\n+    }\r\n+\r\n+    private void assertCacheName(Class cls, String cacheName) {\r\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(factory, cls);\r\n+        if (cacheName == null)\r\n+            assertNull(meta.getDataCache());\r\n+        else {\r\n+            assertNotNull(meta.getDataCache());\r\n+            assertEquals(cacheName, meta.getDataCache().getName());\r\n+        }\r\n+    }\r\n+\r\n+    // FIXME Seetha Sep 26,2006\r\n+    // not able to replace pm.newQuery(CacheObjectA.class);\r\n+    /*\r\n+      * public void testQueryAggregates() { PersistenceManager pm =\r\n+      * factory.getPersistenceManager(); try { Query q =\r\n+      * pm.newQuery(CacheObjectA.class); q.setResult(\"max (age)\"); Object o =\r\n+      * q.execute(); assertTrue(\"o must be instanceof Number\", o instanceof\r\n+      * Number); } finally { close(pm); } }\r\n+      */\r\n+\r\n+    public void testCache2() {\r\n+        OpenJPAEntityManager em1 =\r\n+            (OpenJPAEntityManager) factory.createEntityManager();\r\n+        OpenJPAEntityManager em2 = null;\r\n+        DataCache cache;\r\n+\r\n+        try {\r\n+            CacheObjectA a1 = (CacheObjectA) em1.find(CacheObjectA.class, oid);\r\n+\r\n+            em2 = (OpenJPAEntityManager) factory2.createEntityManager();\r\n+            CacheObjectA a2 = (CacheObjectA) em2.find(CacheObjectA.class, oid);\r\n+\r\n+            // assert that the oid is in factory2's cache\r\n+            //MetaDataRepository repos2 = factory2.getConfiguration().getMetaDataRepositoryInstance();\r\n+            MetaDataRepository repos2 =\r\n+                ((((OpenJPAEntityManagerFactorySPI) factory2)).getConfiguration())\r\n+                    .getMetaDataRepositoryInstance();\r\n+            ClassMetaData meta = repos2\r\n+                .getMetaData(CacheObjectA.class, em2.getClassLoader(), true);\r\n+            cache = meta.getDataCache();\r\n+            assertTrue(cache.contains(oidwithclass));\r\n+\r\n+            // modify the object.\r\n+            startTx(em1);\r\n+            a1.setName(a1.getName() + \" changed\");\r\n+            endTx(em1);\r\n+        }\r\n+        finally {\r\n+            if (em2 != null)\r\n+                endEm(em2);\r\n+            endEm(em1);\r\n+        }\r\n+\r\n+        // if the cache is a coherent one, then the changes should be\r\n+        // seen. Otherwise, they should not.\r\n+        if (isCacheCoherent() || factory == factory2)\r\n+            assertTrue(\"key \" + oid + \" was not in cache; should have been\",\r\n+                cache.contains(oidwithclass));\r\n+        else\r\n+            assertFalse(\"key \" + oid + \" was in cache; should not have been\",\r\n+                cache.contains(oidwithclass));\r\n+    }\r\n+\r\n+    public void testTimeouts1() throws Exception {\r\n+        timeoutsTest1(1);\r\n+    }\r\n+\r\n+    public void timeoutsTest1(int tries) throws Exception {\r\n+        // this crazy for looping stuff is here because we're seeing\r\n+        // intermittent failures with the garbage collector kicking in\r\n+        // during testing. So, this decreases the chances that that\r\n+        // will happen.\r\n+        Exception e = null;\r\n+        int i;\r\n+        for (i = 0; i < tries; i++) {\r\n+            try {\r\n+                timeoutsHelper(factory);\r\n+                // any successes will pass the test\r\n+                return;\r\n+            }\r\n+            catch (Exception ex) {\r\n+                e = ex;\r\n+            }\r\n+        }\r\n+\r\n+        throw e;\r\n+    }\r\n+\r\n+    public void testTimeouts2() throws Exception {\r\n+        timeoutsTest2(30);\r\n+    }\r\n+\r\n+    public void timeoutsTest2(int tries) throws Exception {\r\n+        Error e = null;\r\n+        for (int i = 0; i < tries; i++) {\r\n+            try {\r\n+                timeoutsHelper(timeoutFactory);\r\n+                // any successes will pass the test\r\n+                return;\r\n+            }\r\n+            catch (AssertionFailedError afe) {\r\n+                e = afe;\r\n+            }\r\n+        }\r\n+\r\n+        throw e;\r\n+    }\r\n+\r\n+    private void timeoutsHelper(OpenJPAEntityManagerFactory factory)\r\n+        throws Exception {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            startTx(em);\r\n+\r\n+            CacheObjectE e = new CacheObjectE(\"e\");\r\n+            em.persist(e);\r\n+\r\n+            CacheObjectF f = new CacheObjectF(\"f\");\r\n+            em.persist(f);\r\n+\r\n+            CacheObjectG g = new CacheObjectG(\"g\");\r\n+            em.persist(g);\r\n+\r\n+            CacheObjectH h = new CacheObjectH(\"h\");\r\n+            em.persist(h);\r\n+\r\n+            endTx(em);\r\n+\r\n+            Object[] ids = new Object[4];\r\n+            ids[0] = new Id(CacheObjectE.class, em.getObjectId(e).toString());\r\n+            ids[1] = new Id(CacheObjectF.class, em.getObjectId(f).toString());\r\n+            ids[2] = new Id(CacheObjectG.class, em.getObjectId(g).toString());\r\n+            ids[3] = new Id(CacheObjectH.class, em.getObjectId(h).toString());\r\n+\r\n+            // build up some queries to test\r\n+\r\n+            // this one should be only on the superclass, since\r\n+            // CacheObjectF has a timeout.\r\n+            Broker broker = JPAFacadeHelper.toBroker(em);\r\n+            org.apache.openjpa.kernel.Query q1 = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, \"select a from \"\r\n+                + CacheObjectE.class.getSimpleName() + \" a\");\r\n+            q1.setCandidateExtent(broker.newExtent(CacheObjectE.class, false));\r\n+            iterate((Collection) q1.execute());\r\n+            assertInCache(q1, Boolean.TRUE);\r\n+\r\n+            org.apache.openjpa.kernel.Query q2 = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+                + CacheObjectF.class.getSimpleName() + \" a\");\r\n+            iterate((Collection) q2.execute());\r\n+            assertInCache(q2, Boolean.TRUE);\r\n+\r\n+            DataCache cache = cacheManager(factory).getDataCache(\r\n+                DataCache.NAME_DEFAULT, false);\r\n+            checkCache(cache, ids, new boolean[]{ true, true, true, true });\r\n+\r\n+            // should cause h to be dropped.\r\n+            Thread.currentThread().sleep(551);\r\n+            Thread.yield();\r\n+            checkCache(cache, ids, new boolean[]{ true, true, true, false });\r\n+\r\n+            // if this run has a default timeout (set to 1 sec in the test\r\n+            // case), e should be timed out by this point.\r\n+            //boolean eStatus = !(factory.getConfiguration().getDataCacheTimeout() > 0);\r\n+            boolean eStatus =\r\n+                !((((OpenJPAEntityManagerFactorySPI) factory).getConfiguration())\r\n+                    .getDataCacheTimeout() > 0);\r\n+\r\n+            // should cause f to be dropped.\r\n+            Thread.currentThread().sleep(550);\r\n+            Thread.yield();\r\n+            checkCache(cache, ids,\r\n+                new boolean[]{ eStatus, false, true, false });\r\n+\r\n+            // at this point, q2 should be dropped (because its candidate\r\n+            // class is CacheObjectF), and q1 might be dropped, depending\r\n+            // on whether or not we've got a timeout configured.\r\n+            assertInCache(q1, (eStatus) ? Boolean.TRUE : Boolean.FALSE);\r\n+            assertInCache(q2, Boolean.FALSE);\r\n+\r\n+            // should cause g to be dropped.\r\n+            Thread.currentThread().sleep(4050);\r\n+            Thread.yield();\r\n+            checkCache(cache, ids,\r\n+                new boolean[]{ eStatus, false, false, false });\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    public void testQueryTimeouts() throws Exception {\r\n+        queryTimeoutsHelper(factory);\r\n+        queryTimeoutsHelper(timeoutFactory);\r\n+    }\r\n+\r\n+    private void queryTimeoutsHelper(OpenJPAEntityManagerFactory factory)\r\n+        throws Exception {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            startTx(em);\r\n+\r\n+            CacheObjectE e = new CacheObjectE(\"e\");\r\n+            em.persist(e);\r\n+\r\n+            CacheObjectF f = new CacheObjectF(\"f\");\r\n+            em.persist(f);\r\n+\r\n+            endTx(em);\r\n+\r\n+            // build up some queries to test\r\n+            Broker broker = JPAFacadeHelper.toBroker(em);\r\n+            org.apache.openjpa.kernel.Query q1 = broker\r\n+                .newQuery(JPQLParser.LANG_JPQL, \"SELECT a FROM CacheObjectE a\");\r\n+\r\n+            q1.setCandidateExtent(broker.newExtent(CacheObjectE.class, false));\r\n+            iterate((Collection) q1.execute());\r\n+            assertInCache(q1, Boolean.TRUE);\r\n+\r\n+            org.apache.openjpa.kernel.Query q2 = broker\r\n+                .newQuery(JPQLParser.LANG_JPQL, \"SELECT a FROM CacheObjectF a\");\r\n+            iterate((Collection) q2.execute());\r\n+            assertInCache(q2, Boolean.TRUE);\r\n+\r\n+            // if this run has a default timeout (set to 1 sec in the test\r\n+            // case), e should be timed out by this point.\r\n+            //boolean eTimedOut = factory.getConfiguration().getDataCacheTimeout() > 0;\r\n+            boolean eTimedOut =\r\n+                ((((OpenJPAEntityManagerFactorySPI) factory).getConfiguration())\r\n+                    .getDataCacheTimeout() > 0);\r\n+\r\n+            // should cause f to be dropped.\r\n+            Thread.currentThread().sleep(1001);\r\n+\r\n+            // at this point, q2 should be dropped (because its candidate\r\n+            // class is CacheObjectF), and q1 might be dropped, depending\r\n+            // on whether or not we've got a timeout configured.\r\n+            assertInCache(q1, (eTimedOut) ? Boolean.FALSE : Boolean.TRUE);\r\n+            assertInCache(q2, Boolean.FALSE);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    public void testQueryImplicitEvictions() throws Exception {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            RuntimeTest1[] helperObjs = new RuntimeTest1[5];\r\n+            helperObjs[0] = new RuntimeTest1();\r\n+            helperObjs[1] = new RuntimeTest1();\r\n+            helperObjs[2] = new RuntimeTest1();\r\n+            helperObjs[3] = new RuntimeTest1();\r\n+            helperObjs[4] = new RuntimeTest1();\r\n+            startTx(em);\r\n+            em.persist(helperObjs[0]);\r\n+            em.persist(helperObjs[1]);\r\n+            em.persist(helperObjs[2]);\r\n+            em.persist(helperObjs[3]);\r\n+            em.persist(helperObjs[4]);\r\n+            endTx(em);\r\n+\r\n+            DataCache cache = cacheManager(factory).getDataCache(\r\n+                DataCache.NAME_DEFAULT, false);\r\n+\r\n+            if (!isOpenJPACache(cache)) {\r\n+                bug(627, \"Tangosol cache impl needs modernization\");\r\n+                return;\r\n+            }\r\n+\r\n+            if (cache instanceof DelegatingDataCache)\r\n+                cache = ((DelegatingDataCache) cache).getInnermostDelegate();\r\n+            if (cache instanceof ConcurrentDataCache) {\r\n+                CacheMap map = ((ConcurrentDataCache) cache).getCacheMap();\r\n+                map.setCacheSize(3);\r\n+                map.setSoftReferenceSize(0);\r\n+            } else if (cache instanceof ConcurrentDataCache) {\r\n+                CacheMap map = ((ConcurrentDataCache) cache).getCacheMap();\r\n+                map.setCacheSize(3);\r\n+                map.setSoftReferenceSize(0);\r\n+            }\r\n+\r\n+            startTx(em);\r\n+            CacheObjectH h = new CacheObjectH(\"h\");\r\n+            em.persist(h);\r\n+            CacheObjectJ j = new CacheObjectJ(\"j\", h);\r\n+            em.persist(j);\r\n+            endTx(em);\r\n+            Object hoid = em.getObjectId(h);\r\n+            Object joid = em.getObjectId(j);\r\n+\r\n+            Object hoidwithclass = new Id(CacheObjectH.class, hoid.toString());\r\n+            Object joidwithclass = new Id(CacheObjectJ.class, joid.toString());\r\n+            endEm(em);\r\n+\r\n+            // make sure j and h are in cache; may not be if not LRU\r\n+            int attempts = 0;\r\n+            for (; attempts < 100 && !cache.contains(joidwithclass); attempts++)\r\n+            {\r\n+                em = factory.createEntityManager();\r\n+                if (!cache.contains(hoidwithclass))\r\n+                    em.find(CacheObjectH.class, hoid);\r\n+                if (!cache.contains(joidwithclass))\r\n+                    em.find(CacheObjectJ.class, joid);\r\n+                endEm(em);\r\n+            }\r\n+            assertTrue(\"Could not get queried objects into cache\",\r\n+                attempts < 100);\r\n+\r\n+            // build up a query that uses H in its access path...\r\n+            em = factory.createEntityManager();\r\n+            Broker broker = JPAFacadeHelper.toBroker(em);\r\n+            org.apache.openjpa.kernel.Query q = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+                + CacheObjectJ.class.getSimpleName()\r\n+                + \" a where a.str = 'h'\");\r\n+            iterate((Collection) q.execute());\r\n+            assertInCache(q, Boolean.TRUE);\r\n+            endEm(em);\r\n+\r\n+            // force h out of the cache. we might have to try multiple times\r\n+            // if the cache is not LRU\r\n+            attempts = 0;\r\n+            for (; attempts < 100 && cache.contains(joidwithclass); attempts++)\r\n+            {\r\n+                em = factory.createEntityManager();\r\n+                for (int i = 0; i < 5; i++)\r\n+                    em.find(RuntimeTest1.class, em.getObjectId(helperObjs[i]));\r\n+                endEm(em);\r\n+            }\r\n+            assertTrue(\"Could not kick queried objects out of cache\",\r\n+                attempts < 100);\r\n+\r\n+            em = factory.createEntityManager();\r\n+            broker = JPAFacadeHelper.toBroker(em);\r\n+            q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+                + CacheObjectJ.class.getSimpleName()\r\n+                + \" a where a.str = 'h'\");\r\n+            try {\r\n+                assertInCache(q, null);\r\n+            }\r\n+            catch (AssertionFailedError e) {\r\n+                bug(626, \"query cache invalidation is broken\");\r\n+            }\r\n+\r\n+            // ### should test remote events causing queries to evict.\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    // FIXME SEetha Sep 26,2006\r\n+    // not able to replace pm.newQuery(CacheObjectE.class);\r\n+    /*\r\n+      * public void testAllegedQueryOrderingChanges() throws Exception { //\r\n+      * inspired by tsc 3013. pcl: I have not been able to get this // test case\r\n+      * to actually fail. However, during analysis of // 3013's stack traces, I\r\n+      * discovered that the // QueryKey.equals() method did not deal with the\r\n+      * ordering // field correctly, possibly causing the problem.\r\n+      *\r\n+      * OpenJPAEntityManager em = (OpenJPAEntityManager)\r\n+      * factory.createEntityManager(); try { startTx(em,\r\n+      * ()); CacheObjectE e = new CacheObjectE(\"e\"); em.persist(e);\r\n+      * endTx(em); } finally {\r\n+      * endEm(em); }\r\n+      *\r\n+      * em = factory.createEntityManager(); Query q; Collection c; List l; try {\r\n+      * q = em.createQuery(CacheObjectE.class); q.setOrdering(\"str ascending\"); c =\r\n+      * (Collection) q.execute(); l = new LinkedList(c); assertEquals(1,\r\n+      * c.size()); } finally { endEm(em); }\r\n+      *\r\n+      * em = factory.createEntityManager(); try { q =\r\n+      * em.createQuery(CacheObjectE.class); q.setOrdering(\"str ascending\"); c =\r\n+      * (Collection) q.execute(); l = new LinkedList(c); assertEquals(1,\r\n+      * c.size()); } finally { endEm(em); }\r\n+      *\r\n+      * try { em = factory.createEntityManager(); q =\r\n+      * em.createQuery(CacheObjectE.class); q.setOrdering(\"str descending\"); c =\r\n+      * (Collection) q.execute(); assertEquals(1, c.size()); l = new\r\n+      * LinkedList(c); } finally { endEm(em); } }\r\n+      */\r\n+\r\n+    public void testAllegedConcurrentModificationException() throws Exception {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        CacheObjectE e;\r\n+        try {\r\n+            ClassMetaData meta = JPAFacadeHelper.getMetaData(em,\r\n+                CacheObjectE.class);\r\n+            if (!isOpenJPACache(meta.getDataCache()))\r\n+                return;\r\n+\r\n+            startTx(em);\r\n+            e = new CacheObjectE(\"e\");\r\n+            em.persist(e);\r\n+            endTx(em);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        em = factory.createEntityManager();\r\n+        try {\r\n+            startTx(em);\r\n+\r\n+            // find the new object...\r\n+            OpenJPAQuery q = em.createQuery(\"select a FROM \"\r\n+                + CacheObjectE.class.getSimpleName()\r\n+                + \" a where a.str = 'e'\");\r\n+            e = (CacheObjectE) ((Collection) q.getResultList()).iterator()\r\n+                .next();\r\n+\r\n+            // ... and modify the changed object.\r\n+            e.setStr(\"e2\");\r\n+            e.setStr(\"e3\");\r\n+            endTx(em);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    private boolean isOpenJPACache(DataCache cache) {\r\n+        if (cache instanceof DelegatingDataCache)\r\n+            cache = ((DelegatingDataCache) cache).getInnermostDelegate();\r\n+\r\n+        return cache instanceof ConcurrentDataCache;\r\n+    }\r\n+\r\n+    // ---------- utility methods ----------\r\n+\r\n+    private void checkCache(DataCache cache, Object[] ids, boolean[] stati) {\r\n+        CacheTestHelper.checkCache(this, cache, ids, stati);\r\n+    }\r\n+\r\n+    private void assertInCache(org.apache.openjpa.kernel.Query q,\r\n+        Boolean inCache) {\r\n+        CacheTestHelper.assertInCache(this, q, inCache);\r\n+    }\r\n+\r\n+    private void assertInCache(org.apache.openjpa.kernel.Query q,\r\n+        Boolean inCache, Object[] args) {\r\n+        CacheTestHelper.assertInCache(this, q, inCache, args);\r\n+    }\r\n+\r\n+    private void iterate(Collection c) {\r\n+        CacheTestHelper.iterate(c);\r\n+    }\r\n+\r\n+    public void testInterface() throws Exception {\r\n+        OpenJPAEntityManager newEm =\r\n+            (OpenJPAEntityManager) factory.createEntityManager();\r\n+        startTx(newEm);\r\n+        CacheObjectA a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+        CacheObjectC c = new CacheObjectC(\"blah\");\r\n+        a.setRelatedInterface(c);\r\n+        endTx(newEm);\r\n+        Object cId = newEm.getObjectId(c);\r\n+        endEm(newEm);\r\n+\r\n+        newEm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        a = (CacheObjectA) newEm.find(CacheObjectA.class, oid);\r\n+\r\n+        CacheObjectInterface c2 = a.getRelatedInterface();\r\n+        assertNotNull(c2);\r\n+\r\n+        assertEquals(cId, newEm.getObjectId(c2));\r\n+    }\r\n+\r\n+    public void testQueriesOnCollectionsDontUseCache() {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        try {\r\n+            startTx(em);\r\n+            CacheObjectE e = new CacheObjectE(\"e\");\r\n+            em.persist(e);\r\n+            endTx(em);\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        em = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        OpenJPAQuery q;\r\n+        Collection c;\r\n+        try {\r\n+            q = em.createQuery(\"select a FROM \"\r\n+                + CacheObjectE.class.getSimpleName()\r\n+                + \" a where a.str = 'e'\");\r\n+            c = new ArrayList((Collection) q.getResultList());\r\n+            assertEquals(1, c.size());\r\n+            q.closeAll();\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        try {\r\n+            em = (OpenJPAEntityManager) factory.createEntityManager();\r\n+            q = em.createQuery(\"select a FROM \"\r\n+                + CacheObjectE.class.getSimpleName()\r\n+                + \" a where a.str = 'e'\");\r\n+            q.setCandidateCollection(new ArrayList(0));\r\n+            c = (Collection) q.getResultList();\r\n+            assertEquals(0, c.size());\r\n+            q.closeAll();\r\n+        }\r\n+        finally {\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    public void testDFGFieldsLoaded1() {\r\n+        dfgFieldsLoadedHelper(false);\r\n+    }\r\n+\r\n+    public void testDFGFieldsLoaded2() {\r\n+        dfgFieldsLoadedHelper(true);\r\n+    }\r\n+\r\n+    public void dfgFieldsLoadedHelper(boolean related) {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        startTx(em);\r\n+        OpenJPAQuery q;\r\n+        Collection c;\r\n+        try {\r\n+\r\n+            q = em.createQuery(\r\n+                \"select a FROM \" + CacheObjectA.class.getSimpleName()\r\n+                    + \" a where a.name = :pName\").setParameter(\"pName\",\r\n+                ORIG_NAME);\r\n+\r\n+            c = new ArrayList((Collection) q.getResultList());\r\n+            assertEquals(1, c.size());\r\n+            CacheObjectA a = (CacheObjectA) c.iterator().next();\r\n+            if (related)\r\n+                a.getRelatedArray();\r\n+            em.detach(a);\r\n+            assertEquals(ORIG_NAME, a.getName());\r\n+            q.closeAll();\r\n+        }\r\n+        finally {\r\n+            rollbackTx(em);\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+\r\n+    // FIXME Seetha Sep 26,2006\r\n+    /*\r\n+      * public void testQueriesAfterModificationAreNotInCache() {\r\n+      * OpenJPAEntityManager em = (OpenJPAEntityManager)\r\n+      * factory.createEntityManager(); OpenJPAEntityManager em2 =\r\n+      * (OpenJPAEntityManager) factory.createEntityManager();\r\n+      *\r\n+      * //FIXME Seetha Sep 26,2006 //em.setIgnoreCache(false);\r\n+      * //em2.setIgnoreCache(false); ((FetchPlan) em.getFetchPlan()).\r\n+      * setFlushBeforeQueries(FetchPlan.FLUSH_TRUE); ((FetchPlan)\r\n+      * em2.getFetchPlan()). setFlushBeforeQueries(FetchPlan.FLUSH_TRUE);\r\n+      *\r\n+      * try { startTx(em); CacheObjectE e = new\r\n+      * CacheObjectE(\"e\"); em.persist(e); endTx(em,\r\n+      * ());\r\n+      *\r\n+      * startTx(em);\r\n+      *  // first, a query that should get into the cache. Broker broker =\r\n+      * JPAFacadeHelper.toBroker(em); org.apache.openjpa.kernel.Query q =\r\n+      * broker.newQuery(JPQLParser.LANG_JPQL, CacheObjectE.class, \"str ==\r\n+      * \\\"e\\\"\"); Collection c = (Collection) q.execute(); for (Iterator iter =\r\n+      * c.iterator(); iter.hasNext();) iter.next();\r\n+      *\r\n+      * assertEquals(1, c.size()); assertInCache(q, Boolean.TRUE);\r\n+      *\r\n+      * Broker broker2 = JPAFacadeHelper.toBroker(em2);\r\n+      * org.apache.openjpa.kernel.Query q2 = broker2.newQuery(q.getLanguage(),\r\n+      * q);\r\n+      *  // make some modifications and look again. Should return // two results.\r\n+      * e = new CacheObjectE(\"e\"); em.persist(e);\r\n+      *\r\n+      * q = broker.newQuery(JPQLParser.LANG_JPQL, CacheObjectE.class, \"str ==\r\n+      * \\\"e\\\"\"); c = (Collection) q.execute(); assertEquals(2, c.size()); for\r\n+      * (Iterator iter = c.iterator(); iter.hasNext();) iter.next();\r\n+      *  // original query should still be in cache assertInCache(q2,\r\n+      * Boolean.TRUE);\r\n+      *\r\n+      * Collection c2 = (Collection) q2.execute(); assertEquals(1, c2.size());\r\n+      *  // new query should not make it into cache\r\n+      *\r\n+      * q = broker .newQuery(JPQLParser.LANG_JPQL, CacheObjectE.class, null); c =\r\n+      * (Collection) q.execute(); assertEquals(2, c.size()); for (Iterator iter =\r\n+      * c.iterator(); iter.hasNext();) iter.next();\r\n+      *\r\n+      * assertInCache(q, Boolean.FALSE); } finally {\r\n+      * rollbackTx(em);\r\n+      * endEm(em);\r\n+      * endEm(em2); } }\r\n+      */\r\n+\r\n+    public void testCachedQueryClosureReleasesResources() {\r\n+        // PersistenceManagerFactory factory =\r\n+        // KodoHelper.createEntityManagerFactory ();\r\n+        EntityManager initEm = factory.createEntityManager();\r\n+        startTx(initEm);\r\n+        CacheObjectE e = new CacheObjectE(\"e\");\r\n+        initEm.persist(e);\r\n+        endTx(initEm);\r\n+        endEm(initEm);\r\n+\r\n+        Broker broker = JPAFacadeHelper.toBrokerFactory(factory).newBroker();\r\n+        org.apache.openjpa.kernel.Query q = broker.newQuery(\r\n+            JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+            + CacheObjectE.class.getSimpleName()\r\n+            + \" a where a.str = 'e'\");\r\n+        Collection c = (Collection) q.execute();\r\n+        for (Iterator iter = c.iterator(); iter.hasNext();)\r\n+            iter.next();\r\n+\r\n+        assertEquals(1, c.size());\r\n+        assertInCache(q, Boolean.TRUE);\r\n+\r\n+        ImplHelper.close(c);\r\n+\r\n+        broker.close();\r\n+    }\r\n+\r\n+    public void testMutableSCOsAreConverted() {\r\n+        OpenJPAEntityManager em0 = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+        OpenJPAEntityManager em1 = (OpenJPAEntityManager) factory\r\n+            .createEntityManager();\r\n+\r\n+        startTx(em0);\r\n+        CacheObjectA a = (CacheObjectA) em0.find(CacheObjectA.class, oid);\r\n+\r\n+        Date d = new Date();\r\n+        a.setDate(d);\r\n+\r\n+        endTx(em0);\r\n+        DataCache cache = cacheManager(factory).getDataCache(\r\n+            DataCache.NAME_DEFAULT, false);\r\n+        assertTrue(cache.contains(oidwithclass));\r\n+        cache.remove(oidwithclass);\r\n+\r\n+        a = (CacheObjectA) em1.find(CacheObjectA.class, oid);\r\n+        assertTrue(cache.contains(oidwithclass));\r\n+\r\n+        try {\r\n+            PCData data = cache.get(oidwithclass);\r\n+            ClassMetaData meta =\r\n+                ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence\r\n+                    .cast(factory)).getConfiguration()\r\n+                    .getMetaDataRepositoryInstance().getMetaData(a.getClass(),\r\n+                    null, false);\r\n+            FieldMetaData fmd = meta.getField(\"date\");\r\n+            d = (Date) data.getData(fmd.getIndex());\r\n+            Broker broker = JPAFacadeHelper.toBroker(em1);\r\n+            OpenJPAStateManager sm = broker.getStateManager(a);\r\n+            assertTrue(sm == ((ProxyDate) a.getDate()).getOwner());\r\n+            assertEquals(Date.class, d.getClass());\r\n+        }\r\n+        finally {\r\n+            endEm(em0);\r\n+            endEm(em1);\r\n+        }\r\n+    }\r\n+\r\n+    public void testEmptyResultsAreCached() {\r\n+        Broker broker = JPAFacadeHelper.toBrokerFactory(factory).newBroker();\r\n+        org.apache.openjpa.kernel.Query q = broker.newQuery(\r\n+            JPQLParser.LANG_JPQL, \"Select a FROM \"\r\n+            + CacheObjectAChild1.class.getSimpleName()\r\n+            + \" a where a.name = 'testEmptyResultsAreCached'\");\r\n+        Collection c = (Collection) q.execute();\r\n+        assertEquals(0, c.size());\r\n+        assertInCache(q, Boolean.TRUE);\r\n+        broker.close();\r\n+    }\r\n+\r\n+    private void doassertTrue(EntityManager em, String name, int age)\r\n+        throws Exception {\r\n+        CacheObjectA a = (CacheObjectA) em.find(CacheObjectA.class, oid);\r\n+        assertTrue(name.equals(a.getName()));\r\n+        assertTrue(a.getAge() == age);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private void assertNew(CacheObjectA a) {\r\n+        assertTrue(NEW_NAME.equals(a.getName()));\r\n+        assertTrue(ORIG_AGE == a.getAge());\r\n+    }\r\n+\r\n+    private void assertOld(CacheObjectA a) {\r\n+        assertTrue(ORIG_NAME.equals(a.getName()));\r\n+        assertTrue(ORIG_AGE == a.getAge());\r\n+    }\r\n+\r\n+    private DataCacheManager cacheManager(OpenJPAEntityManagerFactory factory) {\r\n+        return CacheTestHelper\r\n+            .cacheManager(JPAFacadeHelper.toBrokerFactory(factory));\r\n+    }\r\n+\r\n+    private void close(EntityManager em) {\r\n+        rollbackTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private void close(Broker broker) {\r\n+        if (broker.isActive())\r\n+            broker.rollback();\r\n+        broker.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) throws Exception {\r\n+        for (int i = 0; i < args.length; i++) {\r\n+            String type = args[i];\r\n+\r\n+            CacheTest c;\r\n+            if (type.equals(\"tcp\")) {\r\n+                c = new DistributedCacheTest(\"time test\",\r\n+                    ConcurrentDataCache.class);\r\n+            } else if (type.equals(\"jms\")) {\r\n+                c = new DistributedCacheTest(\"time test\",\r\n+                    ConcurrentDataCache.class);\r\n+            } else {\r\n+                c = new TestLocalCache(\"time test\");\r\n+            }\r\n+\r\n+            c.setUp();\r\n+            long start = System.currentTimeMillis();\r\n+            int count = 1000;\r\n+            for (int j = 0; j < count; j++) {\r\n+                c.doassertTrue(c.factory.createEntityManager(), NEW_NAME,\r\n+                    ORIG_AGE);\r\n+            }\r\n+            System.out.println(count + \" iterations in \"\r\n+                + (System.currentTimeMillis() - start) + \" millis\");\r\n+            c.tearDown();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"1dd52512e5708072b5b48e8849e7d3e5cac9e921","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestBroker.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestBroker.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestBroker.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,74 @@\n+//This class access the private class QueryCacheStoreQuery.\r\n+//So this has to be in kodo.datacache package\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.datacache.QueryCacheStoreQuery.CachedList;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerImpl;\r\n+import org.apache.openjpa.kernel.QueryImpl;\r\n+import org.apache.openjpa.kernel.StoreQuery;\r\n+import org.apache.openjpa.lib.rop.ListResultList;\r\n+import org.apache.openjpa.lib.rop.ListResultObjectProvider;\r\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * Used to mark cached query results for testing.\r\n+ * </p>\r\n+ */\r\n+public class CacheTestBroker extends BrokerImpl {\r\n+\r\n+    protected QueryImpl newQueryImpl(String language, StoreQuery sq) {\r\n+        return new CacheTestQuery(this, language, sq);\r\n+    }\r\n+\r\n+    public static class CachedQueryResult extends ListResultList {\r\n+\r\n+        public CachedQueryResult(List list) {\r\n+            super(list);\r\n+        }\r\n+    }\r\n+\r\n+    private static class CacheTestQuery extends QueryImpl {\r\n+\r\n+        public CacheTestQuery(Broker broker, String language,\r\n+            StoreQuery query) {\r\n+            super(broker, language, query);\r\n+        }\r\n+\r\n+        protected Object toResult(StoreQuery q, StoreQuery.Executor ex,\r\n+            ResultObjectProvider rop, StoreQuery.Range range)\r\n+            throws Exception {\r\n+            boolean cached = rop instanceof ListResultObjectProvider\r\n+                && (((ListResultObjectProvider) rop)\r\n+                .getDelegate() instanceof CachedList ||\r\n+                ((ListResultObjectProvider) rop)\r\n+                    .getDelegate() == Collections.EMPTY_LIST);\r\n+            Object res = super.toResult(q, ex, rop, range);\r\n+            if (cached && res instanceof List)\r\n+                return new CachedQueryResult((List) res);\r\n+            return res;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"92a8689b77d55a62512320145f2edb5d52cdc16a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestHelper.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestHelper.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestHelper.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.NoSuchElementException;\r\n+\r\n+import org.apache.openjpa.datacache.DataCache;\r\n+import org.apache.openjpa.datacache.QueryCache;\r\n+import org.apache.openjpa.datacache.QueryKey;\r\n+import org.apache.openjpa.datacache.DataCacheManager;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+class CacheTestHelper {\r\n+\r\n+    static void checkCache(AbstractTestCase tc, DataCache cache, Object[] ids,\r\n+        boolean[] stati) {\r\n+        for (int i = 0; i < ids.length; i++) {\r\n+            if (stati[i])\r\n+                tc.assertTrue(\"id \" + i + \" (\" + ids[i]\r\n+                    + \") was not in cache; should have been\",\r\n+                    cache.contains(ids[i]));\r\n+            else\r\n+                tc.assertFalse(\"id \" + i + \" (\" + ids[i]\r\n+                    + \") was in cache; should not have been\",\r\n+                    cache.contains(ids[i]));\r\n+        }\r\n+    }\r\n+\r\n+    static void assertInCache(AbstractTestCase tc, Query q, Boolean inCache) {\r\n+        assertInCache(tc, q, inCache, new Object[0]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test whether the given query has valid cached results.\r\n+     *\r\n+     * @param inCache if {@link Boolean#TRUE}, the query must have valid\r\n+     * cached results; if {@link Boolean#FALSE} the query\r\n+     * must not have any cached results; if null the\r\n+     * query may have cached results, but they cannot be\r\n+     * valid (i.e. they can't be returned to the user)\r\n+     */\r\n+    static void assertInCache(AbstractTestCase tc, Query query, Boolean inCache,\r\n+        Object[] args) {\r\n+        QueryKey qk = QueryKey.newInstance(query, args);\r\n+        Broker broker = query.getBroker();\r\n+        BrokerFactory factory = broker.getBrokerFactory();\r\n+\r\n+        QueryCache qc = cacheManager(factory).getSystemQueryCache();\r\n+        if (inCache == Boolean.FALSE && qc.get(qk) != null) {\r\n+            tc.fail(\"query should not be in cache; was.\");\r\n+        } else if (inCache == Boolean.TRUE || (inCache == null\r\n+            && qc.get(qk) != null)) {\r\n+            Object res = (args == null) ? query.execute()\r\n+                : query.execute(args);\r\n+            if (inCache == Boolean.TRUE &&\r\n+                !isCachedResult(res, inCache, query.getBroker()))\r\n+                tc.fail(\"query should be in cache; was not.\");\r\n+            else if (inCache == null &&\r\n+                isCachedResult(res, inCache, query.getBroker()))\r\n+                tc.fail(\"query should not be returned to user; was.\");\r\n+            query.closeAll();\r\n+        }\r\n+    }\r\n+\r\n+    private static boolean isCachedResult(Object res, Boolean expected,\r\n+        Broker broker) {\r\n+        // we can only check for a CachedQueryResult if the\r\n+        // Broker was configured to be a CacheTestBroker\r\n+        if (!(broker instanceof CacheTestBroker))\r\n+            throw new IllegalArgumentException(\"Broker was not set to be \"\r\n+                + \"a CacheTestBroker, making it impossible to verify \"\r\n+                + \"if query result is cached\");\r\n+\r\n+        if (res instanceof Collection)\r\n+            return res instanceof CacheTestBroker.CachedQueryResult;\r\n+        // no way to tell if unique results from cache\r\n+        return expected.booleanValue();\r\n+    }\r\n+\r\n+    static void iterate(Collection c) {\r\n+        // iterate through the collection so that the results have an\r\n+        // opportunity to register themselves with the PM.\r\n+        int count = 0;\r\n+        for (Iterator iter = c.iterator(); iter.hasNext();) {\r\n+            try {\r\n+                count++;\r\n+                iter.next();\r\n+            } catch (NoSuchElementException e) {\r\n+                throw e;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    static DataCacheManager cacheManager(BrokerFactory factory) {\r\n+        return factory.getConfiguration().getDataCacheManagerInstance();\r\n+    }\r\n+}\r"},{"sha":"c77fa7c9cbadd529d8037c49bd7dcb1d9f508ed0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+\r\n+/**\r\n+ * Distributed cache test.\r\n+ */\r\n+public class DistributedCacheTest\r\n+    extends CacheTest {\r\n+\r\n+    private static String cache = null;\r\n+    private static String queryCache = null;\r\n+    private static String provider = null;\r\n+\r\n+    public static void setCache(String plugin) {\r\n+        cache = plugin;\r\n+    }\r\n+\r\n+    public static void setQueryCache(String plugin) {\r\n+        queryCache = plugin;\r\n+    }\r\n+\r\n+    public static void setRemoteCommitProvider(String plugin) {\r\n+        provider = plugin;\r\n+    }\r\n+\r\n+    public DistributedCacheTest(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public DistributedCacheTest(String test, Class testClass) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    protected String[] getConfs() {\r\n+        return getConfs(true);\r\n+    }\r\n+\r\n+    protected String[] getConfs2() {\r\n+        return getConfs(false);\r\n+    }\r\n+\r\n+    protected String[] getConfs(boolean confs1) {\r\n+        String fullProvider = provider;\r\n+        String props = Configurations.getProperties\r\n+            (System.getProperty(\"openjpa.RemoteCommitProvider\"));\r\n+        if (props == null || props.length() == 0)\r\n+            props = Configurations.getProperties(provider);\r\n+        else\r\n+            fullProvider = Configurations.getPlugin(provider, props);\r\n+        if (props == null || props.length() == 0)\r\n+            throw new IllegalStateException\r\n+                (\"must specify -Dkodo.RemoteCommitProvider=?\");\r\n+\r\n+        return new String[]{\r\n+            // use this property to differentiate factory\r\n+            \"openjpa.DataCache\", cache + \", true(Name=\" + confs1 + \")\",\r\n+            \"openjpa.QueryCache\", queryCache,\r\n+            \"openjpa.RemoteCommitProvider\", fullProvider,\r\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n+        };\r\n+    }\r\n+}\r"},{"sha":"7b8f4083b1defe0e25a493c2d5bc42efa9ebcd8c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+/**\r\n+ * Multi-threaded cache load test for running in the autobuild.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public class TestCacheMultiThreadedLoad\r\n+    extends CacheLoadTest {\r\n+\r\n+    public TestCacheMultiThreadedLoad() {\r\n+        // pared down iteration and thread count for running in the\r\n+        // autobbuild\r\n+        interationCount = 400;\r\n+        threadCount = 10;\r\n+    }\r\n+\r\n+    public boolean skipTest() {\r\n+        return true;\r\n+    }\r\n+}\r\n+\r\n+\r"},{"sha":"0b63191b72cfe99a443b5a6d742a8d3ea725bec7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+/**\r\n+ * Test data caching across multiple factories in the same JVM, using\r\n+ * the single-JVM commit provider to communicate updates..\r\n+ */\r\n+public class TestConcurrentDataCache\r\n+    extends CacheTest {\r\n+\r\n+    public TestConcurrentDataCache(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    protected String[] getConfs() {\r\n+        return new String[]{\r\n+            // the second cache is there solely to differentiate between\r\n+            // this PMF and the PMF created from confs2 below\r\n+            \"openjpa.DataCache\",\r\n+            \"concurrent, concurrent(Name=differentiatingProperty1)\",\r\n+            \"openjpa.QueryCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n+        };\r\n+    }\r\n+\r\n+    protected String[] getConfs2() {\r\n+        return new String[]{\r\n+            // the second cache is there solely to differentiate between\r\n+            // this PMF and the PMF created from confs above\r\n+            \"openjpa.DataCache\",\r\n+            \"concurrent, concurrent(Name=differentiatingProperty2)\",\r\n+            \"openjpa.QueryCache\", \"concurrent\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n+        };\r\n+    }\r\n+}\r"},{"sha":"ba301e0578e27adb17979fc7477ca78dbc8737c1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+/**\r\n+ * Extend the single-JVM cache test to test dynamic pcdata.\r\n+ */\r\n+public class TestDataCachePCDataGenerator\r\n+    extends TestSJVMCache {\r\n+\r\n+    public TestDataCachePCDataGenerator(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    protected String[] getConfs() {\r\n+        return addGenerator(super.getConfs());\r\n+    }\r\n+\r\n+    protected String[] getConfs2() {\r\n+        return addGenerator(super.getConfs2());\r\n+    }\r\n+\r\n+    private String[] addGenerator(String[] confs) {\r\n+        String[] copy = new String[confs.length + 2];\r\n+        System.arraycopy(confs, 0, copy, 0, confs.length);\r\n+        copy[confs.length] = \"openjpa.DynamicDataStructs\";\r\n+        copy[confs.length + 1] = \"true\";\r\n+        return copy;\r\n+    }\r\n+}\r"},{"sha":"6f3b31ccb2dcee03b96b2163c19c0d36d0c88682","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","status":"added","additions":228,"deletions":0,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,228 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.datacache.DataCache;\r\n+import org.apache.openjpa.datacache.DataCacheScheduler;\r\n+import org.apache.openjpa.datacache.ConcurrentDataCache;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+public class TestDataCacheScheduler\r\n+    extends AbstractTestCase {\r\n+\r\n+    private static final String MINUTES = getMinutes();\r\n+\r\n+    public TestDataCacheScheduler(String str) {\r\n+        super(str, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    private static String getMinutes() {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < 60; i++) {\r\n+            if (i % 2 == 0)\r\n+                buf.append(i).append(',');\r\n+        }\r\n+        return buf.toString();\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(ScheduledEviction.class);\r\n+    }\r\n+\r\n+    public void testRuntime()\r\n+        throws Exception {\r\n+        String sched = MINUTES + \" * * * *\";\r\n+        Map propsMap = new HashMap();\r\n+        propsMap\r\n+            .put(\"openjpa.DataCache\", \"true(EvictionSchedule=\\\"\" + sched + \"\\\")\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n+        OpenJPAEntityManagerFactory emf =\r\n+            (OpenJPAEntityManagerFactory) getEmf(propsMap);\r\n+\r\n+        ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\r\n+            .getConfiguration().getDataCacheManagerInstance()\r\n+            .getDataCacheScheduler().setInterval(1);\r\n+        DataCache cache = JPAFacadeHelper.getMetaData(emf,\r\n+            ScheduledEviction.class).getDataCache();\r\n+\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) emf\r\n+            .createEntityManager();\r\n+        startTx(em);\r\n+        ScheduledEviction pc = new ScheduledEviction(\"Foo\");\r\n+        em.persist(pc);\r\n+        Object oid = em.getObjectId(pc);\r\n+        Object oidwithclass = new Id(ScheduledEviction.class, oid.toString());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        cache.clear();// clear and wait until next run.\r\n+        Calendar cal = Calendar.getInstance();\r\n+        cal.setTime(new Date());\r\n+        if (cal.get(Calendar.MINUTE) % 2 == 0)\r\n+            Thread.currentThread().sleep\r\n+                ((60 - cal.get(Calendar.SECOND)) * 1000);\r\n+        cal.setTime(new Date());\r\n+        assertTrue(cal.get(Calendar.MINUTE) % 2 == 1);\r\n+        em = (OpenJPAEntityManager) emf.createEntityManager();\r\n+        em.find(ScheduledEviction.class, oid);\r\n+        endEm(em);\r\n+        assertTrue(cache.contains(oidwithclass));\r\n+\r\n+        Thread.currentThread().sleep(130 * 1000);\r\n+        assertFalse(cache.contains(oidwithclass));\r\n+        emf.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * too slow ! *\r\n+     */\r\n+    //FIXME Seetha Sep 26,2006\r\n+    /*public void XXXtestRunnable()\r\n+        throws Exception {\r\n+        KodoPersistenceManager pm = getPM();\r\n+        OpenJPAConfiguration conf = pm.getConfiguration();\r\n+        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\r\n+        scheduler.setInterval(1);\r\n+\r\n+        Calendar cal = Calendar.getInstance();\r\n+        cal.setTime(new Date());\r\n+        int minute = (cal.get(Calendar.MINUTE) + 2) % 60;\r\n+        StringBuffer sched = new StringBuffer();\r\n+        sched.append(minute).append(' ');\r\n+        sched.append(\"* \");\r\n+        sched.append(\"* \");\r\n+        sched.append(\"* \");\r\n+        sched.append(\"* \");\r\n+        DummyCache cache = new DummyCache();\r\n+        scheduler.scheduleEviction(cache, sched.toString());\r\n+\r\n+        Thread thread = new Thread(scheduler);\r\n+        thread.setDaemon(true);\r\n+        thread.start();\r\n+        // test that it did not run yet...\r\n+        Thread.currentThread().sleep(90 * 1000); // 90 seconds\r\n+        assertEquals(0, cache.clearCount);\r\n+        // test that it ran...\r\n+        Thread.currentThread().sleep(45 * 1000); // 45 seconds\r\n+        assertEquals(1, cache.clearCount);\r\n+        // test that it wasn't too eager\r\n+        Thread.currentThread().sleep(50 * 1000); // 90 seconds\r\n+        assertEquals(1, cache.clearCount);\r\n+        scheduler.stop();\r\n+    }*/\r\n+\r\n+    /**\r\n+     * too slow *\r\n+     */\r\n+    /* public void XXXtestMonth()\r\n+        throws Exception {\r\n+        Calendar cal = Calendar.getInstance();\r\n+        cal.setTime(new Date());\r\n+        int month = cal.get(Calendar.MONTH);\r\n+        int month2 = month + 1;\r\n+        if (month2 > 12)\r\n+            month2 = 1;\r\n+        doTest(\"* * \" + month + \" *\", \"* * \" + month2 + \" *\");\r\n+    }*/\r\n+\r\n+    /**\r\n+     * too slow *\r\n+     */\r\n+    /* public void XXXtestDayOfMonth()\r\n+        throws Exception {\r\n+        Calendar cal = Calendar.getInstance();\r\n+        cal.setTime(new Date());\r\n+        int dom = cal.get(Calendar.DAY_OF_MONTH);\r\n+        doTest(\"* \" + dom + \" * *\", \"* \" + (dom % 12 + 1) + \" * *\");\r\n+    }*/\r\n+    public void testDayOfWeek()\r\n+        throws Exception {\r\n+        Calendar cal = Calendar.getInstance();\r\n+        cal.setTime(new Date());\r\n+        int day = cal.get(Calendar.DAY_OF_WEEK);\r\n+        doTest(\"* * * \" + day, \"* * * \" + (day % 7 + 1));\r\n+    }\r\n+\r\n+    public void testHour()\r\n+        throws Exception {\r\n+        Calendar cal = Calendar.getInstance();\r\n+        cal.setTime(new Date());\r\n+        int hour = cal.get(Calendar.HOUR_OF_DAY);\r\n+        doTest(hour + \" * * *\", ((hour + 1) % 24) + \" * * *\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Pass in 4 out of 5 tokens.\r\n+     */\r\n+    private void doTest(String valid, String invalid)\r\n+        throws Exception {\r\n+\r\n+        OpenJPAEntityManagerFactory emf =\r\n+            (OpenJPAEntityManagerFactory) getEmf();\r\n+        OpenJPAConfiguration conf =\r\n+            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\r\n+                .getConfiguration();\r\n+\r\n+        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\r\n+        scheduler.setInterval(1);\r\n+\r\n+        Calendar cal = Calendar.getInstance();\r\n+        cal.setTime(new Date());\r\n+        String sched = ((cal.get(Calendar.MINUTE) + 1) % 60) + \" \";\r\n+        DummyCache validCache = new DummyCache();\r\n+        scheduler.scheduleEviction(validCache, sched + valid);\r\n+        DummyCache invalidCache = new DummyCache();\r\n+        scheduler.scheduleEviction(invalidCache, sched + invalid);\r\n+        Thread thread = new Thread(scheduler);\r\n+        thread.setDaemon(true);\r\n+        thread.start();\r\n+        // test that it did not run yet...\r\n+        Thread.currentThread().sleep(70 * 1000); // 70 seconds\r\n+        scheduler.stop();\r\n+//        assertEquals(2, validCache.clearCount);\r\n+        assertTrue(\"Wrong invocation count: \" + validCache.clearCount,\r\n+            validCache.clearCount == 1 || validCache.clearCount == 2);\r\n+        assertEquals(0, invalidCache.clearCount);\r\n+    }\r\n+\r\n+    private class DummyCache extends ConcurrentDataCache {\r\n+\r\n+        int clearCount = 0;\r\n+\r\n+        public void clear() {\r\n+            clearCount++;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"820d55fbbab1eae02345235e5f2d2e8ffcfb8c82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","status":"added","additions":357,"deletions":0,"changes":357,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,357 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.datacache.DataCache;\r\n+import org.apache.openjpa.event.TCPRemoteCommitProvider;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+public class TestDistributedKodoDataCache extends AbstractTestCase {\r\n+\r\n+    // We want more than 1 instance of each type of class.\r\n+    private static final int NUM_OBJECTS = 4;\r\n+\r\n+    private Object[] _runtime1sOids;\r\n+\r\n+    private Object[] _runtime2sOids;\r\n+\r\n+    private Object spec_oid;\r\n+\r\n+    public TestDistributedKodoDataCache(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(RuntimeTest2.class);\r\n+    }\r\n+\r\n+    private interface ChangeOperation {\r\n+\r\n+        public String getName();\r\n+\r\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n+            boolean asLarge);\r\n+    }\r\n+\r\n+    private class performAsModify implements ChangeOperation {\r\n+\r\n+        public String getName() {\r\n+            return \"Modify SpecialRuntimeTest1\";\r\n+        }\r\n+\r\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n+            boolean asLarge) {\r\n+            OpenJPAEntityManager pm;\r\n+            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\r\n+            if (asLarge)\r\n+                //pm.setLargeTransaction(true);\r\n+                pm.setTrackChangesByType(true);\r\n+            startTx(pm);\r\n+            RuntimeTest1 special = pm.find(RuntimeTest1.class, spec_oid);\r\n+            assertNotNull(special);\r\n+            special.setStringField(\"SpeicalRuntimeTest1_MODIFIED\");\r\n+\r\n+            endTx(pm);\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    private class performAsDelete implements ChangeOperation {\r\n+\r\n+        public String getName() {\r\n+            return \"Delete SpecialRuntimeTest1\";\r\n+        }\r\n+\r\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n+            boolean asLarge) {\r\n+            OpenJPAEntityManager pm;\r\n+            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\r\n+            if (asLarge)\r\n+                //pm.setLargeTransaction(true);\r\n+                pm.setTrackChangesByType(true);\r\n+            startTx(pm);\r\n+            RuntimeTest1 specialObj = pm.find(RuntimeTest1.class, spec_oid);\r\n+            assertNotNull(specialObj);\r\n+\r\n+            pm.remove(specialObj);\r\n+\r\n+            endTx(pm);\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testNormalTransAndDataCacheDelete() {\r\n+        coreTestTransAndChange(new performAsDelete(), false, true);\r\n+    }\r\n+\r\n+    public void testNormalTransAndDataCacheModify() {\r\n+        coreTestTransAndChange(new performAsModify(), false, false);\r\n+    }\r\n+\r\n+    public void testLargeTransAndDataCacheDelete() {\r\n+        coreTestTransAndChange(new performAsDelete(), true, true);\r\n+    }\r\n+\r\n+    public void testLargeTransAndDataCacheModify() {\r\n+        coreTestTransAndChange(new performAsModify(), true, false);\r\n+    }\r\n+\r\n+    public void coreTestTransAndChange(ChangeOperation changeOperation,\r\n+        boolean asLargeTransaction, boolean isDelete) {\r\n+        // Create two pmfs in a cluster that are using RCPTCP.\r\n+        OpenJPAEntityManagerFactory pmfSender = createDistinctFactory(\r\n+            TCPRemoteCommitProvider.class,\r\n+            \"Port=5636, Addresses=127.0.0.1:6636\");\r\n+        OpenJPAEntityManagerFactory pmfReceiver = createDistinctFactory(\r\n+            TCPRemoteCommitProvider.class,\r\n+            \"Port=6636, Addresses=127.0.0.1:5636\");\r\n+        // Get the datacaches from each pmf\r\n+        DataCache dcSender =\r\n+            ((OpenJPAEntityManagerFactorySPI) pmfSender).getConfiguration()\r\n+                .getDataCacheManagerInstance().getSystemDataCache();\r\n+        DataCache dcReceiver =\r\n+            ((OpenJPAEntityManagerFactorySPI) pmfReceiver).getConfiguration()\r\n+                .getDataCacheManagerInstance().getSystemDataCache();\r\n+\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(RuntimeTest2.class);\r\n+\r\n+        _runtime1sOids = null;\r\n+        _runtime2sOids = null;\r\n+\r\n+        String transType = \"normal\";\r\n+        String rcpType = \"OIDs\";\r\n+        if (asLargeTransaction) {\r\n+            transType = \"large\";\r\n+            rcpType = \"classes\";\r\n+        }\r\n+        System.out.println(\"-------------------\");\r\n+        System.out\r\n+            .println(\r\n+                \"2 PMFs created, acting as a cluster using ports 5636 and 6636\");\r\n+        System.out.println(\"Testing scenario:\");\r\n+        System.out\r\n+            .println(\"  1 Seed datastore with instances of RuntimeTest1 AND \"\r\n+                + \"RuntimeTest2 objs.\\n\"\r\n+                + \"  2 pmf2 fills its cache with both sets of objs.\\n\"\r\n+                + \"  3 pmf1 does a \"\r\n+                + transType\r\n+                + \" tx that invokes an operation of \"\r\n+                + changeOperation.getName()\r\n+                + \" to affect a single Runtime1 \\n\"\r\n+                + \"    assert that both pmf1 and pmf2's data caches dropped all\"\r\n+                + \"Runtime1s\");\r\n+        System.out.println(\"Remote commit event is transmiting \" + rcpType);\r\n+\r\n+        // Create runtimes1s and 2s.\r\n+        // Noraml transaction\r\n+        OpenJPAEntityManager pmSender = (OpenJPAEntityManager) pmfSender\r\n+            .createEntityManager();\r\n+        seedDataStore(pmSender, NUM_OBJECTS);\r\n+        endEm(pmSender);\r\n+\r\n+        // wait a bit so they get stored\r\n+        pause(1);\r\n+\r\n+        OpenJPAEntityManager pm2;\r\n+        pm2 = (OpenJPAEntityManager) pmfReceiver.createEntityManager();\r\n+        performLoadAll(pm2);\r\n+        endEm(pm2);\r\n+\r\n+        pmSender = (OpenJPAEntityManager) pmfSender.createEntityManager();\r\n+        performLoadAll(pmSender);\r\n+        endEm(pmSender);\r\n+\r\n+        // assert that pmf2's data cache now has all the Runtime1 and 2s.\r\n+        for (int i = 0; i < _runtime1sOids.length; i++) {\r\n+            assertTrue(dcReceiver.contains(\r\n+                Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n+        }\r\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n+            assertTrue(dcReceiver.contains(\r\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n+        }\r\n+\r\n+        // Modify or delete exactly 1 RuntimeTest1 object during a\r\n+        // largeTransaction\r\n+        changeOperation.operation(pmfSender, asLargeTransaction);\r\n+\r\n+        // assert that pmf1's data cache now only has Runtime2 objects\r\n+        if (asLargeTransaction) {\r\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n+                assertFalse(dcSender.contains(\r\n+                    Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n+            }\r\n+        } else {\r\n+            // Normal transaction\r\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n+                if (isDelete && i == 0) {\r\n+                    assertFalse(dcSender.contains(\r\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n+                } else {\r\n+                    // modified the first elemnt, which just updated it.\r\n+                    // (for Kodo's data cache).\r\n+                    assertTrue(dcSender.contains(\r\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n+                }\r\n+            }\r\n+        }\r\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n+            assertTrue(dcSender.contains(\r\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n+        }\r\n+        // wait a tiny bit so the rce propagates\r\n+        pause(2);\r\n+        // assert the pmf2's data cache also now only has Runtime2 objects\r\n+        if (asLargeTransaction) {\r\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n+                assertFalse(dcReceiver.contains(Id.newInstance(\r\n+                    RuntimeTest1.class, _runtime1sOids[i]))); //failing here\r\n+            }\r\n+        } else {\r\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n+                if (i == 0) {\r\n+                    assertFalse(dcReceiver.contains(Id.newInstance(\r\n+                        RuntimeTest1.class,\r\n+                        _runtime1sOids[i])));  //failing here\r\n+                } else {\r\n+                    assertTrue(dcReceiver.contains(\r\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n+                }\r\n+            }\r\n+        }\r\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n+            assertTrue(dcReceiver.contains(\r\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n+        }\r\n+\r\n+        // shutdown\r\n+        pmfSender.close();\r\n+        pmfReceiver.close();\r\n+    }\r\n+\r\n+    protected void performLoadAll(OpenJPAEntityManager pm)\r\n+    // load in (and thus cache) all the 1s and 2s\r\n+    {\r\n+        startTx(pm);\r\n+        RuntimeTest1 temp1;\r\n+        Collection runtime1s = (Collection) pm\r\n+            .createQuery(\"SELECT a FROM RuntimeTest1 a\").getResultList();\r\n+\r\n+        for (Iterator itr = runtime1s.iterator(); itr.hasNext();)\r\n+            temp1 = (RuntimeTest1) itr.next();\r\n+        RuntimeTest2 temp2;\r\n+        Collection runtime2s = (Collection) pm\r\n+            .createQuery(\"SELECT a FROM RuntimeTest2 a\").getResultList();\r\n+\r\n+        for (Iterator itr = runtime2s.iterator(); itr.hasNext();)\r\n+            temp2 = (RuntimeTest2) itr.next();\r\n+        endTx(pm);\r\n+    }\r\n+\r\n+    protected void seedDataStore(OpenJPAEntityManager pm, int numObjects) {\r\n+        startTx(pm);\r\n+        // create objects\r\n+        RuntimeTest1[] persistables = new RuntimeTest1[numObjects];\r\n+        _runtime1sOids = new Object[numObjects];\r\n+        for (int i = 0; i < persistables.length; i++) {\r\n+            persistables[i] = new RuntimeTest1(\"foo #\" + i, i);\r\n+            pm.persist(persistables[i]);\r\n+            _runtime1sOids[i] = pm.getObjectId(persistables[i]);\r\n+            if (i == 0) {\r\n+                persistables[i].setStringField(\"SpecialRuntimeTest1\");\r\n+                spec_oid = pm.getObjectId(persistables[i]);\r\n+            }\r\n+        }\r\n+        RuntimeTest2[] persistables2 = new RuntimeTest2[numObjects];\r\n+        _runtime2sOids = new Object[numObjects];\r\n+        for (int i = 0; i < persistables2.length; i++) {\r\n+            persistables2[i] = new RuntimeTest2(\"bar #\" + i, i);\r\n+            pm.persist(persistables2[i]);\r\n+            _runtime2sOids[i] = pm.getObjectId(persistables2[i]);\r\n+        }\r\n+        endTx(pm);\r\n+    }\r\n+\r\n+    static int _fetchGroupSerial = 0;\r\n+\r\n+    protected OpenJPAEntityManagerFactory createDistinctFactory(\r\n+        Class providerClass, String classProps1) {\r\n+        Map propsMap;\r\n+\r\n+        if (providerClass != null) {\r\n+            // This test is for the combination of RCP, largeTrans,\r\n+            // and Kodo's builtin DataCache.\r\n+            // use this property to differentiate the factory\r\n+\r\n+            propsMap = new HashMap();\r\n+            propsMap.put(\"openjpa.DataCache\", \"lru\");\r\n+            propsMap.put(\"openjpa.RemoteCommitProvider\", Configurations.getPlugin(\r\n+                providerClass.getName(), classProps1));\r\n+            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\r\n+                + _fetchGroupSerial);\r\n+        } else {\r\n+            // No RCP\r\n+            propsMap = new HashMap();\r\n+            propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\r\n+                + _fetchGroupSerial);\r\n+        }\r\n+        _fetchGroupSerial += 1;\r\n+\r\n+        return (OpenJPAEntityManagerFactory) getEmf(propsMap);\r\n+    }\r\n+\r\n+    private void pause(double seconds) {\r\n+        try {\r\n+            Thread.currentThread().yield();\r\n+            Thread.currentThread().sleep((int) seconds * 1000);\r\n+        }\r\n+        catch (Exception e) {\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/*\r\n+ remove all Runteim1, and 2\r\n+ create a few 1 and 2s\r\n+ get them into the cache, assert\r\n+ large transaction, and modify a runtime2, assert cache only has runtime1s\r\n+\r\n+\r\n+ remove all Runteim1, and 2\r\n+ create a few 1 and 2s\r\n+ get them into the cache, assert\r\n+ large transaction, delete a runtime2, assert cache only has runteime1s\r\n+ */\r\n+\r"},{"sha":"d8cf929e0e4cff39f5967f1d04acc8fc09f596f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestFlushDataCache\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestFlushDataCache(String str) {\r\n+        super(str, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(FlushDataCacheObject.class);\r\n+    }\r\n+\r\n+    public void testQueryFlushPlusDataCache() {\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n+        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n+        //propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n+        EntityManagerFactory emf = getEmf(propsMap);\r\n+\r\n+        try {\r\n+\r\n+            //assertEquals(Class.forName(\"openjpa.datacache.CacheTestBroker\",true,emf.getClass().getClassLoader()).getClassLoader(),emf.getClass().getClassLoader());\r\n+            //Thread.currentThread().setContextClassLoader(emf.getClass().getClassLoader());\r\n+            Class.forName(\"org.apache.openjpa.persistence.datacache.CacheTestBroker\", true,\r\n+                Thread.currentThread().getContextClassLoader());\r\n+        } catch (Exception e) {\r\n+\r\n+        }\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        startTx(em);\r\n+        FlushDataCacheObject o = new FlushDataCacheObject();\r\n+        o.setString(\"foo\");\r\n+        em.persist(o);\r\n+        endTx(em);\r\n+        //Object oid = JDOHelper.getObjectId (o);\r\n+        endEm(em);\r\n+\r\n+        em = emf.createEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Collection c = (Collection) em.createQuery(\r\n+            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\r\n+                \" a where a.string = 'foo'\").getResultList();\r\n+\r\n+        assertEquals(1, c.size());\r\n+        em.remove(c.iterator().next());\r\n+\r\n+        c = (Collection) em.createQuery(\r\n+            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\r\n+                \" a where a.string = 'foo'\").getResultList();\r\n+        assertEquals(0, c.size());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testEmptyCommit() {\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n+        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n+        EntityManagerFactory emf = getEmf(propsMap);\r\n+        EntityManager em = emf.createEntityManager();\r\n+        startTx(em);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"32cd0fd5f3b20b8c23973f9370fcc1d4b7e1c9c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,134 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+\r\n+public class TestJPQL2Queries\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestJPQL2Queries(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    private BrokerFactory _factory;\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CacheObjectA.class);\r\n+\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n+        EntityManagerFactory emf = getEmf(propsMap);\r\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n+        Broker broker = _factory.newBroker();\r\n+        broker.begin();\r\n+        for (int i = 0; i < 50; i++)\r\n+            broker.persist(new CacheObjectAChild1(\"\", \"JPQL2Queries\", i),\r\n+                null);\r\n+        broker.commit();\r\n+        broker.close();\r\n+\r\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n+    }\r\n+\r\n+    public void tearDown()\r\n+        throws Exception {\r\n+        try {\r\n+            _factory.close();\r\n+        } catch (Exception e) {\r\n+        }\r\n+\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    public void testUpperRange() {\r\n+        rangeTestHelper(0, 10);\r\n+    }\r\n+\r\n+    public void testLowerRange() {\r\n+        rangeTestHelper(5, 50);\r\n+    }\r\n+\r\n+    public void testBothRanges() {\r\n+        rangeTestHelper(20, 28);\r\n+    }\r\n+\r\n+    private void rangeTestHelper(final int start, final int end) {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        q.setRange(start, end);\r\n+\r\n+        // should not yet be in the cache\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n+        Collection c = (Collection) q.execute();\r\n+\r\n+        // iterate the results. This will cause the query to be\r\n+        // enlisted in the cache.\r\n+        CacheTestHelper.iterate(c);\r\n+        assertEquals(end - start, c.size());\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        broker.close();\r\n+\r\n+        broker = _factory.newBroker();\r\n+        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        q.setRange(start, end);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+        c = (Collection) q.execute();\r\n+        assertEquals(end - start, c.size());\r\n+\r\n+        // now check if a smaller range is in cache\r\n+        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        q.setRange(start, end - 1);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n+        c = (Collection) q.execute();\r\n+        assertEquals(end - start - 1, c.size());\r\n+        broker.close();\r\n+    }\r\n+\r\n+    public void testResultClassIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        q.setResultType(Object.class);\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+    }\r\n+}\r"},{"sha":"1fd8f7893b6c84b930f46c1983954387219c113f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","status":"added","additions":472,"deletions":0,"changes":472,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,472 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+public class TestJPQL2ResultsAndResultClasses\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestJPQL2ResultsAndResultClasses(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    private BrokerFactory _factory;\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CacheObjectA.class);\r\n+        deleteAll(CacheObjectWithExternalizedFields.class);\r\n+\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n+        EntityManagerFactory emf =\r\n+            getEmf(propsMap);\r\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n+        Broker broker = _factory.newBroker();\r\n+        try {\r\n+            broker.begin();\r\n+        } catch (Exception e) {\r\n+            System.out.println(\r\n+                \"Exception in TestJPQL2ResultsAndResultClasses setup : \\n\" +\r\n+                    getStackTrace(e));\r\n+        }\r\n+\r\n+        int j = 0;\r\n+        for (int i = 0; i < 10; i++) {\r\n+            // make some common names so that GROUP BY is useful.\r\n+            if (i % 2 == 0)\r\n+                j++;\r\n+            CacheObjectA o;\r\n+            broker.persist(o = new CacheObjectAChild1(\"\", \"results-\" + j, i),\r\n+                null);\r\n+\r\n+            o.setDate(new Date());\r\n+            o.setDateArray(new Date[]{ new Date(10), new Date(20) });\r\n+\r\n+            if (i < 5)\r\n+                o.setRelatedB(new CacheObjectB());\r\n+        }\r\n+\r\n+        //Seetha Oct 30,2006\r\n+        //deleteAll closes the TX.  So use the local\r\n+        //deleteAll fn.\r\n+        //deleteAll(CacheObjectWithExternalizedFields.class,());\r\n+        //deleteAll(broker,CacheObjectWithExternalizedFields.class,true);\r\n+\r\n+        CacheObjectWithExternalizedFields o =\r\n+            new CacheObjectWithExternalizedFields();\r\n+        broker.persist(o, null);\r\n+        o.setCls(Broker.class);\r\n+\r\n+        broker.commit();\r\n+        broker.close();\r\n+\r\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n+    }\r\n+\r\n+    public void tearDown()\r\n+        throws Exception {\r\n+        _factory.close();\r\n+\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    public void testAggregateResultIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+\r\n+        Object o = q.execute();\r\n+        assertEquals(Long.class, o.getClass());\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        o = q.execute();\r\n+        assertEquals(Long.class, o.getClass());\r\n+    }\r\n+\r\n+    public void testAggregateNonUniqueResultIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        q.setUnique(false);\r\n+        List res = (List) q.execute();\r\n+        assertEquals(1, res.size());\r\n+        Object o = res.get(0);\r\n+        assertEquals(Long.class, o.getClass());\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        res = (List) q.execute();\r\n+        assertEquals(1, res.size());\r\n+        o = res.get(0);\r\n+        assertEquals(Long.class, o.getClass());\r\n+    }\r\n+\r\n+    public void testProjectionResultIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.age FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        Object o = c.iterator().next();\r\n+        assertEquals(Long.class, o.getClass());\r\n+    }\r\n+\r\n+    public void testProjectionOfThisIsCached() {\r\n+        // ##### need to test single projection\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        //CacheObjectAChild1.class, \"select this\");\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        Object o = c.iterator().next();\r\n+        assertEquals(CacheObjectAChild1.class, o.getClass());\r\n+        assertNotNull(broker.getObjectId(o));\r\n+    }\r\n+\r\n+    public void testProjectionResultWithThisIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        Object[] result = (Object[]) c.iterator().next();\r\n+        assertEquals(2, result.length);\r\n+        assertEquals(String.class, result[0].getClass());\r\n+        assertEquals(CacheObjectAChild1.class, result[1].getClass());\r\n+        assertNotNull(broker.getObjectId(result[1]));\r\n+    }\r\n+\r\n+    public void testNullProjectionValues() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.locale FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        assertNull(c.iterator().next());\r\n+    }\r\n+\r\n+    public void testNullAndNotNullProjectionValues() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker\r\n+                .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.locale FROM \" +\r\n+                    CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        Object[] result = (Object[]) c.iterator().next();\r\n+        assertEquals(2, result.length);\r\n+        assertEquals(String.class, result[0].getClass());\r\n+        assertNull(result[1]);\r\n+    }\r\n+\r\n+    public void XXXtestNullAggregateValues() {\r\n+        // ???\r\n+    }\r\n+\r\n+    public void testMultipleAggregateResultIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL,\r\n+                \"select max(a.age), avg(a.age), count(a.age) FROM \" +\r\n+                    CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+\r\n+        Object o = q.execute();\r\n+        assertEquals(Object[].class, o.getClass());\r\n+        assertEquals(3, ((Object[]) o).length);\r\n+        assertEquals(Long.class, ((Object[]) o)[0].getClass());\r\n+\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        o = q.execute();\r\n+        assertEquals(Object[].class, o.getClass());\r\n+        assertEquals(3, ((Object[]) o).length);\r\n+        assertEquals(Long.class, ((Object[]) o)[0].getClass());\r\n+    }\r\n+\r\n+    public void testFieldUsedTwice() {\r\n+        // Postgres bug\r\n+        Broker broker = _factory.newBroker();\r\n+        // group avoids postgres bug\r\n+        Query q = broker\r\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.age, avg(a.age) FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() +\r\n+                \" a  group by a.age\");\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+    }\r\n+\r\n+    public void testAggregateAndProjection() {\r\n+        // Postgres bug\r\n+        Broker broker = _factory.newBroker();\r\n+        // group avoids postgres bug\r\n+        Query q = broker\r\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.name, avg(a.age) FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() +\r\n+                \" a  group by a.name\");\r\n+\r\n+        List l = (List) q.execute();\r\n+        CacheTestHelper.iterate(l);\r\n+        assertEquals(Object[].class, l.get(0).getClass());\r\n+        assertEquals(2, ((Object[]) l.get(0)).length);\r\n+        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\r\n+\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        l = (List) q.execute();\r\n+        assertEquals(Object[].class, l.get(0).getClass());\r\n+        assertEquals(2, ((Object[]) l.get(0)).length);\r\n+        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\r\n+    }\r\n+\r\n+    //FIXME Seetha Dec 19,2006\r\n+    /*public void testMath() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL,\"select avg(a.age) FROM \"+\r\n+                    CacheObjectAChild1.class.getSimpleName()+\" a\");\r\n+        Number n = (Number) q.execute();\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+        n = (Number) q.execute();\r\n+    }*/\r\n+\r\n+    public void testResultClassIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+        q.setResultType(Object.class);\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+    }\r\n+\r\n+    public void testGroupingIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() +\r\n+                \" a  group by a.name\");\r\n+\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        Object o = c.iterator().next();\r\n+        assertEquals(Long.class, o.getClass());\r\n+    }\r\n+\r\n+    public void testAggregateProjectionGroupingIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL,\r\n+                \"select a.name, max(a.age) FROM \" +\r\n+                    CacheObjectAChild1.class.getSimpleName() +\r\n+                    \" a  group by a.name\");\r\n+\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        Object[] result = (Object[]) c.iterator().next();\r\n+        assertEquals(2, result.length);\r\n+        assertEquals(String.class, result[0].getClass());\r\n+        assertEquals(Long.class, result[1].getClass());\r\n+    }\r\n+\r\n+    public void testUniqueResultsAreCachedAndConsistent() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() +\r\n+                \" a  where a.age =1\");\r\n+\r\n+        q.setUnique(true);\r\n+        CacheObjectAChild1 a = (CacheObjectAChild1) q.execute();\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        CacheObjectAChild1 a2 = (CacheObjectAChild1) q.execute();\r\n+        assertTrue(a == a2);\r\n+    }\r\n+\r\n+    public void testMutableProjectionFieldsAreCopied() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.date FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a  where a.age=1\");\r\n+\r\n+        q.setUnique(true);\r\n+        Date d0 = (Date) q.execute(); // get it in cache\r\n+        Date d1 = (Date) q.execute();\r\n+        assertNotSame(d0, d1);\r\n+\r\n+        Date d2 = (Date) q.execute();\r\n+        assertNotSame(d1, d2);\r\n+    }\r\n+\r\n+    public void testArrayProjectionFieldsAreNotCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.dateArray FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+\r\n+        try {\r\n+            q.execute();\r\n+            fail(\"Allowed array projection query.\");\r\n+        } catch (Exception e) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testCollectionProjectionFieldsAreNotCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.stringColl FROM \" +\r\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n+\r\n+        try {\r\n+            q.execute();\r\n+            fail(\"Allowed array projection query.\");\r\n+        } catch (Exception e) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testExternalizedSingleValueFieldIsNotCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.cls FROM \" +\r\n+            CacheObjectWithExternalizedFields.class.getSimpleName() + \" a\");\r\n+\r\n+        q.setUnique(true);\r\n+        Object o = q.execute(); // get it in cache\r\n+        // ##### assertEquals (Class.class, o);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n+    }\r\n+\r\n+    public void testMutatedQueryReturnsNewResults() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL,\r\n+                \"select a.name, max(a.age) FROM \" +\r\n+                    CacheObjectAChild1.class.getSimpleName() +\r\n+                    \" a group by a.name\");\r\n+\r\n+        List l = (List) q.execute();\r\n+        CacheTestHelper.iterate(l);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        l = (List) q.execute();\r\n+        Object[] result = (Object[]) l.get(0);\r\n+        assertEquals(2, result.length);\r\n+        assertEquals(String.class, result[0].getClass());\r\n+        assertEquals(Long.class, result[1].getClass());\r\n+\r\n+        // now, mutate the query and see what happens\r\n+        q.setQuery(\"select max(a.age),a.name FROM \" +\r\n+            CacheObjectAChild1.class.getSimpleName() + \" a group by a.name\");\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n+        l = (List) q.execute();\r\n+        result = (Object[]) l.get(0);\r\n+        assertEquals(2, result.length);\r\n+        assertEquals(Long.class, result[0].getClass());\r\n+        assertEquals(String.class, result[1].getClass());\r\n+        CacheTestHelper.iterate(l);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        l = (List) q.execute();\r\n+        result = (Object[]) l.get(0);\r\n+        assertEquals(2, result.length);\r\n+        assertEquals(Long.class, result[0].getClass());\r\n+        assertEquals(String.class, result[1].getClass());\r\n+    }\r\n+\r\n+    public void XXXtestExternalizedContainerFieldIsExternalized() {\r\n+    }\r\n+\r\n+    public void XXXtestSerializedSingleValueFieldIsSerialized() {\r\n+    }\r\n+\r\n+    public void XXXtestSerializedContainerFieldIsSerialized() {\r\n+    }\r\n+\r\n+    public void XXXtestCustomMappedSingleValueFieldIsHandled() {\r\n+    }\r\n+\r\n+    public void XXXtestCustomMappedContainerFieldIsHandled() {\r\n+    }\r\n+\r\n+    private static int deleteAll(Broker broker, Class clazz,\r\n+        boolean subclasses) {\r\n+        final boolean useDeleteByQuery = false;\r\n+\r\n+        if (useDeleteByQuery) {\r\n+            org.apache.openjpa.kernel.Query query =\r\n+                broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n+                    clazz.getSimpleName() + \" a\");\r\n+            query.setCandidateType(clazz, subclasses);\r\n+            return (int) query.deleteAll();\r\n+        } else {\r\n+            org.apache.openjpa.kernel.Extent extent =\r\n+                broker.newExtent(clazz, subclasses);\r\n+            List list = extent.list();\r\n+            int size = list.size();\r\n+            broker.deleteAll(list, null);\r\n+            return size;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"c15d77772da69b82570a49319e15663ac8b2b6c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","status":"added","additions":219,"deletions":0,"changes":219,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,219 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.util.UserException;\r\n+\r\n+public class TestJPQLRelationProjections\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestJPQLRelationProjections(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    private BrokerFactory _factory;\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CacheObjectJ.class);\r\n+        deleteAll(CacheObjectE.class);\r\n+        deleteAll(SelfReferencingCacheTestObject.class);\r\n+\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n+\r\n+        EntityManagerFactory emf = getEmf(propsMap);\r\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n+        Broker broker = _factory.newBroker();\r\n+        try {\r\n+            broker.begin();\r\n+        } catch (Exception e) {\r\n+            fail(\"Set up failed due to exception : \\n\" +\r\n+                getStackTrace(e));\r\n+        }\r\n+        int j = 0;\r\n+        for (int i = 0; i < 6; i++) {\r\n+            CacheObjectE e;\r\n+            if (i < 3)\r\n+                e = new CacheObjectE(i + \"\");\r\n+            else\r\n+                e = null;\r\n+\r\n+            // make some common names so that GROUP BY is useful.\r\n+            if (i % 2 == 0)\r\n+                j++;\r\n+            broker.persist(new CacheObjectJ(\"projections-\" + j, e), null);\r\n+        }\r\n+\r\n+        broker.persist(new SelfReferencingCacheTestObject(\"foo\",\r\n+            new SelfReferencingCacheTestObject(\"bar\", null)), null);\r\n+\r\n+        broker.commit();\r\n+        broker.close();\r\n+\r\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n+    }\r\n+\r\n+    public void tearDown()\r\n+        throws Exception {\r\n+        _factory.close();\r\n+\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    public void testNullRelatedPCIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\r\n+            CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\r\n+\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        assertNull(c.iterator().next());\r\n+    }\r\n+\r\n+    public void testNullRelatedPCAndProjectionIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\r\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\r\n+\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        Object[] result = (Object[]) c.iterator().next();\r\n+        assertEquals(2, result.length);\r\n+        assertEquals(String.class, result[0].getClass());\r\n+        assertNull(result[1]);\r\n+    }\r\n+\r\n+    public void testNonNullRelatedPCIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\r\n+            CacheObjectJ.class.getSimpleName() + \" a where a.e  is not null\");\r\n+\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        assertEquals(CacheObjectE.class, c.iterator().next().getClass());\r\n+    }\r\n+\r\n+    public void testNonNullRelatedPCAndProjectionIsCached() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\r\n+                CacheObjectJ.class.getSimpleName() +\r\n+                \" a where a.e is not null\");\r\n+\r\n+        Collection c = (Collection) q.execute();\r\n+        CacheTestHelper.iterate(c);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        c = (Collection) q.execute();\r\n+        Object[] result = (Object[]) c.iterator().next();\r\n+        assertEquals(2, result.length);\r\n+        assertEquals(String.class, result[0].getClass());\r\n+        assertEquals(CacheObjectE.class, result[1].getClass());\r\n+    }\r\n+\r\n+    public void testEmbeddedFields() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select embedded FROM \" +\r\n+                SelfReferencingCacheTestObject.class.getSimpleName() +\r\n+                \" a where a.str='foo'\");\r\n+\r\n+        List l = null;\r\n+        try {\r\n+            l = (List) q.execute();\r\n+            assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\r\n+        } catch (UserException ue) {\r\n+            //bug(1150, \"embedded-field projections cause exception\");\r\n+            ue.printStackTrace();\r\n+            return;\r\n+        }\r\n+\r\n+        CacheTestHelper.iterate(l);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        l = (List) q.execute();\r\n+        assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\r\n+    }\r\n+\r\n+    public void testNonNullRelationOfSameTypeAsCandidate() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\r\n+            SelfReferencingCacheTestObject.class.getSimpleName() +\r\n+            \" a where a.o IS NOT NULL\");\r\n+\r\n+        List l = (List) q.execute();\r\n+        assertEquals(SelfReferencingCacheTestObject.class,\r\n+            l.get(0).getClass());\r\n+        assertEquals(\"bar\",\r\n+            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\r\n+        CacheTestHelper.iterate(l);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        l = (List) q.execute();\r\n+        assertEquals(SelfReferencingCacheTestObject.class,\r\n+            l.get(0).getClass());\r\n+        assertEquals(\"bar\",\r\n+            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\r\n+    }\r\n+\r\n+    public void testNullRelationOfSameTypeAsCandidate() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\r\n+            SelfReferencingCacheTestObject.class.getSimpleName() +\r\n+            \" a where a.o IS NULL\");\r\n+\r\n+        List l = (List) q.execute();\r\n+        assertNull(l.get(0));\r\n+        CacheTestHelper.iterate(l);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n+\r\n+        l = (List) q.execute();\r\n+        assertNull(l.get(0));\r\n+    }\r\n+}\r"},{"sha":"f162ae1be2ab4e0832a6e9d091b72f8177d79867","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+/**\r\n+ * Test the local cache. Tests only a single PMF.\r\n+ */\r\n+public class TestLocalCache\r\n+    extends CacheTest {\r\n+\r\n+    public TestLocalCache(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    protected String[] getConfs() {\r\n+        return new String[]{\r\n+            \"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.QueryCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n+        };\r\n+    }\r\n+\r\n+    protected String[] getConfs2() {\r\n+        return new String[]{\r\n+            \"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.QueryCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n+        };\r\n+    }\r\n+}\r"},{"sha":"554a1f1b6b6b07ad4d12b78e93f7fa972facf798","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,172 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+public class TestMutableParameters\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestMutableParameters(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    private BrokerFactory _factory;\r\n+    private Date _startDate;\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        deleteAll(CacheObjectA.class);\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n+\r\n+        EntityManagerFactory emf = getEmf(propsMap);\r\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n+\r\n+        // create a very early date so that when we mutate it, we\r\n+        // won't need to worry about precision issues.\r\n+        _startDate = new java.text.SimpleDateFormat(\"dd/MM/yyyy\").\r\n+            parse(\"01/01/1990\");\r\n+        Broker broker = _factory.newBroker();\r\n+        broker.begin();\r\n+        for (int i = 0; i < 50; i++) {\r\n+            CacheObjectAChild1 o = new CacheObjectAChild1\r\n+                (\"\", \"JPQL2Queries\", i);\r\n+            o.setDate(_startDate);\r\n+            broker.persist(o, null);\r\n+        }\r\n+        broker.commit();\r\n+        broker.close();\r\n+\r\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n+    }\r\n+\r\n+    public void tearDown()\r\n+        throws Exception {\r\n+        try {\r\n+            _factory.close();\r\n+        } catch (Exception e) {\r\n+        }\r\n+\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    public void testMutatedDateParameter() {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n+            \"select a from \" +\r\n+                CacheObjectAChild1.class.getSimpleName() +\r\n+                \" a where a.date < :p_date\");\r\n+        Date d = new Date();\r\n+        Collection c = (Collection) q.execute(new Object[]{ d });\r\n+        CacheTestHelper.iterate(c);\r\n+        int initialSize = c.size();\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n+            new Object[]{ d });\r\n+        d.setTime(_startDate.getTime());\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n+            new Object[]{ d });\r\n+        c = (Collection) q.execute(new Object[]{ d });\r\n+\r\n+        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\r\n+    }\r\n+\r\n+    //FIXME Seetha Nov 10,2006\r\n+    //need to find the JPQL query for :p_age contains\r\n+    /*\r\n+    public void testMutatedSetParameter() {\r\n+        mutatedCollectionParameterHelper(true);\r\n+    }\r\n+\r\n+    public void testMutatedListParameter() {\r\n+        mutatedCollectionParameterHelper(false);\r\n+    }\r\n+\r\n+    public void mutatedCollectionParameterHelper(boolean set) {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL,\r\n+                    \"select a from \"+\r\n+                    CacheObjectAChild1.class.getSimpleName()+ \"a :p_ages.contains (age)\");\r\n+        Collection c_param;\r\n+        if (set)\r\n+            c_param = new HashSet();\r\n+        else\r\n+            c_param = new LinkedList();\r\n+        c_param.add(new Long(0));\r\n+        c_param.add(new Long(1));\r\n+        Collection c = (Collection) q.execute(new Object[]{ c_param });\r\n+        CacheTestHelper.iterate(c);\r\n+        int initialSize = c.size();\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n+            new Object[]{ c_param });\r\n+        c_param.add(new Long(2));\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n+            new Object[]{ c_param });\r\n+        c = (Collection) q.execute(new Object[]{ c_param });\r\n+        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\r\n+    }\r\n+\r\n+    public void testMutatedSetParameterDates() {\r\n+        mutatedCollectionParameterDatesHelper(true);\r\n+    }\r\n+\r\n+    public void testMutatedListParameterDates() {\r\n+        mutatedCollectionParameterDatesHelper(false);\r\n+    }\r\n+\r\n+    public void mutatedCollectionParameterDatesHelper(boolean set) {\r\n+        Broker broker = _factory.newBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, CacheObjectAChild1.class,\r\n+                \":p_dates.contains (date)\");\r\n+        Collection c_param;\r\n+        if (set)\r\n+            c_param = new HashSet();\r\n+        else\r\n+            c_param = new LinkedList();\r\n+        c_param.add(new Date());\r\n+        c_param.add(new Date(System.currentTimeMillis() - 1000));\r\n+        Collection c = (Collection) q.execute(new Object[]{ c_param });\r\n+        CacheTestHelper.iterate(c);\r\n+        int initialSize = c.size();\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n+            new Object[]{ c_param });\r\n+        c_param.add(new Date(System.currentTimeMillis() - 500));\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n+            new Object[]{ c_param });\r\n+    }*/\r\n+}\r"},{"sha":"440c45e6e2a01de5ef48d5a6ded533d91786bede","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+/**\r\n+ * New test case.\r\n+ */\r\n+public class TestPCParametersInQueries extends AbstractTestCase {\r\n+\r\n+    public TestPCParametersInQueries(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    private BrokerFactory _factory;\r\n+    private Object _eId;\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CacheObjectA.class);\r\n+\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n+        EntityManagerFactory emf = getEmf(propsMap);\r\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n+\r\n+        Broker broker = _factory.newBroker();\r\n+        broker.begin();\r\n+        CacheObjectE e = new CacheObjectE(\"bar\");\r\n+        CacheObjectJ j = new CacheObjectJ(\"foo\", e);\r\n+        broker.persist(j, null);\r\n+        broker.persist(e, null);\r\n+        broker.commit();\r\n+        _eId = broker.getObjectId(e);\r\n+        broker.close();\r\n+    }\r\n+\r\n+    public void testPCParameter() {\r\n+        Broker broker = _factory.newBroker();\r\n+        broker.begin();\r\n+        CacheObjectE e = (CacheObjectE) broker.find(_eId, true, null);\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n+            \"select a from \" +\r\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\r\n+\r\n+        Collection c = (Collection) q.execute(new Object[]{ e });\r\n+        CacheTestHelper.iterate(c);\r\n+        Object o = c.iterator().next();\r\n+        assertTrue(o instanceof CacheObjectJ);\r\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE, new Object[]{ e });\r\n+\r\n+        q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n+            \"select a from \" +\r\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\r\n+\r\n+        c = (Collection) q.execute(new Object[]{ e });\r\n+        Object o2 = c.iterator().next();\r\n+        assertTrue(o2 instanceof CacheObjectJ);\r\n+        assertTrue(o == o2);\r\n+\r\n+        broker.commit();\r\n+        broker.close();\r\n+    }\r\n+}\r"},{"sha":"f4d3712ebf2f5cc68b91794dca8a5dd9a8b094e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+/**\r\n+ * Test some assumptions about query result metadata that the query\r\n+ * cache relies on.\r\n+ */\r\n+public class TestQueryResultTypes extends AbstractTestCase {\r\n+\r\n+    public TestQueryResultTypes(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    public void testQueryResultTypesWithThis() {\r\n+        Broker broker = getBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\r\n+                CacheObjectA.class.getSimpleName() + \" a\");\r\n+\r\n+        Class[] types = q.getProjectionTypes();\r\n+        assertEquals(2, types.length);\r\n+        assertEquals(String.class, types[0]);\r\n+        assertEquals(CacheObjectA.class, types[1]);\r\n+    }\r\n+\r\n+    public void testQueryResultTypesWithRelated() {\r\n+        Broker broker = getBroker();\r\n+        Query q = broker\r\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.relatedB FROM \" +\r\n+                CacheObjectA.class.getSimpleName() + \" a\");\r\n+\r\n+        //CacheObjectA.class,           \"select name, relatedB\");\r\n+        Class[] types = q.getProjectionTypes();\r\n+        assertEquals(2, types.length);\r\n+        assertEquals(String.class, types[0]);\r\n+        assertEquals(CacheObjectB.class, types[1]);\r\n+    }\r\n+\r\n+    public void testSingleProjectionOfNonThisRelation() {\r\n+        Broker broker = getBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.relatedB FROM \" +\r\n+                CacheObjectA.class.getSimpleName() + \" a\");\r\n+\r\n+        Class[] types = q.getProjectionTypes();\r\n+        assertEquals(1, types.length);\r\n+        assertEquals(CacheObjectB.class, types[0]);\r\n+    }\r\n+\r\n+    public void testSingleProjectionOfThisRelation() {\r\n+        Broker broker = getBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n+            CacheObjectA.class.getSimpleName() + \" a\");\r\n+        Class[] types = q.getProjectionTypes();\r\n+        assertEquals(0, types.length);\r\n+    }\r\n+\r\n+    public void testNoResultClause() {\r\n+        Broker broker = getBroker();\r\n+        Query q =\r\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n+                CacheObjectA.class.getSimpleName() + \" a\");\r\n+        Class[] types = q.getProjectionTypes();\r\n+        assertEquals(0, types.length);\r\n+    }\r\n+\r\n+    private Broker getBroker() {\r\n+        return JPAFacadeHelper\r\n+            .toBroker(currentEntityManager());\r\n+    }\r\n+}\r"},{"sha":"791ee9d4a9fd6bbe7d11583221a2c598276ac66b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","status":"added","additions":322,"deletions":0,"changes":322,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,322 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+\r\n+/**\r\n+ * Test that we marshall and unmarshall result types appropriately.\r\n+ */\r\n+public class TestResultShapes extends AbstractTestCase {\r\n+\r\n+    public TestResultShapes(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    private Broker _broker;\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CacheObjectAChild1.class);\r\n+\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        EntityManagerFactory emf = getEmf(propsMap);\r\n+        BrokerFactory factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n+\r\n+        Broker broker = factory.newBroker();\r\n+        broker.begin();\r\n+        broker.persist(new CacheObjectAChild1(\"foo\", \"foo\", 0), null);\r\n+        broker.persist(new CacheObjectAChild1(\"bar\", \"bar\", 1), null);\r\n+        broker.commit();\r\n+        broker.close();\r\n+\r\n+        _broker = factory.newBroker();\r\n+    }\r\n+\r\n+    public void tearDown() throws Exception {\r\n+        _broker.close();\r\n+\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    // FIXME Seetha Nov 3,2006\r\n+    // need to know about the 'this' parameter\r\n+\r\n+//\tpublic void testCollectionOfCandidateClass() \r\n+//\t{ \r\n+//\t\tCollection<String> ac = new ArrayList<String>();\r\n+//\t\tac.add(\"this\");\r\n+//\r\n+//\t\tCollection<Class> bd = new ArrayList<Class>();\r\n+//\t\tbd.add(CacheObjectAChild1.class);\r\n+//\t\t\r\n+//\t\tarrayHelper(false, bd, null, true); \r\n+//\t\tmapHelper(false, bd, ac, true);\r\n+//\t\trawHelper(false, CacheObjectAChild1.class, null, true); \r\n+//\t}\r\n+//\t\r\n+//\tpublic void testUniqueCandidateClass() \r\n+//\t{ \r\n+//\t\tCollection<String> ac = new ArrayList<String>();\r\n+//\t\tac.add(\"this\");\r\n+//\r\n+//\t\tCollection<Class> bd = new ArrayList<Class>();\r\n+//\t\tbd.add(CacheObjectAChild1.class);\r\n+//\t\t\r\n+//\t\tarrayHelper(true, bd, null, true); \r\n+//\t\tmapHelper(true, bd, ac, true);\r\n+//\t\trawHelper(true, CacheObjectAChild1.class, null, true); \r\n+//\t}\r\n+\r\n+    public void testCollectionOfSingleValuedProjection() {\r\n+\r\n+        Collection<String> ac = new ArrayList<String>();\r\n+        ac.add(\"age\");\r\n+\r\n+        Collection<Class> bd = new ArrayList<Class>();\r\n+        bd.add(Long.class);\r\n+\r\n+        arrayHelper(false, bd, ac, true);\r\n+        mapHelper(false, bd, ac, true);\r\n+        rawHelper(false, Long.class, \"age\", true);\r\n+    }\r\n+\r\n+    public void testUniqueSingleValuedProjection() {\r\n+        Collection<String> ac = new ArrayList<String>();\r\n+        ac.add(\"age\");\r\n+\r\n+        Collection<Class> bd = new ArrayList<Class>();\r\n+        bd.add(Long.class);\r\n+\r\n+        arrayHelper(true, bd, ac, true);\r\n+        mapHelper(true, bd, ac, true);\r\n+        rawHelper(true, Long.class, \"age\", true);\r\n+    }\r\n+\r\n+    public void testCollectionOfMultiValuedProjection() {\r\n+        Collection<String> ac = new ArrayList<String>();\r\n+        ac.add(\"age\");\r\n+        ac.add(\"name\");\r\n+\r\n+        Collection<Class> bd = new ArrayList<Class>();\r\n+        bd.add(Long.class);\r\n+        bd.add(String.class);\r\n+\r\n+        arrayHelper(false, bd, ac, true);\r\n+\r\n+        mapHelper(false, bd, ac, true);\r\n+        // we put both\r\n+        // projections in single slot in array because this is a\r\n+        // single result that we're\r\n+        // looking\r\n+        // for. It just happens that the // single result format we expect is\r\n+        // an Object[]. rawHelper(false, Object[].class, \"age, name\", true);\r\n+    }\r\n+\r\n+    public void testUniqueMultiValuedProjection() {\r\n+        Collection<String> ac = new ArrayList<String>();\r\n+        ac.add(\"age\");\r\n+        ac.add(\"name\");\r\n+\r\n+        Collection<Class> bd = new ArrayList<Class>();\r\n+        bd.add(Long.class);\r\n+        bd.add(String.class);\r\n+\r\n+        arrayHelper(true, bd, ac, true);\r\n+        mapHelper(true, bd, ac, true);\r\n+        // we put\r\n+        // both\r\n+        // projections in single slot in array because this is a\r\n+        // single result that\r\n+        // we're looking\r\n+        // for.\tIt just happens that the // single result format we\r\n+        // expect is an\tObject[]. rawHelper(true, Object[].class, \"age, name\", true);\r\n+    }\r\n+\r\n+    public void testUncachedQueryHasCorrectShape() {\r\n+        Collection<String> ac = new ArrayList<String>();\r\n+        ac.add(\"age\");\r\n+        ac.add(\"name\");\r\n+\r\n+        Collection<Class> bd = new ArrayList<Class>();\r\n+        bd.add(Long.class);\r\n+        bd.add(String.class);\r\n+\r\n+        _broker.getFetchConfiguration().setQueryCacheEnabled(false);\r\n+\r\n+        arrayHelper(false, bd, ac, false);\r\n+        mapHelper(false, bd, ac, false);\r\n+        rawHelper(false, Object[].class, \"age, a.name\", false);\r\n+    }\r\n+\r\n+    private void arrayHelper(boolean unique, Collection recordClasses,\r\n+        Collection results, boolean inCache) {\r\n+        Query q = setUpQuery(unique, results);\r\n+        q.setResultType(Object[].class);\r\n+        if (unique) {\r\n+            arrayResultHelper(q.execute(), recordClasses, inCache);\r\n+        } else {\r\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n+                .hasNext();)\r\n+                arrayResultHelper(iter.next(), recordClasses, inCache);\r\n+        }\r\n+\r\n+        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\r\n+\r\n+        if (unique) {\r\n+            arrayResultHelper(q.execute(), recordClasses, inCache);\r\n+        } else {\r\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n+                .hasNext();)\r\n+                arrayResultHelper(iter.next(), recordClasses, inCache);\r\n+        }\r\n+    }\r\n+\r\n+    private void arrayResultHelper(Object result, Collection recordClasses,\r\n+        boolean inCache) {\r\n+        assertEquals(Object[].class, result.getClass());\r\n+        Object[] os = (Object[]) result;\r\n+        assertEquals(recordClasses.size(), os.length);\r\n+        for (int i = 0; i < recordClasses.size(); i++)\r\n+            assertEquals(((ArrayList) recordClasses).get(i), os[i].getClass());\r\n+    }\r\n+\r\n+    private void mapHelper(boolean unique, Collection recordClasses,\r\n+        Collection results, boolean inCache) {\r\n+        Query q = setUpQuery(unique, results);\r\n+        System.out.println(\"Query String \" + q.getQueryString());\r\n+        Collection coll = null;\r\n+        if (q.execute() != null && (q.execute() instanceof Collection)) {\r\n+            coll = (Collection) q.execute();\r\n+        }\r\n+        System.out.println(\"Type of q.execute is : \" + q.execute().getClass());\r\n+\r\n+        Iterator it = coll.iterator();\r\n+        while (it.hasNext())\r\n+            System.out.println(\"Query result is \" + it.next().getClass());\r\n+\r\n+        q.setResultType(HashMap.class);\r\n+\r\n+        if (unique) {\r\n+            mapResultHelper(q.execute(), recordClasses, results, inCache);\r\n+        } else {\r\n+            for (Iterator iter = ((Collection) q.execute()).iterator();\r\n+                iter.hasNext();)\r\n+                mapResultHelper(iter.next(), recordClasses, results, inCache);\r\n+        }\r\n+\r\n+        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\r\n+\r\n+        if (unique) {\r\n+            mapResultHelper(q.execute(), recordClasses, results, inCache);\r\n+        } else {\r\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n+                .hasNext();)\r\n+                mapResultHelper(iter.next(), recordClasses, results, inCache);\r\n+        }\r\n+    }\r\n+\r\n+    private void mapResultHelper(Object result, Collection recordClasses,\r\n+        Collection results, boolean inCache) {\r\n+        assertEquals(HashMap.class, result.getClass());\r\n+        HashMap m = (HashMap) result;\r\n+        assertEquals(recordClasses.size(), m.size());\r\n+        for (int i = 0; i < recordClasses.size(); i++)\r\n+            assertEquals(\"Map Contents \" + m.toString() + \" result: \" + result\r\n+                + \" loop size: \" + recordClasses.size()\r\n+                + \"Value of m.get(results[i]) \"\r\n+                + m.get(((ArrayList) results).get(i).getClass()),\r\n+                ((ArrayList) recordClasses).get(i),\r\n+                m.get(\"jpqlalias\" + (i + 1)).getClass());\r\n+    }\r\n+\r\n+    private void rawHelper(boolean unique, Class recordClass, String result,\r\n+        boolean inCache) {\r\n+        ArrayList<String> l = new ArrayList<String>();\r\n+        l.add(result);\r\n+        Collection res = (result == null) ? null : l;\r\n+        Query q = setUpQuery(unique, res);\r\n+        if (unique)\r\n+            assertEquals(recordClass, q.execute().getClass());\r\n+        else {\r\n+            q.setUnique(unique);\r\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n+                .hasNext();)\r\n+                assertEquals(recordClass, iter.next().getClass());\r\n+        }\r\n+\r\n+        CacheTestHelper.assertInCache(this, q, new Boolean(inCache));\r\n+\r\n+        if (unique) {\r\n+            assertEquals(recordClass, q.execute().getClass());\r\n+        } else {\r\n+            for (Iterator iter = ((List) q.execute()).iterator(); iter\r\n+                .hasNext();)\r\n+                assertEquals(recordClass, iter.next().getClass());\r\n+        }\r\n+    }\r\n+\r\n+    private Query setUpQuery(boolean unique, Collection results) {\r\n+        String filter = \"select\";\r\n+        ArrayList resultsl = (ArrayList) results;\r\n+        if (results != null) {\r\n+            String resultString = \"\";\r\n+            for (int i = 0; i < resultsl.size(); i++) {\r\n+                resultString += \"a.\" + resultsl.get(i);\r\n+                if (i < results.size() - 1)\r\n+                    resultString += \", \";\r\n+            }\r\n+            filter += \" \" + resultString;\r\n+            filter += \" \" + \"from \"\r\n+                + CacheObjectAChild1.class.getSuperclass().getSimpleName()\r\n+                + \" a\";\r\n+        } else {\r\n+            filter += \" \" + \"a from \"\r\n+                + CacheObjectAChild1.class.getSuperclass().getSimpleName()\r\n+                + \" a\";\r\n+        }\r\n+\r\n+        if (unique)\r\n+            filter += \" where a.age = 0\";\r\n+        System.out.println(\"****Query: \" + filter);\r\n+        Query q = _broker.newQuery(JPQLParser.LANG_JPQL, filter);\r\n+        q.setUnique(unique);\r\n+        q.setCandidateType(CacheObjectAChild1.class, false);\r\n+\r\n+        return q;\r\n+    }\r\n+}\r"},{"sha":"045c4f7e2c6311a98dc940550e07033262848959","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+/**\r\n+ * Test data caching across multiple factories in the same JVM, using\r\n+ * the single-JVM commit provider to communicate updates..\r\n+ */\r\n+public class TestSJVMCache\r\n+    extends CacheTest {\r\n+\r\n+    public TestSJVMCache(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    protected String[] getConfs() {\r\n+        return new String[]{\r\n+            // the second cache is there solely to differentiate between\r\n+            // this PMF and the PMF created from confs2 below\r\n+            \"openjpa.DataCache\", \"true, true(Name=differentiatingProperty1)\",\r\n+            \"openjpa.QueryCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n+        };\r\n+    }\r\n+\r\n+    protected String[] getConfs2() {\r\n+        return new String[]{\r\n+            // the second cache is there solely to differentiate between\r\n+            // this PMF and the PMF created from confs above\r\n+            \"openjpa.DataCache\", \"true, true(Name=differentiatingProperty2)\",\r\n+            \"openjpa.QueryCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n+        };\r\n+    }\r\n+}\r"},{"sha":"7021379933c924df70a96d662b8b58e95d340bff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestUniteratedQueryResult\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestUniteratedQueryResult(String test) {\r\n+        super(test, \"datacachecactusapp\");\r\n+    }\r\n+\r\n+    private EntityManagerFactory _pmf;\r\n+\r\n+    public void setUp() {\r\n+        System.out.println(\"****Deleted Records \"\r\n+            + deleteAll(CacheObjectA.class));\r\n+        Map propsMap = new HashMap();\r\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n+        propsMap.put(\"openjpa.QueryCache\", \"true\");\r\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        propsMap.put(\"openjpa.FetchBatchSize\", \"0\");\r\n+\r\n+        _pmf = getEmf(propsMap);\r\n+    }\r\n+\r\n+    public void test() {\r\n+        CacheObjectA pc1 = new CacheObjectA();\r\n+        pc1.setName(\"pc1\");\r\n+        CacheObjectA pc2 = new CacheObjectA();\r\n+        pc2.setName(\"pc2\");\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) _pmf.createEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);\r\n+        Object oid1 = pm.getObjectId(pc1);\r\n+        Object oid2 = pm.getObjectId(pc2);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) _pmf.createEntityManager();\r\n+\r\n+        OpenJPAQuery q = pm.createQuery(\r\n+            \"select a FROM \" + CacheObjectA.class.getSimpleName() +\r\n+                \" a where a.name = 'pc1'\");\r\n+        List res = (List) q.getResultList();\r\n+\r\n+        OpenJPAEntityManager pm2 =\r\n+            (OpenJPAEntityManager) _pmf.createEntityManager();\r\n+        startTx(pm2);\r\n+        pc1 = (CacheObjectA) pm2.find(CacheObjectA.class, oid1);\r\n+        pc2 = (CacheObjectA) pm2.find(CacheObjectA.class, oid2);\r\n+        pc1.setName(\"pc2\");\r\n+        pc2.setName(\"pc1\");\r\n+        endTx(pm2);\r\n+\r\n+        assertEquals(1, res.size());\r\n+        for (Iterator itr = res.iterator(); itr.hasNext();)\r\n+            assertEquals(oid1, pm2.getObjectId(itr.next()));\r\n+        endEm(pm2);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) _pmf.createEntityManager();\r\n+\r\n+        q = pm.createQuery(\r\n+            \"select a FROM \" + CacheObjectA.class.getSimpleName() +\r\n+                \" a where a.name = 'pc1'\");\r\n+        res = (List) q.getResultList();\r\n+\r\n+        assertEquals(oid2, pm.getObjectId(res.iterator().next()));\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"cbe00c4314c135d842ec8db8c845269e3d0e94a4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class AppIdCacheObject {\r\n+\r\n+    private int id;\r\n+\r\n+    protected AppIdCacheObject() {\r\n+    }\r\n+\r\n+    public AppIdCacheObject(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+}\r"},{"sha":"98efdc7d7d40a8a45c7d6c8b957832c5766216fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.Serializable;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class AttachA\r\n+    implements Serializable {\r\n+\r\n+    private String astr;\r\n+    private int aint;\r\n+    private double adbl;\r\n+    private String[] stringArray = new String[0];\r\n+    private AttachE[] attachEArray = new AttachE[0];\r\n+\r\n+    public void setAstr(String astr) {\r\n+        this.astr = astr;\r\n+    }\r\n+\r\n+    public String getAstr() {\r\n+        return this.astr;\r\n+    }\r\n+\r\n+    public void setAint(int aint) {\r\n+        this.aint = aint;\r\n+    }\r\n+\r\n+    public int getAint() {\r\n+        return this.aint;\r\n+    }\r\n+\r\n+    public void setAdbl(double adbl) {\r\n+        this.adbl = adbl;\r\n+    }\r\n+\r\n+    public double getAdbl() {\r\n+        return this.adbl;\r\n+    }\r\n+\r\n+    public void setStringArray(String[] stringArray) {\r\n+        this.stringArray = stringArray;\r\n+    }\r\n+\r\n+    public String[] getStringArray() {\r\n+        return this.stringArray;\r\n+    }\r\n+\r\n+    public void setAttachEArray(AttachE[] attachEArray) {\r\n+        this.attachEArray = attachEArray;\r\n+    }\r\n+\r\n+    public AttachE[] getAttachEArray() {\r\n+        return this.attachEArray;\r\n+    }\r\n+\r\n+    private void writeObject(ObjectOutputStream out)\r\n+        throws IOException {\r\n+        out.defaultWriteObject();\r\n+    }\r\n+\r\n+    private void readObject(ObjectInputStream in)\r\n+        throws IOException, ClassNotFoundException {\r\n+        in.defaultReadObject();\r\n+    }\r\n+}\r"},{"sha":"c067c87fd181dfd418e3ffca0e06d2af6ba0120e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,76 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.TreeMap;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class AttachB\r\n+    extends AttachA {\r\n+\r\n+    private String bstr;\r\n+    private int bint;\r\n+    private double bdbl;\r\n+    private Set ds = new HashSet();\r\n+    private Map stringIntMap = new TreeMap();\r\n+\r\n+    public void setBstr(String bstr) {\r\n+        this.bstr = bstr;\r\n+    }\r\n+\r\n+    public String getBstr() {\r\n+        return this.bstr;\r\n+    }\r\n+\r\n+    public void setBint(int bint) {\r\n+        this.bint = bint;\r\n+    }\r\n+\r\n+    public int getBint() {\r\n+        return this.bint;\r\n+    }\r\n+\r\n+    public void setBdbl(double bdbl) {\r\n+        this.bdbl = bdbl;\r\n+    }\r\n+\r\n+    public double getBdbl() {\r\n+        return this.bdbl;\r\n+    }\r\n+\r\n+    public void setDs(Set ds) {\r\n+        this.ds = ds;\r\n+    }\r\n+\r\n+    public Set getDs() {\r\n+        return this.ds;\r\n+    }\r\n+\r\n+    public void setStringIntMap(Map stringIntMap) {\r\n+        this.stringIntMap = stringIntMap;\r\n+    }\r\n+\r\n+    public Map getStringIntMap() {\r\n+        return this.stringIntMap;\r\n+    }\r\n+}\r"},{"sha":"21f765d05983e736a88407c995bc25ec3388ddc7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class AttachC\r\n+    extends AttachB {\r\n+\r\n+    private String cstr;\r\n+    private int cint;\r\n+    private double cdbl;\r\n+    private List es = new LinkedList(); // non-DFG\r\n+\r\n+    public void setCstr(String cstr) {\r\n+        this.cstr = cstr;\r\n+    }\r\n+\r\n+    public String getCstr() {\r\n+        return this.cstr;\r\n+    }\r\n+\r\n+    public void setCint(int cint) {\r\n+        this.cint = cint;\r\n+    }\r\n+\r\n+    public int getCint() {\r\n+        return this.cint;\r\n+    }\r\n+\r\n+    public void setCdbl(double cdbl) {\r\n+        this.cdbl = cdbl;\r\n+    }\r\n+\r\n+    public double getCdbl() {\r\n+        return this.cdbl;\r\n+    }\r\n+\r\n+    public void setEs(List es) {\r\n+        this.es = es;\r\n+    }\r\n+\r\n+    public List getEs() {\r\n+        return this.es;\r\n+    }\r\n+}\r"},{"sha":"9870612b22cb3dcde367f3a51d6b233ab5db74f1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.TreeMap;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class AttachD\r\n+    implements Serializable {\r\n+\r\n+    private Object version;\r\n+\r\n+    private String dstr;\r\n+    private int dint;\r\n+    private double ddbl;\r\n+    private AttachA a;\r\n+    private Set bs = new HashSet(); // DFG\r\n+    private Map pcStringMap = new HashMap();\r\n+    private TreeMap bigIntegerPCMap = new TreeMap();\r\n+\r\n+    private AttachE embeddedE;\r\n+    private AttachA embeddedA;\r\n+\r\n+    public void setDstr(String dstr) {\r\n+        this.dstr = dstr;\r\n+    }\r\n+\r\n+    public String getDstr() {\r\n+        return this.dstr;\r\n+    }\r\n+\r\n+    public void setDint(int dint) {\r\n+        this.dint = dint;\r\n+    }\r\n+\r\n+    public int getDint() {\r\n+        return this.dint;\r\n+    }\r\n+\r\n+    public void setDdbl(double ddbl) {\r\n+        this.ddbl = ddbl;\r\n+    }\r\n+\r\n+    public double getDdbl() {\r\n+        return this.ddbl;\r\n+    }\r\n+\r\n+    public AttachA getA() {\r\n+        return a;\r\n+    }\r\n+\r\n+    public void setA(AttachA a) {\r\n+        this.a = a;\r\n+    }\r\n+\r\n+    public void setBs(Set bs) {\r\n+        this.bs = bs;\r\n+    }\r\n+\r\n+    public Set getBs() {\r\n+        return this.bs;\r\n+    }\r\n+\r\n+    public void setPcStringMap(Map pcStringMap) {\r\n+        this.pcStringMap = pcStringMap;\r\n+    }\r\n+\r\n+    public Map getPcStringMap() {\r\n+        return this.pcStringMap;\r\n+    }\r\n+\r\n+    public void setBigIntegerPCMap(TreeMap bigIntegerPCMap) {\r\n+        this.bigIntegerPCMap = bigIntegerPCMap;\r\n+    }\r\n+\r\n+    public TreeMap getBigIntegerPCMap() {\r\n+        return this.bigIntegerPCMap;\r\n+    }\r\n+\r\n+    public void setEmbeddedE(AttachE embeddedE) {\r\n+        this.embeddedE = embeddedE;\r\n+    }\r\n+\r\n+    public AttachE getEmbeddedE() {\r\n+        return this.embeddedE;\r\n+    }\r\n+\r\n+    public void setEmbeddedA(AttachA embeddedA) {\r\n+        this.embeddedA = embeddedA;\r\n+    }\r\n+\r\n+    public AttachA getEmbeddedA() {\r\n+        return this.embeddedA;\r\n+    }\r\n+\r\n+    public Object getVersion() {\r\n+        return this.version;\r\n+    }\r\n+}\r"},{"sha":"871e6452f06a85196d0f06ef375475532aa755b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.Date;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class AttachE\r\n+    implements Serializable {\r\n+\r\n+    private Object version;\r\n+\r\n+    private String estr;\r\n+    private int eint;\r\n+    private double edbl;\r\n+    private AttachB b;\r\n+    private AttachF f;\r\n+    private Date date;\r\n+\r\n+    public void setEstr(String estr) {\r\n+        this.estr = estr;\r\n+    }\r\n+\r\n+    public String getEstr() {\r\n+        return this.estr;\r\n+    }\r\n+\r\n+    public void setEint(int eint) {\r\n+        this.eint = eint;\r\n+    }\r\n+\r\n+    public int getEint() {\r\n+        return this.eint;\r\n+    }\r\n+\r\n+    public void setEdbl(double edbl) {\r\n+        this.edbl = edbl;\r\n+    }\r\n+\r\n+    public double getEdbl() {\r\n+        return this.edbl;\r\n+    }\r\n+\r\n+    public void setB(AttachB b) {\r\n+        this.b = b;\r\n+    }\r\n+\r\n+    public AttachB getB() {\r\n+        return this.b;\r\n+    }\r\n+\r\n+    public void setF(AttachF f) {\r\n+        this.f = f;\r\n+    }\r\n+\r\n+    public AttachF getF() {\r\n+        return this.f;\r\n+    }\r\n+\r\n+    public void setDate(Date date) {\r\n+        this.date = date;\r\n+    }\r\n+\r\n+    public Date getDate() {\r\n+        return this.date;\r\n+    }\r\n+}\r"},{"sha":"ae093f1d561a39da5030d93394fb87149bd6e743","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,135 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.StringTokenizer;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class AttachF\r\n+    implements Serializable {\r\n+\r\n+    private int id1;\r\n+    private String id2;\r\n+\r\n+    private String fstr;\r\n+    private int fint;\r\n+    private double fdbl;\r\n+    private AttachE e;\r\n+    private List strings = new ArrayList();\r\n+\r\n+    private AttachC embeddedC;\r\n+\r\n+    public void setFstr(String fstr) {\r\n+        this.fstr = fstr;\r\n+    }\r\n+\r\n+    public String getFstr() {\r\n+        return this.fstr;\r\n+    }\r\n+\r\n+    public void setFint(int fint) {\r\n+        this.fint = fint;\r\n+    }\r\n+\r\n+    public int getFint() {\r\n+        return this.fint;\r\n+    }\r\n+\r\n+    public void setFdbl(double fdbl) {\r\n+        this.fdbl = fdbl;\r\n+    }\r\n+\r\n+    public double getFdbl() {\r\n+        return this.fdbl;\r\n+    }\r\n+\r\n+    public void setE(AttachE e) {\r\n+        this.e = e;\r\n+    }\r\n+\r\n+    public AttachE getE() {\r\n+        return this.e;\r\n+    }\r\n+\r\n+    public void setStrings(List strings) {\r\n+        this.strings = strings;\r\n+    }\r\n+\r\n+    public List getStrings() {\r\n+        return this.strings;\r\n+    }\r\n+\r\n+    public static class ID {\r\n+\r\n+        public int id1;\r\n+        public String id2;\r\n+\r\n+        public ID() {\r\n+        }\r\n+\r\n+        public ID(String str) {\r\n+            StringTokenizer tok = new StringTokenizer(str, \":\");\r\n+            id1 = Integer.parseInt(tok.nextToken());\r\n+            id2 = tok.nextToken();\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return id1 + (id2 == null ? 0 : id2.hashCode());\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return id1 + \":\" + id2;\r\n+        }\r\n+\r\n+        public boolean equals(Object other) {\r\n+            return other instanceof ID\r\n+                && ((ID) other).id1 == id1\r\n+                && (id2 == null ? ((ID) other).id2 == null\r\n+                : id2.equals(((ID) other).id2));\r\n+        }\r\n+    }\r\n+\r\n+    public void setId1(int id1) {\r\n+        this.id1 = id1;\r\n+    }\r\n+\r\n+    public int getId1() {\r\n+        return this.id1;\r\n+    }\r\n+\r\n+    public void setId2(String id2) {\r\n+        this.id2 = id2;\r\n+    }\r\n+\r\n+    public String getId2() {\r\n+        return this.id2;\r\n+    }\r\n+\r\n+    public void setEmbeddedC(AttachC embeddedC) {\r\n+        this.embeddedC = embeddedC;\r\n+    }\r\n+\r\n+    public AttachC getEmbeddedC() {\r\n+        return this.embeddedC;\r\n+    }\r\n+}\r"},{"sha":"fa2989f412cb8841bf017cc629c62ee79ae4b066","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,263 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.LinkedList;\r\n+import java.util.Locale;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.JoinTable;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+import org.apache.openjpa.persistence.jdbc.ContainerTable;\r\n+import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\r\n+import org.apache.openjpa.persistence.jdbc.OrderColumn;\r\n+import org.apache.openjpa.persistence.jdbc.XJoinColumn;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"TYP\")\r\n+@DiscriminatorValue(\"CACHE_A\")\r\n+public class CacheObjectA {\r\n+\r\n+    private String name = null;\r\n+\r\n+    private long age = 0;\r\n+\r\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n+    private CacheObjectA relatedObj = null;\r\n+\r\n+    @PersistentCollection\r\n+    @ContainerTable(name = \"CACHE_STRINGCOLL\",\r\n+        joinColumns = @XJoinColumn(name = \"ID\"))\r\n+    @ElementJoinColumn(name = \"ELEMENT\")\r\n+    /*\r\n+      * @ManyToMany @JoinTable(name=\"CACHE_STRINGCOLL\",\r\n+      * joinColumns=@JoinColumn(name=\"ID\"),\r\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n+      */\r\n+    private Collection<String> stringColl = new LinkedList();\r\n+\r\n+    /*\r\n+      * @ManyToMany @JoinTable(name=\"CACHE_RELATEDCOLL\",\r\n+      * joinColumns=@JoinColumn(name=\"ID\"),\r\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n+      */\r\n+    @PersistentCollection\r\n+    @ContainerTable(name = \"CACHE_RELATEDCOLL\",\r\n+        joinColumns = @XJoinColumn(name = \"ID\"))\r\n+    @ElementJoinColumn(name = \"ELEMENT\")\r\n+    private Collection<CacheObjectA> relatedColl = new LinkedList();\r\n+\r\n+    /*\r\n+      * @PersistentCollection @ContainerTable(name=\"CACHE_AS\",\r\n+      * joinColumns=@XJoinColumn(name=\"ID\")) @ElementJoinColumn(name=\"ELEMENT\")\r\n+      * @OrderColumn(name=\"ORDR\")\r\n+      */\r\n+    @ManyToMany\r\n+    @JoinTable(name = \"CACHE_AS\", joinColumns = @JoinColumn(name = \"ID\"),\r\n+        inverseJoinColumns = @JoinColumn(name = \"ELEMENT\"))\r\n+    private CacheObjectA[] as;\r\n+\r\n+    @PersistentCollection\r\n+    @ContainerTable(name = \"CACHE_STRINGARRAY\",\r\n+        joinColumns = @XJoinColumn(name = \"ID\"))\r\n+    @ElementJoinColumn(name = \"ELEMENT\")\r\n+    @OrderColumn(name = \"ORDR\")\r\n+    /*\r\n+      * @ManyToMany @JoinTable(name=\"CACHE_STRINGARRAY\",\r\n+      * joinColumns=@JoinColumn(name=\"ID\"),\r\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n+      */\r\n+    private String[] stringArray;\r\n+\r\n+    @PersistentCollection\r\n+    @ContainerTable(name = \"CACHE_PRIMITIVEARRAY\",\r\n+        joinColumns = @XJoinColumn(name = \"ID\"))\r\n+    @ElementJoinColumn(name = \"ELEMENT\")\r\n+    @OrderColumn(name = \"ORDR\")\r\n+    /*\r\n+      * @ManyToMany @JoinTable(name=\"CACHE_PRIMITIVEARRAY\",\r\n+      * joinColumns=@JoinColumn(name=\"ID\"),\r\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n+      */\r\n+    private float[] primitiveArray;\r\n+\r\n+    @PersistentCollection\r\n+    @ContainerTable(name = \"CACHE_DATEARRAY\",\r\n+        joinColumns = @XJoinColumn(name = \"ID\"))\r\n+    @ElementJoinColumn(name = \"ELEMENT\")\r\n+    @OrderColumn(name = \"ORDR\")\r\n+    /*\r\n+      * @ManyToMany @JoinTable(name=\"CACHE_DATEARRAY\",\r\n+      * joinColumns=@JoinColumn(name=\"ID\"),\r\n+      * inverseJoinColumns=@JoinColumn(name=\"ELEMENT\"))\r\n+      */\r\n+    private Date[] dateArray;\r\n+\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date date;\r\n+\r\n+    private Locale locale;\r\n+\r\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n+    private CacheObjectB relatedB = null;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY, cascade = { CascadeType.ALL })\r\n+    private CacheObjectInterface relatedInterface = null;\r\n+\r\n+    public CacheObjectA() {\r\n+    }\r\n+\r\n+    public CacheObjectA(String name, long age) {\r\n+        this.name = name;\r\n+        this.age = age;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public long getAge() {\r\n+        return age;\r\n+    }\r\n+\r\n+    public void setAge(long age) {\r\n+        this.age = age;\r\n+    }\r\n+\r\n+    public CacheObjectA getRelatedObject() {\r\n+        return relatedObj;\r\n+    }\r\n+\r\n+    public void setRelatedObject(CacheObjectA o) {\r\n+        relatedObj = o;\r\n+    }\r\n+\r\n+    public Collection getStringCollection() {\r\n+        return stringColl;\r\n+    }\r\n+\r\n+    public void setStringCollection(Collection coll) {\r\n+        stringColl = coll;\r\n+    }\r\n+\r\n+    public Collection getRelatedCollection() {\r\n+        return relatedColl;\r\n+    }\r\n+\r\n+    public void setRelatedCollection(Collection coll) {\r\n+        relatedColl = coll;\r\n+    }\r\n+\r\n+    public CacheObjectA[] getRelatedArray() {\r\n+        return as;\r\n+    }\r\n+\r\n+    public void setRelatedArray(CacheObjectA[] array) {\r\n+        as = array;\r\n+    }\r\n+\r\n+    public String[] getStringArray() {\r\n+        return stringArray;\r\n+    }\r\n+\r\n+    public void setStringArray(String[] array) {\r\n+        stringArray = array;\r\n+    }\r\n+\r\n+    public void setPrimitiveArray(float[] val) {\r\n+        primitiveArray = val;\r\n+    }\r\n+\r\n+    public float[] getPrimitiveArray() {\r\n+        return primitiveArray;\r\n+    }\r\n+\r\n+    public void setDateArray(Date[] val) {\r\n+        dateArray = val;\r\n+    }\r\n+\r\n+    public Date[] getDateArray() {\r\n+        return dateArray;\r\n+    }\r\n+\r\n+    public void setDate(Date val) {\r\n+        date = val;\r\n+    }\r\n+\r\n+    public Date getDate() {\r\n+        return date;\r\n+    }\r\n+\r\n+    public void setLocale(Locale val) {\r\n+        locale = val;\r\n+    }\r\n+\r\n+    public Locale getLocale() {\r\n+        return locale;\r\n+    }\r\n+\r\n+    public void setRelatedB(CacheObjectB val) {\r\n+        relatedB = val;\r\n+    }\r\n+\r\n+    public CacheObjectB getRelatedB() {\r\n+        return relatedB;\r\n+    }\r\n+\r\n+    public void setRelatedInterface(CacheObjectInterface val) {\r\n+        relatedInterface = val;\r\n+    }\r\n+\r\n+    public CacheObjectInterface getRelatedInterface() {\r\n+        return relatedInterface;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        try {\r\n+            return \"CacheObjectA: \" + super.toString() + \"; name: \" + name\r\n+                + \"; age: \" + age;\r\n+        }\r\n+        catch (Exception e) {\r\n+            return \"CacheObjectA: \" + super.toString() + \"; \"\r\n+                + \"Exception in toString(): \" + e;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"6f3e9f5e71903359ccece64b4a80aed70aefb30c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"CACHE_CHILD1\")\r\n+public class CacheObjectAChild1 extends CacheObjectA {\r\n+\r\n+    private String str1 = null;\r\n+\r\n+    protected CacheObjectAChild1() {\r\n+    }\r\n+\r\n+    public CacheObjectAChild1(String s, String name, int age) {\r\n+        super(name, age);\r\n+        this.str1 = s;\r\n+    }\r\n+\r\n+    public String getStr1() {\r\n+        return str1;\r\n+    }\r\n+\r\n+    public void setStr1(String s) {\r\n+        this.str1 = s;\r\n+    }\r\n+}\r"},{"sha":"7c1bb288b4122dbca1005eefa1dfabbc0161bc4c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.DataCache;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"CACHE_CHILD2\")\r\n+@DataCache(enabled = false)\r\n+public class CacheObjectAChild2 extends CacheObjectA {\r\n+\r\n+    private String str2 = null;\r\n+\r\n+    protected CacheObjectAChild2() {\r\n+    }\r\n+\r\n+    public CacheObjectAChild2(String s, String name, int age) {\r\n+        super(name, age);\r\n+        this.str2 = s;\r\n+    }\r\n+\r\n+    public String getStr2() {\r\n+        return str2;\r\n+    }\r\n+\r\n+    public void setStr2(String s) {\r\n+        this.str2 = s;\r\n+    }\r\n+}\r"},{"sha":"8965351556a4909c7d9bc66f8901d4c4533f1e8b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+import org.apache.openjpa.persistence.DataCache;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"TYP\")\r\n+@DataCache(enabled = false)\r\n+public class CacheObjectB {\r\n+\r\n+    private String str = null;\r\n+\r\n+    public CacheObjectB() {\r\n+    }\r\n+\r\n+    public CacheObjectB(String s) {\r\n+        this.str = s;\r\n+    }\r\n+\r\n+    public String getStr() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setStr(String s) {\r\n+        this.str = s;\r\n+    }\r\n+}\r"},{"sha":"e3e5e2758e91bd04837374e2eb78c15e914a3531","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class CacheObjectBChild1\r\n+    extends CacheObjectB {\r\n+\r\n+    private String str1 = null;\r\n+\r\n+    protected CacheObjectBChild1() {\r\n+    }\r\n+\r\n+    public CacheObjectBChild1(String s, String name) {\r\n+        super(name);\r\n+        this.str1 = s;\r\n+    }\r\n+\r\n+    public String getStr1() {\r\n+        return str1;\r\n+    }\r\n+\r\n+    public void setStr1(String s) {\r\n+        this.str1 = s;\r\n+    }\r\n+}\r"},{"sha":"cc99376f72962fc107703c0437c18c4a48f09fa1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+import org.apache.openjpa.persistence.DataCache;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"TYP\")\r\n+@DataCache(name = \"not-the-default-cache\")\r\n+public class CacheObjectC\r\n+    implements CacheObjectInterface {\r\n+\r\n+    private String str = null;\r\n+\r\n+    public CacheObjectC() {\r\n+    }\r\n+\r\n+    public CacheObjectC(String s) {\r\n+        this.str = s;\r\n+    }\r\n+\r\n+    public String getStr() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setStr(String s) {\r\n+        this.str = s;\r\n+    }\r\n+}\r"},{"sha":"fb82c31a567b3186c22a266f3f96525a47b3224a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+import org.apache.openjpa.persistence.DataCache;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"TYP\")\r\n+@DataCache(name = \"not-the-default-cache\")\r\n+public class CacheObjectD {\r\n+\r\n+    private String str = null;\r\n+\r\n+    public CacheObjectD() {\r\n+    }\r\n+\r\n+    public CacheObjectD(String s) {\r\n+        this.str = s;\r\n+    }\r\n+\r\n+    public String getStr() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setStr(String s) {\r\n+        this.str = s;\r\n+    }\r\n+}\r"},{"sha":"4f5b7a6f929ecc6144bc3724536e336398892ab7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"TYP\")\r\n+public class CacheObjectE {\r\n+\r\n+    private String str = null;\r\n+\r\n+    public CacheObjectE() {\r\n+    }\r\n+\r\n+    public CacheObjectE(String s) {\r\n+        this.str = s;\r\n+    }\r\n+\r\n+    public String getStr() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setStr(String s) {\r\n+        this.str = s;\r\n+    }\r\n+}\r"},{"sha":"46c11d87c54c251eb9df20daf65e19199e5befb9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.DataCache;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@DataCache(timeout = 1000)\r\n+public class CacheObjectF\r\n+    extends CacheObjectE {\r\n+\r\n+    public CacheObjectF() {\r\n+    }\r\n+\r\n+    public CacheObjectF(String s) {\r\n+        super(s);\r\n+    }\r\n+}\r"},{"sha":"d86ab12d1d257beae3db37aacb943fb6578c9135","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.DataCache;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@DataCache(timeout = 5000)\r\n+public class CacheObjectG\r\n+    extends CacheObjectF {\r\n+\r\n+    public CacheObjectG() {\r\n+    }\r\n+\r\n+    public CacheObjectG(String s) {\r\n+        super(s);\r\n+    }\r\n+}\r"},{"sha":"3cbaa400e4fcff54b67d8de8bfa8047504bc8d51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.DataCache;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@DataCache(timeout = 500)\r\n+public class CacheObjectH\r\n+    extends CacheObjectG {\r\n+\r\n+    public CacheObjectH() {\r\n+    }\r\n+\r\n+    public CacheObjectH(String s) {\r\n+        super(s);\r\n+    }\r\n+}\r"},{"sha":"a050fb6335d042b91d4ad8a1cb0a25f7d68c79a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+public interface CacheObjectInterface {\r\n+\r\n+    public void setStr(String val);\r\n+\r\n+    public String getStr();\r\n+}\r"},{"sha":"3d5ca578b945d658a8258740a80af6a51442be01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"TYP\")\r\n+public class CacheObjectJ {\r\n+\r\n+    private String str = null;\r\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n+    private CacheObjectE e = null;\r\n+\r\n+    public CacheObjectJ() {\r\n+    }\r\n+\r\n+    public CacheObjectJ(String s, CacheObjectE e) {\r\n+        this.str = s;\r\n+        this.e = e;\r\n+    }\r\n+\r\n+    public String getStr() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setStr(String s) {\r\n+        this.str = s;\r\n+    }\r\n+\r\n+    //@Embedded()\r\n+    public CacheObjectE getE() {\r\n+        return e;\r\n+    }\r\n+}\r"},{"sha":"a025ba4d09866d1815cd344a811ec8d4ffe1a4ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+/**\r\n+ * A test class for our caching framework that ensures that externalized\r\n+ * fields are handled properly.\r\n+ */\r\n+public class CacheObjectWithExternalizedFields {\r\n+\r\n+    private Class cls;\r\n+\r\n+    public void setCls(Class cls) {\r\n+        this.cls = cls;\r\n+    }\r\n+\r\n+    public Class getCls() {\r\n+        return this.cls;\r\n+    }\r\n+}\r"},{"sha":"d2b864ffdebf8520a5630f1ef5561e4e432fd01e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class FlushDataCacheObject {\r\n+\r\n+    private String string;\r\n+\r\n+    public void setString(String val) {\r\n+        string = val;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return string;\r\n+    }\r\n+}\r"},{"sha":"b0a7a414b2dc6a8eef21d9197ef27663ad4c9b60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","status":"added","additions":284,"deletions":0,"changes":284,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,284 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.Date;\r\n+import java.util.HashSet;\r\n+import java.util.Locale;\r\n+import java.util.Set;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"dataRt1\")\r\n+public class RuntimeTest1\r\n+    implements Serializable {\r\n+\r\n+    public static final String someStaticField = \"someField\";\r\n+\r\n+    private byte byteField;\r\n+    private boolean booleanField;\r\n+    private char charField;\r\n+    private double doubleField;\r\n+    private float floatField;\r\n+    private int intField;\r\n+    private long longField;\r\n+    private short shortField;\r\n+    private String stringField;\r\n+    private BigInteger bigIntegerField;\r\n+    private BigDecimal bigDecimalField;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateField;\r\n+    private Locale localeField;\r\n+    private Byte byteObjfield;\r\n+    private Boolean booleanObjField;\r\n+    private Character charObjField;\r\n+    private Double doubleObjField;\r\n+    private Float floatObjField;\r\n+    private Integer intObjField;\r\n+    private Long longObjField;\r\n+    private Short shortObjField;\r\n+\r\n+    // transactional only\r\n+    @OneToOne(fetch = FetchType.LAZY,\r\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private TransactionalClassPC transField;\r\n+    public String transString;\r\n+\r\n+    // relations\r\n+    @OneToOne(fetch = FetchType.LAZY,\r\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private RuntimeTest1 selfOneOne;\r\n+\r\n+    @OneToMany(mappedBy = \"selfOneOne\",\r\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private Set<RuntimeTest1> selfOneMany = new HashSet<RuntimeTest1>();\r\n+\r\n+    public RuntimeTest1() {\r\n+    }\r\n+\r\n+    public RuntimeTest1(String str, int i) {\r\n+        stringField = str;\r\n+        intField = i;\r\n+    }\r\n+\r\n+    public byte getByteField() {\r\n+        return this.byteField;\r\n+    }\r\n+\r\n+    public void setByteField(byte byteField) {\r\n+        this.byteField = byteField;\r\n+    }\r\n+\r\n+    public boolean getBooleanField() {\r\n+        return this.booleanField;\r\n+    }\r\n+\r\n+    public void setBooleanField(boolean booleanField) {\r\n+        this.booleanField = booleanField;\r\n+    }\r\n+\r\n+    public char getCharField() {\r\n+        return this.charField;\r\n+    }\r\n+\r\n+    public void setCharField(char charField) {\r\n+        this.charField = charField;\r\n+    }\r\n+\r\n+    public double getDoubleField() {\r\n+        return this.doubleField;\r\n+    }\r\n+\r\n+    public void setDoubleField(double doubleField) {\r\n+        this.doubleField = doubleField;\r\n+    }\r\n+\r\n+    public float getFloatField() {\r\n+        return this.floatField;\r\n+    }\r\n+\r\n+    public void setFloatField(float floatField) {\r\n+        this.floatField = floatField;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getLongField() {\r\n+        return this.longField;\r\n+    }\r\n+\r\n+    public void setLongField(long longField) {\r\n+        this.longField = longField;\r\n+    }\r\n+\r\n+    public short getShortField() {\r\n+        return this.shortField;\r\n+    }\r\n+\r\n+    public void setShortField(short shortField) {\r\n+        this.shortField = shortField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public BigInteger getBigIntegerField() {\r\n+        return this.bigIntegerField;\r\n+    }\r\n+\r\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\r\n+        this.bigIntegerField = bigIntegerField;\r\n+    }\r\n+\r\n+    public BigDecimal getBigDecimalField() {\r\n+        return this.bigDecimalField;\r\n+    }\r\n+\r\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\r\n+        this.bigDecimalField = bigDecimalField;\r\n+    }\r\n+\r\n+    public Date getDateField() {\r\n+        return this.dateField;\r\n+    }\r\n+\r\n+    public void setDateField(Date dateField) {\r\n+        this.dateField = dateField;\r\n+    }\r\n+\r\n+    public Locale getLocaleField() {\r\n+        return this.localeField;\r\n+    }\r\n+\r\n+    public void setLocaleField(Locale localeField) {\r\n+        this.localeField = localeField;\r\n+    }\r\n+\r\n+    public Byte getByteObjfield() {\r\n+        return this.byteObjfield;\r\n+    }\r\n+\r\n+    public void setByteObjfield(Byte byteObjfield) {\r\n+        this.byteObjfield = byteObjfield;\r\n+    }\r\n+\r\n+    public Boolean getBooleanObjField() {\r\n+        return this.booleanObjField;\r\n+    }\r\n+\r\n+    public void setBooleanObjField(Boolean booleanObjField) {\r\n+        this.booleanObjField = booleanObjField;\r\n+    }\r\n+\r\n+    public Character getCharObjField() {\r\n+        return this.charObjField;\r\n+    }\r\n+\r\n+    public void setCharObjField(Character charObjField) {\r\n+        this.charObjField = charObjField;\r\n+    }\r\n+\r\n+    public Double getDoubleObjField() {\r\n+        return this.doubleObjField;\r\n+    }\r\n+\r\n+    public void setDoubleObjField(Double doubleObjField) {\r\n+        this.doubleObjField = doubleObjField;\r\n+    }\r\n+\r\n+    public Float getFloatObjField() {\r\n+        return this.floatObjField;\r\n+    }\r\n+\r\n+    public void setFloatObjField(Float floatObjField) {\r\n+        this.floatObjField = floatObjField;\r\n+    }\r\n+\r\n+    public Integer getIntObjField() {\r\n+        return this.intObjField;\r\n+    }\r\n+\r\n+    public void setIntObjField(Integer intObjField) {\r\n+        this.intObjField = intObjField;\r\n+    }\r\n+\r\n+    public Long getLongObjField() {\r\n+        return this.longObjField;\r\n+    }\r\n+\r\n+    public void setLongObjField(Long longObjField) {\r\n+        this.longObjField = longObjField;\r\n+    }\r\n+\r\n+    public Short getShortObjField() {\r\n+        return this.shortObjField;\r\n+    }\r\n+\r\n+    public void setShortObjField(Short shortObjField) {\r\n+        this.shortObjField = shortObjField;\r\n+    }\r\n+\r\n+    public TransactionalClassPC getTransField() {\r\n+        return this.transField;\r\n+    }\r\n+\r\n+    public void setTransField(TransactionalClassPC transField) {\r\n+        this.transField = transField;\r\n+    }\r\n+\r\n+    public RuntimeTest1 getSelfOneOne() {\r\n+        return this.selfOneOne;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n+        this.selfOneOne = selfOneOne;\r\n+    }\r\n+\r\n+    public Set getSelfOneMany() {\r\n+        return this.selfOneMany;\r\n+    }\r\n+\r\n+    public void setSelfOneMany(Set selfOneMany) {\r\n+        this.selfOneMany = selfOneMany;\r\n+    }\r\n+}\r"},{"sha":"35a6cd427380778106dfe39405bc6723f651ff66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"dataRt2\")\r\n+public class RuntimeTest2\r\n+    extends RuntimeTest1 {\r\n+\r\n+    private int intField2;\r\n+\r\n+    public RuntimeTest2() {\r\n+    }\r\n+\r\n+    public RuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+}\r"},{"sha":"f360ef1cd7e4e3004519c811c2dd689ddfbf515b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ScheduledEviction {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public ScheduledEviction(String s) {\r\n+        stringField = s;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+}\r"},{"sha":"e9a10f37edf424f69a334e4df0171fcb00b14254","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+@Entity\r\n+public class SelfReferencingCacheTestObject {\r\n+\r\n+    private String str;\r\n+    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n+    private SelfReferencingCacheTestObject o;\r\n+    private CacheObjectAChild1 embedded;\r\n+\r\n+    public SelfReferencingCacheTestObject(String str,\r\n+        SelfReferencingCacheTestObject o) {\r\n+        this.str = str;\r\n+        this.o = o;\r\n+        embedded = new CacheObjectAChild1(str, str, 0);\r\n+    }\r\n+\r\n+    public SelfReferencingCacheTestObject getO() {\r\n+        return o;\r\n+    }\r\n+\r\n+    public String getStr() {\r\n+        return str;\r\n+    }\r\n+}\r"},{"sha":"19b0519038f2764740fd3370b981e6cf95457be9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class TransactionalClassPC {\r\n+\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"ee6c4a45018b5d7fb214a0d09357c1b146d0a970","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.enhance.common.apps.NoClone;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.PCClone;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.SubclassClone;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestClone\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestClone(String name) {\r\n+        super(name, \"enhancecactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+\r\n+        deleteAll(NoClone.class);\r\n+        deleteAll(PCClone.class);\r\n+        deleteAll(SubclassClone.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * test no clone method declared.\r\n+     */\r\n+    public void testNoClone() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        NoClone orig = new NoClone(\"test\");\r\n+        pm.persist(orig);\r\n+        endTx(pm);\r\n+        pm.refresh(orig);\r\n+        NoClone copy = orig.safeClone();\r\n+        assertEquals(\"test\", copy.getString());\r\n+        assertTrue(pm.isPersistent(orig));\r\n+        assertFalse(pm.isPersistent(copy));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    /**\r\n+     * test subclass which we cannot handle safely\r\n+     */\r\n+    public void testSubclassClone() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        SubclassClone orig = new SubclassClone(\"test\");\r\n+        pm.persist(orig);\r\n+        endTx(pm);\r\n+        pm.refresh(orig);\r\n+        SubclassClone copy = orig.safeClone();\r\n+        assertEquals(\"test\", copy.getString());\r\n+        assertTrue(pm.isPersistent(orig));\r\n+        // this should be true since the sm should be VM copied.\r\n+        // as we intentionally don't handle this case.\r\n+        assertTrue(pm.isPersistent(copy));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    /**\r\n+     * test explicit clone call\r\n+     */\r\n+    public void testPCClone() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        PCClone orig = new PCClone(\"test\");\r\n+        pm.persist(orig);\r\n+        endTx(pm);\r\n+        pm.refresh(orig);\r\n+        PCClone copy = (PCClone) orig.clone();\r\n+        assertEquals(\"test\", copy.getString());\r\n+        assertTrue(pm.isPersistent(orig));\r\n+        assertFalse(pm.isPersistent(copy));\r\n+        endEm(pm);\r\n+    }\r\n+}\r\n+\r"},{"sha":"b4021e9d93d73b6bd7fbe595dc89d10830cc73da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.enhance.DynamicStorage;\r\n+import org.apache.openjpa.enhance.DynamicStorageGenerator;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+\r\n+public class TestDynamicStorageGenerator\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestDynamicStorageGenerator(String s) {\r\n+        super(s, \"enhancecactusapp\");\r\n+    }\r\n+\r\n+    public void testStorage()\r\n+        throws Exception {\r\n+\r\n+        DynamicStorageGenerator gen = new DynamicStorageGenerator();\r\n+        int[] types = new int[]{\r\n+            JavaTypes.BOOLEAN,\r\n+            JavaTypes.BYTE,\r\n+            JavaTypes.CHAR,\r\n+            JavaTypes.INT,\r\n+            JavaTypes.SHORT,\r\n+            JavaTypes.LONG,\r\n+            JavaTypes.FLOAT,\r\n+            JavaTypes.DOUBLE,\r\n+            JavaTypes.STRING,\r\n+            JavaTypes.OBJECT\r\n+        };\r\n+        DynamicStorage storage = gen.generateStorage(types,\r\n+            \"org.apache.openjpa.enhance.Test\");\r\n+        storage = storage.newInstance();\r\n+\r\n+        storage.setBoolean(0, true);\r\n+        storage.setByte(1, (byte) 1);\r\n+        storage.setChar(2, 'f');\r\n+        storage.setInt(3, 3);\r\n+        storage.setShort(4, (short) 4);\r\n+        storage.setLong(5, 5);\r\n+        storage.setFloat(6, (float) 6.6);\r\n+        storage.setDouble(7, 7.7);\r\n+        storage.setObject(8, \"field8\");\r\n+        Date date = new Date();\r\n+        storage.setObject(9, date);\r\n+\r\n+        assertTrue(storage.getBoolean(0));\r\n+        assertEquals(1, storage.getByte(1));\r\n+        assertEquals('f', storage.getChar(2));\r\n+        assertEquals(3, storage.getInt(3));\r\n+        assertEquals(4, storage.getShort(4));\r\n+        assertEquals(5, storage.getLong(5));\r\n+        assertTrue(6.59 < storage.getFloat(6) && 6.61 > storage.getFloat(6));\r\n+        assertTrue(7.69 < storage.getDouble(7)\r\n+            && 7.71 > storage.getDouble(7));\r\n+        assertEquals(\"field8\", storage.getObject(8));\r\n+        assertEquals(date, storage.getObject(9));\r\n+    }\r\n+}\r"},{"sha":"afed28fb0da6b8c718d63159585842781215336c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.enhance.PCEnhancer;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.util.OpenJPAException;\r\n+\r\n+public class TestNoNoArgs\r\n+    extends AbstractTestCase {\r\n+\r\n+    OpenJPAConfiguration conf;\r\n+    MetaDataRepository repos;\r\n+    ClassLoader loader;\r\n+    private PCEnhancer.Flags flags = new PCEnhancer.Flags();\r\n+\r\n+    public TestNoNoArgs(String s) {\r\n+        super(s, \"enhancecactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        conf = ((OpenJPAEntityManagerSPI) em).getConfiguration();\r\n+        repos = conf.newMetaDataRepositoryInstance();\r\n+        loader = em.getClassLoader();\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNoNoArgs()\r\n+        throws IOException {\r\n+        PCEnhancer.run((OpenJPAConfiguration) conf,\r\n+            new String[]{ },\r\n+            flags, repos, null, loader);\r\n+    }\r\n+\r\n+    public void testNo2NoArgs()\r\n+        throws IOException {\r\n+        flags.addDefaultConstructor = false;\r\n+        boolean caughtException = false;\r\n+        try {\r\n+            PCEnhancer.run((OpenJPAConfiguration) conf, new String[]{ },\r\n+                flags, repos, null, loader);\r\n+        } catch (OpenJPAException e) {\r\n+            caughtException = true;\r\n+        }\r\n+        assertTrue(caughtException);\r\n+    }\r\n+\r\n+    public void testNo3NoArgs()\r\n+        throws IOException {\r\n+        PCEnhancer.run((OpenJPAConfiguration) conf,\r\n+            new String[]{ \"persistence.enhance.common.apps.Entity1\" },\r\n+            flags, repos, null, loader);\r\n+    }\r\n+}\r"},{"sha":"652d5a53f4730d76b6a3224b35e44d13f4fa9fb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","status":"added","additions":559,"deletions":0,"changes":559,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,559 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.enhance.common.apps.BackingFieldNameMismatchInstance;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.BaseEntity;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.BasicSubclassInstance;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.DerivedEntity;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance2;\r\n+import org.apache.openjpa.persistence.enhance.common.apps.SubclassTestInstance;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import junit.framework.AssertionFailedError;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.util.ExceptionInfo;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n+\r\n+public class TestSubclassedBehavior extends AbstractTestCase {\r\n+\r\n+    public TestSubclassedBehavior(String name) {\r\n+        super(name, \"enhancecactusapp\");\r\n+    }\r\n+\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(BasicSubclassInstance.class);\r\n+        deleteAll(BackingFieldNameMismatchInstance.class);\r\n+        deleteAll(BaseEntity.class);\r\n+        deleteAll(ManagedInverseTestInstance.class);\r\n+        deleteAll(ManagedInverseTestInstance2.class);\r\n+    }\r\n+\r\n+    public void testInheritance() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        DerivedEntity de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\r\n+        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance(pm,\r\n+            BasicSubclassInstance.class);\r\n+        basic.setStringField(\"basic one-to-one\");\r\n+        de.setOneToOne(basic);\r\n+        Object oid = persistenceOperations(pm, de, false);\r\n+\r\n+        // ##### need a test case for JDOHelper.createEntityManager() for\r\n+        // subclass\r\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(pm, de.getClass());\r\n+        assertEquals(BaseEntity.class, meta.getPCSuperclass());\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+\r\n+        Object o = pm.find(DerivedEntity.class, oid);\r\n+        assertTrue(o instanceof DerivedEntity);\r\n+        de = (DerivedEntity) o;\r\n+        Broker b = JPAFacadeHelper.toBroker(pm);\r\n+        OpenJPAStateManager sm = b.getStateManager(de);\r\n+        // we use getLoaded() here because isLoaded() always returns true.\r\n+        assertFalse(sm.getLoaded().get(\r\n+            sm.getMetaData().getField(\"oneToOne\").getIndex()));\r\n+        assertEquals(\"basic one-to-one\", de.getOneToOne().getStringField());\r\n+        assertTrue(sm.getLoaded().get(sm.getMetaData()\r\n+            .getField(\"oneToOne\").getIndex()));\r\n+\r\n+        startTx(pm);\r\n+        pm.remove(de);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testBasicSubclassPersistenceOperations()\r\n+        throws ClassNotFoundException {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        BasicSubclassInstance o = (BasicSubclassInstance) newInstance(pm,\r\n+            BasicSubclassInstance.class);\r\n+        persistenceOperations(pm, o, true);\r\n+    }\r\n+\r\n+    public void testBackingFieldNameMismatch() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        BackingFieldNameMismatchInstance o = (BackingFieldNameMismatchInstance)\r\n+            newInstance(pm, BackingFieldNameMismatchInstance.class);\r\n+        persistenceOperations(pm, o, true);\r\n+    }\r\n+\r\n+    private Object newInstance(OpenJPAEntityManager pm, Class cls) {\r\n+        return pm.createInstance(cls);\r\n+    }\r\n+\r\n+    private Object createInstance(EntityManager em, Class cls) {\r\n+        return ((OpenJPAEntityManager) em).createInstance(cls);\r\n+    }\r\n+\r\n+    private Object persistenceOperations(OpenJPAEntityManager pm,\r\n+        SubclassTestInstance o, boolean delete) {\r\n+        startTx(pm);\r\n+        pm.persist(o);\r\n+        o.setStringField(\"new persistent instance\");\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        o = (SubclassTestInstance) pm.find(SubclassTestInstance.class, oid);\r\n+\r\n+        assertEquals(\"new persistent instance\", o.getStringField());\r\n+        startTx(pm);\r\n+        o.setStringField(\"modified persistent instance\");\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        if (delete) {\r\n+            pm = (OpenJPAEntityManager) currentEntityManager();\r\n+            o = (SubclassTestInstance) pm.find(SubclassTestInstance.class, oid);\r\n+            assertEquals(\"modified persistent instance\", o.getStringField());\r\n+            startTx(pm);\r\n+            pm.remove(o);\r\n+            endTx(pm);\r\n+            endEm(pm);\r\n+            return null;\r\n+        } else {\r\n+            return oid;\r\n+        }\r\n+    }\r\n+\r\n+    public void testPolymorphicQueries() {\r\n+        deleteAll(BaseEntity.class);\r\n+        deleteAll(BasicSubclassInstance.class);\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        BaseEntity be = (BaseEntity) newInstance(pm, BaseEntity.class);\r\n+        be.setShortField((short) 0);\r\n+        pm.persist(be);\r\n+\r\n+        be = (BaseEntity) newInstance(pm, BaseEntity.class);\r\n+        be.setShortField((short) 1);\r\n+        pm.persist(be);\r\n+\r\n+        DerivedEntity de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\r\n+        de.setShortField((short) 2);\r\n+        de.setOneToOne((BasicSubclassInstance) newInstance(pm,\r\n+            BasicSubclassInstance.class));\r\n+        pm.persist(de);\r\n+\r\n+        de = (DerivedEntity) newInstance(pm, DerivedEntity.class);\r\n+        de.setShortField((short) 3);\r\n+        de.setOneToOne((BasicSubclassInstance) newInstance(pm,\r\n+            BasicSubclassInstance.class));\r\n+        pm.persist(de);\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        OpenJPAQuery q =\r\n+            pm.createQuery(\"SELECT a FROM BaseEntity a \"\r\n+                + \"ORDER BY a.shortField ASC\");\r\n+        List l = (List) q.getResultList();\r\n+        assertEquals(4, l.size());\r\n+        assertEquals(0, ((BaseEntity) l.get(0)).getShortField());\r\n+        assertEquals(1, ((BaseEntity) l.get(1)).getShortField());\r\n+        assertEquals(2, ((BaseEntity) l.get(2)).getShortField());\r\n+        assertEquals(3, ((BaseEntity) l.get(3)).getShortField());\r\n+        assertTrue(l.get(2) instanceof DerivedEntity);\r\n+        assertTrue(l.get(3) instanceof DerivedEntity);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testEnhancedClassChangesOutsideTxWithoutNTW() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        deleteAll(Entity1.class);\r\n+        endTx(pm);\r\n+        Entity1 o = new Entity1(8, \"pk 8\", 4);\r\n+        startTx(pm);\r\n+        pm.persist(o);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        o = (Entity1) pm.find(Entity1.class, oid);\r\n+\r\n+        try {\r\n+            o.setStringField(\"hello\");\r\n+            fail(\"non-transactional write should not be allowed\");\r\n+        } catch (Exception e) {\r\n+            // expected\r\n+        } finally {\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testSubclassChangesOutsideTxWithoutNTW() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance(pm,\r\n+            BasicSubclassInstance.class);\r\n+        basic.setStringField(\"foo\");\r\n+        startTx(pm);\r\n+        pm.persist(basic);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(basic);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        basic =\r\n+            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\r\n+\r\n+        try {\r\n+            basic.setStringField(\"hello\");\r\n+            fail(\"non-transactional write should not be allowed\");\r\n+        } catch (Exception e) {\r\n+            // expected\r\n+        } finally {\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testBasicPMUses() {\r\n+        // retain so we don't reload in the reads after the tx commit\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        Broker broker = JPAFacadeHelper.toBroker(pm);\r\n+        startTx(pm);\r\n+\r\n+        // register a new instance with the PM\r\n+        BasicSubclassInstance basic = (BasicSubclassInstance) newInstance\r\n+            (pm, BasicSubclassInstance.class);\r\n+        assertTrue(ImplHelper.isManageable(basic));\r\n+        basic.setStringField(\"foo\");\r\n+        pm.persist(basic);\r\n+        assertTrue(broker.isNew(basic));\r\n+        assertTrue(broker.isPersistent(basic));\r\n+\r\n+        // commit. this should cause the data to be written.\r\n+        // ### should check SQL count\r\n+        endTx(pm);\r\n+\r\n+        assertFalse(broker.isNew(basic));\r\n+\r\n+        OpenJPAStateManager sm = broker.getStateManager(basic);\r\n+        assertNotNull(sm);\r\n+        assertEquals(sm.getManagedInstance(), basic);\r\n+\r\n+        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\r\n+        assertEquals(\"foo\", sm.fetch(fmd.getIndex()));\r\n+        assertTrue(sm.getLoaded().get(fmd.getIndex()));\r\n+\r\n+        pm.evict(basic);\r\n+        assertFalse(sm.getLoaded().get(fmd.getIndex()));\r\n+        // lazy loading\r\n+        assertNotNull(basic.getStringField());\r\n+        assertEquals(\"foo\", sm.fetch(fmd.getIndex()));\r\n+        assertEquals(\"foo\", basic.getStringField());\r\n+        assertTrue(sm.getLoaded().get(fmd.getIndex()));\r\n+\r\n+        startTx(pm);\r\n+        basic.setStringField(\"bar\");\r\n+        assertTrue(broker.isDirty(basic));\r\n+        endTx(pm);\r\n+        Object oid = broker.getObjectId(basic);\r\n+        assertNotNull(oid);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        basic =\r\n+            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\r\n+        assertEquals(\"bar\", basic.getStringField());\r\n+\r\n+        startTx(pm);\r\n+        pm.remove(basic);\r\n+        assertTrue(JPAFacadeHelper.toBroker(pm).isDeleted(basic));\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testGetObjectId() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        BasicSubclassInstance basic = new BasicSubclassInstance();\r\n+        basic.setStringField(\"foo\");\r\n+        startTx(pm);\r\n+        pm.persist(basic);\r\n+        endTx(pm);\r\n+        Object oid = null;\r\n+        try {\r\n+            assertNotNull(oid = pm.getObjectId(basic));\r\n+        } catch (Exception e) {\r\n+            fail(\"object id lookup failed: \" + e.getMessage());\r\n+        }\r\n+\r\n+        startTx(pm);\r\n+        pm.remove(basic);\r\n+        // before committing, id should exist still\r\n+        assertNotNull(pm.getObjectId(basic));\r\n+\r\n+        endTx(pm);\r\n+        assertNull(pm.getObjectId(basic));\r\n+        endEm(pm);\r\n+\r\n+        // looking up the instance by id in a new PM should fail.\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        try {\r\n+            pm.find(BasicSubclassInstance.class, oid);\r\n+            fail(\"instance should have been deleted!\");\r\n+        } catch (Exception e) {\r\n+            // expected\r\n+        }\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testChangesOutsideTxWithNTW() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        BasicSubclassInstance basic = new BasicSubclassInstance();\r\n+        basic.setStringField(\"foo\");\r\n+        startTx(pm);\r\n+        pm.persist(basic);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(basic);\r\n+        endEm(pm);\r\n+\r\n+        pm = getNTWPM();\r\n+        basic =\r\n+            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\r\n+        basic.setStringField(\"hello\");\r\n+        startTx(pm);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        basic =\r\n+            (BasicSubclassInstance) pm.find(BasicSubclassInstance.class, oid);\r\n+        try {\r\n+            assertEquals(\"hello\", basic.getStringField());\r\n+        } catch (AssertionFailedError afe) {\r\n+            bug(1205, afe, \"JDO 2-style NTW not supported.\");\r\n+        }\r\n+    }\r\n+\r\n+    public void testChangesOutsideTxWithoutNTW() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        BasicSubclassInstance basic = new BasicSubclassInstance();\r\n+        basic.setStringField(\"foo\");\r\n+        startTx(pm);\r\n+        pm.persist(basic);\r\n+        endTx(pm);\r\n+\r\n+        try {\r\n+            basic.setStringField(\"hello\");\r\n+            fail(\"should not be able to write outside tx without NTW\");\r\n+        } catch (RuntimeException re) {\r\n+            // expected case\r\n+            Object failed = ((ExceptionInfo) re).getFailedObject();\r\n+            assertNotNull(failed);\r\n+            assertSame(basic, failed);\r\n+        } finally {\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    private OpenJPAEntityManager getNTWPM() {\r\n+        EntityManagerFactory pmf = getEmf();\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) pmf.createEntityManager();\r\n+        em.setNontransactionalWrite(true);\r\n+        return em;\r\n+    }\r\n+\r\n+    /*\r\n+     public void testCallbacks ()\r\n+     {\r\n+         fail (\"##### unimplemented test\");\r\n+     }\r\n+\r\n+\r\n+     public void testTransactionListeners ()\r\n+     {\r\n+         fail (\"#####\");\r\n+     }\r\n+\r\n+\r\n+     public void testRemoteCommitListeners ()\r\n+     {\r\n+         fail (\"#####\");\r\n+     }\r\n+\r\n+\r\n+     public void testCaching ()\r\n+     {\r\n+         fail (\"#####\");\r\n+     }\r\n+\r\n+\r\n+     public void testRemote ()\r\n+     {\r\n+         fail (\"#####\");\r\n+     }\r\n+     */\r\n+\r\n+    public void testVersionIncrementAndIdField() {\r\n+        // make sure that version increments happen correctly, and are\r\n+        // visible in the user-visible instance.\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        BasicSubclassInstance basic = new BasicSubclassInstance();\r\n+        basic.setStringField(\"foo\");\r\n+        startTx(pm);\r\n+        pm.persist(basic);\r\n+        endTx(pm);\r\n+\r\n+        assertEquals(1, basic.getVersion());\r\n+        long id = basic.getId();\r\n+        assertNotEquals(0, id);\r\n+\r\n+        startTx(pm);\r\n+        basic.setStringField(\"bar\");\r\n+        endTx(pm);\r\n+        assertEquals(2, basic.getVersion());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    /*\r\n+     public void testAutoAssignedFields ()\r\n+     {\r\n+         // make sure that auto-assigned field values get into the user-visible\r\n+         // instance.\r\n+         fail (\"#####\");\r\n+     }\r\n+     */\r\n+\r\n+    public void testJPABasics() {\r\n+        EntityManager em = currentEntityManager();\r\n+        BasicSubclassInstance basic = (BasicSubclassInstance) createInstance(\r\n+            em, BasicSubclassInstance.class);\r\n+        basic.setStringField(\"hello\");\r\n+        startTx(em);\r\n+        em.persist(basic);\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /*\r\n+     public void testDetachmentAndAttachemnt ()\r\n+     {\r\n+         fail (\"#####\");\r\n+     }\r\n+\r\n+\r\n+     public void testEmbeddedNonEnhanced ()\r\n+     {\r\n+         fail (\"#####\");\r\n+     }\r\n+\r\n+\r\n+     public void testTransactionalNonEnhanced ()\r\n+     {\r\n+         fail (\"#####\");\r\n+     }\r\n+\r\n+\r\n+     public void testBulkTransactionalNonEnhanced ()\r\n+     {\r\n+         fail (\"#####\");\r\n+     }\r\n+     */\r\n+\r\n+    public void testSingleValuedInverseManagement() {\r\n+        Map map = new HashMap();\r\n+        map.put(\"openjpa.InverseManager\", \"true\");\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)\r\n+            getEmf(map).createEntityManager();\r\n+        ManagedInverseTestInstance managed = (ManagedInverseTestInstance)\r\n+            newInstance(pm, ManagedInverseTestInstance.class);\r\n+        ManagedInverseTestInstance2 managed2 = (ManagedInverseTestInstance2)\r\n+            newInstance(pm, ManagedInverseTestInstance2.class);\r\n+        managed.setStringField(\"managed\");\r\n+        managed2.setStringField(\"managed2\");\r\n+        managed.setManaged2(managed2);\r\n+\r\n+        startTx(pm);\r\n+        pm.persist(managed);\r\n+        endTx(pm);\r\n+\r\n+        assertSame(managed, managed2.getManaged());\r\n+    }\r\n+\r\n+    public void testBackingFieldConfigurationWithTwoFactories() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        // this causes DerivedEntity.class to get loaded into PCRegistry\r\n+        newInstance(pm, DerivedEntity.class);\r\n+        Map map = new HashMap();\r\n+        map.put(\"openjpa.Log\", \"DiagnosticContext=subclass-two-factories-test\");\r\n+        pm = (OpenJPAEntityManager) getEmf(map).createEntityManager();\r\n+        newInstance(pm, DerivedEntity.class);\r\n+\r\n+        // this second new-instance creation will result in the metadata\r\n+        // defaults being loaded from the PCRegistry instead of via reflection.\r\n+        // Make sure that things still work as expected from the\r\n+        // registry-parsing code.\r\n+        ClassMetaData meta = getConfiguration()\r\n+            .getMetaDataRepositoryInstance().\r\n+            getMetaData(DerivedEntity.class, null, false);\r\n+        assertTrue(\"meta's access should be ACCESS_PROPERTY\",\r\n+            meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY);\r\n+        FieldMetaData[] fmds = meta.getFields();\r\n+        for (int i = 0; i < fmds.length; i++) {\r\n+            assertEquals(Method.class, fmds[i].getBackingMember().getClass());\r\n+\r\n+            // make sure that the fields are defined in the right part of the\r\n+            // hierarchy\r\n+            if (fmds[i].getName().equals(\"intField\") ||\r\n+                fmds[i].getName().equals(\"oneToOne\")) {\r\n+                assertEquals(DerivedEntity.class,\r\n+                    fmds[i].getDefiningMetaData().getDescribedType());\r\n+            } else {\r\n+                assertEquals(BaseEntity.class,\r\n+                    fmds[i].getDefiningMetaData().getDescribedType());\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"aed9682a24196c14e598d13dc1c0003ff5aec3b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * Backing field names do not match up with the property accessor names, and\r\n+ * we use package-protected method access (which is not supported by JPA),\r\n+ *\r\n+ * @see TestPCSubclasser\r\n+ */\r\n+@Entity\r\n+@Table(name = \"BACKINGMISMATCH\")\r\n+public class BackingFieldNameMismatchInstance\r\n+    implements SubclassTestInstance {\r\n+\r\n+    protected long _id; // protected since we don't have a setter\r\n+    private int _version;\r\n+    private String _s;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    public long getId() {\r\n+        return _id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        _id = id;\r\n+    }\r\n+\r\n+    @Version\r\n+    public int getVersion() {\r\n+        return _version;\r\n+    }\r\n+\r\n+    public void setVersion(int v) {\r\n+        _version = v;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return _s;\r\n+    }\r\n+\r\n+    public void setStringField(String s) {\r\n+        _s = s;\r\n+    }\r\n+}\r"},{"sha":"10f475a46d651463a6064749db4150e5917b75ca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * @see TestPCSubclasser\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+public class BaseEntity\r\n+    implements SubclassTestInstance {\r\n+\r\n+    private long _id;\r\n+    private int _version;\r\n+    private String _s;\r\n+    private short _short;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    public long getId() {\r\n+        return _id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        _id = id;\r\n+    }\r\n+\r\n+    @Version\r\n+    public int getVersion() {\r\n+        return _version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        _version = version;\r\n+    }\r\n+\r\n+    public void setStringField(String s) {\r\n+        _s = s;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return _s;\r\n+    }\r\n+\r\n+    public short getShortField() {\r\n+        return _short;\r\n+    }\r\n+\r\n+    public void setShortField(short aShort) {\r\n+        _short = aShort;\r\n+    }\r\n+}\r"},{"sha":"701db453bdd565ce3a0bcc132115fa11b8aa68c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * @see TestPCSubclasser\r\n+ */\r\n+@Entity\r\n+public class BasicSubclassInstance\r\n+    implements SubclassTestInstance {\r\n+\r\n+    private long id;\r\n+    private int version;\r\n+    private String stringField;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    @Version\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setVersion(int v) {\r\n+        version = v;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String str) {\r\n+        stringField = str;\r\n+    }\r\n+}\r"},{"sha":"f4c45b7bbf5006577858140ae5207c23a4be7d64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+/**\r\n+ * @see TestPCSubclasser\r\n+ */\r\n+@Entity\r\n+public class DerivedEntity\r\n+    extends BaseEntity {\r\n+\r\n+    private int _i;\r\n+    private BasicSubclassInstance _basic;\r\n+\r\n+    public int getIntField() {\r\n+        return _i;\r\n+    }\r\n+\r\n+    public void setIntField(int i) {\r\n+        _i = i;\r\n+    }\r\n+\r\n+    @OneToOne(cascade = CascadeType.PERSIST, fetch = FetchType.LAZY)\r\n+    public BasicSubclassInstance getOneToOne() {\r\n+        return _basic;\r\n+    }\r\n+\r\n+    public void setOneToOne(BasicSubclassInstance basic) {\r\n+        // ##### this should be throwing an exception, but clashes with\r\n+        // delete behavior.\r\n+        //#####if (basic == null)\r\n+        //#####throw new NullPointerException ();\r\n+        _basic = basic;\r\n+    }\r\n+}\r"},{"sha":"b9930fc7681bdda5d9220731e176d41918e7257b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class DetachablePC\r\n+    implements Serializable {\r\n+\r\n+    private long id;\r\n+    private String val;\r\n+}\r"},{"sha":"9c8bc3de6e4b3b604a6ccc97a5c4f14f5745c83b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class DetachableVersionedPC\r\n+    implements Serializable {\r\n+\r\n+    private long id;\r\n+    private String val;\r\n+    private int version;\r\n+}\r"},{"sha":"da1f3368f8aaee73fe006aa87b5488def30c6548","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name = \"entity_1\")\r\n+@Inheritance(strategy = InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name = \"NativeTestResult\",\r\n+    entities = @EntityResult(entityClass = Entity1.class))\r\n+public class Entity1 implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+    @Id\r\n+    protected long pk;\r\n+\r\n+    @Basic\r\n+    @Column(length = 35)\r\n+    protected String stringField;\r\n+\r\n+    @Basic\r\n+    protected int intField;\r\n+\r\n+    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\r\n+    protected Entity2 entity2Field;\r\n+\r\n+    @Version\r\n+    protected int versionField;\r\n+\r\n+    public Entity1() {\r\n+    }\r\n+\r\n+    public Entity1(long pk, String stringField, int intField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setIntField(int val) {\r\n+        intField = val;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public void setEntity2Field(Entity2 val) {\r\n+        entity2Field = val;\r\n+    }\r\n+\r\n+    public Entity2 getEntity2Field() {\r\n+        return entity2Field;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n+            intField);\r\n+    }\r\n+}\r"},{"sha":"928cb24582670d087c2d0295283d6e814892e48a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+\r\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+/**\r\n+ * FIX-ME\r\n+ * <p/>\r\n+ * It should complain if i uncomment the above strategies...but it does\r\n+ */\r\n+@Entity\r\n+public class Entity2 implements Serializable {\r\n+\r\n+    /**\r\n+     *\r\n+     */\r\n+    private static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+    @Id\r\n+    protected long pk;\r\n+\r\n+    @Basic\r\n+    @Column(length = 35)\r\n+    protected String stringField;\r\n+\r\n+    @Basic\r\n+    protected int intField;\r\n+\r\n+    public Entity2() {\r\n+    }\r\n+\r\n+    public Entity2(long pk, String stringField, int intField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setIntField(int val) {\r\n+        intField = val;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n+            intField);\r\n+    }\r\n+}\r"},{"sha":"279d7e2eef0557e2c63aac799e1a6359c284e9a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name = \"MGDINVERSE\")\r\n+public class ManagedInverseTestInstance {\r\n+\r\n+    private long id;\r\n+    private int version;\r\n+    private String stringField;\r\n+    private ManagedInverseTestInstance2 managed2;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    @OneToOne(cascade = CascadeType.PERSIST)\r\n+    public ManagedInverseTestInstance2 getManaged2() {\r\n+        return managed2;\r\n+    }\r\n+\r\n+    public void setManaged2(ManagedInverseTestInstance2 managed2) {\r\n+        this.managed2 = managed2;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    @Version\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+}\r"},{"sha":"ccecabfbc80a0848cdf2cc97d9d74838f97a2bc0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name = \"MGDINVERSE_2\")\r\n+public class ManagedInverseTestInstance2 {\r\n+\r\n+    private long id;\r\n+    private int version;\r\n+    private String stringField;\r\n+    private ManagedInverseTestInstance managed;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    @OneToOne(cascade = CascadeType.PERSIST, mappedBy = \"managed2\")\r\n+    public ManagedInverseTestInstance getManaged() {\r\n+        return managed;\r\n+    }\r\n+\r\n+    public void setManaged(ManagedInverseTestInstance managed) {\r\n+        this.managed = managed;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    @Version\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+}\r"},{"sha":"0b2be8e1b8e44048c0b8f42a99188939f45281e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class No2NoArgs {\r\n+\r\n+    private String name;\r\n+\r\n+    public No2NoArgs(String n) {\r\n+        name = n;\r\n+    }\r\n+}\r"},{"sha":"be6d6f486bff689663aa59c6098efffd864f6836","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public final class No3NoArgs {\r\n+\r\n+    private String name;\r\n+\r\n+    public No3NoArgs(String n) {\r\n+        name = n;\r\n+    }\r\n+}\r"},{"sha":"55fda0ae2bd2c18f70f1f3ea98162a3b5752f860","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class NoClone implements Cloneable {\r\n+\r\n+    private String string;\r\n+\r\n+    public NoClone(String str) {\r\n+        this.string = str;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return string;\r\n+    }\r\n+\r\n+    public NoClone safeClone() {\r\n+        try {\r\n+            return (NoClone) clone();\r\n+        } catch (CloneNotSupportedException cnfe) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"ca679782cf530f1d6a3b650334ec5fdff6d19f72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class NoNoArgs {\r\n+\r\n+    private String name;\r\n+\r\n+    public NoNoArgs(String n) {\r\n+        name = n;\r\n+    }\r\n+}\r"},{"sha":"3fc4fe2b1f2b0ebdc27cb17796dd28a1d8f363c1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class NonPCClone {\r\n+\r\n+}\r"},{"sha":"a79253aa2a9bbcd6011ff08465e75b71b9aab37e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class PCClone implements Cloneable {\r\n+\r\n+    private String string;\r\n+\r\n+    public PCClone(String str) {\r\n+        this.string = str;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return string;\r\n+    }\r\n+\r\n+    public Object clone() {\r\n+        try {\r\n+            return (PCClone) super.clone();\r\n+        } catch (CloneNotSupportedException cnfe) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"df027d82a0c9c1108e3f4afb980acdc95f70b273","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class SubclassClone extends NonPCClone implements Cloneable {\r\n+\r\n+    private String string;\r\n+\r\n+    public SubclassClone(String str) {\r\n+        this.string = str;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return string;\r\n+    }\r\n+\r\n+    public SubclassClone safeClone() {\r\n+        try {\r\n+            return (SubclassClone) super.clone();\r\n+        } catch (CloneNotSupportedException cnfe) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"0d9a9f7839cc21d5eb79eea0169d805777283da9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.enhance.common.apps;\r\n+\r\n+/**\r\n+ * The various subclass test classes that we use all implement this interface,\r\n+ * to allow reuse in some of the unit tests.\r\n+ */\r\n+public interface SubclassTestInstance {\r\n+\r\n+    public void setStringField(String s);\r\n+\r\n+    public String getStringField();\r\n+}\r"},{"sha":"ad78ee8c0b2b67e84788a3d3c2a96cef77a0dc4f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a33a9e5b24021d670f9a66a6be71da222ea41a20","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a88f124bcbb08bbf722fecf665da85621792fe9e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"47b7129fa63ae971efb50117eaaceef27b447cb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","status":"added","additions":249,"deletions":0,"changes":249,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"58a2a6d2c7b44511cf2e99e48d4eec333d86f2b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","status":"added","additions":256,"deletions":0,"changes":256,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1dbfc19ea1b4dbc208689f95d12e8b161c5e8ae7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b7dcea3cada9f928f4579ff913d4160cf7c9f3f1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","status":"added","additions":222,"deletions":0,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"409069b8b5cfd2880706b898336bef212c642eb4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f652efd8c36f0825bf1c1d545d0328d95a4479f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"030bf8fe0e7aa990d3dd3406822ae34b3c0a3423","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","status":"added","additions":273,"deletions":0,"changes":273,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"67ebe78893ac02afb055e756aaac528861635fc4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f5d6145c567fc01f7790ab829ed98fd821757ed5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","status":"added","additions":278,"deletions":0,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e36647a23673671c63a4c9a1114a1572ed2a7279","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","status":"added","additions":327,"deletions":0,"changes":327,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"92252588dc74b60e842f74c67a2ef9b8be2c25d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","status":"added","additions":335,"deletions":0,"changes":335,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"db3718b071ccf85f715610b199a8daabb4129b2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","status":"added","additions":236,"deletions":0,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c46cf2e8a6e4b6cbf7461c81dcd1b48063ed63fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","status":"added","additions":279,"deletions":0,"changes":279,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"bf27ba1f0d523829c84413e24cd5c52ec97b1bf2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1750c8e826c91a66f004b878a07096b3188a7807","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1ea5cc6bd3ef60b1f942b0bd60c97e5e3b172a66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"25c3d9d8597fa2523655f8b44b3229055f075b7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/header","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/header","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/header","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/header?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"166e0ac50de43b016c11ea3d5c025b07fa23c108","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c34d0a121c625b04e87db670e11e34a9135e4340","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"4b8775159bf8f504e879930a6528433bd4edb0da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"728c63a3d471ec92643ab658a8d5bf44250b3455","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e5215329c2a9bd4b2e2b258823bbd2a1d7d67a52","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"bb02a7f75e85bd1bb0148df749a9627c506bbc17","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"277b022801f553fa25d8cb200983f3ddf4682d68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"6e72588dcb46707186977f80cdc66a1848f9083f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0a0bde8132e95c730442bd53e5df11a66f60276f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"14691c3449c26be7974ea4686ddf54fb0b1ff1f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"628fd3fc5491e7c55a22b0776155c70e76862d00","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3a5d939460a5dd1d0ab293e82ea1a2f525cde8bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"59063a7d016c22e6a47406b6081c49144d818325","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"19387b45ad3468a66a4ce78764d329c11fde64ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"2f24cdc4a3a5b25e5eaf4b10295bee92a8ea5269","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b91fd2fdb201e89a3fd402e38ee25220bfd30135","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"ac90415e541a94f46194c105c539220f22e5b2ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"68e74243867f499acbc66b23af91d85721475929","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0a091207c37b806f57521a053ba24ac5fa4275c1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8041ce71441d98b1ce0b990b554537c88beb6ed1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b799b968f02c46e7b9a3dee4663a4cb74d13e9c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"58f9ef9de3387e3c23426a1db946c9c0c2091a59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"654bb492d6e3649d0037324f302d3d1e31ac38fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"66886e7bbcbe44aa8949fbed92460c937c5e5126","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8e351584080f3c1e6f87e1482d7536729239632d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d38f5048121c9500f02a8ea38caac0fce18f057c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"07a05f516ee958b75fbfe4ee5db8d8b545df188a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"61b17827432babe446e70b75659e928e261efdb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"664d3277c695c97d63d52f953a4a596b2c36596f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0f0a3928691f9bf95f74d50bda7b9ff7bc0861bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7d8a0146e8a2293ffba388154ae8f56bd98885ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f997e157739ebca29f93eb917d24a895650dee7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"60a9975bd835cfe118a70fe5054b157c1c875048","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a3b0a3a994f700465a45ab4a6d6262f6232d1b57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f4928da345ba50722439ed8874230232251ca9c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c5853faa7caf7881ba4714c2e55b07c62ef76e45","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"bf4283c250ab4e7131e72cc6e0810dcffecc8241","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a8a87eab1cd340becc8b8125f2f098f3fac4abe1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b96e6d5ebf7e000a7b94dd6d7c2a5df2e99d57e8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1680ddab65a06b0f462eaccfbd58fb32078283ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"54173ac5dbfbcad7e118cb8c81bfa34f3c0189bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8f1d15798f2ee764bc972f91dc7d927eefbe5db3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9c9ee58e1179f2a7906b7354032d627cfaf22f35","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0cf50298e3bfdce54e7976770a38bb248c2f0d18","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8523a16ba3a9294dda112605daff82204d68d4dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1cc4eb356f1d7c60e0637fa031e86fb6cd944e1d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"33e101046396da7ef7bff6097a995b16e303852c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"91bc91cbf7c4b181af50373d659042a6f351f9ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"bc759922338f0f811f3b5ba3d9e2c0a541458b23","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a391175c5b3287c67ab713fe7c8cfb832983646f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a5a434527640b7e1fb7ac4ee30ecbd1b08b68b0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7fd21849e6138f6088bd732268d78475574fa07a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3add38697049f59e9448c497b352b34fbedb16d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"75688e229a23434e0923796a3e72da5b0a71a291","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"04674f90aeb40c3f1ef6bb546a9bf74dd33633f1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e5cee367860257e6980a0459e0b9e93299ee9632","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f3b0c7c2a7c644728936d7fbf1feb7a2813290e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b90cc452000f11ac17948068ea459680255130bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"128a09006726e47e95ca657686d20fa45dfba46d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8710d69a66fb510126cf96fa8a895b71c20eb848","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"fbb83eee20033ae779da3979cdae7b6319a2cf65","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"141a1f635ab8794b0b14b19c4b93b9057fe53e13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7563854a2374bbe6013925ba8de8bb4f6b8bd486","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"28cb2540553961c5010846f9961bcb5286d93f65","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"4b764e5ade6f21e5d24c6c319a3cf7d53224f40a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7e9a6cca399e38053cf02594156c6367ce0834b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c19cf2cbdf91f751c50c0b5530eb0f9518a6df80","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"25636abca7452c07f725b3e14037079b90e7e87c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"729f0ee2bd528a75452a7065173a6298ca51b689","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"40dbeb4b5f395c26898c5b7c2034ba55119aa893","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"84bdc8e1220120e5266f5c04fa3de1616927cff7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0a4aecdf573b82c4a415f505781c75d29e41c248","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"fb190e6392355b74649b92d5e369730c2135b732","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d12c6c1e97153b1396f32162d9eb7a1b48a8156a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c06bc7f9a904c419bc6361d033c6d991e8fbb8a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"bef9844e1a8c956a7316c805f65101bdd4f0796c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a844d326fe7493b5e3804f6f86810213ac6bfea3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8e02f3628671bf56612aac3b0832f9be338d60ff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"714fd09ea6a1f8d82e21fe1be47fa10c94ea6647","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"bdb3f62231bb290df4d5a6ecad078cca6b6a42a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"12965567cafc12eac3cb5caee7d6a46b2a78e2de","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"166f1d4ed3f2c508e63187b4e9841aa92ab328a9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"243501ec68e431a3e8216f55ee9d14f6348d1c0f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"caa4e42cfe12d3f179a879741efd15bab2de25e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7e2557da3955f30ff83b8f8c16ea6ce18ac97815","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"abbca101bb06fa0bd912b3d8490d34b7ba934331","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","status":"added","additions":404,"deletions":0,"changes":404,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d6a45145d73147e6ba2789c12962575c37e51f99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"fc5f0eedce259953c0afc1a81732eaeb20f53533","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"77bb629d806750e970bff27023f7ffae55dcc11f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"fcb63a4bfed3eaf00a3bc5d34475d5b2c0fe3878","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e4f055337969ecd4fed2c5ee7058bfc12c2475b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"6f062d59757ea507b491736aae39520ce282b6fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"5c37061c760f697ec4a9694767189ddcde3efb39","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"aa10085b1345e1402c89b17d87f2bee6870d21d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c7ae810765b225d90097755847a1562af0f3c1df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a29bcbd422dfbfdb3ffd0d220a589e9f73347758","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c9a69f13cc3b705238f6924d838507001a4d5ac8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"bbcd2e1942809b8aac45d7620b3a340abbbeacbd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"5236115c4cb22b67dcb1a7a9de41fa13d1caac1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"10baacf8669028731ecd4ca61e03ed8a6ac293a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","status":"added","additions":253,"deletions":0,"changes":253,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"339d9fa9a96dde56fcc90338fb70a584535e9b1a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"18b1fd17075b30729c6fed88370f1c72d8296422","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"fb44c154b217eb58b2ede32e7cd2a7d31d77bcd3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c57d14d4bef138e90945896942cbc11e2623bf5d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"cef08fd0b8aa40dc141cd999986d2660bfb3a8c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"288fada5facd590b959257742d300c1f8a82ffd5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b5a2007dc4ee6c937dbe2ee27c07dc0e5f3c80a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f79b98fe173ecbe2dbaaf6e36ca826f1a3b14774","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e95ffa18e277444e853fb7dcbe90d88a444a1b86","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"6b748c78bc04e9c94ece593cd01c8dc392a7e294","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"17d6e670aa8dbafd075298c2b95886a090c8b498","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c6273d7fd9eea83c4356a219fe1950e737ea3e2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"}]}

