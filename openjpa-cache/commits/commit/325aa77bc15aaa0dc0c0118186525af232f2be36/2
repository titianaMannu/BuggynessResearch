{"sha":"325aa77bc15aaa0dc0c0118186525af232f2be36","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyNWFhNzdiYzE1YWFhMGRjMGMwMTE4MTg2NTI1YWYyMzJmMmJlMzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:19:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:19:55Z"},"message":"New test cases, currently disabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627979 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4deeb4f9aeb3d6f72b3c10b78a384fa4a13e3d20","url":"https://api.github.com/repos/apache/openjpa/git/trees/4deeb4f9aeb3d6f72b3c10b78a384fa4a13e3d20"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","html_url":"https://github.com/apache/openjpa/commit/325aa77bc15aaa0dc0c0118186525af232f2be36","comments_url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36/comments","author":null,"committer":null,"parents":[{"sha":"ff42968eed5a7a90fcb4245f6b25bce56659d150","url":"https://api.github.com/repos/apache/openjpa/commits/ff42968eed5a7a90fcb4245f6b25bce56659d150","html_url":"https://github.com/apache/openjpa/commit/ff42968eed5a7a90fcb4245f6b25bce56659d150"}],"stats":{"total":83278,"additions":82831,"deletions":447},"files":[{"sha":"fcd75f2069bbe452c3faee1a3f9ceb925e1c9dcf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class NoClassColumn {\r\n+\r\n+    private String test;\r\n+\r\n+    public String getTest() {\r\n+        return test;\r\n+    }\r\n+\r\n+    public void setTest(String val) {\r\n+        test = val;\r\n+    }\r\n+}\r"},{"sha":"a5955775243345e8a0ede7a08478afb969d95e4b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class NonPKJoinPC {\r\n+\r\n+    private int id1;\r\n+    private int id2;\r\n+    private PartialJoinPC partial;\r\n+    private Set partials = new HashSet();\r\n+    private ConstantJoinPC constant;\r\n+\r\n+    public PartialJoinPC getPartial() {\r\n+        return this.partial;\r\n+    }\r\n+\r\n+    public void setPartial(PartialJoinPC partial) {\r\n+        this.partial = partial;\r\n+    }\r\n+\r\n+    public int getId1() {\r\n+        return this.id1;\r\n+    }\r\n+\r\n+    public void setId1(int id1) {\r\n+        this.id1 = id1;\r\n+    }\r\n+\r\n+    public int getId2() {\r\n+        return this.id2;\r\n+    }\r\n+\r\n+    public void setId2(int id2) {\r\n+        this.id2 = id2;\r\n+    }\r\n+\r\n+    public Set getPartials() {\r\n+        return this.partials;\r\n+    }\r\n+\r\n+    public void setPartials(Set partials) {\r\n+        this.partials = partials;\r\n+    }\r\n+\r\n+    public ConstantJoinPC getConstant() {\r\n+        return this.constant;\r\n+    }\r\n+\r\n+    public void setConstant(ConstantJoinPC constant) {\r\n+        this.constant = constant;\r\n+    }\r\n+}\r"},{"sha":"4ddcd602946e1ae6ead6c15dd66f4b3cf0cc6f71","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class NonPKJoinPC2\r\n+    extends NonPKJoinPC {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"1baf1bc298ce3a3cd83af4f368fdfba881ed5969","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class NonPKJoinPC3\r\n+    extends NonPKJoinPC2 {\r\n+\r\n+    private PartialJoinPC3 partial3;\r\n+    private Set partial2s = new HashSet();\r\n+\r\n+    public PartialJoinPC3 getPartial3() {\r\n+        return this.partial3;\r\n+    }\r\n+\r\n+    public void setPartial3(PartialJoinPC3 partial3) {\r\n+        this.partial3 = partial3;\r\n+    }\r\n+\r\n+    public Set getPartial2s() {\r\n+        return this.partial2s;\r\n+    }\r\n+\r\n+    public void setPartial2s(Set partial2s) {\r\n+        this.partial2s = partial2s;\r\n+    }\r\n+}\r"},{"sha":"bfcd1601fb5161d3169afe10270aead3aee82d93","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+import java.util.*;\r\n+\r\n+\r\n+\r\n+public interface OpOrder {\r\n+\r\n+\r\n+    public long getId();\r\n+\r\n+    public OpOrder getRel();\r\n+\r\n+    public OpOrder getOwner();\r\n+\r\n+    public String getSecondary();\r\n+\r\n+    public String getSub();\r\n+\r\n+    public List getRelList();\r\n+\r\n+    public List getMappedRelList();\r\n+\r\n+    public List getInverseKeyRelList();\r\n+}\r"},{"sha":"cb52e81fecd5c9a6f40c0bc8bf8efece24c1dec5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+import java.util.*;\r\n+\r\n+\r\n+@Entity\r\n+public class OpOrderPC {\r\n+\r\n+\t@Id\r\n+    private long id;\r\n+    private OpOrderPC rel;\r\n+    private OpOrderPC owner;\r\n+    private String secondary;\r\n+    private List relList = new ArrayList();\r\n+    private List mappedRelList = new ArrayList();\r\n+    private List inverseKeyRelList = new ArrayList();\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public OpOrder getRel() {\r\n+        return (OpOrder) rel;\r\n+    }\r\n+\r\n+    public void setRel(OpOrderPC rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public OpOrder getOwner() {\r\n+        return (OpOrder) owner;\r\n+    }\r\n+\r\n+    public void setOwner(OpOrderPC owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public String getSecondary() {\r\n+        return secondary;\r\n+    }\r\n+\r\n+    public void setSecondary(String secondary) {\r\n+        this.secondary = secondary;\r\n+    }\r\n+\r\n+    public List getRelList() {\r\n+        return relList;\r\n+    }\r\n+\r\n+    public List getMappedRelList() {\r\n+        return mappedRelList;\r\n+    }\r\n+\r\n+    public List getInverseKeyRelList() {\r\n+        return inverseKeyRelList;\r\n+    }\r\n+}\r"},{"sha":"e883d0409e34dd46a5db3a4d07da67fe9a3ea2d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+import java.util.*;\r\n+\r\n+@Entity\r\n+public class OpOrderPCSub\r\n+    extends OpOrderPC\r\n+    implements OpOrder {\r\n+\r\n+\t@Id\r\n+    private String sub;\r\n+\r\n+    public String getSub() {\r\n+        return sub;\r\n+    }\r\n+\r\n+    public void setSub(String sub) {\r\n+        this.sub = sub;\r\n+    }\r\n+}\r"},{"sha":"0d5820bbd2922ac92b0601a79d8a684fb21a29ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\r\n+ *\r\n+\r\n+ */\r\n+@Entity\r\n+public class PagingAppIdPC {\r\n+\r\n+    private int intField;\r\n+    private long longField;\r\n+    private PagingHelperPC rel;\r\n+    private List rels = new ArrayList();\r\n+\r\n+\tpublic PagingAppIdPC() { }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getLongField() {\r\n+        return this.longField;\r\n+    }\r\n+\r\n+    public void setLongField(long longField) {\r\n+        this.longField = longField;\r\n+    }\r\n+\r\n+    public PagingHelperPC getRel() {\r\n+        return this.rel;\r\n+    }\r\n+\r\n+    public void setRel(PagingHelperPC rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public List getRels() {\r\n+        return this.rels;\r\n+    }\r\n+\r\n+    public void setRels(List rels) {\r\n+        this.rels = rels;\r\n+    }\r\n+}\r"},{"sha":"d3f1e97f9bb64876832368d79d2081499375cfbd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\r\n+ *\r\n+\r\n+ */\r\n+@Entity\r\n+public class PagingHelperPC {\r\n+\t\r\n+\tpublic PagingHelperPC() {}\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"8da5a4c1fc5f8f6d77acb9d3f65607e2142cb205","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing paging + eager fetching.</p>\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class PagingPC {\r\n+\t\r\n+    private int intField;\r\n+    private PagingHelperPC rel;\r\n+    private List rels = new ArrayList();\r\n+\r\n+\tpublic PagingPC() { }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public PagingHelperPC getRel() {\r\n+        return this.rel;\r\n+    }\r\n+\r\n+    public void setRel(PagingHelperPC rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public List getRels() {\r\n+        return this.rels;\r\n+    }\r\n+\r\n+    public void setRels(List rels) {\r\n+        this.rels = rels;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"PagingPC: \" + intField;\r\n+    }\r\n+}\r"},{"sha":"ca0e27e821b06867cb806a2b98a21137d4bfdfc9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class PartialJoinPC {\r\n+\r\n+    private int pk1;\r\n+    private int pk2;\r\n+    private NonPKJoinPC nonPK;\r\n+    private Set nonPKs = new HashSet();\r\n+\r\n+    public int getPk1() {\r\n+        return this.pk1;\r\n+    }\r\n+\r\n+    public void setPk1(int pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public int getPk2() {\r\n+        return this.pk2;\r\n+    }\r\n+\r\n+    public void setPk2(int pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public NonPKJoinPC getNonPK() {\r\n+        return this.nonPK;\r\n+    }\r\n+\r\n+    public void setNonPK(NonPKJoinPC nonPK) {\r\n+        this.nonPK = nonPK;\r\n+    }\r\n+\r\n+    public Set getNonPKs() {\r\n+        return this.nonPKs;\r\n+    }\r\n+\r\n+    public void setNonPKs(Set nonPKs) {\r\n+        this.nonPKs = nonPKs;\r\n+    }\r\n+}\r"},{"sha":"711563250f21b7644390a8f693c4f270622aa376","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class PartialJoinPC2\r\n+    extends PartialJoinPC {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"d3a359007b37e93eba8d17e82c2742506bcfa3ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class PartialJoinPC3\r\n+    extends PartialJoinPC2 {\r\n+\r\n+    private NonPKJoinPC3 nonPK3;\r\n+    private Set nonPK2s = new HashSet();\r\n+\r\n+    public NonPKJoinPC3 getNonPK3() {\r\n+        return this.nonPK3;\r\n+    }\r\n+\r\n+    public void setNonPK3(NonPKJoinPC3 nonPK3) {\r\n+        this.nonPK3 = nonPK3;\r\n+    }\r\n+\r\n+    public Set getNonPK2s() {\r\n+        return this.nonPK2s;\r\n+    }\r\n+\r\n+    public void setNonPK2s(Set nonPK2s) {\r\n+        this.nonPK2s = nonPK2s;\r\n+    }\r\n+}\r"},{"sha":"aa825bbfbf21638f847320cd4fcb061f36cea297","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class PerClassTestObject {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+}\r"},{"sha":"eabdb3e6cd1063251b93b1cdc321cc1ad4968151","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\t\r\n+\r\n+/**\r\n+ * <p>Application identity type with a custom sequence factory used in\r\n+ * testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class PerClassTestObject2 {\r\n+\r\n+    private String name;\r\n+    private String age;\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getAge() {\r\n+        return this.age;\r\n+    }\r\n+\r\n+    public void setAge(String age) {\r\n+        this.age = age;\r\n+    }\r\n+}\r"},{"sha":"7d3227b19f51c117c3143155ea35776f8130e1da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * <p>Application identity type with a per-class sequence factory used in\r\n+ * testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class PerClassTestObject3 {\r\n+\r\n+    private long id;\r\n+    private int data;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public int getData() {\r\n+        return data;\r\n+    }\r\n+\r\n+    public void setData(int data) {\r\n+        this.data = data;\r\n+    }\r\n+}\r"},{"sha":"c675dde5307e4939993187d8bf3e680beded4b19","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class PlaceholderTypesA {\r\n+\r\n+    private int intA;\r\n+\r\n+    public int getIntA() {\r\n+        return intA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+}\r"},{"sha":"0a30996ecb31c72a703509c205d7a81f3ebf31cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,96 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class PlaceholderTypesB\r\n+    extends PlaceholderTypesA {\r\n+\r\n+    private boolean booleanB;\r\n+    private byte byteB;\r\n+    private char charB;\r\n+    private float floatB;\r\n+    private int intB;\r\n+    private String stringB;\r\n+    private String clobB;\r\n+    private Object blobB;\r\n+\r\n+    public boolean getBooleanB() {\r\n+        return booleanB;\r\n+    }\r\n+\r\n+    public void setBooleanB(boolean booleanB) {\r\n+        this.booleanB = booleanB;\r\n+    }\r\n+\r\n+    public byte getByteB() {\r\n+        return byteB;\r\n+    }\r\n+\r\n+    public void setByteB(byte byteB) {\r\n+        this.byteB = byteB;\r\n+    }\r\n+\r\n+    public char getCharB() {\r\n+        return charB;\r\n+    }\r\n+\r\n+    public void setCharB(char charB) {\r\n+        this.charB = charB;\r\n+    }\r\n+\r\n+    public float getFloatB() {\r\n+        return floatB;\r\n+    }\r\n+\r\n+    public void setFloatB(float floatB) {\r\n+        this.floatB = floatB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return intB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return stringB;\r\n+    }\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getClobB() {\r\n+        return clobB;\r\n+    }\r\n+\r\n+    public void setClobB(String clobB) {\r\n+        this.clobB = clobB;\r\n+    }\r\n+\r\n+    public Object getBlobB() {\r\n+        return blobB;\r\n+    }\r\n+\r\n+    public void setBlobB(Object blobB) {\r\n+        this.blobB = blobB;\r\n+    }\r\n+}\r"},{"sha":"e17815e58ee42fae2978024b9af8f26ae012c376","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Kodo 3.x callback.</p>\r\n+ *\r\n+ * @deprecated\r\n+ */\r\n+public interface PostAttachCallback {\r\n+\r\n+    /**\r\n+     * Invoked on the managed persistent instance after it has\r\n+     * been the subject of an attach process.\r\n+     *\r\n+     * @param detached the detached instance that corresponds to\r\n+     * this managed instance\r\n+     */\r\n+    public void jdoPostAttach(Object detached);\r\n+}\r"},{"sha":"6423162175c6c9c87607e7aac923279445cfc3fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Kodo 3.x callback.</p>\r\n+ *\r\n+ * @deprecated\r\n+ */\r\n+public interface PostDetachCallback {\r\n+\r\n+    /**\r\n+     * Invoked on the detached copy of the persistent instance\r\n+     * after it has been detached. This method will only be called once\r\n+     * the entire graph of objects for a single detach operation has\r\n+     * been completed.\r\n+     *\r\n+     * @param managed the managed instance that was the\r\n+     * source of the detached instance\r\n+     */\r\n+    public void jdoPostDetach(Object managed);\r\n+}\r"},{"sha":"034a595a7123b0f462acb05f80ecea8fb28a76e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Kodo 3.x callback.</p>\r\n+ *\r\n+ * @deprecated\r\n+ */\r\n+public interface PreAttachCallback {\r\n+\r\n+    /**\r\n+     * Invoked on the detached instance immediately before it is\r\n+     * to be attached.\r\n+     */\r\n+    public void jdoPreAttach();\r\n+}\r"},{"sha":"6d3c52df1b3014d98e3d44bbe88fd69de4a7b4da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+\r\n+/**\r\n+ * <p>Kodo 3.x callback.</p>\r\n+ *\r\n+ * @deprecated\r\n+ */\r\n+public interface PreDetachCallback {\r\n+\r\n+    /**\r\n+     * Invoked on the persistent instance before it is detached.\r\n+     */\r\n+    public void jdoPreDetach();\r\n+}\r"},{"sha":"407a8e12d4163f13ce70764f3ba014ca87022fc3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class QueryTest1 {\r\n+\r\n+    public static final long FIVE = 5L;\r\n+\r\n+    private long num = 0L;\r\n+    private String string = null;\r\n+    private String clobField = null;\r\n+    private boolean bool = false;\r\n+    private float decimal = 0F;\r\n+    private char character = ' ';\r\n+    private Date date = null;\r\n+    private Collection manyToMany = null;\r\n+\r\n+    public long getNum() {\r\n+        return num;\r\n+    }\r\n+\r\n+    public void setNum(long val) {\r\n+        num = val;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return string;\r\n+    }\r\n+\r\n+    public void setString(String val) {\r\n+        string = val;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return clobField;\r\n+    }\r\n+\r\n+    public void setClob(String val) {\r\n+        clobField = val;\r\n+    }\r\n+\r\n+    public boolean getBool() {\r\n+        return bool;\r\n+    }\r\n+\r\n+    public void setBool(boolean val) {\r\n+        bool = val;\r\n+    }\r\n+\r\n+    public float getDecimal() {\r\n+        return decimal;\r\n+    }\r\n+\r\n+    public void setDecimal(float val) {\r\n+        decimal = val;\r\n+    }\r\n+\r\n+    public char getCharacter() {\r\n+        return character;\r\n+    }\r\n+\r\n+    public void setCharacter(char val) {\r\n+        character = val;\r\n+    }\r\n+\r\n+    public void setDate(Date val) {\r\n+        date = val;\r\n+    }\r\n+\r\n+    public Date getDate() {\r\n+        return date;\r\n+    }\r\n+\r\n+    public Collection getManyToMany() {\r\n+        return manyToMany;\r\n+    }\r\n+\r\n+    public void setManyToMany(Collection val) {\r\n+        manyToMany = val;\r\n+    }\r\n+}\r"},{"sha":"c4dfa239233f81d7a6a9d09a53edc9dc5f33c0e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+\r\n+public class RawField {\r\n+\r\n+    private String str;\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public static class RawMapping\r\n+        extends ImmutableValueHandler {\r\n+\r\n+        public Object toDataStoreValue(ValueMapping vm, Object val,\r\n+            JDBCStore store) {\r\n+            return new Raw(\"'\" + val + \"FOO'\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"9818bbc95460fcd975ac92ba2381f48e427d20c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * Used in testing; should be enhanced.\r\n+ */\r\n+@Entity\r\n+public class RawSQL {\r\n+    \r\n+    @Id\r\n+    private String stringField = null;\r\n+    private int intField = 0;\r\n+\r\n+    protected RawSQL() {\r\n+    }\r\n+\r\n+    public RawSQL(String s, int i) {\r\n+        stringField = s;\r\n+        intField = i;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"stringField: \" + stringField + \"; intField: \" + intField;\r\n+    }\r\n+}\r"},{"sha":"32e4037bb9d0d8fd97ed8ed4763cf8827c60e8da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Embedded type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+public class RecursivelyEmbeddedPC {\r\n+\r\n+    private EmbeddedPC embedded;\r\n+\r\n+    public EmbeddedPC getEmbedded() {\r\n+        return this.embedded;\r\n+    }\r\n+\r\n+    public void setEmbedded(EmbeddedPC embedded) {\r\n+        this.embedded = embedded;\r\n+    }\r\n+}\r"},{"sha":"11b8d5b95bfaa6ec7f0f2a34c06fadfbc60fc2a2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.util.*;\r\n+\r\n+public class Relations {\r\n+\r\n+    private Base base;\r\n+    private Base nullBase;\r\n+    private BaseSub1 baseSub1;\r\n+    private BaseSub1Sub2 baseSub1Sub2;\r\n+    private List baseList = new ArrayList();\r\n+    private List emptyBaseList = new ArrayList();\r\n+    private List baseSub1List = new ArrayList();\r\n+    private List baseSub1Sub2List = new ArrayList();\r\n+\r\n+    public Base getBase() {\r\n+        return this.base;\r\n+    }\r\n+\r\n+    public void setBase(Base base) {\r\n+        this.base = base;\r\n+    }\r\n+\r\n+    public BaseSub1 getBaseSub1() {\r\n+        return this.baseSub1;\r\n+    }\r\n+\r\n+    public void setBaseSub1(BaseSub1 baseSub1) {\r\n+        this.baseSub1 = baseSub1;\r\n+    }\r\n+\r\n+    public BaseSub1Sub2 getBaseSub1Sub2() {\r\n+        return this.baseSub1Sub2;\r\n+    }\r\n+\r\n+    public void setBaseSub1Sub2(BaseSub1Sub2 baseSub1Sub2) {\r\n+        this.baseSub1Sub2 = baseSub1Sub2;\r\n+    }\r\n+\r\n+    public List getBaseList() {\r\n+        return this.baseList;\r\n+    }\r\n+\r\n+    public void setBaseList(List baseList) {\r\n+        this.baseList = baseList;\r\n+    }\r\n+\r\n+    public List getBaseSub1List() {\r\n+        return this.baseSub1List;\r\n+    }\r\n+\r\n+    public void setBaseSub1List(List baseSub1List) {\r\n+        this.baseSub1List = baseSub1List;\r\n+    }\r\n+\r\n+    public List getBaseSub1Sub2List() {\r\n+        return this.baseSub1Sub2List;\r\n+    }\r\n+\r\n+    public void setBaseSub1Sub2List(List baseSub1Sub2List) {\r\n+        this.baseSub1Sub2List = baseSub1Sub2List;\r\n+    }\r\n+\r\n+    public Base getNullBase() {\r\n+        return this.nullBase;\r\n+    }\r\n+\r\n+    public void setNullBase(Base nullBase) {\r\n+        this.nullBase = nullBase;\r\n+    }\r\n+\r\n+    public List getEmptyBaseList() {\r\n+        return this.emptyBaseList;\r\n+    }\r\n+\r\n+    public void setEmptyBaseList(List emptyBaseList) {\r\n+        this.emptyBaseList = emptyBaseList;\r\n+    }\r\n+}\r"},{"sha":"706f6276cdf1abbbdcf39811c5e10d9241eb3ce7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import java.io.*;\r\n+import java.math.*;\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+\r\n+/**\r\n+ *\t<p>Persitent type used in testing.</p>\r\n+ *\r\n+ *\t@author\t\tAbe White\r\n+ */\r\n+@Entity\r\n+        @Table(name=\"rtest1\")\r\n+        @Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+        public class RuntimeTest1 implements Serializable {\r\n+    \r\n+    private static final long serialVersionUID = 1L;\r\n+    \r\n+    @Transient\r\n+            public static final String someStaticField = \"someField\";\r\n+    \r\n+    private Locale\t\tlocaleField;\r\n+    \r\n+    @Id\r\n+            private int\t\t\tintField;\r\n+    \r\n+    @Column(length=35)\r\n+    private String\t\tstringField;\r\n+    \r\n+    // transactional only\r\n+    @Column(length=35)\r\n+    public String\t\ttransString;\r\n+    \r\n+    // relations\r\n+    //@Transient\r\n+    @OneToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n+    private RuntimeTest1\tselfOneOne;\r\n+    \r\n+    @Transient\r\n+            private Set\t\tselfOneMany = new HashSet();\r\n+    \r\n+    \r\n+    public RuntimeTest1() {\r\n+    }\r\n+    \r\n+    public RuntimeTest1(int key) {\r\n+        this.intField = key;\r\n+    }\r\n+    \r\n+    public RuntimeTest1(String str, int i) {\r\n+        stringField = str;\r\n+        intField = i;\r\n+    }\r\n+    \r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+    \r\n+    \r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+    \r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+    \r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+    \r\n+    public RuntimeTest1 getSelfOneOne() {\r\n+        return this.selfOneOne;\r\n+    }\r\n+    \r\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n+        this.selfOneOne = selfOneOne;\r\n+    }\r\n+    \r\n+    public Set getSelfOneMany() {\r\n+        return this.selfOneMany;\r\n+    }\r\n+    \r\n+    public void setSelfOneMany(Set selfOneMany) {\r\n+        this.selfOneMany = selfOneMany;\r\n+    }\r\n+    \r\n+    public String toString() {\r\n+        return \"IntField: \"+intField+\", StringField: \"+stringField+\" .\";\r\n+    }\r\n+    \r\n+    public Locale getLocaleField() {\r\n+        return localeField;\r\n+    }\r\n+    \r\n+    public void setLocaleField(Locale localeField) {\r\n+        this.localeField = localeField;\r\n+    }\r\n+}\r"},{"sha":"de47fac6a0e5aa32001f75bca6b63e4b10b45f55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class RuntimeTest2\r\n+    extends RuntimeTest1 {\r\n+\r\n+    private int intField2;\r\n+\r\n+    public RuntimeTest2() {\r\n+    }\r\n+\r\n+    public RuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+}\r"},{"sha":"45cd0e136e81f697898db7df5a5d474bf80dbd7d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+import java.util.*;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+public class RuntimeTest3\r\n+    extends RuntimeTest2 {\r\n+\r\n+    private int intField3;\r\n+\r\n+    public RuntimeTest3() {\r\n+    }\r\n+\r\n+    public RuntimeTest3(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField3() {\r\n+        return this.intField3;\r\n+    }\r\n+\r\n+    public void setIntField3(int intField3) {\r\n+        this.intField3 = intField3;\r\n+    }\r\n+}\r"},{"sha":"78d0a98539f51e1c64f980307e383e75411c8407","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqA {\r\n+\r\n+}\r"},{"sha":"66507ad4c398029dc58e6e683f4d315dbbc5efb1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqB extends SeqA {\r\n+\r\n+}\r"},{"sha":"aed3028b8c6be7e2ea273ee2c372937f11f73cf0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqC extends SeqA {\r\n+\r\n+}\r"},{"sha":"685736f0b3515bb1ab78dece84a3b59a8a097ba2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqD {\r\n+\r\n+}\r"},{"sha":"10b686e6361f0c11e4afae510119c3cdd7266067","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public abstract class SeqE {\r\n+\r\n+}\r"},{"sha":"302edb0ae9799a35dabf5fb769f7cb4965ef6410","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqF extends SeqE {\r\n+\r\n+}\r"},{"sha":"69b5625a27ece55368edacc9bffaf2ec5b617c35","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,23 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class SeqG extends SeqE {\r\n+\r\n+}\r"},{"sha":"ebe7e4789a8e10cbd5e26f51262d41e7bd138347","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class StateImagePC {\r\n+\r\n+    private int intField;\r\n+    private StateImagePC stateImage;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public StateImagePC getStateImage() {\r\n+        return this.stateImage;\r\n+    }\r\n+\r\n+    public void setStateImage(StateImagePC stateImage) {\r\n+        this.stateImage = stateImage;\r\n+    }\r\n+}\r"},{"sha":"b008fe45fc7bc84d7db587bf715ece2ee617ed9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class StateImagePC2\r\n+    extends StateImagePC {\r\n+\r\n+    private String stringField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"57fe2be8a8e5365afa62f82633860d2e7ed497c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class StateImagePC3 {\r\n+\r\n+    private int lockField;\r\n+    private int nolockField;\r\n+\r\n+    public int getLockField() {\r\n+        return lockField;\r\n+    }\r\n+\r\n+    public void setLockField(int i) {\r\n+        lockField = i;\r\n+    }\r\n+\r\n+    public int getNoLockField() {\r\n+        return nolockField;\r\n+    }\r\n+\r\n+    public void setNoLockField(int i) {\r\n+        nolockField = i;\r\n+    }\r\n+}\r"},{"sha":"5cab5f588d6968076a656ec4440323e237c7227b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+/**\r\n+ * <p>Transactional type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class TransactionalClassPC {\r\n+\t@Id\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"a1debdca7774ef12c2bcca89cc93e8b88ea7fac5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+public class UnknownSubclassParent {\r\n+\r\n+    private String parentString;\r\n+\r\n+    public void setParentString(String parentString) {\r\n+        this.parentString = parentString;\r\n+    }\r\n+\r\n+    public String getParentString() {\r\n+        return this.parentString;\r\n+    }\r\n+}\r\n+\r\n+\r"},{"sha":"1c1ad6575e9ca012017321700f032145ab5971e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+/** Denotes a composite identity combining a String and Integer field.\r\n+ * \r\n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n+ *\r\n+ */\r\n+public class CompositeId implements Serializable {\r\n+\tpublic Integer id;\r\n+\tpublic String  name;\r\n+\t\r\n+\tpublic CompositeId () \r\n+\t{\r\n+\t}\r\n+\r\n+\tpublic CompositeId (String idString)\r\n+\t{\r\n+\t\tint index = idString.indexOf(':');\r\n+\t\tid = Integer.parseInt(idString.substring(0,index));\r\n+\t\tname = idString.substring(index+1);\r\n+\t}\r\n+\r\n+\tpublic CompositeId (Integer id, String name)\r\n+\t{\r\n+\t\tthis.id   = id;\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic Integer getId()\r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(Integer id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\tpublic String getName()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic String toString() \r\n+\t{\r\n+\t\treturn id + \":\" + name;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic boolean equals (Object other)\r\n+\t{\r\n+\t\tif (other instanceof CompositeId==false)\r\n+\t\t\treturn false;\r\n+\t\t\r\n+\t\tCompositeId that = (CompositeId) other;\r\n+\t\treturn id.equals(that.id) && name.equals(that.name);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic int hashCode () \r\n+\t{\r\n+\t\treturn id.hashCode()+name.hashCode();\r\n+\t}\r\n+}\r"},{"sha":"adc2b7a34a990918fb237150bdf2c50b22e5a786","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+\r\n+@Entity\r\n+@Table(name=\"entity_1\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\r\n+public class Entity1 implements Serializable\r\n+{\r\n+\tprivate static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\r\n+\tprotected Entity2 entity2Field;\r\n+\r\n+\t@Version\r\n+\tprotected int versionField;\r\n+\r\n+\tpublic Entity1()\r\n+\t{}\r\n+\r\n+\tpublic Entity1 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setEntity2Field (Entity2 val)\r\n+\t{\r\n+\t\tentity2Field = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Entity2 getEntity2Field ()\r\n+\t{\r\n+\t\treturn entity2Field;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"0adc7bcbc9139c96d344f51049dc40e0193c5f28","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+/**FIX-ME \r\n+ * \r\n+ * It should complain if i uncomment the above strategies...but it does\r\n+ */\r\n+@Entity\r\n+public class Entity2 implements Serializable\r\n+{\r\n+\t/**\r\n+\t *\r\n+\t */\r\n+\tprivate static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+\t@Id\r\n+\tprotected long pk;\r\n+\r\n+\t@Basic\r\n+\t@Column(length=35)\r\n+\tprotected String stringField;\r\n+\r\n+\t@Basic\r\n+\tprotected int intField;\r\n+\r\n+\tpublic Entity2()\r\n+\t{}\r\n+\r\n+\r\n+\tpublic Entity2 (long pk, String stringField, int intField)\r\n+\t{\r\n+\t\tthis.pk = pk;\r\n+\t\tthis.stringField = stringField;\r\n+\t\tthis.intField = intField;\r\n+\t}\r\n+\r\n+\r\n+\tpublic long getPk ()\r\n+\t{\r\n+\t\treturn pk;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setStringField (String val)\r\n+\t{\r\n+\t\tstringField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getStringField ()\r\n+\t{\r\n+\t\treturn stringField;\r\n+\t}\r\n+\r\n+\tpublic void setIntField (int val)\r\n+\t{\r\n+\t\tintField = val;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getIntField ()\r\n+\t{\r\n+\t\treturn intField;\r\n+\t}\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n+\t}\r\n+}\r"},{"sha":"05ea6b07804cb58b4a285f352536485c878f8c80","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@IdClass(CompositeId.class)\r\n+@Table(name=\"COMPOSITE_ID\")\r\n+public class EntityWithCompositeId {\r\n+\tprivate Integer id;   // this must match the field in CompositeId\r\n+\tprivate String  name; // this must match the field in CompositeId\r\n+\tprivate String  value;\r\n+\t\r\n+\tpublic EntityWithCompositeId() {\r\n+\t\tsuper();\r\n+\t}\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic Integer getId () \r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\t@Id\r\n+\t@Column(name=\"NAME\")\r\n+\tpublic String getName () {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@Column(name=\"VALUE\")\r\n+\tpublic String getValue () \r\n+\t{\r\n+\t\treturn value;\r\n+\t}\r\n+\t\r\n+\tpublic void setId (Integer id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\t\r\n+\tpublic void setName (String name) \r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic void setValue (String value)\r\n+\t{\r\n+\t\tthis.value = value;\r\n+\t}\r\n+}\r"},{"sha":"9c778096d8f35c8df82641ce301a3fdca1b4f485","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@SqlResultSetMappings(value={\r\n+@SqlResultSetMapping(name=\"SQLSelectsBothEndOfTheRelation\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n+\t\t\t\t}\r\n+\t\t\t),\r\n+\t\t\t@EntityResult(entityClass=EntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t\t@FieldResult(name=\"id\",  column=\"C_ID\"),\r\n+\t\t\t\t\t@FieldResult(name=\"name\", column=\"C_NAME\"),\r\n+\t\t\t\t\t@FieldResult(name=\"value\", column=\"C_VALUE\")\r\n+\t\t\t\t}\r\n+\t\t\t)\r\n+\t\t}\r\n+),\r\n+@SqlResultSetMapping(name=\"SQLSelectsOnlyOneEndOfTheRelation\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n+\t\t\t\t}\r\n+\t\t\t)\r\n+\t\t}\r\n+),\r\n+@SqlResultSetMapping(name=\"SQLSelectsUnrelatedInstances\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=OwnerOfEntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"name\",          column=\"OWNER_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.id\",   column=\"REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.name\", column=\"REL_NAME\")\r\n+\t\t\t\t}\r\n+\t\t\t),\r\n+\t\t\t@EntityResult(entityClass=EntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t\t@FieldResult(name=\"id\",    column=\"C_ID\"),\r\n+\t\t\t\t\t@FieldResult(name=\"name\",  column=\"C_NAME\"),\r\n+\t\t\t\t\t@FieldResult(name=\"value\", column=\"C_VALUE\")\r\n+\t\t\t\t}\r\n+\t\t\t)\r\n+\t\t}\r\n+)\r\n+\r\n+})\r\n+\r\n+@Entity\r\n+@Table(name=\"OWNER_OF_COMPOSITE_ID\")\r\n+public class OwnerOfEntityWithCompositeId {\r\n+\t\r\n+\tprivate String                 name;\r\n+\tprivate EntityWithCompositeId  relation;\r\n+\t\r\n+\tpublic OwnerOfEntityWithCompositeId() {\r\n+\t\tsuper();\r\n+\t}\r\n+\t\r\n+\tpublic OwnerOfEntityWithCompositeId (String name)\r\n+\t{\r\n+\t\tsetName (name);\r\n+\t}\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"NAME\")\r\n+\tpublic String getName () \r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\t@JoinColumns({\r\n+\t\t@JoinColumn(name=\"RELATION_ID\",referencedColumnName=\"ID\"),\r\n+\t\t@JoinColumn(name=\"RELATION_NAME\", referencedColumnName=\"NAME\")\r\n+\t})\r\n+\t\r\n+\tpublic EntityWithCompositeId getRelation()\r\n+\t{\r\n+\t\treturn relation;\r\n+\t}\r\n+\t\r\n+\t\r\n+\tpublic void setName (String name)\r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic void setRelation (EntityWithCompositeId relation)\r\n+\t{\r\n+\t\tthis.relation = relation;\r\n+\t}\r\n+}\r"},{"sha":"1a5ef39514caecf21ea601b11196fc87da09c0f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@SqlResultSetMappings(value={\r\n+\t@SqlResultSetMapping(name=\"SQLSelectsChainedRelation\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=RecursiveEntityWithCompositeId.class,\r\n+\t\t\t\tfields={\r\n+\t\t\t\t\r\n+\t\t\t\t@FieldResult(name=\"id\",                   column=\"T0_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"name\",                 column=\"T0_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.id\",          column=\"T0_REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.name\",        column=\"T0_REL_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.relation.id\", column=\"T1_REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.relation.name\", column=\"T1_REL_NAME\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.relation.relation.id\", column=\"T2_REL_ID\"),\r\n+\t\t\t\t@FieldResult(name=\"relation.relation.relation.name\", column=\"T2_REL_NAME\")\r\n+\t\t\t\t\r\n+\t\t\t\t}\r\n+\t\t\t)\r\n+\t\t}\r\n+\t)\r\n+  }\r\n+)\r\n+ \r\n+@Entity\r\n+@IdClass(CompositeId.class)\r\n+@Table(name=\"RECURSIVE_ENTITY\")\r\n+\r\n+public class RecursiveEntityWithCompositeId {\r\n+\tprivate Integer id;   // this must match the field in CompositeId\r\n+\tprivate String  name; // this must match the field in CompositeId\r\n+\tprivate int     value;// a non-primary key field \r\n+\tprivate RecursiveEntityWithCompositeId  relation; // self-related\r\n+\t\r\n+\tpublic RecursiveEntityWithCompositeId() {\r\n+\t\tsuper();\r\n+\t}\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic Integer getId () \r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\t@Id\r\n+\t@Column(name=\"NAME\")\r\n+\tpublic String getName () {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\t@Column(name=\"VALUE\")\r\n+\tpublic int getValue(){\r\n+\t   return value;\t\r\n+\t}\r\n+\t\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\t@JoinColumns({\r\n+\t\t@JoinColumn(name=\"RELATION_ID\",   referencedColumnName=\"ID\"),\r\n+\t\t@JoinColumn(name=\"RELATION_NAME\", referencedColumnName=\"NAME\")\r\n+\t})\r\n+\tpublic RecursiveEntityWithCompositeId getRelation() \r\n+\t{\r\n+\t\treturn relation;\r\n+\t}\r\n+\t\r\n+\tpublic void setId (Integer id) {\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\t\r\n+\tpublic void setName (String name) \r\n+\t{\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\tpublic void setValue (int value) \r\n+\t{\r\n+\t\tthis.value = value;\r\n+\t}\r\n+\t\r\n+\tpublic void setRelation (RecursiveEntityWithCompositeId relation)\r\n+\t{\r\n+\t\tthis.relation = relation;\r\n+\t}\r\n+}\r"},{"sha":"d8b08856a49e6da8490249d1be41c09848c9438f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,177 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/** This domain class uses a all possible nature of annotations. Nature of\r\n+ * annotation from the point of view of nature of result they produce are\r\n+ * the following\r\n+ * <pre>\r\n+ * #entity-result      #column-result       nature\r\n+ * 0                     1+                 SCALAR_ONLY\r\n+ * 1                     0                  SINGLE_CLASS\r\n+ * 1                     1+                 SINGLE_CLASS_AND_SCALAR\r\n+ * 1+                    0                  MULTI_CLASS\r\n+ * 1+                    1+                 MULTI_CLASS_AND_SCALAR\r\n+ * </pre> \r\n+ * \r\n+ */\r\n+@SqlResultSetMappings(value={\r\n+\t\t/** Specifies only scalars and no entity.\r\n+\t\t * \r\n+\t\t */\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"SCALAR_ONLY\",\r\n+\t\t\t\t    columns={\r\n+\t\t\t\t\t\t@ColumnResult(name=\"NAME\")\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\t\t/** Specifies one entity and no scalar.\r\n+\t\t * \r\n+\t\t */\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"SINGLE_CLASS\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class)\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\t\t\t\t\r\n+\t\t\t\t/** Specifies one entity and one or more scalar.\r\n+\t\t\t\t * \r\n+\t\t\t\t */\t\t\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"SINGLE_CLASS_AND_SCALAR\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class)\r\n+\t\t\t\t\t},\r\n+\t\t\t\t\tcolumns={\r\n+\t\t\t\t\t\t@ColumnResult(name=\"name\")\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\t\t\t\t\r\n+\t\t\t\t/** Specifies more than one entity and no scalar.\r\n+\t\t\t\t * \r\n+\t\t\t\t */\t\t\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"MULTI_CLASS\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class),\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class)\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\t\t\t\t\r\n+\t\t\t\t/** Specifies more than one entity and one or more scalar.\r\n+\t\t\t\t * \r\n+\t\t\t\t */\t\t\t\t\r\n+\t\t\t\t@SqlResultSetMapping(name=\"MULTI_CLASS_AND_SCALAR\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class),\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class)\r\n+\t\t\t\t\t},\r\n+\t\t\t\t\tcolumns={\r\n+\t\t\t\t\t\t@ColumnResult(name=\"name\"),\r\n+\t\t\t\t\t\t@ColumnResult(name=\"state\")\r\n+\t\t\t\t\t}\r\n+\t\t\t\t),\r\n+\r\n+\t\t\t\t@SqlResultSetMapping(name=\"MappingWithTraversal\",\r\n+\t\t\t\t\tentities={\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapAddress.class,\r\n+\t\t\t\t\t    fields={\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"id\",    column=\"ADDR_ID\"),\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"street\",column=\"ADDR_STREET\"),\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"state\", column=\"ADDR_STATE\"),\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"zip\",   column=\"ADDR_ZIP\")\r\n+\t\t\t\t\t\t}),\r\n+\t\t\t\t\t\t@EntityResult(entityClass=SQLMapPerson.class,\r\n+\t\t\t\t\t\t fields={\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"name\",    column=\"MY_NAME\"),\r\n+\t\t\t\t\t\t\t@FieldResult(name=\"address\", column=\"MY_ADDRESS\")\r\n+\t\t\t\t\t\t }\r\n+\t\t\t\t\t\t)\r\n+\t\t\t\t\t}\r\n+\t\t\t\t)\r\n+\t\t\t\t\r\n+\t\t\t\t\r\n+\t\t\t}\r\n+\t\t) \r\n+\r\n+\r\n+@Entity\r\n+@Table(name = \"SQLMAP_ADDRESS\")\r\n+public class SQLMapAddress implements Serializable {\r\n+\tprivate int    id;\r\n+\tprivate String street;\r\n+\tprivate String state;\r\n+\tprivate int    zip;\r\n+\r\n+\tprotected SQLMapAddress() {\r\n+\r\n+\t}\r\n+\r\n+\tpublic SQLMapAddress(int id, String street, String state, int zip) {\r\n+\t\tthis.id = id;\r\n+\t\tsetStreet(street);\r\n+\t\tsetState(state);\r\n+\t\tsetZip(zip);\r\n+\t}\r\n+\r\n+\t@Id\r\n+\tpublic int getId ()\r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId (int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\t@Column(name=\"STATE\")\r\n+\tpublic String getState() {\r\n+\t\treturn state;\r\n+\t}\r\n+\r\n+\tpublic void setState(String state) {\r\n+\t\tthis.state = state;\r\n+\t}\r\n+\r\n+\t@Column(name=\"STREET\")\r\n+\tpublic String getStreet() {\r\n+\t\treturn street;\r\n+\t}\r\n+\r\n+\tpublic void setStreet(String street) {\r\n+\t\tthis.street = street;\r\n+\t}\r\n+\r\n+\tpublic int getZip() {\r\n+\t\treturn zip;\r\n+\t}\r\n+\r\n+\t@Column(name=\"ZIP\")\r\n+\tpublic void setZip(int zip) {\r\n+\t\tthis.zip = zip;\r\n+\t}\r\n+\t\r\n+\t@PostLoad\r\n+\tprotected void inform() {\r\n+\t\tSystem.out.println(\"Loaded\" + this);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"1b25a971b7f68362ac8a092fcab7a3ca05f25e05","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,157 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/** This simple domain class without any relationship is for testing basic \r\n+ * SQL Result Set mapping functionality.\r\n+ * This class uses Application Identity.\r\n+ * The annotation specified herein examplifies test cases of accessing\r\n+ * with or without identity fields, aliased column names etc. \r\n+ */ \r\n+@SqlResultSetMappings(value = {\r\n+\t/**\r\n+\t *  This mapping is the same as the native query that\r\n+\t *  takes a class argument.\r\n+\t *  <code>SELECT id,name,price FROM ITEM WHERE name='WINE'</code>\r\n+\t */ \t\t\r\n+\t@SqlResultSetMapping(name = \"MappingEquivalentToClassQuery\", \r\n+\t\tentities = { @EntityResult(entityClass = SQLMapItem.class) \r\n+\t}),\r\n+\r\n+\t/**\r\n+\t * This mapping is similar to the native query that takes a class argument\r\n+\t * but the query specifies aliases for the projection columns.\r\n+\t *  <code>SELECT id AS ITEM_ID,name AS ITEM_NAME FROM ITEM\r\n+\t *  WHERE NAME='WINE'</code>\r\n+\t */\t\t\t\t\r\n+\t@SqlResultSetMapping(name = \"MappingWithAliasedColumnName\", \r\n+\t\tentities = { @EntityResult(entityClass = SQLMapItem.class, \r\n+\t\t\tfields = {\r\n+\t\t\t\t@FieldResult(name = \"id\",   column = \"ITEM_ID\"),\r\n+\t\t\t\t@FieldResult(name = \"name\", column = \"ITEM_NAME\") }) \r\n+\t\t\t}),\r\n+\r\n+\t/**\r\n+\t * This mapping specifes only few fields of the application class.\r\n+\t * \r\n+\t */ \t\t\r\n+\t@SqlResultSetMapping(name=\"MappingWithPartialFields\",\r\n+\t\tentities={@EntityResult(entityClass=SQLMapItem.class,\r\n+\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"id\", column=\"id\")\r\n+\t\t\t})\r\n+\t\t}),\r\n+\r\n+\t@SqlResultSetMapping(name=\"MappingWithPartialFieldsExcludingIdField\",\r\n+\t\tentities={@EntityResult(entityClass=SQLMapItem.class,\r\n+\t\t\tfields={\r\n+\t\t\t\t@FieldResult(name=\"name\", column=\"name\")\r\n+\t\t\t\t})\r\n+\t\r\n+\t\t})\r\n+})\r\n+\r\n+@Entity\r\n+@Table(name = \"SQLMAP_ITEM\")\r\n+public class SQLMapItem\r\n+\timplements Serializable\r\n+{\r\n+\r\n+\tprivate int id;\r\n+\tprivate String name;\r\n+\tprivate float  price;\r\n+\r\n+\r\n+\tprotected SQLMapItem()\r\n+\t{\r\n+\t}\r\n+\r\n+\r\n+\tpublic SQLMapItem(int id)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic SQLMapItem(int id, String name)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic SQLMapItem(int id, String name, int price)\r\n+\t{\r\n+\t\tthis.id = id;\r\n+\t\tthis.name = name;\r\n+\t\tthis.price = price;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String toString()\r\n+\t{\r\n+\t\treturn getId() + \":\"+getName();\r\n+\t\t//System.identityHashCode(this) + \":[\" + id + \".\" + name + \"]\";\r\n+\t}\r\n+\r\n+\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic int getId()\r\n+\t{\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic void setId(int id)\r\n+\t{\r\n+\t\tSystem.out.println(\"setId \" + id);\r\n+\t\tthis.id = id;\r\n+\t}\r\n+\r\n+\t@Column(name=\"NAME\")\r\n+\tpublic String getName()\r\n+\t{\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setName(String name)\r\n+\t{\r\n+\t\tSystem.out.println(\"setName \" + name);\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\r\n+\t@Column(name=\"PRICE\")\r\n+\tpublic float getPrice()\r\n+\t{\r\n+\t\treturn price;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setPrice(float price)\r\n+\t{\r\n+\t\tthis.price = price;\r\n+\t}\r\n+}\r"},{"sha":"1b9da31fbf99f552d785132baf59da93ed1df185","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+/** Exemplifies a mapping that is overwritten in orm.xml file.\r\n+ * \r\n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n+ *\r\n+ */\r\n+@SqlResultSetMapping(name=\"Overwritten by Descriptor\",\r\n+\t\tentities={\r\n+\t\t\t@EntityResult(entityClass=SQLMapOrder.class)\r\n+\t\t},\r\n+\t\tcolumns={\r\n+\t\t\t@ColumnResult(name=\"id\")\r\n+\t\t}\r\n+\t)\r\n+\r\n+@Entity\r\n+@Table(name = \"SQLMAP_ORDER\")\r\n+public class SQLMapOrder implements Serializable {\r\n+\t@Id\r\n+\tint id;\r\n+\r\n+\tint quantity;\r\n+\r\n+\t@OneToOne\r\n+\tSQLMapItem item;\r\n+\r\n+\tprotected SQLMapOrder() {\r\n+\t}\r\n+\r\n+\tpublic SQLMapOrder(int id) {\r\n+\t\tthis(id, 1);\r\n+\t}\r\n+\r\n+\tpublic SQLMapOrder(int id, int quantity) {\r\n+\t\tthis.id = id;\r\n+\t\tthis.quantity = 1;\r\n+\t\tthis.item = null;\r\n+\t}\r\n+\r\n+\tpublic SQLMapItem getItem() {\r\n+\t\treturn item;\r\n+\t}\r\n+\r\n+\tpublic void setItem(SQLMapItem item) {\r\n+\t\tthis.item = item;\r\n+\t}\r\n+\r\n+\tpublic int getQuantity() {\r\n+\t\treturn quantity;\r\n+\t}\r\n+\r\n+\tpublic void setQuantity(int quantity) {\r\n+\t\tthis.quantity = quantity;\r\n+\t}\r\n+\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t@PostLoad\r\n+\tprotected void inform() {\r\n+\t\tSystem.out.println(\"Loaded\" + this);\r\n+\t}\r\n+}\r"},{"sha":"cfe0bcedea2d54ed2e339cd63e49423bc766df3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps.mappingApp;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.*;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+/** \r\n+ * @author ppoddar\r\n+ *\r\n+ */\r\n+\r\n+@SqlResultSetMapping (name=\"MappingWithSelfJoin\",\r\n+\t\tcolumns={\r\n+\t\t\t@ColumnResult(name=\"MY_NAME\"),\r\n+\t\t\t@ColumnResult(name=\"PARTNER_NAME\")\r\n+\t\t}\r\n+)\r\n+@Entity\r\n+@Table(name = \"SQLMAP_PERSON\")\r\n+public class SQLMapPerson implements Serializable {\r\n+\tprivate String name;\r\n+\tprivate SQLMapAddress address;\r\n+\tprivate SQLMapPerson partner;\r\n+\r\n+\r\n+\tprotected SQLMapPerson() {\r\n+\t}\r\n+\r\n+\tpublic SQLMapPerson(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic SQLMapPerson(String name, SQLMapAddress address) {\r\n+\t\tthis.name = name;\r\n+\t\tsetAddress(address);\r\n+\t}\r\n+\r\n+\t@Id\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\t@JoinColumn(name=\"ADDRESS_ID\")\r\n+\tpublic SQLMapAddress getAddress() {\r\n+\t\treturn address;\r\n+\t}\r\n+\r\n+\tpublic void setAddress(SQLMapAddress address) {\r\n+\t\tthis.address = address;\r\n+\t}\r\n+\r\n+\r\n+\t@OneToOne\r\n+\tpublic SQLMapPerson getPartner() {\r\n+\t\treturn partner;\r\n+\t}\r\n+\r\n+\tpublic void setPartner(SQLMapPerson partner) {\r\n+\t\tthis.partner = partner;\r\n+\t}\r\n+//\t@PostLoad\r\n+//\tprotected void inform() {\r\n+//\t\tSystem.out.println(\"Loaded\" + this);\r\n+//\t}\r\n+}\r"},{"sha":"810a7fd9a37d02ab00f3676340d496373917ff5b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,189 @@\n+/*\r\n+ * BaseJDBCTest.java\r\n+ *\r\n+ * Created on October 9, 2006, 12:56 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+import java.beans.BeanInfo;\r\n+import java.beans.Introspector;\r\n+import java.beans.PropertyDescriptor;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.*;\r\n+import javax.management.IntrospectionException;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+\r\n+public class BaseJDBCTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase{\r\n+    \r\n+    \r\n+    private static Map _sysprops = new HashMap();\r\n+    \r\n+    \r\n+    /** Creates a new instance of BaseJDBCTest */\r\n+    public BaseJDBCTest() {\r\n+    }\r\n+    \r\n+    public BaseJDBCTest(String name) \r\n+    {\r\n+        super(name, \"jdbccactusapp\");\r\n+    }\r\n+    \r\n+    protected OpenJPAEntityManager getPM() {\r\n+        return (OpenJPAEntityManager)currentEntityManager();\r\n+    }\r\n+    \r\n+    protected OpenJPAEntityManager getPM(boolean optimistic,boolean retainValues) {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Delete all instances of the given class.\r\n+     */\r\n+    protected  int deleteAll(Broker broker, Class clazz) {\r\n+        return deleteAll(broker, clazz, true);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Delete all instances of the given class.\r\n+     */\r\n+    protected int deleteAll(Broker broker, Class clazz,\r\n+            boolean subclasses) {\r\n+        final boolean useDeleteByQuery = false;\r\n+        \r\n+        if (useDeleteByQuery) {\r\n+            org.apache.openjpa.kernel.Query query = broker.newQuery(\r\n+                    JPQLParser.LANG_JPQL, clazz, \"\");\r\n+            query.setCandidateType(clazz, subclasses);\r\n+            return (int) query.deleteAll();\r\n+        } else {\r\n+            org.apache.openjpa.kernel.Extent extent =\r\n+                    broker.newExtent(clazz, subclasses);\r\n+            List list = extent.list();\r\n+            int size = list.size();\r\n+            broker.deleteAll(list, null);\r\n+            return size;\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Delete all instances of the given class.\r\n+     */\r\n+    protected int deleteAll(OpenJPAEntityManager pm, Class clazz) {\r\n+        return deleteAll(JPAFacadeHelper.toBroker(pm), clazz);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Delete all instances of the given class.\r\n+     */\r\n+    protected int deleteAll(OpenJPAEntityManager pm, Class clazz,\r\n+            boolean subclasses) {\r\n+        return deleteAll(JPAFacadeHelper.toBroker(pm), clazz, subclasses);\r\n+    }\r\n+    \r\n+    \r\n+    protected Object persist(Object ob) {\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        broker.persist(ob, null);\r\n+        Object id = broker.getObjectId(ob);\r\n+        broker.commit();\r\n+        broker.close();\r\n+        return id;\r\n+    }\r\n+    \r\n+    protected OpenJPAStateManager getStateManager(Object obj,OpenJPAEntityManager pm) {\r\n+        return getStateManager(obj,pm);\r\n+    }\r\n+    \r\n+    protected Properties getProperties() {\r\n+        return getProperties(null);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Return the runtime properties, optionally overriding or setting\r\n+     * some via the given array, which should be in the form\r\n+     * { key, val, key, val, ... }.\r\n+     */\r\n+    protected synchronized Properties getProperties(String[] props) {\r\n+        Properties p = new Properties(System.getProperties());\r\n+        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\r\n+        if (str != null && str.length() > 0) {\r\n+            // cache system properties to reduce load on file system\r\n+            Properties loaded = (Properties) _sysprops.get(str);\r\n+            if (loaded == null) {\r\n+                loaded = new Properties();\r\n+                ConfigurationProvider cp = (ConfigurationProvider) Configurations.getProperty(str, null);\r\n+                \r\n+                if (cp != null)\r\n+                    loaded.putAll(cp.getProperties());\r\n+                _sysprops.put(str, loaded);\r\n+            }\r\n+            p.putAll(loaded);\r\n+        }\r\n+        \r\n+        for (int i = 0; props != null && i < props.length; i += 2) {\r\n+            if (props[i + 1] != null) {\r\n+                // remove any duplicate kodo/openjpa property so we don't clash\r\n+                if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(5));\r\n+                else if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(8));\r\n+                \r\n+                p.setProperty(props[i], props[i + 1]);\r\n+            } else {\r\n+                p.remove(props[i]);\r\n+            }\r\n+        }\r\n+        return p;\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+}\r"},{"sha":"bdfd662b00d0b8673ec01c75fc393356c113c02b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ * JDBCTestCase.java\r\n+ *\r\n+ * Created on September 29, 2006, 3:23 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import java.util.*;\r\n+import org.apache.openjpa.conf.*;\r\n+import org.apache.openjpa.util.*;\r\n+import org.apache.openjpa.kernel.*;\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.jdbc.kernel.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+\r\n+\r\n+\r\n+\r\n+public abstract class JDBCTestCase extends BaseJDBCTest {\r\n+    \r\n+    /** Creates a new instance of JDBCTestCase */\r\n+    public JDBCTestCase() {\r\n+    }\r\n+    \r\n+    public JDBCTestCase(String name) {\r\n+        super(name);\r\n+    }\r\n+    public Class getDefaultInheritanceStrategy() {\r\n+        return getClassMapping(RuntimeTest2.class).getStrategy().getClass();\r\n+    }\r\n+\r\n+    public ClassMapping getClassMapping(Class c) {\r\n+        \r\n+        OpenJPAConfiguration jdoConf = getConfiguration();\r\n+        return ((JDBCConfiguration) jdoConf).getMappingRepositoryInstance().\r\n+            getMapping(c, getClass().getClassLoader(), true);\r\n+    }\r\n+\r\n+    public FieldMapping getFieldMapping(Class c, String field) {\r\n+        return getClassMapping(c).getFieldMapping(field);\r\n+    }\r\n+\r\n+    public boolean isInheritanceStrategyVertical() {\r\n+        return VerticalClassStrategy.class.\r\n+            isAssignableFrom(getDefaultInheritanceStrategy());\r\n+    }\r\n+}\r"},{"sha":"8338c354029638738a865c7c5f90ec1cdf930864","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","status":"added","additions":373,"deletions":0,"changes":373,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,373 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+/*\r\n+ * TestByteArrayAppId.java\r\n+ *\r\n+ * Created on October 2, 2006, 10:56 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import java.util.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.jdbc.meta.MappingTool;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.kernel.Extent;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.Query;\r\n+\r\n+\r\n+public class TestByteArrayAppId extends BaseJDBCTest {\r\n+    \r\n+    private static boolean _init = false;\r\n+    private OpenJPAEntityManagerFactory _pmf = null;\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestByteArrayAppId */\r\n+    public TestByteArrayAppId(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        return getCurrentPlatform() != AbstractTestCase.Platform.DB2;\r\n+    }\r\n+    \r\n+    public void setUp()\r\n+    throws Exception {\r\n+        // we have to use getbytes/setbytes for byte arrays to work properly\r\n+        _pmf =(OpenJPAEntityManagerFactory) getEmf(getProps());\r\n+        \r\n+        if (!_init) {\r\n+            initialize((JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(_pmf)).getConfiguration());\r\n+            _init = true;\r\n+        }\r\n+        EntityManager pm = _pmf.createEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+       deleteAll(ByteArrayPKPC.class,pm);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+        pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        ByteArrayPKPC2 testBytes = new ByteArrayPKPC2(new byte[]{ 1, 2 },\r\n+                \"child\");\r\n+        testBytes.setSubfield(\"sub\");\r\n+        testBytes.setParent(new ByteArrayPKPC(new byte[]{ 3, 4 }, \"parent\"));\r\n+        pm.persist(testBytes);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void tearDown()\r\n+    throws Exception {\r\n+        // closing the pmf every time slows things down too much b/c\r\n+        // schema reflection is so slow on DB2\r\n+        //\ttry { _pmf.close (); } catch (Exception e) {}\r\n+        \r\n+        super.tearDown();\r\n+    }\r\n+    \r\n+    private void initialize(JDBCConfiguration conf)\r\n+    throws Exception {\r\n+        \r\n+        EntityManager em= currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        //JDBCConfiguration conf = (JDBCConfiguration) kem.getConfiguration();        \r\n+        \r\n+        MappingTool tool = new MappingTool((JDBCConfiguration)\r\n+        \t\t((OpenJPAEntityManagerSPI) kem).getConfiguration(), MappingTool.ACTION_REFRESH, false);\r\n+        tool.run(ByteArrayPKPC.class);\r\n+        tool.run(ByteArrayPKPC2.class);\r\n+        tool.record();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests that application identity classes are returned correctly.\r\n+     */\r\n+    public void testGetObjectIdClass() {\r\n+        EntityManager em= currentEntityManager();\r\n+        OpenJPAEntityManager pm = OpenJPAPersistence.cast (em);\r\n+\r\n+        \r\n+        assertEquals(ByteArrayPKPCId.class,\r\n+                pm.getObjectIdClass(ByteArrayPKPC.class));\r\n+        assertEquals(ByteArrayPKPCId.class,\r\n+                pm.getObjectIdClass(ByteArrayPKPC2.class));\r\n+        pm.close();\r\n+        em.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests finding an instance by a manually-created id value.\r\n+     */\r\n+    public void testGetSubclassObjectById() {\r\n+        ByteArrayPKPC2 bytes2 = getChild();\r\n+        assertNotNull(bytes2);\r\n+        assertEquals(1, bytes2.getPK()[0]);\r\n+        assertEquals(2, bytes2.getPK()[1]);\r\n+        assertEquals(\"child\", bytes2.getStringField());\r\n+        assertEquals(\"sub\", bytes2.getSubfield());\r\n+        assertNotNull(bytes2.getParent());\r\n+        assertEquals(3, bytes2.getParent().getPK()[0]);\r\n+        assertEquals(4, bytes2.getParent().getPK()[1]);\r\n+        assertEquals(\"parent\", bytes2.getParent().getStringField());\r\n+        assertNull(bytes2.getParent().getParent());\r\n+        //FIXME next line commented \r\n+        //JDOHelper.getPersistenceManager(bytes2).close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests finding an instance by a manually-created id value.\r\n+     */\r\n+    public void testGetObjectById() {\r\n+        ByteArrayPKPC bytes = getParent();\r\n+        assertNotNull(bytes);\r\n+        assertEquals(3, bytes.getPK()[0]);\r\n+        assertEquals(4, bytes.getPK()[1]);\r\n+        assertEquals(\"parent\", bytes.getStringField());\r\n+        assertNull(bytes.getParent());\r\n+        //FIXME next line commented \r\n+        //JDOHelper.getPersistenceManager(bytes).close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests that the oid instances returned from the pm are copied to\r\n+     * prevent by-reference modification by the user.\r\n+     */\r\n+    public void testGetObjectId() {\r\n+        \r\n+        EntityManager em= currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        if (! ((OpenJPAEntityManagerSPI) kem).getConfiguration().getCompatibilityInstance().getCopyObjectIds())\r\n+            return;\r\n+        \r\n+        ByteArrayPKPCId oid = new ByteArrayPKPCId();\r\n+        oid.pk = new byte[]{ 1, 2 };\r\n+        ByteArrayPKPC bytes = (ByteArrayPKPC) kem.getObjectId(oid);\r\n+        ByteArrayPKPCId oidCopy = (ByteArrayPKPCId) kem.getObjectId(bytes);\r\n+        assertTrue(\"Oid not copied.\", oid != oidCopy);\r\n+        assertEquals(1, oidCopy.pk[0]);\r\n+        assertEquals(2, oidCopy.pk[1]);\r\n+        \r\n+        em.close();\r\n+        kem.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests that changing primary key values will fail.\r\n+     */\r\n+    public void testChangeIdentity() {\r\n+        ByteArrayPKPC2 bytes = getChild();\r\n+        OpenJPAEntityManager pm = OpenJPAPersistence.getEntityManager(bytes);\r\n+        startTx(pm);\r\n+        \r\n+        // make sure setting to same value is OK\r\n+        bytes.setPK(bytes.getPK());\r\n+        try {\r\n+            bytes.setPK(new byte[]{ 5, 6 });\r\n+            fail(\"Allowed changing of pk.\");\r\n+        } catch (Exception je) {\r\n+        }\r\n+        rollbackTx(pm);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests that pk fields are retained on state transition to hollow.\r\n+     */\r\n+    public void testPKRetain() {\r\n+        ByteArrayPKPC2 bytes = getChild();\r\n+        OpenJPAEntityManager pm = OpenJPAPersistence.getEntityManager(bytes);\r\n+        \r\n+        //FIXME next line commented .... need substitute API\r\n+        //pm.currentTransaction().setNontransactionalRead(false);\r\n+        \r\n+        startTx(pm);\r\n+        bytes.setParent(null);\r\n+        endTx(pm);        \r\n+        \r\n+        // bytes should still allow access to oid fields\r\n+        assertEquals(1, bytes.getPK()[0]);\r\n+        assertEquals(2, bytes.getPK()[1]);\r\n+        try {\r\n+            bytes.getParent();\r\n+            fail(\"Allowed read of non-pk value outside of transaction.\");\r\n+        } catch (Exception je) {\r\n+        }\r\n+        try {\r\n+            bytes.setPK(new byte[]{ 5, 6 });\r\n+            fail(\"Allowed setting of pk value outside of transaction.\");\r\n+        } catch (Exception je) {\r\n+        }\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testDeleteAndInsert() {\r\n+        EntityManager em= currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        \r\n+        startTx(kem);\r\n+       \r\n+        for (int i = 0; i < 20; i++) {\r\n+            ByteArrayPKPC bytes = new ByteArrayPKPC(new byte[]\r\n+            { (byte) (i + 5), (byte) (i + 6) }, String.valueOf(i));\r\n+            kem.persist(bytes);\r\n+        }\r\n+        endTx(kem);        \r\n+        \r\n+        kem.close();\r\n+        \r\n+        kem = _pmf.createEntityManager();\r\n+        startTx(kem);\r\n+        Extent extent = (Extent) kem.createExtent(ByteArrayPKPC.class,false);\r\n+        kem.detachAll(extent.list());\r\n+        extent.closeAll();\r\n+        \r\n+        ByteArrayPKPC owner = new ByteArrayPKPC();\r\n+        kem.persist(owner);\r\n+        owner.setPK(new byte[]{ 100, 101 });\r\n+        owner.setStringField(\"owner\");\r\n+        \r\n+        // make new instances with same oids persistent\r\n+        for (int i = 0; i < 20; i++) {\r\n+            ByteArrayPKPC bytes = new ByteArrayPKPC(new byte[]\r\n+            { (byte) (i + 5), (byte) (i + 6) }, String.valueOf(i));\r\n+            kem.persist(bytes);\r\n+            assertEquals(bytes, getStateManager(bytes, kem).getManagedInstance());\r\n+            owner.getRels().add(bytes);\r\n+        }\r\n+        \r\n+        endTx(kem);  \r\n+        \r\n+        Object oid = kem.getObjectId(owner);\r\n+        assertOwner(kem, oid);\r\n+        kem.close();\r\n+        \r\n+        kem = _pmf.createEntityManager();\r\n+        assertOwner(kem, oid);\r\n+        em.close();\r\n+        kem.close();\r\n+    }\r\n+    \r\n+    public void testQuery() {\r\n+        EntityManager pm = _pmf.createEntityManager();\r\n+        //FIXME jthomas - partly commented \r\n+        //Query q = pm.newQuery(ByteArrayPKPC.class, \"pk == bytes\");\r\n+        Query q =null;//= pm.newQuery(ByteArrayPKPC.class, \"pk == bytes\");\r\n+        q.declareParameters(\"byte[] bytes\");\r\n+        //FIXME jthomas - no execute for byte \r\n+        //Collection results = (Collection) q.execute(new byte[]{ 1, 2 });\r\n+        Collection results =null;//= (Collection) q.execute(new byte[]{ 1, 2 });\r\n+        assertEquals(1, results.size());\r\n+        ByteArrayPKPC2 child = (ByteArrayPKPC2) results.iterator().next();\r\n+        assertEquals(\"child\", child.getStringField());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testConflictingIds() {\r\n+        OpenJPAEntityManager pm = _pmf.createEntityManager();\r\n+        startTx(pm);     \r\n+        \r\n+        // make a bunch of objects persistent with the same initial pk values\r\n+        ByteArrayPKPC owner = new ByteArrayPKPC();\r\n+        pm.persist(owner);\r\n+        owner.setPK(new byte[]{ 100, 101 });\r\n+        owner.setStringField(\"owner\");\r\n+        for (int i = 0; i < 20; i++) {\r\n+            ByteArrayPKPC bytes = new ByteArrayPKPC();\r\n+            pm.persist(bytes);\r\n+            assertEquals(bytes, getStateManager(bytes, pm).\r\n+                    getManagedInstance());\r\n+            bytes.setPK(new byte[]{ (byte) (i + 5), (byte) (i + 6) });\r\n+            bytes.setStringField(String.valueOf(i));\r\n+            owner.getRels().add(bytes);\r\n+        }\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(owner);\r\n+        assertOwner(pm, oid);\r\n+        pm.close();\r\n+        \r\n+        pm = _pmf.createEntityManager();\r\n+        assertOwner(pm, oid);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertOwner(OpenJPAEntityManager pm, Object oid) {\r\n+        ByteArrayPKPC owner = (ByteArrayPKPC) pm.getObjectId(oid);\r\n+        assertEquals(100, owner.getPK()[0]);\r\n+        assertEquals(101, owner.getPK()[1]);\r\n+        assertEquals(\"owner\", owner.getStringField());\r\n+        List rels = owner.getRels();\r\n+        assertEquals(20, rels.size());\r\n+        for (int i = 0; i < rels.size(); i++) {\r\n+            ByteArrayPKPC bytes = (ByteArrayPKPC) rels.get(i);\r\n+            assertEquals(i + 5, bytes.getPK()[0]);\r\n+            assertEquals(i + 6, bytes.getPK()[1]);\r\n+            assertEquals(String.valueOf(i), bytes.getStringField());\r\n+        }\r\n+    }\r\n+    \r\n+    private ByteArrayPKPC getParent() {\r\n+        ByteArrayPKPCId oid = new ByteArrayPKPCId();\r\n+        oid.pk = new byte[]{ 3, 4 };\r\n+        OpenJPAEntityManager pm = _pmf.createEntityManager();\r\n+        return (ByteArrayPKPC) pm.getObjectId(oid);\r\n+    }\r\n+    \r\n+    private ByteArrayPKPC2 getChild() {\r\n+        ByteArrayPKPCId oid = new ByteArrayPKPCId();\r\n+        oid.pk = new byte[]{ 1, 2 };\r\n+        OpenJPAEntityManager pm = _pmf.createEntityManager();\r\n+        return (ByteArrayPKPC2) pm.getObjectId(oid);\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+       // main();\r\n+    }\r\n+    \r\n+    private Map getProps() {\r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.jdbc.DBDictionary\", \"\");\r\n+        props.put(\"UseGetBytesForBlobs\", \"true\");\r\n+        props.put(\"UseSetBytesForBlobs\", \"true\");\r\n+        props.put(\"BatchLimit\", \"0\");\r\n+        \r\n+        return props;\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"a3264be525641cab71f0f1027903fad5b33303b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,139 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestCircularFK extends BaseJDBCTest{\r\n+    \r\n+    private Object _oid1 = null;\r\n+    private Object _oid2 = null;\r\n+    \r\n+    public TestCircularFK(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestCircularFK */\r\n+    public TestCircularFK() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        \r\n+        startTx(pm);\r\n+       deleteAll(CircularFKPC.class,pm);\r\n+       deleteAll(CircularFKPC2.class,pm);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+        \r\n+        \r\n+        CircularFKPC pc1 = new CircularFKPC();\r\n+        pc1.setStringField(\"pc1\");\r\n+        CircularFKPC2 pc2 = new CircularFKPC2();\r\n+        pc2.setStringField(\"pc2\");\r\n+        pc1.setFKField(pc2);\r\n+        pc2.setFKField(pc1);\r\n+        \r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        endTx(pm);\r\n+        _oid1 = pm.getObjectId(pc1);\r\n+        _oid2 = pm.getObjectId(pc2);\r\n+        endEm(pm);\r\n+    }\r\n+    \r\n+    public void testInsert() {\r\n+        // inserts are tested in setup; just make sure the inserts\r\n+        // actually worked\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\r\n+        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\r\n+        assertNotNull(pc1);\r\n+        assertNotNull(pc2);\r\n+        assertEquals(\"pc1\", pc1.getStringField());\r\n+        assertEquals(\"pc2\", pc2.getStringField());\r\n+        assertEquals(pc2, pc1.getFKField());\r\n+        assertEquals(pc1, pc2.getFKField());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testDelete() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\r\n+        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\r\n+        startTx(pm);\r\n+        pm.remove(pc1);\r\n+        pm.remove(pc2);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+        \r\n+        pm = getPM();\r\n+        try {\r\n+            pm.find(CircularFKPC.class,_oid1);\r\n+            fail(\"PC1 still exists!\");\r\n+        } catch (Exception jdse) {\r\n+        }\r\n+        try {\r\n+            pm.find(CircularFKPC2.class,_oid2);\r\n+            fail(\"PC2 still exists!\");\r\n+        } catch (Exception jdse) {\r\n+        }\r\n+        endEm(pm);\r\n+    }\r\n+    \r\n+    public void testUpdate() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        CircularFKPC pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\r\n+        CircularFKPC2 pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\r\n+        \r\n+        startTx(pm);;\r\n+        CircularFKPC2 pc3 = new CircularFKPC2();\r\n+        pc3.setStringField(\"pc3\");\r\n+        pc3.setFKField(pc1);\r\n+        pc1.setFKField(pc3);\r\n+        pc2.setFKField(null);\r\n+        endTx(pm);;\r\n+        pm.close();\r\n+        \r\n+        pm = getPM();\r\n+        pc1 = (CircularFKPC) pm.find(CircularFKPC.class,_oid1);\r\n+        pc2 = (CircularFKPC2) pm.find(CircularFKPC2.class,_oid2);\r\n+        assertNotNull(pc1);\r\n+        assertNotNull(pc2);\r\n+        assertEquals(\"pc1\", pc1.getStringField());\r\n+        assertEquals(\"pc2\", pc2.getStringField());\r\n+        assertNotNull(pc1.getFKField());\r\n+        assertEquals(\"pc3\", pc1.getFKField().getStringField());\r\n+        assertEquals(pc1, pc1.getFKField().getFKField());\r\n+        assertNull(pc2.getFKField());\r\n+    }\r\n+}\r"},{"sha":"240a1da6bfa924f803fcbbac3b59251b2a9e2c36","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,199 @@\n+/*\r\n+ * TestDataStoreTrips.java\r\n+ *\r\n+ * Created on September 29, 2006, 4:48 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+\r\n+\r\n+\r\n+public class TestDataStoreTrips extends BaseJDBCTest{\r\n+\r\n+\r\n+//    private boolean  = true;//Boolean.valueOf(bool);\r\n+\t\r\n+    private OpenJPAEntityManagerFactory _factory = null;\r\n+    private Object _oid = null;\r\n+    private SelectCounter _counter = null;\r\n+    \r\n+    /** Creates a new instance of TestDataStoreTrips */\r\n+    public TestDataStoreTrips() {\r\n+    }\r\n+    public TestDataStoreTrips(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    public void setUp()\r\n+        throws Exception {\r\n+       deleteAll(DataStoreTripsPC.class);\r\n+\r\n+        // figure out what table to look for in SQL statements\r\n+        EntityManager em= currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();        \r\n+\r\n+        ClassMapping mapping = conf.getMappingRepositoryInstance().getMapping\r\n+            (DataStoreTripsPC.class, null, true);\r\n+        String table = conf.getDBDictionaryInstance()\r\n+            .getFullName(mapping.getTable(), false);\r\n+\r\n+        // get factory with counter listener\r\n+        _factory = getEmf();\r\n+/*                getPMFactory(new String[]{\r\n+            \"openjpa.jdbc.JDBCListeners\",\r\n+            SelectCounter.class.getName() + \"(Table=\" + table + \")\",\r\n+            \"openjpa.Compatibility\",\r\n+            \"ValidateTrueChecksStore=true\"\r\n+        });\r\n+*/\r\n+        \r\n+        OpenJPAEntityManager pm = _factory.createEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+        DataStoreTripsPC pc = new DataStoreTripsPC(0);\r\n+        pm.persist(pc);\r\n+        _oid = pm.getObjectId(pc);\r\n+\r\n+        for (int i = 1; i < 10; i++)\r\n+              pm.persist(new DataStoreTripsPC(i));\r\n+        endTx(pm);\r\n+        em.close();\r\n+\r\n+        // do a query so that the subclass list will get initialized and\r\n+        // won't count as a select\r\n+        pm = _factory.createEntityManager();\r\n+        pm.getObjectId(_oid);\r\n+        pm.close();\r\n+\r\n+        _counter = (SelectCounter) ((JDBCConfiguration)\r\n+        \t\t((OpenJPAEntityManagerFactorySPI) _factory).getConfiguration()).getJDBCListenerInstances()[0];\r\n+        _counter.selects = 0;\r\n+        _counter.counts = 0;\r\n+    }\r\n+\r\n+    public void testTrips() {\r\n+        OpenJPAEntityManager pm = _factory.createEntityManager();\r\n+        Extent ext = pm.createExtent(DataStoreTripsPC.class, true);\r\n+        for (Iterator itr = ext.iterator(); itr.hasNext();)\r\n+            itr.next();\r\n+        ext.closeAll();\r\n+        pm.close();\r\n+\r\n+        // there might be more than 1 trip if subclasses need to be\r\n+        // initialized and so forth, but make sure there isn't more than\r\n+        // 1 + # objects trips to the DB\r\n+        assertTrue(_counter.selects > 0);\r\n+        assertTrue(\"Should have been 1-3 trips to the data store; got \"\r\n+            + _counter.selects, _counter.selects < 5);\r\n+    }\r\n+\r\n+    public void testExistsCalls() {\r\n+        OpenJPAEntityManager pm = _factory.createEntityManager();\r\n+\r\n+        // first time there shouldn't be any call to exists b/c the data\r\n+        // needs to be loaded\r\n+        pm.getObjectId(_oid);\r\n+        assertEquals(0, _counter.counts);\r\n+        assertEquals(1, _counter.selects);\r\n+\r\n+        // this time there should be a call b/c data is already loaded but\r\n+        // we're still asking to validate\r\n+        pm.getObjectId(_oid);\r\n+        assertEquals(1, _counter.counts);\r\n+        assertEquals(2, _counter.selects);\r\n+        pm.getObjectId(_oid);\r\n+        assertEquals(2, _counter.counts);\r\n+        assertEquals(3, _counter.selects);\r\n+\r\n+        // shouldn't be a call if validate is false; no select b/c data loaded\r\n+        pm.getObjectId(_oid);\r\n+        assertEquals(2, _counter.counts);\r\n+        assertEquals(3, _counter.selects);\r\n+\r\n+        // this will hollow the object\r\n+        //FIXME jthomas ...need to find a substitute\r\n+        //pm.currentTransaction().setOptimistic(false);\r\n+        startTx(pm);\r\n+        \r\n+\r\n+        // no count call b/c loading data\r\n+        pm.getObjectId(_oid);\r\n+        assertEquals(2, _counter.counts);\r\n+        assertEquals(4, _counter.selects);\r\n+\r\n+        // no count call b/c transactional; no select b/c data loaded\r\n+        pm.getObjectId(_oid);\r\n+        assertEquals(2, _counter.counts);\r\n+        assertEquals(4, _counter.selects);\r\n+\r\n+        rollbackTx(pm);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public static class SelectCounter\r\n+        extends AbstractJDBCListener {\r\n+\r\n+        public int selects = 0;\r\n+        public int counts = 0;\r\n+\r\n+        private String _table = null;\r\n+\r\n+        public void setTable(String table) {\r\n+            _table = table;\r\n+        }\r\n+\r\n+        public void beforeExecuteStatement(JDBCEvent event) {\r\n+            if (event.getSQL().indexOf(_table) != -1)\r\n+                selects++;\r\n+            {\r\n+                if (event.getSQL().indexOf(\" COUNT(\") != -1)\r\n+                    counts++;\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"cc89f211baa74ff43f57830da76e23257d5752fe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","status":"added","additions":238,"deletions":0,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,238 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC1;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC2;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3Id;\r\n+\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBAutoIncrement extends BaseJDBCTest\r\n+{\r\n+\r\n+//\tprivate boolean  = Boolean.valueOf(bool);\r\n+\r\n+\tprivate int oid2;\r\n+\tprivate long oid3;\r\n+\tprivate long oid4, oid2a, oid2b, oid3b;\r\n+\tprivate long oid3a;\r\n+\r\n+\tpublic TestEJBAutoIncrement(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(AutoIncrementPC1.class);\r\n+\t\tdeleteAll(AutoIncrementPC2.class);\r\n+\t\tdeleteAll(AutoIncrementPC3.class);\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tpublic void testInsert ()\r\n+\t{\r\n+\t\tAutoIncrementPC2 pc1 = new AutoIncrementPC2 (1);\r\n+\t\tpc1.setStringField (\"pc1\");\r\n+\t\tpc1.setIntField (1);\r\n+\t\tpc1.getSetField ().add (\"string1\");\r\n+\t\tpc1.getSetField ().add (\"string2\");\r\n+\r\n+\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (2);\r\n+\t\tpc2.setStringField (\"pc2\");\r\n+\t\tpc2.setIntField (2);\r\n+\t\tpc2.getSetField ().add (\"string3\");\r\n+\t\tpc2.getSetField ().add (\"string4\");\r\n+\r\n+\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (3);\r\n+\t\tpc3.setStringField (\"pc3\");\r\n+\t\tpc3.getSetField ().add (\"string5\");\r\n+\t\tpc3.getSetField ().add (\"string6\");\r\n+\r\n+\t\tAutoIncrementPC3 pc4 = new AutoIncrementPC3 (4);\r\n+\t\tpc4.setStringField (\"pc4\");\r\n+\t\tpc4.getSetField ().add (\"string7\");\r\n+\t\tpc4.getSetField ().add (\"string8\");\r\n+\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tem.persist(pc1);\r\n+\t\tem.persist(pc2);\r\n+\t\tem.persist(pc3);\r\n+\t\tem.persist(pc4);\r\n+\t\toid2 = pc2.getId();\r\n+\t\toid4 = pc4.getId();\r\n+\r\n+\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2));\r\n+\t\tassertEquals (pc4, em.find(AutoIncrementPC3.class, oid4));\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\r\n+\t\tem = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tpc2 = em.find(AutoIncrementPC2.class, 2);\r\n+\t\tpc4 = em.find(AutoIncrementPC3.class, 4);\r\n+\t\tassertEquals (\"pc2\", pc2.getStringField ());\r\n+\t\tassertEquals (2, pc2.getIntField ());\r\n+\t\tassertEquals (\"pc4\", pc4.getStringField ());\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testUpdate ()\r\n+\t{\r\n+\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (1);\r\n+\t\tpc2.setStringField (\"pc2\");\r\n+\t\tpc2.setIntField (2);\r\n+\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (2);\r\n+\t\tpc3.setStringField (\"pc3\");\r\n+\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tem.persist (pc2);\r\n+\t\tem.persist (pc3);\r\n+\t\tendTx(em);\r\n+\r\n+\t\toid2 = pc2.getId();\r\n+\t\toid3 = pc3.getId();\r\n+\t\tendEm(em);\r\n+\r\n+\t\tem = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tpc2 = em.find(AutoIncrementPC2.class, oid2);\r\n+\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\r\n+\t\tassertEquals (\"pc2\", pc2.getStringField ());\r\n+\t\tassertEquals (2, pc2.getIntField ());\r\n+\t\tassertEquals (\"pc3\", pc3.getStringField ());\r\n+\t\tpc2.setStringField (\"pc2a\");\r\n+\t\tpc2.setIntField (3);\r\n+\t\tpc3.setStringField (\"pc3a\");\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\r\n+\t\tem = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tpc2 = em.find(AutoIncrementPC2.class, oid2);\r\n+\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\r\n+\t\tassertEquals (\"pc2a\", pc2.getStringField ());\r\n+\t\tassertEquals (3, pc2.getIntField ());\r\n+\t\tassertEquals (\"pc3a\", pc3.getStringField ());\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testCircularReferences ()\r\n+\t{\r\n+\t\tAutoIncrementPC2 pc2a = new AutoIncrementPC2 (1);\r\n+\t\tpc2a.setStringField (\"pc2a\");\r\n+\t\tpc2a.setIntField (1);\r\n+\t\tAutoIncrementPC2 pc2b = new AutoIncrementPC2 (2);\r\n+\t\tpc2b.setStringField (\"pc2b\");\r\n+\t\tpc2b.setIntField (2);\r\n+\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (3);\r\n+\t\tpc3.setStringField (\"pc3\");\r\n+\r\n+\t\tpc2a.setOneOne (pc2b);\r\n+\t\tpc2b.setOneOne (pc2a);\r\n+\t\tpc3.setOneOne (pc3);\r\n+\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tem.persist (pc2a);\r\n+\t\tem.persist (pc2b);\r\n+\t\tem.persist (pc3);\r\n+\t\tendTx(em);\r\n+\t\toid2a = pc2a.getId();\r\n+\t\toid2b = pc2b.getId();\r\n+\t    oid3 = pc3.getId();\r\n+\t\tendEm(em);\r\n+\r\n+\t\tem = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tpc2a = em.find(AutoIncrementPC2.class, oid2a);\r\n+\t\tpc2b = em.find(AutoIncrementPC2.class, oid2b);\r\n+\t\tpc3 = em.find(AutoIncrementPC3.class, oid3);\r\n+\t\tassertEquals (\"pc2a\", pc2a.getStringField ());\r\n+\t\tassertEquals (1, pc2a.getIntField ());\r\n+\t\tassertEquals (\"pc2b\", pc2b.getStringField ());\r\n+\t\tassertEquals (2, pc2b.getIntField ());\r\n+\t\tassertEquals (\"pc3\", pc3.getStringField ());\r\n+\t\tassertEquals (pc2b, pc2a.getOneOne ());\r\n+\t\tassertEquals (pc2a, pc2b.getOneOne ());\r\n+\t\tassertEquals (pc3, pc3.getOneOne ());\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testMultipleFlushes ()\r\n+\t{\r\n+\t\tAutoIncrementPC2 pc2 = new AutoIncrementPC2 (1);\r\n+\t\tpc2.setStringField (\"pc2\");\r\n+\t\tpc2.setIntField (2);\r\n+\t\tAutoIncrementPC3 pc3 = new AutoIncrementPC3 (2);\r\n+\t\tpc3.setStringField (\"pc3\");\r\n+\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tem.persist (pc2);\r\n+\t\tem.persist (pc3);\r\n+\t\toid2 = pc2.getId();\r\n+\t\toid3 = pc3.getId();\r\n+\t\tem.flush ();\r\n+\r\n+\t    oid2a = pc2.getId();\r\n+\t\toid3a = pc3.getId();\r\n+\t\tassertEquals (oid2, oid2a);\r\n+\t\tassertEquals (oid3, oid3a);\r\n+\t\tlong id = pc3.getId ();\r\n+\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2a));\r\n+\t\tassertEquals (pc3, em.find(AutoIncrementPC3.class, oid3a));\r\n+\t\tpc2.setStringField (\"pc2a\");\r\n+\t\tpc2.setIntField (3);\r\n+\t\tpc3.setStringField (\"pc3a\");\r\n+\t\tem.flush ();\r\n+\r\n+\t\toid2b = pc2.getId();\r\n+\t\toid3b = pc3.getId();\r\n+\t\tassertEquals (oid2, oid2b);\r\n+\t\tassertEquals (oid3, oid3b);\r\n+\t\tassertEquals (id, pc3.getId ());\r\n+\t\tassertEquals (pc2, em.find(AutoIncrementPC2.class, oid2b));\r\n+\t\tassertEquals (pc3, em.find(AutoIncrementPC3.class, oid3b));\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\r\n+\t\tem = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tpc2 = em.find(AutoIncrementPC2.class, oid2b);\r\n+\t\tpc3 = em.find(AutoIncrementPC3.class, oid3b);\r\n+\t\tassertEquals (\"pc2a\", pc2.getStringField ());\r\n+\t\tassertEquals (3, pc2.getIntField ());\r\n+\t\tassertEquals (\"pc3a\", pc3.getStringField ());\r\n+\t\tassertEquals (id, pc3.getId ());\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+}\r"},{"sha":"f871f9aa524cef13d28f1f712532fcc44934191a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * TestEfficientAttach.java\r\n+ *\r\n+ * Created on September 29, 2006, 6:00 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+\r\n+public class TestEfficientAttach extends TestSQLListenerTestCase {\r\n+\r\n+\r\n+//    private boolean  = true;//Boolean.valueOf(bool);\r\n+    \r\n+    /** Creates a new instance of TestEfficientAttach */\r\n+    public TestEfficientAttach(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void testAttachWithDetachedStateManager() {\r\n+        Class[] clss = new Class[]{\r\n+            AttachA.class, AttachB.class, AttachC.class, AttachD.class,\r\n+            AttachE.class, AttachF.class,\r\n+        };\r\n+        String[] detachedStateFields = new String[clss.length];\r\n+\r\n+        // null any declared detached state fields so we know we're using\r\n+        // synthetic state managers\r\n+        EntityManager em= currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();\r\n+\r\n+        MetaDataRepository repos = conf.getMappingRepositoryInstance();\r\n+        ClassMetaData meta;\r\n+        for (int i = 0; i < clss.length; i++) {\r\n+            meta = repos.getMetaData(clss[i], null, true);\r\n+            detachedStateFields[i] = meta.getDetachedState();\r\n+            meta.setDetachedState(null);\r\n+\r\n+           deleteAll(clss[i]);\r\n+        }\r\n+\r\n+        try {\r\n+            attachTest();\r\n+        } finally {\r\n+            // set detached state back\r\n+            for (int i = 0; i < clss.length; i++)\r\n+                repos.getMetaData(clss[i], null, true).setDetachedState\r\n+                    (detachedStateFields[i]);\r\n+        }\r\n+    }\r\n+\r\n+    private void attachTest() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);;\r\n+        AttachE e = new AttachE();\r\n+        e.setB(new AttachB());\r\n+        pm.persist(e);\r\n+        endTx(pm);;\r\n+        //FIXME jthomas - could not find equivalent for detachCopy() attachCopy() etc\r\n+/*      \r\n+        e = (AttachE) pm.detachCopy(e);\r\n+        pm.close();\r\n+\r\n+        pm = getPM();\r\n+        pm.begin();\r\n+        sql.clear();\r\n+        e = (AttachE) pm.attachCopy(e, false);\r\n+        assertNotNull(e);\r\n+        assertNotNull(e.getB());\r\n+        assertSize(0, sql);\r\n+        pm.commit();\r\n+        assertSize(2, sql);\r\n+        pm.close();\r\n+ */\r\n+    }\r\n+\r\n+\r\n+    public static void main(String[] args) {\r\n+        //main();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"0688cd92c5b493f7c4787dd06ea93ea9c12be1fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","status":"added","additions":285,"deletions":0,"changes":285,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,285 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.kernel.*;\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.FetchPlan;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase; \r\n+\r\n+\r\n+/**\r\n+ * Test various bits of embedded-field functionality.\r\n+ * <p/>\r\n+ * ##### this should test embedded-element collections, maps, at least to ensure\r\n+ * ##### that the state managers of values in embedded collections, maps do not\r\n+ * ##### have owners. Not relevant in 3.x; will be important in 4.0.\r\n+ */\r\n+public class TestEmbeddedPessimisticLocking\r\n+    extends TestSQLListenerTestCase {\r\n+\r\n+\r\n+    private boolean supportsLocking;\r\n+    private Object oid;\r\n+    private OpenJPAEntityManagerFactory emf;\r\n+    \r\n+    public TestEmbeddedPessimisticLocking(String name)\r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+\r\n+\tpublic void setUp() throws Exception{\r\n+\t\tsuper.setUp();\r\n+\t\temf = (OpenJPAEntityManagerFactory)getEmf(getProps());\r\n+\t}\r\n+\r\n+\r\n+\r\n+    public void setUpTestCase() {\r\n+\r\n+\t\tJDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\r\n+\r\n+        supportsLocking = conf.getDBDictionaryInstance().supportsSelectForUpdate;\r\n+\r\n+       deleteAll(EmbeddedOwnerPC.class);\r\n+\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(em);\r\n+        EmbeddedOwnerPC owner = new EmbeddedOwnerPC(10, 20);\r\n+        em.persist(owner);\r\n+\r\n+        EmbeddedPC embedded = new EmbeddedPC();\r\n+        embedded.setIntField(4);\r\n+        embedded.setStringField(\"foo\");\r\n+        owner.setEmbedded(embedded);\r\n+\r\n+        EmbeddedPC embedded2 = new EmbeddedPC();\r\n+        embedded2.setIntField(8);\r\n+        embedded2.setStringField(\"bar\");\r\n+        ComplexEmbeddedPC complex = new ComplexEmbeddedPC();\r\n+        complex.setStringField(\"complex\");\r\n+        complex.setEmbedded(embedded2);\r\n+        owner.setComplexEmbedded(complex);\r\n+\r\n+        endTx(em);\r\n+\r\n+        oid = em.getObjectId(owner);\r\n+        em.close();\r\n+    }\r\n+\r\n+    private void prepareEMF(OpenJPAEntityManagerFactory emf) {\r\n+        // do this to ensure that the SELECT DISTINCT gets performed here.\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+\r\n+        //FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n+        //em.getTransaction().setOptimistic(false);\r\n+        startTx(em);\r\n+\r\n+        try {\r\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n+        } finally {\r\n+            rollbackTx(em);\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testEmbeddedFieldsWithLockedParent() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+        prepareEMF(em.getEntityManagerFactory());\r\n+        ((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"embedded\");\r\n+//FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n+//        pm.currentTransaction().setOptimistic(false);\r\n+        startTx(em);\r\n+        try {\r\n+            sql.clear();\r\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n+            assertEquals(1, sql.size());\r\n+\r\n+            pc.getEmbedded().setStringField\r\n+                (pc.getEmbedded().getStringField() + \"bar\");\r\n+            // should not go to the db for another lock; we use <=, since\r\n+            // some databases (like HSQL) don't support locking at all\r\n+            assertTrue(sql.size() <= 1);\r\n+        } finally {\r\n+            rollbackTx(em);\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testEmbeddedFieldsWithUnlockedParent() {\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+\t\tprepareEMF(em.getEntityManagerFactory());\r\n+\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"embedded\");\r\n+\r\n+\r\n+//FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n+//        pm.currentTransaction().setOptimistic(false);\r\n+        startTx(em);\r\n+\r\n+        try {\r\n+\r\n+            //FIXME jthomas - no equivalent found for LockLevels.LOCK_NONE\r\n+            //((FetchPlan) pm.getFetchPlan()).setReadLockMode(LockLevels.LOCK_NONE);\r\n+\r\n+            sql.clear();\r\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n+            EmbeddedPC embedded = pc.getEmbedded();\r\n+\r\n+            assertNull(getStateManager(pc, em).getLock());\r\n+            assertNull(getStateManager(embedded, em).getLock());\r\n+            assertEquals(1, sql.size());\r\n+            sql.clear();\r\n+\r\n+            embedded.setStringField(embedded.getStringField() + \"bar\");\r\n+            // should not go to the db for another lock -- should have gotten\r\n+            // one along with the embedded field's lock\r\n+            assertTrue(sql.size() <= 1);\r\n+            assertNotNull(getStateManager(pc, em).getLock());\r\n+\r\n+            // embeddeds don't get locks at all.\r\n+            assertNull(getStateManager(embedded, em).getLock());\r\n+\r\n+            // owner is dirtied when embedded record is changed\r\n+            assertTrue(getStateManager(pc, em).isDirty());\r\n+            assertTrue(getStateManager(embedded, em).isDirty());\r\n+\r\n+            pc.setStringField(pc.getStringField() + \"bar\");\r\n+            // should not go to the db for another lock.\r\n+            assertTrue(sql.size() <= 1);\r\n+        } finally {\r\n+            rollbackTx(em);\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testComplexEmbeddedFieldsWithLockedParent() {\r\n+\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+\t\tprepareEMF(em.getEntityManagerFactory());\r\n+\t\tem.getFetchPlan().setMaxFetchDepth(-1);\r\n+\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"complexEmbedded\");\r\n+\t\t((FetchPlan) em.getFetchPlan()).addField(RecursivelyEmbeddedPC.class, \"embedded\");\r\n+\r\n+//FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n+//        pm.currentTransaction().setOptimistic(false);\r\n+        startTx(em);\r\n+        try {\r\n+            sql.clear();\r\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n+            assertEquals(1, sql.size());\r\n+\r\n+            pc.getComplexEmbedded().getEmbedded().setStringField\r\n+                (pc.getComplexEmbedded().getEmbedded().getStringField() +\r\n+                    \"bar\");\r\n+            // should not go to the db for another lock.\r\n+            assertTrue(sql.size() <= 1);\r\n+        } finally {\r\n+            rollbackTx(em);\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testComplexEmbeddedFieldsWithUnlockedParent() {\r\n+        // doing this because setting the read lock level\r\n+        // does not seem to be disabling FOR UPDATE.\r\n+\r\n+\r\n+\t\tOpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+\t\tprepareEMF(em.getEntityManagerFactory());\r\n+\t\tem.getFetchPlan().setMaxFetchDepth(-1);\r\n+\t\t((FetchPlan) em.getFetchPlan()).addField(EmbeddedOwnerPC.class, \"complexEmbedded\");\r\n+\t\t((FetchPlan) em.getFetchPlan()).addField(RecursivelyEmbeddedPC.class, \"embedded\");\r\n+\r\n+\r\n+\r\n+//FIXME jthomas commenting this since setOptimistic is not available for userTx\r\n+//        pm.currentTransaction().setOptimistic(false);\r\n+        startTx(em);\r\n+\r\n+        try {\r\n+            //FIXME jthomas FetchPlan.LOCK_NONE??\r\n+            //((FetchPlan) em.getFetchPlan()).setReadLockLevel\r\n+            //    (FetchPlan.LOCK_NONE);\r\n+\r\n+            sql.clear();\r\n+            EmbeddedOwnerPC pc = (EmbeddedOwnerPC) em.getObjectId(oid);\r\n+            ComplexEmbeddedPC complex = pc.getComplexEmbedded();\r\n+            EmbeddedPC embedded = complex.getEmbedded();\r\n+\r\n+            assertNull(getStateManager(pc, em).getLock());\r\n+            assertNull(getStateManager(complex, em).getLock());\r\n+            assertNull(getStateManager(embedded, em).getLock());\r\n+            assertEquals(1, sql.size());\r\n+            sql.clear();\r\n+\r\n+            embedded.setStringField(embedded.getStringField() + \"bar\");\r\n+            // should not go to the db for another lock -- should have gotten\r\n+            // one along with the embedded field's lock\r\n+            assertTrue(sql.size() <= 1);\r\n+            assertNotNull(getStateManager(pc, em).getLock());\r\n+\r\n+            // embeddeds don't get locks at all.\r\n+            assertNull(getStateManager(complex, em).getLock());\r\n+            assertNull(getStateManager(embedded, em).getLock());\r\n+\r\n+            // owner is dirtied when embedded record is changed\r\n+            assertTrue(getStateManager(pc, em).isDirty());\r\n+            assertTrue(getStateManager(complex, em).isDirty());\r\n+            assertTrue(getStateManager(embedded, em).isDirty());\r\n+\r\n+            complex.setStringField(complex.getStringField() + \"bar\");\r\n+            // should not go to the db for another lock.\r\n+            assertTrue(sql.size() <= 1);\r\n+\r\n+            pc.setStringField(pc.getStringField() + \"bar\");\r\n+            // should not go to the db for another lock.\r\n+            assertTrue(sql.size() <= 1);\r\n+        } finally {\r\n+            rollbackTx(em);\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n+\tprivate Map getProps() {\r\n+\t\tMap props=new HashMap();\r\n+\t\tprops.put(\"openjpa.DataCache\", \"true\");\r\n+\t\tprops.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+\t\tprops.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n+\t\tprops.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n+\t\t//propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n+\t\treturn props;\r\n+\t}\r\n+\r\n+\r\n+}\r"},{"sha":"095be1caf82a41fd4384a535ee444801f9787c7d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,112 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+import java.sql.*;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import javax.persistence.Persistence;\r\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n+import org.apache.openjpa.kernel.StoreManager;\r\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+\r\n+public class TestIncrementalJDBCFlushes\r\n+        extends BaseJDBCTest {\r\n+    \r\n+    private EntityManagerFactory emf;\r\n+    \r\n+\r\n+//    private boolean  = true;\r\n+//    \r\n+    \r\n+    public TestIncrementalJDBCFlushes(String str) {\r\n+        super(str);\r\n+    }\r\n+    \r\n+    \r\n+    public void setUp() {\r\n+        emf = getEmf(getProps());\r\n+        \r\n+        EntityManager em =emf.createEntityManager();\r\n+       deleteAll(RuntimeTest1.class,em);\r\n+        \r\n+    }\r\n+    \r\n+    \r\n+    public void testFlushHappened() throws java.sql.SQLException{\r\n+        \r\n+        \r\n+        \r\n+        EntityManager em =emf.createEntityManager();\r\n+        startTx(em);\r\n+        RuntimeTest1 a = new RuntimeTest1(\"a-name\", 10);\r\n+        em.persist(a);\r\n+        em.flush();\r\n+        JDBCStore store = (JDBCStore) getStoreManager(em, true);\r\n+        Connection conn = store.getConnection();\r\n+        ClassMapping mapping = store.getConfiguration().\r\n+                getMappingRepositoryInstance().getMapping(RuntimeTest1.class,\r\n+                null, true);\r\n+        FieldMapping fm = mapping.getFieldMapping(\"stringField\");\r\n+        String tableName = store.getConfiguration().getDBDictionaryInstance().getFullName(fm.getTable(), false);\r\n+        String colName = fm.getColumns()[0].getName();\r\n+        Statement st = conn.createStatement();\r\n+        ResultSet rs = st.executeQuery(\"SELECT \" + colName + \" FROM \"\r\n+                + tableName + \" WHERE \" + colName + \" = 'a-name'\");\r\n+        int count = 0;\r\n+        while (rs.next())\r\n+            count++;\r\n+        assertEquals(1, count);\r\n+        rollbackTx(em);\r\n+        endEm(em);\r\n+        \r\n+        \r\n+    }\r\n+    \r\n+    private StoreManager getStoreManager(EntityManager em, boolean innermost) {\r\n+        DelegatingStoreManager mgr = JPAFacadeHelper.toBroker(em).getStoreManager();\r\n+        if (innermost)\r\n+            return mgr.getInnermostDelegate();\r\n+        return mgr;\r\n+    }\r\n+    \r\n+    private Map getProps() {\r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.DataCache\", \"true\");\r\n+        props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        props.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n+        props.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n+        //propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n+        return props;\r\n+    }\r\n+    \r\n+}\n\\ No newline at end of file"},{"sha":"03cdf9a1303a481cfd87e73bcac63c971803b4ab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,319 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+\r\n+\r\n+public class TestOperationOrderUpdateManager\r\n+    extends AbstractTestCase {\r\n+\r\n+\r\n+//\tprivate boolean  = true;//Boolean.valueOf(bool);\r\n+\r\n+\r\n+    private static boolean _mapped = false;\r\n+\r\n+    private EntityManagerFactory emf;\r\n+\r\n+    /*protected boolean skipTest() {\r\n+        if (!getName().startsWith(\"testAuto\"))\r\n+            return false;\r\n+\r\n+\t\temf = getEmf();\r\n+\r\n+\t\tJDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        return !dict.supportsAutoAssign;\r\n+    }\r\n+*/\r\n+    public TestOperationOrderUpdateManager(String name)\r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+\r\n+    private void insertTest(boolean autoAssign) {\r\n+        OpOrder oid = (autoAssign) ? insertAutoAssign() : insert();\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        OpOrder pc = (OpOrder) em.find(OpOrder.class,oid.getId());\r\n+        assertEquals(\"pc\", pc.getSecondary());\r\n+        assertEquals(\"pcsub\", pc.getSub());\r\n+        assertNotNull(pc.getRel());\r\n+        assertEquals(\"rel\", pc.getRel().getSecondary());\r\n+        assertEquals(2, pc.getRelList().size());\r\n+        assertTrue(((OpOrder) pc.getRelList().iterator().next()).\r\n+            getSecondary().startsWith(\"child\"));\r\n+        assertEquals(2, pc.getMappedRelList().size());\r\n+        assertTrue(((OpOrder) pc.getMappedRelList().iterator().next()).\r\n+            getSecondary().startsWith(\"mapped\"));\r\n+        assertEquals(2, pc.getInverseKeyRelList().size());\r\n+        assertTrue(((OpOrder) pc.getInverseKeyRelList().iterator().\r\n+            next()).getSecondary().startsWith(\"inverse\"));\r\n+        em.close();\r\n+    }\r\n+\r\n+\r\n+\r\n+    private OpOrder insert() {\r\n+        OpOrderPCSub pc = new OpOrderPCSub();\r\n+        pc.setSecondary(\"pc\");\r\n+        pc.setSub(\"pcsub\");\r\n+        OpOrderPCSub rel = new OpOrderPCSub();\r\n+        rel.setSecondary(\"rel\");\r\n+        pc.setRel(rel);\r\n+        for (int i = 0; i < 2; i++) {\r\n+            OpOrderPCSub child = new OpOrderPCSub();\r\n+            child.setSecondary(\"child\" + i);\r\n+            pc.getRelList().add(child);\r\n+\r\n+            OpOrderPCSub mapped = new OpOrderPCSub();\r\n+            mapped.setSecondary(\"mapped\" + i);\r\n+            mapped.setOwner(pc);\r\n+            pc.getMappedRelList().add(mapped);\r\n+\r\n+            OpOrderPCSub inverse = new OpOrderPCSub();\r\n+            inverse.setSecondary(\"inverse\" + i);\r\n+            pc.getInverseKeyRelList().add(inverse);\r\n+        }\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+        em.persist(rel);\r\n+        persistAll(em,pc.getInverseKeyRelList());\r\n+        em.persist(pc);\r\n+        endTx(em);\r\n+        OpOrder oid = em.find(OpOrder.class,pc.getId());\r\n+        //em.getObjectId(pc);\r\n+        em.close();\r\n+        return oid;\r\n+    }\r\n+\r\n+    private OpOrder insertAutoAssign() {\r\n+        AutoIncrementOpOrderPCSub pc = new AutoIncrementOpOrderPCSub();\r\n+        pc.setSecondary(\"pc\");\r\n+        pc.setSub(\"pcsub\");\r\n+        AutoIncrementOpOrderPCSub rel = new AutoIncrementOpOrderPCSub();\r\n+        rel.setSecondary(\"rel\");\r\n+        pc.setRel(rel);\r\n+        for (int i = 0; i < 2; i++) {\r\n+            AutoIncrementOpOrderPCSub child = new AutoIncrementOpOrderPCSub();\r\n+            child.setSecondary(\"child\" + i);\r\n+            pc.getRelList().add(child);\r\n+\r\n+            AutoIncrementOpOrderPCSub mapped = new AutoIncrementOpOrderPCSub();\r\n+            mapped.setSecondary(\"mapped\" + i);\r\n+            mapped.setOwner(pc);\r\n+            pc.getMappedRelList().add(mapped);\r\n+\r\n+            AutoIncrementOpOrderPCSub inverse = new AutoIncrementOpOrderPCSub();\r\n+            inverse.setSecondary(\"inverse\" + i);\r\n+            pc.getInverseKeyRelList().add(inverse);\r\n+        }\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        em.persist(rel);\r\n+        persistAll(em,pc.getInverseKeyRelList());\r\n+        em.persist(pc);\r\n+        endTx(em);\r\n+        OpOrder oid = em.find(AutoIncrementOpOrderPCSub.class,pc.getId());\r\n+        em.close();\r\n+        return oid;\r\n+    }\r\n+\r\n+\r\n+    private void insertCircularConstraintTest(boolean autoAssign) {\r\n+        OpOrder oid = (autoAssign) ? insertCircularAutoAssign()\r\n+            : insertCircular();\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        OpOrder pc1 = (OpOrder) em.find(OpOrder.class,oid.getId());\r\n+        assertEquals(\"pc1\", pc1.getSecondary());\r\n+        assertNotNull(pc1.getRel());\r\n+        assertEquals(\"pc2\", pc1.getRel().getSecondary());\r\n+        assertNotNull(pc1.getRel().getRel());\r\n+        assertEquals(pc1, pc1.getRel().getRel());\r\n+        em.close();\r\n+    }\r\n+\r\n+    private OpOrder insertCircular() {\r\n+        OpOrderPCSub pc1 = new OpOrderPCSub();\r\n+        pc1.setSecondary(\"pc1\");\r\n+        pc1.setSub(\"pcsub\");\r\n+        OpOrderPCSub pc2 = new OpOrderPCSub();\r\n+        pc2.setSecondary(\"pc2\");\r\n+        pc1.setRel(pc2);\r\n+        pc2.setRel(pc1);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        em.persist(pc1);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        OpOrder oid = em.find(OpOrder.class,pc1.getId());\r\n+        em.close();\r\n+        return oid;\r\n+    }\r\n+\r\n+    private OpOrder insertCircularAutoAssign() {\r\n+        AutoIncrementOpOrderPCSub pc1 = new AutoIncrementOpOrderPCSub();\r\n+        pc1.setSecondary(\"pc1\");\r\n+        pc1.setSub(\"pcsub\");\r\n+        AutoIncrementOpOrderPCSub pc2 = new AutoIncrementOpOrderPCSub();\r\n+        pc2.setSecondary(\"pc2\");\r\n+        pc1.setRel(pc2);\r\n+        pc2.setRel(pc1);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        em.persist(pc1);\r\n+        em.persist(pc2);\r\n+        endTx(em);\r\n+        OpOrder oid = em.find(OpOrder.class,pc1.getId());\r\n+        em.close();\r\n+        return oid;\r\n+    }\r\n+\r\n+\r\n+    private void deleteCircularTest(boolean autoAssign) {\r\n+        OpOrder oid = (autoAssign) ? insertCircularAutoAssign()\r\n+            : insertCircular();\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        OpOrder pc1 = (OpOrder) em.find(OpOrder.class,oid.getId());\r\n+        em.remove(pc1.getRel());\r\n+        em.remove(pc1);\r\n+        endTx(em);\r\n+        em.close();\r\n+\r\n+/*        pm = _pmf.getPersistenceManager();\r\n+        if (autoAssign)\r\n+            assertEquals(0, ((KodoExtent) pm.getExtent\r\n+                (AutoIncrementOpOrderPCSub.class, true)).list().size());\r\n+        else\r\n+            assertEquals(0, ((KodoExtent) pm.getExtent(OpOrderPC.class,\r\n+                true)).list().size());\r\n+        pm.close();\r\n+*/\r\n+    }\r\n+\r\n+    private void deleteTest(boolean autoAssign) {\r\n+        OpOrder oid = (autoAssign) ? insertAutoAssign() : insert();\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        OpOrder pc = (OpOrder) em.find(OpOrder.class,oid.getId());\r\n+        removeAll(em,pc.getMappedRelList());\r\n+        removeAll(em,pc.getInverseKeyRelList());\r\n+        removeAll(em,pc.getRelList());\r\n+        em.remove(pc.getRel());\r\n+        em.remove(pc);\r\n+        endTx(em);\r\n+        em.close();\r\n+/*\r\n+        pm = _pmf.getPersistenceManager();\r\n+        if (autoAssign)\r\n+            assertEquals(0, ((KodoExtent) pm.getExtent\r\n+                (AutoIncrementOpOrderPCSub.class, true)).list().size());\r\n+        else\r\n+            assertEquals(0, ((KodoExtent) pm.getExtent(OpOrderPC.class,\r\n+                true)).list().size());\r\n+        pm.close();\r\n+*/\r\n+    }\r\n+\r\n+\r\n+    public void testInsert() {\r\n+        insertTest(false);\r\n+    }\r\n+\r\n+    public void testAutoAssignInsert() {\r\n+        insertTest(true);\r\n+    }\r\n+\r\n+\r\n+    public void testDeleteCircular() {\r\n+        deleteCircularTest(false);\r\n+    }\r\n+\r\n+    public void testAutoAssignDeleteCircular() {\r\n+        deleteCircularTest(true);\r\n+    }\r\n+\r\n+    public void testDelete() {\r\n+        deleteTest(false);\r\n+    }\r\n+\r\n+    public void testAutoAssignDelete() {\r\n+        deleteTest(true);\r\n+    }\r\n+\r\n+\r\n+    public void testInsertCircularConstraint() {\r\n+        insertCircularConstraintTest(false);\r\n+    }\r\n+\r\n+    public void testAutoAssignInsertCircularConstraint() {\r\n+        insertCircularConstraintTest(true);\r\n+    }\r\n+\r\n+\r\n+\r\n+    private void persistAll(EntityManager em, List list) {\r\n+\r\n+\t\tIterator i = list.iterator();\r\n+\t\twhile(i.hasNext()) {\r\n+\t\t\tObject o = i.next();\r\n+\t\t\tem.persist(o);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\r\n+\tprivate void removeAll(EntityManager em, List list) {\r\n+\r\n+\t\tIterator i = list.iterator();\r\n+\t\twhile(i.hasNext()) {\r\n+\t\t\tObject o = i.next();\r\n+\t\t\tem.remove(o);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r"},{"sha":"e6186ab400524230c8556c219ca9467b39192534","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","status":"added","additions":656,"deletions":0,"changes":656,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,656 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.jdbc.meta.*;\r\n+import org.apache.openjpa.jdbc.sql.*;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+//import org.apache.openjpa.kernel.Extent;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+\r\n+/**\r\n+ * <p>Test large result, to-many eager paging.</p>\r\n+ *\r\n+ */\r\n+public class TestPagingResultObjectProvider\r\n+    extends TestSQLListenerTestCase {\r\n+\r\n+\tprivate OpenJPAEntityManagerFactory emf;\r\n+\r\n+\tpublic TestPagingResultObjectProvider(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+    public void setUp() throws Exception{\r\n+\t\tsuper.setUp();\r\n+\t\temf = getEmf(getProps());\r\n+    \tEntityManager em =currentEntityManager();\r\n+    }\r\n+\r\n+\r\n+\r\n+    public boolean skipTest() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf)).getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.joinSyntax == Join.SYNTAX_TRADITIONAL)\r\n+            return true;\r\n+\r\n+        // skip test case that requires subselect for DBs that don't support it\r\n+        if (\"testPagingRangeQuery\".equals(getName())\r\n+            || \"testNonPagingRangeQuery\".equals(getName())) {\r\n+            if (!conf.getDBDictionaryInstance().supportsSubselect)\r\n+                return true;\r\n+        }\r\n+\r\n+        return false;\r\n+    }\r\n+\r\n+\r\n+    public void testNonPagingExtent() {\r\n+        initializePagingPCs();\r\n+\r\n+        EntityManager em= currentEntityManager();\r\n+        //EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        Extent extent = kem.createExtent(PagingPC.class, true);\r\n+\r\n+        extent.getFetchPlan().setFetchBatchSize(0);\r\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n+\r\n+        // if we only access the rel field, we should only have used 1 select\r\n+        List list = extent.list();\r\n+        assertEquals(4, list.size());\r\n+        assertRel(list, 4);\r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        sql.clear();\r\n+\r\n+        // now accessing the rels collection should add selects\r\n+        assertRels(list, 4);\r\n+        assertEquals(sql.toString(), 4, sql.size());\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testNonPagingQuery()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n+\r\n+\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n+\r\n+        //OpenJPAQuery q = kem.createQuery(PagingPC.class.getSimpleName(), \"intField >= 0\");\r\n+        OpenJPAQuery q = kem.createQuery(theQuery);\r\n+\r\n+        q.getFetchPlan().setFetchBatchSize(0);\r\n+        q.getFetchPlan().addFetchGroups(\"rel\");\r\n+\r\n+        // if we only access the rel field, we should only have used two\r\n+        // selects: one for the query and one for the size\r\n+        List list = (List) q.getResultList();\r\n+        assertEquals(4, list.size());\r\n+        assertRel(list, 4);\r\n+        assertEquals(sql.toString(), 2, sql.size());\r\n+        assertTrue((String) sql.get(0),\r\n+            matches(\" >= \", (String) sql.get(0)));\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" COUNT\", (String) sql.get(1)));\r\n+        sql.clear();\r\n+\r\n+        // now accessing the rels collection should add selects\r\n+        assertRels(list, 4);\r\n+        assertEquals(sql.toString(), 4, sql.size());\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * Check that the rel field was retrieved correctly.\r\n+     */\r\n+   private void assertRel(List pcs, int size) {\r\n+        PagingPC pc;\r\n+        for (int i = 0; i < size; i++) {\r\n+            pc = (PagingPC) pcs.get(i);\r\n+            assertNotNull(pc.getRel());\r\n+            assertEquals(pc.getIntField() + 1, pc.getRel().getIntField());\r\n+        }\r\n+        try {\r\n+            pcs.get(size + 1);\r\n+            fail(\"Retrieved past end of list\");\r\n+        } catch (Exception e) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Check that the rels field was retrieved correctly.\r\n+     */\r\n+    private void assertRels(List pcs, int size) {\r\n+        PagingPC pc;\r\n+        for (int i = 0; i < size; i++) {\r\n+            pc = (PagingPC) pcs.get(i);\r\n+            assertEquals(2, pc.getRels().size());\r\n+            assertEquals(pc.getIntField() + 1, ((PagingHelperPC)\r\n+                pc.getRels().get(0)).getIntField());\r\n+            assertEquals(pc.getIntField() + 2, ((PagingHelperPC)\r\n+                pc.getRels().get(1)).getIntField());\r\n+        }\r\n+        try {\r\n+            pcs.get(size + 1);\r\n+            fail(\"Retrieved past end of list\");\r\n+        } catch (Exception e) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testPagingExtent()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        Extent extent = kem.createExtent(PagingPC.class, true);\r\n+        extent.getFetchPlan().setFetchBatchSize(0);\r\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n+        extent.getFetchPlan().addFetchGroup(\"rels\");\r\n+\r\n+\r\n+        // we should get two selects: the initial select and the IN eager stmnt\r\n+        List list = extent.list();\r\n+        assertEquals(4, list.size());\r\n+        assertRel(list, 4);\r\n+        assertRels(list, 4);\r\n+        assertEquals(sql.toString(), 2, sql.size());\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" IN \", (String) sql.get(1)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testPagingQuery()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+\r\n+\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n+        OpenJPAQuery q = kem.createQuery(theQuery);\r\n+        q.getFetchPlan().setFetchBatchSize(0);\r\n+        q.getFetchPlan().addFetchGroups(\"rel\");\r\n+        q.getFetchPlan().addFetchGroups(\"rels\");\r\n+\r\n+\r\n+        // we should get three selects: the initial select, the COUNT for the\r\n+        // size, and the IN eager stmnt\r\n+        List list = (List) q.getResultList();\r\n+        assertEquals(4, list.size());\r\n+        assertRel(list, 4);\r\n+        assertRels(list, 4);\r\n+        assertEquals(sql.toString(), 3, sql.size());\r\n+        assertTrue((String) sql.get(0),\r\n+            matches(\" >= \", (String) sql.get(0)));\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" COUNT\", (String) sql.get(1)));\r\n+        assertTrue((String) sql.get(2),\r\n+            matches(\" IN \", (String) sql.get(2)));\r\n+        assertFalse((String) sql.get(2),\r\n+            matches(\" >= \", (String) sql.get(2)));\r\n+        sql.clear();\r\n+\r\n+        // if we execute and traverse a result before getting the size, we\r\n+        // should only get 2 selects, since the caching of the page should\r\n+        // reach the end of the list and therefore know the total size\r\n+        list = (List) q.getResultList();\r\n+        list.get(0);\r\n+        assertEquals(4, list.size());\r\n+        assertRel(list, 4);\r\n+        assertRels(list, 4);\r\n+        assertEquals(sql.toString(), 2, sql.size());\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" IN \", (String) sql.get(1)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testPagingAppIdExtent()\r\n+        throws Exception {\r\n+        initializePagingAppIdPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        Extent extent = kem.createExtent(PagingAppIdPC.class, true);\r\n+\r\n+        extent.getFetchPlan().setFetchBatchSize(0);\r\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n+        extent.getFetchPlan().addFetchGroup(\"rels\");\r\n+\r\n+        // we should get two selects: the initial select and the IN eager stmnt\r\n+        List list = extent.list();\r\n+        assertEquals(4, list.size());\r\n+        assertAppIdRel(list, 4);\r\n+        assertAppIdRels(list, 4);\r\n+        assertEquals(sql.toString(), 2, sql.size());\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" OR \", (String) sql.get(1)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testPagingAppIdQuery()\r\n+        throws Exception {\r\n+        initializePagingAppIdPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n+\r\n+\t\tString theQuery=\"select a FROM \"+PagingAppIdPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n+        OpenJPAQuery q = kem.createQuery(theQuery);\r\n+\r\n+\r\n+        q.getFetchPlan().setFetchBatchSize(0);\r\n+        q.getFetchPlan().addFetchGroups(\"rel\");\r\n+        q.getFetchPlan().addFetchGroups(\"rels\");\r\n+\r\n+        // we should get three selects: the initial select, the COUNT for the\r\n+        // size, and the OR eager stmnt\r\n+        List list = (List) q.getResultList();\r\n+        assertEquals(4, list.size());\r\n+        assertAppIdRel(list, 4);\r\n+        assertAppIdRels(list, 4);\r\n+        assertEquals(sql.toString(), 3, sql.size());\r\n+        assertTrue((String) sql.get(0),\r\n+            matches(\" >= \", (String) sql.get(0)));\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" COUNT\", (String) sql.get(1)));\r\n+        assertTrue((String) sql.get(2),\r\n+            matches(\" OR \", (String) sql.get(2)));\r\n+        assertFalse((String) sql.get(2),\r\n+            matches(\" >= \", (String) sql.get(2)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * Check that the rel field was retrieved correctly.\r\n+     */\r\n+    private void assertAppIdRel(List pcs, int size) {\r\n+        PagingAppIdPC pc;\r\n+        for (int i = 0; i < size; i++) {\r\n+            pc = (PagingAppIdPC) pcs.get(i);\r\n+            assertNotNull(pc.getRel());\r\n+            assertEquals(pc.getIntField() + 1, pc.getRel().getIntField());\r\n+        }\r\n+        try {\r\n+            pcs.get(size + 1);\r\n+            fail(\"Retrieved past end of list\");\r\n+        } catch (Exception e) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Check that the rels field was retrieved correctly.\r\n+     */\r\n+    private void assertAppIdRels(List pcs, int size) {\r\n+        PagingAppIdPC pc;\r\n+        for (int i = 0; i < size; i++) {\r\n+            pc = (PagingAppIdPC) pcs.get(i);\r\n+            assertEquals(2, pc.getRels().size());\r\n+            assertEquals(pc.getIntField() + 1, ((PagingHelperPC)\r\n+                pc.getRels().get(0)).getIntField());\r\n+            assertEquals(pc.getIntField() + 2, ((PagingHelperPC)\r\n+                pc.getRels().get(1)).getIntField());\r\n+        }\r\n+        try {\r\n+            pcs.get(size + 1);\r\n+            fail(\"Retrieved past end of list\");\r\n+        } catch (Exception e) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testMultiPageExtent()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n+        Extent extent = kem.createExtent(PagingPC.class, true);\r\n+\r\n+        extent.getFetchPlan().setFetchBatchSize(2);    // 2 pages of 2\r\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n+        extent.getFetchPlan().addFetchGroup(\"rels\");\r\n+\r\n+        // we should get two selects: the initial select and the IN eager stmnt\r\n+        List list = extent.list();\r\n+        assertEquals(list.toString(), 4, list.size());\r\n+        assertRel(list, 4);\r\n+        assertRels(list, 4);\r\n+        assertEquals(sql.toString(), 3, sql.size());\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" IN \", (String) sql.get(1)));\r\n+        assertTrue((String) sql.get(2),\r\n+            matches(\" IN \", (String) sql.get(2)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMultiPageQuery()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n+\r\n+\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n+        OpenJPAQuery q = kem.createQuery(theQuery);\r\n+\r\n+\r\n+\t\t//FIXME jthomas commenting till we find how ordering can be done\r\n+        //q.setOrdering(\"intField ascending\");\r\n+        q.getFetchPlan().setFetchBatchSize(2);    // 2 pages of 2\r\n+        q.getFetchPlan().addFetchGroup(\"rel\");\r\n+        q.getFetchPlan().addFetchGroup(\"rels\");\r\n+\r\n+        // we should get four selects: the initial select, the count, and the\r\n+        // two IN eager stmnts\r\n+        List list = (List) q.getResultList();\r\n+        assertEquals(list.toString(), 4, list.size());\r\n+        // so we don't have to re-execute to move back to beginning\r\n+        list = new ArrayList(list);\r\n+        assertRel(list, 4);\r\n+        assertRels(list, 4);\r\n+\r\n+        assertEquals(sql.toString(), 4, sql.size());\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" COUNT\", (String) sql.get(1)));\r\n+        assertTrue((String) sql.get(2),\r\n+            matches(\" IN \", (String) sql.get(2)));\r\n+        assertTrue((String) sql.get(3),\r\n+            matches(\" IN \", (String) sql.get(3)));\r\n+        sql.clear();\r\n+\r\n+        // if we access a result object on the second page, we should get only\r\n+        // three selects: the initial select, the count, and the IN eager stmnt\r\n+        // for page 2\r\n+        list = (List) q.getResultList();\r\n+        assertEquals(list.toString(), 4, list.size());\r\n+        PagingPC pc = (PagingPC) list.get(2);\r\n+        assertEquals(2, pc.getIntField());\r\n+        assertEquals(sql.toString(), 3, sql.size());\r\n+        assertTrue((String) sql.get(2),\r\n+            matches(\" IN\", (String) sql.get(2)));\r\n+\r\n+        assertRel(list, 4);\r\n+        assertRels(list, 4);\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testLastPageQuery()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n+\r\n+\t\tString theQuery=\"select a FROM \"+PagingPC.class.getSimpleName()+\" a where a.intField >= 0\";\r\n+        OpenJPAQuery q = kem.createQuery(theQuery);\r\n+\r\n+\r\n+        //FIXME jthomas commenting till we find how ordering can be done\r\n+        //q.setOrdering(\"intField ascending\");\r\n+        q.getFetchPlan().setFetchBatchSize(3);    // 1 on page 2\r\n+        q.getFetchPlan().addFetchGroups(\"rel\");\r\n+        q.getFetchPlan().addFetchGroups(\"rels\");\r\n+\r\n+        // if we access a result object on the second page, we should get only\r\n+        // two selects: the initial select and the eager stmnt for page\r\n+        List list = (List) q.getResultList();\r\n+        PagingPC pc = (PagingPC) list.get(3);\r\n+        assertEquals(3, pc.getIntField());\r\n+        assertEquals(list.toString(), 4, list.size());\r\n+        assertEquals(sql.toString(), 2, sql.size());\r\n+        // for single result, should use standard select, not IN\r\n+        assertFalse((String) sql.get(1),\r\n+            matches(\" IN \", (String) sql.get(1)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testSingleResultPage()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+\t    EntityManager em =currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        Extent extent = kem.createExtent(PagingPC.class, true);\r\n+        extent.getFetchPlan().setFetchBatchSize(3);    // 1 on page 2\r\n+        extent.getFetchPlan().addFetchGroup(\"rel\");\r\n+        extent.getFetchPlan().addFetchGroup(\"rels\");\r\n+\r\n+        // we should get two selects: the initial select and the IN eager stmnt\r\n+        List list = extent.list();\r\n+        assertEquals(list.toString(), 4, list.size());\r\n+        assertRel(list, 4);\r\n+        assertRels(list, 4);\r\n+        assertEquals(sql.toString(), 3, sql.size());\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" IN \", (String) sql.get(1)));\r\n+        assertFalse((String) sql.get(2),\r\n+            matches(\" IN \", (String) sql.get(2)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+  /*  public void testNonPagingRangeQuery()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        Query q = em.newQuery(PagingPC.class, \"intField >= 0\");\r\n+\r\n+        //FIXME jthomas commenting till we find how ordering can be done\r\n+        //q.setOrdering(\"intField ascending\");\r\n+        q.setRange(1, 3);\r\n+        q.getFetchPlan().setFetchSize(0);\r\n+        q.getFetchPlan().addGroup(\"rel\");\r\n+\r\n+        // if we only access the rel field, we should only have used one\r\n+        // select; there won't be a size select since the range will be\r\n+        // greedily consumed as it's so small\r\n+        List list = (List) q.execute();\r\n+        assertEquals(2, list.size());\r\n+        assertRel(list, 2);\r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertTrue((String) sql.get(0),\r\n+            matches(\" >= \", (String) sql.get(0)));\r\n+        sql.clear();\r\n+\r\n+        // now accessing the rels collection should add selects\r\n+        assertRels(list, 2);\r\n+        assertEquals(sql.toString(), 2, sql.size());\r\n+        sql.clear();\r\n+\r\n+        // now execute with a big range and small fetch size and bigger range\r\n+        // and this time we should get a select for the size too\r\n+        q.getFetchPlan().setFetchSize(2);\r\n+        q.setRange(1, 4);\r\n+        list = (List) q.execute();\r\n+        assertEquals(3, list.size());\r\n+        // so we don't have to re-execute to move back to beginning\r\n+        list = new ArrayList(list);\r\n+        assertRel(list, 3);\r\n+        assertEquals(sql.toString(), 2, sql.size());\r\n+        assertTrue((String) sql.get(0),\r\n+            matches(\" >= \", (String) sql.get(0)));\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" COUNT\", (String) sql.get(1)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+/*\r\n+    public void testPagingRangeQuery()\r\n+        throws Exception {\r\n+        initializePagingPCs();\r\n+\r\n+        EntityManager em =currentEntityManager();\r\n+        Query q = em.newQuery(PagingPC.class, \"intField >= 0\");\r\n+\r\n+        //FIXME jthomas commenting till we find how ordering can be done\r\n+        //q.setOrdering(\"intField ascending\");\r\n+        q.setRange(1, 3);\r\n+        q.getFetchPlan().setFetchSize(0);\r\n+        q.getFetchPlan().addGroup(\"rel\");\r\n+        q.getFetchPlan().addGroup(\"rels\");\r\n+\r\n+        // expect two selects: the primary select and the IN select; no size\r\n+        // select expected because the range will be consumed greedily since\r\n+        // it's so small\r\n+        List list = (List) q.execute();\r\n+        assertEquals(2, list.size());\r\n+        assertRel(list, 2);\r\n+        assertRels(list, 2);\r\n+        assertEquals(sql.toString(), 2, sql.size());\r\n+        assertTrue((String) sql.get(0),\r\n+            matches(\" >= \", (String) sql.get(0)));\r\n+        assertTrue(sql + \"\",\r\n+            matches(\" IN \", (String) sql.get(1)));\r\n+        sql.clear();\r\n+\r\n+        // now execute with a big range and small fetch size and bigger range\r\n+        // and this time we should get a select for the size too\r\n+        q.getFetchPlan().setFetchSize(2);\r\n+        q.setRange(1, 4);\r\n+        list = (List) q.execute();\r\n+        assertEquals(3, list.size());\r\n+        // so we don't have to re-execute to move back to beginning\r\n+        list = new ArrayList(list);\r\n+        assertRel(list, 3);\r\n+        assertRels(list, 3);\r\n+        assertEquals(sql.toString(), 4, sql.size());\r\n+        assertTrue((String) sql.get(0),\r\n+            matches(\" >= \", (String) sql.get(0)));\r\n+        assertTrue((String) sql.get(1),\r\n+            matches(\" COUNT\", (String) sql.get(1)));\r\n+        assertTrue((String) sql.get(2),\r\n+            matches(\" IN \", (String) sql.get(2)));\r\n+        assertFalse((String) sql.get(3),\r\n+            matches(\" IN \", (String) sql.get(3)));\r\n+        sql.clear();\r\n+\r\n+        em.close();\r\n+    }\r\n+*/\r\n+    private void initializePagingPCs() {\r\n+        EntityManager em =currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+       deleteAll(PagingPC.class,em);\r\n+       deleteAll(PagingHelperPC.class,em);\r\n+\r\n+        endTx(em);\r\n+\r\n+        startTx(em);\r\n+        PagingPC pc;\r\n+        PagingHelperPC rel;\r\n+        for (int i = 0; i < 4; i++) {\r\n+            pc = new PagingPC();\r\n+            pc.setIntField(i);\r\n+            rel = new PagingHelperPC();\r\n+            rel.setIntField(i + 1);\r\n+            pc.setRel(rel);\r\n+            pc.getRels().add(rel);\r\n+            rel = new PagingHelperPC();\r\n+            rel.setIntField(i + 2);\r\n+            pc.getRels().add(rel);\r\n+            em.persist(pc);\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        em.close();\r\n+        sql.clear();\r\n+    }\r\n+\r\n+    private void initializePagingAppIdPCs() {\r\n+        EntityManager em =currentEntityManager();\r\n+        startTx(em);\r\n+       deleteAll(PagingAppIdPC.class,em);\r\n+       deleteAll(PagingHelperPC.class,em);\r\n+        startTx(em);\r\n+\r\n+        startTx(em);\r\n+        PagingAppIdPC pc;\r\n+        PagingHelperPC rel;\r\n+        for (int i = 0; i < 4; i++) {\r\n+            pc = new PagingAppIdPC();\r\n+            pc.setIntField(i);\r\n+            pc.setLongField(i + 100);\r\n+            rel = new PagingHelperPC();\r\n+            rel.setIntField(i + 1);\r\n+            pc.setRel(rel);\r\n+            pc.getRels().add(rel);\r\n+            rel = new PagingHelperPC();\r\n+            rel.setIntField(i + 2);\r\n+            pc.getRels().add(rel);\r\n+            em.persist(pc);\r\n+        }\r\n+\r\n+        endTx(em);\r\n+     \tem.close();\r\n+        sql.clear ();\r\n+\t}\r\n+\r\n+\tprivate Map getProps() {\r\n+\t\tMap props=new HashMap();\r\n+\t\tprops.put(\"openjpa.DataCache\", \"true\");\r\n+\t\tprops.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+\t\tprops.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n+\t\tprops.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n+\t\t//propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n+\t\treturn props;\r\n+\t}\r\n+\r\n+\r\n+}\r"},{"sha":"a92a4a6e1a227f5ac4c7de8f95c1d61a0785becf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,180 @@\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+import java.sql.*;\r\n+import java.util.*;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n+import org.apache.openjpa.jdbc.sql.ResultSetResult;\r\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n+import org.apache.openjpa.jdbc.kernel.GenericResultObjectProvider;\r\n+import org.apache.openjpa.lib.rop.ResultList;\r\n+import org.apache.openjpa.lib.rop.EagerResultList;\r\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n+import org.apache.openjpa.kernel.AbstractPCResultObjectProvider;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+/**\r\n+ *\r\n+ */\r\n+\r\n+\r\n+public class TestRawSQL extends BaseJDBCTest {\r\n+    \r\n+    /** Creates a new instance of TestRawSQL */\r\n+    private Object[] _oids = new Object[3];\r\n+    private String[] _strings = new String[]{ \"a\", \"b\", \"c\" };\r\n+    private int[] _ints = new int[]{ 1, 2, 3 };\r\n+\r\n+    public TestRawSQL(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+       deleteAll(RawSQL.class);\r\n+        EntityManager em = currentEntityManager();\r\n+        Broker broker = JPAFacadeHelper.toBroker(em);\r\n+\r\n+        broker.begin();\r\n+        RawSQL raw;\r\n+        for (int i = 0; i < _oids.length; i++) {\r\n+            raw = new RawSQL(_strings[i], _ints[i]);\r\n+            broker.persist(raw, null);\r\n+            _oids[i] = broker.getUserObject(raw);\r\n+        }\r\n+        broker.commit();\r\n+        broker.close();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testLoadWithResult()\r\n+        throws Exception {\r\n+        \r\n+        EntityManager em = currentEntityManager();\r\n+        Broker broker = JPAFacadeHelper.toBroker(em);\r\n+       \r\n+        JDBCStore store = (JDBCStore)broker.getStoreManager();\r\n+\r\n+        Connection conn = store.getConnection();\r\n+        Statement stmnt = conn.createStatement();\r\n+        ResultSet rs = stmnt.executeQuery(\"SELECT * FROM RAWSQL \"\r\n+        + \"ORDER BY INTFIELD\");\r\n+        ResultSetResult res = new ResultSetResult(rs,\r\n+        store.getConfiguration().getDBDictionaryInstance());\r\n+        ResultObjectProvider rop = new GenericResultObjectProvider\r\n+        (RawSQL.class, store, null, res);\r\n+        ResultList rl = new EagerResultList(rop);\r\n+        check(rl, broker);\r\n+        rl.close();\r\n+        broker.close();\r\n+        em.close();\r\n+    }\r\n+\r\n+        public void testLoadWithPCROP()\r\n+        throws Exception {\r\n+            \r\n+        EntityManager em = currentEntityManager();    \r\n+        Broker broker = JPAFacadeHelper.toBroker(em);\r\n+        ResultObjectProvider rop = new AbstractPCResultObjectProvider(broker) {\r\n+            private int _row = -1;\r\n+\r\n+            public boolean supportsRandomAccess() {\r\n+                return true;\r\n+            }\r\n+\r\n+            public boolean next() {\r\n+                return ++_row < _oids.length;\r\n+            }\r\n+\r\n+            public boolean absolute(int pos) {\r\n+                _row = pos;\r\n+                return _row < _oids.length;\r\n+            }\r\n+\r\n+            public int size() {\r\n+                return _oids.length;\r\n+            }\r\n+\r\n+            public void close() {\r\n+            }\r\n+\r\n+            public void handleCheckedException(Exception e) {\r\n+                throw new RuntimeException(e.toString());\r\n+            }\r\n+\r\n+            protected Object getObjectId(ClassMetaData meta) {\r\n+                return _oids[_row];\r\n+            }\r\n+\r\n+            protected Class getPCType() {\r\n+                return RawSQL.class;\r\n+            }\r\n+\r\n+            protected void load(OpenJPAStateManager sm, \r\n+                FetchConfiguration fetch) {\r\n+                ClassMetaData meta = sm.getMetaData();\r\n+                sm.storeStringField(meta.getField(\"stringField\").getIndex(),\r\n+                    _strings[_row]);\r\n+                sm.storeIntField(meta.getField(\"intField\").getIndex(),\r\n+                    _ints[_row]);\r\n+\r\n+                // note that we're not loading version info here, so the system\r\n+                // will go out and get it after this intial load; kinda neat\r\n+            }\r\n+        };\r\n+        ResultList rl = new EagerResultList(rop);\r\n+        check(rl, broker);\r\n+        rl.close();\r\n+        broker.close();\r\n+    }\r\n+\r\n+    \r\n+    \r\n+    private void check(ResultList rl, Broker broker) {\r\n+        RawSQL raw;\r\n+        int i = 0;\r\n+        for (Iterator itr = rl.iterator(); itr.hasNext(); i++) {\r\n+            raw = (RawSQL) itr.next();\r\n+            assertTrue(broker.getStateManager(raw).getLoaded().get(0));\r\n+            assertTrue(broker.getStateManager(raw).getLoaded().get(1));\r\n+            if (i < _oids.length) {\r\n+                assertEquals(_strings[i], raw.getStringField());\r\n+                assertEquals(_ints[i], raw.getIntField());\r\n+            }\r\n+        }\r\n+        assertEquals(_oids.length, i);\r\n+        assertEquals(_oids.length, rl.size());\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"a49f8064378e3a6211b98ce057936425fac2cdf3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,176 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+import java.util.*;\r\n+\r\n+\r\n+import org.apache.openjpa.kernel.*;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.lib.jdbc.*;\r\n+\r\n+/**\r\n+ * Test case that provides access to all the SQL that is executed.\r\n+ *\r\n+ */\r\n+public abstract class TestSQLListenerTestCase\r\n+    extends BaseJDBCTest {\r\n+\r\n+    protected static final Collection brokers = new HashSet();\r\n+    public static List sql = new ArrayList();\r\n+\r\n+    public TestSQLListenerTestCase() {\r\n+    }\r\n+\r\n+    public TestSQLListenerTestCase(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        super.setUp();\r\n+        setUpTestCase();\r\n+        sql.clear();\r\n+    }\r\n+\r\n+    /**\r\n+     * Override for setUp() behavior.\r\n+     */\r\n+    public void setUpTestCase() {\r\n+    }\r\n+\r\n+    public final void tearDown()\r\n+        throws Exception {\r\n+        super.tearDown();\r\n+        tearDownTestCase();\r\n+        sql.clear();\r\n+    }\r\n+\r\n+    /**\r\n+     * Override for tearDown() behavior.\r\n+     */\r\n+    public void tearDownTestCase() {\r\n+    }\r\n+\r\n+    /**\r\n+     * Confirm that the specified SQL has been executed.\r\n+     *\r\n+     * @param sqlExp the SQL expression. E.g., \"SELECT FOO .*\"\r\n+     */\r\n+    public void assertSQL(String sqlExp)\r\n+        throws Exception {\r\n+        for (Iterator i = sql.iterator(); i.hasNext();) {\r\n+            String statement = (String) i.next();\r\n+            if (matches(sqlExp, statement))\r\n+                return;\r\n+        }\r\n+\r\n+        fail(\"Expected regular expression <\" + sqlExp + \"> to have\"\r\n+            + \" existed in SQL statements: \" + sql);\r\n+    }\r\n+\r\n+    /**\r\n+     * Confirm that the specified SQL has not been executed.\r\n+     *\r\n+     * @param sqlExp the SQL expression. E.g., \"SELECT BADCOLUMN .*\"\r\n+     */\r\n+    public void assertNotSQL(String sqlExp)\r\n+        throws Exception {\r\n+        boolean failed = false;\r\n+\r\n+        for (Iterator i = sql.iterator(); i.hasNext();) {\r\n+            String statement = (String) i.next();\r\n+            if (matches(sqlExp, statement))\r\n+                failed = true;\r\n+        }\r\n+\r\n+        if (failed)\r\n+            fail(\"Regular expression <\" + sqlExp + \">\"\r\n+                + \" should not have been executed in SQL statements: \" + sql);\r\n+    }\r\n+/*\r\n+\r\n+    public KodoPersistenceManager getPM() {\r\n+        KodoPersistenceManager pm = (KodoPersistenceManager) getPMFactory().\r\n+            getPersistenceManager();\r\n+        brokers.add(KodoJDOHelper.toBroker(pm));\r\n+        return pm;\r\n+    }\r\n+\r\n+    public KodoPersistenceManagerFactory getPMFactory() {\r\n+        return getPMFactory(null);\r\n+    }\r\n+    public BrokerFactory getBrokerFactory(String[] props) {\r\n+        String[] builtin = new String[]{\r\n+            \"openjpa.jdbc.JDBCListeners\", Listener.class.getName()\r\n+        };\r\n+\r\n+        if (props == null)\r\n+            props = builtin;\r\n+        else {\r\n+            String[] tmp = new String[props.length + builtin.length];\r\n+            System.arraycopy(props, 0, tmp, 0, props.length);\r\n+            System.arraycopy(builtin, 0, tmp, props.length, builtin.length);\r\n+            props = tmp;\r\n+        }\r\n+\r\n+        return super.getBrokerFactory(props);\r\n+    }\r\n+    public KodoPersistenceManagerFactory getPMFactory(String[] props) {\r\n+        String[] builtin = new String[]{\r\n+            \"openjpa.jdbc.JDBCListeners\", Listener.class.getName()\r\n+        };\r\n+\r\n+        if (props == null)\r\n+            props = builtin;\r\n+        else {\r\n+            String[] tmp = new String[props.length + builtin.length];\r\n+            System.arraycopy(props, 0, tmp, 0, props.length);\r\n+            System.arraycopy(builtin, 0, tmp, props.length, builtin.length);\r\n+            props = tmp;\r\n+        }\r\n+\r\n+        return super.getPMFactory(props);\r\n+    }\r\n+\r\n+    public Broker getBroker() {\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        brokers.add(broker);\r\n+        return broker;\r\n+    }\r\n+\r\n+    public BrokerFactory getBrokerFactory() {\r\n+        return getBrokerFactory(null);\r\n+    }\r\n+\r\n+*/\r\n+\r\n+\r\n+\r\n+    public static class Listener\r\n+        extends AbstractJDBCListener {\r\n+\r\n+        public void beforeExecuteStatement(JDBCEvent event) {\r\n+            if (event.getSQL() != null)\r\n+                sql.add(event.getSQL());\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"7ee7b49af5f0c96918ae2b25ca429b5d954279a2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,138 @@\n+/*\r\n+ * TestUnknownSubclass.java\r\n+ *\r\n+ * Created on September 29, 2006, 3:55 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.kernel;\r\n+\r\n+\r\n+import java.sql.*;\r\n+import javax.sql.*;\r\n+import org.apache.openjpa.jdbc.conf.*;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestUnknownSubclass  extends JDBCTestCase {\r\n+\r\n+    private String parentName =\r\n+        \"openjpa.jdbc.kernel.UnknownSubclassParent\";\r\n+    private String childName =\r\n+        \"openjpa.jdbc.kernel.UnknownSubclassChild\";\r\n+\r\n+    /** Creates a new instance of TestUnknownSubclass */\r\n+    public TestUnknownSubclass() {\r\n+    }\r\n+ \r\n+    public TestUnknownSubclass(String name) {\r\n+        super(name);\r\n+    }\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        // pcl: in the new (registration-less) system, this should not\r\n+        // matter.\r\n+        //assertNotRegistered (parentName);\r\n+        //assertNotRegistered (childName);\r\n+\r\n+        EntityManager em= currentEntityManager();\r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast (em);\r\n+        \r\n+        \r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) kem).getConfiguration();\r\n+        boolean flat = !isInheritanceStrategyVertical();\r\n+\r\n+        DataSource ds = (DataSource) conf.getConnectionFactory();\r\n+        Connection c = ds.getConnection(conf.getConnectionUserName(),\r\n+            conf.getConnectionPassword());\r\n+        if (c.getAutoCommit())\r\n+            c.setAutoCommit(false);\r\n+\r\n+        c.createStatement()\r\n+            .executeUpdate(\"DELETE FROM UNKNOWNSUBCLASSPARENT\");\r\n+        if (!flat)\r\n+            c.createStatement()\r\n+                .executeUpdate(\"DELETE FROM UNKNOWNSUBCLASSCHILD\");\r\n+\r\n+        String insert = \"INSERT INTO UNKNOWNSUBCLASSPARENT\"\r\n+            + \"(TYP, ID, VERSN) VALUES (\";\r\n+\r\n+        c.createStatement().executeUpdate(insert\r\n+            + \"'\" + parentName + \"', 1, 1)\");\r\n+        c.createStatement().executeUpdate(insert\r\n+            + \"'\" + childName + \"', 2, 1)\");\r\n+\r\n+        if (!flat) {\r\n+            insert = \"INSERT INTO UNKNOWNSUBCLASSCHILD (ID) VALUES (\";\r\n+            c.createStatement().executeUpdate(insert + \"1)\");\r\n+            c.createStatement().executeUpdate(insert + \"2)\");\r\n+        }\r\n+\r\n+        c.commit();\r\n+        em.close();\r\n+        kem.close();\r\n+    }\r\n+\r\n+        public void testUnknownSubclass()\r\n+        throws Exception {\r\n+        // assertNotRegistered (parentName);\r\n+        // assertNotRegistered (childName);\r\n+\r\n+        Class c = UnknownSubclassParent.class;\r\n+\r\n+        // assertNotRegistered (childName);\r\n+\r\n+        EntityManager em= currentEntityManager();            \r\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\r\n+\r\n+        \r\n+        startTx(em);\r\n+        // c = UnknownSubclassChild.class;\r\n+\r\n+        //FIXME jthomas conversion incomplete \r\n+        /*\r\n+        assertSize(1, kem.createExtent(UnknownSubclassParent.class, false));\r\n+        assertSize(1, kem.newQuery(\r\n+            kem.createExtent(UnknownSubclassParent.class, false), \"\"));\r\n+\r\n+        assertSize(2, kem.createExtent(UnknownSubclassParent.class, true));\r\n+        assertSize(2, kem.createQuery(kem.createExtent(UnknownSubclassParent.class, true), \"\"));\r\n+        */\r\n+        endTx(em);\r\n+        \r\n+        em.close();\r\n+        kem.close();\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"a6abc3acba7bc3f9606d6adc3fe1159812112b49","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,264 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import junit.framework.*;\r\n+\r\n+\r\n+public class TestCompositeIdTraversalInSQLMapping extends AbstractTestCase \r\n+{\r\n+\t\r\n+\t\r\n+\tpublic TestCompositeIdTraversalInSQLMapping(String name)\r\n+\t{\r\n+\t\tsuper(name, \"jdbccactusapp\");\r\n+\t}\r\n+\r\n+\t\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(OwnerOfEntityWithCompositeId.class);\r\n+\t\tdeleteAll(EntityWithCompositeId.class);\r\n+\t}\r\n+\tprivate void persist(Integer uniqueId, String uniqueName, String relName)\r\n+\t{\r\n+\t\tOwnerOfEntityWithCompositeId owner = new OwnerOfEntityWithCompositeId();\r\n+\t\tEntityWithCompositeId relative = new EntityWithCompositeId();\r\n+\t\towner.setName(uniqueName);\r\n+\t\trelative.setId(uniqueId);\r\n+\t\trelative.setName(relName);\r\n+\t\trelative.setValue(\"foo\");\r\n+\t\towner.setRelation(relative);\r\n+\t\t\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tem.persist(owner);\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\tpublic void testTraversalWhenSQLSelectsBothEndOfTheRelation ()\r\n+\t{\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tInteger uid  = new Integer((int) (System.currentTimeMillis()%100000));\r\n+\t\tString uName = \"P\"+uid;\r\n+\t\tString rName = \"R\"+uName;\r\n+\t\t\r\n+\t\tpersist(uid, uName, rName);\r\n+\t\t\r\n+\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID as REL_ID,\" +\r\n+\t\t             \"a.RELATION_NAME as REL_NAME, b.ID as C_ID,\" +\r\n+\t\t\t\t\t \"b.NAME as C_NAME, b.VALUE as C_VALUE \" +\r\n+\t\t             \"FROM OWNER_OF_COMPOSITE_ID a, COMPOSITE_ID b \" +\r\n+\t\t             \"WHERE a.RELATION_ID=b.ID AND a.RELATION_NAME=b.NAME \" +\r\n+\t\t             \"AND a.NAME='\" + uName + \"'\";\r\n+\t\t\r\n+\t\tQuery query = em.createNativeQuery(sql, \r\n+\t\t\t\"SQLSelectsBothEndOfTheRelation\");\r\n+\t\t\r\n+\t\tList result = query.getResultList();\r\n+\t\t\r\n+\t\tassertEquals(1,result.size());\r\n+\t\tObject object = result.get(0);\r\n+\t\tassertEquals(Object[].class, object.getClass());\r\n+\t\tObject[] array = (Object[])object;\r\n+\t\tassertEquals(2,array.length);\r\n+\t\tassertEquals(OwnerOfEntityWithCompositeId.class,array[0].getClass());\r\n+\t\tassertEquals(EntityWithCompositeId.class,array[1].getClass());\r\n+\t\t\r\n+\t\tOwnerOfEntityWithCompositeId owner = (OwnerOfEntityWithCompositeId)\r\n+\t\t\tarray[0];\r\n+\t\t\r\n+\t\tEntityWithCompositeId relative = (EntityWithCompositeId)array[1];\r\n+\t\t\r\n+\t\tassertEquals(uName, owner.getName());\r\n+\t\tassertEquals(owner.getRelation(), relative);\r\n+\t\tassertEquals(relative.getId(),uid);\r\n+\t\tassertEquals(relative.getName(), rName);\r\n+\t\tassertEquals(\"foo\", relative.getValue());\r\n+\t\tendEm(em);\r\n+\t}\r\n+\r\n+\tpublic void testTraversalWhenSQLSelectsOnlyOneEndOfTheRelation ()\r\n+\t{\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tInteger uid  = new Integer((int) (System.currentTimeMillis()%100000));\r\n+\t\tString uName = \"P\"+uid;\r\n+\t\tString rName = \"R\"+uName;\r\n+\t\t\r\n+\t\tpersist (uid, uName, rName);\r\n+\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID as REL_ID,\" +\r\n+\t\t             \"a.RELATION_NAME as REL_NAME \"+\r\n+\t\t             \"FROM OWNER_OF_COMPOSITE_ID a \" +\r\n+\t\t             \"WHERE  a.NAME='\" + uName + \"'\";\r\n+\t\t\r\n+\t\tQuery query = em.createNativeQuery(sql, \r\n+\t\t\t\"SQLSelectsOnlyOneEndOfTheRelation\");\r\n+\t\t\r\n+\t\tList result = query.getResultList();\r\n+\t\t\r\n+\t\tassertEquals(1,result.size());\r\n+\t\tObject object = result.get(0);\r\n+\t\tassertEquals(OwnerOfEntityWithCompositeId.class,object.getClass());\r\n+\t\t\r\n+\t\tOwnerOfEntityWithCompositeId owner = (OwnerOfEntityWithCompositeId)\r\n+\t\t\tobject;\r\n+\t\t\r\n+\t\tEntityWithCompositeId relative = owner.getRelation();\r\n+\t\t\r\n+\t\tassertEquals(uName, owner.getName());\r\n+\t\tassertEquals(relative.getId(),uid);\r\n+\t\tassertEquals(relative.getName(), rName);\r\n+\t\tassertEquals(\"foo\", relative.getValue());\r\n+\t\tendEm(em);\r\n+\t}\r\n+\tpublic void testTraversalWhenSQLSelectsUnrelatedInstances ()\r\n+\t{\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tInteger uid1  = new Integer((int) (System.currentTimeMillis()%100000));\r\n+\t\tInteger uid2  = new Integer(uid1.intValue()+1);\r\n+\t\tString uName1 = \"P\"+uid1;\r\n+\t\tString rName1 = \"R\"+uName1;\r\n+\t\tString uName2 = \"P\"+uid2;\r\n+\t\tString rName2 = \"R\"+uName2;\r\n+\t\t\r\n+\t\tpersist(uid1, uName1, rName1);\r\n+\t\tpersist(uid2, uName2, rName2);\r\n+\t\t\r\n+\t\tString sql = \"SELECT a.NAME as OWNER_NAME, a.RELATION_ID AS REL_ID,\" +\r\n+        \"a.RELATION_NAME AS REL_NAME, \" +\r\n+        \"b.ID AS C_ID, b.NAME AS C_NAME, b.VALUE AS C_VALUE \"+\r\n+        \"FROM OWNER_OF_COMPOSITE_ID a, COMPOSITE_ID b \" +\r\n+        \"WHERE b.NAME='\"+ rName2 +\"' \" +\r\n+        \"AND a.NAME='\" + uName1 + \"'\";\r\n+\t\t\r\n+\t\tQuery query = em.createNativeQuery(sql, \r\n+\t\t\t\t\"SQLSelectsUnrelatedInstances\");\r\n+\t\t\r\n+\t\tList result = query.getResultList();\r\n+\t\t\r\n+\t\tassertEquals(1,result.size());\r\n+\t\tObject object = result.get(0);\r\n+\t\tassertEquals(Object[].class, object.getClass());\r\n+\t\tObject[] array = (Object[])object;\r\n+\t\tassertEquals(2,array.length);\r\n+\t\tassertEquals(OwnerOfEntityWithCompositeId.class,array[0].getClass());\r\n+\t\tassertEquals(EntityWithCompositeId.class,array[1].getClass());\r\n+\t\t\r\n+\t\tOwnerOfEntityWithCompositeId owner1 = (OwnerOfEntityWithCompositeId)\r\n+\t\t\tarray[0];\r\n+\t\tEntityWithCompositeId relative1 = owner1.getRelation();\r\n+\t\t\r\n+\t\tEntityWithCompositeId relative2 = (EntityWithCompositeId)array[1];\r\n+\t\t\r\n+\t\tassertEquals(uName1, owner1.getName());\r\n+\t\tassertEquals(uid1, relative1.getId());\r\n+\t\tassertEquals(rName1, relative1.getName());\r\n+\t\tassertEquals(uid2, relative2.getId());\r\n+\t\tassertEquals(rName2, relative2.getName());\r\n+\t\tendEm(em); \r\n+\t}\r\n+\t\r\n+\tpublic void testRecursiveTraversal () \r\n+\t{\r\n+\t\tInteger rootId  = new Integer((int)(System.currentTimeMillis()%100000));\r\n+\t\t\r\n+\t\tint depth = 3;\r\n+\t\tpersistChainedRelative(rootId, depth);\r\n+\t\t\r\n+\t\tString sql = createSelfJoinSQL(\"RECURSIVE_ENTITY\",\r\n+\t\t\t\tdepth,rootId);\r\n+\t\t\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tQuery query = em.createNativeQuery(sql, \"SQLSelectsChainedRelation\");\r\n+\r\n+\t\tList result = query.getResultList();\r\n+\t\t\r\n+\t\tassertEquals(1, result.size());\r\n+\t\tassertEquals(RecursiveEntityWithCompositeId.class,\r\n+\t\t\t\tresult.get(0).getClass());\r\n+\t\t\r\n+\t\tRecursiveEntityWithCompositeId root = (RecursiveEntityWithCompositeId)\r\n+\t\t\t\t\t\t\t\t\t\t\t\tresult.get(0);\r\n+\t\tassertEquals(rootId,root.getId());\r\n+\t\tassertEquals(\"P\"+rootId,root.getName());\r\n+\t\tfor (int i=1; i<depth;i++){\r\n+\t\t\tRecursiveEntityWithCompositeId relative = root.getRelation();\r\n+\t\t\tInteger expecetedId = root.getId()+1;\r\n+\t\t\tassertEquals (expecetedId,relative.getId());\r\n+\t\t\tassertEquals (\"P\"+expecetedId, relative.getName());\r\n+\t\t\troot = relative;\r\n+\t\t}\r\n+\t\t \r\n+\t}\r\n+\t\r\n+\tvoid persistChainedRelative(Integer rootId, int depth)\r\n+\t{\r\n+\t\tRecursiveEntityWithCompositeId root = \r\n+\t\t\tnew RecursiveEntityWithCompositeId();\r\n+\t\troot.setId(rootId);\r\n+\t\troot.setName(\"P\"+rootId);\r\n+\t\tRecursiveEntityWithCompositeId head = root;\r\n+\t\tfor (int i=1; i<=depth; i++)\r\n+\t\t{\r\n+\t\t\tRecursiveEntityWithCompositeId relation = \r\n+\t\t\t\tnew RecursiveEntityWithCompositeId();\r\n+\t\t\trelation.setId(rootId+i);\r\n+\t\t\trelation.setName(\"P\"+(rootId+i));\r\n+\t\t\thead.setRelation(relation);\r\n+\t\t\thead = relation;\r\n+\t\t}\r\n+\t\tEntityManager em = currentEntityManager();\r\n+\t\tstartTx(em);\r\n+\t\tem.persist(root);\r\n+\t\tendTx(em);\r\n+\t\tendEm(em);\r\n+\t}\r\n+\t\r\n+\tString createSelfJoinSQL(String table, int depth, int id)\r\n+\t{\r\n+\t\t\r\n+\t\tStringBuffer sql = new StringBuffer(\"SELECT \");\r\n+\t\tfor (int i=0; i<depth; i++)\r\n+\t\t\tsql.append(\"t\"+i+\".ID AS T\"+i+\"_ID, \")\r\n+\t\t\t   .append(\"t\"+i+\".NAME AS T\"+i+\"_NAME, \")\r\n+\t\t\t   .append(\"t\"+i+\".RELATION_ID AS T\"+i+\"_REL_ID, \")\r\n+\t\t\t   .append(\"t\"+i+\".RELATION_NAME AS T\"+i+\"_REL_NAME\")\r\n+\t\t\t   .append((i==(depth-1))?\" \" : \", \");\r\n+\t\t\r\n+\t\tsql.append(\" FROM \");\r\n+\t\tfor (int i=0; i<depth; i++)\r\n+\t\t\tsql.append(table + \" t\"+i)\r\n+\t\t\t   .append((i==(depth-1))?\" \" : \", \");\r\n+\t\t\r\n+\t\tsql.append(\" WHERE \");\r\n+\t\tfor (int i=0; i<(depth-1); i++)\r\n+\t\t\tsql.append(\"t\"+i+\".RELATION_ID=t\"+(i+1)+\".ID AND \")\r\n+\t\t\t   .append(\"t\"+i+\".RELATION_NAME=t\"+(i+1)+\".NAME AND \" );\r\n+\t\t\r\n+\t\tsql.append(\"t0.ID=\"+id);\r\n+\t\t\r\n+\t\treturn sql.toString();\r\n+\t}\r\n+}\r"},{"sha":"809b8c7bffa96fa4d93530d94c627ae84ebee439","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","status":"added","additions":170,"deletions":0,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,170 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.mapping;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import junit.framework.*;\r\n+\r\n+\r\n+public class TestNativeQueries\textends AbstractTestCase\r\n+{\r\n+\t\r\n+\tpublic TestNativeQueries(String name)\r\n+\t{\r\n+\t\tsuper(name, \"jdbccactusapp\");\r\n+\t}\r\n+\r\n+    public void setUp ()\r\n+\t{\r\n+\t\tdeleteAll (Entity1.class);\r\n+\t}\r\n+\r\n+\tpublic void testSimple ()\r\n+\t{\r\n+\t\tdeleteAll (Entity1.class);\r\n+\r\n+\t\t// test create\r\n+\t\t{\r\n+\t\t\tEntityManager em = currentEntityManager( );\r\n+\t\t\tstartTx(em);\r\n+\t\t\tem.persist (new Entity1 (0, \"testSimple\", 12));\r\n+\t\t\tendTx(em);\r\n+\t\t\tendEm(em);\r\n+\t\t}\r\n+\r\n+\t\t// test Query\r\n+\t\t{\r\n+/*\t\t\tJDBCConfiguration conf = (JDBCConfiguration)getConfiguration ();\r\n+\t\t\tDBDictionary dict = conf.getDBDictionaryInstance ();*/\r\n+\r\n+/*\t\t\tString tableName = dict.getFullName (conf.getMappingRepository ().\r\n+\t\t\t\tgetMapping (Entity1.class, getClass ().getClassLoader (), true).\r\n+\t\t\t\tgetTable (), false);*/\r\n+\r\n+\t\t\tEntityManager em = currentEntityManager( );\r\n+\t\t\tstartTx(em);\r\n+\t\t\tString tableName = \"entity_1\";\r\n+\t\t\tassertSize (1, em.createNativeQuery\r\n+\t\t\t\t(\"SELECT * FROM \" + tableName, Entity1.class).\r\n+\t\t\t\tgetResultList ());\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = 12\", Entity1.class).\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = ?1\", Entity1.class).\r\n+\t\t\t\tsetParameter (1, 12).\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+\t\t\t// make sure that out-of-order parameters work\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = ?2 AND STRINGFIELD = ?1\", Entity1.class).\r\n+\t\t\t\tsetParameter (2, 12).\r\n+\t\t\t\tsetParameter (1, \"testSimple\").\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+\t\t\t// make sure duplicate parameters work\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?1\", Entity1.class).\r\n+\t\t\t\tsetParameter (1, 12).\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = ?1 OR INTFIELD = ?2\", Entity1.class).\r\n+\t\t\t\tsetParameter (1, 12).\r\n+\t\t\t\tsetParameter (2, 13).\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+\t\t\t// make sure that quoted parameters are ignored as expected\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = ?1 OR STRINGFIELD = '?5'\", Entity1.class).\r\n+\t\t\t\tsetParameter (1, 12).\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+\t\t\t// test without spaces\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD=?1 OR STRINGFIELD='?5'\", Entity1.class).\r\n+\t\t\t\tsetParameter (1, 12).\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+/*\t\t\tassertSize (1, ((QueryImpl)em.createNativeQuery\r\n+\t\t\t\t(\"SELECT * FROM \" + tableName\r\n+\t\t\t\t\t+ \" WHERE INTFIELD = ?1 OR INTFIELD = ?2\", Entity1.class)).\r\n+\t\t\t\tsetParameters (12, 1).\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+\t\t\tassertSize (0, ((QueryImpl)em.createNativeQuery\r\n+\t\t\t\t(\"SELECT * FROM \" + tableName\r\n+\t\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?2\", Entity1.class)).\r\n+\t\t\t\tsetParameters (12, 1).\r\n+\t\t\t\tgetResultList ());\r\n+*/\r\n+\t\t\tassertSize (0, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = ?1 AND INTFIELD = ?2\", Entity1.class).\r\n+\t\t\t\tsetParameter (1, 12).\r\n+\t\t\t\tsetParameter (2, 13).\r\n+\t\t\t\tgetResultList ());\r\n+\r\n+\t\t\ttry\r\n+\t\t\t{\r\n+\t\t\t\tem.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t\t+ \" WHERE INTFIELD = ?1\", Entity1.class).\r\n+\t\t\t\t\tsetParameter (0, 12).\r\n+\t\t\t\t\tgetResultList ();\r\n+\t\t\t\tfail (\"Should not have been able to use param index 0\");\r\n+\t\t\t}\r\n+\t\t\tcatch (Exception e)\r\n+\t\t\t{\r\n+\t\t\t\t// as expected\r\n+\t\t\t}\r\n+\r\n+\r\n+\t\t\t/*\r\n+\t\t\t * Named parameters are not supported according to 19 June 3.5.2:\r\n+\t\t\t *\r\n+\t\t\t * The use of named parameters is not defined for\r\n+\t\t\t * native queries. Only positional parameter binding\r\n+\t\t\t * for SQL queries may be used by portable applications.\r\n+\t\t\t *\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = :p\",  Entity1.class).\r\n+\t\t\t\tsetParameter (\"p\", 12).\r\n+\t\t\t\tgetResultList ());\r\n+\t\t\tassertSize (1, em.createNativeQuery (\"SELECT * FROM \" + tableName\r\n+\t\t\t\t+ \" WHERE INTFIELD = :p OR INTFIELD = :p\", Entity1.class).\r\n+\t\t\t\tsetParameter (\"p\", 12).\r\n+\t\t\t\tgetResultList ());\r\n+\t\t\t*/\r\n+\r\n+\t\t\tendTx(em);\r\n+\t\t\tendEm(em);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic boolean assertSize(int num, List l)\r\n+\t{\r\n+\t\treturn(num == l.size());\r\n+\t}\r\n+}\r\n+\r"},{"sha":"6258acdbb1f7c5d32260ee4de3e00cf3cd3cedc3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * TestBuildSchema.java\r\n+ *\r\n+ * Created on October 4, 2006, 4:52 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import com.sun.org.apache.regexp.internal.REUtil;\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.io.StringWriter;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.MappingTool;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestBuildSchema extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+       \r\n+    /** Creates a new instance of TestBuildSchema */\r\n+    public TestBuildSchema() {\r\n+    }\r\n+    public TestBuildSchema(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void testSchema()\r\n+        throws Exception {\r\n+        StringWriter out = new StringWriter();\r\n+\r\n+        MappingTool tool = new MappingTool((JDBCConfiguration)\r\n+            getConfiguration(), MappingTool.ACTION_BUILD_SCHEMA, false);\r\n+        tool.setMappingWriter(new StringWriter());    // throw away\r\n+        tool.setSchemaWriter(out);\r\n+        tool.run(BuildSchemaPC.class);\r\n+        tool.record();\r\n+\r\n+        BufferedReader in = new BufferedReader(new InputStreamReader\r\n+            (getClass().getResourceAsStream(\"TestBuildSchema-schema.rsrc\")));\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int ch; (ch = in.read()) != -1;)\r\n+            buf.append((char) ch);\r\n+        in.close();\r\n+\r\n+        // the <schema> sometimes has a name (depending on whether the database\r\n+        // reports a schema name or not). If there is a\r\n+        // <scheme name=\"something\">, then replace it with <schema> so\r\n+        // the match is successful.\r\n+        String schema = out.toString();\r\n+        schema = REUtil.createRE\r\n+            (\"<schema name=\\\"*\\\">\").subst(schema, \"<schema>\");\r\n+\r\n+        // convert CRLF to CR so we pass on Windows\r\n+        assertEquals(fixNewline(buf.toString()).trim(),\r\n+            fixNewline(schema).trim());\r\n+    }\r\n+\r\n+    private String fixNewline(String str) {\r\n+        //FIXME \r\n+        /*\r\n+        return serp.util.Strings.join\r\n+            (serp.util.Strings.split\r\n+                (str, \"\\r\\n\", -1), \"\\n\");\r\n+         */\r\n+        return \"\";\r\n+    }\r\n+    \r\n+}\r"},{"sha":"67bb8e553a49e0ea97503218dd8949f49a763d66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,115 @@\n+/*\r\n+ * TestDFG.java\r\n+ *\r\n+ * Created on October 2, 2006, 5:55 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.EntityTransaction;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+\r\n+public class TestDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    private Object oid;\r\n+    /** Creates a new instance of TestDFG */\r\n+    public TestDFG(String name)\r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(DFGTest.class);\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        EntityTransaction t= pm.getTransaction();\r\n+        t.begin();\r\n+        DFGTest a = new DFGTest();\r\n+        pm.persist(a);\r\n+        a.setNonDFGField(2);\r\n+        t.commit();\r\n+        \r\n+        // modify a field so that if we're examining sql we can see\r\n+        // how much is flushed.\r\n+        t.begin();\r\n+        a.setDFGField(1);\r\n+        t.commit();\r\n+        \r\n+        oid = pm.getObjectId(a);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testDFG() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        DFGTest a = (DFGTest) pm.getObjectId(oid);\r\n+        \r\n+        // check the non-dfg fields\r\n+        \r\n+        OpenJPAStateManager sm = getStateManager(a,pm);\r\n+        FieldMetaData fmd = sm.getMetaData().getField(\"nonDFGField\");\r\n+        assertTrue(\"nonDFGField should not be loaded\",\r\n+                !sm.getLoaded().get(fmd.getIndex()));\r\n+        \r\n+        fmd = sm.getMetaData().getField(\"dfgField\");\r\n+        assertTrue(\"dfgField should be loaded\",\r\n+                sm.getLoaded().get(fmd.getIndex()));\r\n+        \r\n+        int val = a.getNonDFGField();\r\n+        assertTrue(\"nonDFGField should be loaded\",\r\n+                sm.getLoaded().get(fmd.getIndex()));\r\n+        assertEquals(2, val);\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    // it'd be nice if we could actually automate this test. As it\r\n+    // stands, this is just here so that there's an easy place to look\r\n+    // at the SQL.\r\n+    public void testDFGWrites() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+        \r\n+        DFGTest a = (DFGTest) pm.getObjectId(oid);\r\n+        a.setDFGField(3);\r\n+        endTx(pm);\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"3947e3ba8c2ca2945e3ea549e3525f4e2ca757aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,140 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n+\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBByteArray extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tprivate int _null;\r\n+\tprivate int _empty;\r\n+\tprivate int _small;\r\n+\tprivate int _large;\r\n+\r\n+\r\n+\tpublic TestEJBByteArray(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp() throws Exception\r\n+\t{\r\n+\t\tdeleteAll(ByteArray.class);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\r\n+\t\tByteArray pc = new ByteArray (\"Null\", 1);\r\n+\t\tpm.persist (pc);\r\n+\t\t_null = 1;\r\n+\r\n+\t\tpc = new ByteArray (\"Empty\", 2);\r\n+\t\tpc.setBytes (new byte[0]);\r\n+\t\tpm.persist (pc);\r\n+\t\t_empty = 2;\r\n+\r\n+\t\tpc = new ByteArray (\"Small\", 3);\r\n+\t\tpc.setBytes (pc.getString ().getBytes ());\r\n+\t\tpm.persist (pc);\r\n+\t\t_small = 3;\r\n+\r\n+\t\tbyte[] bytes = new byte [10000];\r\n+\t\tfor (int i = 0; i < bytes.length; i++)\r\n+\t\t\tbytes[i] = (byte) (i % 8);\r\n+\r\n+\t\tpc = new ByteArray (\"Large\", 4);\r\n+\t\tpc.setBytes (bytes);\r\n+\t\tpm.persist (pc);\r\n+\t\t_large = 4;\r\n+\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testNull ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\r\n+\t\tByteArray pc = pm.find(ByteArray.class, _null);\r\n+\t\tassertNull (pc.getBytes ());\r\n+\r\n+\r\n+\t\tpc.setBytes (\"Not Null\".getBytes ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(ByteArray.class, _null);\r\n+\r\n+\t\tassertEquals (\"Not Null\", new String (pc.getBytes ()));\r\n+\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testEmpty ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\r\n+\t\tByteArray pc = pm.find(ByteArray.class, _empty);\r\n+\t\tbyte [] bytes = pc.getBytes ();\r\n+\t\tassertNotNull (bytes);\r\n+\t\tassertEquals (0, bytes.length);\r\n+\r\n+\t\tpc.setBytes (\"Not Empty\".getBytes ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(ByteArray.class, _empty);\r\n+\t\tassertEquals (\"Not Empty\", new String (pc.getBytes ()));\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testLarge ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tByteArray pc = pm.find(ByteArray.class, _large);\r\n+\t\tbyte [] bytes = pc.getBytes ();\r\n+\t\tassertNotNull (bytes);\r\n+\t\tassertEquals (10000, bytes.length);\r\n+\t\tfor (int i = 0; i < bytes.length; i++)\r\n+\t\t\tassertEquals (bytes[i], (byte) (i % 8));\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r"},{"sha":"899ba104ccff9ead4e459e1ff125b7b76ddbe360","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,165 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBColumnIOMappings extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tpublic TestEJBColumnIOMappings(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(ColumnIOPC.class);\r\n+\t}\r\n+\r\n+\tpublic void testIgnoreInsert ()\r\n+\t{\r\n+\t\tColumnIOPC pc = new ColumnIOPC (2);\r\n+\t\tpc.setName (\"pc\");\r\n+\t\tpc.setIgnoreInsert (10);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n+\t\tendTx(pm);\r\n+\r\n+\t\tstartTx(pm);\r\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n+\t\tint oid = pc.getId();\r\n+        endTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n+\t\tassertNotNull (pc);\r\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n+\t\tpc.setIgnoreInsert (10);\r\n+\t\tendTx(pm);\r\n+\t\tstartTx(pm);\r\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n+\t\tassertNotNull (pc);\r\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testIgnoreUpdate ()\r\n+\t{\r\n+\t\tColumnIOPC pc = new ColumnIOPC (3);\r\n+\t\tpc.setName (\"pc\");\r\n+\t\tpc.setIgnoreUpdate (10);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n+\t\tendTx(pm);\r\n+\r\n+\t\tObject oid = pc.getId();\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n+\t\tassertNotNull (pc);\r\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n+\t\tendTx(pm);\r\n+\r\n+\t\tstartTx(pm);\r\n+\t\tpc.setIgnoreUpdate (100);\r\n+\t\tassertEquals (100, pc.getIgnoreUpdate ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n+\t\tassertNotNull (pc);\r\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\r\n+\tpublic void testPrimitiveMappedToFieldOfForeignKey ()\r\n+\t{\r\n+\t\t// have to make rel persistent before setting ident field b/c not\r\n+\t\t// insertable\r\n+\t\tColumnIOPC rel = new ColumnIOPC (1);\r\n+\t\trel.setName (\"rel\");\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(rel);\r\n+\t\tendTx(pm);\r\n+\r\n+\t\tstartTx(pm);\r\n+\t\tColumnIOPC pc = new ColumnIOPC (2);\r\n+\t\tpc.setName (\"pc\");\r\n+\t\trel = pm.find(ColumnIOPC.class, 1);\r\n+\t\tpc.setRel (rel);\r\n+\t\trel.setIdent (10);\r\n+\t\tpm.persist(pc);\r\n+\t\tendTx(pm);\r\n+\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(ColumnIOPC.class, 2);\r\n+\t\tassertNotNull (pc);\r\n+\t\tassertEquals (0, pc.getIdent ());\r\n+\t\tassertNotNull (pc.getRel ());\r\n+\t\tassertEquals (\"rel\", pc.getRel ().getName ());\r\n+\r\n+\t\tpc.setIdent (50);\r\n+\t\tpc.setRel (new ColumnIOPC (3));\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(ColumnIOPC.class, 2);\r\n+\t\tassertNotNull (pc);\r\n+\t\tassertEquals (50, pc.getIdent());\r\n+\t\tassertNotNull (pc.getRel());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+}\r"},{"sha":"19562e691fe26a2332836360d48a3f6e0f4b3f58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.Iterator;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5;\r\n+\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBConstantJoinOnSameRefTable extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tprivate int oid;\r\n+\t\r\n+\tpublic TestEJBConstantJoinOnSameRefTable(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tpublic void setUp ()\r\n+\t{\r\n+\t\tdeleteAll(ConstantJoinPC4.class);\r\n+\t\tdeleteAll(ConstantJoinPC5.class);\r\n+\r\n+\t\tConstantJoinPC4 pc4 = new ConstantJoinPC4 (\"pc4-1\", 1);\r\n+\t\tpc4.setOneToOne1 (new ConstantJoinPC5 (\"pc5-one-to-one-1\"));\r\n+\t\t//### see note in testConstantOneToOne2\r\n+\t\t//### pc4.setOneToOne2 (new ConstantJoinPC5 (\"pc5-one-to-one-2\"));\r\n+\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-1\"));\r\n+\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-2\"));\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc4);\r\n+\t\tendTx(pm);\r\n+\t\toid = pc4.getId();\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testConstantManyToMany ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\r\n+\t\tassertEquals (2, pc4.getManyToMany ().size ());\r\n+\t\tIterator iter = pc4.getManyToMany ().iterator ();\r\n+\t\tConstantJoinPC5 pc5_1 = (ConstantJoinPC5) iter.next ();\r\n+\t\tConstantJoinPC5 pc5_2 = (ConstantJoinPC5) iter.next ();\r\n+\t\tif (\"pc5-many-to-many-2\".equals (pc5_1.getName ()))\r\n+\t\t{\r\n+\t\t\tConstantJoinPC5 other = pc5_1;\r\n+\t\t\tpc5_1 = pc5_2;\r\n+\t\t\tpc5_2 = other;\r\n+\t\t}\r\n+\t\tassertEquals (\"pc5-many-to-many-1\", pc5_1.getName ());\r\n+\t\tassertEquals (\"pc5-many-to-many-2\", pc5_2.getName ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\r\n+\tpublic void testConstantOneToOne1 ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tConstantJoinPC4 pc4 =  pm.find(ConstantJoinPC4.class, oid);\r\n+\t\tassertEquals (2, pc4.getManyToMany ().size ());\r\n+\t\tassertEquals (\"pc5-one-to-one-1\", pc4.getOneToOne1 ().getName ());\r\n+\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testSharedJoinTableModifications ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\r\n+\t\tstartTx(pm);\r\n+\t\tpc4.getManyToMany ().clear ();\r\n+\t\tendTx(pm);\r\n+\r\n+\t\tEntityManager pm2 = currentEntityManager();\r\n+\t\tpc4 = pm2.find(ConstantJoinPC4.class, oid);\r\n+\t\tassertNotNull (pc4.getOneToOne1 ());\r\n+\t\tassertEquals (0, pc4.getManyToMany ().size ());\r\n+\t}\r\n+\r\n+}\r"},{"sha":"e83999426ad7e24f6f086a5631724a6cf050507a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC;\r\n+import junit.framework.*;\r\n+\r\n+\r\n+public class TestEJBCustomMapping extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tprivate int _oid;\r\n+\r\n+\tpublic TestEJBCustomMapping(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp ()\r\n+\t{\r\n+\t\tdeleteAll(CustomMappingPC.class);\r\n+\r\n+\t\tCustomMappingPC pc = new CustomMappingPC (2);\r\n+\t\tpc.setName (\"name\");\r\n+\t\tpc.setFemale (true);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\t\tendTx(pm);\r\n+\t\t_oid = pc.getId();\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testInsert ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\r\n+\t\tassertNotNull (pc);\r\n+\r\n+\t\tassertEquals (\"name\", pc.getName ());\r\n+\t\tassertEquals (true, pc.isFemale ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testUpdate ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\r\n+\r\n+\t\tpc.setName (\"name2\");\r\n+\t\tpc.setFemale (false);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(CustomMappingPC.class, _oid);\r\n+\t\tassertEquals (\"name2\", pc.getName ());\r\n+\t\tassertTrue (!pc.isFemale ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"973f12ddd84c0d45c8b8468bcd7365e1314a6f94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.DateVersion;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBDateVersion extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tprivate int oid;\r\n+\r\n+\tpublic TestEJBDateVersion(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp() throws Exception\r\n+\t{\r\n+\t\tdeleteAll(DateVersion.class);\r\n+\r\n+\t\tDateVersion pc = new DateVersion (\"pc1\", 1);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\r\n+\t\toid = pc.getId();\r\n+\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testOptLock ()\tthrows InterruptedException\r\n+{\r\n+\tEntityManager pm1 = currentEntityManager();\r\n+\tEntityManager pm2 = currentEntityManager();\r\n+\r\n+\r\n+\tstartTx(pm1);\r\n+\tstartTx(pm2);\r\n+\tDateVersion pc1 = (DateVersion) pm1.find(DateVersion.class, oid);\r\n+\tDateVersion pc2 = (DateVersion) pm2.find(DateVersion.class, oid);\r\n+\r\n+\tpc1.setString (\"pc-2-1\");\r\n+\tpc2.setString (\"pc-2-2\");\r\n+\r\n+\t// some DBs do not distinguish dates unless there is 1 sec diff\r\n+\tThread.currentThread ().sleep (1 * 1000);\r\n+\tendTx(pm1);\r\n+\ttry\r\n+\t{\r\n+\t\tThread.currentThread ().sleep (1 * 1000);\r\n+\t\tendTx(pm2);\r\n+\t\tfail (\"Should have caused OL exception.\");\r\n+\t}\r\n+\tcatch (Exception jfe)\r\n+\t{\r\n+\t\tstartTx(pm2);\r\n+\t\tpm2.refresh (pc2);\r\n+\t\tpc2.setString (\"pc-3-2\");\r\n+\t\tendTx(pm2);\r\n+\t}\r\n+\r\n+\t// make sure the next transaction works too\r\n+\tstartTx(pm2);\r\n+\tpc2.setString (\"pc-string-4-2\");\r\n+\tendTx(pm2);\r\n+\r\n+\tstartTx(pm1);\r\n+\tpm1.refresh (pc1);\r\n+\tpc1.setString (\"pc-string-3-1\");\r\n+\r\n+\tstartTx(pm2);\r\n+\tpc2.setString (\"pc-string-5-2\");\r\n+\r\n+\tThread.currentThread ().sleep (1 * 1000);\r\n+\tendTx(pm1);\r\n+\ttry\r\n+\t{\r\n+\t\tThread.currentThread ().sleep (1 * 1000);\r\n+\t\tendTx(pm2);\r\n+\t\tfail (\"Should have caused OL exception2.\");\r\n+\t}\r\n+\tcatch (Exception jfe)\r\n+\t{\r\n+\t\tstartTx(pm2);\r\n+\t\tpm2.refresh (pc2);\r\n+\t\tpc2.setString (\"pc-string-6-2\");\r\n+\t\tendTx(pm2);\r\n+\t}\r\n+\tendEm(pm1);\r\n+\tendEm(pm2);\r\n+\r\n+\tEntityManager pm = currentEntityManager();\r\n+\tDateVersion pc = pm.find(DateVersion.class, oid);\r\n+\tassertEquals (\"pc-string-6-2\", pc.toString ());\r\n+\tendEm(pm);\r\n+  }\r\n+}\n\\ No newline at end of file"},{"sha":"61360fdd2b00a6a92be38500dbf633eea1c6ec0d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,153 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBEager extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tprivate int _oid;\r\n+\r\n+\tpublic TestEJBEager(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(EagerPCSub.class);\r\n+\t\tdeleteAll(EagerPC.class);\r\n+\t\tdeleteAll(HelperPC.class);\r\n+\t\tdeleteAll(HelperPC2.class);\r\n+\t\tdeleteAll(HelperPC4.class);\r\n+\t\tdeleteAll(HelperPC3.class);\r\n+\r\n+\t\tEagerPCSub pc = new EagerPCSub (1);\r\n+\t\tpc.setStringField (\"string1\");\r\n+\t\tEagerPCSub pc2 = new EagerPCSub (2);\r\n+\t\tpc2.setStringField (\"string2\");\r\n+\r\n+\t\tHelperPC helper1 = new HelperPC (4);\r\n+\t\thelper1.setStringField (\"helper1\");\r\n+\t\tpc.setHelper (helper1);\r\n+\r\n+\t\tHelperPC2 helperCollection1 = new HelperPC2 ();\r\n+\t\thelperCollection1.setStringField (\"helperCollection1\");\r\n+\t\thelperCollection1.getHelperCollection ().add (new HelperPC (5));\r\n+\t\tHelperPC2 helperCollection2 = new HelperPC2 (6);\r\n+\t\thelperCollection2.setStringField (\"helperCollection2\");\r\n+\t\tpc.getHelperCollection ().add (helperCollection1);\r\n+\t\tpc.getHelperCollection ().add (helperCollection2);\r\n+\r\n+\t\tHelperPC eager = new HelperPC (7);\r\n+\t\teager.setStringField (\"eager\");\r\n+\t\tpc.setEager (eager);\r\n+\r\n+\t\tHelperPC4 eagerSub = new HelperPC4 ();\r\n+\t\teagerSub.setStringField (\"eagerSub\");\r\n+\t\teagerSub.setIntField (1);\r\n+\t\tpc.setEagerSub (eagerSub);\r\n+\r\n+\t\tHelperPC eagerCollection1 = new HelperPC (8);\r\n+\t\teagerCollection1.setStringField (\"eagerCollection1\");\r\n+\t\tHelperPC eagerCollection2 = new HelperPC (9);\r\n+\t\teagerCollection2.setStringField (\"eagerCollection2\");\r\n+\t\tpc.getEagerCollection ().add (eagerCollection1);\r\n+\t\tpc.getEagerCollection ().add (eagerCollection2);\r\n+\t\teagerCollection1.setEager (pc);\r\n+\t\teagerCollection2.setEager (pc);\r\n+\t\tpc.getEagerCollection2 ().add (eagerCollection1);\r\n+\t\tpc.getEagerCollection2 ().add (eagerCollection2);\r\n+\r\n+\t\tHelperPC eagerCollection3 = new HelperPC (10);\r\n+\t\teagerCollection3.setStringField (\"eagerCollection3\");\r\n+\t\tpc2.getEagerCollection ().add (eagerCollection3);\r\n+\r\n+\t\tHelperPC2 recurse = new HelperPC2 (11);\r\n+\t\trecurse.setStringField (\"recurse\");\r\n+\t\tHelperPC3 helper3 = new HelperPC3 (12);\r\n+\t\thelper3.setStringField (\"helper3\");\r\n+\t\trecurse.setHelper (helper3);\r\n+\t\teager.setHelper (helper1);\r\n+\t\tpc.setRecurse (recurse);\r\n+\r\n+\t\tHelperPC2 recurseCollection1 = new HelperPC2 (13);\r\n+\t\trecurseCollection1.setStringField (\"recurseCollection1\");\r\n+\t\tHelperPC2 recurseCollection2 = new HelperPC2 (14);\r\n+\t\trecurseCollection2.setStringField (\"recurseCollection2\");\r\n+\t\tpc.getRecurseCollection ().add (recurseCollection1);\r\n+\t\tpc.getRecurseCollection ().add (recurseCollection2);\r\n+\t\trecurseCollection1.getHelperCollection ().add (helper1);\r\n+\t\tHelperPC helper2 = new HelperPC (15);\r\n+\t\thelper2.setStringField (\"helper2\");\r\n+\t\trecurseCollection1.getHelperCollection ().add (helper2);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\t\tpm.persist(pc2);\r\n+\t\tendTx(pm);\r\n+\t\t_oid = pc.getId();\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testOuterJoin ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\r\n+\t\tpc.setEager (null);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tpc = pm.find(EagerPCSub.class, _oid);\r\n+\t\tassertNull (pc.getEager());\r\n+\t\tassertNotNull (pc.getRecurse ());\r\n+\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().\r\n+\t\t\tgetStringField ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testOuterJoinToSubclass ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\r\n+\t\tpc.setEagerSub (null);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(EagerPCSub.class, _oid);\r\n+\t\tassertNull (pc.getEagerSub ());\r\n+\t\tassertNotNull (pc.getRecurse ());\r\n+\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().getStringField ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"76e3f8291e354396b53b56cb8c89a9177f2d3316","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.InvertA;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.InvertB;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBInverseOneToOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tpublic TestEJBInverseOneToOne(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp ()\r\n+\t{\r\n+\t\tdeleteAll(InvertA.class);\r\n+\t\tdeleteAll(InvertB.class);\r\n+\t}\r\n+\r\n+\r\n+\tprivate static Object insertData (EntityManager pm)\r\n+\t{\r\n+\t\tInvertA a;\r\n+\t\tInvertB b;\r\n+\t\ta = new InvertA (1);\r\n+\t\tb = new InvertB (2);\r\n+\t\ta.setTest (\"testA\");\r\n+\t\tb.setTest (\"testB\");\r\n+\t\tb.setInvertA (a);\r\n+\r\n+\t\tEntityTransaction t = pm.getTransaction ();\r\n+\t\tt.begin ();\r\n+\t\tpm.persist(b);\r\n+\t\t//pm.makeTransactional (b);\r\n+\r\n+\t\treturn (pm.find(InvertB.class, 2));\r\n+\t}\r\n+\r\n+\r\n+\tpublic void testLoad ()\r\n+\t{\r\n+\t\tInvertA a;\r\n+\t\tInvertB b;\r\n+\t\tObject aId;\r\n+\t\tObject bId;\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\taId = insertData (pm);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tb = (InvertB) aId;\r\n+\r\n+\t\tassertNotNull(b.getInvertA().getTest());\r\n+\t\tassertEquals (b.getInvertA().getTest (), \"testA\");\r\n+\t}\r\n+\r\n+}\r"},{"sha":"0dfc484a80d7abc51e43559bab28b00ccddc8eaa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBOuterJoinValues extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tpublic int oid = 0;\r\n+\r\n+\tpublic TestEJBOuterJoinValues(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(OuterJoinValuePC.class);\r\n+\r\n+\t\tOuterJoinValuePC pc = new OuterJoinValuePC (10);\r\n+\t\tpc.setStringField (\"pc\");\r\n+\t\tpc.setValue1 (1);\r\n+\t\tpc.setValue2 (2);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\t\tendTx(pm);\r\n+\r\n+\t\toid = pc.getId();\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testNull ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n+\r\n+\t\tpc.setValue1 (0);\r\n+\t\tpc.setValue2 (0);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tpc = pm.find(OuterJoinValuePC.class, oid);\r\n+\t\tassertEquals (0, pc.getValue1 ());\r\n+\t\tassertEquals (0, pc.getValue2 ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testUpdate ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n+\t\tpc.setValue1 (3);\r\n+\t\tpc.setValue2 (0);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tpc = pm.find(OuterJoinValuePC.class, oid);\r\n+\t\tassertEquals (3, pc.getValue1 ());\r\n+\t\tassertEquals (0, pc.getValue2 ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testInsert ()\r\n+\t{\r\n+\t\t// just tests the values inserted in the setup method\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n+\t\tassertEquals (\"pc\", pc.getStringField ());\r\n+\t\tassertEquals (1, pc.getValue1 ());\r\n+\t\tassertEquals (2, pc.getValue2 ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"9f440e4ea646b75dda067eeddf550ab4a35312a6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","status":"added","additions":242,"deletions":0,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,242 @@\n+/*\r\n+ * TestEagerDistinct.java\r\n+ *\r\n+ * Created on October 4, 2006, 4:27 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestEagerDistinct extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \r\n+{\r\n+        \r\n+    /** Creates a new instance of TestEagerDistinct */\r\n+    public TestEagerDistinct(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        return ((JDBCConfiguration) getConfiguration()).\r\n+                getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+       deleteAll(EagerPC.class);\r\n+       deleteAll(HelperPC.class);\r\n+       deleteAll(HelperPC2.class);\r\n+        \r\n+        HelperPC shared = new HelperPC();\r\n+        shared.setStringField(\"shared\");\r\n+        \r\n+        HelperPC2 pc1 = new HelperPC2();\r\n+        pc1.setStringField(\"pc1\");\r\n+        pc1.getHelperCollection().add(shared);\r\n+        pc1.getHelperCollection().add(new HelperPC());\r\n+        \r\n+        HelperPC2 pc2 = new HelperPC2();\r\n+        pc2.setStringField(\"pc2\");\r\n+        pc2.getHelperCollection().add(shared);\r\n+        pc2.getHelperCollection().add(new HelperPC());\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        \r\n+        // to make sure subclasses are selected, etc\r\n+        //FIXME jthomas\r\n+        //pm.createNativeQuery(\"\",HelperPC.class).execute();\r\n+        //pm.newQuery(HelperPC2.class).execute();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public OpenJPAEntityManager getPM() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().setMaxFetchDepth(-1);\r\n+        return pm;\r\n+    }\r\n+    \r\n+    public void testEagerParallelWithNonDistinctQuery()\r\n+    throws Exception {\r\n+        eagerParallelWithNonDistinctQuery(-1);\r\n+    }\r\n+    \r\n+    public void testPagingEagerParallelWithNonDistinctQuery()\r\n+    throws Exception {\r\n+        eagerParallelWithNonDistinctQuery(0);\r\n+    }\r\n+    \r\n+    private void eagerParallelWithNonDistinctQuery(int fetchSize)\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"stringField.startsWith ('pc')\",HelperPC2.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"stringField ascending\");\r\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n+        List res = (List) q.getResultList();\r\n+        \r\n+        if (fetchSize == -1)\r\n+            assertEquals(2, sql.size());\r\n+        \r\n+        assertEquals(2, res.size());\r\n+        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\r\n+        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\r\n+        \r\n+        assertNotSQL(\"DISTINCT\");\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertHelperPC2(String stringField, HelperPC2 pc) {\r\n+        assertEquals(stringField, pc.getStringField());\r\n+        assertEquals(2, pc.getHelperCollection().size());\r\n+        assertEquals(\"shared\", ((HelperPC) pc.getHelperCollection().get(0)).\r\n+                getStringField());\r\n+        assertNull(((HelperPC) pc.getHelperCollection().get(1)).\r\n+                getStringField());\r\n+    }\r\n+    \r\n+    public void testEagerParallelWithDistinctQuery()\r\n+    throws Exception {\r\n+        eagerParallelWithDistinctQuery(-1);\r\n+    }\r\n+    \r\n+    public void testPagingEagerParallelWithDistinctQuery()\r\n+    throws Exception {\r\n+        eagerParallelWithDistinctQuery(0);\r\n+    }\r\n+    \r\n+    private void eagerParallelWithDistinctQuery(int fetchSize)\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        OpenJPAQuery q =  pm.createNativeQuery(\"helperCollection.contains (h) && h.stringField == 'shared'\",HelperPC2.class);\r\n+        //FIXME  jthomas\r\n+        //q.setOrdering(\"stringField ascending\");\r\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n+        List res = (List) q.getResultList();\r\n+        \r\n+        if (fetchSize == -1) {\r\n+            sql.remove(0);    // orig sel\r\n+            assertSQL(\"DISTINCT\");\r\n+        }\r\n+        \r\n+        assertEquals(2, res.size());\r\n+        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\r\n+        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testNestedEagerParallel()\r\n+    throws Exception {\r\n+        nestedEagerParallel(-1);\r\n+    }\r\n+    \r\n+    public void testPagingNestedEagerParallel()\r\n+    throws Exception {\r\n+        nestedEagerParallel(0);\r\n+    }\r\n+    \r\n+    private void nestedEagerParallel(int fetchSize)\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",HelperPC2.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"stringField ascending\");\r\n+        List helpers = (List) q.getResultList();\r\n+        \r\n+        EagerPC eager1 = new EagerPC();\r\n+        eager1.setStringField(\"eager1\");\r\n+        eager1.getRecurseCollection().addAll(helpers);\r\n+        \r\n+        EagerPC eager2 = new EagerPC();\r\n+        eager2.setStringField(\"eager2\");\r\n+        eager2.getRecurseCollection().addAll(helpers);\r\n+        HelperPC2 pc3 = new HelperPC2();\r\n+        pc3.setStringField(\"pc3\");\r\n+        pc3.getHelperCollection().add(new HelperPC());\r\n+        pc3.getHelperCollection().add(new HelperPC());\r\n+        pc3.getHelperCollection().add(new HelperPC());\r\n+        eager2.getRecurseCollection().add(pc3);\r\n+        \r\n+        startTx(pm);;\r\n+        pm.persist(eager1);\r\n+        pm.persist(eager2);\r\n+        endTx(pm);;\r\n+        // make sure subclasses selected, etc\r\n+        //FIXME jthomas\r\n+        pm.createNativeQuery(\"\",EagerPC.class).getResultList();\r\n+        pm.close();\r\n+        sql.clear();\r\n+        \r\n+        pm = getPM();\r\n+        q = pm.createNativeQuery(\"stringField.startsWith ('eager')\",EagerPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"stringField ascending\");\r\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n+        List res = (List) q.getResultList();\r\n+        \r\n+        if (fetchSize == -1) {\r\n+            sql.remove(0); // orig sel\r\n+            assertSQL(\"DISTINCT\");\r\n+        }\r\n+        \r\n+        assertEquals(2, res.size());\r\n+        eager1 = (EagerPC) res.get(0);\r\n+        assertEquals(\"eager1\", eager1.getStringField());\r\n+        assertEquals(2, eager1.getRecurseCollection().size());\r\n+        assertHelperPC2(\"pc1\", (HelperPC2) eager1.getRecurseCollection().\r\n+                get(0));\r\n+        assertHelperPC2(\"pc2\", (HelperPC2) eager1.getRecurseCollection().\r\n+                get(1));\r\n+        \r\n+        eager2 = (EagerPC) res.get(1);\r\n+        assertEquals(\"eager2\", eager2.getStringField());\r\n+        assertEquals(3, eager2.getRecurseCollection().size());\r\n+        assertHelperPC2(\"pc1\", (HelperPC2) eager2.getRecurseCollection().\r\n+                get(0));\r\n+        assertHelperPC2(\"pc2\", (HelperPC2) eager2.getRecurseCollection().\r\n+                get(1));\r\n+        pc3 = (HelperPC2) eager2.getRecurseCollection().get(2);\r\n+        assertEquals(\"pc3\", pc3.getStringField());\r\n+        assertEquals(3, pc3.getHelperCollection().size());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"b94ad7e9124cc64ee5864219dfff0d0c28807eab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","status":"added","additions":874,"deletions":0,"changes":874,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,874 @@\n+/*\r\n+ * TestEagerOuterToManyJoins.java\r\n+ *\r\n+ * Created on October 3, 2006, 10:53 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.persistence.FetchPlan;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.EagerOuterJoinPC;\r\n+\r\n+\r\n+public class TestEagerOuterToManyJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    /** Creates a new instance of TestEagerOuterToManyJoins */\r\n+    public TestEagerOuterToManyJoins(String name) {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        DBDictionary dict = ((JDBCConfiguration) getConfiguration()).\r\n+                getDBDictionaryInstance();\r\n+        return !dict.supportsSubselect;\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        \r\n+       deleteAll(HelperPC.class);\r\n+       deleteAll(EagerOuterJoinPC2.class);\r\n+       deleteAll(EagerOuterJoinPC.class);\r\n+    }\r\n+    \r\n+    \r\n+    public void testStringCollectionById() {\r\n+        stringCollectionByIdTest(false);\r\n+    }\r\n+    \r\n+    public void testEmptyStringCollectionById() {\r\n+        stringCollectionByIdTest(true);\r\n+    }\r\n+    \r\n+    private void stringCollectionByIdTest(boolean empty) {\r\n+        Object oid = insertStringCollection((empty) ? 1 : 0);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if (empty)\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    0, pc.getStringCollection().size());\r\n+        else {\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    2, pc.getStringCollection().size());\r\n+            assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+            assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        }\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testStringCollectionByQuery() {\r\n+        stringCollectionByQueryTest(0);\r\n+    }\r\n+    \r\n+    public void testEmptyStringCollectionByQuery1() {\r\n+        stringCollectionByQueryTest(1);\r\n+    }\r\n+    \r\n+    public void testEmptyStringCollectionByQuery2() {\r\n+        stringCollectionByQueryTest(2);\r\n+    }\r\n+    \r\n+    public void testEmptyStringCollectionByQuery3() {\r\n+        stringCollectionByQueryTest(3);\r\n+    }\r\n+    \r\n+    private void stringCollectionByQueryTest(int empty) {\r\n+        insertStringCollection(empty);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        \r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if ((empty & 1) > 0)\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    0, pc.getStringCollection().size());\r\n+        else {\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    2, pc.getStringCollection().size());\r\n+            assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+            assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        }\r\n+        \r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        if ((empty & 2) > 0)\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    0, pc.getStringCollection().size());\r\n+        else {\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    2, pc.getStringCollection().size());\r\n+            assertTrue(pc.getStringCollection().contains(\"2.1\"));\r\n+            assertTrue(pc.getStringCollection().contains(\"2.2\"));\r\n+        }\r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertStringCollection(int empty) {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        if ((empty & 1) == 0) {\r\n+            pc1.getStringCollection().add(\"1.1\");\r\n+            pc1.getStringCollection().add(\"1.2\");\r\n+        }\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        if ((empty & 2) == 0) {\r\n+            pc2.getStringCollection().add(\"2.1\");\r\n+            pc2.getStringCollection().add(\"2.2\");\r\n+        }\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testStringListById() {\r\n+        Object oid = insertStringList();\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        \r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringList().size());\r\n+        assertEquals(\"1.1\", pc.getStringList().get(0));\r\n+        assertEquals(\"1.2\", pc.getStringList().get(1));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testStringListByQuery() {\r\n+        insertStringList();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringList().size());\r\n+        assertEquals(\"1.1\", pc.getStringList().get(0));\r\n+        assertEquals(\"1.2\", pc.getStringList().get(1));\r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        assertEquals(2, pc.getStringList().size());\r\n+        assertEquals(\"2.1\", pc.getStringList().get(0));\r\n+        assertEquals(\"2.2\", pc.getStringList().get(1));\r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertStringList() {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        pc1.getStringList().add(\"1.1\");\r\n+        pc1.getStringList().add(\"1.2\");\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        pc2.getStringList().add(\"2.1\");\r\n+        pc2.getStringList().add(\"2.2\");\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testOneManyCollectionById() {\r\n+        oneManyCollectionByIdTest(false);\r\n+    }\r\n+    \r\n+    public void testEmptyOneManyCollectionById() {\r\n+        oneManyCollectionByIdTest(true);\r\n+    }\r\n+    \r\n+    private void oneManyCollectionByIdTest(boolean empty) {\r\n+        Object oid = insertOneManyCollection((empty) ? 1 : 0);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if (empty)\r\n+            assertEquals(0, pc.getOneManyCollection().size());\r\n+        else\r\n+            assertEquals(2, pc.getOneManyCollection().size());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testOneManyCollectionByQuery() {\r\n+        oneManyCollectionByQueryTest(0);\r\n+    }\r\n+    \r\n+    public void testEmptyOneManyCollectionByQuery1() {\r\n+        oneManyCollectionByQueryTest(1);\r\n+    }\r\n+    \r\n+    public void testEmptyOneManyCollectionByQuery2() {\r\n+        oneManyCollectionByQueryTest(2);\r\n+    }\r\n+    \r\n+    public void testEmptyOneManyCollectionByQuery3() {\r\n+        oneManyCollectionByQueryTest(3);\r\n+    }\r\n+    \r\n+    private void oneManyCollectionByQueryTest(int empty) {\r\n+        insertOneManyCollection(empty);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if ((empty & 1) > 0)\r\n+            assertEquals(0, pc.getOneManyCollection().size());\r\n+        else\r\n+            assertEquals(2, pc.getOneManyCollection().size());\r\n+        \r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        if ((empty & 2) > 0)\r\n+            assertEquals(0, pc.getOneManyCollection().size());\r\n+        else\r\n+            assertEquals(2, pc.getOneManyCollection().size());\r\n+        \r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertOneManyCollection(int empty) {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        EagerOuterJoinPC2 hpc;\r\n+        if ((empty & 1) == 0) {\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"1.1\");\r\n+            hpc.setRef(pc1);\r\n+            pc1.getOneManyCollection().add(hpc);\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"1.2\");\r\n+            hpc.setRef(pc1);\r\n+            pc1.getOneManyCollection().add(hpc);\r\n+        }\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        if ((empty & 2) == 0) {\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"2.1\");\r\n+            hpc.setRef(pc2);\r\n+            pc2.getOneManyCollection().add(hpc);\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"2.2\");\r\n+            hpc.setRef(pc2);\r\n+            pc2.getOneManyCollection().add(hpc);\r\n+        }\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testManyManyCollectionById() {\r\n+        Object oid = insertManyManyCollection();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyCollection().size());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testManyManyCollectionByQuery() {\r\n+        insertManyManyCollection();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyCollection().size());\r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyCollection().size());\r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertManyManyCollection() {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"1.1\");\r\n+        pc1.getManyManyCollection().add(hpc);\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"1.2\");\r\n+        pc1.getManyManyCollection().add(hpc);\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"2.1\");\r\n+        pc2.getManyManyCollection().add(hpc);\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"2.2\");\r\n+        pc2.getManyManyCollection().add(hpc);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testManyManyListById() {\r\n+        manyManyListByIdTest(false);\r\n+    }\r\n+    \r\n+    public void testEmptyManyManyListById() {\r\n+        manyManyListByIdTest(true);\r\n+    }\r\n+    \r\n+    private void manyManyListByIdTest(boolean empty) {\r\n+        Object oid = insertManyManyList((empty) ? 1 : 0);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if (empty)\r\n+            assertEquals(0, pc.getManyManyList().size());\r\n+        else {\r\n+            assertEquals(2, pc.getManyManyList().size());\r\n+            EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n+            pc.getManyManyList().get(0);\r\n+            assertEquals(\"1.1\", hpc.getName());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+            assertEquals(\"1.2\", hpc.getName());\r\n+        }\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testManyManyListByQuery() {\r\n+        manyManyListByQueryTest(0);\r\n+    }\r\n+    \r\n+    public void testEmptyManyManyListByQuery1() {\r\n+        manyManyListByQueryTest(1);\r\n+    }\r\n+    \r\n+    public void testEmptyManyManyListByQuery2() {\r\n+        manyManyListByQueryTest(2);\r\n+    }\r\n+    \r\n+    public void testEmptyManyManyListByQuery3() {\r\n+        manyManyListByQueryTest(3);\r\n+    }\r\n+    \r\n+    private void manyManyListByQueryTest(int empty) {\r\n+        insertManyManyList(empty);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        EagerOuterJoinPC2 hpc;\r\n+        if ((empty & 1) > 0)\r\n+            assertEquals(0, pc.getManyManyList().size());\r\n+        else {\r\n+            assertEquals(2, pc.getManyManyList().size());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n+            assertEquals(\"1.1\", hpc.getName());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+            assertEquals(\"1.2\", hpc.getName());\r\n+        }\r\n+        \r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        if ((empty & 2) > 0)\r\n+            assertEquals(0, pc.getManyManyList().size());\r\n+        else {\r\n+            assertEquals(2, pc.getManyManyList().size());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n+            assertEquals(\"2.1\", hpc.getName());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+            assertEquals(\"2.2\", hpc.getName());\r\n+        }\r\n+        \r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertManyManyList(int empty) {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        EagerOuterJoinPC2 hpc;\r\n+        if ((empty & 1) == 0) {\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"1.1\");\r\n+            pc1.getManyManyList().add(hpc);\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"1.2\");\r\n+            pc1.getManyManyList().add(hpc);\r\n+        }\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        if ((empty & 2) == 0) {\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"2.1\");\r\n+            pc2.getManyManyList().add(hpc);\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"2.2\");\r\n+            pc2.getManyManyList().add(hpc);\r\n+        }\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testTwoCollectionsInFetchGroupsById() {\r\n+        Object oid = insertTwoCollections();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringCollection().size());\r\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n+        pc.getManyManyList().get(0);\r\n+        assertEquals(\"1.1\", hpc.getName());\r\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"1.2\", hpc.getName());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testTwoCollectionsInFetchGroupsByQuery() {\r\n+        insertTwoCollections();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        \r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringCollection().size());\r\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n+        pc.getManyManyList().get(0);\r\n+        assertEquals(\"1.1\", hpc.getName());\r\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"1.2\", hpc.getName());\r\n+        \r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        assertEquals(2, pc.getStringCollection().size());\r\n+        assertTrue(pc.getStringCollection().contains(\"2.1\"));\r\n+        assertTrue(pc.getStringCollection().contains(\"2.2\"));\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n+        assertEquals(\"2.1\", hpc.getName());\r\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"2.2\", hpc.getName());\r\n+        \r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertTwoCollections() {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        pc1.getStringCollection().add(\"1.1\");\r\n+        pc1.getStringCollection().add(\"1.2\");\r\n+        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"1.1\");\r\n+        pc1.getManyManyList().add(hpc);\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"1.2\");\r\n+        pc1.getManyManyList().add(hpc);\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        pc2.getStringCollection().add(\"2.1\");\r\n+        pc2.getStringCollection().add(\"2.2\");\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"2.1\");\r\n+        pc2.getManyManyList().add(hpc);\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"2.2\");\r\n+        pc2.getManyManyList().add(hpc);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testQueryRandomAccess() {\r\n+        insertManyStringList();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n+        fetch.setFetchBatchSize(3);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        List results = (List) q.getResultList();\r\n+        assertEquals(10, results.size());\r\n+        \r\n+        for (int i = 5; i < results.size(); i++) {\r\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\r\n+            assertEquals(String.valueOf(i), pc.getName());\r\n+            assertEquals(2, pc.getStringList().size());\r\n+            assertEquals(i + \".1\", pc.getStringList().get(0));\r\n+            assertEquals(i + \".2\", pc.getStringList().get(1));\r\n+        }\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testQueryRange() {\r\n+        insertManyStringList();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n+        fetch.setFetchBatchSize(3);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        //q.setRange(5, 20);\r\n+        \r\n+        List results = (List) q.getResultList();\r\n+        assertEquals(5, results.size());\r\n+        \r\n+        for (int i = 0; i < results.size(); i++) {\r\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\r\n+            assertEquals(String.valueOf(i + 5), pc.getName());\r\n+            assertEquals(2, pc.getStringList().size());\r\n+            assertEquals((i + 5) + \".1\", pc.getStringList().get(0));\r\n+            assertEquals((i + 5) + \".2\", pc.getStringList().get(1));\r\n+        }\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void insertManyStringList() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        for (int i = 0; i < 10; i++) {\r\n+            EagerOuterJoinPC pc = new EagerOuterJoinPC();\r\n+            pc.setName(String.valueOf(i));\r\n+            pc.getStringList().add(i + \".1\");\r\n+            pc.getStringList().add(i + \".2\");\r\n+            pm.persist(pc);\r\n+        }\r\n+        endTx(pm);;\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testEagerToOneThenEagerToMany() {\r\n+        insertEagers();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC2.class, \"ref\");\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC2.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        assertEquals(new ArrayList(results).toString(), 2, results.size());\r\n+        \r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\r\n+        assertEquals(\"r1\", ref.getName());\r\n+        EagerOuterJoinPC pc = ref.getRef();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringCollection().size());\r\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        \r\n+        ref = (EagerOuterJoinPC2) itr.next();\r\n+        assertEquals(\"r2\", ref.getName());\r\n+        assertTrue(pc == ref.getRef());\r\n+        \r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testEagerToManyThenEagerToOne() {\r\n+        insertEagers();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        assertEquals(1, results.size());\r\n+        \r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\r\n+        pc.getManyManyList().get(0);\r\n+        assertEquals(\"r1\", ref.getName());\r\n+        assertEquals(\"h1\", ref.getHelper().getStringField());\r\n+        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"r2\", ref.getName());\r\n+        assertEquals(\"h2\", ref.getHelper().getStringField());\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testEagerToManyThenEagerToMany() {\r\n+        insertEagers();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        fetch.addField(EagerOuterJoinPC2.class, \"stringCollection\");\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        assertEquals(1, results.size());\r\n+        \r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\r\n+        pc.getManyManyList().get(0);\r\n+        assertEquals(\"r1\", ref.getName());\r\n+        assertEquals(2, ref.getStringCollection().size());\r\n+        assertTrue(ref.getStringCollection().contains(\"r1.1\"));\r\n+        assertTrue(ref.getStringCollection().contains(\"r1.2\"));\r\n+        \r\n+        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"r2\", ref.getName());\r\n+        assertEquals(2, ref.getStringCollection().size());\r\n+        assertTrue(ref.getStringCollection().contains(\"r2.1\"));\r\n+        assertTrue(ref.getStringCollection().contains(\"r2.2\"));\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testEagerToOneAndToManyThenEagerToOne() {\r\n+        Object oid = insertEagers();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n+        fetch.addField(EagerOuterJoinPC.class, \"helper\");\r\n+        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        assertEquals(1, results.size());\r\n+        \r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(\"h3\", pc.getHelper().getStringField());\r\n+        assertEquals(2, pc.getOneManyCollection().size());\r\n+        Iterator itr = pc.getOneManyCollection().iterator();\r\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\r\n+        if (\"r1\".equals(ref.getName())) {\r\n+            assertEquals(\"h1\", ref.getHelper().getStringField());\r\n+            ref = (EagerOuterJoinPC2) itr.next();\r\n+            assertEquals(\"r2\", ref.getName());\r\n+            assertEquals(\"h2\", ref.getHelper().getStringField());\r\n+        } else {\r\n+            assertEquals(\"r2\", ref.getName());\r\n+            assertEquals(\"h2\", ref.getHelper().getStringField());\r\n+            ref = (EagerOuterJoinPC2) itr.next();\r\n+            assertEquals(\"r1\", ref.getName());\r\n+            assertEquals(\"h1\", ref.getHelper().getStringField());\r\n+        }\r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertEagers() {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        pc1.getStringCollection().add(\"1.1\");\r\n+        pc1.getStringCollection().add(\"1.2\");\r\n+        \r\n+        EagerOuterJoinPC2 ref1 = new EagerOuterJoinPC2();\r\n+        ref1.setName(\"r1\");\r\n+        ref1.getStringCollection().add(\"r1.1\");\r\n+        ref1.getStringCollection().add(\"r1.2\");\r\n+        \r\n+        EagerOuterJoinPC2 ref2 = new EagerOuterJoinPC2();\r\n+        ref2.setName(\"r2\");\r\n+        ref2.getStringCollection().add(\"r2.1\");\r\n+        ref2.getStringCollection().add(\"r2.2\");\r\n+        \r\n+        HelperPC hpc1 = new HelperPC();\r\n+        hpc1.setStringField(\"h1\");\r\n+        \r\n+        HelperPC hpc2 = new HelperPC();\r\n+        hpc2.setStringField(\"h2\");\r\n+        \r\n+        HelperPC hpc3 = new HelperPC();\r\n+        hpc3.setStringField(\"h3\");\r\n+        \r\n+        pc1.getManyManyList().add(ref1);\r\n+        pc1.getOneManyCollection().add(ref1);\r\n+        ref1.setRef(pc1);\r\n+        pc1.getManyManyList().add(ref2);\r\n+        pc1.getOneManyCollection().add(ref2);\r\n+        ref2.setRef(pc1);\r\n+        \r\n+        ref1.setHelper(hpc1);\r\n+        ref2.setHelper(hpc2);\r\n+        pc1.setHelper(hpc3);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"9e0b90827b465013a0eb9d77091b8e6c1bfd9869","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,132 @@\n+/*\r\n+ * TestIntermediate.java\r\n+ *\r\n+ * Created on October 3, 2006, 12:01 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestIntermediate extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+    \r\n+    private Object _pc;\r\n+    private Object _rel;\r\n+    \r\n+    public TestIntermediate(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestIntermediate */\r\n+    public TestIntermediate() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        RuntimeTest1 pc = new RuntimeTest1(\"pc\", 1);\r\n+        RuntimeTest1 rel = new RuntimeTest1(\"rel\", 2);\r\n+        pc.setSelfOneOne(rel);\r\n+        \r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+        Broker broker = JPAFacadeHelper.toBroker(em);\r\n+        broker.begin();\r\n+        broker.persist(pc, null);\r\n+        broker.commit();\r\n+        _pc = broker.getObjectId(pc);\r\n+        _rel = broker.getObjectId(rel);\r\n+        broker.close();\r\n+        em.close();\r\n+    }\r\n+    \r\n+    public void testOneOneSetsIntermediate() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+        Broker broker = JPAFacadeHelper.toBroker(em);\r\n+        try {\r\n+            oneOneIntermediateTest(broker);\r\n+        } finally {\r\n+            broker.close();\r\n+            em.close();\r\n+        }\r\n+    }\r\n+    \r\n+    public void testDataCacheOneOneSetsIntermediate() {\r\n+        BrokerFactory factory = getBrokerFactory(new String[]{\r\n+            \"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+        });\r\n+        \r\n+        // get obj into cache\r\n+        Broker broker = factory.newBroker();\r\n+        try {\r\n+            broker.find(_pc, true, null);\r\n+        } finally {\r\n+            broker.close();\r\n+        }\r\n+        \r\n+        // test from cache\r\n+        broker = factory.newBroker();\r\n+        try {\r\n+            oneOneIntermediateTest(broker);\r\n+        } finally {\r\n+            broker.close();\r\n+            try {\r\n+                factory.close();\r\n+            } catch (Exception e) {\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Helper method to see that the one to one uses an intermediate values.\r\n+     */\r\n+    private void oneOneIntermediateTest(Broker broker) {\r\n+        RuntimeTest1 pc = (RuntimeTest1) broker.find(_pc, true, null);\r\n+        OpenJPAStateManager sm = broker.getStateManager(pc);\r\n+        assertNotNull(sm);\r\n+        FieldMetaData fmd = sm.getMetaData().getField(\"selfOneOne\");\r\n+        assertNotNull(fmd);\r\n+        assertEquals(_rel, sm.getIntermediate(fmd.getIndex()));\r\n+        assertEquals(_rel, broker.getObjectId(pc.getSelfOneOne()));\r\n+        assertNull(sm.getIntermediate(fmd.getIndex()));\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"36c8404721fc080e8806492d32b7a5f4f1d80d75","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","status":"added","additions":363,"deletions":0,"changes":363,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,363 @@\n+/*\r\n+ * TestIrregularJoins.java\r\n+ *\r\n+ * Created on October 3, 2006, 12:47 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.NonPKJoinPC2;\r\n+\r\n+\r\n+\r\n+public class TestIrregularJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+\r\n+    private Object _nonpk = null;\r\n+    private Object _nonpk3 = null;\r\n+    private Object _partial = null;\r\n+    private Object _partial3 = null;\r\n+    private Object _constant2 = null;\r\n+    private Object _constant3 = null;\r\n+\r\n+    public TestIrregularJoins(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestIrregularJoins */\r\n+    public TestIrregularJoins() {\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        // make sure these classes are registered since we're using metadata\r\n+        // values for the class indicator\r\n+        new ConstantJoinPC();\r\n+        new ConstantJoinPC2();\r\n+        new ConstantJoinPC3();\r\n+\r\n+       deleteAll(PartialJoinPC.class);\r\n+       deleteAll(NonPKJoinPC.class);\r\n+       deleteAll(ConstantJoinPC.class);\r\n+\r\n+        PartialJoinPC partial = new PartialJoinPC();\r\n+        partial.setPk1(1);\r\n+        partial.setPk2(2);\r\n+        PartialJoinPC2 partial2 = new PartialJoinPC2();\r\n+        partial2.setPk1(2);\r\n+        partial2.setPk2(3);\r\n+        PartialJoinPC3 partial3 = new PartialJoinPC3();\r\n+        partial3.setPk1(3);\r\n+        partial3.setPk2(4);\r\n+\r\n+        NonPKJoinPC nonpk = new NonPKJoinPC();\r\n+        nonpk.setId1(1);\r\n+        nonpk.setId2(2);\r\n+        NonPKJoinPC2 nonpk2 = new NonPKJoinPC2();\r\n+        nonpk2.setId1(2);\r\n+        nonpk2.setId2(3);\r\n+        NonPKJoinPC3 nonpk3 = new NonPKJoinPC3();\r\n+        nonpk3.setId1(3);\r\n+        nonpk3.setId2(4);\r\n+\r\n+        partial.setNonPK(nonpk);\r\n+        partial.getNonPKs().add(nonpk);\r\n+        nonpk.setPartial(partial);\r\n+        nonpk.getPartials().add(partial);\r\n+\r\n+        partial3.setNonPK(nonpk);\r\n+        partial3.setNonPK3(nonpk3);\r\n+        partial3.getNonPKs().add(nonpk);\r\n+        partial3.getNonPK2s().add(nonpk2);\r\n+        nonpk3.setPartial(partial);\r\n+        nonpk3.setPartial3(partial3);\r\n+        nonpk3.getPartials().add(partial);\r\n+        nonpk3.getPartial2s().add(partial2);\r\n+\r\n+        ConstantJoinPC2 constant2 = new ConstantJoinPC2();\r\n+        constant2.setPk1(1);\r\n+        constant2.setPk2(2);\r\n+        constant2.setNonPK(nonpk3);\r\n+        constant2.setNonPK2(nonpk3);\r\n+\r\n+        // set the object's inverse on diff objects so we can be sure\r\n+        // that its 1-many includes only the object with the right constant\r\n+        nonpk.setConstant(constant2);\r\n+        nonpk2.setConstant(constant2);\r\n+        nonpk3.setConstant(constant2);\r\n+\r\n+        ConstantJoinPC3 constant3 = new ConstantJoinPC3();\r\n+        constant3.setPk1(1);\r\n+        constant3.setPk2(3);\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+        pm.persist(partial);\r\n+        pm.persist(partial3);\r\n+        pm.persist(constant2);\r\n+        pm.persist(constant3);\r\n+        endTx(pm);\r\n+        _partial = pm.getObjectId(partial);\r\n+        _partial3 = pm.getObjectId(partial3);\r\n+        _nonpk = pm.getObjectId(nonpk);\r\n+        _nonpk3 = pm.getObjectId(nonpk3);\r\n+        _constant2 = pm.getObjectId(constant2);\r\n+        _constant3 = pm.getObjectId(constant3);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testNonPKOneOne() {\r\n+        \r\n+        nonPKOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerNonPKOneOne() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPK\");\r\n+        nonPKOneOne(pm);\r\n+    }\r\n+\r\n+    private void nonPKOneOne(OpenJPAEntityManager pm) {\r\n+        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\r\n+        NonPKJoinPC nonpk = partial.getNonPK();\r\n+        assertEquals(1, nonpk.getId1());\r\n+        assertEquals(2, nonpk.getId2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testPartialOneOne() {\r\n+        partialOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerPartialOneOne() {\r\n+        \r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"partial\");\r\n+        partialOneOne(pm);\r\n+    }\r\n+\r\n+    private void partialOneOne(OpenJPAEntityManager pm) {\r\n+        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\r\n+        PartialJoinPC partial = nonpk.getPartial();\r\n+        assertEquals(1, partial.getPk1());\r\n+        assertEquals(2, partial.getPk2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalNonPKOneOne() {\r\n+        verticalNonPKOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerVerticalNonPKOneOne() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPK3\");\r\n+        verticalNonPKOneOne(pm);\r\n+    }\r\n+\r\n+    private void verticalNonPKOneOne(OpenJPAEntityManager pm) {\r\n+        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\r\n+        NonPKJoinPC nonpk = partial3.getNonPK();\r\n+        assertEquals(1, nonpk.getId1());\r\n+        assertEquals(2, nonpk.getId2());\r\n+        NonPKJoinPC3 nonpk3 = partial3.getNonPK3();\r\n+        assertEquals(3, nonpk3.getId1());\r\n+        assertEquals(4, nonpk3.getId2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalPartialOneOne() {\r\n+        verticalPartialOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerVerticalPartialOneOne() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"partial3\");\r\n+        verticalPartialOneOne(pm);\r\n+    }\r\n+\r\n+    private void verticalPartialOneOne(OpenJPAEntityManager pm) {\r\n+        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\r\n+        PartialJoinPC partial = nonpk3.getPartial();\r\n+        assertEquals(1, partial.getPk1());\r\n+        assertEquals(2, partial.getPk2());\r\n+        PartialJoinPC3 partial3 = nonpk3.getPartial3();\r\n+        assertEquals(3, partial3.getPk1());\r\n+        assertEquals(4, partial3.getPk2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testNonPKManyMany() {\r\n+        nonPKManyMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerNonPKManyMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\r\n+        nonPKManyMany(pm);\r\n+    }\r\n+\r\n+    private void nonPKManyMany(OpenJPAEntityManager pm) {\r\n+        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\r\n+        Collection nonpks = partial.getNonPKs();\r\n+        assertEquals(1, nonpks.size());\r\n+        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\r\n+        assertEquals(1, nonpk.getId1());\r\n+        assertEquals(2, nonpk.getId2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testPartialManyMany() {\r\n+        partialManyMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerPartialManyMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"partials\");\r\n+        partialManyMany(pm);\r\n+    }\r\n+\r\n+    private void partialManyMany(OpenJPAEntityManager pm) {\r\n+        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\r\n+        Collection partials = nonpk.getPartials();\r\n+        assertEquals(1, partials.size());\r\n+        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\r\n+        assertEquals(1, partial.getPk1());\r\n+        assertEquals(2, partial.getPk2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalNonPKManyMany() {\r\n+        verticalNonPKManyMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerVerticalNonPKManyMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPK2s\");\r\n+        verticalNonPKManyMany(pm);\r\n+    }\r\n+\r\n+    private void verticalNonPKManyMany(OpenJPAEntityManager pm) {\r\n+        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\r\n+        Collection nonpks = partial3.getNonPKs();\r\n+        assertEquals(1, nonpks.size());\r\n+        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\r\n+        assertEquals(1, nonpk.getId1());\r\n+        assertEquals(2, nonpk.getId2());\r\n+        Collection nonpk2s = partial3.getNonPK2s();\r\n+        assertEquals(1, nonpk2s.size());\r\n+        NonPKJoinPC2 nonpk2 = (NonPKJoinPC2) nonpk2s.iterator().next();\r\n+        assertEquals(2, nonpk2.getId1());\r\n+        assertEquals(3, nonpk2.getId2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalPartialManyMany() {\r\n+        verticalPartialManyMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerVerticalPartialManyMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"partial2s\");\r\n+        verticalPartialManyMany(pm);\r\n+    }\r\n+\r\n+    private void verticalPartialManyMany(OpenJPAEntityManager pm) {\r\n+        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\r\n+        Collection partials = nonpk3.getPartials();\r\n+        assertEquals(1, partials.size());\r\n+        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\r\n+        assertEquals(1, partial.getPk1());\r\n+        assertEquals(2, partial.getPk2());\r\n+        Collection partial2s = nonpk3.getPartial2s();\r\n+        assertEquals(1, partial2s.size());\r\n+        PartialJoinPC2 partial2 = (PartialJoinPC2) partial2s.iterator().next();\r\n+        assertEquals(2, partial2.getPk1());\r\n+        assertEquals(3, partial2.getPk2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalConstant() {\r\n+        \r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n+        assertEquals(1, constant2.getPk1());\r\n+        assertEquals(2, constant2.getPk2());\r\n+        ConstantJoinPC3 constant3 = (ConstantJoinPC3) pm.getObjectId(_constant3);\r\n+        assertEquals(1, constant3.getPk1());\r\n+        assertEquals(3, constant3.getPk2());\r\n+    }\r\n+\r\n+    public void testConstantOneOne() {\r\n+        constantOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerConstantOneOne() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPK\");\r\n+        constantOneOne(pm);\r\n+    }\r\n+\r\n+    private void constantOneOne(OpenJPAEntityManager pm) {\r\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n+\r\n+        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK()));\r\n+        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK2()));\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testConstantOneMany() {\r\n+        constantOneMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerConstantOneMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\r\n+        constantOneMany(pm);\r\n+    }\r\n+\r\n+    private void constantOneMany(OpenJPAEntityManager pm) {\r\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n+\r\n+        Collection nonpks = constant2.getNonPKs();\r\n+        assertEquals(1, nonpks.size());\r\n+        assertEquals(_nonpk, pm.getObjectId\r\n+            (nonpks.iterator().next()));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+}\r"},{"sha":"9830b7f9ec9051815a2f28a56653a7addafdd6b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * TestJDBCType.java\r\n+ *\r\n+ * Created on October 3, 2006, 4:11 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.meta.RefreshStrategyInstaller;\r\n+import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\r\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+\r\n+public class TestJDBCType extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\t\r\n+    /** Creates a new instance of TestJDBCType */\r\n+    public TestJDBCType(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    /**\r\n+     * Tests that application identity classes are returned correctly.\r\n+     */\r\n+    public void testSchemaGeneration() {\r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        MappingRepository repos = conf.getMappingRepositoryInstance();\r\n+        repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\r\n+        ClassMapping mapping = repos.getMapping(Column.class, null, true);\r\n+\r\n+        Class cls;\r\n+        if (dict.getPreferredType(JavaSQLTypes.CLOB) ==  JavaSQLTypes.CLOB) {\r\n+            if (dict.maxEmbeddedClobSize > 0) {\r\n+                cls = mapping.getFieldMapping(\"toClob\").getStrategy().\r\n+                    getClass();\r\n+                assertTrue(cls.getName(),\r\n+                    MaxEmbeddedClobFieldStrategy.class.isAssignableFrom(cls));\r\n+            } else {\r\n+                cls = mapping.getFieldMapping(\"toClob\").getHandler().\r\n+                    getClass();\r\n+                assertTrue(cls.getName(),\r\n+                    ClobValueHandler.class.isAssignableFrom(cls));\r\n+            }\r\n+        } else\r\n+            assertTrue(mapping.getFieldMapping(\"toClob\").getStrategy()\r\n+                instanceof StringFieldStrategy);\r\n+\r\n+        cls = mapping.getFieldMapping(\"toBlob\").getHandler().getClass();\r\n+        assertTrue(cls.getName(),\r\n+            BlobValueHandler.class.isAssignableFrom(cls));\r\n+\r\n+        SchemaGroup schema = repos.getSchemaGroup();\r\n+        Table table = schema.getSchemas()[0].getTables()[0];\r\n+        Column[] cols = table.getColumns();\r\n+        for (int i = 0; i < cols.length; i++) {\r\n+            if (cols[i].getName().equalsIgnoreCase(\"id\")\r\n+                || cols[i].getName().equalsIgnoreCase(\"versn\")\r\n+                || cols[i].getName().equalsIgnoreCase(\"typ\"))\r\n+                continue;\r\n+            if (\"longToInt\".equalsIgnoreCase(cols[i].getName()))\r\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.INT),\r\n+                    cols[i].getType());\r\n+            else if (\"longToSQL\".equalsIgnoreCase(cols[i].getName()))\r\n+                assertEquals(\"varchar\", cols[i].getTypeName());\r\n+            else if (\"toClob\".equalsIgnoreCase(cols[i].getName()))\r\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.CLOB),\r\n+                    cols[i].getType());\r\n+            else if (\"toBlob\".equalsIgnoreCase(cols[i].getName()))\r\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.BLOB),\r\n+                    cols[i].getType());\r\n+            else\r\n+                fail(\"Unknown column:\" + cols[i].getName());\r\n+        }\r\n+    }    \r\n+}\r"},{"sha":"70d8090b4eec22424b4b45de7bd1e42de082fe95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * TestJoinToBaseClass.java\r\n+ *\r\n+ * Created on October 3, 2006, 4:19 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestJoinToBaseClass extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    \r\n+    \r\n+    /** Creates a new instance of TestJoinToBaseClass */\r\n+    public TestJoinToBaseClass(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void testMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) getConfiguration()).\r\n+            getMappingRepositoryInstance().\r\n+            getMapping(MappingTest5.class, null, true);\r\n+\r\n+        Table supTable = mapping.getPCSuperclassMapping().getTable();\r\n+        assertTrue(mapping.getTable() != supTable);\r\n+        FieldMapping field = mapping.getFieldMapping(\"vertRel\");\r\n+        ForeignKey fk = field.getForeignKey();\r\n+        assertEquals(mapping.getTable(), fk.getTable());\r\n+        assertEquals(supTable, fk.getPrimaryKeyTable());\r\n+        Column[] cols = field.getColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(\"V1\", cols[0].getName());\r\n+        assertEquals(\"V2\", cols[1].getName());\r\n+    }\r\n+\r\n+    public void testConstraintAnalysis() {\r\n+        //FIXME jthomas\r\n+        //PersistenceManagerFactory factory = getPMFactory(new String[]{\r\n+          //  \"openjpa.jdbc.SchemaFactory\", \"native(ForeignKeys=true)\",\r\n+        //});\r\n+        OpenJPAEntityManagerFactory factory=null;\r\n+        OpenJPAEntityManager pm = factory.createEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+       deleteAll( MappingTest1.class,pm);\r\n+       deleteAll( MappingTest2.class,pm);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = factory.createEntityManager();\r\n+        startTx(pm);\r\n+        for (int i = 0; i < 10; i++) {\r\n+            MappingTest5 pc1 = new MappingTest5();\r\n+            pc1.setPk1(i);\r\n+            pc1.setPk2(i + 1);\r\n+            MappingTest5 pc2 = new MappingTest5();\r\n+            pc2.setPk1(i + 10);\r\n+            pc2.setPk2(i + 11);\r\n+            pc1.setVertRel(pc2);\r\n+            pc2.setVertRel(pc1);\r\n+            pm.persist(pc1);\r\n+        }\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        assertSizes(20, MappingTest5.class);\r\n+\r\n+        pm = factory.createEntityManager();\r\n+        startTx(pm);\r\n+        deleteAll(MappingTest2.class,pm);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    private void assertSizes(int size, Class cls) {\r\n+        assertSize(size, currentEntityManager().createExtent(cls, true).list());\r\n+    }\r\n+}\r"},{"sha":"fc104775cdadec42c2bb866335d4c2663f7899f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","status":"added","additions":601,"deletions":0,"changes":601,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,601 @@\n+/*\r\n+ * TestLRSProxies.java\r\n+ *\r\n+ * Created on October 3, 2006, 5:01 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestLRSProxies extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+   \r\n+    private Object _oid = null;\r\n+    private Object _coid = null;\r\n+    \r\n+    public TestLRSProxies(String casename) {\r\n+        super(casename);\r\n+    }\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestLRSProxies */\r\n+    public TestLRSProxies() {\r\n+    }\r\n+    public void setUp() {\r\n+       deleteAll(LRSPC.class);\r\n+       deleteAll(LRSCompoundPC.class);\r\n+        \r\n+        LRSPC pc = new LRSPC(\"main\");\r\n+        \r\n+        pc.getStringSet().add(\"val1\");\r\n+        pc.getStringSet().add(\"val2\");\r\n+        pc.getStringSet().add(\"val3\");\r\n+        \r\n+        pc.getRelSet().add(new LRSPC(\"set1\"));\r\n+        pc.getRelSet().add(new LRSPC(\"set2\"));\r\n+        pc.getRelSet().add(new LRSPC(\"set3\"));\r\n+        \r\n+        pc.getStringCollection().add(\"val1\");\r\n+        pc.getStringCollection().add(\"val2\");\r\n+        pc.getStringCollection().add(\"val3\");\r\n+        \r\n+        pc.getRelCollection().add(new LRSPC(\"set1\"));\r\n+        pc.getRelCollection().add(new LRSPC(\"set2\"));\r\n+        pc.getRelCollection().add(new LRSPC(\"set3\"));\r\n+        \r\n+        pc.getStringMap().put(\"key1\", \"1\");\r\n+        pc.getStringMap().put(\"key2\", \"2\");\r\n+        pc.getStringMap().put(\"key3\", \"3\");\r\n+        \r\n+        pc.getRelMap().put(\"key1\", new LRSPC(\"map1\"));\r\n+        pc.getRelMap().put(\"key2\", new LRSPC(\"map2\"));\r\n+        pc.getRelMap().put(\"key3\", new LRSPC(\"map3\"));\r\n+        \r\n+        LRSCompoundPC cpc = new LRSCompoundPC(\"main\");\r\n+        \r\n+        cpc.getStringSet().add(\"val1\");\r\n+        cpc.getStringSet().add(\"val2\");\r\n+        cpc.getStringSet().add(\"val3\");\r\n+        \r\n+        cpc.getRelSet().add(new LRSCompoundPC(\"set1\"));\r\n+        cpc.getRelSet().add(new LRSCompoundPC(\"set2\"));\r\n+        cpc.getRelSet().add(new LRSCompoundPC(\"set3\"));\r\n+        \r\n+        cpc.getStringCollection().add(\"val1\");\r\n+        cpc.getStringCollection().add(\"val2\");\r\n+        cpc.getStringCollection().add(\"val3\");\r\n+        \r\n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set1\"));\r\n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set2\"));\r\n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set3\"));\r\n+        \r\n+        cpc.getStringMap().put(\"key1\", \"1\");\r\n+        cpc.getStringMap().put(\"key2\", \"2\");\r\n+        cpc.getStringMap().put(\"key3\", \"3\");\r\n+        \r\n+        cpc.getRelMap().put(\"key1\", new LRSCompoundPC(\"map1\"));\r\n+        cpc.getRelMap().put(\"key2\", new LRSCompoundPC(\"map2\"));\r\n+        cpc.getRelMap().put(\"key3\", new LRSCompoundPC(\"map3\"));\r\n+        \r\n+        \r\n+        \r\n+        OpenJPAEntityManager pm = getEm(false, false);\r\n+        \r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(cpc);\r\n+        endTx(pm);\r\n+        _oid = pm.getObjectId(pc);\r\n+        _coid = pm.getObjectId(cpc);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testStringSet() {\r\n+        stringCollectionTest(_oid, true, true);\r\n+        stringCollectionTest(_coid, true, true);\r\n+    }\r\n+    \r\n+    public void testStringSetRetain() {\r\n+        stringCollectionTest(_oid, false, true);\r\n+        stringCollectionTest(_coid, false, true);\r\n+    }\r\n+    \r\n+    public void testStringCollection() {\r\n+        stringCollectionTest(_oid, true, false);\r\n+        stringCollectionTest(_coid, true, false);\r\n+    }\r\n+    \r\n+    public void testStringCollectionRetain() {\r\n+        stringCollectionTest(_oid, false, false);\r\n+        stringCollectionTest(_coid, false, false);\r\n+    }\r\n+    \r\n+    private void stringCollectionTest(Object oid, boolean close,\r\n+            boolean isSet) {\r\n+        //FIXME jthomas\r\n+        //PersistenceManager pm = getPM(!close, !close);\r\n+        OpenJPAEntityManager pm =null;\r\n+        startTx(pm);\r\n+        \r\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        \r\n+        // check that orig values are correct\r\n+        Collection set = isSet ? pc.getStringSet() : pc.getStringCollection();\r\n+        assertEquals(3, set.size());\r\n+        assertTrue(set.contains(\"val1\"));\r\n+        assertTrue(set.contains(\"val2\"));\r\n+        assertTrue(set.contains(\"val3\"));\r\n+        if (!isSet) {\r\n+            Iterator itr = set.iterator();\r\n+            assertEquals(\"val1\", itr.next());\r\n+            assertEquals(\"val2\", itr.next());\r\n+            assertEquals(\"val3\", itr.next());\r\n+            //FIXME jthomas\r\n+            //KodoJDOHelper.close(itr);\r\n+        }\r\n+        \r\n+        // do some mods to try to confuse the proxy\r\n+        set.remove(\"val1\");\r\n+        set.remove(\"val1\");\r\n+        set.add(\"val4\");\r\n+        set.remove(\"val4\");\r\n+        set.add(\"val5\");\r\n+        set.add(\"val6\");\r\n+        assertStringCollectionChanged(set, isSet);\r\n+        endTx(pm);\r\n+        if (close) {\r\n+            pm.close();\r\n+            pm = getEm(false, false);\r\n+        }\r\n+        \r\n+        // re-retrieve and check set\r\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        set = isSet ? pc.getStringSet() : pc.getStringCollection();\r\n+        assertStringCollectionChanged(set, isSet);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertStringCollectionChanged(Collection set, boolean isSet) {\r\n+        assertEquals(4, set.size());\r\n+        assertTrue(!set.contains(\"val1\"));\r\n+        assertTrue(set.contains(\"val2\"));\r\n+        assertTrue(set.contains(\"val3\"));\r\n+        assertTrue(!set.contains(\"val4\"));\r\n+        assertTrue(set.contains(\"val5\"));\r\n+        assertTrue(set.contains(\"val6\"));\r\n+        if (!isSet) {\r\n+            Iterator itr = set.iterator();\r\n+            assertEquals(\"val2\", itr.next());\r\n+            assertEquals(\"val3\", itr.next());\r\n+            assertEquals(\"val5\", itr.next());\r\n+            assertEquals(\"val6\", itr.next());\r\n+            assertTrue(!itr.hasNext());\r\n+            //FIXME jthomas\r\n+            //KodoJDOHelper.close(itr);\r\n+        }\r\n+    }\r\n+    \r\n+    public void testStringMap() {\r\n+        stringMapTest(_oid, true);\r\n+        stringMapTest(_coid, true);\r\n+    }\r\n+    \r\n+    public void testStringMapRetain() {\r\n+        stringMapTest(_oid, false);\r\n+        stringMapTest(_coid, false);\r\n+    }\r\n+    \r\n+    private void stringMapTest(Object oid, boolean close) {\r\n+        OpenJPAEntityManager pm = getEm(!close, !close);\r\n+        startTx(pm);\r\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        \r\n+        // check that orig values are correct\r\n+        Map map = pc.getStringMap();\r\n+        assertEquals(3, map.size());\r\n+        assertEquals(\"1\", map.get(\"key1\"));\r\n+        assertEquals(\"2\", map.get(\"key2\"));\r\n+        assertEquals(\"3\", map.get(\"key3\"));\r\n+        \r\n+        // do some mods to try to confuse the proxy\r\n+        map.put(\"key1\", \"1a\");\r\n+        map.put(\"key1\", \"1b\");\r\n+        map.put(\"key2\", \"4\");\r\n+        map.remove(\"key2\");\r\n+        map.remove(\"foo\");\r\n+        map.put(\"key5\", \"5\");\r\n+        assertStringMapChanged(map);\r\n+        endTx(pm);\r\n+        \r\n+        if (close) {\r\n+            pm.close();\r\n+            pm = getEm(false, false);\r\n+        }\r\n+        \r\n+        // re-retrieve and check map\r\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        map = pc.getStringMap();\r\n+        assertStringMapChanged(map);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertStringMapChanged(Map map) {\r\n+        assertEquals(3, map.size());\r\n+        assertEquals(\"1b\", map.get(\"key1\"));\r\n+        assertEquals(\"3\", map.get(\"key3\"));\r\n+        assertEquals(\"5\", map.get(\"key5\"));\r\n+        assertNull(map.get(\"key2\"));\r\n+        assertTrue(map.containsKey(\"key1\"));\r\n+        assertFalse(map.containsKey(\"key2\"));\r\n+        assertTrue(map.containsValue(\"5\"));\r\n+        assertFalse(map.containsValue(\"1\"));\r\n+        \r\n+        Iterator itr = map.entrySet().iterator();\r\n+        Map.Entry entry;\r\n+        int count = 0;\r\n+        for (; itr.hasNext(); count++) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            if (entry.getKey().equals(\"key1\"))\r\n+                assertEquals(\"1b\", entry.getValue());\r\n+            else if (entry.getKey().equals(\"key3\"))\r\n+                assertEquals(\"3\", entry.getValue());\r\n+            else if (entry.getKey().equals(\"key5\"))\r\n+                assertEquals(\"5\", entry.getValue());\r\n+            else\r\n+                fail(\"Bad key: \" + entry.getKey());\r\n+        }\r\n+        assertEquals(3, count);\r\n+        //FIXME\r\n+        //KodoJDOHelper.close(itr);\r\n+    }\r\n+    \r\n+    public void testRelSet() {\r\n+        relCollectionTest(_oid, true, true);\r\n+        relCollectionTest(_coid, true, true);\r\n+    }\r\n+    \r\n+    public void testRelSetRetain() {\r\n+        relCollectionTest(_oid, false, true);\r\n+        relCollectionTest(_coid, false, true);\r\n+    }\r\n+    \r\n+    public void testRelCollection() {\r\n+        relCollectionTest(_oid, true, false);\r\n+        relCollectionTest(_coid, true, false);\r\n+    }\r\n+    \r\n+    public void testRelCollectionRetain() {\r\n+        relCollectionTest(_oid, false, false);\r\n+        relCollectionTest(_coid, false, false);\r\n+    }\r\n+    \r\n+    private void relCollectionTest(Object oid, boolean close, boolean isSet) {\r\n+        OpenJPAEntityManager pm = getEm(!close, !close);\r\n+        startTx(pm);\r\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        \r\n+        // check that orig values are correct\r\n+        Collection set = isSet ? pc.getRelSet() : pc.getRelCollection();\r\n+        assertEquals(3, set.size());\r\n+        Collection ordered = new TreeSet();\r\n+        Iterator itr = set.iterator();\r\n+        ordered.add(itr.next());\r\n+        ordered.add(itr.next());\r\n+        ordered.add(itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+        //FIXME\r\n+        //KodoJDOHelper.close(itr);\r\n+        itr = ordered.iterator();\r\n+        LRSPCIntf set1 = (LRSPCIntf) itr.next();\r\n+        if (!isSet) {\r\n+            LRSPCIntf set2 = (LRSPCIntf) itr.next();\r\n+            LRSPCIntf set3 = (LRSPCIntf) itr.next();\r\n+            assertEquals(\"set1\", set1.getStringField());\r\n+            assertEquals(\"set2\", set2.getStringField());\r\n+            assertEquals(\"set3\", set3.getStringField());\r\n+        }\r\n+        assertTrue(set.contains(set1));\r\n+        assertFalse(set.contains(pc));\r\n+        \r\n+        // do some mods to try to confuse the proxy\r\n+        set.remove(set1);\r\n+        set.remove(set1);\r\n+        LRSPCIntf set4 = pc.newInstance(\"set4\");\r\n+        set.add(set4);\r\n+        set.remove(set4);\r\n+        LRSPCIntf set5 = pc.newInstance(\"set5\");\r\n+        set.add(set5);\r\n+        assertRelCollectionChanged(pc, isSet);\r\n+        endTx(pm);\r\n+        \r\n+        if (close) {\r\n+            pm.close();\r\n+            pm = getEm(false, false);\r\n+        }\r\n+        \r\n+        // re-retrieve and check set\r\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        assertRelCollectionChanged(pc, isSet);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertRelCollectionChanged(LRSPCIntf pc, boolean isSet) {\r\n+        Collection set = isSet ? pc.getRelSet() : pc.getRelCollection();\r\n+        assertEquals(3, set.size());\r\n+        Collection ordered = new TreeSet();\r\n+        Iterator itr = set.iterator();\r\n+        ordered.add(itr.next());\r\n+        ordered.add(itr.next());\r\n+        ordered.add(itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+        //FIXME\r\n+        //KodoJDOHelper.close(itr);\r\n+        itr = ordered.iterator();\r\n+        LRSPCIntf set2 = (LRSPCIntf) itr.next();\r\n+        if (!isSet) {\r\n+            LRSPCIntf set3 = (LRSPCIntf) itr.next();\r\n+            LRSPCIntf set5 = (LRSPCIntf) itr.next();\r\n+            assertEquals(\"set2\", set2.getStringField());\r\n+            assertEquals(\"set3\", set3.getStringField());\r\n+            assertEquals(\"set5\", set5.getStringField());\r\n+        }\r\n+        assertTrue(set.contains(set2));\r\n+        assertFalse(set.contains(pc));\r\n+    }\r\n+    \r\n+    public void testRelMap() {\r\n+        relMapTest(_oid, true);\r\n+        relMapTest(_coid, true);\r\n+    }\r\n+    \r\n+    public void testRelMapRetain() {\r\n+        relMapTest(_oid, false);\r\n+        relMapTest(_coid, false);\r\n+    }\r\n+    \r\n+    private void relMapTest(Object oid, boolean close) {\r\n+        OpenJPAEntityManager pm = getEm(!close, !close);\r\n+        startTx(pm);\r\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        \r\n+        // check that orig values are correct\r\n+        Map map = pc.getRelMap();\r\n+        assertEquals(3, map.size());\r\n+        LRSPCIntf map1 = (LRSPCIntf) map.get(\"key1\");\r\n+        LRSPCIntf map2 = (LRSPCIntf) map.get(\"key2\");\r\n+        LRSPCIntf map3 = (LRSPCIntf) map.get(\"key3\");\r\n+        assertEquals(\"map1\", map1.getStringField());\r\n+        assertEquals(\"map2\", map2.getStringField());\r\n+        assertEquals(\"map3\", map3.getStringField());\r\n+        assertTrue(map.containsKey(\"key1\"));\r\n+        assertFalse(map.containsKey(\"key4\"));\r\n+        assertTrue(map.containsValue(map1));\r\n+        assertFalse(map.containsValue(pc));\r\n+        \r\n+        // do some mods to try to confuse the proxy\r\n+        LRSPCIntf map1a = pc.newInstance(\"map1a\");\r\n+        map.put(\"key1\", map1a);\r\n+        LRSPCIntf map1b = pc.newInstance(\"map1b\");\r\n+        map.put(\"key1\", map1b);\r\n+        map.remove(\"key2\");\r\n+        map.put(\"key4\", pc.newInstance(\"map4\"));\r\n+        map.remove(\"key4\");\r\n+        map.remove(\"foo\");\r\n+        map.put(\"key5\", pc.newInstance(\"map5\"));\r\n+        assertRelMapChanged(pc);\r\n+        endTx(pm);\r\n+        \r\n+        if (close) {\r\n+            pm.close();\r\n+            pm = getEm(false, false);\r\n+        }\r\n+        \r\n+        // re-retrieve and check map\r\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        assertRelMapChanged(pc);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertRelMapChanged(LRSPCIntf pc) {\r\n+        Map map = pc.getRelMap();\r\n+        assertEquals(3, map.size());\r\n+        LRSPCIntf map1b = (LRSPCIntf) map.get(\"key1\");\r\n+        LRSPCIntf map3 = (LRSPCIntf) map.get(\"key3\");\r\n+        LRSPCIntf map5 = (LRSPCIntf) map.get(\"key5\");\r\n+        assertEquals(\"map1b\", map1b.getStringField());\r\n+        assertEquals(\"map3\", map3.getStringField());\r\n+        assertEquals(\"map5\", map5.getStringField());\r\n+        assertTrue(map.containsKey(\"key1\"));\r\n+        assertFalse(map.containsKey(\"key2\"));\r\n+        assertTrue(map.containsValue(map1b));\r\n+        assertFalse(map.containsValue(pc));\r\n+        \r\n+        Iterator itr = map.entrySet().iterator();\r\n+        Map.Entry entry;\r\n+        int count = 0;\r\n+        for (; itr.hasNext(); count++) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            if (entry.getKey().equals(\"key1\"))\r\n+                assertEquals(map1b, entry.getValue());\r\n+            else if (entry.getKey().equals(\"key3\"))\r\n+                assertEquals(map3, entry.getValue());\r\n+            else if (entry.getKey().equals(\"key5\"))\r\n+                assertEquals(map5, entry.getValue());\r\n+            else\r\n+                fail(\"Bad key: \" + entry.getKey());\r\n+        }\r\n+        assertEquals(3, count);\r\n+        //FIXME\r\n+        //KodoJDOHelper.close(itr);\r\n+    }\r\n+    \r\n+    public void testTransfer() {\r\n+        // cannot transfer an lrs from one field to another\r\n+        \r\n+        OpenJPAEntityManager pm = getEm(true, true);\r\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+        LRSPC map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n+        assertNotNull(map1);\r\n+        \r\n+        startTx(pm);\r\n+        Map map = pc.getRelMap();\r\n+        pc.setRelMap(null);\r\n+        map1.setRelMap(map);\r\n+        \r\n+        try {\r\n+            endTx(pm);\r\n+            fail(\"Allowed transfer of lrs field\");\r\n+        } catch (Exception jue) {\r\n+        }\r\n+        if (pm.getTransaction().isActive())\r\n+            pm.getTransaction().rollback();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testShare() {\r\n+        OpenJPAEntityManager pm = getEm(true, true);\r\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+        LRSPC map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n+        assertNotNull(map1);\r\n+        \r\n+        startTx(pm);\r\n+        Map map = pc.getRelMap();\r\n+        map1.setRelMap(map);\r\n+        endTx(pm);\r\n+        assertTrue(pc.getRelMap() != map1.getRelMap());\r\n+        assertEquals(3, map1.getRelMap().size());\r\n+        assertTrue(map1.getRelMap().containsValue(map1));\r\n+        pm.close();\r\n+        \r\n+        // make sure it sticks\r\n+        pm = getEm(true, true);\r\n+        pc = (LRSPC) pm.getObjectId(_oid);\r\n+        map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n+        assertEquals(map1, map1.getRelMap().get(\"key1\"));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testRollback() {\r\n+        //FIXME\r\n+        //PersistenceManagerFactory factory = getPMFactory(new String[]{\r\n+        //    \"openjpa.RestoreMutableValues\", \"true\",\r\n+        //});\r\n+        OpenJPAEntityManagerFactory factory =null;\r\n+        OpenJPAEntityManager pm = factory.createEntityManager();\r\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+        startTx(pm);\r\n+        pc.getStringCollection().remove(\"val2\");\r\n+        pc.getStringCollection().add(\"val4\");\r\n+        rollbackTx(pm);\r\n+        assertTrue(pc.getStringCollection().contains(\"val2\"));\r\n+        assertFalse(pc.getStringCollection().contains(\"val4\"));\r\n+        pm.close();\r\n+        factory.close();\r\n+    }\r\n+    \r\n+    public void testReplace() {\r\n+        OpenJPAEntityManager pm = getEm(false, false);\r\n+        startTx(pm);\r\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+        \r\n+        // totally replace set\r\n+        Collection set = new HashSet();\r\n+        set.add(\"new\");\r\n+        pc.setStringCollection(set);\r\n+        \r\n+        endTx(pm);\r\n+        pm.close();\r\n+        \r\n+        // re-retrieve and check set\r\n+        pm = getEm(false, false);\r\n+        pc = (LRSPC) pm.getObjectId(_oid);\r\n+        \r\n+        set = pc.getStringCollection();\r\n+        assertEquals(1, set.size());\r\n+        assertTrue(set.contains(\"new\"));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testAdd()\r\n+    throws Exception {\r\n+/*\r\n+        //FIXME\r\n+        //KodoPersistenceManagerFactory pmf = getPMFactory(new String []{\r\n+        //    \"openjpa.jdbc.JDBCListeners\", Listener.class.getName(),\r\n+        //});\r\n+        OpenJPAEntityManagerFactory pmf =null;\r\n+        JDBCConfiguration conf = (JDBCConfiguration) pmf.getConfiguration();\r\n+        //FIXME need to fix inner class\r\n+        //Listener l = (Listener) conf.getJDBCListenerInstances()[0];\r\n+        OpenJPAEntityManager pm = pmf.createEntityManager();\r\n+        try {\r\n+            startTx(pm);\r\n+            LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+            l.count = 0;\r\n+            pc.getStringCollection().add(\"testAddStringValue\");\r\n+            endTx(pm);\r\n+            assertEquals(3, l.count);\r\n+        } catch (Exception e) {\r\n+            if (pm.getTransaction().isActive())\r\n+                pm.getTransaction().rollback();\r\n+            throw e;\r\n+        } finally {\r\n+            pm.close();\r\n+        }\r\n+ */\r\n+    }\r\n+    \r\n+    private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues) {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }\r\n+    \r\n+    //FIXME - could not find AbstractJDBCListener because of package imports in source file\r\n+/*\r\n+    public static class Listener extends AbstractJDBCListener {\r\n+ \r\n+        public int count = 0;\r\n+ \r\n+        public void afterExecuteStatement(JDBCEvent ev) {\r\n+            count++;\r\n+        }\r\n+    }\r\n+ */\r\n+}\r"},{"sha":"1b8eedca6c82dec51a0c6bb6958a5dae937c1c3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,229 @@\n+/*\r\n+ * TestLocators.java\r\n+ *\r\n+ * Created on October 3, 2006, 4:37 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestLocators extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    private OpenJPAEntityManagerFactory pmf;\r\n+\r\n+    public TestLocators(String name) {\r\n+        super(name);\r\n+    }    \r\n+    \r\n+    /** Creates a new instance of TestLocators */\r\n+    public TestLocators() {\r\n+    }\r\n+    public void setUp() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+        Extent e = pm.createExtent(LocatorTestObject.class, true);\r\n+        for (Iterator i = e.iterator(); i.hasNext();) {\r\n+            pm.remove(i.next());\r\n+            \r\n+        }\r\n+        endTx(pm);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void tearDown()\r\n+        throws Exception {\r\n+        super.tearDown();\r\n+\r\n+       deleteAll(LocatorTestObject.class);\r\n+    }\r\n+\r\n+    public void testBLOBs() {\r\n+        doBlobTest(50000);\r\n+    }\r\n+\r\n+    public void testSmallBLOBs() {\r\n+        doBlobTest(50);\r\n+\r\n+        if (getCurrentPlatform() == AbstractTestCase.Platform.ORACLE) {\r\n+            OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+            JDBCConfiguration conf = (JDBCConfiguration)\r\n+                ((OpenJPAEntityManagerSPI) pm).getConfiguration();\r\n+            OracleDictionary dict = (OracleDictionary)\r\n+                conf.getDBDictionaryInstance();\r\n+\r\n+            int t = dict.maxEmbeddedBlobSize;\r\n+            doBlobTest(t - 1);\r\n+            doBlobTest(t);\r\n+            doBlobTest(t + 1);\r\n+        }\r\n+    }\r\n+\r\n+    public void doBlobTest(int size) {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        LocatorTestObject o = new LocatorTestObject();\r\n+        byte[] bytes = new byte[size];\r\n+        Arrays.fill(bytes, (byte) 'b');\r\n+        o.setBytes(bytes);\r\n+        pm.persist(o);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+        byte[] newbytes = o.getBytes();\r\n+        assertNotNull(newbytes);\r\n+        assertEquals(bytes.length, newbytes.length);\r\n+        for (int i = 0; i < bytes.length; i++) {\r\n+            assertEquals(bytes[i], newbytes[i]);\r\n+        }\r\n+    }\r\n+\r\n+    public void testShrinkBLOB() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        LocatorTestObject o = new LocatorTestObject();\r\n+        byte[] bytes = new byte[50000];\r\n+        Arrays.fill(bytes, (byte) 'b');\r\n+        o.setBytes(bytes);\r\n+        pm.persist(o);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+\r\n+        startTx(pm);\r\n+        bytes = new byte[40000];\r\n+        Arrays.fill(bytes, (byte) 'c');\r\n+        o.setBytes(bytes);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+        byte[] newbytes = o.getBytes();\r\n+        assertEquals(bytes.length, newbytes.length);\r\n+        for (int i = 0; i < bytes.length; i++) {\r\n+            assertEquals(bytes[i], newbytes[i]);\r\n+        }\r\n+    }\r\n+\r\n+    public void testCLOBs() {\r\n+        doClobTest(50000);\r\n+    }\r\n+\r\n+    public void testSmallCLOBs() {\r\n+        doClobTest(50);\r\n+\r\n+        if (getCurrentPlatform() == AbstractTestCase.Platform.ORACLE) {\r\n+            OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+            JDBCConfiguration conf = (JDBCConfiguration)\r\n+                ((OpenJPAEntityManagerSPI) pm).getConfiguration();\r\n+            OracleDictionary dict = (OracleDictionary)\r\n+                conf.getDBDictionaryInstance();\r\n+\r\n+            int t = dict.maxEmbeddedClobSize;\r\n+            doClobTest(t - 1);\r\n+            doClobTest(t);\r\n+            doClobTest(t + 1);\r\n+        }\r\n+    }\r\n+\r\n+    public void doClobTest(int size) {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        LocatorTestObject o = new LocatorTestObject();\r\n+        char[] chars = new char[size];\r\n+        Arrays.fill(chars, (char) 'c');\r\n+        o.setClobString(new String(chars));\r\n+        pm.persist(o);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+        char[] newchars = o.getClobString().toCharArray();\r\n+\r\n+        assertNotNull(newchars);\r\n+        assertEquals(chars.length, newchars.length);\r\n+        for (int i = 0; i < chars.length; i++) {\r\n+            assertEquals(chars[i], newchars[i]);\r\n+        }\r\n+    }\r\n+\r\n+    public void testShrinkCLOB() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        LocatorTestObject o = new LocatorTestObject();\r\n+        char[] chars = new char[50000];\r\n+        Arrays.fill(chars, (char) 'c');\r\n+        o.setClobString(new String(chars));\r\n+        pm.persist(o);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+\r\n+        startTx(pm);\r\n+        chars = new char[40000];\r\n+        Arrays.fill(chars, (char) 'd');\r\n+        o.setClobString(new String(chars));\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+        char[] newchars = o.getClobString().toCharArray();\r\n+        assertEquals(chars.length, newchars.length);\r\n+        for (int i = 0; i < chars.length; i++) {\r\n+            assertEquals(chars[i], newchars[i]);\r\n+        }\r\n+    }\r\n+    \r\n+}\r"},{"sha":"eca0fb46de8d3b76a8c432b7d2f44b79a1cfeb8f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,268 @@\n+/*\r\n+ * TestMappedByKeyMaps.java\r\n+ *\r\n+ * Created on October 4, 2006, 9:26 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\r\n+import org.apache.openjpa.util.AbstractLRSProxyMap;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+\r\n+public class TestMappedByKeyMaps extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+    \r\n+    /** Creates a new instance of TestMappedByKeyMaps */\r\n+    public TestMappedByKeyMaps(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void testInverseKeyMapMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        ClassMapping pc = conf.getMappingRepositoryInstance().getMapping\r\n+                (InverseKeyMapPC.class, null, true);\r\n+        FieldMapping map = pc.getFieldMapping(\"helpers\");\r\n+        \r\n+        ClassMapping helper = conf.getMappingRepositoryInstance().getMapping\r\n+                (HelperPC.class, null, true);\r\n+        FieldMapping str = helper.getFieldMapping(\"stringField\");\r\n+        \r\n+        assertEquals(\"stringField\", map.getKey().getValueMappedBy());\r\n+        assertEquals(str, map.getKey().getValueMappedByMetaData());\r\n+        assertTrue(map.getStrategy() instanceof\r\n+                RelationMapInverseKeyFieldStrategy);\r\n+        assertEquals(1, map.getKeyMapping().getColumns().length);\r\n+        assertEquals(map.getKeyMapping().getColumns()[0],\r\n+                str.getColumns()[0]);\r\n+    }\r\n+    \r\n+    public void testJoinTableMapMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        ClassMapping pc = conf.getMappingRepositoryInstance().getMapping\r\n+                (JoinTableMapPC.class, null, true);\r\n+        FieldMapping map = pc.getFieldMapping(\"helpers\");\r\n+        \r\n+        ClassMapping helper = conf.getMappingRepositoryInstance().getMapping\r\n+                (HelperPC.class, null, true);\r\n+        FieldMapping str = helper.getFieldMapping(\"stringField\");\r\n+        \r\n+        assertEquals(\"stringField\", map.getKey().getValueMappedBy());\r\n+        assertEquals(str, map.getKey().getValueMappedByMetaData());\r\n+        assertTrue(map.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n+        assertEquals(1, map.getKeyMapping().getColumns().length);\r\n+        assertEquals(map.getKeyMapping().getColumns()[0],\r\n+                str.getColumns()[0]);\r\n+    }\r\n+    \r\n+    public void testInverseKeyMap() {\r\n+        mappedByMap(new InverseKeyMapPC(), false);\r\n+        queryMap(new InverseKeyMapPC());\r\n+    }\r\n+    \r\n+    public void testInverseKeyLRSMap() {\r\n+        mappedByMap(new InverseKeyMapPC(), true);\r\n+    }\r\n+    \r\n+    public void testJoinTableMap() {\r\n+        mappedByMap(new JoinTableMapPC(), false);\r\n+        queryMap(new JoinTableMapPC());\r\n+    }\r\n+    \r\n+    public void testJoinTableLRSMap() {\r\n+        mappedByMap(new JoinTableMapPC(), true);\r\n+    }\r\n+    \r\n+    private void mappedByMap(MappedByMapPC pc, boolean lrs) {\r\n+       deleteAll(HelperPC.class);\r\n+       deleteAll(pc.getClass());\r\n+        \r\n+        HelperPC h1 = new HelperPC();\r\n+        h1.setStringField(\"h1\");\r\n+        pc.getHelpers().put(h1.getStringField(), h1);\r\n+        HelperPC h2 = new HelperPC();\r\n+        h2.setStringField(\"h2\");\r\n+        pc.getHelpers().put(h2.getStringField(), h2);\r\n+        HelperPC h3 = new HelperPC();\r\n+        h3.setStringField(\"h3\");\r\n+        pc.getHelpers().put(h3.getStringField(), h3);\r\n+        \r\n+        setLRS(pc.getClass(), lrs);\r\n+        try {\r\n+            OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+            startTx(pm);;\r\n+            pm.persist(pc);\r\n+            endTx(pm);;\r\n+            Object oid = pm.getObjectId(pc);\r\n+            \r\n+            assertFalse(pc.getHelpers().containsKey(\"foo\"));\r\n+            assertNull(pc.getHelpers().get(\"foo\"));\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            assertEquals(h1, pc.getHelpers().get(\"h1\"));\r\n+            assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n+            pm.close();\r\n+            \r\n+            pm = (OpenJPAEntityManager)currentEntityManager();;\r\n+            pc = (MappedByMapPC) pm.getObjectId(oid);\r\n+            if (lrs)\r\n+                assertTrue(pc.getHelpers() instanceof AbstractLRSProxyMap);\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            assertFalse(pc.getHelpers().containsKey(\"foo\"));\r\n+            assertNull(pc.getHelpers().get(\"foo\"));\r\n+            assertEquals(\"h1\", ((HelperPC) pc.getHelpers().get(\"h1\")).\r\n+                    getStringField());\r\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n+                    getStringField());\r\n+            \r\n+            pm.begin();\r\n+            pc.getHelpers().remove(\"h1\");\r\n+            assertEquals(2, pc.getHelpers().size());\r\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n+            assertNull(pc.getHelpers().get(\"h1\"));\r\n+            HelperPC h4 = new HelperPC();\r\n+            h4.setStringField(\"h4\");\r\n+            pc.getHelpers().put(\"h4\", h4);\r\n+            assertTrue(pc.getHelpers().containsKey(\"h4\"));\r\n+            assertEquals(h4, pc.getHelpers().get(\"h4\"));\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            pm.commit();\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n+            assertNull(pc.getHelpers().get(\"h1\"));\r\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n+                    getStringField());\r\n+            assertEquals(\"h4\", ((HelperPC) pc.getHelpers().get(\"h4\")).\r\n+                    getStringField());\r\n+            pm.close();\r\n+            \r\n+            pm = (OpenJPAEntityManager)currentEntityManager();;\r\n+            pc = (MappedByMapPC) pm.getObjectId(oid);\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n+            assertNull(pc.getHelpers().get(\"h1\"));\r\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n+                    getStringField());\r\n+            assertEquals(\"h4\", ((HelperPC) pc.getHelpers().get(\"h4\")).\r\n+                    getStringField());\r\n+            \r\n+            // to test lrs functions\r\n+            assertTrue(pc.getHelpers().containsValue\r\n+                    (pc.getHelpers().get(\"h2\")));\r\n+            \r\n+            Set keySet = pc.getHelpers().keySet();\r\n+            Set ordered = new TreeSet();\r\n+            assertEquals(3, keySet.size());\r\n+            Iterator itr = keySet.iterator();\r\n+            while (itr.hasNext())\r\n+                ordered.add(itr.next());\r\n+            //FIXME jthomas\r\n+            //KodoJDOHelper.close(itr);\r\n+            assertEquals(3, ordered.size());\r\n+            assertTrue(ordered.contains(\"h2\"));\r\n+            assertTrue(ordered.contains(\"h3\"));\r\n+            assertTrue(ordered.contains(\"h4\"));\r\n+            ordered.clear();\r\n+            \r\n+            Collection values = pc.getHelpers().values();\r\n+            assertEquals(3, values.size());\r\n+            itr = values.iterator();\r\n+            while (itr.hasNext()) {\r\n+                Object next = itr.next();\r\n+                assertTrue(next instanceof HelperPC);\r\n+                ordered.add(((HelperPC) next).getStringField());\r\n+            }\r\n+            //FIXME jthomas\r\n+            //KodoJDOHelper.close(itr);\r\n+            assertEquals(3, ordered.size());\r\n+            assertTrue(ordered.contains(\"h2\"));\r\n+            assertTrue(ordered.contains(\"h3\"));\r\n+            assertTrue(ordered.contains(\"h4\"));\r\n+            pm.close();\r\n+        } finally {\r\n+            unsetLRS(pc.getClass());\r\n+        }\r\n+    }\r\n+    \r\n+    private void queryMap(MappedByMapPC pc) {\r\n+        HelperPC h5 = new HelperPC();\r\n+        h5.setStringField(\"h5\");\r\n+        pc.getHelpers().put(\"h5\", h5);\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.begin();\r\n+        pm.persist(pc);\r\n+        pm.commit();\r\n+        pm.close();\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();;\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"stringField == 'h2'\",HelperPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setUnique(true);\r\n+        HelperPC h2 = (HelperPC) q.getSingleResult();\r\n+        \r\n+        q = pm.createNativeQuery(\"helpers.containsKey ('h2')\",pc.getClass());\r\n+        //FIXME jthomas\r\n+        //q.setUnique(true);\r\n+        pc = (MappedByMapPC) q.getSingleResult();\r\n+        assertEquals(3, pc.getHelpers().size());\r\n+        assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n+        \r\n+        q = pm.createNativeQuery(\"helpers.containsValue (:h2)\",pc.getClass());\r\n+        //FIXME  jthomas\r\n+        //q.setUnique(true);\r\n+        pc = (MappedByMapPC) q.getSingleResult();\r\n+        assertEquals(3, pc.getHelpers().size());\r\n+        assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void setLRS(Class cls, boolean lrs) {\r\n+        ClassMapping cm = ((JDBCConfiguration) getConfiguration()).\r\n+                getMappingRepositoryInstance().getMapping(cls, null, true);\r\n+        cm.getFieldMapping(\"helpers\").setLRS(lrs);\r\n+    }\r\n+    \r\n+    private void unsetLRS(Class cls) {\r\n+        ClassMapping cm = ((JDBCConfiguration) getConfiguration()).\r\n+                getMappingRepositoryInstance().getMapping(cls, null, true);\r\n+        cm.getFieldMapping(\"helpers\").setLRS(false);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"a1b7db1e67bf1f937a336d3a6976bcf391decafd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,141 @@\n+/*\r\n+ * TestMetaDataValueIndicator.java\r\n+ *\r\n+ * Created on October 4, 2006, 1:35 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestMetaDataValueIndicator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{    \r\n+    private OpenJPAEntityManager pm;\r\n+    \r\n+    private ClassMapping eMapping;\r\n+    private ClassMapping fMapping;\r\n+    \r\n+    public TestMetaDataValueIndicator(String str) {\r\n+        super(str);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestMetaDataValueIndicator */\r\n+    public TestMetaDataValueIndicator() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        // ### I hate that we have to do this\r\n+        Class c = MultiE.class;\r\n+        c = MultiF.class;\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        eMapping = (ClassMapping) ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n+                getMetaDataRepositoryInstance().getMetaData(MultiE.class,\r\n+                pm.getClassLoader(), true);\r\n+        fMapping = (ClassMapping) ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n+                getMetaDataRepositoryInstance().getMetaData(MultiF.class,\r\n+                pm.getClassLoader(), true);\r\n+    }\r\n+    \r\n+    public void tearDown()\r\n+    throws Exception {\r\n+        if (pm.getTransaction().isActive())\r\n+            pm.getTransaction().rollback();\r\n+        pm.close();\r\n+        super.tearDown();\r\n+    }\r\n+    \r\n+    public void testMetaData() {\r\n+        assertEquals(ValueMapDiscriminatorStrategy.class,\r\n+                eMapping.getDiscriminator().getStrategy().getClass());\r\n+        assertEquals(SuperclassDiscriminatorStrategy.class,\r\n+                fMapping.getDiscriminator().getStrategy().getClass());\r\n+    }\r\n+    \r\n+    public void testOperations() {\r\n+       deleteAll(MultiE.class);\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        \r\n+        MultiE e = new MultiE();\r\n+        e.setString0(\"foo\");\r\n+        pm.persist(e);\r\n+        \r\n+        MultiF f = new MultiF();\r\n+        f.setString0(\"bar\");\r\n+        pm.persist(f);\r\n+        \r\n+        pm.getTransaction().commit();\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        //FIXME jthomas\r\n+        /* Cant find equivalent of getExtent()\r\n+        assertEquals(2, countExtent(pm.getExtent(MultiE.class, true)));\r\n+        assertEquals(1, countExtent(pm.getExtent(MultiE.class, false)));\r\n+        assertEquals(1, countExtent(pm.getExtent(MultiF.class, true)));\r\n+        assertEquals(1, countExtent(pm.getExtent(MultiF.class, false)));\r\n+         \r\n+        Object oid = pm.getObjectId\r\n+            (pm.getExtent(MultiE.class, true).iterator().next());\r\n+         */\r\n+        //FIXME remove the next line once the above block is fixed\r\n+        Object oid =null;\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        assertNotNull(pm.getObjectId(oid));\r\n+        pm.close();\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        assertNotNull(pm.getObjectId(oid));\r\n+    }\r\n+    \r\n+    private int countExtent(Extent e) {\r\n+        int count = 0;\r\n+        for (Iterator iter = e.iterator(); iter.hasNext();) {\r\n+            iter.next();\r\n+            count++;\r\n+        }\r\n+        return count;\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"480533cd50d5a3fbb03018acef6efd36a7c1a5b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * TestMultiDFG.java\r\n+ *\r\n+ * Created on October 4, 2006, 1:50 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.transaction.Transaction;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestMultiDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{    \r\n+    private Object boid;\r\n+    \r\n+    public TestMultiDFG(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestMultiDFG */\r\n+    public TestMultiDFG() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        \r\n+       deleteAll(MultiB.class);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        EntityTransaction t = pm.getTransaction();\r\n+        t.begin();\r\n+        MultiB b = new MultiB();\r\n+        pm.persist(b);\r\n+        t.commit();\r\n+        boid = pm.getObjectId(b);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testDFG() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        MultiB b = (MultiB) pm.getObjectId(boid);\r\n+        \r\n+        // check the non-dfg fields\r\n+        OpenJPAStateManager sm = getStateManager(b, pm);\r\n+        FieldMetaData fmd = sm.getMetaData().getField(\"bString\");\r\n+        assertTrue(\"bString should not be loaded\",\r\n+                !sm.getLoaded().get(fmd.getIndex()));\r\n+        \r\n+        fmd = sm.getMetaData().getField(\"bInt\");\r\n+        assertTrue(\"bInt should not be loaded\",\r\n+                !sm.getLoaded().get(fmd.getIndex()));\r\n+        \r\n+        System.out.println(\"### getting values\");\r\n+        b.getBString();\r\n+        \r\n+        System.out.println(\"### getting values again\");\r\n+        b.getString0();\r\n+        b.getBString();\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"11b30d458bbb8373927561b00461e60eb61b1f01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","status":"added","additions":237,"deletions":0,"changes":237,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,237 @@\n+/*\r\n+ * TestMultiTableMappings.java\r\n+ *\r\n+ * Created on October 4, 2006, 4:09 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.transaction.Transaction;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.jdbc.JDBCFetchPlan;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestMultiTableMappings extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n+    \r\n+\r\n+    private Object aoid;\r\n+    private Object boid;\r\n+    private Object coid;\r\n+    private Object doid;\r\n+    \r\n+    public TestMultiTableMappings(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestMultiTableMappings */\r\n+    public TestMultiTableMappings() {\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+       deleteAll(MultiA.class);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Collection os = new ArrayList();\r\n+        MultiA a = new MultiA();\r\n+        MultiB b = new MultiB();\r\n+        MultiC c = new MultiC();\r\n+        MultiD d = new MultiD();\r\n+        os.add(a);\r\n+        os.add(b);\r\n+        os.add(c);\r\n+        os.add(d);\r\n+        d.setA(new MultiA());\r\n+        os.add(new MultiD());\r\n+        d.setDString1(\"d string 1\");\r\n+        \r\n+        EntityTransaction t = pm.getTransaction();\r\n+        t.begin();\r\n+        pm.persistAll(os);\r\n+        t.commit();\r\n+        aoid = pm.getObjectId(a);\r\n+        boid = pm.getObjectId(b);\r\n+        coid = pm.getObjectId(c);\r\n+        doid = pm.getObjectId(d);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void XXXtestUpdates() {\r\n+        //TEST DISABLED ... not converted\r\n+        /*\r\n+        PersistenceManager pm = getPM();\r\n+        Transaction t = pm.currentTransaction();\r\n+        try {\r\n+            for (int i = 0; i < 2; i++) {\r\n+                t.begin();\r\n+                changeA((MultiA) pm.getObjectById(aoid, i == 0));\r\n+                changeB((MultiB) pm.getObjectById(boid, i == 0));\r\n+                changeC((MultiC) pm.getObjectById(coid, i == 0));\r\n+                changeD((MultiD) pm.getObjectById(doid, i == 0));\r\n+                t.commit();\r\n+            }\r\n+        } finally {\r\n+            if (t.isActive()) {\r\n+                t.rollback();\r\n+            }\r\n+            pm.close();\r\n+        }\r\n+         */\r\n+    }\r\n+    \r\n+    public void XXXtestInserts() {\r\n+        //TEST DISABLED ... not converted\r\n+        /*\r\n+        PersistenceManager pm = getPM();\r\n+        assertEquals(2,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiA.class, false)).execute()).size());\r\n+         \r\n+        assertEquals(4,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiB.class, true)).execute()).size());\r\n+         \r\n+        assertEquals(1,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiB.class, false)).execute()).size());\r\n+         \r\n+        assertEquals(1,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiC.class, false)).execute()).size());\r\n+         \r\n+        assertEquals(2,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiD.class, false)).execute()).size());\r\n+         \r\n+        assertEquals(6,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiA.class, true)).execute()).size());\r\n+         \r\n+        pm.close();\r\n+         */\r\n+    }\r\n+    \r\n+    public void XXXtestOneToOne() {\r\n+        //TEST DISABLED ... not converted\r\n+        /*\r\n+        PersistenceManager pm = getPM();\r\n+        MultiD d = (MultiD) pm.getObjectById(doid, true);\r\n+        assertNotNull(d.getA());\r\n+        pm.close();\r\n+         */\r\n+    }\r\n+    \r\n+    public void XXXtestQueries() {\r\n+        //TEST DISABLED ... not converted\r\n+        /*\r\n+        PersistenceManager pm = getPM();\r\n+        Query q = pm.newQuery(pm.getExtent(MultiD.class, false),\r\n+                \"dString1 == \\\"d string 1\\\"\");\r\n+        //### this behaves like '\"\"': \"d string 1\");\r\n+        Collection c = (Collection) q.execute();\r\n+        assertEquals(1, c.size());\r\n+        pm.close();\r\n+         */\r\n+    }\r\n+    \r\n+    // ### more tests:\r\n+    // ### - horizontal with extent with subclass=false\r\n+    // ### - aggregates with horizontal, interface, this stuff,\r\n+    // ### - base A, vertical B extends A, virtual C extends B,\r\n+    // ###   vertical D extends C, vertical E extends C, flat F extends C\r\n+    \r\n+    public void testVerticalQueryModeQueries() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",MultiA.class);\r\n+        ((JDBCFetchPlan) q.getFetchPlan()).\r\n+                setSubclassFetchMode(JDBCFetchPlan.EAGER_PARALLEL);\r\n+        // we need ordering; otherwise kodo is smart enough to only run first\r\n+        // select until its results are exhausted\r\n+        \r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"string0 ascending\");\r\n+        sql.clear();\r\n+        assertEquals(sql.toString(), 0, sql.size());\r\n+        \r\n+        Collection c = (Collection) q.getCandidateCollection();\r\n+        \r\n+        // account for the select distinct\r\n+        if (((String) sql.get(0)).startsWith(\"SELECT DISTINCT\"))\r\n+            assertEquals(sql.toString(), 5, sql.size());\r\n+        else\r\n+            assertEquals(sql.toString(), 4, sql.size());\r\n+        sql.clear();\r\n+        \r\n+        assertEquals(6, c.size());\r\n+        \r\n+        // only check for counts sql if any was executed (some databases\r\n+        // might eagerly instantiate all the rows, such as pointbase)\r\n+        if (sql.size() != 0)\r\n+            assertEquals(sql.toString(), 4, sql.size()); // select counts\r\n+        sql.clear();\r\n+        \r\n+        // walk through the results. This will cause individual\r\n+        // objects to be loaded, and therefore the dfgs to be loaded,\r\n+        // and therefore any additional SQL to be executed.\r\n+        for (Iterator iter = c.iterator(); iter.hasNext();)\r\n+            iter.next();\r\n+        \r\n+        assertEquals(sql.toString(), 0, sql.size());\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void changeA(MultiA a) {\r\n+        a.setString0(a.getString0() + \" changed\");\r\n+        a.setInt0(a.getInt0() + 1);\r\n+    }\r\n+    \r\n+    private void changeB(MultiB b) {\r\n+        changeA(b);\r\n+        b.setBString(b.getBString() + \" changed\");\r\n+    }\r\n+    \r\n+    private void changeC(MultiC c) {\r\n+        changeB(c);\r\n+        c.setCString0(c.getCString0() + \" changed\");\r\n+    }\r\n+    \r\n+    private void changeD(MultiD d) {\r\n+        changeB(d);\r\n+        d.setDString0(d.getDString0() + \" changed\");\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"428f9f706f6a9fc4ff9d36898d7c1f13b26c9410","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","status":"added","additions":209,"deletions":0,"changes":209,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,209 @@\n+/*\r\n+ * TestMultiTableSelfCollection.java\r\n+ *\r\n+ * Created on October 4, 2006, 2:35 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestMultiTableSelfCollection extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{    \r\n+    private Object a1oid;\r\n+    private Object a2oid;\r\n+    private Object a3oid;\r\n+    private Object a4oid;\r\n+    \r\n+    private Object c1oid;\r\n+    private Object c2oid;\r\n+    private Object c3oid;\r\n+    private Object c4oid;\r\n+    \r\n+    public TestMultiTableSelfCollection(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestMultiTableSelfCollection */\r\n+    public TestMultiTableSelfCollection() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(MultiA.class);\r\n+        \r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        \r\n+        Collection os = new ArrayList();\r\n+        MultiA a1 = new MultiA();\r\n+        MultiA a2 = new MultiA();\r\n+        MultiA a3 = new MultiA();\r\n+        MultiA a4 = new MultiA();\r\n+        MultiC c1 = new MultiC();\r\n+        MultiC c2 = new MultiC();\r\n+        MultiC c3 = new MultiC();\r\n+        MultiC c4 = new MultiC();\r\n+        os.add(a1);\r\n+        os.add(a2);\r\n+        os.add(a3);\r\n+        os.add(a4);\r\n+        os.add(c1);\r\n+        os.add(c2);\r\n+        os.add(c3);\r\n+        os.add(c4);\r\n+        \r\n+        c1.getMultiAs().add(a1);\r\n+        c1.getMultiAs().add(a2);\r\n+        a1.getMultiCs().add(c1);\r\n+        a2.getMultiCs().add(c1);\r\n+        \r\n+        c2.getMultiAs().add(a1);\r\n+        c2.getMultiAs().add(a2);\r\n+        a1.getMultiCs().add(c2);\r\n+        a2.getMultiCs().add(c2);\r\n+        \r\n+        c3.getMultiAs().add(a3);\r\n+        c3.getMultiAs().add(a4);\r\n+        a3.getMultiCs().add(c3);\r\n+        a4.getMultiCs().add(c3);\r\n+        \r\n+        c4.getMultiAs().add(a3);\r\n+        c4.getMultiAs().add(a4);\r\n+        a3.getMultiCs().add(c4);\r\n+        a4.getMultiCs().add(c4);\r\n+        \r\n+        pm.persistAll(os);\r\n+        pm.getTransaction().commit();\r\n+        \r\n+        a1oid = pm.getObjectId(a1);\r\n+        a2oid = pm.getObjectId(a2);\r\n+        a3oid = pm.getObjectId(a3);\r\n+        a4oid = pm.getObjectId(a4);\r\n+        \r\n+        c1oid = pm.getObjectId(c1);\r\n+        c2oid = pm.getObjectId(c2);\r\n+        c3oid = pm.getObjectId(c3);\r\n+        c4oid = pm.getObjectId(c4);\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testSelfCollections() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        // check that all the sets are the right size, and equal where\r\n+        // they should be.\r\n+        \r\n+        MultiA a1 = (MultiA) pm.getObjectId(a1oid);\r\n+        assertEquals(2, a1.getMultiCs().size());\r\n+        \r\n+        MultiA a2 = (MultiA) pm.getObjectId(a2oid);\r\n+        assertEquals(2, a2.getMultiCs().size());\r\n+        \r\n+        assertEquals(a1.getMultiCs(), a2.getMultiCs());\r\n+        \r\n+        MultiA a3 = (MultiA) pm.getObjectId(a3oid);\r\n+        assertEquals(2, a3.getMultiCs().size());\r\n+        \r\n+        MultiA a4 = (MultiA) pm.getObjectId(a4oid);\r\n+        assertEquals(2, a4.getMultiCs().size());\r\n+        \r\n+        assertEquals(a3.getMultiCs(), a4.getMultiCs());\r\n+        \r\n+        MultiC c1 = (MultiC) pm.getObjectId(c1oid);\r\n+        assertEquals(2, c1.getMultiAs().size());\r\n+        \r\n+        MultiC c2 = (MultiC) pm.getObjectId(c2oid);\r\n+        assertEquals(2, c2.getMultiAs().size());\r\n+        \r\n+        assertEquals(c1.getMultiAs(), c2.getMultiAs());\r\n+        \r\n+        MultiC c3 = (MultiC) pm.getObjectId(c3oid);\r\n+        assertEquals(2, c3.getMultiAs().size());\r\n+        \r\n+        MultiC c4 = (MultiC) pm.getObjectId(c4oid);\r\n+        assertEquals(2, c4.getMultiAs().size());\r\n+        \r\n+        assertEquals(c3.getMultiAs(), c4.getMultiAs());\r\n+        \r\n+        // check that all the sets contain the correct values, and\r\n+        // don't contain the wrong values. Probably don't need to do\r\n+        // the above check as well.\r\n+        \r\n+        assertTrue(a1.getMultiCs().contains(c1));\r\n+        assertTrue(a1.getMultiCs().contains(c2));\r\n+        assertTrue(!a1.getMultiCs().contains(c3));\r\n+        assertTrue(!a1.getMultiCs().contains(c4));\r\n+        \r\n+        assertTrue(a2.getMultiCs().contains(c1));\r\n+        assertTrue(a2.getMultiCs().contains(c2));\r\n+        assertTrue(!a2.getMultiCs().contains(c3));\r\n+        assertTrue(!a2.getMultiCs().contains(c4));\r\n+        \r\n+        assertTrue(!a3.getMultiCs().contains(c1));\r\n+        assertTrue(!a3.getMultiCs().contains(c2));\r\n+        assertTrue(a3.getMultiCs().contains(c3));\r\n+        assertTrue(a3.getMultiCs().contains(c4));\r\n+        \r\n+        assertTrue(!a4.getMultiCs().contains(c1));\r\n+        assertTrue(!a4.getMultiCs().contains(c2));\r\n+        assertTrue(a4.getMultiCs().contains(c3));\r\n+        assertTrue(a4.getMultiCs().contains(c4));\r\n+        \r\n+        assertTrue(c1.getMultiAs().contains(a1));\r\n+        assertTrue(c1.getMultiAs().contains(a2));\r\n+        assertTrue(!c1.getMultiAs().contains(a3));\r\n+        assertTrue(!c1.getMultiAs().contains(a4));\r\n+        \r\n+        assertTrue(c2.getMultiAs().contains(a1));\r\n+        assertTrue(c2.getMultiAs().contains(a2));\r\n+        assertTrue(!c2.getMultiAs().contains(a3));\r\n+        assertTrue(!c2.getMultiAs().contains(a4));\r\n+        \r\n+        assertTrue(!c3.getMultiAs().contains(a1));\r\n+        assertTrue(!c3.getMultiAs().contains(a2));\r\n+        assertTrue(c3.getMultiAs().contains(a3));\r\n+        assertTrue(c3.getMultiAs().contains(a4));\r\n+        \r\n+        assertTrue(!c4.getMultiAs().contains(a1));\r\n+        assertTrue(!c4.getMultiAs().contains(a2));\r\n+        assertTrue(c4.getMultiAs().contains(a3));\r\n+        assertTrue(c4.getMultiAs().contains(a4));\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"14b412d21aa584ea20a9e31b0ecab549e6a1d946","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * TestNoClassColumn.java\r\n+ *\r\n+ * Created on October 4, 2006, 2:44 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestNoClassColumn extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+        \r\n+    /** Creates a new instance of TestNoClassColumn */\r\n+    public TestNoClassColumn() {\r\n+    }\r\n+\r\n+    public TestNoClassColumn(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void testQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",NoClassColumn.class);\r\n+        //FIXME jthomas\r\n+        //q.declareParameters(\"java.lang.String input\");\r\n+        //q.setFilter(\"test==input\");\r\n+        Map params = new HashMap();\r\n+        params.put(\"input\", \"blah\");\r\n+        //FIXME jthomas\r\n+        //Collection c = (Collection) q.executeWithMap(params);\r\n+        pm.close();\r\n+    }    \r\n+    \r\n+}\r"},{"sha":"bfc6a7d2690b75b6ace7d9e5f4b68af03064f62a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * TestRawField.java\r\n+ *\r\n+ * Created on October 4, 2006, 2:57 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestRawField extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    /** Creates a new instance of TestRawField */\r\n+    public TestRawField(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(RawField.class);\r\n+    }\r\n+\r\n+    public void testRaw() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        RawField pc = new RawField();\r\n+        pc.setString(\"BAR\");\r\n+        pm.persist(pc);\r\n+        Object oid = pm.getObjectId(pc);\r\n+\r\n+        // batching?\r\n+        pc = new RawField();\r\n+        pc.setString(\"GOO\");\r\n+        pm.persist(pc);\r\n+        pm.getTransaction().commit();\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (RawField) pm.getObjectId(oid);\r\n+        assertEquals(pc.getString(), \"BARFOO\", pc.getString());\r\n+        pm.close();\r\n+    }    \r\n+}\r"},{"sha":"3e3a0e301bd12c954c1fd30901dfa961a2087df0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","status":"added","additions":241,"deletions":0,"changes":241,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,241 @@\n+/*\r\n+ * TestStateImage.java\r\n+ *\r\n+ * Created on October 4, 2006, 3:09 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestStateImage extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n+    private Object _oid = null;\r\n+    \r\n+    /** Creates a new instance of TestStateImage */\r\n+    public TestStateImage() {\r\n+    }\r\n+    public TestStateImage(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    \r\n+    public void setUpTestCase() {\r\n+       deleteAll(StateImagePC2.class);\r\n+       deleteAll(StateImagePC3.class);\r\n+        \r\n+        StateImagePC2 pc = new StateImagePC2();\r\n+        pc.setStringField(\"string1\");\r\n+        pc.setIntField(1);\r\n+        StateImagePC2 pc2 = new StateImagePC2();\r\n+        pc2.setStringField(\"string2\");\r\n+        pc2.setIntField(2);\r\n+        pc.setStateImage(pc2);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        pm.persist(pc);\r\n+        _oid = pm.getObjectId(pc);\r\n+        pm.getTransaction().commit();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testOptLock() {\r\n+        OpenJPAEntityManager pm1 = getEm(true, true);\r\n+        OpenJPAEntityManager pm2 = getEm(true, true);\r\n+        \r\n+        pm1.getTransaction().begin();\r\n+        pm2.getTransaction().begin();\r\n+        StateImagePC2 pc1 = (StateImagePC2) pm1.getObjectId(_oid);\r\n+        StateImagePC2 pc2 = (StateImagePC2) pm2.getObjectId(_oid);\r\n+        \r\n+        pc1.setIntField(3);\r\n+        pc1.setStateImage(null);\r\n+        \r\n+        pc2.setIntField(4);\r\n+        \r\n+        pm1.getTransaction().commit();\r\n+        try {\r\n+            pm2.getTransaction().commit();\r\n+            fail(\"Should have caused OL exception.\");\r\n+        } catch (Exception jfe) {\r\n+            pm2.getTransaction().begin();\r\n+            pm2.refresh(pc2);\r\n+            pc2.setIntField(4);\r\n+            pm2.getTransaction().commit();\r\n+        }\r\n+        \r\n+        // make sure the next transaction works too\r\n+        pm2.getTransaction().begin();\r\n+        pc2.setIntField(5);\r\n+        pm2.getTransaction().commit();\r\n+        \r\n+        pm1.getTransaction().begin();\r\n+        pm1.refresh(pc1);\r\n+        pc1.setIntField(6);\r\n+        \r\n+        pm2.getTransaction().begin();\r\n+        pc2.setIntField(7);\r\n+        \r\n+        pm1.getTransaction().commit();\r\n+        try {\r\n+            pm2.getTransaction().commit();\r\n+            fail(\"Should have caused OL exception.\");\r\n+        } catch (Exception jfe) {\r\n+            pm2.getTransaction().begin();\r\n+            pm2.refresh(pc2);\r\n+            pc2.setIntField(7);\r\n+            pm2.getTransaction().commit();\r\n+        }\r\n+        pm1.close();\r\n+        pm2.close();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        StateImagePC2 pc = (StateImagePC2) pm.getObjectId(_oid);\r\n+        assertNull(pc.getStateImage());\r\n+        assertEquals(7, pc.getIntField());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * This currently isn't working: state-image locking will not\r\n+     * detect when someone else updated the row before deleting.\r\n+     */\r\n+    public void NOTWORKINGtestOptLockWithDelete() {\r\n+        OpenJPAEntityManager pm1 = getEm(true, true);\r\n+        StateImagePC2 pc1 = (StateImagePC2) pm1.getObjectId(_oid);\r\n+        \r\n+        OpenJPAEntityManager pm2 = getEm(true, true);\r\n+        StateImagePC2 pc2 = (StateImagePC2) pm2.getObjectId(_oid);\r\n+        \r\n+        pm1.getTransaction().begin();\r\n+        pc1.setIntField(3);\r\n+        \r\n+        pm2.getTransaction().begin();\r\n+        pm2.remove(pc2);\r\n+        \r\n+        pm1.getTransaction().commit();\r\n+        try {\r\n+            pm2.getTransaction().commit();\r\n+            fail(\"Should have caused OL exception.\");\r\n+        } catch (Exception jfe) {\r\n+            pm2.getTransaction().begin();\r\n+            pm2.refresh(pc2);\r\n+            pm2.remove(pc2);\r\n+            pm2.getTransaction().commit();\r\n+        }\r\n+    }\r\n+    \r\n+    public void testOptLockOnVerticalClass() {\r\n+        OpenJPAEntityManager pm1 = getEm(true, true);\r\n+        OpenJPAEntityManager pm2 = getEm(true, true);\r\n+        \r\n+        // have to load via query or extent where we're selecting the vertical\r\n+        // field in the initial SELECT\r\n+        OpenJPAQuery q1 = pm1.createNativeQuery(\"\",StateImagePC2.class);\r\n+        //FIXME  jthomas\r\n+        //q1.setOrdering(\"intField ascending\");\r\n+        StateImagePC2 pc1 = (StateImagePC2) ((Collection) q1.getCandidateCollection()).\r\n+                iterator().next();\r\n+        q1.closeAll();\r\n+        \r\n+        OpenJPAQuery q2 = pm2.createNativeQuery(\"\",StateImagePC2.class);\r\n+        //FIXME jthomas\r\n+        //q2.setOrdering(\"intField ascending\");\r\n+        StateImagePC2 pc2 = (StateImagePC2) ((Collection) q2.getCandidateCollection()).\r\n+                iterator().next();\r\n+        q2.closeAll();\r\n+        \r\n+        pm1.getTransaction().begin();\r\n+        pc1.setStringField(\"changed1\");\r\n+        pc1.setStateImage(null);\r\n+        \r\n+        pm2.getTransaction().begin();\r\n+        pc2.setStringField(\"changed2\");\r\n+        \r\n+        pm1.getTransaction().commit();\r\n+        \r\n+        try {\r\n+            pm2.getTransaction().commit();\r\n+            fail(\"Should have caused OL exception.\");\r\n+        } catch (Exception jfe) {\r\n+            pm2.getTransaction().begin();\r\n+            pm2.refresh(pc2);\r\n+            pc2.setStringField(\"changed2\");\r\n+            pm2.getTransaction().commit();\r\n+        }\r\n+        pm1.close();\r\n+        pm2.close();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        StateImagePC2 pc = (StateImagePC2) pm.getObjectId(_oid);\r\n+        assertNull(pc.getStateImage());\r\n+        assertEquals(\"changed2\", pc.getStringField());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testLockGroup()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm = getEm(true, true);\r\n+        pm.getTransaction().begin();\r\n+        StateImagePC3 pc = new StateImagePC3();\r\n+        pc.setLockField(4);\r\n+        pc.setNoLockField(6);\r\n+        pm.persist(pc);\r\n+        pm.getTransaction().commit();\r\n+        \r\n+        pm.getTransaction().begin();\r\n+        pc.setLockField(6);\r\n+        sql.clear();\r\n+        pm.getTransaction().commit();\r\n+        assertNotSQL(\"* WHERE * NOLOCK*\");\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        \r\n+        //FIXME\r\n+        //main(TestStateImage.class);\r\n+    }\r\n+    private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues){\r\n+        OpenJPAEntityManager em = currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }\r\n+}\r"},{"sha":"fd19552fb53ecf512af4b5464d69eb82fff842e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.horizontal;\r\n+\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestLockGroupsWithHorizontalBaseType extends AbstractTestCase\r\n+{   \r\n+    /** Creates a new instance of TestLockGroupsWithHorizontalBaseType */\r\n+    public TestLockGroupsWithHorizontalBaseType(String name) \r\n+    {\r\n+    \tsuper(name, \"jdbccactusapp\");\r\n+    }\r\n+\r\n+\r\n+    public void setUp() {\r\n+       deleteAll(LockGroupSubclass.class);\r\n+    }\r\n+\r\n+    public void testHorizontalLockGroup() {\r\n+        LockGroupSubclass pc = new LockGroupSubclass();\r\n+        pc.setDefaultLockGroupField(\"foo\");\r\n+        pc.setNonDefaultLockGroupField(\"bar\");\r\n+        OpenJPAEntityManager pm = getEm(true, true);\r\n+        pm.getTransaction().begin();\r\n+        pm.persist(pc);\r\n+        pm.getTransaction().commit();\r\n+        pm.getTransaction().begin();\r\n+\r\n+        Object oid = pm.getObjectId(pc);\r\n+\r\n+        OpenJPAEntityManager  pm2 = getEm(true, true);\r\n+        LockGroupSubclass pc2 = (LockGroupSubclass) pm2.getObjectId(oid);\r\n+        pm2.getTransaction().begin();\r\n+        pc2.setNonDefaultLockGroupField(\"baz\");\r\n+        pm2.getTransaction().commit();\r\n+\r\n+        pc.setDefaultLockGroupField(\"wookie\");\r\n+        pm.getTransaction().commit();\r\n+    }    \r\n+    \r\n+   private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues) {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }    \r\n+    \r\n+}\r"},{"sha":"40ec5d3c85cb3354945db6fc2460329fe02fbd35","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,91 @@\n+/*\r\n+ * TestQueryAgainstEntireMappedHierarchy.java\r\n+ *\r\n+ * Created on October 5, 2006, 10:46 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.horizontal;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestQueryAgainstEntireMappedHierarchy extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase\r\n+{\r\n+\t\r\n+    /** Creates a new instance of TestQueryAgainstEntireMappedHierarchy */\r\n+    public TestQueryAgainstEntireMappedHierarchy(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void setUpTestCase() \r\n+    {        \r\n+        // this test depends on this fact\r\n+        assertTrue(HorizJ.class.getSuperclass() == HorizD.class);\r\n+        assertTrue(HorizK.class.getSuperclass() == HorizJ.class);\r\n+\r\n+       deleteAll(HorizD.class);\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+\r\n+        HorizD d = new HorizD();\r\n+        d.setStringA(\"stringa-d\");\r\n+        d.setStringC(\"stringc-d\");\r\n+        pm.persist(d);\r\n+\r\n+        HorizJ j = new HorizJ();\r\n+        j.setStringA(\"stringa-j\");\r\n+        j.setStringC(\"stringc-j\");\r\n+        pm.persist(j);\r\n+\r\n+        HorizK k = new HorizK();\r\n+        k.setStringA(\"stringa-k\");\r\n+        k.setStringC(\"stringc-k\");\r\n+        pm.persist(k);\r\n+\r\n+        pm.getTransaction().commit();\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testQueryAgainstEntireMappedHierarchy() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        sql.clear();\r\n+        //FIXME jthomas\r\n+        //pm.newQuery(HorizD.class).execute();\r\n+        String lastStatement = (String) sql.get(sql.size() - 1);\r\n+        assertTrue(lastStatement.toLowerCase().indexOf(\"in (\") == -1);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"fe547e0a45c74959664cb2fa8d91e25370e644d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * TestUnionPlaceholderTypes.java\r\n+ *\r\n+ * Created on October 5, 2006, 2:04 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.tableperclass;\r\n+\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.SQLFactory;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestUnionPlaceholderTypes extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestUnionPlaceholderTypes */\r\n+    public TestUnionPlaceholderTypes(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+\r\n+    private boolean _union = false;\r\n+\r\n+    public void setUpTestCase() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        //FIXME jthomas\r\n+        //_union = ((SQLFactory) conf.getSQLFactoryInstance()).getAdvancedSQL().getSupportsUnion();\r\n+    }\r\n+\r\n+    public void testUnion()\r\n+        throws Exception {\r\n+       deleteAll(PlaceholderTypesA.class);\r\n+\r\n+        PlaceholderTypesA pta = new PlaceholderTypesA();\r\n+        pta.setIntA(1);\r\n+        PlaceholderTypesB ptb = new PlaceholderTypesB();\r\n+        ptb.setIntA(2);\r\n+        ptb.setIntB(3);\r\n+        ptb.setBooleanB(true);\r\n+        ptb.setByteB((byte) 64);\r\n+        ptb.setCharB('a');\r\n+        ptb.setFloatB(99.9F);\r\n+        ptb.setStringB(\"stringB\");\r\n+        ptb.setClobB(\"clobB\");\r\n+        ptb.setBlobB(\"blobB\");\r\n+\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        broker.persist(pta, null);\r\n+        broker.persist(ptb, null);\r\n+        broker.commit();\r\n+        Object oida = broker.getObjectId(pta);\r\n+        long idb = ((Id) broker.getObjectId(ptb)).getId();\r\n+        broker.close();\r\n+\r\n+        broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        sql.clear();\r\n+        pta = (PlaceholderTypesA) broker.find(oida, true, null);\r\n+        assertEquals(1, pta.getIntA());\r\n+        if (_union)\r\n+            assertEquals(1, sql.size());\r\n+        else\r\n+            assertNotSQL(\"UNION\");\r\n+        broker.close();\r\n+\r\n+        broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        sql.clear();\r\n+        ptb = (PlaceholderTypesB) broker.find(broker.newObjectId\r\n+            (PlaceholderTypesB.class, new Long(idb)), true, null);\r\n+        assertEquals(2, ptb.getIntA());\r\n+        assertEquals(3, ptb.getIntB());\r\n+        assertTrue(ptb.getBooleanB());\r\n+        assertEquals(64, ptb.getByteB());\r\n+        assertEquals('a', ptb.getCharB());\r\n+        assertEquals(99.9F, ptb.getFloatB(), .001);\r\n+        assertEquals(\"stringB\", ptb.getStringB());\r\n+        assertEquals(\"clobB\", ptb.getClobB());\r\n+        assertEquals(\"blobB\", ptb.getBlobB());\r\n+        if (_union)\r\n+            assertEquals(1, sql.size());\r\n+        else\r\n+            assertNotSQL(\"UNION\");\r\n+        broker.close();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"02c4312ee5da9a0d0a8e0ca8171b0fbdab5dc429","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","status":"added","additions":221,"deletions":0,"changes":221,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,221 @@\n+/*\r\n+ * TestJoinSubclasses.java\r\n+ *\r\n+ * Created on October 5, 2006, 2:17 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n+\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestJoinSubclasses\r\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n+     \r\n+    /** Creates a new instance of TestJoinSubclasses */\r\n+    public TestJoinSubclasses(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    \r\n+    private String _outer = \"OUTER\";\r\n+    private Object _base = null;\r\n+    private Object _baseSubFlat = null;\r\n+    \r\n+    public boolean skipTest() {\r\n+        //FIXME\r\n+        /*\r\n+        return super.skipTest()\r\n+            || ((JDBCConfiguration) getConfiguration()).\r\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+         */\r\n+        return false;\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n+                joinSyntax == Join.SYNTAX_DATABASE)\r\n+            _outer = \"(+)\";\r\n+        \r\n+       deleteAll(JoinSubclassBase.class);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        JoinSubclassBase base = new JoinSubclassBase();\r\n+        base.setBaseField(1);\r\n+        pm.persist(base);\r\n+        \r\n+        JoinSubclassBaseSubVert sub1 = new JoinSubclassBaseSubVert();\r\n+        sub1.setBaseField(2);\r\n+        sub1.setBaseSubVertField(3);\r\n+        pm.persist(sub1);\r\n+        \r\n+        JoinSubclassBaseSubFlat sub2 = new JoinSubclassBaseSubFlat();\r\n+        sub2.setBaseField(3);\r\n+        sub2.setBaseSubVertField(4);\r\n+        sub2.setBaseSubFlatField(5);\r\n+        pm.persist(sub2);\r\n+        \r\n+        endTx(pm);;\r\n+        _base = pm.getObjectId(base);\r\n+        _baseSubFlat = pm.getObjectId(sub2);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testBaseExtentNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(JoinSubclassBase.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        JoinSubclassBase pc = (JoinSubclassBase) itr.next();\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(JoinSubclassBase.class, pc.getClass());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testBaseExtentWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(JoinSubclassBase.class, true);\r\n+        Collection pcs = new TreeSet(((Extent) extent).list());\r\n+        assertEquals(3, pcs.size());\r\n+        Iterator itr = pcs.iterator();\r\n+        for (int i = 0; i < 2; i++) {\r\n+            JoinSubclassBase pc = (JoinSubclassBase) itr.next();\r\n+            assertEquals(i + 1, pc.getBaseField());\r\n+            switch (i) {\r\n+                case 0:\r\n+                    assertEquals(JoinSubclassBase.class, pc.getClass());\r\n+                    break;\r\n+                case 1:\r\n+                    assertEquals(JoinSubclassBaseSubVert.class, pc.getClass());\r\n+                    assertEquals(i + 2, ((JoinSubclassBaseSubVert) pc).\r\n+                            getBaseSubVertField());\r\n+                    break;\r\n+                case 2:\r\n+                    assertEquals(JoinSubclassBaseSubFlat.class, pc.getClass());\r\n+                    assertEquals(i + 2, ((JoinSubclassBaseSubFlat) pc).\r\n+                            getBaseSubVertField());\r\n+                    assertEquals(i + 3, ((JoinSubclassBaseSubFlat) pc).\r\n+                            getBaseSubFlatField());\r\n+                    break;\r\n+            }\r\n+        }\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafExtent()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(JoinSubclassBaseSubFlat.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        JoinSubclassBaseSubFlat pc = (JoinSubclassBaseSubFlat) itr.next();\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSubVertField());\r\n+        assertEquals(5, pc.getBaseSubFlatField());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testBaseGetById()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        JoinSubclassBase pc = (JoinSubclassBase) pm.getObjectId(_base);\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(JoinSubclassBase.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with non-exact id\r\n+        Id oid = new Id(JoinSubclassBase.class, ((Id) _base).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (JoinSubclassBase) pm.getObjectId(oid);\r\n+        assertEquals(1, pc.getBaseField());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafGetById()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        JoinSubclassBaseSubFlat pc = (JoinSubclassBaseSubFlat)\r\n+        pm.getObjectId(_baseSubFlat);\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSubVertField());\r\n+        assertEquals(5, pc.getBaseSubFlatField());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with non-exact id\r\n+        Id oid = new Id(JoinSubclassBase.class, ((Id) _baseSubFlat).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (JoinSubclassBaseSubFlat) pm.getObjectId(oid);\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSubVertField());\r\n+        assertEquals(5, pc.getBaseSubFlatField());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"efb25ce4bb74f42bf4b47e18c2d17a186058a718","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","status":"added","additions":287,"deletions":0,"changes":287,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,287 @@\n+/*\r\n+ * TestSubclassJoinExtent.java\r\n+ *\r\n+ * Created on October 5, 2006, 3:41 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSubclassJoinExtent\r\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n+   \r\n+    private String _outer = \"OUTER\";\r\n+    \r\n+    /** Creates a new instance of TestSubclassJoinExtent */\r\n+    public TestSubclassJoinExtent(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        //FIXME\r\n+        /*\r\n+        return super.skipTest()\r\n+            || ((JDBCConfiguration) getConfiguration()).\r\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+         */\r\n+        return false;\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+        // make sure all classes are registered\r\n+        Class[] reg = new Class[]{\r\n+            Base.class, BaseSub1.class, BaseSub2.class,\r\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n+        };\r\n+        \r\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n+                joinSyntax == Join.SYNTAX_DATABASE)\r\n+            _outer = \"(+)\";\r\n+        \r\n+       deleteAll(Base.class);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        Base base = new Base();\r\n+        base.setBaseField(1);\r\n+        pm.persist(base);\r\n+        \r\n+        BaseSub1 sub1 = new BaseSub1();\r\n+        sub1.setBaseField(2);\r\n+        sub1.setBaseSub1Field(3);\r\n+        pm.persist(sub1);\r\n+        \r\n+        BaseSub2 sub2 = new BaseSub2();\r\n+        sub2.setBaseField(3);\r\n+        sub2.setBaseSub2Field(4);\r\n+        pm.persist(sub2);\r\n+        \r\n+        BaseSub1Sub2 sub1sub2 = new BaseSub1Sub2();\r\n+        sub1sub2.setBaseField(4);\r\n+        sub1sub2.setBaseSub1Field(5);\r\n+        sub1sub2.setBaseSub1Sub2Field(6);\r\n+        pm.persist(sub1sub2);\r\n+        \r\n+        endTx(pm);;\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testBaseNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(Base.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Base pc = (Base) itr.next();\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(Base.class, pc.getClass());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testBaseWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(Base.class, true);\r\n+        Collection pcs = new TreeSet(((Extent) extent).list());\r\n+        assertEquals(4, pcs.size());\r\n+        Iterator itr = pcs.iterator();\r\n+        for (int i = 0; i < 4; i++) {\r\n+            Base pc = (Base) itr.next();\r\n+            assertEquals(i + 1, pc.getBaseField());\r\n+            switch (i) {\r\n+                case 0:\r\n+                    assertEquals(Base.class, pc.getClass());\r\n+                    break;\r\n+                case 1:\r\n+                    assertEquals(BaseSub1.class, pc.getClass());\r\n+                    break;\r\n+                case 2:\r\n+                    assertEquals(BaseSub2.class, pc.getClass());\r\n+                    break;\r\n+                case 3:\r\n+                    assertEquals(BaseSub1Sub2.class, pc.getClass());\r\n+                    break;\r\n+            }\r\n+        }\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testEmptyNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1Sub1.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testEmptyWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1Sub1.class, true);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1Sub2.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub1Sub2 pc = (BaseSub1Sub2) itr.next();\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1Sub2.class, true);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub1Sub2 pc = (BaseSub1Sub2) itr.next();\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafNoSubs2()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub2.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub2 pc = (BaseSub2) itr.next();\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSub2Field());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafWithSubs2()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub2.class, true);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub2 pc = (BaseSub2) itr.next();\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSub2Field());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testMidNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub1 pc = (BaseSub1) itr.next();\r\n+        assertEquals(2, pc.getBaseField());\r\n+        assertEquals(3, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, pc.getClass());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testMidWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1.class, true);\r\n+        Collection pcs = new TreeSet(((Extent) extent).list());\r\n+        assertEquals(2, pcs.size());\r\n+        Iterator itr = pcs.iterator();\r\n+        BaseSub1 pc = (BaseSub1) itr.next();\r\n+        assertEquals(2, pc.getBaseField());\r\n+        assertEquals(3, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, pc.getClass());\r\n+        pc = (BaseSub1) itr.next();\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1Sub2.class, pc.getClass());\r\n+        assertEquals(6, ((BaseSub1Sub2) pc).getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"bdd2973fb17764067c9833cf3ba35dc67b94e158","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,229 @@\n+/*\r\n+ * TestSubclassJoinGetObjectById.java\r\n+ *\r\n+ * Created on October 5, 2006, 3:55 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSubclassJoinGetObjectById\r\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n+    \r\n+\r\n+    private String _outer = \"OUTER\";\r\n+    \r\n+    /** Creates a new instance of TestSubclassJoinGetObjectById */\r\n+    public TestSubclassJoinGetObjectById(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    \r\n+    public boolean skipTest() {\r\n+        //FIXME\r\n+        /*\r\n+        return super.skipTest()\r\n+            || ((JDBCConfiguration) getConfiguration()).\r\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+         */\r\n+        return false;\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+        // make sure all classes are registered\r\n+        Class[] reg = new Class[]{\r\n+            Base.class, BaseSub1.class, BaseSub2.class,\r\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n+        };\r\n+        \r\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n+                joinSyntax == Join.SYNTAX_DATABASE)\r\n+            _outer = \"(+)\";\r\n+        \r\n+       deleteAll(Base.class);\r\n+    }\r\n+    \r\n+    public void testBase()\r\n+    throws Exception {\r\n+        Base pc = new Base();\r\n+        pc.setBaseField(1);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        pc = (Base) pm.getObjectId(oid);\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(Base.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with non-exact oid\r\n+        oid = new Id(Base.class, ((Id) oid).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (Base) pm.getObjectId(oid);\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(Base.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testBadId()\r\n+    throws Exception {\r\n+        Base pc = new Base();\r\n+        pc.setBaseField(1);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        Id id = new Id(Base.class, -1);\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        try {\r\n+            pm.getObjectId(id);\r\n+            fail(\"No exception on bad id.\");\r\n+        } catch (Exception jonfe) {\r\n+        }\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testLeaf()\r\n+    throws Exception {\r\n+        BaseSub1Sub2 pc = new BaseSub1Sub2();\r\n+        pc.setBaseField(4);\r\n+        pc.setBaseSub1Field(5);\r\n+        pc.setBaseSub1Sub2Field(6);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub1Sub2) pm.getObjectId(oid);\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with inexact oid\r\n+        oid = new Id(Base.class, ((Id) oid).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub1Sub2) pm.getObjectId(oid);\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeaf2()\r\n+    throws Exception {\r\n+        BaseSub2 pc = new BaseSub2();\r\n+        pc.setBaseField(3);\r\n+        pc.setBaseSub2Field(4);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub2) pm.getObjectId(oid);\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with inexact oid\r\n+        oid = new Id(Base.class, ((Id) oid).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub2) pm.getObjectId(oid);\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testMid()\r\n+    throws Exception {\r\n+        BaseSub1 pc = new BaseSub1();\r\n+        pc.setBaseField(2);\r\n+        pc.setBaseSub1Field(3);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub1) pm.getObjectId(oid);\r\n+        assertEquals(2, pc.getBaseField());\r\n+        assertEquals(3, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with inexact oid\r\n+        oid = new Id(Base.class, ((Id) oid).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub1) pm.getObjectId(oid);\r\n+        assertEquals(2, pc.getBaseField());\r\n+        assertEquals(3, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+}\r"},{"sha":"cd9ca25e4a5beb13c8d30d5bb2d05d8fe94ad925","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","status":"added","additions":466,"deletions":0,"changes":466,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,466 @@\n+/*\r\n+ * TestSubclassJoinRelations.java\r\n+ *\r\n+ * Created on October 5, 2006, 4:28 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSubclassJoinRelations extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \r\n+{\r\n+    private String _outer = \"OUTER\";\r\n+    private Object _oid = null;\r\n+    \r\n+    /** Creates a new instance of TestSubclassJoinRelations */\r\n+    public TestSubclassJoinRelations(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        //FIXME \r\n+        /*\r\n+        return super.skipTest()\r\n+            || ((JDBCConfiguration) getConfiguration()).\r\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+         */\r\n+        return false;\r\n+    }\r\n+\r\n+    public void setUpTestCase() {\r\n+        // make sure all classes are registered\r\n+        Class[] reg = new Class[]{\r\n+            Base.class, BaseSub1.class, BaseSub2.class,\r\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n+        };\r\n+\r\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n+            joinSyntax == Join.SYNTAX_DATABASE)\r\n+            _outer = \"(+)\";\r\n+\r\n+       deleteAll(Relations.class);\r\n+       deleteAll(Base.class);\r\n+\r\n+        Relations rel = new Relations();\r\n+        BaseSub2 sub2 = new BaseSub2();\r\n+        sub2.setBaseField(3);\r\n+        sub2.setBaseSub2Field(4);\r\n+        rel.setBase(sub2);\r\n+\r\n+        BaseSub1 sub1 = new BaseSub1();\r\n+        sub1.setBaseField(2);\r\n+        sub1.setBaseSub1Field(3);\r\n+        rel.setBaseSub1(sub1);\r\n+\r\n+        BaseSub1Sub2 sub1sub2 = new BaseSub1Sub2();\r\n+        sub1sub2.setBaseField(4);\r\n+        sub1sub2.setBaseSub1Field(5);\r\n+        sub1sub2.setBaseSub1Sub2Field(6);\r\n+        rel.setBaseSub1Sub2(sub1sub2);\r\n+\r\n+        Base base = new Base();\r\n+        base.setBaseField(1);\r\n+        rel.getBaseList().add(base);\r\n+        rel.getBaseList().add(sub2);\r\n+\r\n+        rel.getBaseSub1List().add(sub1);\r\n+        rel.getBaseSub1List().add(sub1sub2);\r\n+\r\n+        rel.getBaseSub1Sub2List().add(sub1sub2);\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(rel);\r\n+        endTx(pm);;\r\n+        _oid = pm.getObjectId(rel);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testNullOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        assertNull(rel.getNullBase());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testEagerNullOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nullBase\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        assertNull(rel.getNullBase());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testEmptyBaseList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        assertEquals(0, rel.getEmptyBaseList().size());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerEmptyBaseList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"emptyBaseList\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        assertEquals(0, rel.getEmptyBaseList().size());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testBaseOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub2 sub2 = (BaseSub2) rel.getBase();\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerBaseOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"base\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub2 sub2 = (BaseSub2) rel.getBase();\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testLeafOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) rel.getBaseSub1Sub2();\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerLeafOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1Sub2\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) rel.getBaseSub1Sub2();\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testMidOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub1 sub1 = (BaseSub1) rel.getBaseSub1();\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerMidOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub1 sub1 = (BaseSub1) rel.getBaseSub1();\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testBaseList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseList();\r\n+        assertEquals(2, list.size());\r\n+        Base base = (Base) list.get(0);\r\n+        assertEquals(1, base.getBaseField());\r\n+        assertEquals(Base.class, base.getClass());\r\n+        BaseSub2 sub2 = (BaseSub2) list.get(1);\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerBaseList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseList\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseList();\r\n+        assertEquals(2, list.size());\r\n+        Base base = (Base) list.get(0);\r\n+        assertEquals(1, base.getBaseField());\r\n+        assertEquals(Base.class, base.getClass());\r\n+        BaseSub2 sub2 = (BaseSub2) list.get(1);\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testLeafList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseSub1Sub2List();\r\n+        assertEquals(1, list.size());\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(0);\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerLeafList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1Sub2List\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(2, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseSub1Sub2List();\r\n+        assertEquals(1, list.size());\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(0);\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testMidList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseSub1List();\r\n+        assertEquals(2, list.size());\r\n+        BaseSub1 sub1 = (BaseSub1) list.get(0);\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(1);\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerMidList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1List\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseSub1List();\r\n+        assertEquals(2, list.size());\r\n+        BaseSub1 sub1 = (BaseSub1) list.get(0);\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(1);\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testProjections()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",Relations.class);\r\n+        //FIXME jthomas\r\n+        /*\r\n+        q.setResult(\"base, baseSub1, baseSub1Sub2\");\r\n+        q.setUnique(true);\r\n+        Object[] res = (Object[]) q.execute();\r\n+         */\r\n+        Object[] res=null;\r\n+        assertNotNull(res);\r\n+        assertEquals(3, res.length);\r\n+\r\n+        BaseSub2 sub2 = (BaseSub2) res[0];\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+\r\n+        BaseSub1 sub1 = (BaseSub1) res[1];\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) res[2];\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }    \r\n+}\r"},{"sha":"897b10af32c49e36d95908b6e7f95244e392cbbd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * JDBCTestCase.java\r\n+ *\r\n+ * Created on October 6, 2006, 10:34 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public abstract class JDBCTestCase extends AbstractTestCase {\r\n+    \r\n+    /** Creates a new instance of JDBCTestCase */\r\n+    public JDBCTestCase() {\r\n+    }\r\n+    \r\n+    \r\n+    public JDBCTestCase(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    public Class getDefaultInheritanceStrategy() {\r\n+        return getClassMapping(RuntimeTest2.class).getStrategy().getClass();\r\n+    }\r\n+    \r\n+    public ClassMapping getClassMapping(Class c) {\r\n+        OpenJPAConfiguration jdoConf = getConfiguration();\r\n+        return ((JDBCConfiguration) jdoConf).getMappingRepositoryInstance().\r\n+                getMapping(c, getClass().getClassLoader(), true);\r\n+    }\r\n+    \r\n+    public FieldMapping getFieldMapping(Class c, String field) {\r\n+        return getClassMapping(c).getFieldMapping(field);\r\n+    }\r\n+    \r\n+    public boolean isInheritanceStrategyVertical() {\r\n+        return VerticalClassStrategy.class.\r\n+                isAssignableFrom(getDefaultInheritanceStrategy());\r\n+    }\r\n+    \r\n+}\r"},{"sha":"ba899eabf94400108fa9f4fe3edc25e6fb9e9820","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBQLSelectNPlusOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tpublic TestEJBQLSelectNPlusOne(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll (RuntimeTest1.class);\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tpm.getTransaction ().begin ();\r\n+\t\tpm.persist(new RuntimeTest1(\"foo\", 3));\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testSimpleEJBQLQuery() throws Exception\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\t// run a JDOQL query first to take care of any class-loading issues\r\n+\t\tList l = pm.createQuery(\"select object(o) from \" + RuntimeTest1.class.getSimpleName()+\" o\").getResultList();\r\n+\r\n+\t\t// now run the actual test.\r\n+\t\tassertEquals(1, l.size());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"917f46cb865b8d07a441d407dbae56e7cb8a4ac5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * TestNamedSQLQueries.java\r\n+ *\r\n+ * Created on October 5, 2006, 5:26 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestNamedSQLQueries extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+     \r\n+    \r\n+    /** Creates a new instance of TestNamedSQLQueries */\r\n+    public TestNamedSQLQueries() {\r\n+    }\r\n+    \r\n+    public TestNamedSQLQueries(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+       deleteAll(NamedSQL.class);\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        NamedSQL pc;\r\n+        for (int i = 0; i < 10; i++) {\r\n+            pc = new NamedSQL();\r\n+            if (i < 5)\r\n+                pc.setNum(4);\r\n+            else\r\n+                pc.setNum(i + 10);\r\n+            pm.persist(pc);\r\n+        }\r\n+        endTx(pm);;\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testNamedQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"cls\",NamedSQL.class);\r\n+\r\n+        assertEquals(\"javax.jdo.query.SQL\", ((OpenJPAQuery) q).getLanguage());\r\n+        Collection results = (Collection) q.getCandidateCollection();\r\n+        for (Iterator i = results.iterator(); i.hasNext();)\r\n+            assertEquals(4, ((NamedSQL) i.next()).getNum());\r\n+        assertEquals(5, results.size());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testSystem() {\r\n+        // test top-level package.jdoquery\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        //FIXME jthomas\r\n+        /*\r\n+        OpenJPAQuery query = pm.newNamedQuery(null, \"system2\");\r\n+        query.setUnique(true);\r\n+        query.setResultClass(int.class);\r\n+        Integer count = (Integer) query.execute();\r\n+        assertEquals(20, count.intValue());\r\n+        query.closeAll();\r\n+\r\n+        // test sql query in local package.jdoquery\r\n+        query = pm.newNamedQuery(NamedSQL.class, \"cls\");\r\n+        query.closeAll(); // force parsing of package query file\r\n+        query = pm.newNamedQuery(null, \"system\");\r\n+        query.setUnique(true);\r\n+        query.setResultClass(int.class);\r\n+        count = (Integer) query.execute();\r\n+        assertEquals(20, count.intValue());\r\n+        query.closeAll();\r\n+        pm.close();\r\n+         */\r\n+    }\r\n+    \r\n+}\r"},{"sha":"40fad83a9a4abb11f58c9c183b26a927c9e46a3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","status":"added","additions":464,"deletions":0,"changes":464,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,464 @@\n+/*\r\n+ * TestSQLQueries.java\r\n+ *\r\n+ * Created on October 5, 2006, 4:59 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestSQLQueries extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+     \r\n+    \r\n+    /** Creates a new instance of TestSQLQueries */\r\n+    public TestSQLQueries(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public TestSQLQueries() \r\n+    {}\r\n+    \r\n+    private String _tableName = null;\r\n+    private String _fullTableName = null;\r\n+    private String _pkColName = null;\r\n+    private String _intColName = null;\r\n+    private String _stringColName = null;\r\n+    private String _relColName = null;\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(RuntimeTest1.class);\r\n+        \r\n+        RuntimeTest1 pc1 = new RuntimeTest1(\"1\", 1);\r\n+        RuntimeTest1 pc2 = new RuntimeTest1(\"2\", 2);\r\n+        pc1.setSelfOneOne(pc2);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        endTx(pm);;\r\n+        \r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) pm).getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        MappingRepository repos = conf.getMappingRepositoryInstance();\r\n+        ClassMapping mapping = repos.getMapping(RuntimeTest1.class,\r\n+                pm.getClassLoader(), true);\r\n+        \r\n+        _tableName = mapping.getTable().getName();\r\n+        _fullTableName = dict.getFullName(mapping.getTable(), false);\r\n+        _pkColName = mapping.getTable().getPrimaryKey().\r\n+                getColumns()[0].getName();\r\n+        _intColName = mapping.getFieldMapping(\"intField\").\r\n+                getColumns()[0].getName();\r\n+        _stringColName = mapping.getFieldMapping(\"stringField\").\r\n+                getColumns()[0].getName();\r\n+        _relColName = mapping.getFieldMapping(\"selfOneOne\").\r\n+                getColumns()[0].getName();\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testStarQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testCompiledQuery()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        \r\n+        //FIXME jthomas\r\n+        //q = pm.createQuery(roundtrips(q, false));\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testCompiledLanguageQuery()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        \r\n+        //FIXME jthomas\r\n+        //q = pm.createQuery(\"javax.jdo.query.SQL\", roundtrips(q, false));\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testTableStarQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _tableName + \".* from \" + _fullTableName + \" order by \"\r\n+                + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testColumnQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _pkColName + \", \" + _intColName + \", \" + _stringColName\r\n+                + \" from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testJoinQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select t0.* from \" + _fullTableName + \" t0, \"\r\n+                + _fullTableName + \" t1 where t0.\" + _relColName + \" = t1.\"\r\n+                + _pkColName + \" and t1.\" + _intColName + \" = 2\");\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testParameters() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" where 'foo' = ? and \"\r\n+                + _intColName + \" = ?\");\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        //FIXME jthomas\r\n+        /*Iterator itr = ((Collection) q.execute(\"foo\", new Integer(2))).\r\n+                iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+         */\r\n+        q.closeAll();\r\n+        \r\n+        Map params = new HashMap();\r\n+        params.put(new Integer(1), \"foo\");\r\n+        params.put(new Integer(2), new Integer(2));\r\n+        //FIXME jthomas\r\n+        /*itr = ((Collection) q.executeWithMap(params)).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+         */\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testOnlySelectedFieldsLoaded() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _pkColName + \", \" + _intColName + \", \" + _stringColName\r\n+                + \" from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        RuntimeTest1 pc = (RuntimeTest1) itr.next();\r\n+        OpenJPAStateManager sm = getStateManager(pc, pm);\r\n+        assertTrue(sm.getLoaded().get(sm.getMetaData().\r\n+                getField(\"intField\").getIndex()));\r\n+        assertTrue(sm.getLoaded().get(sm.getMetaData().\r\n+                getField(\"stringField\").getIndex()));\r\n+        assertFalse(sm.getLoaded().get(sm.getMetaData().\r\n+                getField(\"longField\").getIndex()));\r\n+        assertEquals(\"1\", pc.getStringField());\r\n+        assertFalse(sm.getLoaded().get(sm.getMetaData().\r\n+                getField(\"longField\").getIndex()));\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testSingleColumnClasslessQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _stringColName + \" from \" + _fullTableName\r\n+                + \" order by \" + _stringColName);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", itr.next());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", itr.next());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        \r\n+        q.setResultClass(Object[].class);\r\n+        itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Object[] vals = (Object[]) itr.next();\r\n+        assertEquals(1, vals.length);\r\n+        assertEquals(\"1\", vals[0]);\r\n+        assertTrue(itr.hasNext());\r\n+        vals = (Object[]) itr.next();\r\n+        assertEquals(1, vals.length);\r\n+        assertEquals(\"2\", vals[0]);\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testMultiColumnClasslessQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _intColName + \", \" + _stringColName + \" from \"\r\n+                + _fullTableName + \" order by \" + _stringColName);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Object[] vals = (Object[]) itr.next();\r\n+        assertEquals(2, vals.length);\r\n+        assertEquals(1, ((Number) vals[0]).intValue());\r\n+        assertEquals(\"1\", vals[1]);\r\n+        assertTrue(itr.hasNext());\r\n+        vals = (Object[]) itr.next();\r\n+        assertEquals(2, vals.length);\r\n+        assertEquals(2, ((Number) vals[0]).intValue());\r\n+        assertEquals(\"2\", vals[1]);\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testResultClass() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        q.setResultClass(Holder.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Holder holder = (Holder) itr.next();\r\n+        assertEquals(0, holder.I);\r\n+        assertNull(holder.S);\r\n+        assertNotNull(holder.pc);\r\n+        assertEquals(\"1\", holder.pc.getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        holder = (Holder) itr.next();\r\n+        assertEquals(0, holder.I);\r\n+        assertNull(holder.S);\r\n+        assertNotNull(holder.pc);\r\n+        assertEquals(\"2\", holder.pc.getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testClasslessProjection() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _intColName + \" as I, \" + _stringColName + \" as S from \"\r\n+                + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(Holder.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Holder holder = (Holder) itr.next();\r\n+        assertNull(holder.pc);\r\n+        assertEquals(1, holder.I);\r\n+        assertEquals(\"1\", holder.S);\r\n+        assertTrue(itr.hasNext());\r\n+        holder = (Holder) itr.next();\r\n+        assertNull(holder.pc);\r\n+        assertEquals(2, holder.I);\r\n+        assertEquals(\"2\", holder.S);\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Manual test to see if a relation will be eagerly loaded when SQL\r\n+     * containing enough information is run. This is not run as part of\r\n+     * the unit tests since we don't know if this behavior should be\r\n+     * really expected to work or not.\r\n+     */\r\n+    public void relationLoadedTest() {\r\n+       deleteAll(AttachD.class);\r\n+       deleteAll(AttachA.class);\r\n+        \r\n+        AttachD d = new AttachD();\r\n+        AttachA a = new AttachA();\r\n+        d.setA(a);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        pm.persist(d);\r\n+        pm.getTransaction().commit();\r\n+        pm.close();\r\n+        \r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) pm).getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        MappingRepository repos = conf.getMappingRepositoryInstance();\r\n+        \r\n+        ClassMapping mappingA = repos.getMapping(AttachD.class,\r\n+                pm.getClassLoader(), true);\r\n+        String tableNameA = mappingA.getTable().getName();\r\n+        String fullTableNameA = dict.getFullName(mappingA.getTable(), false);\r\n+        String relColNameA = mappingA.getFieldMapping(\"a\").\r\n+                getColumns()[0].getName();\r\n+        \r\n+        ClassMapping mappingD = repos.getMapping(AttachA.class,\r\n+                pm.getClassLoader(), true);\r\n+        String tableNameD = mappingD.getTable().getName();\r\n+        String fullTableNameD = dict.getFullName(mappingD.getTable(), false);\r\n+        String pkColNameD = mappingD.getTable().getPrimaryKey().\r\n+                getColumns()[0].getName();\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select t0.*, t1.* from \"\r\n+                + fullTableNameA + \" t0, \"\r\n+                + fullTableNameD + \" t1 \"\r\n+                + \"where t0.\" + relColNameA + \" = t1.\" + pkColNameD);\r\n+        \r\n+        // even the exact same SQL that Kodo generates will not\r\n+        // eagerly load the relation\r\n+        /*\r\n+          q = pm.newQuery (\"javax.jdo.query.SQL\",\r\n+              \"SELECT t1.ID, t1.TYP, t1.VERSN, t1.ADBL, t1.AINT, \"\r\n+              + \"t1.ASTR, t1.BDBL, t1.BINT, t1.BSTR, t1.CDBL, t1.CINT, \"\r\n+              + \"t1.CSTR, t0.DDBL, t0.DINT, t0.DSTR \"\r\n+              + \"FROM ATTACHD t0 LEFT OUTER JOIN ATTACHA t1 ON t0.A = t1.ID\");\r\n+         */\r\n+        \r\n+        q.setResultClass(AttachD.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        \r\n+        d = (AttachD) itr.next();\r\n+        // d.getDstr ();\r\n+        \r\n+        OpenJPAStateManager sm = getStateManager(d, pm);\r\n+        assertTrue(sm.getLoaded().\r\n+                get(sm.getMetaData().getField(\"a\").getIndex()));\r\n+        assertNotNull(d.getA());\r\n+        assertFalse(itr.hasNext());\r\n+        \r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public static class Holder {\r\n+        \r\n+        public RuntimeTest1 pc;\r\n+        public int I;\r\n+        public String S;\r\n+        \r\n+        public void setRuntimeTest1(RuntimeTest1 pc) {\r\n+            this.pc = pc;\r\n+        }\r\n+    }\r\n+    \r\n+    public static void main(String[] args)\r\n+    throws Exception {\r\n+        // main ();\r\n+        \r\n+        new TestSQLQueries().relationLoadedTest();\r\n+    }\r\n+    \r\n+    private static Object roundtrips(Object orig, boolean validateEquality)\r\n+    throws IOException, ClassNotFoundException {\r\n+        assertNotNull(orig);\r\n+        \r\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\r\n+        out.writeObject(orig);\r\n+        ByteArrayInputStream bin = new ByteArrayInputStream(\r\n+                bout.toByteArray());\r\n+        ObjectInputStream in = new ObjectInputStream(bin);\r\n+        Object result = in.readObject();\r\n+        \r\n+        if (validateEquality) {\r\n+            assertEquals(orig.hashCode(), result.hashCode());\r\n+            assertEquals(orig, result);\r\n+        }\r\n+        \r\n+        return result;\r\n+    }\r\n+    \r\n+}\r"},{"sha":"bef95c620918b552f278deb818384291e942560b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,125 @@\n+/*\r\n+ * TestStringFunctions.java\r\n+ *\r\n+ * Created on October 5, 2006, 5:20 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestStringFunctions extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+    private OpenJPAEntityManager _pm = null;\r\n+    private QueryTest1 _match = null;\r\n+    \r\n+    /** Creates a new instance of TestStringFunctions */\r\n+    public TestStringFunctions(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(QueryTest1.class);\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        QueryTest1 match = new QueryTest1();\r\n+        match.setString(\"foobarbiz\");\r\n+        pm.persist(match);\r\n+        QueryTest1 fail = new QueryTest1();\r\n+        fail.setString(\"barbizraz\");\r\n+        pm.persist(fail);\r\n+        pm.getTransaction().commit();\r\n+        Object oid = pm.getObjectId(match);\r\n+        pm.close();\r\n+\r\n+        _pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        _match = (QueryTest1) _pm.getObjectId(oid);\r\n+    }\r\n+\r\n+    public void tearDown()\r\n+        throws Exception {\r\n+        if (_pm != null)\r\n+            _pm.close();\r\n+\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    public void testSubstring() {\r\n+        assertMatch(\"string.substring (3) == 'barbiz'\");\r\n+        assertMatch(\"string.substring (3, 6) == 'bar'\");\r\n+    }\r\n+\r\n+    public void testIndexOf() {\r\n+        assertMatch(\"string.indexOf ('bar') == 3\");\r\n+        assertMatch(\"string.indexOf (\\\"b\\\", 4) == 6\");\r\n+        assertMatch(\"string.indexOf ('b', 4) == 6\");\r\n+    }\r\n+\r\n+    public void testToLowerCase() {\r\n+        assertMatch(\"string.toLowerCase () == 'foobarbiz'\");\r\n+        assertMatch(\"'FOOBARBIZ'.toLowerCase () == string\");\r\n+    }\r\n+\r\n+    public void testToUpperCase() {\r\n+        assertMatch(\"string.toUpperCase () == 'FOOBARBIZ'\");\r\n+    }\r\n+\r\n+    public void testStartsWith() {\r\n+        assertMatch(\"string.startsWith ('foobar')\");\r\n+        assertMatch(\"'foobarbizbaz'.startsWith (string)\");\r\n+    }\r\n+\r\n+    public void testEndsWith() {\r\n+        assertMatch(\"string.endsWith ('barbiz')\");\r\n+        assertMatch(\"'bazfoobarbiz'.endsWith (string)\");\r\n+    }\r\n+\r\n+    public void testMatches() {\r\n+        assertMatch(\"string.matches ('.oobar.*')\");\r\n+        assertMatch(\"string.matches ('FOO.AR.IZ(?i)')\");\r\n+    }\r\n+\r\n+    private void assertMatch(String filter) {\r\n+        OpenJPAQuery q = _pm.createNativeQuery(filter,QueryTest1.class);\r\n+        Collection res = (Collection) q.getCandidateCollection();\r\n+        assertEquals(1, res.size());\r\n+        assertEquals(_match, res.iterator().next());\r\n+        q.closeAll();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"b1b19b26522de230f0f66d12eb1404035cbee750","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","status":"added","additions":237,"deletions":0,"changes":237,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,237 @@\n+/*\r\n+ * TestClassDBSequenceFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 11:29 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestClassDBSequenceFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestClassDBSequenceFactory */\r\n+    public TestClassDBSequenceFactory() {\r\n+    }\r\n+    \r\n+    public TestClassDBSequenceFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(SeqE.class);\r\n+    }\r\n+    \r\n+    boolean supportsPessimisticLocking() {\r\n+        OpenJPAConfiguration conf = getConfiguration();\r\n+        return conf instanceof JDBCConfiguration\r\n+                && ((JDBCConfiguration) conf).getDBDictionaryInstance().\r\n+                supportsSelectForUpdate;\r\n+    }\r\n+    \r\n+    public void testVirtualSuperclass() {\r\n+        \r\n+        OpenJPAEntityManagerFactory pmf =(OpenJPAEntityManagerFactory)\r\n+                getEmf(getProps());\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager) pmf.createEntityManager();\r\n+        //FIXME jthomas\r\n+        //Sequence gen = pm.getIdentitySequence(SeqF.class);\r\n+        Sequence gen=null;\r\n+        long next = ((Number) gen.getIncrement()).longValue();\r\n+        //FIXME jthomas\r\n+        //gen = pm.getIdentitySequence(SeqG.class);\r\n+        assertEquals(next + 1, ((Number) gen.getIncrement()).longValue());\r\n+        pm.close();\r\n+        pmf.close();\r\n+    }\r\n+    \r\n+    public void testIgnoreVirtualSuperclass() {\r\n+        \r\n+        Map props=new HashMap();\r\n+        props.put(\"TableName\", \"JDO_CLASS_SEQUENCE\");\r\n+        props.put(\"IgnoreVirtual\", \"true\");\r\n+        OpenJPAEntityManagerFactory pmf =(OpenJPAEntityManagerFactory)\r\n+                getEmf(props);\r\n+        OpenJPAEntityManager pm = pmf.createEntityManager();\r\n+        //FIXME jthomas\r\n+        //Sequence gen = pm.getIdentitySequence(SeqF.class);\r\n+        Sequence gen =null;\r\n+        long next = ((Number) gen.getIncrement()).longValue();\r\n+        //FIXME jthomas\r\n+        //Sequence gen2 = pm.getIdentitySequence(SeqG.class);\r\n+        Sequence gen2 =null;\r\n+        long next2 = ((Number) gen2.getIncrement()).longValue();\r\n+        if (next2 != next + 1)\r\n+            return; // valid.\r\n+        assertTrue(((Number) gen.getIncrement()).longValue() != next2 + 1);\r\n+        \r\n+        pm.close();\r\n+        pmf.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Based on reported bug case.\r\n+     */\r\n+    public void testNoSequenceHolesOnAttach() {\r\n+        PerClassTestObject3 pc = new PerClassTestObject3();\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc);\r\n+        endTx(pm);;\r\n+        long id1 = pc.getId();\r\n+        \r\n+        pc = new PerClassTestObject3();\r\n+        startTx(pm);;\r\n+        pm.persist(pc);\r\n+        long id2 = pc.getId();\r\n+        endTx(pm);;\r\n+        pm.close();\r\n+        \r\n+        pc = new PerClassTestObject3();\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc);\r\n+        endTx(pm);;\r\n+        long id3 = pc.getId();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(id1 + 1, id2);\r\n+        assertEquals(id2 + 1, id3);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests that all sequence numbers are unique and in order.\r\n+     * Will fail for dbs without pessimistic locking.\r\n+     */\r\n+    public void testSequence()\r\n+    throws Exception {\r\n+        if (!(supportsPessimisticLocking()))\r\n+            return;\r\n+        \r\n+        Set set = new HashSet();\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        \r\n+        \r\n+        UpdateThread t1 = new UpdateThread(set, broker);\r\n+        UpdateThread t2 = new UpdateThread(set, broker);\r\n+        \r\n+        t1.start();\r\n+        t2.start();\r\n+        t1.join();\r\n+        t2.join();\r\n+        \r\n+        if (t1.error != null)\r\n+            throw t1.error;\r\n+        if (t2.error != null)\r\n+            throw t2.error;\r\n+        \r\n+        assertEquals(102, set.size());\r\n+    }\r\n+    \r\n+    public void testSequenceGenerator() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        // make sure the sequence generator creates separate\r\n+        // instances.\r\n+        for (int i = 0; i < 100; i++) {\r\n+            //FIXME jthomas\r\n+            /*assertEquals(((Number) pm.getIdentitySequence(SeqD.class).\r\n+                    next()).longValue() + 1,\r\n+                    ((Number) pm.getIdentitySequence(SeqD.class).\r\n+                    getIncrement()).longValue());\r\n+             \r\n+             */\r\n+        }\r\n+        // make sure the sequence generate is not the same as is\r\n+        // used elsewhere\r\n+        \r\n+        for (int j = 0; j < 100; j++) {\r\n+            //FIXME\r\n+            /*\r\n+            assertNotEquals(new Long(((Number) pm.getIdentitySequence\r\n+                    (SeqA.class).getIncrement()).longValue() + 1),\r\n+                    pm.getIdentitySequence(SeqD.class).next());\r\n+             */\r\n+        }\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        //main();\r\n+    }\r\n+    private Map getProps() {\r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.Sequence\", \"db-class(TableName=JDO_CLASS_SEQUENCE\");\r\n+        return props;\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+    private static class UpdateThread\r\n+            extends Thread {\r\n+        \r\n+        private Set _set = null;\r\n+        private Broker _broker = null;\r\n+        public Exception error = null;\r\n+        \r\n+        public UpdateThread(Set set, Broker broker) {\r\n+            _set = set;\r\n+            _broker = broker;\r\n+        }\r\n+        \r\n+        public void run() {\r\n+            try {\r\n+                ClassMapping mapping =\r\n+                        ((JDBCConfiguration) _broker.getConfiguration()).\r\n+                        getMappingRepositoryInstance().\r\n+                        getMapping(SeqD.class, null, true);\r\n+                ClassTableJDBCSeq seq = (ClassTableJDBCSeq)\r\n+                _broker.getIdentitySequence(mapping);\r\n+                for (int i = 0; i < 51; i++)\r\n+                    _set.add(seq.next(_broker, mapping));\r\n+            } catch (Exception e) {\r\n+                error = e;\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"dcb726263df8881f37b43bcf1035c316934b2277","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,208 @@\n+/*\r\n+ * TestClassSequenceFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 12:21 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+import java.util.*;\r\n+import javax.sql.DataSource;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest;\r\n+\r\n+\r\n+public class TestClassSequenceFactory extends BaseJDBCTest{\r\n+    \r\n+\r\n+    private static Map _sysprops = new HashMap();\r\n+    \r\n+    Broker _broker;\r\n+    \r\n+    /** Creates a new instance of TestClassSequenceFactory */\r\n+    public TestClassSequenceFactory() {\r\n+    }\r\n+    public TestClassSequenceFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    public void setUp()\r\n+    throws Exception {\r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        conf.fromProperties(getProperties());\r\n+        if (!adjustConfiguration(conf))\r\n+            return;\r\n+        \r\n+        String driver = conf.getConnectionDriverName().toLowerCase();\r\n+        String [] sql = null;\r\n+        \r\n+        if (driver.indexOf(\"oracle\") >= 0) {\r\n+            sql = new String []{\r\n+                \"create sequence seqa_seq\",\r\n+                \"create sequence seqb_seq\"\r\n+            };\r\n+        }\r\n+        \r\n+        if (sql == null)\r\n+            return;\r\n+        \r\n+        DataSource ds = conf.getDataSource2(null);\r\n+        Connection c = ds.getConnection();\r\n+        Statement s = null;\r\n+        try {\r\n+            s = c.createStatement();\r\n+            for (int i = 0; i < sql.length; i++) {\r\n+                try {\r\n+                    s.execute(sql[i]);\r\n+                } catch (SQLException sqe) {\r\n+                }\r\n+            }\r\n+        } finally {\r\n+            if (s != null)\r\n+                try {\r\n+                    s.close();\r\n+                } catch (Exception e) {\r\n+                }\r\n+        }\r\n+        \r\n+        _broker = getBrokerFactory().newBroker();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests that all sequence numbers are unique and in order.\r\n+     */\r\n+    public void testSequence()\r\n+    throws Exception {\r\n+        Set set = new HashSet();\r\n+        \r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        conf.fromProperties(getProperties());\r\n+        if (!adjustConfiguration(conf))\r\n+            return;\r\n+        Thread t1 = new UpdateThread(set, conf);\r\n+        Thread t2 = new UpdateThread(set, conf);\r\n+        \r\n+        t1.start();\r\n+        t2.start();\r\n+        t1.join();\r\n+        t2.join();\r\n+        \r\n+        assertEquals(102, set.size());\r\n+    }\r\n+    \r\n+    public void testExtensions()\r\n+    throws Exception {\r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        conf.fromProperties(getProperties());\r\n+        if (!adjustConfiguration(conf))\r\n+            return;\r\n+        \r\n+        ClassMapping aMapping = conf.getMappingRepositoryInstance().\r\n+                getMapping(SeqA.class, null, true);\r\n+        ClassMapping bMapping = conf.getMappingRepositoryInstance().\r\n+                getMapping(SeqB.class, null, true);\r\n+        ClassMapping cMapping = conf.getMappingRepositoryInstance().\r\n+                getMapping(SeqC.class, null, true);\r\n+        DataSource ds = conf.getDataSource2(null);\r\n+        \r\n+        // hold a and c and start b\r\n+        \r\n+        Seq seq = conf.getSequenceInstance();\r\n+        long aid = ((Long) seq.next(_broker, aMapping)).longValue();\r\n+        for (int i = 0; i < 5; i++)\r\n+            seq.next(_broker, bMapping);\r\n+        \r\n+        assertEquals(new Long(aid + 1), seq.next(_broker, aMapping));\r\n+        assertEquals(new Long(aid + 2), seq.next(_broker, cMapping));\r\n+    }\r\n+    \r\n+    /**\r\n+     * Pass in a mutable configuration\r\n+     * <p/>\r\n+     * return true if useable.\r\n+     */\r\n+    private boolean adjustConfiguration(JDBCConfiguration conf) {\r\n+        String driver = conf.getConnectionDriverName();\r\n+        if (driver == null)\r\n+            return false;\r\n+        driver = driver.toLowerCase();\r\n+        if (driver.indexOf(\"oracle\") >= 0) {\r\n+            conf.setSequence(ClassTableJDBCSeq.class.getName());\r\n+            return true;\r\n+        }\r\n+        \r\n+        return false;\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+//        main();\r\n+    }\r\n+    \r\n+    \r\n+    private class UpdateThread\r\n+            extends Thread {\r\n+        \r\n+        private JDBCConfiguration _conf;\r\n+        private Set _set = null;\r\n+        \r\n+        public UpdateThread(Set set, JDBCConfiguration conf) {\r\n+            _set = set;\r\n+            _conf = conf;\r\n+        }\r\n+        \r\n+        public void run() {\r\n+            DataSource ds = _conf.getDataSource2(null);\r\n+            try {\r\n+                Seq seq = _conf.getSequenceInstance();\r\n+                ClassMapping mapping = _conf.getMappingRepositoryInstance().\r\n+                        getMapping(SeqA.class, null, true);\r\n+                for (int i = 0; i < 51; i++)\r\n+                    _set.add(seq.next(_broker, mapping));\r\n+            } catch (Exception e) {\r\n+                throw new RuntimeException(e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+}\r"},{"sha":"96fbeabb26b0985eef47e5498f0277e81ed216fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,114 @@\n+/*\r\n+ * TestDBSequenceFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 1:24 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import javax.sql.DataSource;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestDBSequenceFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+        \r\n+    private Broker _broker;\r\n+    \r\n+    /** Creates a new instance of TestDBSequenceFactory */\r\n+    public TestDBSequenceFactory() {\r\n+    }\r\n+\r\n+    public TestDBSequenceFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that all sequence numbers are unique and in order.\r\n+     * Will fail for dbs without pessimistic locking.\r\n+     */\r\n+    public void testSequence()\r\n+        throws Exception {\r\n+        _broker = getBrokerFactory().newBroker();\r\n+\r\n+        Set set = Collections.synchronizedSet(new HashSet());\r\n+        Thread t1 = new UpdateThread(set);\r\n+        Thread t2 = new UpdateThread(set);\r\n+\r\n+        t1.start();\r\n+        t2.start();\r\n+        t1.join(5 * 60 * 1000);\r\n+        t2.join(5 * 60 * 1000);\r\n+\r\n+        assertFalse(t1.isAlive());\r\n+        assertFalse(t2.isAlive());\r\n+\r\n+        assertEquals(102, set.size());\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        //main();\r\n+    }\r\n+\r\n+    private class UpdateThread\r\n+        extends Thread {\r\n+\r\n+        private Set _set = null;\r\n+\r\n+        public UpdateThread(Set set) {\r\n+            _set = set;\r\n+        }\r\n+\r\n+        public void run() {\r\n+            try {\r\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+                TableJDBCSeq seq = new TableJDBCSeq();\r\n+                seq.setConfiguration(conf);\r\n+                seq.startConfiguration();\r\n+                seq.endConfiguration();\r\n+                DataSource ds = conf.getDataSource2(null);\r\n+                for (int i = 0; i < 51; i++)\r\n+                    _set.add(seq.next(_broker, \r\n+                        conf.getMetaDataRepositoryInstance().\r\n+                        getMetaData(RuntimeTest1.class, null, true)));\r\n+            } catch (Exception e) {\r\n+                throw new RuntimeException(e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+}\r"},{"sha":"43653bd154480997983ea66df9a244d31bf4741f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * TestDynamicSchemaFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 1:34 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.sql.Types;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.Discriminator;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.meta.Version;\r\n+import org.apache.openjpa.jdbc.schema.DynamicSchemaFactory;\r\n+import org.apache.openjpa.jdbc.schema.Schemas;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestDynamicSchemaFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    private ClassMapping _mapping = null;    \r\n+    \r\n+    /** Creates a new instance of TestDynamicSchemaFactory */\r\n+    public TestDynamicSchemaFactory() {\r\n+    }\r\n+    public TestDynamicSchemaFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        conf.setSchemaFactory(DynamicSchemaFactory.class.getName());\r\n+        MappingRepository repos = conf.newMappingRepositoryInstance();\r\n+        _mapping = repos.getMapping(MappingTest1.class, null, true);\r\n+    }\r\n+\r\n+    public void testClassMapping() {\r\n+        Table table = _mapping.getTable();\r\n+        assertEquals(\"MAPPINGTEST1\", table.getName().toUpperCase());\r\n+        assertEquals(1, table.getPrimaryKey().getColumns().length);\r\n+        int type = table.getPrimaryKey().getColumns()[0].getType();\r\n+        assertEquals(Schemas.getJDBCName(type), Types.INTEGER, type);\r\n+    }\r\n+\r\n+    public void testIndicators() {\r\n+        Version vers = _mapping.getVersion();\r\n+        assertNotNull(vers);\r\n+        assertEquals(\"MAPPINGTEST1\", vers.getColumns()[0].getTable().\r\n+            getName().toUpperCase());\r\n+        assertEquals(Types.INTEGER, vers.getColumns()[0].getType());\r\n+\r\n+        Discriminator cls = _mapping.getDiscriminator();\r\n+        assertNotNull(cls);\r\n+        assertEquals(\"MAPPINGTEST1\", cls.getColumns()[0].getTable().\r\n+            getName().toUpperCase());\r\n+        assertEquals(Types.VARCHAR, cls.getColumns()[0].getType());\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+       // main(TestDynamicSchemaFactory.class);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"4590a1df7b5a01928c9f0664a30e908367cbe9f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * TestJDBCListener.java\r\n+ *\r\n+ * Created on October 6, 2006, 1:38 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestJDBCListener extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    public static boolean commitOccurred;    \r\n+    \r\n+    /** Creates a new instance of TestJDBCListener */\r\n+    public TestJDBCListener() {\r\n+    }\r\n+\r\n+    public TestJDBCListener(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void testJDBCListener() {\r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.jdbc.JDBCListeners\", Listener.class.getName());\r\n+        \r\n+        OpenJPAEntityManagerFactory factory =(OpenJPAEntityManagerFactory)\r\n+                getEmf(props);\r\n+\r\n+        commitOccurred = false;\r\n+        OpenJPAEntityManager pm = factory.createEntityManager();     \r\n+        \r\n+        pm.getTransaction().begin();\r\n+        assertFalse(commitOccurred);\r\n+        pm.persist(new RuntimeTest1(\"Listener test\", 99));\r\n+        pm.getTransaction().commit();\r\n+        assertTrue(\"Commit event should have occurred, but did not\",\r\n+            commitOccurred);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public static class Listener\r\n+        extends AbstractJDBCListener {\r\n+\r\n+        public void beforeCommit(JDBCEvent event) {\r\n+            commitOccurred = true;\r\n+        }\r\n+    }    \r\n+}\r"},{"sha":"91d5bc665948ec4222b716c8c200935bac1be452","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * TestLazySchemaFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 1:47 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.schema.LazySchemaFactory;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestLazySchemaFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+       \r\n+    private SchemaGroup _group = null;\r\n+    private boolean _fks = true;\r\n+    \r\n+    /** Creates a new instance of TestLazySchemaFactory */\r\n+    public TestLazySchemaFactory() {\r\n+    }\r\n+\r\n+    public TestLazySchemaFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        // see if the dict supports foreign keys; mysql can support them, but\r\n+        // can't detect keys added through alter table commands, which is what\r\n+        // kodo uses\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        _fks = conf.getDBDictionaryInstance().supportsForeignKeys\r\n+            && getCurrentPlatform() != AbstractTestCase.Platform.MYSQL;\r\n+\r\n+        LazySchemaFactory factory = new LazySchemaFactory();\r\n+        factory.setConfiguration(conf);\r\n+        factory.setPrimaryKeys(true);\r\n+        factory.setIndexes(true);\r\n+        factory.setForeignKeys(true);\r\n+        _group = factory;\r\n+    }\r\n+\r\n+    public void testLazySchemaFactory() {\r\n+        // should read tables 1 and 2...\r\n+        Table table = _group.findTable(\"T1\");\r\n+        assertNotNull(table);\r\n+        Table table2 = _group.findTable(\"t1\");\r\n+        assertTrue(table == table2);\r\n+\r\n+        int expectedColumns = 2;\r\n+\r\n+        // Sybase has an extra \"UNQ_INDEX\" column.\r\n+        if (getCurrentPlatform() == AbstractTestCase.Platform.SYBASE)\r\n+            expectedColumns++;\r\n+\r\n+        assertEquals(expectedColumns, table.getColumns().length);\r\n+        if (_fks)\r\n+            assertEquals(1, table.getForeignKeys().length);\r\n+\r\n+        table2 = _group.findTable(\"T2\");\r\n+        assertNotNull(table2);\r\n+        if (_fks)\r\n+            assertTrue(table.getForeignKeys()[0].getPrimaryKeyColumns()[0].\r\n+                getTable() == table2);\r\n+\r\n+        assertNull(table.getSchema().getTable(\"T3\"));\r\n+\r\n+        // should read table 3 only...\r\n+        Table table3 = _group.findTable(\"T3\");\r\n+        assertNotNull(table3);\r\n+        assertTrue(table.getSchema().getTable(\"T3\") == table3);\r\n+        if (_fks)\r\n+            assertTrue(table3.getForeignKeys()[0].getPrimaryKeyColumns()[0].\r\n+                getTable() == table);\r\n+\r\n+        assertNull(table3.getSchema().getTable(\"T4\"));\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        //main(TestLazySchemaFactory.class);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"241dd8f7bdcc00ae851530aab7340c3fd4d98299","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * TestPerClassSequenceFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:25 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestPerClassSequenceFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+   \r\n+    /** Creates a new instance of TestPerClassSequenceFactory */\r\n+    public TestPerClassSequenceFactory() {\r\n+    }\r\n+    public TestPerClassSequenceFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void testPerClassSequenceFactory()\r\n+        throws Exception {\r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.Sequence\", \"table\");\r\n+        \r\n+        OpenJPAEntityManagerFactory factory =(OpenJPAEntityManagerFactory)\r\n+                getEmf(props);\r\n+\r\n+        JDBCConfiguration conf = (JDBCConfiguration)\r\n+            factory.getConfiguration();\r\n+        ClassMapping mapping1 = conf.getMappingRepositoryInstance().\r\n+            getMapping(RuntimeTest1.class, null, true);\r\n+        ClassMapping mapping2 = conf.getMappingRepositoryInstance().\r\n+            getMapping(PerClassTestObject.class, null, true);\r\n+        ClassMapping mapping3 = conf.getMappingRepositoryInstance().\r\n+            getMapping(PerClassTestObject2.class, null, true);\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        //FIXME jthomas\r\n+        /*\r\n+        Sequence s1 = pm.getIdentitySequence(mapping1.getDescribedType());\r\n+        Sequence s2 = pm.getIdentitySequence(mapping2.getDescribedType());\r\n+        Sequence s3 = pm.getFieldSequence(mapping3.getDescribedType(), \"age\");\r\n+        assertTrue(((SequenceImpl) s1).getDelegate()\r\n+            instanceof TableJDBCSeq);\r\n+        assertTrue(((SequenceImpl) s2).getDelegate().toString(),\r\n+            ((SequenceImpl) s2).getDelegate()\r\n+                instanceof DummySequenceFactory);\r\n+        assertTrue(((SequenceImpl) s2).getDelegate().toString(),\r\n+            ((SequenceImpl) s3).getDelegate()\r\n+                instanceof DummySequenceFactory);\r\n+         */\r\n+    }\r\n+\r\n+    public static class DummySequenceFactory\r\n+        implements Seq {\r\n+\r\n+        private long _val = 1;\r\n+\r\n+        public void setType(int type) {\r\n+        }\r\n+\r\n+        public Object next(StoreContext ctx, ClassMetaData meta) {\r\n+            _val++;\r\n+            return current(ctx, meta);\r\n+        }\r\n+\r\n+        public Object current(StoreContext ctx, ClassMetaData meta) {\r\n+            return new Long(_val);\r\n+        }\r\n+\r\n+        public void allocate(int num, StoreContext ctx, ClassMetaData meta) {\r\n+        }\r\n+\r\n+        public void close() {\r\n+        }\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"e1698e456406fa619fde9abd5542acb01d0f1df9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","status":"added","additions":331,"deletions":0,"changes":331,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,331 @@\n+/*\r\n+ * TestSchema.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:36 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n+import org.apache.openjpa.jdbc.schema.Index;\r\n+import org.apache.openjpa.jdbc.schema.PrimaryKey;\r\n+import org.apache.openjpa.jdbc.schema.Schema;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSchema extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    private Schema _schema = new SchemaGroup().addSchema(\"schema\");\r\n+    \r\n+    /** Creates a new instance of TestSchema */\r\n+    public TestSchema() {\r\n+    }\r\n+    public TestSchema(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the {@link Schema} class.\r\n+     */\r\n+    public void testSchema() {\r\n+        assertEquals(\"schema\", _schema.getName());\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"schema\"));\r\n+\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"table1\"));\r\n+        Table table1 = _schema.addTable(\"table1\");\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"table1\"));\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"table2\"));\r\n+\r\n+        Table[] tables = _schema.getTables();\r\n+        assertEquals(2, tables.length);\r\n+        assertEquals(table1, tables[0]);\r\n+        assertEquals(table2, tables[1]);\r\n+        assertEquals(table1, _schema.getTable(\"table1\"));\r\n+        assertEquals(table2, _schema.getTable(\"table2\"));\r\n+        assertNull(_schema.getTable(\"table3\"));\r\n+\r\n+        assertTrue(_schema.removeTable(table1));\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"table1\"));\r\n+        assertNull(_schema.getTable(\"table1\"));\r\n+        assertEquals(table2, _schema.getTable(\"table2\"));\r\n+        assertTrue(_schema.removeTable(table2));\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"table2\"));\r\n+        assertNull(_schema.getTable(\"table2\"));\r\n+        assertEquals(0, _schema.getTables().length);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the {@link Table} class.\r\n+     */\r\n+    public void testTable() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        assertEquals(_schema, table.getSchema());\r\n+        assertEquals(\"table\", table.getName());\r\n+\r\n+        assertTrue(!table.isNameTaken(\"schema\"));\r\n+        assertTrue(table.isNameTaken(\"table\"));\r\n+\r\n+        // pk testing\r\n+        assertNull(table.getPrimaryKey());\r\n+        PrimaryKey pk = table.addPrimaryKey(\"pk\");\r\n+        assertEquals(table, pk.getTable());\r\n+        assertEquals(pk, table.getPrimaryKey());\r\n+        assertTrue(!table.isNameTaken(\"pk\"));\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"pk\"));\r\n+\r\n+        table.removePrimaryKey();\r\n+        assertNull(table.getPrimaryKey());\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"pk\"));\r\n+\r\n+        // column testing\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        assertTrue(table.isNameTaken(\"c1\"));\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"c1\"));\r\n+        assertEquals(table, c1.getTable());\r\n+        Column[] cols = table.getColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(c2, cols[0]);\r\n+        assertEquals(c1, cols[1]);\r\n+\r\n+        assertEquals(c1, table.getColumn(\"c1\"));\r\n+        assertEquals(c2, table.getColumn(\"c2\"));\r\n+\r\n+        assertTrue(table.removeColumn(c1));\r\n+        assertTrue(!table.isNameTaken(\"c1\"));\r\n+        assertNull(table.getColumn(\"c1\"));\r\n+\r\n+        // foreign key testing\r\n+        ForeignKey fk = table.addForeignKey(\"fk\");\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"fk\"));\r\n+        assertTrue(!table.isNameTaken(\"fk\"));\r\n+        assertEquals(table, fk.getTable());\r\n+        ForeignKey[] fks = table.getForeignKeys();\r\n+        assertEquals(1, fks.length);\r\n+        assertEquals(fk, fks[0]);\r\n+\r\n+        assertTrue(table.removeForeignKey(fk));\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"fk\"));\r\n+        assertEquals(0, table.getForeignKeys().length);\r\n+\r\n+        // index testing\r\n+        Index idx = table.addIndex(\"idx\");\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"idx\"));\r\n+        assertTrue(!table.isNameTaken(\"idx\"));\r\n+        assertEquals(table, idx.getTable());\r\n+        Index[] idxs = table.getIndexes();\r\n+        assertEquals(1, idxs.length);\r\n+        assertEquals(idx, idxs[0]);\r\n+\r\n+        assertEquals(idx, table.getIndex(\"idx\"));\r\n+        assertTrue(table.removeIndex(idx));\r\n+        assertTrue(!table.isNameTaken(\"idx\"));\r\n+        assertNull(table.getIndex(\"idx\"));\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the {@link Index} class.\r\n+     */\r\n+    public void testIndex() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        Column c3 = table2.addColumn(\"c3\");\r\n+\r\n+        Index idx = table.addIndex(\"idx\");\r\n+        try {\r\n+            idx.addColumn(c3);\r\n+            fail(\"Allowed addition of column of another table.\");\r\n+        } catch (RuntimeException re) {\r\n+        }\r\n+\r\n+        Column[] cols = idx.getColumns();\r\n+        assertEquals(0, cols.length);\r\n+\r\n+        idx.addColumn(c1);\r\n+        idx.addColumn(c2);\r\n+        cols = idx.getColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(c1, cols[0]);\r\n+        assertEquals(c2, cols[1]);\r\n+\r\n+        assertTrue(idx.removeColumn(c1));\r\n+        cols = idx.getColumns();\r\n+        assertEquals(1, cols.length);\r\n+        assertEquals(c2, cols[0]);\r\n+        assertTrue(idx.removeColumn(c2));\r\n+        cols = idx.getColumns();\r\n+        assertEquals(0, cols.length);\r\n+\r\n+        assertTrue(!idx.isUnique());\r\n+        idx.setUnique(true);\r\n+        assertTrue(idx.isUnique());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the {@link ForeignKey} class.\r\n+     */\r\n+    public void testForeignKey() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        Column c3 = table2.addColumn(\"c3\");\r\n+        Column c4 = table2.addColumn(\"c4\");\r\n+\r\n+        ForeignKey fk = table.addForeignKey(\"fk\");\r\n+        try {\r\n+            fk.join(c4, c2);\r\n+            fail(\"Allowed addition of column of another table.\");\r\n+        } catch (RuntimeException re) {\r\n+        }\r\n+\r\n+        Column[] cols = fk.getColumns();\r\n+        Column[] pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(0, cols.length);\r\n+        assertEquals(0, pkCols.length);\r\n+        PrimaryKey pk = table2.addPrimaryKey(\"pk\");\r\n+        pk.addColumn(c3);\r\n+        fk.join(c1, c3);\r\n+        pk.addColumn(c4);\r\n+        fk.join(c2, c4);\r\n+        cols = fk.getColumns();\r\n+        pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(c1, cols[0]);\r\n+        assertEquals(c2, cols[1]);\r\n+        assertEquals(c3, pkCols[0]);\r\n+        assertEquals(c4, pkCols[1]);\r\n+\r\n+        assertTrue(fk.removeJoin(c1));\r\n+        cols = fk.getColumns();\r\n+        pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(1, cols.length);\r\n+        assertEquals(1, pkCols.length);\r\n+        assertEquals(c2, cols[0]);\r\n+        assertEquals(c4, pkCols[0]);\r\n+        assertTrue(fk.removeJoin(c2));\r\n+        cols = fk.getColumns();\r\n+        pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(0, cols.length);\r\n+        assertEquals(0, pkCols.length);\r\n+\r\n+        assertEquals(ForeignKey.ACTION_NONE, fk.getDeleteAction());\r\n+        assertTrue(fk.isLogical());\r\n+        fk.setDeleteAction(ForeignKey.ACTION_RESTRICT);\r\n+        assertEquals(ForeignKey.ACTION_RESTRICT, fk.getDeleteAction());\r\n+        assertFalse(fk.isLogical());\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests the {@link SchemaGroup} class.\r\n+     */\r\n+    public void testSchemaGroup() {\r\n+        SchemaGroup group = _schema.getSchemaGroup();\r\n+        assertEquals(_schema, group.getSchema(\"schema\"));\r\n+        Table foo1 = _schema.addTable(\"foo\");\r\n+\r\n+        Schema schema2 = group.addSchema(\"schema2\");\r\n+        assertNull(schema2.getTable(\"foo\"));\r\n+        Table foo2 = schema2.addTable(\"foo\");\r\n+        assertEquals(foo2, schema2.getTable(\"foo\"));\r\n+        assertEquals(foo1, _schema.getTable(\"foo\"));\r\n+\r\n+        assertEquals(foo1, group.findTable(\"schema.foo\"));\r\n+        assertEquals(foo2, group.findTable(\"schema2.foo\"));\r\n+    }\r\n+\r\n+    /**\r\n+     * Test primary key removal.\r\n+     */\r\n+    public void testPrimaryKeyRemoval() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        Column c3 = table2.addColumn(\"c3\");\r\n+        Column c4 = table2.addColumn(\"c4\");\r\n+        PrimaryKey pk = table2.addPrimaryKey(\"pk\");\r\n+        pk.addColumn(c3);\r\n+        pk.addColumn(c4);\r\n+        ForeignKey fk = table.addForeignKey(\"fk\");\r\n+        fk.join(c1, c3);\r\n+        fk.join(c2, c4);\r\n+\r\n+        table2.removePrimaryKey();\r\n+        assertNull(pk.getTable());\r\n+        assertNull(table2.getPrimaryKey());\r\n+        assertEquals(0, table.getForeignKeys().length);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test column removal.\r\n+     */\r\n+    public void testColumnRemoval() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        PrimaryKey pk = table.addPrimaryKey(\"pk\");\r\n+        pk.addColumn(c1);\r\n+        Index idx1 = table.addIndex(\"idx1\");\r\n+        idx1.addColumn(c1);\r\n+        Index idx2 = table.addIndex(\"idx2\");\r\n+        idx2.addColumn(c1);\r\n+        idx2.addColumn(c2);\r\n+\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        Column c3 = table2.addColumn(\"c3\");\r\n+        Column c4 = table2.addColumn(\"c4\");\r\n+        pk = table2.addPrimaryKey(\"pk2\");\r\n+        pk.addColumn(c3);\r\n+        ForeignKey fk = table.addForeignKey(\"fk\");\r\n+        fk.join(c1, c3);\r\n+\r\n+        table.removeColumn(c1);\r\n+        assertNull(table.getPrimaryKey());\r\n+        assertNull(table.getIndex(\"idx1\"));\r\n+        assertEquals(1, idx2.getColumns().length);\r\n+        assertEquals(0, table.getForeignKeys().length);\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        //main(TestSchema.class);\r\n+\t}\r\n+    \r\n+}\r"},{"sha":"f0c75ea595cad26baac7ec945544800150216a84","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * TestSchemaClone.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:40 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSchemaClone extends TestXMLSchemaParser {\r\n+    \r\n+    /** Creates a new instance of TestSchemaClone */\r\n+    public TestSchemaClone() {\r\n+    }\r\n+    \r\n+    public TestSchemaClone(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    protected SchemaGroup getSchemaGroup()\r\n+    throws Exception {\r\n+        // parse in the schema group, then clone it, and test against clone\r\n+        SchemaGroup group = parseSchemaGroup();\r\n+        return (SchemaGroup) group.clone();\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        //main(TestSchemaClone.class);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"57bc6daa007bf92dd5c28ae7e6dc6cf922d67593","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * TestSchemaGenerator.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:57 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.io.StringWriter;\r\n+import java.sql.Connection;\r\n+import java.sql.DatabaseMetaData;\r\n+import java.util.*;\r\n+import javax.sql.DataSource;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.SchemaTool;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestSchemaGenerator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+        \r\n+    /** Creates a new instance of TestSchemaGenerator */\r\n+    public TestSchemaGenerator(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void DBMetadataTest()\r\n+    throws Exception {\r\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\r\n+        getEmf();\r\n+        //FIXME jthomas\r\n+        \r\n+        //ClassMapping cm = (ClassMapping) KodoJDOHelper.getMetaData\r\n+        //    (pmf, RuntimeTest1.class);\r\n+        ClassMapping cm =null;\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        \r\n+        DataSource ds = (DataSource) conf.getDataSource2(null);\r\n+        Connection c = ds.getConnection();\r\n+        DatabaseMetaData meta = c.getMetaData();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        \r\n+        String schema = cm.getTable().getSchema().getName();\r\n+        Table[] tables = dict.getTables(meta, c.getCatalog(), schema,\r\n+                cm.getTable().getName(), c);\r\n+        assertEquals(1, tables.length);\r\n+        \r\n+        Column[] columns = dict.getColumns(meta, c.getCatalog(), schema,\r\n+                cm.getTable().getName(), null, c);\r\n+        for (int i = 0; i < columns.length; i++)\r\n+            System.out.println(\"### \" + columns[i].getName());\r\n+    }\r\n+    \r\n+    public void testSchemaGen()\r\n+    throws Exception {\r\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\r\n+        getEmf();\r\n+        OpenJPAEntityManager pm = pmf.createEntityManager();\r\n+        JDBCConfiguration con = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) pm).getConfiguration();\r\n+        DBDictionary dict = con.getDBDictionaryInstance();\r\n+        MappingRepository repos = con.getMappingRepositoryInstance();\r\n+        ClassMapping cm = repos.getMapping(RuntimeTest1.class,\r\n+                pm.getClassLoader(), true);\r\n+        String schemas = cm.getTable().getSchema().getName();\r\n+        if (schemas == null)\r\n+            schemas = \"\";\r\n+        schemas += \".\" + cm.getTable().getName();\r\n+        \r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.jdbc.Schemas\", schemas);\r\n+        \r\n+        OpenJPAEntityManagerFactory kpmf =(OpenJPAEntityManagerFactory)\r\n+                getEmf(props);\r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) kpmf).getConfiguration();\r\n+        \r\n+        StringWriter sw = new StringWriter();\r\n+        \r\n+        SchemaTool.Flags flags = new SchemaTool.Flags();\r\n+        flags.writer = sw;\r\n+        flags.primaryKeys = true;\r\n+        flags.foreignKeys = true;\r\n+        flags.indexes = true;\r\n+        flags.openjpaTables = true;\r\n+        flags.action = SchemaTool.ACTION_REFLECT;\r\n+        \r\n+        SchemaTool.run(conf, new String[0], flags,\r\n+                getClass().getClassLoader());\r\n+        \r\n+        sw.flush();\r\n+        String data = sw.toString();\r\n+        assertTrue(data.length() > 0);\r\n+    }\r\n+}\r"},{"sha":"3941581e0585de47b0b653ba96d667fc7b2af629","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\r\n+import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\r\n+import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.SequenceMetaData;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSequenceGeneratorEnsureCapacityCall \r\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n+   \r\n+    \r\n+    \r\n+    /** Creates a new instance of TestSequenceGeneratorEnsureCapacityCall */\r\n+    public TestSequenceGeneratorEnsureCapacityCall(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+\r\n+    // class SeqA uses the default sequence factory.\r\n+    public void testDBSequenceFactory() {\r\n+        TableJDBCSeq seq = (TableJDBCSeq) seqForClass(SeqA.class);\r\n+        incrementTest(SeqA.class, seq.getAllocate());\r\n+    }\r\n+\r\n+    // class SeqD uses the db-class sequence factory.\r\n+    public void testClassDBSequenceFactory() {\r\n+        ClassTableJDBCSeq seq = (ClassTableJDBCSeq) seqForClass(SeqD.class);\r\n+        incrementTest(SeqD.class, seq.getAllocate());\r\n+    }\r\n+\r\n+    private void incrementTest(Class cls, int generatorIncrement) {\r\n+        // guaranteed to be more than a single batch, so ensureCapacity should\r\n+        // do its thing.\r\n+        int amountToIncrement = generatorIncrement * 2;\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        //FIXME jthomas\r\n+        //Sequence s = pm.getIdentitySequence(cls);\r\n+        Sequence s =null;\r\n+        s.setAllocate(amountToIncrement);\r\n+\r\n+        sql.clear();\r\n+        for (int i = 0; i < amountToIncrement; i++) {\r\n+            s.getIncrement();\r\n+            assertEquals(\"SQL list should have been empty on sequence\"\r\n+                + \" fetch #\" + i + \" of #\" + amountToIncrement\r\n+                + \", but contained: \" + sql, 0, sql.size());\r\n+        }\r\n+    }\r\n+\r\n+    private Seq seqForClass(Class cls) {\r\n+        OpenJPAConfiguration conf = getConfiguration();\r\n+        ClassMetaData meta = conf.getMetaDataRepositoryInstance().getMetaData\r\n+            (cls, null, true);\r\n+        SequenceMetaData smeta = meta.getIdentitySequenceMetaData();\r\n+        return (smeta == null) ? conf.getSequenceInstance()\r\n+            : smeta.getInstance(null);\r\n+    }\r\n+}\r"},{"sha":"c3cf9d49e04237d7f54fa2273d430293558a0f00","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","status":"added","additions":239,"deletions":0,"changes":239,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,239 @@\n+/*\r\n+ * TestXMLSchemaParser.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:42 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.io.IOException;\r\n+import java.sql.Types;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n+import org.apache.openjpa.jdbc.schema.Index;\r\n+import org.apache.openjpa.jdbc.schema.PrimaryKey;\r\n+import org.apache.openjpa.jdbc.schema.Schema;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+import org.apache.openjpa.jdbc.schema.XMLSchemaParser;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestXMLSchemaParser extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+        \r\n+    protected JDBCConfiguration conf = null;\r\n+    private SchemaGroup _group = null;\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestXMLSchemaParser */\r\n+    public TestXMLSchemaParser() {\r\n+    }\r\n+    \r\n+    public TestXMLSchemaParser(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    public void setUp()\r\n+    throws Exception {\r\n+        this.conf = new JDBCConfigurationImpl();\r\n+        _group = getSchemaGroup();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Parses the schema group from the schema XML\r\n+     * resources in this package.\r\n+     */\r\n+    protected SchemaGroup parseSchemaGroup()\r\n+    throws IOException {\r\n+        XMLSchemaParser parser = new SCMSchemaParser(this.conf);\r\n+        parser.parse(TestXMLSchemaParser.class, false);\r\n+        parser.parse(TestSchema.class, false);    // will go up to package level\r\n+        return parser.getSchemaGroup();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Return the schema group to use in testing.  Returns\r\n+     * {@link #parseSchemaGroup} by default.\r\n+     */\r\n+    protected SchemaGroup getSchemaGroup()\r\n+    throws Exception {\r\n+        return parseSchemaGroup();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Checks the generated schema group for accuracy.\r\n+     */\r\n+    public void testSchemaParsing() {\r\n+        assertEquals(2, _group.getSchemas().length);\r\n+        assertEquals(\"SCHEMA1\", _group.getSchema(\"SCHEMA1\").getName());\r\n+        assertEquals(\"SCHEMA2\", _group.getSchema(\"SCHEMA2\").getName());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Checks the pased sequences.\r\n+     */\r\n+    public void testSequenceParsing() {\r\n+        Schema schema = _group.getSchema(\"SCHEMA1\");\r\n+        assertEquals(2, schema.getSequences().length);\r\n+        assertEquals(0, _group.getSchema(\"SCHEMA2\").getSequences().length);\r\n+        \r\n+        Sequence seq1 = schema.getSequence(\"SEQ1\");\r\n+        assertNotNull(seq1);\r\n+        assertEquals(\"SEQ1\", seq1.getName());\r\n+        assertEquals(seq1, _group.findSequence(\"SEQ1\"));\r\n+        assertEquals(seq1, _group.findSequence(\"SCHEMA1.SEQ1\"));\r\n+        assertEquals(1, seq1.getInitialValue());\r\n+        assertEquals(1, seq1.getIncrement());\r\n+        assertEquals(0, seq1.getAllocate());\r\n+        \r\n+        Sequence seq2 = schema.getSequence(\"SEQ2\");\r\n+        assertNotNull(seq2);\r\n+        assertEquals(3, seq2.getInitialValue());\r\n+        assertEquals(5, seq2.getIncrement());\r\n+        assertEquals(50, seq2.getAllocate());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Checks table and column parsing.\r\n+     */\r\n+    public void testTableColumnParsing() {\r\n+        Schema schema1 = _group.getSchema(\"SCHEMA1\");\r\n+        Table[] tables = schema1.getTables();\r\n+        assertEquals(2, tables.length);\r\n+        assertEquals(\"TABLE1\", tables[0].getName());\r\n+        assertEquals(\"TABLE3\", tables[1].getName());\r\n+        \r\n+        Column[] cols = tables[0].getColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(\"COL1\", cols[0].getName());\r\n+        assertEquals(\"COL2\", cols[1].getName());\r\n+        assertEquals(Types.VARCHAR, cols[0].getType());\r\n+        assertEquals(Types.FLOAT, cols[1].getType());\r\n+        assertTrue(cols[0].isNotNull());\r\n+        assertTrue(!cols[1].isNotNull());\r\n+        assertEquals(\"def\", cols[0].getDefault());\r\n+        assertNull(cols[1].getDefault());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Test that primary keys are resolved correctly.\r\n+     */\r\n+    public void testPrimaryKeyParsing() {\r\n+        Table table = _group.getSchema(\"SCHEMA1\").getTable(\"TABLE1\");\r\n+        PrimaryKey pk = table.getPrimaryKey();\r\n+        assertNotNull(pk);\r\n+        assertEquals(\"PK1\", pk.getName());\r\n+        assertTrue(pk.isLogical());\r\n+        assertEquals(1, pk.getColumns().length);\r\n+        assertEquals(table.getColumn(\"COL1\"), pk.getColumns()[0]);\r\n+        \r\n+        table = _group.getSchema(\"SCHEMA2\").getTable(\"TABLE2\");\r\n+        pk = table.getPrimaryKey();\r\n+        assertNotNull(pk);\r\n+        assertEquals(\"PK2\", pk.getName());\r\n+        assertTrue(!pk.isLogical());\r\n+        assertEquals(2, pk.getColumns().length);\r\n+        assertEquals(table.getColumn(\"COL1\"), pk.getColumns()[0]);\r\n+        assertEquals(table.getColumn(\"COL2\"), pk.getColumns()[1]);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Test that indexes are resolved correctly.\r\n+     */\r\n+    public void testIndexParsing() {\r\n+        Table table = _group.getSchema(\"SCHEMA1\").getTable(\"TABLE1\");\r\n+        Index idx = table.getIndex(\"IDX1\");\r\n+        assertNotNull(idx);\r\n+        assertTrue(idx.isUnique());\r\n+        assertEquals(1, idx.getColumns().length);\r\n+        assertEquals(table.getColumn(\"COL2\"), idx.getColumns()[0]);\r\n+        \r\n+        table = _group.getSchema(\"SCHEMA2\").getTable(\"TABLE2\");\r\n+        idx = table.getIndex(\"IDX2\");\r\n+        assertNotNull(idx);\r\n+        assertTrue(!idx.isUnique());\r\n+        assertEquals(2, idx.getColumns().length);\r\n+        assertEquals(table.getColumn(\"COL1\"), idx.getColumns()[0]);\r\n+        assertEquals(table.getColumn(\"COL2\"), idx.getColumns()[1]);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Test that foreign keys are resolved correctly.\r\n+     */\r\n+    public void testForeignKeyParsing() {\r\n+        Table table1 = _group.getSchema(\"SCHEMA1\").getTable(\"TABLE1\");\r\n+        Table table2 = _group.getSchema(\"SCHEMA2\").getTable(\"TABLE2\");\r\n+        \r\n+        ForeignKey fk = table1.getForeignKeys()[0];\r\n+        assertEquals(\"FK1\", fk.getName());\r\n+        assertNotNull(fk);\r\n+        assertEquals(ForeignKey.ACTION_RESTRICT, fk.getDeleteAction());\r\n+        Column[] cols = fk.getColumns();\r\n+        Column[] pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(2, pkCols.length);\r\n+        assertEquals(table1.getColumn(\"COL1\"), cols[0]);\r\n+        assertEquals(table2.getColumn(\"COL1\"), pkCols[0]);\r\n+        assertEquals(table1.getColumn(\"COL2\"), cols[1]);\r\n+        assertEquals(table2.getColumn(\"COL2\"), pkCols[1]);\r\n+        \r\n+        fk = table2.getForeignKeys()[0];\r\n+        assertEquals(\"FK2\", fk.getName());\r\n+        assertNotNull(fk);\r\n+        assertEquals(ForeignKey.ACTION_NONE, fk.getDeleteAction());\r\n+        cols = fk.getColumns();\r\n+        pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(1, cols.length);\r\n+        assertEquals(1, pkCols.length);\r\n+        assertEquals(table2.getColumn(\"COL2\"), cols[0]);\r\n+        assertEquals(table1.getColumn(\"COL1\"), pkCols[0]);\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        //main(TestXMLSchemaParser.class);\r\n+    }\r\n+    \r\n+    public static class SCMSchemaParser\r\n+            extends XMLSchemaParser {\r\n+        \r\n+        public SCMSchemaParser(JDBCConfiguration conf) {\r\n+            super(conf);\r\n+            setSuffix(\".scm\");\r\n+        }\r\n+    }\r\n+    \r\n+}\r"},{"sha":"7c12fd9af41fdf4bee7a3afcb313c0fd0cbbca1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * TestXMLSchemaSerializer.java\r\n+ *\r\n+ * Created on October 6, 2006, 4:47 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.io.OutputStreamWriter;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.SchemaParser;\r\n+import org.apache.openjpa.jdbc.schema.SchemaSerializer;\r\n+import org.apache.openjpa.jdbc.schema.XMLSchemaParser;\r\n+import org.apache.openjpa.jdbc.schema.XMLSchemaSerializer;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestXMLSchemaSerializer extends TestXMLSchemaParser{\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestXMLSchemaSerializer */\r\n+    public TestXMLSchemaSerializer() {\r\n+    }\r\n+    \r\n+    \r\n+    public TestXMLSchemaSerializer(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    protected SchemaGroup getSchemaGroup()\r\n+    throws Exception {\r\n+        // parse in the schema group, then serialize it to a buffer, then\r\n+        // recreate it and test againt that to make sure it's the same as the\r\n+        // original\r\n+        SchemaGroup group = parseSchemaGroup();\r\n+        SchemaSerializer ser = new XMLSchemaSerializer(this.conf);\r\n+        ser.addAll(group);\r\n+        \r\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n+        ser.serialize(new OutputStreamWriter(out), ser.PRETTY);\r\n+        byte[] bytes = out.toByteArray();\r\n+        \r\n+        SchemaParser parser = new XMLSchemaParser(this.conf);\r\n+        parser.parse(new InputStreamReader\r\n+                (new ByteArrayInputStream(bytes)), \"bytes\");\r\n+        return parser.getSchemaGroup();\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        //   main(TestXMLSchemaSerializer.class);\r\n+    }\r\n+}\r"},{"sha":"b67b47cb2a2cc7ff6985121df7aa5a5c75980f09","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestBulkUpdate extends AbstractTestCase {\r\n+\r\n+    public TestBulkUpdate(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Entity1.class);\r\n+        deleteAll(Entity2.class);\r\n+    }\r\n+\r\n+    public void testSimpleBulkUpdate() {\r\n+        for (int i = 1; i < 5; i++)\r\n+            testSimpleBulkUpdate(i);\r\n+    }\r\n+\r\n+    public void testSimpleBulkUpdate(int num) {\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        for (int i = 0; i < num; i++) {\r\n+            Entity1 e = new Entity1(i, \"value1\", i);\r\n+            em.persist(e);\r\n+        }\r\n+        endTx(em);\r\n+\r\n+        // test update\r\n+        startTx(em);\r\n+        Query updateQuery1 = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.stringField = 'value2', e.intField = 2\"\r\n+            + \" where e.stringField = :val\").\r\n+            setParameter(\"val\", \"value1\");\r\n+        assertEquals(num, updateQuery1.executeUpdate());\r\n+        assertEquals(0, updateQuery1.executeUpdate()); // should be updated\r\n+        endTx(em);\r\n+\r\n+        // test update with parameter\r\n+        startTx(em);\r\n+        Query updateQuery2 = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.stringField = :newval where e.stringField = :val\").\r\n+            setParameter(\"val\", \"value2\").\r\n+            setParameter(\"newval\", \"value3\");\r\n+        assertEquals(num, updateQuery2.executeUpdate());\r\n+        assertEquals(0, updateQuery2.executeUpdate()); // should be updated\r\n+        endTx(em);\r\n+\r\n+        // test update with 2 parameters\r\n+        startTx(em);\r\n+        Query updateQuery3 = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.stringField = :newval, e.intField = 999\"\r\n+            + \" where e.stringField = :val\").\r\n+            setParameter(\"val\", \"value3\").\r\n+            setParameter(\"newval\", \"value4\");\r\n+        assertEquals(num, updateQuery3.executeUpdate());\r\n+        assertEquals(0, updateQuery3.executeUpdate()); // should be updated\r\n+        endTx(em);\r\n+\r\n+        // test update with null value\r\n+        startTx(em);\r\n+        Query updateQuery4 = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.stringField = :nullval, e.intField = :intval\"\r\n+            + \" where e.stringField = :val\"\r\n+            + \" and e.intField = 999\").\r\n+            setParameter(\"val\", \"value4\").\r\n+            setParameter(\"intval\", new Integer(987)).\r\n+            setParameter(\"nullval\", null);\r\n+        assertEquals(num, updateQuery4.executeUpdate());\r\n+        assertEquals(0, updateQuery4.executeUpdate()); // should be updated\r\n+        endTx(em);\r\n+\r\n+        // test update with field refernece in update value\r\n+        // ### this seems to not be working\r\n+        startTx(em);\r\n+        Query updateFieldValue = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.intField = e.intField + 1\");\r\n+        assertEquals(num, updateFieldValue.executeUpdate());\r\n+        endTx(em);\r\n+\r\n+        startTx(em);\r\n+        Query deleteQuery = em.createQuery\r\n+            (\"delete from Entity1 e where e.stringField = :val\").\r\n+            setParameter(\"val\", null);\r\n+        assertEquals(num, deleteQuery.executeUpdate());\r\n+        assertEquals(0, deleteQuery.executeUpdate());\r\n+        endTx(em);\r\n+\r\n+        endEm(em);\r\n+    }\r\n+}\r\n+\r"},{"sha":"86f0c4274caa0e834eb90f9421e7347b8821b4e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","status":"added","additions":216,"deletions":0,"changes":216,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,216 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.common.apps.Course;\r\n+import org.apache.openjpa.persistence.common.apps.ArtCourse;\r\n+import org.apache.openjpa.persistence.common.apps.Department;\r\n+import org.apache.openjpa.persistence.common.apps.Student;\r\n+\r\n+public class TestEJBClauses extends AbstractTestCase {\r\n+\r\n+    public TestEJBClauses(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Course.class);\r\n+        deleteAll(Student.class);\r\n+        deleteAll(Department.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String name = \"\";\r\n+        List<Course> clist = new ArrayList<Course>();\r\n+        List<Department> dlist = new ArrayList<Department>();\r\n+\r\n+        for (int i = 0; i < 5; i++) {\r\n+            Course curr = new Course(\"Math \" + i, i * 2, i);\r\n+            Course acurr = new ArtCourse(i + 20, \"English\" + (2 * i));\r\n+            Department durr = new Department(\"CompSci\" + i, null, i + 2);\r\n+            clist.add(curr);\r\n+            clist.add(acurr);\r\n+            dlist.add(durr);\r\n+        }\r\n+\r\n+        Student stud = new Student(\"Jonathan\", clist, dlist);\r\n+        Student stud2 = new Student(\"Stam\", null, dlist);\r\n+        Student stud3 = new Student(\"John\", clist, null);\r\n+        Student stud4 = new Student(\"Bill\", null, null);\r\n+\r\n+        em.persist(stud);\r\n+        em.persist(stud2);\r\n+        em.persist(stud3);\r\n+        em.persist(stud4);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFromClause1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT o.name FROM Student o\";\r\n+\r\n+        List result = em.createQuery(query)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(4, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFromClause2() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT NEW apps.ArtCourse(e.name)\" +\r\n+            \"FROM Student e\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(4, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFromClause3() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT o.name \" +\r\n+            \"FROM Student o, Course c \" +\r\n+            \"WHERE o.course IS NULL AND o.department IS NULL\";\r\n+\r\n+        List ls = (List) em.createQuery(query)\r\n+            .getResultList();\r\n+        String uno = (String) ls.get(0);\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(1, ls.size());\r\n+        assertEquals(\"Bill\", uno);\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testWhereClause1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT distinct s.name \" +\r\n+            \"FROM Student s, Course d \" +\r\n+            \"WHERE d.courseId >= 4 AND s.department IS NOT NULL\";\r\n+\r\n+        List ls = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testWhereClause2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT distinct s.name \" +\r\n+            \"FROM Student s \" +\r\n+            \"WHERE\" +\r\n+            \" Exists(SELECT c FROM s.course c WHERE c.name LIKE 'Math%')\";\r\n+\r\n+        List ls = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+        assertTrue(ls.contains(\"Jonathan\"));\r\n+        assertTrue(ls.contains(\"John\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testClauseRangeVar() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT DISTINCT s FROM Student s, Student s2 \" +\r\n+            \"WHERE s.name = 'John' AND s2.name = 'Jonathan'\";\r\n+\r\n+        List ls = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(1, ls.size());\r\n+\r\n+        Student ret = (Student) ls.get(0);\r\n+        assertEquals(\"John\", ret.getName());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testClausePathExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String failure = \"SELECT DISTINCT s \" +\r\n+            \"FROM Student s WHERE\" +\r\n+            \" s.department.name = 'CompSci1'\";\r\n+\r\n+        try {\r\n+            List ls = em.createQuery(failure).getResultList();\r\n+            fail(\r\n+                \"cannot compose path expressions from a path expression that evaluates to a collection.\");\r\n+        }\r\n+        catch (Exception e) {\r\n+            //\r\n+        }\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testClausePathExpr2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String success =\r\n+            \"SELECT DISTINCT d.name FROM Student AS s, IN(s.department) d \";\r\n+\r\n+        List ls2 = em.createQuery(success).getResultList();\r\n+\r\n+        assertNotNull(ls2);\r\n+        assertEquals(5, ls2.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testCollMemberDecl() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String colldec = \"SELECT DISTINCT s.name \" +\r\n+            \"FROM Student s,\" +\r\n+            \" IN(s.department) d\" +\r\n+            \" WHERE d.name = 'CompSci2'\";\r\n+\r\n+        List ls = em.createQuery(colldec).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+        assertTrue(ls.contains(\"Jonathan\"));\r\n+        assertTrue(ls.contains(\"Stam\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * GroupBy , OrderBy clause is tested by testejbqlfunction under\r\n+     * functional directory.\r\n+     */\r\n+}\r"},{"sha":"9695742a18526c87eb7f2e1d274a71a415531007","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,163 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBDeleteUpdateImpl extends AbstractTestCase {\r\n+\r\n+    public TestEJBDeleteUpdateImpl() {\r\n+    }\r\n+\r\n+    public TestEJBDeleteUpdateImpl(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 runt1 = new RuntimeTest1(1);\r\n+        runt1.setStringField(\"runt1\");\r\n+        runt1.setSelfOneOne(new RuntimeTest1(2));\r\n+        RuntimeTest2 runt2 = new RuntimeTest2(3);\r\n+        runt2.setStringField(\"runt2\");\r\n+\r\n+        em.persist(runt1);\r\n+        em.persist(runt2);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpdate1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 ret = em.find(RuntimeTest1.class, 1);\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"runt1\", ret.getStringField());\r\n+        assertNotNull(ret.getSelfOneOne());\r\n+\r\n+        String ejbqlUpdate =\r\n+            \"UPDATE RuntimeTest1 x SET x.stringField = :strngfld WHERE x.stringField = :stdfield\";\r\n+        int updatedEntities = em.createQuery(ejbqlUpdate)\r\n+            .setParameter(\"strngfld\", \"runner13\")\r\n+            .setParameter(\"stdfield\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, updatedEntities);\r\n+\r\n+        endTx(em);\r\n+\r\n+        RuntimeTest1 ret2 = em.find(RuntimeTest1.class, 1);\r\n+        em.refresh(ret2);\r\n+\r\n+        assertNotNull(ret2);\r\n+        assertEquals(\"runner13\", ret2.getStringField());\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testUpdate2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbqlUpdate = \"UPDATE RuntimeTest1 x \" +\r\n+            \"SET x.stringField = :strngfld \" +\r\n+            \"WHERE x.stringField = :field \" +\r\n+            \"AND x.selfOneOne \" +\r\n+            \"IS NOT NULL\";\r\n+\r\n+        int upEntities = em.createQuery(ejbqlUpdate)\r\n+            .setParameter(\"strngfld\", \"upd\")\r\n+            .setParameter(\"field\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, upEntities);\r\n+\r\n+        RuntimeTest1 inst = em.find(RuntimeTest1.class, 1);\r\n+        em.refresh(inst);\r\n+\r\n+        assertNotNull(inst);\r\n+//\t\tassertEquals(\"upd\", inst.getStringField());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDelete1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbdelUpdate = \"DELETE FROM RuntimeTest1 s \" +\r\n+            \"WHERE s.stringField = :strngfld\";\r\n+        int delEntity = em.createQuery(ejbdelUpdate)\r\n+            .setParameter(\"strngfld\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, delEntity);\r\n+\r\n+        RuntimeTest1 del = em.find(RuntimeTest1.class, 1);\r\n+        assertNull(del);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDelete2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbdelUpdate =\r\n+            \"DELETE FROM RuntimeTest1 r WHERE r.stringField = ?1\";\r\n+        Query query = em.createQuery(ejbdelUpdate);\r\n+\r\n+        query.setParameter(1, \"runt1\");\r\n+        int ok = query.executeUpdate();\r\n+\r\n+        assertEquals(1, ok);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"68601d39e5c3e385b45f10ab18e81ae709c5ee96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBPolymorphicQuery extends AbstractTestCase {\r\n+\r\n+    public TestEJBPolymorphicQuery(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(RuntimeTest2.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        int run1 = 10;\r\n+        int run2 = 15;\r\n+\r\n+        for (int i = 0; i < run1; i++) {\r\n+            RuntimeTest1 rt = new RuntimeTest1(i);\r\n+            rt.setStringField(\"foo \" + i);\r\n+            em.persist(rt);\r\n+        }\r\n+\r\n+        for (int i = 10; i < run2; i++) {\r\n+            em.persist(new RuntimeTest2(i));\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * Ensures that when a select query is ran against an entity at the top of the hierarchy\r\n+     * that the result is its instances and that of all its subclass.\r\n+     */\r\n+    public void testPolymorphicSelect() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(15, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testPolymorphicDelete() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        int l = em.createQuery(\"Delete from RuntimeTest1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(15, l);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"7c38762075b285db895983c3d68693b636ef071e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,152 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.common.apps.Entity2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+@NamedQuery(name = \"setParam1\",\r\n+    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+public class TestEJBQueryInterface extends AbstractTestCase {\r\n+\r\n+    public TestEJBQueryInterface(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        int instNum = 10;\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        //create and persist multiple entity1 instances\r\n+        for (int i = 0; i < instNum; i++) {\r\n+            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\r\n+            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\r\n+            ent.setEntity2Field(ent2);\r\n+            em.persist(ent);\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testResultList() {\r\n+        EntityManager em = currentEntityManager();\r\n+        List list = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertEquals(10, list.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testGetSingleList() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String curr = 2 + \"\";\r\n+\r\n+        Entity1 ret =\r\n+            (Entity1) em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = 2\")\r\n+                .getSingleResult();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"string2\", ret.getStringField());\r\n+        assertEquals(4, ret.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExecuteUpdate() {\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = 2\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret, 1);\r\n+\r\n+        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = 22\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret2, 0);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetMaxResults() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setMaxResults(5)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(5, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetFirstResults() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setFirstResult(3)\r\n+            .getResultList();\r\n+\r\n+        Entity1 ent = (Entity1) l.get(0);\r\n+\r\n+        assertNotNull(ent);\r\n+        assertEquals(\"string3\", ent.getStringField());\r\n+        assertEquals(5, ent.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    // Tests Binding an argument to a named parameter.\r\n+    // pk, the named parameter --Not working yet--\r\n+    public void xxxtestSetParameter1() {\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        String curr = 2 + \"\";\r\n+\r\n+        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        ret = em.createNamedQuery(\"setParam1\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        endTx(em);\r\n+    }\r\n+}\r"},{"sha":"f41a7030942dddbf19a35f6f8f7630bbbed4b8be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"added","additions":316,"deletions":0,"changes":316,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,316 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.expressions;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBQLCondExpression extends AbstractTestCase {\r\n+\r\n+    private int userid1, userid2, userid3, userid4, userid5;\r\n+\r\n+    public TestEJBQLCondExpression(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CompUser.class);\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Address[] add =\r\n+            new Address[]{ new Address(\"43 Sansome\", \"SF\", \"USA\", \"94104\"),\r\n+                new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\r\n+                new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\r\n+                new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\r\n+                new Address(\"23 Bellflower\", \"Ogui\", \"NIGERIA\", \"02000\") };\r\n+\r\n+        CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 40, true);\r\n+        CompUser user2 = createUser(\"Shannon\", \"PC\", add[1], 36, false);\r\n+        CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\r\n+        CompUser user4 = createUser(\"Jacob\", \"LINUX\", add[3], 10, true);\r\n+        CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\r\n+\r\n+        em.persist(user1);\r\n+        userid1 = user1.getUserid();\r\n+        em.persist(user2);\r\n+        userid2 = user2.getUserid();\r\n+        em.persist(user3);\r\n+        userid3 = user3.getUserid();\r\n+        em.persist(user4);\r\n+        userid4 = user4.getUserid();\r\n+        em.persist(user5);\r\n+        userid5 = user5.getUserid();\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNothing() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT o FROM CompUser o\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"the size of the list is not 5\", 5, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testBetweenExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age BETWEEN 19 AND 40 AND o.computerName = 'PC'\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 2, result.size());\r\n+        assertTrue(\"result dont contain shannon\", result.contains(\"Shannon\"));\r\n+        assertTrue(\"result dont contain ugo\", result.contains(\"Ugo\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNotBetweenExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age NOT BETWEEN 19 AND 40 AND o.computerName= 'PC'\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age IN (29, 40, 10)\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(3, result.size());\r\n+        assertTrue(\"seetha is not in the list\", result.contains(\"Seetha\"));\r\n+        assertTrue(\"jacob is not in the list\", result.contains(\"Jacob\"));\r\n+        assertTrue(\"famzy is not in the list\", result.contains(\"Famzy\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNotInExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age NOT IN (29, 40, 10)\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(2, result.size());\r\n+        assertTrue(result.contains(\"Ugo\"));\r\n+        assertTrue(result.contains(\"Shannon\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testLikeExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.computerName FROM CompUser o WHERE o.name LIKE 'Sha%' AND o.computerName NOT IN ('PC')\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(0, result.size());\r\n+\r\n+        query =\r\n+            \"SELECT o.computerName FROM CompUser o WHERE o.name LIKE 'Sha%o_' AND o.computerName NOT IN ('UNIX')\";\r\n+\r\n+        result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+\r\n+        query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE '_J%'\";\r\n+\r\n+        result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNullExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age IS NOT NULL AND o.computerName = 'PC' \";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"the list size is not 2\", 2, result.size());\r\n+        assertTrue(\"the result doesnt contain ugo\", result.contains(\"Ugo\"));\r\n+        assertTrue(\"the result doesnt contain shannon\",\r\n+            result.contains(\"Shannon\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNullExpr2() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.address.country IS NULL\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testIsEmptyExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.nicknames IS NOT EMPTY\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testIsEmptyExpr2() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.nicknames IS EMPTY\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 5, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * TO BE TESTED LATER WITH A DIFF DATABASE\r\n+     * public void testMemberOfExpr(){}\r\n+     */\r\n+\r\n+    public void testExistExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT DISTINCT o.name FROM CompUser o WHERE EXISTS\" +\r\n+            \" (SELECT c FROM Address c WHERE c = o.address )\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 5, result.size());\r\n+        assertTrue(\"Seetha is not list\", result.contains(\"Seetha\"));\r\n+        assertTrue(\"Shannon is not list\", result.contains(\"Shannon\"));\r\n+        assertTrue(\"jacob is not list\", result.contains(\"Jacob\"));\r\n+        assertTrue(\"ugo is not list\", result.contains(\"Ugo\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNotExistExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT DISTINCT o.name FROM CompUser o WHERE NOT EXISTS\" +\r\n+                \" (SELECT s FROM CompUser s WHERE s.address.country = o.address.country)\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testAnyExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.address.zipcode = ANY (\" +\r\n+                \" SELECT s FROM CompUser s WHERE s.address.country IS NOT NULL )\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testConstructorExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT NEW persistence.common.apps.MaleUser(c.name, c.computerName, c.address, c.age, c.userid)\" +\r\n+                \" FROM CompUser c WHERE c.name = 'Seetha'\";\r\n+\r\n+        MaleUser male = (MaleUser) em.createQuery(query).getSingleResult();\r\n+\r\n+        assertNotNull(\"the list is null\", male);\r\n+        assertEquals(\"the names dont match\", \"Seetha\", male.getName());\r\n+        assertEquals(\"computer names dont match\", \"MAC\",\r\n+            male.getComputerName());\r\n+        assertEquals(\"the ages dont match\", 40, male.getAge());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public CompUser createUser(String name, String cName, Address add, int age,\r\n+        boolean isMale) {\r\n+        CompUser user = null;\r\n+        if (isMale) {\r\n+            user = new MaleUser();\r\n+            user.setName(name);\r\n+            user.setComputerName(cName);\r\n+            user.setAddress(add);\r\n+            user.setAge(age);\r\n+        } else {\r\n+            user = new FemaleUser();\r\n+            user.setName(name);\r\n+            user.setComputerName(cName);\r\n+            user.setAddress(add);\r\n+            user.setAge(age);\r\n+        }\r\n+        return user;\r\n+\t}\r\n+}\r"},{"sha":"670e08fefcea851e9347729243a44b6648064e52","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","status":"added","additions":397,"deletions":0,"changes":397,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,397 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.functions;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.Address;\r\n+import org.apache.openjpa.persistence.common.apps.CompUser;\r\n+import org.apache.openjpa.persistence.common.apps.FemaleUser;\r\n+import org.apache.openjpa.persistence.common.apps.MaleUser;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBQLFunction extends AbstractTestCase {\r\n+\r\n+    private int userid1, userid2, userid3, userid4, userid5, userid6;\r\n+\r\n+    public TestEJBQLFunction(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CompUser.class);\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Address[] add = new Address[]{\r\n+            new Address(\"43 Sansome\", \"SF\", \"United-Kingdom\", \"94104\"),\r\n+            new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\r\n+            new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\r\n+            new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\r\n+            new Address(\"23 Bellflower\", \"Ogui\", null, \"02000\"),\r\n+            new Address(\"22 Montgomery\", \"SF\", null, \"50054\") };\r\n+\r\n+        CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 36, true);\r\n+        CompUser user2 = createUser(\"Shannon \", \"PC\", add[1], 36, false);\r\n+        CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\r\n+        CompUser user4 = createUser(\"_Jacob\", \"LINUX\", add[3], 10, true);\r\n+        CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\r\n+        CompUser user6 = createUser(\"Shade\", \"UNIX\", add[5], 23, false);\r\n+\r\n+        em.persist(user1);\r\n+        userid1 = user1.getUserid();\r\n+        em.persist(user2);\r\n+        userid2 = user2.getUserid();\r\n+        em.persist(user3);\r\n+        userid3 = user3.getUserid();\r\n+        em.persist(user4);\r\n+        userid4 = user4.getUserid();\r\n+        em.persist(user5);\r\n+        userid5 = user5.getUserid();\r\n+        em.persist(user6);\r\n+        userid6 = user6.getUserid();\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testConcatSubStringFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid1);\r\n+        assertNotNull(\"user is null\", user);\r\n+        assertEquals(\"the name is not seetha\", \"Seetha\", user.getName());\r\n+\r\n+        String query = \"UPDATE CompUser e SET e.name = \" +\r\n+            \"CONCAT('Ablahum', SUBSTRING(e.name, LOCATE('e', e.name), 4)) \" +\r\n+            \"WHERE e.name='Seetha'\";\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertEquals(\"the result is not 1\", 1, result);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+\r\n+        assertNotNull(\"the user is null\", user);\r\n+        assertEquals(\"the users name is not AblahumSeet\", \"Ablahumeeth\",\r\n+            user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testConcatFunc2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid1);\r\n+        assertNotNull(\"the user is null\", user);\r\n+        assertEquals(\"the users name is not seetha\", user.getName(), \"Seetha\");\r\n+\r\n+        String query = \"UPDATE CompUser e \" +\r\n+            \"SET e.name = \" +\r\n+            \"CONCAT('', '') WHERE e.name='Seetha'\";\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertEquals(1, result);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"\", user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testTrimFunc3() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid2);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Shannon \", user.getName());\r\n+\r\n+        String query = \"UPDATE CompUser e SET \" +\r\n+            \"e.name = Trim(e.name) WHERE \" +\r\n+            \"e.name='Shannon '\";\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        user = em.find(CompUser.class, userid2);\r\n+        em.refresh(user);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Shannon\", user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testLowerFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid3);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Ugo\", user.getName());\r\n+\r\n+        String query = \"UPDATE CompUser e SET \" +\r\n+            \"e.name = LOWER(e.name) WHERE e.name='Ugo'\";\r\n+\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        user = em.find(CompUser.class, userid3);\r\n+        em.refresh(user);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"ugo\", user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpperFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid3);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Ugo\", user.getName());\r\n+\r\n+        String query = \"UPDATE CompUser e SET \" +\r\n+            \"e.name = UPPER(e.name) WHERE e.name='Ugo'\";\r\n+\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        user = em.find(CompUser.class, userid3);\r\n+        em.refresh(user);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"UGO\", user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testLengthFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT o.name \" +\r\n+            \"FROM CompUser o \" +\r\n+            \"WHERE LENGTH(o.address.country) = 3\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(\"Shannon \"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testArithmFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid1);\r\n+\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Seetha\", user.getName());\r\n+        assertEquals(36, user.getAge());\r\n+\r\n+        String query =\r\n+            \"UPDATE CompUser e SET e.age = ABS(e.age) WHERE e.name='Seetha'\";\r\n+        int num = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertNotNull(num);\r\n+        assertEquals(1, num);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+\r\n+        assertEquals(36, user.getAge());\r\n+\r\n+        //----------------------ABS Tested\r\n+\r\n+        query =\r\n+            \"UPDATE CompUser e SET e.age = SQRT(e.age) WHERE e.name='Seetha'\";\r\n+        num = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertNotNull(num);\r\n+        assertEquals(1, num);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+\r\n+        assertEquals(6, user.getAge());\r\n+\r\n+        //-------------------------SQRT Tested\r\n+\r\n+        query =\r\n+            \"UPDATE CompUser e SET e.age = MOD(e.age, 4) WHERE e.name='Seetha'\";\r\n+        num = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertNotNull(num);\r\n+        assertEquals(1, num);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+\r\n+        assertEquals(2, user.getAge());\r\n+\r\n+        //-------------------------MOD Tested\r\n+\r\n+        query = \"SELECT e.name FROM CompUser e WHERE SIZE(e.nicknames) = 6\";\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(0, result.size());\r\n+\r\n+        //------------------------SIZE Tested\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testGroupByHavingClause() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT c.name FROM CompUser c GROUP BY c.name HAVING c.name LIKE 'S%'\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(3, result.size());\r\n+        assertTrue(result.contains(\"Shannon \"));\r\n+        assertTrue(result.contains(\"Shade\"));\r\n+        assertTrue(result.contains(\"Seetha\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testOrderByClause() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT c.name FROM CompUser c WHERE c.name LIKE 'S%' ORDER BY c.name\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(3, result.size());\r\n+        assertTrue(result.contains(\"Shannon \"));\r\n+        assertTrue(result.contains(\"Seetha\"));\r\n+        assertTrue(result.contains(\"Shade\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testAVGAggregFunc() {\r\n+        /**\r\n+         * To be Tested: AVG, COUNT, MAX, MIN, SUM\r\n+         */\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT AVG(e.age) FROM CompUser e\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(25));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testCOUNTAggregFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT COUNT(c.name) FROM CompUser c\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(6l));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMAXAggregFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT DISTINCT MAX(c.age) FROM CompUser c\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(36));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMINAggregFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT DISTINCT MIN(c.age) FROM CompUser c\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(10));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSUMAggregFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT SUM(c.age) FROM CompUser c\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(153l));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public CompUser createUser(String name, String cName, Address add, int age,\r\n+        boolean isMale) {\r\n+        CompUser user = null;\r\n+        if (isMale) {\r\n+            user = new MaleUser();\r\n+            user.setName(name);\r\n+            user.setComputerName(cName);\r\n+            user.setAddress(add);\r\n+            user.setAge(age);\r\n+        } else {\r\n+            user = new FemaleUser();\r\n+            user.setName(name);\r\n+            user.setComputerName(cName);\r\n+            user.setAddress(add);\r\n+            user.setAge(age);\r\n+        }\r\n+        return user;\r\n+    }\r\n+}\r"},{"sha":"d7700ec192de96a6542ee87a0fbe33074738070b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,150 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.ArtCourse;\r\n+import org.apache.openjpa.persistence.common.apps.Course;\r\n+import org.apache.openjpa.persistence.common.apps.Department;\r\n+import org.apache.openjpa.persistence.common.apps.Student;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBJoins extends AbstractTestCase {\r\n+\r\n+    public TestEJBJoins(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Course.class);\r\n+        deleteAll(Student.class);\r\n+        deleteAll(Department.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String name = \"\";\r\n+        List<Course> clist = new ArrayList<Course>();\r\n+        List<Department> dlist = new ArrayList<Department>();\r\n+\r\n+        for (int i = 0; i < 5; i++) {\r\n+            Course curr = new Course(\"Math \" + i, i * 2, i);\r\n+            Course acurr = new ArtCourse(i + 20, \"English\" + (2 * i));\r\n+            Department durr = new Department(\"CompSci\" + i, null, i + 2);\r\n+            clist.add(curr);\r\n+            clist.add(acurr);\r\n+            dlist.add(durr);\r\n+        }\r\n+\r\n+        Student stud = new Student(\"Jonathan\", clist, dlist);\r\n+        Student stud2 = new Student(\"Stam\", null, dlist);\r\n+        Student stud3 = new Student(\"John\", clist, null);\r\n+        Student stud4 = new Student(\"Bill\", null, null);\r\n+\r\n+        em.persist(stud);\r\n+        em.persist(stud2);\r\n+        em.persist(stud3);\r\n+        em.persist(stud4);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInnerJoin() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT distinct o.name from Student o JOIN \" +\r\n+            \"o.course d WHERE d.name\" +\r\n+            \"='Math 4'\";\r\n+\r\n+        List ls = (List) em.createQuery(query)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+\r\n+        if (ls != null) {\r\n+            assertEquals(2, ls.size());\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testOuterJoin() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT distinct s.name FROM Student \" +\r\n+            \"s LEFT JOIN s.department d\";\r\n+\r\n+        List ls = (List) em.createQuery(query)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(4, ls.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFetchJoin1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT s FROM Student s JOIN FETCH s.name\";\r\n+\r\n+        List ls = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(4, ls.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFetchJoin2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT s \" +\r\n+            \"FROM Student s \" +\r\n+            \"JOIN FETCH s.name d\";\r\n+\r\n+        try {\r\n+            List ls = em.createQuery(query).getResultList();\r\n+            fail(\r\n+                \"Not permitted to specify an id variable for entities ref. by the right side of fetch join\");\r\n+        }\r\n+        catch (Exception e) {\r\n+            //suppose to throw an exception..should not pass\r\n+        }\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testLeftOuterJoin() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String ljoin =\r\n+            \"SELECT DISTINCT s.name FROM Student s LEFT OUTER JOIN s.department d \" +\r\n+                \"WHERE d.name = 'CompSci2'\";\r\n+\r\n+        List ls = em.createQuery(ljoin).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+\r\n+        assertTrue(ls.contains(\"Jonathan\"));\r\n+        assertTrue(ls.contains(\"Stam\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"adc65785222ba81cad78c03b8a21825ce51c19a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","status":"added","additions":211,"deletions":0,"changes":211,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,211 @@\n+/*\r\n+ * BaseKernelTest.java\r\n+ *\r\n+ * Created on October 9, 2006, 12:56 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.beans.BeanInfo;\r\n+import java.beans.Introspector;\r\n+import java.beans.PropertyDescriptor;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.*;\r\n+import javax.management.IntrospectionException;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public abstract class BaseKernelTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase\r\n+{    \r\n+    private static Map _sysprops = new HashMap();    \r\n+    \r\n+    /** Creates a new instance of BaseKernelTest */\r\n+    public BaseKernelTest() {\r\n+    }\r\n+    \r\n+    public BaseKernelTest(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+    \r\n+    protected OpenJPAEntityManager getPM() {\r\n+        return currentEntityManager();\r\n+    }\r\n+    \r\n+    protected OpenJPAEntityManager getPM(boolean optimistic,boolean retainValues) \r\n+    {\r\n+        OpenJPAEntityManager em = currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        if(em.getTransaction().isActive())\r\n+        {\r\n+            em.getTransaction().commit();\r\n+            em.setOptimistic(optimistic);\r\n+        }\r\n+\r\n+        return em;\r\n+    }\r\n+    \r\n+    protected  OpenJPAStateManager getStateManager(Object obj,EntityManager pm) {\r\n+        return getStateManager(obj,pm);\r\n+    }\r\n+    \r\n+    protected Object persist(Object ob) {\r\n+        //FIXME  - this is just a workaround \r\n+        //  Broker broker = .getBrokerFactory().newBroker();\r\n+        Broker broker = JPAFacadeHelper.toBroker(currentEntityManager());\r\n+        broker.begin();\r\n+        broker.persist(ob, null);\r\n+        Object id = broker.getObjectId(ob);\r\n+        broker.commit();\r\n+        broker.close();\r\n+        return id;\r\n+    }\r\n+    \r\n+\r\n+    protected Properties getProperties() {\r\n+        return getProperties(null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the runtime properties, optionally overriding or setting\r\n+     * some via the given array, which should be in the form\r\n+     * { key, val, key, val, ... }.\r\n+     */\r\n+    protected synchronized Properties getProperties(String[] props) {\r\n+        Properties p = new Properties(System.getProperties());\r\n+        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\r\n+        if (str != null && str.length() > 0) {\r\n+            // cache system properties to reduce load on file system\r\n+            Properties loaded = (Properties) _sysprops.get(str);\r\n+            if (loaded == null) {\r\n+                loaded = new Properties();\r\n+                ConfigurationProvider cp = (ConfigurationProvider) Configurations.getProperty(str, null);\r\n+\r\n+                if (cp != null)\r\n+                    loaded.putAll(cp.getProperties());\r\n+                _sysprops.put(str, loaded);\r\n+            }\r\n+            p.putAll(loaded);\r\n+        }\r\n+\r\n+        for (int i = 0; props != null && i < props.length; i += 2) {\r\n+            if (props[i + 1] != null) {\r\n+                // remove any duplicate kodo/openjpa property so we don't clash\r\n+                if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(5));\r\n+                else if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(8));\r\n+\r\n+                p.setProperty(props[i], props[i + 1]);\r\n+            } else {\r\n+                p.remove(props[i]);\r\n+            }\r\n+        }\r\n+        return p;\r\n+    }\r\n+//\r\n+//\r\n+//    /**\r\n+//     * Assert that the given List contain the exact same\r\n+//     * elements. This is different than the normal List contract, which\r\n+//     * states that list1.equals(list2) if each element e1.equals(e2).\r\n+//     * This method asserts that e1 == n2.\r\n+//     */\r\n+//    public static void assertIdentical(List c1, List c2) {\r\n+//        assertEquals(c1.size(), c2.size());\r\n+//        for (Iterator i1 = c1.iterator(), i2 = c2.iterator();\r\n+//            i1.hasNext() && i2.hasNext();)\r\n+//            assertTrue(i1.next() == i2.next());\r\n+//    }\r\n+//\r\n+//    /**\r\n+//     * Assert that the collection parameter is already ordered\r\n+//     * according to the specified comparator.\r\n+//     */\r\n+//    public void assertOrdered(Collection c, Comparator comp) {\r\n+//        List l1 = new LinkedList(c);\r\n+//        List l2 = new LinkedList(c);\r\n+//        assertEquals(l1, l2);\r\n+//        Collections.sort(l2, comp);\r\n+//        assertEquals(l1, l2);\r\n+//        Collections.sort(l1, comp);\r\n+//        assertEquals(l1, l2);\r\n+//    }\r\n+//\r\n+//    ////////////////////\r\n+//    // Assertion Helpers\r\n+//    ////////////////////\r\n+//\r\n+//    public void assertNotEquals(Object a, Object b) {\r\n+//        if (a == null && b != null)\r\n+//            return;\r\n+//        if (a != null && b == null)\r\n+//            return;\r\n+//        if (!(a.equals(b)))\r\n+//            return;\r\n+//        if (!(b.equals(a)))\r\n+//            return;\r\n+//\r\n+//        fail(\"expected !<\" + a + \">.equals(<\" + b + \">)\");\r\n+//    }\r\n+//\r\n+//    public void assertSize(int size, Object ob) {\r\n+//        if (ob == null) {\r\n+//            assertEquals(size, 0);\r\n+//            return;\r\n+//        }\r\n+//\r\n+//        if (ob instanceof Collection)\r\n+//            ob = ((Collection) ob).iterator();\r\n+//        if (ob instanceof Iterator) {\r\n+//            Iterator i = (Iterator) ob;\r\n+//            int count = 0;\r\n+//            while (i.hasNext()) {\r\n+//                count++;\r\n+//                i.next();\r\n+//            }\r\n+//\r\n+//            assertEquals(size, count);\r\n+//        } else\r\n+//            fail(\"assertSize: expected Collection, Iterator, \"\r\n+//                + \"Query, or Extent, but got \"\r\n+//                + ob.getClass().getName());\r\n+//    }\r\n+    \r\n+}\r"},{"sha":"8d81f7c9f6c53f569d73abfe37b202eb5a2f653c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,135 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class Test2EJBConcurrency extends AbstractTestCase {\r\n+\r\n+    private Object _id = null;\r\n+\r\n+    public Test2EJBConcurrency(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Entity1 b = new Entity1(3, \"STRING\", 10);\r\n+        em.persist(b);\r\n+        em.flush();\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test optimistic concurrency.\r\n+     */\r\n+    public void testOptConcurrency1()\r\n+        throws Exception {\r\n+        EntityManager em1 = currentEntityManager();\r\n+        startTx(em1);\r\n+\r\n+        EntityManager em2 = currentEntityManager();\r\n+        startTx(em2);\r\n+\r\n+        Entity1 b1 = (Entity1) em1.find(Entity1.class, 3);\r\n+        b1.setStringField(\"STRING2\");\r\n+        endTx(em1);\r\n+        assertEquals(\"b1.getstringField is not STRING2 as exp.\", \"STRING2\",\r\n+            b1.getStringField());\r\n+\r\n+        Entity1 b2 = (Entity1) em2.find(Entity1.class, 3);\r\n+        assertEquals(\"b2.getstringField is not STRING2 as exp.\", \"STRING2\",\r\n+            b2.getStringField());\r\n+        b2.setStringField(\"STRING3\");\r\n+        endTx(em2);\r\n+        assertEquals(\"b2.getstringField is not STRING3 as exp.\", \"STRING3\",\r\n+            b2.getStringField());\r\n+\r\n+        startTx(em1);\r\n+        b1 = (Entity1) em1.find(Entity1.class, 3);\r\n+        em1.refresh(b1);\r\n+        assertEquals(\"b1.getstringField is not STRING3 as exp.\", \"STRING2\",\r\n+            b1.getStringField());\r\n+        b1.setStringField(\"STRING4\");\r\n+        endTx(em1);\r\n+\r\n+        b2 = (Entity1) em2.find(Entity1.class, 3);\r\n+        assertEquals(\"b2.getstringField is not STRING3 as exp.\", \"STRING3\",\r\n+            b2.getStringField());\r\n+\r\n+        endEm(em1);\r\n+        endEm(em2);\r\n+    }\r\n+\r\n+    /**\r\n+     *\tTest optimistic concurrency.\r\n+     */\r\n+//\tpublic void testOptConcurrency2 ()\r\n+//\t\tthrows Exception\r\n+//\t{\r\n+//\t\tEntityManager em1 = currentEntityManager();\t\t\r\n+//\t\tstartTx(em1);\r\n+//\r\n+//\t\tEntityManager em2 = currentEntityManager();\t\t\r\n+//\t\tstartTx(em2);\r\n+//\r\n+//\t\tEntity1 b1 = (Entity1) em1.find (Entity1.class, 3);\r\n+//\t\tEntity1 b2 = (Entity1) em2.find (Entity1.class, 3);\r\n+//\r\n+//\t\tassertEquals (\"b1.getstringField is not STRING as exp.\",\"STRING\", b1.getStringField ());\r\n+//\t\tassertEquals (\"b2.getstringField is not STRING as exp.\",\"STRING\", b2.getStringField ());\r\n+//\r\n+//\t\tb1.setStringField (\"STRING2\");\r\n+//\t\tendTx(em1);\r\n+//\t\tassertEquals (\"b1.getstringField is not STRING as exp.\",\"STRING2\", b1.getStringField ());\r\n+//\r\n+//\t\tassertEquals (\"b2.getstringField is not STRING as exp.\",\"STRING\", b2.getStringField ());\r\n+//\t\tb2.setStringField (\"STRING3\");\r\n+//\r\n+//\t\ttry\r\n+//\t\t{\r\n+//\t\t\tendTx(em2);\r\n+//\t\t\tfail (\"OL Violation\");\r\n+//\t\t}\r\n+//\t\tcatch (Exception ole)\r\n+//\t\t{\r\n+//\t\t\t// expected\r\n+//\t\t}\r\n+//\t\t\r\n+//\t\trollbackTx(em2);\r\n+//\t\t\r\n+//\r\n+//    \tb2 = (Entity1) em2.find (Entity1.class, 3);\r\n+//\t\tassertEquals (\"b2.getstringField is not STRING2 as exp.\",\"STRING2\", b2.getStringField ());\r\n+//    \t\r\n+//\t\tendEm(em1);\r\n+//\t\tendEm(em2);\r\n+//\t}\r\n+}\r\n+\r"},{"sha":"176046a8e06fde1adc1bd79a8645ce3e9d6d90b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * TestAbstractMappedAppIdSuper.java\r\n+ *\r\n+ * Created on October 16, 2006, 2:00 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+public class TestAbstractMappedAppIdSuper extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestAbstractMappedAppIdSuper\r\n+     */\r\n+    public TestAbstractMappedAppIdSuper(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /* Fix Me - aokeke - Takes so much time to run */\r\n+//    public void testQuerySubclassWithDifferentIdClass()\r\n+//    throws Exception {\r\n+//        ConcreteMappedAppIdSub pc = new ConcreteMappedAppIdSub();\r\n+//        String pk = String.valueOf(System.currentTimeMillis());\r\n+//        pc.setPk(pk);\r\n+//        pc.setName(\"name\");\r\n+//        \r\n+//        OpenJPAEntityManager pm = getPM();\r\n+//        pm.begin();\r\n+//        pm.persist(pc);\r\n+//        pm.commit();\r\n+//        String pkd = pc.getPk();\r\n+//        Object oid = pm.getObjectId(pc);\r\n+//        endEm(pm,());\r\n+//        \r\n+//        pm = getPM();\r\n+//        String query = \"SELECT DISTINCT o FROM ConcreteMappedAppIdSub o WHERE o.pk = :p \";\r\n+//        OpenJPAQuery q = pm.createQuery(query);\r\n+//        \r\n+////        OpenJPAQuery q = pm.createNativeQuery(\"pk == :p\", ConcreteMappedAppIdSub.class);\r\n+//        //FIXME jthomas\r\n+//        \r\n+//        try \r\n+//        {\r\n+//            pc = (ConcreteMappedAppIdSub) q.setParameter(\"p\", pkd).getSingleResult();\r\n+//        } \r\n+//        catch (RuntimeException re) \r\n+//        {\r\n+////            bug(1170, re, \"Cannot query subclass of abstract mapped \"\r\n+////                    + \"appid type.\");\r\n+////            return;\r\n+//        }\r\n+//         \r\n+//        assertNotNull(pc);\r\n+//        assertEquals(pk, pc.getPk());\r\n+//        \r\n+//        pm.begin();\r\n+//        pm.remove(pc);\r\n+//        pm.commit();\r\n+//        endEm(pm,());\r\n+//    }\r\n+}\r"},{"sha":"c488c072b0a15848ea33dd1f8504a72ccc2af80a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","status":"added","additions":466,"deletions":0,"changes":466,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,466 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.lang.reflect.Array;\r\n+import java.text.Collator;\r\n+import java.util.Arrays;\r\n+import java.util.Comparator;\r\n+import java.util.Date;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.ArraysTest;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import junit.framework.AssertionFailedError;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/**\r\n+ * Test varying kinds of array values.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @author Abe White\r\n+ */\r\n+public class TestArrayValues2 extends BaseKernelTest {\r\n+\r\n+    private static double DOUBLE_PRECISION = 0.01D;\r\n+    public static float FLOAT_PRECISION = 0.01F;\r\n+\r\n+    public void testStringArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        String[] array = new String[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomString();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testLongArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Long[] array = new Long[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomLong();\r\n+        try {\r\n+            saveArray(array, false, false);\r\n+        } catch (AssertionFailedError afe) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testLongPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        long[] array = new long[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomLong().longValue();\r\n+        try {\r\n+            saveArray(array, true, false);\r\n+        } catch (AssertionFailedError afe) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testShortArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Short[] array = new Short[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomShort();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testShortPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        short[] array = new short[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomShort().shortValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testIntArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Integer[] array = new Integer[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomInt();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testIntPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        int[] array = new int[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomInt().intValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+// FixMe: Both tests hangs on Mysql\r\n+    /*public void testByteArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Byte[] array = new Byte[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomByte();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testBytePrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        byte[] array = new byte[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomByte().byteValue();\r\n+        saveArray(array, true, false);\r\n+    }*/\r\n+\r\n+    public void testBooleanArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Boolean[] array = new Boolean[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomBoolean();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testCharacterArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Character[] array = new Character[max];\r\n+        array[0] = new Character((char) 1);\r\n+        for (int i = 1; i < max; i++)\r\n+            array[i] = randomChar();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testCharacterPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        char[] array = new char[max];\r\n+        array[0] = 1;\r\n+        for (int i = 1; i < max; i++)\r\n+            array[i] = randomChar().charValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testCharacterPrimitiveClobArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        char[] array = new char[max];\r\n+        array[0] = 1;\r\n+        for (int i = 1; i < max; i++)\r\n+            array[i] = randomChar().charValue();\r\n+        saveArray(array, true, true);\r\n+    }\r\n+\r\n+    public void testBooleanPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        boolean[] array = new boolean[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomBoolean().booleanValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testFloatArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Float[] array = new Float[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomFloat();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testFloatPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        float[] array = new float[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomFloat().floatValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testDoubleArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Double[] array = new Double[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomDouble();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testDoublePrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        double[] array = new double[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomDouble().doubleValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testDateArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Date[] array = new Date[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomDate();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    /*Fix Me aokeke - Takes a lot of time to run */\r\n+//    public void testFirstClassObjectArray()throws Exception \r\n+//    {\r\n+//        int max = ((int) (Math.random() * 20)) + 5;\r\n+//        ArraysTest[] array = new ArraysTest[max];\r\n+//        for (int i = 0; i < max; i++)\r\n+//            array[i] = new ArraysTest();\r\n+//        saveArray(array, false, false);\r\n+//    }\r\n+\r\n+    private void saveArray(Object array, boolean primitive, boolean lob)\r\n+        throws Exception {\r\n+        try {\r\n+            saveArrayInternal(array, primitive, lob);\r\n+        } catch (Exception e) {\r\n+            throw e;\r\n+        } catch (Error error) {\r\n+            throw error;\r\n+        } finally {\r\n+            //\r\n+        }\r\n+    }\r\n+\r\n+    private void saveArrayInternal(Object vals, boolean primitive, boolean lob)\r\n+        throws Exception {\r\n+        Object[] array;\r\n+        if (primitive)\r\n+            array = convertPrimitiveArray(vals);\r\n+        else\r\n+            array = (Object[]) vals;\r\n+        Arrays.sort(array, new TestArraySorter());\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        ArraysTest test = new ArraysTest();\r\n+        pm.persist(test);\r\n+        int testID = test.getId();\r\n+\r\n+        setGetTestArray(test, vals, primitive, lob, true);\r\n+        endTx(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        ArraysTest retrievedObject = pm.find(ArraysTest.class, testID);\r\n+\r\n+        Object retrievedVals = setGetTestArray(retrievedObject, vals,\r\n+            primitive, lob, false);\r\n+        Object[] retrievedArray;\r\n+        if (primitive)\r\n+            retrievedArray = convertPrimitiveArray(retrievedVals);\r\n+        else\r\n+            retrievedArray = (Object[]) retrievedVals;\r\n+\r\n+        assertNotNull(retrievedArray);\r\n+        assertTrue(array.length != 0);\r\n+        assertEquals(array.length, retrievedArray.length);\r\n+        assertNotNull(array[0]);\r\n+        assertNotNull(retrievedArray[0]);\r\n+\r\n+        // make sure the classes of the keys are the same.\r\n+        assertEquals(array[0].getClass(), retrievedArray[0].getClass());\r\n+        Arrays.sort(retrievedArray, new TestArraySorter());\r\n+        for (int i = 0; i < array.length; i++)\r\n+            assertClassAndValueEquals(array[i], retrievedArray[i]);\r\n+\r\n+        pm.remove(retrievedObject);\r\n+        endTx(pm);\r\n+    }\r\n+\r\n+    private Object[] convertPrimitiveArray(Object array) throws Exception {\r\n+        int length = Array.getLength(array);\r\n+        Class type = Array.get(array, 0).getClass();\r\n+\r\n+        Object[] copy = (Object[]) Array.newInstance(type, length);\r\n+        for (int i = 0; i < length; i++)\r\n+            copy[i] = Array.get(array, i);\r\n+\r\n+        return copy;\r\n+    }\r\n+\r\n+    private void assertClassAndValueEquals(Object o1, Object o2) {\r\n+        assertTrue(\"First object was null\", o1 != null);\r\n+        assertTrue(\"Second object was null\", o2 != null);\r\n+\r\n+        assertTrue(\"Types did not match (class1=\"\r\n+            + o1.getClass().getName() + \", class2=\"\r\n+            + o2.getClass().getName() + \")\",\r\n+            o1.getClass().isAssignableFrom(o2.getClass()));\r\n+\r\n+        // floats and doubles are a little special: we only\r\n+        // compare them to a certain precision, after which\r\n+        // we give up.\r\n+        if (o1 instanceof Double)\r\n+            assertEquals(((Double) o1).doubleValue(),\r\n+                ((Double) o2).doubleValue(),\r\n+                DOUBLE_PRECISION);\r\n+        else if (o1 instanceof Float)\r\n+            assertEquals(((Float) o1).floatValue(),\r\n+                ((Float) o2).floatValue(),\r\n+                FLOAT_PRECISION);\r\n+        else\r\n+            assertEquals(\"Object did not match (class1=\"\r\n+                + o1.getClass().getName() + \", class2=\"\r\n+                + o2.getClass().getName() + \")\",\r\n+                o1, o2);\r\n+    }\r\n+\r\n+    /**\r\n+     * Generic setter/getter for setting the array.\r\n+     */\r\n+    private Object setGetTestArray(ArraysTest test, Object array,\r\n+        boolean primitive, boolean lob, boolean doSet)\r\n+        throws Exception {\r\n+        if (array == null)\r\n+            return null;\r\n+\r\n+        Object first = Array.get(array, 0);\r\n+        if (first instanceof Date) {\r\n+            if (doSet)\r\n+                test.setDate((Date[]) array);\r\n+            return test.getDate();\r\n+        } else if (first instanceof String) {\r\n+            if (doSet)\r\n+                test.setString((String[]) array);\r\n+            return test.getString();\r\n+        } else if (first instanceof Character) {\r\n+            if (doSet && !primitive)\r\n+                test.setCharacter((Character[]) array);\r\n+            else if (doSet && !lob)\r\n+                test.setCharacterP((char[]) array);\r\n+            else if (doSet)\r\n+                test.setCharacterPClob((char[]) array);\r\n+            else if (!primitive)\r\n+                return test.getCharacter();\r\n+            else if (!lob)\r\n+                return test.getCharacterP();\r\n+            else\r\n+                return test.getCharacterPClob();\r\n+            return null;\r\n+        } else if (first instanceof Double) {\r\n+            if (doSet && !primitive)\r\n+                test.setDouble((Double[]) array);\r\n+            else if (doSet)\r\n+                test.setDoubleP((double[]) array);\r\n+            else if (!primitive)\r\n+                return test.getDouble();\r\n+            else\r\n+                return test.getDoubleP();\r\n+            return null;\r\n+        } else if (first instanceof Byte) {\r\n+            if (doSet && !primitive)\r\n+                test.setByte((Byte[]) array);\r\n+            else if (doSet)\r\n+                test.setByteP((byte[]) array);\r\n+            else if (!primitive)\r\n+                return test.getByte();\r\n+            else\r\n+                return test.getByteP();\r\n+            return null;\r\n+        } else if (first instanceof Float) {\r\n+            if (doSet && !primitive)\r\n+                test.setFloat((Float[]) array);\r\n+            else if (doSet)\r\n+                test.setFloatP((float[]) array);\r\n+            else if (!primitive)\r\n+                return test.getFloat();\r\n+            else\r\n+                return test.getFloatP();\r\n+            return null;\r\n+        } else if (first instanceof Long) {\r\n+            if (doSet && !primitive)\r\n+                test.setLong((Long[]) array);\r\n+            else if (doSet)\r\n+                test.setLongP((long[]) array);\r\n+            else if (!primitive)\r\n+                return test.getLong();\r\n+            else\r\n+                return test.getLongP();\r\n+            return null;\r\n+        } else if (first instanceof Integer) {\r\n+            if (doSet && !primitive)\r\n+                test.setInt((Integer[]) array);\r\n+            else if (doSet)\r\n+                test.setIntP((int[]) array);\r\n+            else if (!primitive)\r\n+                return test.getInt();\r\n+            else\r\n+                return test.getIntP();\r\n+            return null;\r\n+        } else if (first instanceof Short) {\r\n+            if (doSet && !primitive)\r\n+                test.setShort((Short[]) array);\r\n+            else if (doSet)\r\n+                test.setShortP((short[]) array);\r\n+            else if (!primitive)\r\n+                return test.getShort();\r\n+            else\r\n+                return test.getShortP();\r\n+            return null;\r\n+        } else if (first instanceof Boolean) {\r\n+            if (doSet && !primitive)\r\n+                test.setBoolean((Boolean[]) array);\r\n+            else if (doSet)\r\n+                test.setBooleanP((boolean[]) array);\r\n+            else if (!primitive)\r\n+                return test.getBoolean();\r\n+            else\r\n+                return test.getBooleanP();\r\n+            return null;\r\n+        } else if (first instanceof ArraysTest) {\r\n+            if (doSet)\r\n+                test.setArraysTest((ArraysTest[]) array);\r\n+            return test.getArraysTest();\r\n+        }\r\n+\r\n+        fail(\"Unknown array type\");\r\n+        return null;\r\n+    }\r\n+\r\n+    private static class TestArraySorter\r\n+        implements Comparator {\r\n+\r\n+        private Collator collator = Collator.getInstance();\r\n+\r\n+        public int compare(Object o1, Object o2) {\r\n+            if (o1.equals(o2))\r\n+                return 0;\r\n+\r\n+            if (o1 instanceof Number) {\r\n+                return ((Number) o1).doubleValue() >\r\n+                    ((Number) o2).doubleValue() ? 1 : -1;\r\n+            } else if (o1 instanceof Date) {\r\n+                return ((Date) o1).before((Date) o2) ? 1 : -1;\r\n+            } else if (o1 instanceof ArraysTest) {\r\n+                return ((ArraysTest) o1).compareTo(o2);\r\n+            }\r\n+            return collator.compare(o1.toString(), o2.toString());\r\n+        }\r\n+    }\r\n+}\r\n+\r"},{"sha":"c9b5d1406ef7effbe51840d13e11dfea582c0e82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,125 @@\n+/*\r\n+ * TestBigDecimals.java\r\n+ *\r\n+ * Created on October 9, 2006, 6:07 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.math.BigDecimal;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n+import junit.framework.AssertionFailedError;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestBigDecimals extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestBigDecimals\r\n+     */\r\n+    public TestBigDecimals() {\r\n+    }\r\n+\r\n+    public TestBigDecimals(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void testBigDecimalDataIntegrity()\r\n+        throws Exception {\r\n+        try {\r\n+            BigDecimal bd = new BigDecimal(Math.random() * 10000000 + \"\");\r\n+            bd = bd.setScale(100);\r\n+            for (int i = 0; i < 50; i++) {\r\n+                bd = bd.movePointLeft(1);\r\n+                bigDecimalTest(bd);\r\n+            }\r\n+        }\r\n+        catch (AssertionFailedError e) {\r\n+            bug(3, e, \"Precision loss for BigDecimals\");\r\n+        }\r\n+    }\r\n+//    FixMe aokeke: Passes but takes a long time --commenting for resource sake\r\n+//    public void testBigBigDecimals()\r\n+//        throws Exception {\r\n+//        try {\r\n+//            BigDecimal bd = new BigDecimal(\"1234567890.\"\r\n+//                + \"12345678901234567890123456789012345678901234567890\"\r\n+//                + \"12345678901234567890123456789012345678901234567890\");\r\n+//\r\n+//            bigDecimalTest(bd);\r\n+//        } catch (AssertionFailedError e) {\r\n+//            bug(3, e, \"Precision loss for BigDecimals\");\r\n+//        }\r\n+//    }\r\n+\r\n+    public void bigDecimalTest(final BigDecimal bd) {\r\n+        OpenJPAEntityManager pm = null, pm2 = null;\r\n+\r\n+        try {\r\n+            pm = getPM();\r\n+            startTx(pm);\r\n+            AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n+            aftt.setTestBigDecimal(bd);\r\n+            pm.persist(aftt);\r\n+            endTx(pm);\r\n+            Object id = pm.getObjectId(aftt);\r\n+            pm.evict(aftt);\r\n+\r\n+            pm2 = getPM();\r\n+            startTx(pm);\r\n+            AllFieldTypesTest aftt2 = (AllFieldTypesTest) pm2.getObjectId(id);\r\n+\r\n+            // why wouldn't they be two different objects?\r\n+            assertTrue(\"identitcal field values\",\r\n+                bd != aftt2.getTestBigDecimal());\r\n+\r\n+            // this should always succeed\r\n+            assertEquals(bd,\r\n+                aftt2.getTestBigDecimal().setScale(bd.scale()));\r\n+\r\n+            // this will fail if we are losing scale\r\n+            assertEquals(bd, aftt2.getTestBigDecimal());\r\n+\r\n+            rollbackTx(pm);\r\n+        } catch (Throwable afe) {\r\n+            bug(3, afe, \"floating point precision loss\");\r\n+        } finally {\r\n+            if (pm != null) {\r\n+                //if (pm.getTransaction().isActive())\r\n+                //rollbackTx(pm,());\r\n+                endEm(pm);\r\n+            }\r\n+\r\n+            if (pm2 != null) {\r\n+                //if (pm2.getTransaction().isActive())\r\n+                //rollbackTx(pm2,());\r\n+                //pm2.close();\r\n+                endEm(pm2);\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"be3815011e0f1a0341b8852f2b9b3102fe9fa7e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * TestBrokerFactoryPooling.java\r\n+ *\r\n+ * Created on October 9, 2006, 6:10 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.kernel.Bootstrap;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+\r\n+public class TestBrokerFactoryPooling extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestBrokerFactoryPooling\r\n+     */\r\n+    public TestBrokerFactoryPooling(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void testPooling() {\r\n+        BrokerFactory bf0 = Bootstrap.getBrokerFactory();\r\n+        BrokerFactory bf1 = Bootstrap.getBrokerFactory();\r\n+        assertSame(bf0, bf1);\r\n+    }\r\n+}\r"},{"sha":"9dd214133e037f27b664c0cc76c9ec5ad1568282","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","status":"added","additions":242,"deletions":0,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,242 @@\n+/*\r\n+ * TestCalendarFields.java\r\n+ *\r\n+ * Created on October 9, 2006, 6:12 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.TimeZone;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.CalendarFields;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.util.JavaVersions;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestCalendarFields extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestCalendarFields\r\n+     */\r\n+    public TestCalendarFields(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CalendarFields.class);\r\n+    }\r\n+\r\n+    public void testFieldDefaultTimeZone() {\r\n+        CalendarFields cal = new CalendarFields();\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        cal.setSingapore(Calendar.\r\n+            getInstance(TimeZone.getTimeZone(\"America/New_York\")));\r\n+        pm.persist(cal);\r\n+        int id = cal.getId();\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        cal = (CalendarFields) pm.find(CalendarFields.class, id);\r\n+        assertEquals(TimeZone.getTimeZone(\"Asia/Singapore\"),\r\n+            cal.getSingapore().getTimeZone());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testTimeZoneEquals() {\r\n+        CalendarFields c1 = new CalendarFields();\r\n+        CalendarFields c2 = new CalendarFields();\r\n+        assertTimeZonesEquals(c1, c2);\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(c2);\r\n+        int id2 = c2.getId();\r\n+        assertTimeZonesEquals(c1, c2);\r\n+        endTx(pm);\r\n+        assertTimeZonesEquals(c1, c2);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        c2 = (CalendarFields) pm.find(CalendarFields.class, id2);\r\n+        assertTimeZonesEquals(c1, c2);\r\n+        assertTimeZonesEquals(c1, (CalendarFields) pm.detach(c2));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testCalendarQuery() {\r\n+        long time = 1136660560572L;\r\n+\r\n+        CalendarFields cal = new CalendarFields();\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        cal.getSingapore().setTime(new Date(time));\r\n+        pm.persist(cal);\r\n+        int id = cal.getId();\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+\r\n+        //FIXME jthomas       \r\n+        Date date = new Date(time + 100000);\r\n+        Calendar cals = Calendar.getInstance();\r\n+        cals.setTime(date);\r\n+\r\n+        String query =\r\n+            \"SELECT o FROM CalendarFields o WHERE o.singapore < :cal\";\r\n+        int size = pm.createQuery(query).setParameter(\"cal\", cals).\r\n+            getResultList().size();\r\n+\r\n+        assertEquals(1, size);\r\n+\r\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(new Date(time - 100000)));\r\n+//\r\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(new Date(time + 100000)));\r\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(new Date(time - 100000)));\r\n+//\r\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(newCalendar(new Date(time + 100000), null)));\r\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(newCalendar(new Date(time - 100000), null)));\r\n+//\r\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(newCalendar(new Date(time + 100000), null)));\r\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(newCalendar(new Date(time - 100000), null)));\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    private static Calendar newCalendar(Date date, String tz) {\r\n+        Calendar cal = Calendar.getInstance(\r\n+            tz == null ? TimeZone.getDefault() : TimeZone.getTimeZone(tz));\r\n+        cal.setTime(date);\r\n+        return cal;\r\n+    }\r\n+\r\n+    public void testMutateCalendarDirties() {\r\n+        CalendarFields c1 = new CalendarFields();\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(c1);\r\n+        int id = c1.getId();\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        c1 = pm.find(CalendarFields.class, id);\r\n+\r\n+        startTx(pm);\r\n+\r\n+        OpenJPAStateManager sm = getStateManager(c1, pm);\r\n+\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"gmt\").getIndex()));\r\n+\r\n+        // test setting to same value doesn't dirty the field\r\n+        /*\r\n+        setTimeInMillis(c1.getGmtc1.getGmt().getTime().getTime());\r\n+        c1.getGmt().setTime(c1.getGmt().getTime());\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"gmt\").getIndex()));\r\n+        */\r\n+\r\n+        // test changing time\r\n+        setTimeInMillis(c1.getGmt(), 12345);\r\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"gmt\").getIndex()));\r\n+\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"newYork\").getIndex()));\r\n+        // test mutate via \"add()\" method\r\n+        c1.getNewYork().add(Calendar.SECOND, -1);\r\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"newYork\").getIndex()));\r\n+\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"berlin\").getIndex()));\r\n+        // test mutate via \"setTimeZone()\" method\r\n+        c1.getBerlin().setTimeZone(TimeZone.getTimeZone(\"GMT\"));\r\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"berlin\").getIndex()));\r\n+\r\n+        // Calendar.set can only be subclassed in JDK 1.4+ (it is final in\r\n+        // 1.3), so we only run this test in JDK 1.4+\r\n+        if (JavaVersions.VERSION >= 4) {\r\n+            assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+                getField(\"singapore\").getIndex()));\r\n+            // test mutate via \"set()\" method\r\n+            c1.getSingapore().set(Calendar.YEAR, 1998);\r\n+            assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+                getField(\"singapore\").getIndex()));\r\n+        }\r\n+\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"pacific\").getIndex()));\r\n+        // test mutate via \"roll()\" method\r\n+        c1.getPacific().roll(Calendar.YEAR, 5);\r\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"pacific\").getIndex()));\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    private static void setTimeInMillis(Calendar cal, long millis) {\r\n+        // \"setTimeInMillis\" is protected in JDK 1.3, put public in 1.4 & 1.5\r\n+        try {\r\n+            // Equivalent to: cal.setTimeInMillis (millis);\r\n+            cal.getClass().getMethod(\"setTimeInMillis\",\r\n+                new Class[]{ long.class }).invoke(cal,\r\n+                new Object[]{ new Long(millis) });\r\n+        } catch (Exception e) {\r\n+            cal.setTime(new Date(millis));\r\n+        }\r\n+    }\r\n+\r\n+    private void assertTimeZonesEquals(CalendarFields c1, CalendarFields c2) {\r\n+        for (int i = 0; i < c1.getCalendars().size(); i++) {\r\n+            Calendar cal1 = (Calendar) c1.getCalendars().get(i);\r\n+            Calendar cal2 = (Calendar) c2.getCalendars().get(i);\r\n+\r\n+            if (cal1 != null && cal2 != null)\r\n+                assertEquals(cal1.getTimeZone().getID(),\r\n+                    cal2.getTimeZone().getID());\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"b7fcf05f4c899bdd1a0079c1e08049fbdf1a16d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","status":"added","additions":404,"deletions":0,"changes":404,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,404 @@\n+/*\r\n+ * TestCheckConsistency.java\r\n+ *\r\n+ * Created on October 9, 2006, 6:23 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestCheckConsistency extends BaseKernelTest {\r\n+\r\n+    private Object _oid = null;\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestCheckConsistency\r\n+     */\r\n+    public TestCheckConsistency(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        RuntimeTest1 pc = new RuntimeTest1();\r\n+        pc.setIntField(1);\r\n+        pc.setIntField1(1);\r\n+        _oid = persist(pc);\r\n+    }\r\n+\r\n+    public void testConsistentDatastoreTransaction() {\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(false);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        startTx(pm);\r\n+\r\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n+        pc.setIntField1(100);\r\n+\r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        npc.setIntField(2);\r\n+        npc.setIntField1(2);\r\n+        pm.persist(npc);\r\n+        pm.validateChanges();\r\n+\r\n+        assertEquals(100, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+\r\n+        pc.setIntField1(200);\r\n+        npc.setIntField1(300);\r\n+        endTx(pm);\r\n+\r\n+        assertEquals(200, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+        assertEquals(300, npc.getIntField1());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testConsistentDatastoreTransactionWithRollback() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(false);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        startTx(pm);\r\n+\r\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n+        pc.setIntField1(100);\r\n+\r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        pm.persist(npc);\r\n+        Object noid = pm.getObjectId(npc);\r\n+\r\n+        pm.validateChanges();\r\n+        assertEquals(100, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+\r\n+        pc.setIntField1(200);\r\n+        npc.setIntField1(300);\r\n+        rollbackTx(pm);\r\n+\r\n+        assertEquals(1, pc.getIntField1());\r\n+        assertFalse(pm.isPersistent(npc));\r\n+        assertEquals(0, npc.getIntField1());\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        try {\r\n+            RuntimeTest1 temp =\r\n+                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\r\n+            fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\r\n+                temp.getIntField1());\r\n+        } catch (Exception jonfe) {\r\n+        }\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    //FIXME jthomas\r\n+/*    \r\n+    public void testInconsistentDatastoreTransaction() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        pm.setOptimistic(false);\r\n+        pm.setRetainState(false);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        pm.begin();\r\n+  */\r\n+    //FIXME jthomas\r\n+    /*\r\n+   fetch.setReadLockLevel(pm.LOCK_NONE);\r\n+   fetch.setWriteLockLevel(pm.LOCK_NONE);\r\n+    */\r\n+    /*\r\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n+pc.setIntField(100);\r\n+\r\n+OpenJPAEntityManager pm2 = getPM();\r\n+pm2.begin();\r\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n+copy.setIntField(-1);\r\n+pm2.commit();\r\n+pm2.close();\r\n+\r\n+RuntimeTest1 npc = new RuntimeTest1();\r\n+pm.persist(npc);\r\n+\r\n+try {\r\n+   pm.validateChanges();\r\n+   fail(\"Didn't find inconsistency.\");\r\n+} catch (Exception jove) {\r\n+   //FIXME\r\n+   /*\r\n+   Throwable[] t = jove.getNestedExceptions();\r\n+   assertEquals(1, t.length);\r\n+   assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n+    */\r\n+//        }\r\n+\r\n+    /*        assertTrue(pm.getRollbackOnly());\r\n+           pm.rollback();\r\n+\r\n+           assertEquals(-1, pc.getIntField());\r\n+           assertFalse(pm.isPersistent(npc));\r\n+           endEm(pm,());\r\n+       }\r\n+    */\r\n+    public void testConsistentOptimisticTransaction() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(true);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        startTx(pm);\r\n+        boolean hasConn = hasConnection(pm);\r\n+\r\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n+        pc.setIntField1(100);\r\n+\r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        npc.setIntField(2);\r\n+        npc.setIntField1(2);\r\n+        pm.persist(npc);\r\n+\r\n+        pm.validateChanges();\r\n+        if (!hasConn)\r\n+            assertFalse(hasConnection(pm));\r\n+\r\n+        assertEquals(100, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+\r\n+        pc.setIntField1(200);\r\n+        npc.setIntField1(300);\r\n+        endTx(pm);\r\n+\r\n+        assertEquals(200, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+        assertEquals(300, npc.getIntField1());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    private boolean hasConnection(OpenJPAEntityManager pm) {\r\n+        return JPAFacadeHelper.toBroker(pm).hasConnection();\r\n+    }\r\n+\r\n+    public void testConsistentOptimisticTransactionWithRollback() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(true);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        startTx(pm);\r\n+        boolean hasConn = hasConnection(pm);\r\n+\r\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n+        pc.setIntField1(100);\r\n+\r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        pm.persist(npc);\r\n+        Object noid = pm.getObjectId(npc);\r\n+\r\n+        pm.validateChanges();\r\n+        if (!hasConn)\r\n+            assertFalse(hasConnection(pm));\r\n+\r\n+        assertEquals(100, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+\r\n+        pc.setIntField1(200);\r\n+        npc.setIntField1(300);\r\n+        rollbackTx(pm);\r\n+\r\n+        assertEquals(1, pc.getIntField1());\r\n+        assertFalse(pm.isPersistent(npc));\r\n+        assertEquals(0, npc.getIntField1());\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        try {\r\n+            RuntimeTest1 temp =\r\n+                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\r\n+\r\n+            fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\r\n+                temp.getIntField1());\r\n+        } catch (Exception jonfe) {\r\n+        }\r\n+    }\r\n+//FIXME \r\n+    /*\r\n+public void testInconsistentOptimisticTransactionWithoutRefresh() {\r\n+OpenJPAEntityManager pm = getPM();\r\n+pm.setRetainState(false);\r\n+pm.setOptimistic(true);\r\n+pm.validateChanges();        // no-op outside trans\r\n+pm.begin();\r\n+\r\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n+pc.setIntField(100);\r\n+\r\n+OpenJPAEntityManager pm2 = getPM();\r\n+pm2.begin();\r\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n+copy.setIntField(-1);\r\n+pm2.commit();\r\n+pm2.close();\r\n+\r\n+RuntimeTest1 npc = new RuntimeTest1();\r\n+pm.persist(npc);\r\n+Object noid = pm.getObjectId(npc);\r\n+\r\n+try {\r\n+   pm.validateChanges();\r\n+   fail(\"Didn't find inconsistency.\");\r\n+} catch (Exception jove) {\r\n+   //FIXME jthomas\r\n+   /*\r\n+   Throwable[] t = jove.getNestedExceptions();\r\n+   assertEquals(1, t.length);\r\n+   assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n+    */\r\n+    //     }\r\n+/*     assertFalse(pm.getRollbackOnly());\r\n+        \r\n+        try {\r\n+            pm.commit();\r\n+            fail(\"Committed inconsistent transaction.\");\r\n+        } catch (Exception je) {\r\n+        }\r\n+        \r\n+        assertEquals(-1, pc.getIntField());\r\n+        assertFalse(pm.isPersistent(npc));\r\n+        endEm(pm,());\r\n+        \r\n+        pm = getPM();\r\n+        try {\r\n+            pm.find(RuntimeTest1.class,noid);\r\n+            fail(\"Object should not exist.\");\r\n+        } catch (Exception jonfe) {\r\n+        }\r\n+        endEm(pm,());\r\n+    }\r\n+ */\r\n+\r\n+//FIXME \r\n+/*    \r\n+    public void testInconsistentOptimisticTransactionWithRefresh() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(true);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        pm.begin();\r\n+        \r\n+        RuntimeTest1 pc = pm.find(RuntimeTest1.class,_oid);\r\n+        pc.setIntField(100);\r\n+        \r\n+        OpenJPAEntityManager pm2 = getPM();\r\n+        pm2.begin();\r\n+        RuntimeTest1 copy = pm2.find(RuntimeTest1.class,_oid);\r\n+        copy.setIntField(-1);\r\n+        pm2.commit();\r\n+        pm2.close();\r\n+        \r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        pm.persist(npc);\r\n+        try {\r\n+            pm.validateChanges();\r\n+            fail(\"Didn't find inconsistency.\");\r\n+        } catch (Exception jove) {\r\n+            //FIXME jthomas\r\n+            /*\r\n+            Throwable[] t = jove.getNestedExceptions();\r\n+            assertEquals(1, t.length);\r\n+            assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n+             */\r\n+    //      }\r\n+    /*       assertFalse(pm.getRollbackOnly());\r\n+         pm.refresh(pc);\r\n+\r\n+         assertEquals(-1, pc.getIntField());\r\n+         assertTrue(pm.isPersistent(npc));\r\n+\r\n+         pc.setIntField(200);\r\n+         npc.setIntField(300);\r\n+         pm.commit();\r\n+\r\n+         assertEquals(200, pc.getIntField());\r\n+         assertTrue(pm.isPersistent(npc));\r\n+         assertEquals(300, npc.getIntField());\r\n+         endEm(pm,());\r\n+     }\r\n+    */\r\n+\r\n+//FIXME \r\n+\r\n+/*    \r\n+public void testInconsistentOptimisticTransactionWithRollback() {\r\n+OpenJPAEntityManager pm = getPM();\r\n+pm.setRetainState(false);\r\n+pm.setOptimistic(true);\r\n+pm.validateChanges();        // no-op outside trans\r\n+pm.begin();\r\n+\r\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n+pc.setIntField(100);\r\n+\r\n+OpenJPAEntityManager pm2 = getPM();\r\n+pm2.begin();\r\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n+copy.setIntField(-1);\r\n+pm2.commit();\r\n+pm2.close();\r\n+\r\n+RuntimeTest1 npc = new RuntimeTest1();\r\n+pm.persist(npc);\r\n+Object noid = pm.getObjectId(npc);\r\n+\r\n+try {\r\n+pm.validateChanges();\r\n+fail(\"Didn't find inconsistency.\");\r\n+} catch (Exception jove) {\r\n+//FIXME jthomas\r\n+/*\r\n+Throwable[] t = jove.getNestedExceptions();\r\n+assertEquals(1, t.length);\r\n+assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n+*/\r\n+    //      }\r\n+    /*       assertFalse(pm.getRollbackOnly());\r\n+          pm.rollback();\r\n+\r\n+          assertEquals(-1, pc.getIntField());\r\n+          assertFalse(pm.isPersistent(npc));\r\n+          endEm(pm,());\r\n+\r\n+          pm = getPM();\r\n+          try {\r\n+              pm.find(RuntimeTest1.class,_oid);\r\n+              fail(\"Object should not exist.\");\r\n+          } catch (Exception jonfe) {\r\n+          }\r\n+          endEm(pm,());\r\n+      }\r\n+\r\n+    */\r\n+}\r"},{"sha":"1cc5faf1ad97901844900f3dd92772a557ce5d7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * TestClassStringConstructor.java\r\n+ *\r\n+ * Created on October 16, 2006, 2:48 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestClassStringConstructor extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestClassStringConstructor\r\n+     */\r\n+    public TestClassStringConstructor(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(AppIdClassString.class);\r\n+    }\r\n+\r\n+    public void testConstructor() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+        AppIdClassString pc = new AppIdClassString(5);\r\n+        pm.persist(pc);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        pc = pm.find(AppIdClassString.class, new AppIdClassString.Idkey(\"5\"));\r\n+        assertEquals(5, pc.getPk());\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"22542de2a5d071741e5e980880c6ce018244274e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * TestConnectionRetainMode.java\r\n+ *\r\n+ * Created on October 10, 2006, 1:09 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+\r\n+public class TestConnectionRetainMode extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestConnectionRetainMode\r\n+     */\r\n+    public TestConnectionRetainMode() {\r\n+    }\r\n+\r\n+    public TestConnectionRetainMode(String str) {\r\n+        super(str);\r\n+    }\r\n+\r\n+    public void testOnDemand()\r\n+        throws Exception {\r\n+        doTest(\"on-demand\");\r\n+    }\r\n+\r\n+    public void testTransaction()\r\n+        throws Exception {\r\n+        doTest(\"transaction\");\r\n+    }\r\n+\r\n+    public void testPersistenceManager()\r\n+        throws Exception {\r\n+        doTest(\"persistence-manager\");\r\n+    }\r\n+\r\n+    public void doTest(String mode)\r\n+        throws Exception {\r\n+        Map props = new HashMap();\r\n+        props.put(\"openjpa.ConnectionRetainMode\", mode);\r\n+\r\n+        OpenJPAEntityManagerFactory factory = getEmf(props);\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) factory.createEntityManager();\r\n+        Object initialConnection = pm.getConnection();\r\n+\r\n+        try {\r\n+            checkPM(pm, initialConnection, mode);\r\n+\r\n+            pm.setOptimistic(true);\r\n+            startTx(pm);\r\n+\r\n+            Object optimisticConnection = pm.getConnection();\r\n+            checkPM(pm, initialConnection, mode);\r\n+            checkTransaction(pm, optimisticConnection, mode);\r\n+\r\n+            rollbackTx(pm);\r\n+            checkPM(pm, initialConnection, mode);\r\n+\r\n+            pm.setOptimistic(false);\r\n+            startTx(pm);\r\n+\r\n+            Object pessimisticConnection = pm.getConnection();\r\n+            checkPM(pm, initialConnection, mode);\r\n+            checkTransaction(pm, pessimisticConnection, mode);\r\n+\r\n+            rollbackTx(pm);\r\n+            checkPM(pm, initialConnection, mode);\r\n+        } finally {\r\n+\r\n+            rollbackTx(pm);\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    private void checkPM(OpenJPAEntityManager pm, Object c, String mode)\r\n+        throws Exception {\r\n+        if (\"persistence-manager\".equals(mode))\r\n+            assertEquals(c, pm.getConnection());\r\n+    }\r\n+\r\n+    private void checkTransaction(OpenJPAEntityManager pm, Object c,\r\n+        String mode)\r\n+        throws Exception {\r\n+        if (!\"on-demand\".equals(mode)\r\n+            || !pm.getOptimistic())\r\n+            assertEquals(c, pm.getConnection());\r\n+    }\r\n+}\r"},{"sha":"cb600f22d291ca5c8ed7e076e1e75b25f181d848","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,134 @@\n+/*\r\n+ * TestDateQueries.java\r\n+ *\r\n+ * Created on October 10, 2006, 1:28 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestDateQueries extends BaseKernelTest {\r\n+\r\n+    private OpenJPAEntityManager _pm = null;\r\n+    private Date _date = null;\r\n+    private Date _before = null;\r\n+    private Date _after = null;\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestDateQueries\r\n+     */\r\n+    public TestDateQueries() {\r\n+    }\r\n+\r\n+    public TestDateQueries(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        super.setUp();\r\n+\r\n+        SimpleDateFormat sdf = new SimpleDateFormat(\"MMMMM dd, yyyy\");\r\n+        _date = sdf.parse(\"April 26, 1978\");\r\n+        _before = sdf.parse(\"April 25, 1978\");\r\n+        _after = sdf.parse(\"April 27, 1978\");\r\n+        _pm = getPM();\r\n+\r\n+        // delete all existing instances\r\n+        deleteAll(AllFieldTypesTest.class);\r\n+\r\n+        // create some instances to query on\r\n+        startTx(_pm);\r\n+        AllFieldTypesTest test = new AllFieldTypesTest();\r\n+        test.setTestDate(_date);\r\n+        _pm.persist(test);\r\n+\r\n+        test = new AllFieldTypesTest();\r\n+        test.setTestDate(_before);\r\n+        _pm.persist(test);\r\n+\r\n+        test = new AllFieldTypesTest();\r\n+        test.setTestDate(_after);\r\n+        _pm.persist(test);\r\n+        endTx(_pm);\r\n+    }\r\n+\r\n+    public void testEquals() {\r\n+        Collection vals = executeQuery(\"testDate = :date\");\r\n+        assertEquals(1, vals.size());\r\n+        assertEquals(_date, ((AllFieldTypesTest) vals.iterator().next()).\r\n+            getTestDate());\r\n+    }\r\n+\r\n+    public void testNotEquals() {\r\n+        Collection vals = executeQuery(\"testDate <> :date\");\r\n+        assertEquals(2, vals.size());\r\n+    }\r\n+\r\n+    public void testBefore() {\r\n+        Collection vals = executeQuery(\"testDate < :date\");\r\n+        assertEquals(1, vals.size());\r\n+        assertEquals(_before, ((AllFieldTypesTest) vals.iterator().next()).\r\n+            getTestDate());\r\n+    }\r\n+\r\n+    public void testAfter() {\r\n+        Collection vals = executeQuery(\"testDate > :date\");\r\n+        assertEquals(1, vals.size());\r\n+        assertEquals(_after, ((AllFieldTypesTest) vals.iterator().next()).\r\n+            getTestDate());\r\n+    }\r\n+\r\n+    public void testOrderBy() {\r\n+        String query =\r\n+            \"SELECT o FROM AllFieldTypesTest o ORDER BY o.testDate ASC\";\r\n+        OpenJPAQuery q = _pm.createQuery(query);\r\n+        List vals = q.getResultList();\r\n+        assertEquals(3, vals.size());\r\n+\r\n+        Iterator i = vals.iterator();\r\n+        assertEquals(_before, ((AllFieldTypesTest) i.next()).getTestDate());\r\n+        assertEquals(_date, ((AllFieldTypesTest) i.next()).getTestDate());\r\n+        assertEquals(_after, ((AllFieldTypesTest) i.next()).getTestDate());\r\n+    }\r\n+\r\n+    private List executeQuery(String filter) {\r\n+        String query = \"SELECT o FROM AllFieldTypesTest o WHERE o.\" + filter;\r\n+        OpenJPAQuery q = _pm.createQuery(query);\r\n+        q.setParameter(\"date\", _date);\r\n+        return q.getResultList();\r\n+    }\r\n+}\r"},{"sha":"2af1960cf06e13ad9cc1f9e7f3bef28617476012","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"5a1f9031e06b3580a8bd9d1243c08605c5f7eeeb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","status":"added","additions":542,"deletions":0,"changes":542,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e6ef66842253616f2c1d445e92d74e920ac944e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","status":"added","additions":246,"deletions":0,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1dd5cd51e2f97d287b178ee10572361d5f252665","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c7303c147becc4034cc1568c521ea9e095589d3f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"ada5cb6dc35a3dfbb478c8eaeab3e388fddb15bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1fa4fbff4aa5cd5acb5e686e90155195258a38d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9fec0cf1e4e6a0d30a9ed53d7f71461a9934c5f0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","status":"added","additions":175,"deletions":0,"changes":175,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"ba8b0734b6f71cc44061a8442dc1431565882eb3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3d29870e9163654119601dddd47bd8177304338b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e32a2df40ca16eea952acd2f46801afa7926f4ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0d957e886ed8b26d20aae9fc73130b57bae81ff3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"2f6fbc97d556de360a45b028eddfba4655630e4f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e68aa14f5e28ef8f0cbc88f86d9b7734e46d9e4e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3ad9479125f2c2ef0ddba9077787411e4abd1ce7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"54296128dae9e6578b5f3f03479470bfc3efd2c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b3e1cdaa924a834a6dbc3e7d559a0e5fb09e3b78","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7e21c073753ae4b353425380c284145bcb17f9fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f3dd415d16488b5b3ce423f055a00a092e2b52bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3b58ec63ac083462b1def2d38ed5cda50db06d77","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","status":"added","additions":403,"deletions":0,"changes":403,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b3694d40a39e577430c086e36ad26592e9245f47","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"ecb040971a993081968b66f4ea1d27e821f20e66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"84eb02d42ab497ba9f4ed895e06de45a3e51a745","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","status":"added","additions":526,"deletions":0,"changes":526,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"876936f42be9dde72d13ee7e105036265467845f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","status":"added","additions":383,"deletions":0,"changes":383,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"45a2f579f4e60379a1ecf328a5a9c78511694b70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","status":"added","additions":232,"deletions":0,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"6c34c140e825264749d4d7f5807963d2677b106a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3cccc5af5777b2cf0f9a2e57bcea67faa1f62a72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1dd391385afbfac69aac152ba805a33bb3a24105","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","status":"added","additions":448,"deletions":0,"changes":448,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"973f1c667d8fa66d92b14e64a3266ee37b880e9f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7bf2c0c0da64dd43e076dad3a4cf809a20b1fb11","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1c1bc63041eb5d94fd6df2680d857ae0c9e07175","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"fc8ec1bed9fe50bcc1846c5d4b52afc6879f9697","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","status":"added","additions":291,"deletions":0,"changes":291,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"acc4ed82b8422fb26c160dcfdf86a9a35f7beac5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java","status":"added","additions":490,"deletions":0,"changes":490,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfaces.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"75b62841032145f6c879468e3791bd4d95b68f44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java","status":"added","additions":399,"deletions":0,"changes":399,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestManagedInterfacesAppId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1081310cf8a41b73e1a3625c69497590ba7d79a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"fa8cf90b18cd26956e7f2d15e7452248b81b25ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7030bf5268e25c5246e734b1af425357d411fa0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d2a725c657ef272055233f607e47eec7e34dd44a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","status":"added","additions":358,"deletions":0,"changes":358,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8f0016cd2bbc1f2d865b81b66f6b7a7a00d35a8c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"52757c30422daa7828e27aa960257ec63442a73d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","status":"added","additions":296,"deletions":0,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e24fa40819f6809ff6109b0ee6b907eceaadccf5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","status":"added","additions":431,"deletions":0,"changes":431,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a0ed72f0c31937845cf7bf876399b2aa65d7a958","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"217ed9909d4c89f41cb9affceb03e380964c8464","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","status":"added","additions":352,"deletions":0,"changes":352,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"146c89e65a15d6d50ad02c281ada5261c8aed77b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","status":"added","additions":274,"deletions":0,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a0d6cfd74c8965191280d91a8cb80f0171a11198","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9640b73b4cd675cca2b5536270f612c1bdf63fca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","status":"added","additions":526,"deletions":0,"changes":526,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f1530abc0afa2deab4dd59d45a6c451b81bc1eb3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","status":"added","additions":224,"deletions":0,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"eed98c213f67bf5537b1a7b66218525502fbb8c8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0b11839a75522843e8196aa9c91210974b09ca6d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"34ec684e2412acc330e6f9ca393063c7b0ddde15","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","status":"added","additions":300,"deletions":0,"changes":300,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a75f7b7f95374c65c85b082221d69f7995103537","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"bebd85980fe8fa724846310d54255ace8a73ff7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e8d0bd6d42021d87520d4ce522569c945162f676","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","status":"added","additions":509,"deletions":0,"changes":509,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"96ede50ea7398bce241cd63157cac157238c3064","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","status":"added","additions":780,"deletions":0,"changes":780,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9ba15d052b908010f7cac09ac5bf8bfda608fd2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","status":"added","additions":286,"deletions":0,"changes":286,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"de6d2c173d282bfe589c48906307d476be4a40c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"48b1baf86aeee0f1d2b6c2abc852b6702588e933","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"364ac2c5540a3c8cd857a34f8d2c579bbc63d9b7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a5feebce2c2d9c0e049ac1617e76f6281e8ba34a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","status":"added","additions":315,"deletions":0,"changes":315,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"ad72d7096c5e4714ed7b670e5c91e704908520f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","status":"added","additions":285,"deletions":0,"changes":285,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"99891b33d2891a78b9ddf5ccb07b21e5ee7d5c89","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","status":"added","additions":193,"deletions":0,"changes":193,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"22a1d524f41e82366769a673233d786b7833e0b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"dadf444a91ab6683986f750ec509daf03add0101","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"2ac792e6b7d5a0b60db873c65dec81d009c2306b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","status":"added","additions":994,"deletions":0,"changes":994,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f0a6b677cdc8443284c3baa7c4018290b6e47e9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"4db730cb429b13eef8cbcfab2f1d6731efaf5348","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8b6bc670c556d59e9e8877d2851a6272c254dd32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c518695a893c7c8b045cbcff41627015c17796d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","status":"added","additions":303,"deletions":0,"changes":303,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9dfa48c4b182c718d9ebdc7f24fcc019b2a9a227","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","status":"added","additions":269,"deletions":0,"changes":269,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8fa4b71c0cbb4c8743c2edf6ea0cfe2b7e130cbe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"cba4b84b1267744b9ffa1d147cd9d8f4b8ccff4a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3ea709582d4ef6fe85b771397a283f5271b0e860","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"06e1caa354fb6da13b59a55bc9ec4b7240e77180","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"306fb24afc81f4e9b44bde78d77415ca573ec90a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"03985a0ae6abd84da077004fdf8839265c0d880d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"52888111ea90db3eec889bb990adf68827e07fde","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"ae72e74cc4e9a54e3ed175f8c5c079f918023834","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"785c5b2434075f585a000d8b45306d3bbffdd16a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"5f7cc54fac34460721f53ed993be87e4259b5ace","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","status":"added","additions":277,"deletions":0,"changes":277,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9d9160c4ef7de03ca581f256f931c4b803fbeb06","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9eed34c0f9bdf2689287ef22d52af3e8f4681425","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e40231a8540677a7d4b63caed40f20a17a0fad40","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3f00d0b290d760c48f7236becfc0a81df9810d24","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d2df17774e283e193adb6697f018f0f59e2f087b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"89a13b05a9b927ddc118f49cfa46885be8502605","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d80e3cb72bd06c0e6db361aa666c9792fb658cd9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f8f3cbaaf0eeef1e0cf4397221b1cad517160b69","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3e39acd015a3346ab4bf78cba05652e6bb67517f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0e14d1d85d260c15c27da20d8ae1bebbee3be3c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"049fbbdccdcc2c2d1bb87b57a1d8061a4e233f8c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c60fe71fd85b97e090840bb07ec2ba386452bacd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"65d8ab79903eb596453e4a42a16e3045c099b18e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f6876eff3e0cc98f3ca1d070fde6102d59c837c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"aceda12ec8f7281d81a6db4beb401ba0daabf179","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3b07331aa5fcddc640b9644a4a713b06bf9641f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1329034c50535c7b17b07478601b3e10871c0ab1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"4de76f87d2f4b16f94b93b22c2ce25f44e99b203","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"921f36338f625bb6921a2409a5f5c5ace1411b71","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b3c5c589810c322644fe903c9236529d81adf17d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b78871db380149a5c8c3761668087f167aa7eee0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"09b6437441310a3a4a8f4024eb2e5c317cf48253","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"61521be35b75bdd1bb7a447ec427fbf17ed29255","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b2cf940cf6a90d1bdbe03811131da793d132d0b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"76fdb8d9d9580bde24aeb8b621c4e41ff58ca44f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d0cf3273dd639d69beaaaf4b1a646f5e8df0558a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"32a05dc24e209f1c9358640c09dc51cbd107605f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7a2706dc8fad98acb41126a12a5a5a48ada4676d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e68eb4564360c59687d7db73637c015fb1ac41a4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e8dcaeca77167b086eb0c4c49d0fb0d2c982b3d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9423e945cb05bffdec0d6648ec6f01bf4fa8d8e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"76a6b094af3e6eb6db5ee467095b6857c83b4672","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b5d427fb17b9f4664c926069a009d44ccebbbb6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"758deeb5a9ee0f35ac972af1c031d876fccc214e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"14247d40279385d0548ea589359bc40c880a640e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"560a64db4498d57928b63279ad639a2ff5efea04","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"88da6c720dc3ad3bcfd774510e00c09b17ef4357","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"adf8f7474a42904ba9d7234753903cd700fe9109","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"f1b6a3020b8b3e9b4ebdf1cc4460803fea147fff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"47dfb154e2d70cd5e6d15f54c53d23644c1206a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"3be85ef49636aa196c01285ed90f07774f9cee79","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9e83e4e8863748f92b5e3bf37a345c41bf798c5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c1324dee33cbdee39568f770ca5cab14a3bfbdd2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c673ca87c2ff32593e2d13b187aed879f31a16d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"731052b5f2ec1e2a696ef06bbebbc3582d393371","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"79ae0c8f55960637dfbe8242dce26fa578d20432","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"910f1820cd7ea78823d8b4945fc7c65c44164a3d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9e29bd703a395caebe0d13a5d9128fb68c2122c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"07b1f81a5e1a8441a5beb426427312a2cf6db44e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"682c40b40e9fa2b40103589309de70082ddca9e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9738e23c4101e1083ed9f3bf70db1b8b11ef67a0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e482cfa450532637a0ae9f50ac8f697c99e114b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8549a8d59e7850d2fa21c2dc00087ba7f8aa0374","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"701c8bfc7f7c31231c8981027ade78aa6b732b79","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1f7c91027bf59d6edc8f823ef689ad8bc474ade7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e112338a4b5bfa3d51e97323a8807500eae07a59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d7b1014eb8b59fbe1c07fab8b790b4a04ab4e6ca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"2a93b1f136376ea89c1dea973b5ffea067a91792","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"ca4a3dd0d92b3956706a09a3ac4d90ccd923c9f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"e0286c852481ccdfe76d67c3a940c6248418e86c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8e8e9d2a11de099e44313fc29cfb82d776fb398c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"79bd50179a17f0c73b2e04ed81ffa3665d268f06","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"9c48120d4e63b889c5b3c6b288dca50218b4059c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"fc372068d9105d2b5cd56dd7b491845c3dd4eeb8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a114a3034c55c784a26d8e9ec84b1e9f66a37cd5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"198823c71dd86998d5d91d41b71df8936c6b84a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"afacb7af114e565375339090e14d2e860decf0d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"85a05845a383f3e9181b928c20cfdf112d9a6b2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"d21c0eb85bdbf4ac582c9222089a2372c845460b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c5d567562ab53f317859d8c99c7f7e7688629226","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"cb17b720d0462bc9962461005bc1c678db079c65","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"c77f1776143dfd4f07cd3faf3ac84328d8a58af9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"a30900e6e48439740c6af03c8f9ac2d6a8223709","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"7b0f22873da4a2a1a7f332a8dcad8a57f0fd86b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"12519351f061c739767b2627b6809551e09ea5be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"953c80d03c78209ce6c6e9f7c7f0bbe824bae1e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"b3d1dae0a4ac4e13fc1d5ece437b50f41daac4f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"8ebb73fa66a893056fb83a6ca3d220a5b47f75b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"0c9e9e281f21808678e5339587784e85f822b6d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","status":"added","additions":291,"deletions":0,"changes":291,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"4c18b9bf7ae4968535528a41efc12389f2022de4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"84e09f583e5451abe62fd77145b00698c3c87380","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"1e5368101776da53fbbc3975270cf13aa89b20f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"},{"sha":"789f854404860c802520a6a409fb903de7d77280","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36"}]}

